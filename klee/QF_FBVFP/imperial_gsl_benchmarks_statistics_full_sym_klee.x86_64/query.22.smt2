(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_statistics_full_sym_klee.x86_64/query.22.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24)))))
 (fp.geq ?x31 ?x33))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24)))))
 (fp.leq ?x31 ?x36))))))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x54 (concat (select data0 (_ bv13 32)) (concat (select data0 (_ bv12 32)) (concat (select data0 (_ bv11 32)) ?x45)))))
 (let ((?x61 ((_ to_fp 11 53) (concat (select data0 (_ bv15 32)) (concat (select data0 (_ bv14 32)) ?x54)))))
 (fp.geq ?x61 ?x33))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x54 (concat (select data0 (_ bv13 32)) (concat (select data0 (_ bv12 32)) (concat (select data0 (_ bv11 32)) ?x45)))))
 (let ((?x61 ((_ to_fp 11 53) (concat (select data0 (_ bv15 32)) (concat (select data0 (_ bv14 32)) ?x54)))))
 (fp.leq ?x61 ?x36))))))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x71 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x80 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x71)))))
 (let ((?x87 ((_ to_fp 11 53) (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x80)))))
 (fp.geq ?x87 ?x33))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x71 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x80 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x71)))))
 (let ((?x87 ((_ to_fp 11 53) (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x80)))))
 (fp.leq ?x87 ?x36))))))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x97 (concat (select data0 (_ bv26 32)) (concat (select data0 (_ bv25 32)) (select data0 (_ bv24 32))))))
 (let ((?x106 (concat (select data0 (_ bv29 32)) (concat (select data0 (_ bv28 32)) (concat (select data0 (_ bv27 32)) ?x97)))))
 (let ((?x113 ((_ to_fp 11 53) (concat (select data0 (_ bv31 32)) (concat (select data0 (_ bv30 32)) ?x106)))))
 (fp.geq ?x113 ?x33))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x97 (concat (select data0 (_ bv26 32)) (concat (select data0 (_ bv25 32)) (select data0 (_ bv24 32))))))
 (let ((?x106 (concat (select data0 (_ bv29 32)) (concat (select data0 (_ bv28 32)) (concat (select data0 (_ bv27 32)) ?x97)))))
 (let ((?x113 ((_ to_fp 11 53) (concat (select data0 (_ bv31 32)) (concat (select data0 (_ bv30 32)) ?x106)))))
 (fp.leq ?x113 ?x36))))))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x123 (concat (select data0 (_ bv34 32)) (concat (select data0 (_ bv33 32)) (select data0 (_ bv32 32))))))
 (let ((?x132 (concat (select data0 (_ bv37 32)) (concat (select data0 (_ bv36 32)) (concat (select data0 (_ bv35 32)) ?x123)))))
 (let ((?x139 ((_ to_fp 11 53) (concat (select data0 (_ bv39 32)) (concat (select data0 (_ bv38 32)) ?x132)))))
 (fp.geq ?x139 ?x33))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x123 (concat (select data0 (_ bv34 32)) (concat (select data0 (_ bv33 32)) (select data0 (_ bv32 32))))))
 (let ((?x132 (concat (select data0 (_ bv37 32)) (concat (select data0 (_ bv36 32)) (concat (select data0 (_ bv35 32)) ?x123)))))
 (let ((?x139 ((_ to_fp 11 53) (concat (select data0 (_ bv39 32)) (concat (select data0 (_ bv38 32)) ?x132)))))
 (fp.leq ?x139 ?x36))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
(let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
(let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24)))))
(let ((?x148 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv0 64))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x149 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x148)))
(let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
(let ((?x54 (concat (select data0 (_ bv13 32)) (concat (select data0 (_ bv12 32)) (concat (select data0 (_ bv11 32)) ?x45)))))
(let ((?x61 ((_ to_fp 11 53) (concat (select data0 (_ bv15 32)) (concat (select data0 (_ bv14 32)) ?x54)))))
(let ((?x153 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x61 ?x149) ((_ to_fp 11 53) (_ bv4611686018427387904 64)))))
(let ((?x154 (fp.add roundNearestTiesToEven ?x149 ?x153)))
(let ((?x71 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
(let ((?x80 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x71)))))
(let ((?x87 ((_ to_fp 11 53) (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x80)))))
(let ((?x158 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x87 ?x154) ((_ to_fp 11 53) (_ bv4613937818241073152 64)))))
(let ((?x159 (fp.add roundNearestTiesToEven ?x154 ?x158)))
(let ((?x97 (concat (select data0 (_ bv26 32)) (concat (select data0 (_ bv25 32)) (select data0 (_ bv24 32))))))
(let ((?x106 (concat (select data0 (_ bv29 32)) (concat (select data0 (_ bv28 32)) (concat (select data0 (_ bv27 32)) ?x97)))))
(let ((?x113 ((_ to_fp 11 53) (concat (select data0 (_ bv31 32)) (concat (select data0 (_ bv30 32)) ?x106)))))
(let ((?x163 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x113 ?x159) ((_ to_fp 11 53) (_ bv4616189618054758400 64)))))
(let ((?x164 (fp.add roundNearestTiesToEven ?x159 ?x163)))
(let ((?x123 (concat (select data0 (_ bv34 32)) (concat (select data0 (_ bv33 32)) (select data0 (_ bv32 32))))))
(let ((?x132 (concat (select data0 (_ bv37 32)) (concat (select data0 (_ bv36 32)) (concat (select data0 (_ bv35 32)) ?x123)))))
(let ((?x139 ((_ to_fp 11 53) (concat (select data0 (_ bv39 32)) (concat (select data0 (_ bv38 32)) ?x132)))))
(let ((?x168 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x139 ?x164) ((_ to_fp 11 53) (_ bv4617315517961601024 64)))))
(let ((?x169 (fp.add roundNearestTiesToEven ?x164 ?x168)))
(not (and (not (fp.isNaN ?x169)) (not (fp.gt ?x169 ?x36)))))))))))))))))))))))))))))))
(check-sat)
(exit)
