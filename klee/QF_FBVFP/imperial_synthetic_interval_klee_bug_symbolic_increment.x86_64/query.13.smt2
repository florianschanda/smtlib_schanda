(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_interval_klee_bug_symbolic_increment.x86_64/query.13.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun initial0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun increment1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select initial0 (_ bv2 32)) (concat (select initial0 (_ bv1 32)) (select initial0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select initial0 (_ bv3 32)) ?x15))))
 (not (fp.isNaN ?x19)))))
(assert
 (let ((?x27 (concat (select increment1 (_ bv2 32)) (concat (select increment1 (_ bv1 32)) (select increment1 (_ bv0 32))))))
 (let ((?x30 ((_ to_fp 8 24) (concat (select increment1 (_ bv3 32)) ?x27))))
 (not (fp.isNaN ?x30)))))
(assert
 (let ((?x15 (concat (select initial0 (_ bv2 32)) (concat (select initial0 (_ bv1 32)) (select initial0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select initial0 (_ bv3 32)) ?x15))))
 (let ((?x38 (ite (fp.isInfinite ?x19) (ite (fp.gt ?x19 ((_ to_fp 8 24) (_ bv0 32))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x38)))))
(assert
 (let ((?x27 (concat (select increment1 (_ bv2 32)) (concat (select increment1 (_ bv1 32)) (select increment1 (_ bv0 32))))))
 (let ((?x30 ((_ to_fp 8 24) (concat (select increment1 (_ bv3 32)) ?x27))))
 (let ((?x43 (ite (fp.isInfinite ?x30) (ite (fp.gt ?x30 ((_ to_fp 8 24) (_ bv0 32))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x43)))))
(assert
 (let ((?x27 (concat (select increment1 (_ bv2 32)) (concat (select increment1 (_ bv1 32)) (select increment1 (_ bv0 32))))))
(let ((?x30 ((_ to_fp 8 24) (concat (select increment1 (_ bv3 32)) ?x27))))
(let ((?x15 (concat (select initial0 (_ bv2 32)) (concat (select initial0 (_ bv1 32)) (select initial0 (_ bv0 32))))))
(let ((?x19 ((_ to_fp 8 24) (concat (select initial0 (_ bv3 32)) ?x15))))
(let ((?x53 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ?x19) ((_ to_fp 11 53) roundNearestTiesToEven ?x30))))
(let ((?x48 ((_ to_fp 11 53) roundNearestTiesToEven (fp.add roundTowardNegative ?x19 ?x30))))
(let (($x59 (and (and (not (fp.isNaN ?x48)) (not (fp.isNaN ?x53))) (not (fp.gt ?x48 ?x53)))))
(not $x59)))))))))
(check-sat)
(exit)
