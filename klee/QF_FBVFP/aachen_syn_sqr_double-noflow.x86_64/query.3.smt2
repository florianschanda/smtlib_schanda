(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_syn_sqr_double-noflow.x86_64/query.3.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (not (fp.isNaN ?x31))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x34 (fp.abs ?x31)))
 (let ((?x38 (fp.mul roundNearestTiesToEven ?x34 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (not (fp.isNaN ?x38))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x42 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x31))))
 (not (fp.isNaN ?x42)))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x42 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x31))))
 (let ((?x34 (fp.abs ?x31)))
 (let ((?x38 (fp.mul roundNearestTiesToEven ?x34 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (not (fp.gt ?x38 ?x42)))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x34 (fp.abs ?x31)))
 (not (fp.isNaN ?x34)))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x42 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x31))))
 (let ((?x49 (fp.mul roundNearestTiesToEven ?x42 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (not (fp.isNaN ?x49))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x42 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x31))))
 (let ((?x49 (fp.mul roundNearestTiesToEven ?x42 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (let ((?x34 (fp.abs ?x31)))
 (not (fp.lt ?x34 ?x49)))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
(let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
(let ((?x42 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x31))))
(let ((?x34 (fp.abs ?x31)))
(not (fp.eq ?x34 ?x42))))))))
(check-sat)
(exit)
