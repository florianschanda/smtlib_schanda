(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_statistics_klee_bug.x86_64/query.13.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.leq ?x31 ?x36)))))))
(assert
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x60 (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54))))
 (let ((?x61 ((_ to_fp 11 53) ?x60)))
 (not (fp.isNaN ?x61)))))))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
 (let ((?x71 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) ?x30)) (_ bv4625787914760591770 64) ?x30)))
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x60 (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54))))
 (let ((?x74 (ite (fp.gt ((_ to_fp 11 53) ?x60) ((_ to_fp 11 53) ?x71)) ?x60 ?x71)))
 (let ((?x77 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x74)) (_ bv4625844209755933901 64) ?x74)))
 (not (fp.isNaN ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x77)) (_ bv4623282787467866931 64) ?x77))))))))))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
 (let ((?x71 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) ?x30)) (_ bv4625787914760591770 64) ?x30)))
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x60 (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54))))
 (let ((?x74 (ite (fp.gt ((_ to_fp 11 53) ?x60) ((_ to_fp 11 53) ?x71)) ?x60 ?x71)))
 (let ((?x77 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x74)) (_ bv4625844209755933901 64) ?x74)))
 (not (fp.gt ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x77)) (_ bv4623282787467866931 64) ?x77)) ?x36)))))))))))))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
 (let ((?x87 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) ?x30)) (_ bv4625787914760591770 64) ?x30)))
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x60 (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54))))
 (let ((?x90 (ite (fp.lt ((_ to_fp 11 53) ?x60) ((_ to_fp 11 53) ?x87)) ?x60 ?x87)))
 (let ((?x93 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x90)) (_ bv4625844209755933901 64) ?x90)))
 (not (fp.isNaN ((_ to_fp 11 53) (ite (fp.lt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x93)) (_ bv4623282787467866931 64) ?x93))))))))))))))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
 (let ((?x87 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) ?x30)) (_ bv4625787914760591770 64) ?x30)))
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x60 (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54))))
 (let ((?x90 (ite (fp.lt ((_ to_fp 11 53) ?x60) ((_ to_fp 11 53) ?x87)) ?x60 ?x87)))
 (let ((?x93 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x90)) (_ bv4625844209755933901 64) ?x90)))
 (let (($x100 (fp.lt ((_ to_fp 11 53) (ite (fp.lt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x93)) (_ bv4623282787467866931 64) ?x93)) ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))
 (not $x100))))))))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4626322717216342016 64))))
(let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
(let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(let ((?x108 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv0 64))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x109 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x108)))
(let ((?x69 ((_ to_fp 11 53) (_ bv4625787914760591770 64))))
(let ((?x113 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x69 ?x109) ((_ to_fp 11 53) (_ bv4611686018427387904 64)))))
(let ((?x114 (fp.add roundNearestTiesToEven ?x109 ?x113)))
(let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
(let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
(let ((?x60 (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54))))
(let ((?x61 ((_ to_fp 11 53) ?x60)))
(let ((?x118 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x61 ?x114) ((_ to_fp 11 53) (_ bv4613937818241073152 64)))))
(let ((?x119 (fp.add roundNearestTiesToEven ?x114 ?x118)))
(let ((?x67 ((_ to_fp 11 53) (_ bv4625844209755933901 64))))
(let ((?x123 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x67 ?x119) ((_ to_fp 11 53) (_ bv4616189618054758400 64)))))
(let ((?x124 (fp.add roundNearestTiesToEven ?x119 ?x123)))
(let ((?x65 ((_ to_fp 11 53) (_ bv4623282787467866931 64))))
(let ((?x128 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x65 ?x124) ((_ to_fp 11 53) (_ bv4617315517961601024 64)))))
(let ((?x129 (fp.add roundNearestTiesToEven ?x124 ?x128)))
(not (and (not (fp.isNaN ?x129)) (not (fp.gt ?x129 ?x36)))))))))))))))))))))))))))
(check-sat)
(exit)
