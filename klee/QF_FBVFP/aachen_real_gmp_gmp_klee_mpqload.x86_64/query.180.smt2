(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun i0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(declare-fun const_arr31 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr22 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select i0 (_ bv2 32)) (concat (select i0 (_ bv1 32)) (select i0 (_ bv0 32))))))
 (let ((?x20 ((_ to_fp 11 53) roundNearestTiesToEven (concat (select i0 (_ bv3 32)) ?x15))))
 (or (fp.isNaN ?x20) (fp.lt ?x20 ((_ to_fp 11 53) (_ bv0 64)))))))
(assert
 (let ((?x15 (concat (select i0 (_ bv2 32)) (concat (select i0 (_ bv1 32)) (select i0 (_ bv0 32))))))
 (let ((?x20 ((_ to_fp 11 53) roundNearestTiesToEven (concat (select i0 (_ bv3 32)) ?x15))))
 (= (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x20) ((_ to_fp 11 53) fresh_to_ieee_bv_!0)))))
(assert
 (let ((?x44 (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) fresh_to_ieee_bv_!0)) (_ bv2047 64))) (_ bv64 64))))
(let ((?x51 ((_ extract 31 0) (bvmul (_ bv8 64) (bvsub (_ bv1 64) ((_ sign_extend 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551553 64) ?x44))))))))
(let ((?x67 (store (store (store (store const_arr31 (_ bv0 32) (_ bv1 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x71 (store (store (store (store ?x67 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x74 (store (store (store ?x71 ?x51 (_ bv1 8)) (bvadd (_ bv1 32) ?x51) (_ bv0 8)) (bvadd (_ bv2 32) ?x51) (_ bv0 8))))
(let ((?x77 (store (store (store ?x74 (bvadd (_ bv3 32) ?x51) (_ bv0 8)) (bvadd (_ bv4 32) ?x51) (_ bv0 8)) (bvadd (_ bv5 32) ?x51) (_ bv0 8))))
(let ((?x79 (store (store ?x77 (bvadd (_ bv6 32) ?x51) (_ bv0 8)) (bvadd (_ bv7 32) ?x51) (_ bv0 8))))
(let ((?x84 (concat (select ?x79 (_ bv2 32)) (concat (select ?x79 (_ bv1 32)) (select ?x79 (_ bv0 32))))))
(let ((?x90 (concat (select ?x79 (_ bv5 32)) (concat (select ?x79 (_ bv4 32)) (concat (select ?x79 (_ bv3 32)) ?x84)))))
(let ((?x94 (concat (select ?x79 (_ bv7 32)) (concat (select ?x79 (_ bv6 32)) ?x90))))
(let ((?x105 (store (store (store (store const_arr22 (_ bv0 32) (_ bv1 8)) (_ bv1 32) (_ bv2 8)) (_ bv2 32) (_ bv3 8)) (_ bv3 32) (_ bv3 8))))
(let ((?x110 (store (store (store (store ?x105 (_ bv4 32) (_ bv4 8)) (_ bv5 32) (_ bv4 8)) (_ bv6 32) (_ bv4 8)) (_ bv7 32) (_ bv4 8))))
(let ((?x119 (store (store (store (store ?x110 (_ bv8 32) (_ bv5 8)) (_ bv9 32) (_ bv5 8)) (_ bv10 32) (_ bv5 8)) (_ bv11 32) (_ bv5 8))))
(let ((?x127 (store (store (store (store ?x119 (_ bv12 32) (_ bv5 8)) (_ bv13 32) (_ bv5 8)) (_ bv14 32) (_ bv5 8)) (_ bv15 32) (_ bv5 8))))
(let ((?x136 (store (store (store (store ?x127 (_ bv16 32) (_ bv6 8)) (_ bv17 32) (_ bv6 8)) (_ bv18 32) (_ bv6 8)) (_ bv19 32) (_ bv6 8))))
(let ((?x144 (store (store (store (store ?x136 (_ bv20 32) (_ bv6 8)) (_ bv21 32) (_ bv6 8)) (_ bv22 32) (_ bv6 8)) (_ bv23 32) (_ bv6 8))))
(let ((?x152 (store (store (store (store ?x144 (_ bv24 32) (_ bv6 8)) (_ bv25 32) (_ bv6 8)) (_ bv26 32) (_ bv6 8)) (_ bv27 32) (_ bv6 8))))
(let ((?x160 (store (store (store (store ?x152 (_ bv28 32) (_ bv6 8)) (_ bv29 32) (_ bv6 8)) (_ bv30 32) (_ bv6 8)) (_ bv31 32) (_ bv6 8))))
(let ((?x169 (store (store (store (store ?x160 (_ bv32 32) (_ bv7 8)) (_ bv33 32) (_ bv7 8)) (_ bv34 32) (_ bv7 8)) (_ bv35 32) (_ bv7 8))))
(let ((?x177 (store (store (store (store ?x169 (_ bv36 32) (_ bv7 8)) (_ bv37 32) (_ bv7 8)) (_ bv38 32) (_ bv7 8)) (_ bv39 32) (_ bv7 8))))
(let ((?x185 (store (store (store (store ?x177 (_ bv40 32) (_ bv7 8)) (_ bv41 32) (_ bv7 8)) (_ bv42 32) (_ bv7 8)) (_ bv43 32) (_ bv7 8))))
(let ((?x193 (store (store (store (store ?x185 (_ bv44 32) (_ bv7 8)) (_ bv45 32) (_ bv7 8)) (_ bv46 32) (_ bv7 8)) (_ bv47 32) (_ bv7 8))))
(let ((?x201 (store (store (store (store ?x193 (_ bv48 32) (_ bv7 8)) (_ bv49 32) (_ bv7 8)) (_ bv50 32) (_ bv7 8)) (_ bv51 32) (_ bv7 8))))
(let ((?x209 (store (store (store (store ?x201 (_ bv52 32) (_ bv7 8)) (_ bv53 32) (_ bv7 8)) (_ bv54 32) (_ bv7 8)) (_ bv55 32) (_ bv7 8))))
(let ((?x217 (store (store (store (store ?x209 (_ bv56 32) (_ bv7 8)) (_ bv57 32) (_ bv7 8)) (_ bv58 32) (_ bv7 8)) (_ bv59 32) (_ bv7 8))))
(let ((?x225 (store (store (store (store ?x217 (_ bv60 32) (_ bv7 8)) (_ bv61 32) (_ bv7 8)) (_ bv62 32) (_ bv7 8)) (_ bv63 32) (_ bv7 8))))
(let ((?x234 (store (store (store (store ?x225 (_ bv64 32) (_ bv8 8)) (_ bv65 32) (_ bv8 8)) (_ bv66 32) (_ bv8 8)) (_ bv67 32) (_ bv8 8))))
(let ((?x242 (store (store (store (store ?x234 (_ bv68 32) (_ bv8 8)) (_ bv69 32) (_ bv8 8)) (_ bv70 32) (_ bv8 8)) (_ bv71 32) (_ bv8 8))))
(let ((?x250 (store (store (store (store ?x242 (_ bv72 32) (_ bv8 8)) (_ bv73 32) (_ bv8 8)) (_ bv74 32) (_ bv8 8)) (_ bv75 32) (_ bv8 8))))
(let ((?x258 (store (store (store (store ?x250 (_ bv76 32) (_ bv8 8)) (_ bv77 32) (_ bv8 8)) (_ bv78 32) (_ bv8 8)) (_ bv79 32) (_ bv8 8))))
(let ((?x266 (store (store (store (store ?x258 (_ bv80 32) (_ bv8 8)) (_ bv81 32) (_ bv8 8)) (_ bv82 32) (_ bv8 8)) (_ bv83 32) (_ bv8 8))))
(let ((?x274 (store (store (store (store ?x266 (_ bv84 32) (_ bv8 8)) (_ bv85 32) (_ bv8 8)) (_ bv86 32) (_ bv8 8)) (_ bv87 32) (_ bv8 8))))
(let ((?x282 (store (store (store (store ?x274 (_ bv88 32) (_ bv8 8)) (_ bv89 32) (_ bv8 8)) (_ bv90 32) (_ bv8 8)) (_ bv91 32) (_ bv8 8))))
(let ((?x290 (store (store (store (store ?x282 (_ bv92 32) (_ bv8 8)) (_ bv93 32) (_ bv8 8)) (_ bv94 32) (_ bv8 8)) (_ bv95 32) (_ bv8 8))))
(let ((?x298 (store (store (store (store ?x290 (_ bv96 32) (_ bv8 8)) (_ bv97 32) (_ bv8 8)) (_ bv98 32) (_ bv8 8)) (_ bv99 32) (_ bv8 8))))
(let ((?x306 (store (store (store (store ?x298 (_ bv100 32) (_ bv8 8)) (_ bv101 32) (_ bv8 8)) (_ bv102 32) (_ bv8 8)) (_ bv103 32) (_ bv8 8))))
(let ((?x314 (store (store (store (store ?x306 (_ bv104 32) (_ bv8 8)) (_ bv105 32) (_ bv8 8)) (_ bv106 32) (_ bv8 8)) (_ bv107 32) (_ bv8 8))))
(let ((?x322 (store (store (store (store ?x314 (_ bv108 32) (_ bv8 8)) (_ bv109 32) (_ bv8 8)) (_ bv110 32) (_ bv8 8)) (_ bv111 32) (_ bv8 8))))
(let ((?x330 (store (store (store (store ?x322 (_ bv112 32) (_ bv8 8)) (_ bv113 32) (_ bv8 8)) (_ bv114 32) (_ bv8 8)) (_ bv115 32) (_ bv8 8))))
(let ((?x338 (store (store (store (store ?x330 (_ bv116 32) (_ bv8 8)) (_ bv117 32) (_ bv8 8)) (_ bv118 32) (_ bv8 8)) (_ bv119 32) (_ bv8 8))))
(let ((?x346 (store (store (store (store ?x338 (_ bv120 32) (_ bv8 8)) (_ bv121 32) (_ bv8 8)) (_ bv122 32) (_ bv8 8)) (_ bv123 32) (_ bv8 8))))
(let ((?x354 (store (store (store (store ?x346 (_ bv124 32) (_ bv8 8)) (_ bv125 32) (_ bv8 8)) (_ bv126 32) (_ bv8 8)) (_ bv127 32) (_ bv8 8))))
(let ((?x360 (concat (_ bv0 56) (select (store ?x354 (_ bv128 32) (_ bv9 8)) ((_ extract 31 0) (concat (_ bv0 1) ((_ extract 63 1) ?x94)))))))
(let ((?x363 (bvand (bvsub (_ bv64 64) ?x360) (_ bv4294967295 64))))
(let ((?x375 (ite (= ?x363 (_ bv62 64)) (concat ((_ extract 1 0) ?x94) (_ bv0 62)) (ite (= ?x363 (_ bv63 64)) (concat ((_ extract 0 0) ?x94) (_ bv0 63)) (_ bv0 64)))))
(let ((?x387 (ite (= ?x363 (_ bv60 64)) (concat ((_ extract 3 0) ?x94) (_ bv0 60)) (ite (= ?x363 (_ bv61 64)) (concat ((_ extract 2 0) ?x94) (_ bv0 61)) ?x375))))
(let ((?x399 (ite (= ?x363 (_ bv58 64)) (concat ((_ extract 5 0) ?x94) (_ bv0 58)) (ite (= ?x363 (_ bv59 64)) (concat ((_ extract 4 0) ?x94) (_ bv0 59)) ?x387))))
(let ((?x410 (ite (= ?x363 (_ bv56 64)) (concat ((_ extract 7 0) ?x94) (_ bv0 56)) (ite (= ?x363 (_ bv57 64)) (concat ((_ extract 6 0) ?x94) (_ bv0 57)) ?x399))))
(let ((?x422 (ite (= ?x363 (_ bv54 64)) (concat ((_ extract 9 0) ?x94) (_ bv0 54)) (ite (= ?x363 (_ bv55 64)) (concat ((_ extract 8 0) ?x94) (_ bv0 55)) ?x410))))
(let ((?x433 (ite (= ?x363 (_ bv52 64)) (concat ((_ extract 11 0) ?x94) (_ bv0 52)) (ite (= ?x363 (_ bv53 64)) (concat ((_ extract 10 0) ?x94) (_ bv0 53)) ?x422))))
(let ((?x445 (ite (= ?x363 (_ bv50 64)) (concat ((_ extract 13 0) ?x94) (_ bv0 50)) (ite (= ?x363 (_ bv51 64)) (concat ((_ extract 12 0) ?x94) (_ bv0 51)) ?x433))))
(let ((?x457 (ite (= ?x363 (_ bv48 64)) (concat ((_ extract 15 0) ?x94) (_ bv0 48)) (ite (= ?x363 (_ bv49 64)) (concat ((_ extract 14 0) ?x94) (_ bv0 49)) ?x445))))
(let ((?x469 (ite (= ?x363 (_ bv46 64)) (concat ((_ extract 17 0) ?x94) (_ bv0 46)) (ite (= ?x363 (_ bv47 64)) (concat ((_ extract 16 0) ?x94) (_ bv0 47)) ?x457))))
(let ((?x481 (ite (= ?x363 (_ bv44 64)) (concat ((_ extract 19 0) ?x94) (_ bv0 44)) (ite (= ?x363 (_ bv45 64)) (concat ((_ extract 18 0) ?x94) (_ bv0 45)) ?x469))))
(let ((?x493 (ite (= ?x363 (_ bv42 64)) (concat ((_ extract 21 0) ?x94) (_ bv0 42)) (ite (= ?x363 (_ bv43 64)) (concat ((_ extract 20 0) ?x94) (_ bv0 43)) ?x481))))
(let ((?x505 (ite (= ?x363 (_ bv40 64)) (concat ((_ extract 23 0) ?x94) (_ bv0 40)) (ite (= ?x363 (_ bv41 64)) (concat ((_ extract 22 0) ?x94) (_ bv0 41)) ?x493))))
(let ((?x517 (ite (= ?x363 (_ bv38 64)) (concat ((_ extract 25 0) ?x94) (_ bv0 38)) (ite (= ?x363 (_ bv39 64)) (concat ((_ extract 24 0) ?x94) (_ bv0 39)) ?x505))))
(let ((?x529 (ite (= ?x363 (_ bv36 64)) (concat ((_ extract 27 0) ?x94) (_ bv0 36)) (ite (= ?x363 (_ bv37 64)) (concat ((_ extract 26 0) ?x94) (_ bv0 37)) ?x517))))
(let ((?x541 (ite (= ?x363 (_ bv34 64)) (concat ((_ extract 29 0) ?x94) (_ bv0 34)) (ite (= ?x363 (_ bv35 64)) (concat ((_ extract 28 0) ?x94) (_ bv0 35)) ?x529))))
(let ((?x552 (ite (= ?x363 (_ bv32 64)) (concat ((_ extract 31 0) ?x94) (_ bv0 32)) (ite (= ?x363 (_ bv33 64)) (concat ((_ extract 30 0) ?x94) (_ bv0 33)) ?x541))))
(let ((?x564 (ite (= ?x363 (_ bv30 64)) (concat ((_ extract 33 0) ?x94) (_ bv0 30)) (ite (= ?x363 (_ bv31 64)) (concat ((_ extract 32 0) ?x94) (_ bv0 31)) ?x552))))
(let ((?x576 (ite (= ?x363 (_ bv28 64)) (concat ((_ extract 35 0) ?x94) (_ bv0 28)) (ite (= ?x363 (_ bv29 64)) (concat ((_ extract 34 0) ?x94) (_ bv0 29)) ?x564))))
(let ((?x588 (ite (= ?x363 (_ bv26 64)) (concat ((_ extract 37 0) ?x94) (_ bv0 26)) (ite (= ?x363 (_ bv27 64)) (concat ((_ extract 36 0) ?x94) (_ bv0 27)) ?x576))))
(let ((?x600 (ite (= ?x363 (_ bv24 64)) (concat ((_ extract 39 0) ?x94) (_ bv0 24)) (ite (= ?x363 (_ bv25 64)) (concat ((_ extract 38 0) ?x94) (_ bv0 25)) ?x588))))
(let ((?x612 (ite (= ?x363 (_ bv22 64)) (concat ((_ extract 41 0) ?x94) (_ bv0 22)) (ite (= ?x363 (_ bv23 64)) (concat ((_ extract 40 0) ?x94) (_ bv0 23)) ?x600))))
(let ((?x624 (ite (= ?x363 (_ bv20 64)) (concat ((_ extract 43 0) ?x94) (_ bv0 20)) (ite (= ?x363 (_ bv21 64)) (concat ((_ extract 42 0) ?x94) (_ bv0 21)) ?x612))))
(let ((?x636 (ite (= ?x363 (_ bv18 64)) (concat ((_ extract 45 0) ?x94) (_ bv0 18)) (ite (= ?x363 (_ bv19 64)) (concat ((_ extract 44 0) ?x94) (_ bv0 19)) ?x624))))
(let ((?x648 (ite (= ?x363 (_ bv16 64)) (concat ((_ extract 47 0) ?x94) (_ bv0 16)) (ite (= ?x363 (_ bv17 64)) (concat ((_ extract 46 0) ?x94) (_ bv0 17)) ?x636))))
(let ((?x660 (ite (= ?x363 (_ bv14 64)) (concat ((_ extract 49 0) ?x94) (_ bv0 14)) (ite (= ?x363 (_ bv15 64)) (concat ((_ extract 48 0) ?x94) (_ bv0 15)) ?x648))))
(let ((?x672 (ite (= ?x363 (_ bv12 64)) (concat ((_ extract 51 0) ?x94) (_ bv0 12)) (ite (= ?x363 (_ bv13 64)) (concat ((_ extract 50 0) ?x94) (_ bv0 13)) ?x660))))
(let ((?x684 (ite (= ?x363 (_ bv10 64)) (concat ((_ extract 53 0) ?x94) (_ bv0 10)) (ite (= ?x363 (_ bv11 64)) (concat ((_ extract 52 0) ?x94) (_ bv0 11)) ?x672))))
(let ((?x694 (ite (= ?x363 (_ bv8 64)) (concat ((_ extract 55 0) ?x94) (_ bv0 8)) (ite (= ?x363 (_ bv9 64)) (concat ((_ extract 54 0) ?x94) (_ bv0 9)) ?x684))))
(let ((?x706 (ite (= ?x363 (_ bv6 64)) (concat ((_ extract 57 0) ?x94) (_ bv0 6)) (ite (= ?x363 (_ bv7 64)) (concat ((_ extract 56 0) ?x94) (_ bv0 7)) ?x694))))
(let ((?x718 (ite (= ?x363 (_ bv4 64)) (concat ((_ extract 59 0) ?x94) (_ bv0 4)) (ite (= ?x363 (_ bv5 64)) (concat ((_ extract 58 0) ?x94) (_ bv0 5)) ?x706))))
(let ((?x730 (ite (= ?x363 (_ bv2 64)) (concat ((_ extract 61 0) ?x94) (_ bv0 2)) (ite (= ?x363 (_ bv3 64)) (concat ((_ extract 60 0) ?x94) (_ bv0 3)) ?x718))))
(let ((?x736 (ite (= ?x363 (_ bv0 64)) ?x94 (ite (= ?x363 (_ bv1 64)) (concat ((_ extract 62 0) ?x94) (_ bv0 1)) ?x730))))
(not (not (= (_ bv0 64) (ite (bvult ?x363 (_ bv64 64)) ?x736 (_ bv0 64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
