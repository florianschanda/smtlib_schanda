(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun i0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(declare-fun const_arr31 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr22 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select i0 (_ bv2 32)) (concat (select i0 (_ bv1 32)) (select i0 (_ bv0 32))))))
 (let ((?x20 ((_ to_fp 11 53) roundNearestTiesToEven (concat (select i0 (_ bv3 32)) ?x15))))
 (or (fp.isNaN ?x20) (fp.lt ?x20 ((_ to_fp 11 53) (_ bv0 64)))))))
(assert
 (let ((?x15 (concat (select i0 (_ bv2 32)) (concat (select i0 (_ bv1 32)) (select i0 (_ bv0 32))))))
 (let ((?x20 ((_ to_fp 11 53) roundNearestTiesToEven (concat (select i0 (_ bv3 32)) ?x15))))
 (= (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x20) ((_ to_fp 11 53) fresh_to_ieee_bv_!0)))))
(assert
 (let ((?x44 (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) fresh_to_ieee_bv_!0)) (_ bv2047 64))) (_ bv64 64))))
(let ((?x51 ((_ extract 31 0) (bvmul (_ bv8 64) (bvsub (_ bv1 64) ((_ sign_extend 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551553 64) ?x44))))))))
(let ((?x67 (store (store (store (store const_arr31 (_ bv0 32) (_ bv1 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x71 (store (store (store (store ?x67 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x74 (store (store (store ?x71 ?x51 (_ bv1 8)) (bvadd (_ bv1 32) ?x51) (_ bv0 8)) (bvadd (_ bv2 32) ?x51) (_ bv0 8))))
(let ((?x77 (store (store (store ?x74 (bvadd (_ bv3 32) ?x51) (_ bv0 8)) (bvadd (_ bv4 32) ?x51) (_ bv0 8)) (bvadd (_ bv5 32) ?x51) (_ bv0 8))))
(let ((?x79 (store (store ?x77 (bvadd (_ bv6 32) ?x51) (_ bv0 8)) (bvadd (_ bv7 32) ?x51) (_ bv0 8))))
(let ((?x84 (concat (select ?x79 (_ bv2 32)) (concat (select ?x79 (_ bv1 32)) (select ?x79 (_ bv0 32))))))
(let ((?x90 (concat (select ?x79 (_ bv5 32)) (concat (select ?x79 (_ bv4 32)) (concat (select ?x79 (_ bv3 32)) ?x84)))))
(let ((?x97 (concat (_ bv0 1) ((_ extract 63 1) (concat (select ?x79 (_ bv7 32)) (concat (select ?x79 (_ bv6 32)) ?x90))))))
(let ((?x105 (store (store (store (store const_arr22 (_ bv0 32) (_ bv1 8)) (_ bv1 32) (_ bv2 8)) (_ bv2 32) (_ bv3 8)) (_ bv3 32) (_ bv3 8))))
(let ((?x110 (store (store (store (store ?x105 (_ bv4 32) (_ bv4 8)) (_ bv5 32) (_ bv4 8)) (_ bv6 32) (_ bv4 8)) (_ bv7 32) (_ bv4 8))))
(let ((?x119 (store (store (store (store ?x110 (_ bv8 32) (_ bv5 8)) (_ bv9 32) (_ bv5 8)) (_ bv10 32) (_ bv5 8)) (_ bv11 32) (_ bv5 8))))
(let ((?x127 (store (store (store (store ?x119 (_ bv12 32) (_ bv5 8)) (_ bv13 32) (_ bv5 8)) (_ bv14 32) (_ bv5 8)) (_ bv15 32) (_ bv5 8))))
(let ((?x136 (store (store (store (store ?x127 (_ bv16 32) (_ bv6 8)) (_ bv17 32) (_ bv6 8)) (_ bv18 32) (_ bv6 8)) (_ bv19 32) (_ bv6 8))))
(let ((?x144 (store (store (store (store ?x136 (_ bv20 32) (_ bv6 8)) (_ bv21 32) (_ bv6 8)) (_ bv22 32) (_ bv6 8)) (_ bv23 32) (_ bv6 8))))
(let ((?x152 (store (store (store (store ?x144 (_ bv24 32) (_ bv6 8)) (_ bv25 32) (_ bv6 8)) (_ bv26 32) (_ bv6 8)) (_ bv27 32) (_ bv6 8))))
(let ((?x160 (store (store (store (store ?x152 (_ bv28 32) (_ bv6 8)) (_ bv29 32) (_ bv6 8)) (_ bv30 32) (_ bv6 8)) (_ bv31 32) (_ bv6 8))))
(let ((?x169 (store (store (store (store ?x160 (_ bv32 32) (_ bv7 8)) (_ bv33 32) (_ bv7 8)) (_ bv34 32) (_ bv7 8)) (_ bv35 32) (_ bv7 8))))
(let ((?x177 (store (store (store (store ?x169 (_ bv36 32) (_ bv7 8)) (_ bv37 32) (_ bv7 8)) (_ bv38 32) (_ bv7 8)) (_ bv39 32) (_ bv7 8))))
(let ((?x185 (store (store (store (store ?x177 (_ bv40 32) (_ bv7 8)) (_ bv41 32) (_ bv7 8)) (_ bv42 32) (_ bv7 8)) (_ bv43 32) (_ bv7 8))))
(let ((?x193 (store (store (store (store ?x185 (_ bv44 32) (_ bv7 8)) (_ bv45 32) (_ bv7 8)) (_ bv46 32) (_ bv7 8)) (_ bv47 32) (_ bv7 8))))
(let ((?x201 (store (store (store (store ?x193 (_ bv48 32) (_ bv7 8)) (_ bv49 32) (_ bv7 8)) (_ bv50 32) (_ bv7 8)) (_ bv51 32) (_ bv7 8))))
(let ((?x209 (store (store (store (store ?x201 (_ bv52 32) (_ bv7 8)) (_ bv53 32) (_ bv7 8)) (_ bv54 32) (_ bv7 8)) (_ bv55 32) (_ bv7 8))))
(let ((?x217 (store (store (store (store ?x209 (_ bv56 32) (_ bv7 8)) (_ bv57 32) (_ bv7 8)) (_ bv58 32) (_ bv7 8)) (_ bv59 32) (_ bv7 8))))
(let ((?x225 (store (store (store (store ?x217 (_ bv60 32) (_ bv7 8)) (_ bv61 32) (_ bv7 8)) (_ bv62 32) (_ bv7 8)) (_ bv63 32) (_ bv7 8))))
(let ((?x234 (store (store (store (store ?x225 (_ bv64 32) (_ bv8 8)) (_ bv65 32) (_ bv8 8)) (_ bv66 32) (_ bv8 8)) (_ bv67 32) (_ bv8 8))))
(let ((?x242 (store (store (store (store ?x234 (_ bv68 32) (_ bv8 8)) (_ bv69 32) (_ bv8 8)) (_ bv70 32) (_ bv8 8)) (_ bv71 32) (_ bv8 8))))
(let ((?x250 (store (store (store (store ?x242 (_ bv72 32) (_ bv8 8)) (_ bv73 32) (_ bv8 8)) (_ bv74 32) (_ bv8 8)) (_ bv75 32) (_ bv8 8))))
(let ((?x258 (store (store (store (store ?x250 (_ bv76 32) (_ bv8 8)) (_ bv77 32) (_ bv8 8)) (_ bv78 32) (_ bv8 8)) (_ bv79 32) (_ bv8 8))))
(let ((?x266 (store (store (store (store ?x258 (_ bv80 32) (_ bv8 8)) (_ bv81 32) (_ bv8 8)) (_ bv82 32) (_ bv8 8)) (_ bv83 32) (_ bv8 8))))
(let ((?x274 (store (store (store (store ?x266 (_ bv84 32) (_ bv8 8)) (_ bv85 32) (_ bv8 8)) (_ bv86 32) (_ bv8 8)) (_ bv87 32) (_ bv8 8))))
(let ((?x282 (store (store (store (store ?x274 (_ bv88 32) (_ bv8 8)) (_ bv89 32) (_ bv8 8)) (_ bv90 32) (_ bv8 8)) (_ bv91 32) (_ bv8 8))))
(let ((?x290 (store (store (store (store ?x282 (_ bv92 32) (_ bv8 8)) (_ bv93 32) (_ bv8 8)) (_ bv94 32) (_ bv8 8)) (_ bv95 32) (_ bv8 8))))
(let ((?x298 (store (store (store (store ?x290 (_ bv96 32) (_ bv8 8)) (_ bv97 32) (_ bv8 8)) (_ bv98 32) (_ bv8 8)) (_ bv99 32) (_ bv8 8))))
(let ((?x306 (store (store (store (store ?x298 (_ bv100 32) (_ bv8 8)) (_ bv101 32) (_ bv8 8)) (_ bv102 32) (_ bv8 8)) (_ bv103 32) (_ bv8 8))))
(let ((?x314 (store (store (store (store ?x306 (_ bv104 32) (_ bv8 8)) (_ bv105 32) (_ bv8 8)) (_ bv106 32) (_ bv8 8)) (_ bv107 32) (_ bv8 8))))
(let ((?x322 (store (store (store (store ?x314 (_ bv108 32) (_ bv8 8)) (_ bv109 32) (_ bv8 8)) (_ bv110 32) (_ bv8 8)) (_ bv111 32) (_ bv8 8))))
(let ((?x330 (store (store (store (store ?x322 (_ bv112 32) (_ bv8 8)) (_ bv113 32) (_ bv8 8)) (_ bv114 32) (_ bv8 8)) (_ bv115 32) (_ bv8 8))))
(let ((?x338 (store (store (store (store ?x330 (_ bv116 32) (_ bv8 8)) (_ bv117 32) (_ bv8 8)) (_ bv118 32) (_ bv8 8)) (_ bv119 32) (_ bv8 8))))
(let ((?x346 (store (store (store (store ?x338 (_ bv120 32) (_ bv8 8)) (_ bv121 32) (_ bv8 8)) (_ bv122 32) (_ bv8 8)) (_ bv123 32) (_ bv8 8))))
(let ((?x354 (store (store (store (store ?x346 (_ bv124 32) (_ bv8 8)) (_ bv125 32) (_ bv8 8)) (_ bv126 32) (_ bv8 8)) (_ bv127 32) (_ bv8 8))))
(let ((?x361 (bvsub (_ bv64 64) (concat (_ bv0 56) (select (store ?x354 (_ bv128 32) (_ bv9 8)) ((_ extract 31 0) ?x97))))))
(not (bvult (bvand ?x361 (_ bv4294967295 64)) (_ bv64 64)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
