(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_sqrt_inf_nan_zeros_klee_long_double.x86_64/query.09.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun x0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 80))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (not (fp.isNaN ?x43))))))))
(assert
 (let ((?x76 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x77 ((_ to_fp 15 64) ?x76)))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (not (fp.lt ?x43 ?x77))))))))))
(assert
 (let ((?x76 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x77 ((_ to_fp 15 64) ?x76)))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x43) (ite (fp.gt ?x43 ?x77) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))))))))
(assert
 (let ((?x76 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x77 ((_ to_fp 15 64) ?x76)))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (fp.eq ?x43 ?x77)))))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x76 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x77 ((_ to_fp 15 64) ?x76)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x77) (fp.isZero ?x77)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x76 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x77 ((_ to_fp 15 64) ?x76)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x77) (fp.isZero ?x77)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x76 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x77 ((_ to_fp 15 64) ?x76)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x77) (fp.isZero ?x77)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x104 (concat (concat ((_ extract 79 79) fresh_to_ieee_bv_!0) ((_ extract 78 64) fresh_to_ieee_bv_!0)) ((_ extract 62 0) fresh_to_ieee_bv_!0))))
 (let ((?x105 ((_ to_fp 15 64) ?x104)))
 (= ((_ extract 63 63) fresh_to_ieee_bv_!0) (ite (or (fp.isSubnormal ?x105) (fp.isZero ?x105)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x104 (concat (concat ((_ extract 79 79) fresh_to_ieee_bv_!0) ((_ extract 78 64) fresh_to_ieee_bv_!0)) ((_ extract 62 0) fresh_to_ieee_bv_!0))))
 (let ((?x105 ((_ to_fp 15 64) ?x104)))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= (fp.sqrt roundNearestTiesToEven ?x43) ?x105)))))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
(let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
(let ((?x33 (concat (select x0 (_ bv8 32)) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24)))))
(let ((?x36 (concat (select x0 (_ bv9 32)) ?x33)))
(let (($x93 (or (bvslt (concat (_ bv65535 16) (_ bv18446744073709551615 64)) ?x36) (bvslt fresh_to_ieee_bv_!0 (concat (_ bv0 16) (_ bv0 64))))))
(not $x93)))))))
(check-sat)
(exit)
