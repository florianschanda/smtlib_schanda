(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_polyroots_klee_high_degree_bug.x86_64/query.05.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun a0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv13830554455654793221 64)))))))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv13830554455654793207 64)))))))
(assert
 (let ((?x43 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
(let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
(let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
(let ((?x44 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x31) ?x43)))
(let ((?x45 (fp.abs ?x44)))
(let ((?x50 (fp.mul roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x43 ?x45) ((_ to_fp 11 53) (_ bv4606732058837280358 64)))))
(let (($x52 (fp.lt (fp.add roundNearestTiesToEven ?x45 ?x43) (fp.mul roundNearestTiesToEven ?x50 ?x43))))
(not (not $x52)))))))))))
(check-sat)
(exit)
