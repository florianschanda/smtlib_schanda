(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_polyroots_klee_high_degree_bug.x86_64/query.11.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun a0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv13830554455654793221 64)))))))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv13830554455654793207 64)))))))
(assert
 (let ((?x45 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x43 ((_ to_fp 11 53) (_ bv9223372036854775808 64))))
(let ((?x41 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
(let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
(let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
(let ((?x48 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x43 ?x31) ?x41)))
(let ((?x50 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x48 ?x43) ?x43)))
(let ((?x54 (fp.sub roundNearestTiesToEven ?x43 (fp.mul roundNearestTiesToEven ?x41 ?x50))))
(let ((?x52 (fp.sub roundNearestTiesToEven ?x43 (fp.mul roundNearestTiesToEven ?x45 ?x50))))
(let ((?x56 (fp.add roundNearestTiesToEven ?x52 (fp.mul roundNearestTiesToEven ?x45 ?x54))))
(let ((?x57 (fp.add roundNearestTiesToEven ?x56 ?x45)))
(let ((?x39 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
(let ((?x59 (fp.sub roundNearestTiesToEven ?x43 (fp.mul roundNearestTiesToEven ?x39 ?x57))))
(let ((?x61 (fp.sub roundNearestTiesToEven ?x54 (fp.mul roundNearestTiesToEven ?x45 ?x57))))
(let ((?x63 (fp.add roundNearestTiesToEven ?x61 (fp.mul roundNearestTiesToEven ?x45 ?x59))))
(let ((?x64 (fp.add roundNearestTiesToEven ?x63 ?x43)))
(let ((?x72 (fp.sub roundNearestTiesToEven ?x43 (fp.mul roundNearestTiesToEven ?x41 ?x64))))
(let ((?x74 (fp.add roundNearestTiesToEven ?x45 (fp.mul roundNearestTiesToEven ?x41 ?x72))))
(let ((?x66 (fp.sub roundNearestTiesToEven ?x59 (fp.mul roundNearestTiesToEven ?x45 ?x64))))
(let ((?x68 (fp.add roundNearestTiesToEven ?x39 (fp.mul roundNearestTiesToEven ?x41 ?x66))))
(let ((?x69 (fp.sub roundNearestTiesToEven ?x39 ?x68)))
(let ((?x77 (fp.add roundNearestTiesToEven (fp.abs ?x69) (fp.abs (fp.sub roundNearestTiesToEven ?x45 ?x74)))))
(let ((?x79 (fp.div roundNearestTiesToEven ?x69 (fp.add roundNearestTiesToEven ?x77 ?x45))))
(not (not (fp.lt ?x79 ?x45))))))))))))))))))))))))))))
(check-sat)
(exit)
