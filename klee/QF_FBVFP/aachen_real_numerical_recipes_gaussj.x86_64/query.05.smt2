(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_real_numerical_recipes_gaussj.x86_64/query.05.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun sym_f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv1065353216 32))))
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (fp.gt ?x19 ?x21)))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (fp.lt ?x19 ((_ to_fp 8 24) (_ bv1120403456 32))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (let ((?x26 (fp.abs ?x19)))
 (not (fp.isNaN ?x26))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (let ((?x26 (fp.abs ?x19)))
 (not (fp.lt ?x26 ((_ to_fp 8 24) (_ bv1082130432 32))))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
(let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
(let ((?x21 ((_ to_fp 8 24) (_ bv1065353216 32))))
(let ((?x37 (fp.div roundNearestTiesToEven ?x21 ?x19)))
(let ((?x46 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3212836864 32)) (fp.mul roundNearestTiesToEven ?x37 ((_ to_fp 8 24) (_ bv0 32))))))
(let ((?x48 (fp.abs (fp.sub roundNearestTiesToEven ?x21 ?x46))))
(let ((?x41 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3212836864 32)) (fp.mul roundNearestTiesToEven ?x37 ((_ to_fp 8 24) (_ bv1079194419 32))))))
(let ((?x43 (fp.abs (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv0 32)) ?x41))))
(not (or (or (fp.isNaN ?x43) (fp.isNaN ?x48)) (fp.lt ?x43 ?x48))))))))))))
(check-sat)
(exit)
