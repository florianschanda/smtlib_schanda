(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_real_units_meter_ft.x86_64/query.101.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun |argv[1]0| () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x11 ((_ sign_extend 24) (select |argv[1]0| (_ bv0 32)))))
 (bvsle (_ bv48 32) ?x11)))
(assert
 (let ((?x11 ((_ sign_extend 24) (select |argv[1]0| (_ bv0 32)))))
 (bvsle ?x11 (_ bv57 32))))
(assert
 (= (_ bv49 8) ((_ extract 7 0) ((_ sign_extend 24) (select |argv[1]0| (_ bv0 32))))))
(assert
 (let ((?x26 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x27 ((_ to_fp 15 64) ?x26)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x27) (fp.isZero ?x27)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x48 (concat (concat ((_ extract 79 79) (concat (_ bv16385 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16385 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16385 16) (_ bv9223372036854775808 64))))))
 (let ((?x49 ((_ to_fp 15 64) ?x48)))
 (= ((_ extract 63 63) (concat (_ bv16385 16) (_ bv9223372036854775808 64))) (ite (or (fp.isSubnormal ?x49) (fp.isZero ?x49)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x48 (concat (concat ((_ extract 79 79) (concat (_ bv16385 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16385 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16385 16) (_ bv9223372036854775808 64))))))
(let ((?x49 ((_ to_fp 15 64) ?x48)))
(let ((?x37 ((_ to_fp 15 64) roundNearestTiesToEven (bvadd (_ bv4294967248 32) ((_ sign_extend 24) (select |argv[1]0| (_ bv0 32)))))))
(let ((?x26 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
(let ((?x27 ((_ to_fp 15 64) ?x26)))
(let ((?x36 (fp.add roundNearestTiesToEven ?x27 ?x37)))
(not (not (fp.eq ?x36 (fp.div roundNearestTiesToEven ?x36 ?x49)))))))))))
(check-sat)
(exit)
