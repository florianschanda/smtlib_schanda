(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun d0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))))))
(assert
 (not (= (_ bv0 8) (bvxor (_ bv1 8) (bvand (select d0 (_ bv0 32)) (_ bv1 8))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
(let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(let ((?x54 (ite (fp.lt ?x31 ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))
(let ((?x75 (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) (bvor ?x30 (_ bv1 64)))) (_ bv2047 64))) (_ bv64 64))))
(let ((?x66 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x30)) (_ bv2047 64))) (_ bv64 64)))))
(let (($x79 (bvslt ((_ sign_extend 32) ((_ extract 31 0) ?x66)) ((_ sign_extend 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551553 64) ?x75))))))
(let ((?x83 (ite $x79 (ite (fp.lt ((_ to_fp 11 53) (bvor ?x30 (_ bv1 64))) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32)) ?x54)))
(let ((?x85 ((_ sign_extend 32) ?x83)))
(let ((?x87 (ite (bvslt (_ bv4294967295 32) ?x83) ?x85 (bvsub (_ bv0 64) ?x85))))
(let ((?x90 ((_ extract 31 0) (ite (bvslt ?x54 (_ bv0 32)) (bvsub (_ bv0 64) ?x87) ?x87))))
(let ((?x92 ((_ sign_extend 32) ?x90)))
(let ((?x97 (bvmul (_ bv8 64) (bvadd (_ bv2 64) (ite (bvslt (_ bv4294967295 32) ?x90) ?x92 (bvsub (_ bv0 64) ?x92))))))
(not (not (bvult (_ bv59594096 64) (bvadd (_ bv48919440 64) ?x97)))))))))))))))))))
(check-sat)
(exit)
