(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun d0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr11 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))))))
(assert
 (not (= (_ bv0 8) (bvxor (_ bv1 8) (bvand (select d0 (_ bv0 32)) (_ bv1 8))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
(let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
(let ((?x61 (bvor ?x30 (_ bv1 64))))
(let ((?x183 (ite (fp.lt ((_ to_fp 11 53) ?x61) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))
(let ((?x108 (ite (fp.lt ((_ to_fp 11 53) ?x30) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))
(let ((?x67 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x61)) (_ bv2047 64))) (_ bv64 64)))))
(let ((?x69 ((_ sign_extend 32) ((_ extract 31 0) ?x67))))
(let ((?x57 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x30)) (_ bv2047 64))) (_ bv64 64)))))
(let ((?x59 ((_ sign_extend 32) ((_ extract 31 0) ?x57))))
(let (($x70 (bvslt ?x59 ?x69)))
(let ((?x193 (ite $x70 ?x108 ?x183)))
(let ((?x195 ((_ sign_extend 32) ?x193)))
(let ((?x184 (ite $x70 ?x183 ?x108)))
(let ((?x186 ((_ sign_extend 32) ?x184)))
(let ((?x192 (bvsub (ite (bvslt (_ bv4294967295 32) ?x184) ?x186 (bvsub (_ bv0 64) ?x186)) (bvsub (ite $x70 ?x69 ?x59) (ite $x70 ?x59 ?x69)))))
(let ((?x200 (bvmul (_ bv8 64) (bvsub ?x192 (ite (bvslt (_ bv4294967295 32) ?x193) ?x195 (bvsub (_ bv0 64) ?x195))))))
(let ((?x75 ((_ extract 31 0) (bvadd (_ bv18446744073668207904 64) (ite $x70 (_ bv46384624 64) (_ bv41343728 64))))))
(let ((?x117 (store (store (store (store const_arr11 (_ bv0 32) (_ bv2 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x121 (store (store (store (store ?x117 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x125 (store (store (store (store ?x121 (_ bv8 32) (_ bv0 8)) (_ bv9 32) (_ bv0 8)) (_ bv10 32) (_ bv0 8)) (_ bv11 32) (_ bv0 8))))
(let ((?x129 (store (store (store (store ?x125 (_ bv12 32) (_ bv0 8)) (_ bv13 32) (_ bv0 8)) (_ bv14 32) (_ bv0 8)) (_ bv15 32) (_ bv0 8))))
(let ((?x133 (store (store (store (store ?x129 (_ bv16 32) (_ bv0 8)) (_ bv17 32) (_ bv0 8)) (_ bv18 32) (_ bv0 8)) (_ bv19 32) (_ bv0 8))))
(let ((?x137 (store (store (store (store ?x133 (_ bv20 32) (_ bv0 8)) (_ bv21 32) (_ bv0 8)) (_ bv22 32) (_ bv0 8)) (_ bv23 32) (_ bv0 8))))
(let ((?x140 (store (store (store ?x137 (_ bv4 32) ((_ extract 7 0) ?x108)) (_ bv5 32) ((_ extract 15 8) ?x108)) (_ bv6 32) ((_ extract 23 16) ?x108))))
(let ((?x143 (store (store (store ?x140 (_ bv7 32) ((_ extract 31 24) ?x108)) (_ bv8 32) ((_ extract 7 0) ?x59)) (_ bv9 32) ((_ extract 15 8) ?x59))))
(let ((?x146 (store (store (store ?x143 (_ bv10 32) ((_ extract 23 16) ?x59)) (_ bv11 32) ((_ extract 31 24) ?x59)) (_ bv12 32) ((_ extract 39 32) ?x59))))
(let ((?x149 (store (store (store ?x146 (_ bv13 32) ((_ extract 47 40) ?x59)) (_ bv14 32) ((_ extract 55 48) ?x59)) (_ bv15 32) ((_ extract 63 56) ?x59))))
(let ((?x153 (store (store (store (store ?x149 (_ bv16 32) (_ bv112 8)) (_ bv17 32) (_ bv5 8)) (_ bv18 32) (_ bv26 8)) (_ bv19 32) (_ bv2 8))))
(let ((?x157 (store (store (store (store ?x153 (_ bv20 32) (_ bv0 8)) (_ bv21 32) (_ bv0 8)) (_ bv22 32) (_ bv0 8)) (_ bv23 32) (_ bv0 8))))
(let ((?x164 (concat (select ?x157 (bvadd (_ bv2 32) ?x75)) (concat (select ?x157 (bvadd (_ bv1 32) ?x75)) (select ?x157 ?x75)))))
(let ((?x170 (concat (select ?x157 (bvadd (_ bv4 32) ?x75)) (concat (select ?x157 (bvadd (_ bv3 32) ?x75)) ?x164))))
(let ((?x176 (concat (select ?x157 (bvadd (_ bv6 32) ?x75)) (concat (select ?x157 (bvadd (_ bv5 32) ?x75)) ?x170))))
(let ((?x179 (concat (select ?x157 (bvadd (_ bv7 32) ?x75)) ?x176)))
(let (($x209 (or (bvule (bvadd ?x179 ?x200) (_ bv55299360 64)) (not (and (bvult ?x179 (_ bv55299360 64)) (bvult ?x179 (bvadd (_ bv55299360 64) ?x200)))))))
(not $x209)))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
