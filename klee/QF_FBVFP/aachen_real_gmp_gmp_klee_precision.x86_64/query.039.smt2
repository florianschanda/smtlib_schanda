(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun d0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr11 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))))))
(assert
 (not (= (_ bv0 8) (bvxor (_ bv1 8) (bvand (select d0 (_ bv0 32)) (_ bv1 8))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
(let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
(let ((?x62 (bvor ?x30 (_ bv1 64))))
(let ((?x184 (ite (fp.lt ((_ to_fp 11 53) ?x62) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))
(let ((?x109 (ite (fp.lt ((_ to_fp 11 53) ?x30) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))
(let ((?x68 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x62)) (_ bv2047 64))) (_ bv64 64)))))
(let ((?x70 ((_ sign_extend 32) ((_ extract 31 0) ?x68))))
(let ((?x58 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x30)) (_ bv2047 64))) (_ bv64 64)))))
(let ((?x60 ((_ sign_extend 32) ((_ extract 31 0) ?x58))))
(let (($x71 (bvslt ?x60 ?x70)))
(let ((?x194 (ite $x71 ?x109 ?x184)))
(let ((?x196 ((_ sign_extend 32) ?x194)))
(let ((?x185 (ite $x71 ?x184 ?x109)))
(let ((?x187 ((_ sign_extend 32) ?x185)))
(let ((?x193 (bvsub (ite (bvslt (_ bv4294967295 32) ?x185) ?x187 (bvsub (_ bv0 64) ?x187)) (bvsub (ite $x71 ?x70 ?x60) (ite $x71 ?x60 ?x70)))))
(let ((?x201 (bvmul (_ bv8 64) (bvsub ?x193 (ite (bvslt (_ bv4294967295 32) ?x194) ?x196 (bvsub (_ bv0 64) ?x196))))))
(let ((?x76 ((_ extract 31 0) (bvadd (_ bv18446744073668207904 64) (ite $x71 (_ bv46384624 64) (_ bv41343728 64))))))
(let ((?x118 (store (store (store (store const_arr11 (_ bv0 32) (_ bv2 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x122 (store (store (store (store ?x118 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x126 (store (store (store (store ?x122 (_ bv8 32) (_ bv0 8)) (_ bv9 32) (_ bv0 8)) (_ bv10 32) (_ bv0 8)) (_ bv11 32) (_ bv0 8))))
(let ((?x130 (store (store (store (store ?x126 (_ bv12 32) (_ bv0 8)) (_ bv13 32) (_ bv0 8)) (_ bv14 32) (_ bv0 8)) (_ bv15 32) (_ bv0 8))))
(let ((?x134 (store (store (store (store ?x130 (_ bv16 32) (_ bv0 8)) (_ bv17 32) (_ bv0 8)) (_ bv18 32) (_ bv0 8)) (_ bv19 32) (_ bv0 8))))
(let ((?x138 (store (store (store (store ?x134 (_ bv20 32) (_ bv0 8)) (_ bv21 32) (_ bv0 8)) (_ bv22 32) (_ bv0 8)) (_ bv23 32) (_ bv0 8))))
(let ((?x141 (store (store (store ?x138 (_ bv4 32) ((_ extract 7 0) ?x109)) (_ bv5 32) ((_ extract 15 8) ?x109)) (_ bv6 32) ((_ extract 23 16) ?x109))))
(let ((?x144 (store (store (store ?x141 (_ bv7 32) ((_ extract 31 24) ?x109)) (_ bv8 32) ((_ extract 7 0) ?x60)) (_ bv9 32) ((_ extract 15 8) ?x60))))
(let ((?x147 (store (store (store ?x144 (_ bv10 32) ((_ extract 23 16) ?x60)) (_ bv11 32) ((_ extract 31 24) ?x60)) (_ bv12 32) ((_ extract 39 32) ?x60))))
(let ((?x150 (store (store (store ?x147 (_ bv13 32) ((_ extract 47 40) ?x60)) (_ bv14 32) ((_ extract 55 48) ?x60)) (_ bv15 32) ((_ extract 63 56) ?x60))))
(let ((?x154 (store (store (store (store ?x150 (_ bv16 32) (_ bv112 8)) (_ bv17 32) (_ bv5 8)) (_ bv18 32) (_ bv26 8)) (_ bv19 32) (_ bv2 8))))
(let ((?x158 (store (store (store (store ?x154 (_ bv20 32) (_ bv0 8)) (_ bv21 32) (_ bv0 8)) (_ bv22 32) (_ bv0 8)) (_ bv23 32) (_ bv0 8))))
(let ((?x165 (concat (select ?x158 (bvadd (_ bv2 32) ?x76)) (concat (select ?x158 (bvadd (_ bv1 32) ?x76)) (select ?x158 ?x76)))))
(let ((?x171 (concat (select ?x158 (bvadd (_ bv4 32) ?x76)) (concat (select ?x158 (bvadd (_ bv3 32) ?x76)) ?x165))))
(let ((?x177 (concat (select ?x158 (bvadd (_ bv6 32) ?x76)) (concat (select ?x158 (bvadd (_ bv5 32) ?x76)) ?x171))))
(let ((?x203 (bvadd (_ bv18446744073674291864 64) (bvadd (concat (select ?x158 (bvadd (_ bv7 32) ?x76)) ?x177) ?x201))))
(not (bvult ?x203 (_ bv17 64))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
