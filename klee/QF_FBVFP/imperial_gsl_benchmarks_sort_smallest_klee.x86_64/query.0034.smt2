(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_sort_smallest_klee.x86_64/query.0034.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x39 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x48 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x39)))))
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
 (let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
 (fp.gt ?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x48))))))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
 (let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
 (not (fp.isNaN ?x31))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
 (let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
 (let ((?x66 (concat (select x0 (_ bv26 32)) (concat (select x0 (_ bv25 32)) (select x0 (_ bv24 32))))))
 (let ((?x75 (concat (select x0 (_ bv29 32)) (concat (select x0 (_ bv28 32)) (concat (select x0 (_ bv27 32)) ?x66)))))
 (let (($x83 (fp.lt ((_ to_fp 11 53) (concat (select x0 (_ bv31 32)) (concat (select x0 (_ bv30 32)) ?x75))) ?x31)))
 (not $x83))))))))
(assert
 (let ((?x92 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x101 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x92)))))
 (let ((?x39 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x48 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x39)))))
 (fp.gt ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x48))) ((_ to_fp 11 53) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x101)))))))))
(assert
 (let ((?x66 (concat (select x0 (_ bv26 32)) (concat (select x0 (_ bv25 32)) (select x0 (_ bv24 32))))))
 (let ((?x75 (concat (select x0 (_ bv29 32)) (concat (select x0 (_ bv28 32)) (concat (select x0 (_ bv27 32)) ?x66)))))
 (let (($x110 (fp.isNaN ((_ to_fp 11 53) (concat (select x0 (_ bv31 32)) (concat (select x0 (_ bv30 32)) ?x75))))))
 (not $x110)))))
(assert
 (not false))
(check-sat)
(exit)
