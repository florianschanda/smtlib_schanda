(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.080.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_10 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_32 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_23 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_54 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_45 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ?x23))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x19)))
 (not (fp.isNaN ?x28))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x19)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x38 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x34))))
 (let ((?x39 ((_ to_fp 8 24) ?x38)))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x39 ?x20)))
 (not (fp.gt ?x40 ?x28)))))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (fp.geq ?x51 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (fp.leq ?x51 ?x23))))))
(assert
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x26 ?x51)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x59 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x63 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x59))))
 (let ((?x64 ((_ to_fp 8 24) ?x63)))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x64 ?x65)))
 (or (fp.isNaN ?x54) (fp.gt ?x66 ?x54)))))))))))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x59 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x63 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x59))))
 (let ((?x64 ((_ to_fp 8 24) ?x63)))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x64 ?x65)))
 (not (fp.isNaN ?x66))))))))))))
(assert
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (not (fp.isNaN ?x51))))))
(assert
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x59 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x63 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x59))))
 (let ((?x64 ((_ to_fp 8 24) ?x63)))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x64 ?x65)))
 (not (fp.lt ?x66 ?x51)))))))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x82 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x78))))
 (let ((?x83 ((_ to_fp 8 24) ?x82)))
 (fp.geq ?x83 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x82 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x78))))
 (let ((?x83 ((_ to_fp 8 24) ?x82)))
 (fp.leq ?x83 ?x23))))))
(assert
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x82 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x78))))
 (let ((?x83 ((_ to_fp 8 24) ?x82)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x86 (fp.sub roundNearestTiesToEven ?x26 ?x83)))
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x97 (fp.add roundNearestTiesToEven ?x65 ?x51)))
 (let ((?x91 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x95 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x91))))
 (let ((?x96 ((_ to_fp 8 24) ?x95)))
 (let ((?x98 (fp.sub roundNearestTiesToEven ?x96 ?x97)))
 (or (fp.isNaN ?x86) (fp.gt ?x98 ?x86)))))))))))))))))))))
(assert
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x97 (fp.add roundNearestTiesToEven ?x65 ?x51)))
 (let ((?x91 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x95 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x91))))
 (let ((?x96 ((_ to_fp 8 24) ?x95)))
 (let ((?x98 (fp.sub roundNearestTiesToEven ?x96 ?x97)))
 (not (fp.isNaN ?x98))))))))))))))))
(assert
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x82 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x78))))
 (let ((?x83 ((_ to_fp 8 24) ?x82)))
 (not (fp.isNaN ?x83))))))
(assert
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x82 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x78))))
 (let ((?x83 ((_ to_fp 8 24) ?x82)))
 (let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
 (let ((?x51 ((_ to_fp 8 24) ?x50)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x97 (fp.add roundNearestTiesToEven ?x65 ?x51)))
 (let ((?x91 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x95 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x91))))
 (let ((?x96 ((_ to_fp 8 24) ?x95)))
 (let ((?x98 (fp.sub roundNearestTiesToEven ?x96 ?x97)))
 (not (fp.lt ?x98 ?x83)))))))))))))))))))
(assert
 (let ((?x108 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x34 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x38 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x34))))
 (let ((?x39 ((_ to_fp 8 24) ?x38)))
 (fp.geq ?x39 ?x108))))))
(assert
 (let ((?x111 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x34 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x38 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x34))))
 (let ((?x39 ((_ to_fp 8 24) ?x38)))
 (fp.leq ?x39 ?x111))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x38 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x34))))
 (let ((?x39 ((_ to_fp 8 24) ?x38)))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x39 ?x20)))
 (not (fp.isNaN ?x40))))))))
(assert
 (let ((?x108 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x59 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x63 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x59))))
 (let ((?x64 ((_ to_fp 8 24) ?x63)))
 (fp.geq ?x64 ?x108))))))
(assert
 (let ((?x111 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x59 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x63 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x59))))
 (let ((?x64 ((_ to_fp 8 24) ?x63)))
 (fp.leq ?x64 ?x111))))))
(assert
 (let ((?x108 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x91 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x95 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x91))))
 (let ((?x96 ((_ to_fp 8 24) ?x95)))
 (fp.geq ?x96 ?x108))))))
(assert
 (let ((?x111 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x91 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x95 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x91))))
 (let ((?x96 ((_ to_fp 8 24) ?x95)))
 (fp.leq ?x96 ?x111))))))
(assert
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
(let ((?x82 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x78))))
(let ((?x83 ((_ to_fp 8 24) ?x82)))
(let ((?x46 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
(let ((?x50 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x46))))
(let ((?x51 ((_ to_fp 8 24) ?x50)))
(let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
(let ((?x19 ((_ to_fp 8 24) ?x18)))
(let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x65 (fp.sub roundNearestTiesToEven ?x20 ?x19)))
(let ((?x97 (fp.add roundNearestTiesToEven ?x65 ?x51)))
(let ((?x119 (fp.add roundNearestTiesToEven ?x97 ?x83)))
(not (and (fp.geq ?x119 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x119 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))))))))))))
(check-sat)
(exit)
