(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.127.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_60 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_72 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_41 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_55 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_34 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_13 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_27 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x12 (concat (select symbolic_0_float_60 (_ bv1 32)) (select symbolic_0_float_60 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_60 (_ bv3 32)) (concat (select symbolic_0_float_60 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x12 (concat (select symbolic_0_float_60 (_ bv1 32)) (select symbolic_0_float_60 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_60 (_ bv3 32)) (concat (select symbolic_0_float_60 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ?x24))))))
(assert
 (let ((?x43 (concat (select symbolic_0_float_72 (_ bv1 32)) (select symbolic_0_float_72 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_72 (_ bv3 32)) (concat (select symbolic_0_float_72 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x39 ?x48)))
 (let ((?x29 (concat (select symbolic_0_float_41 (_ bv1 32)) (select symbolic_0_float_41 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_41 (_ bv3 32)) (concat (select symbolic_0_float_41 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x12 (concat (select symbolic_0_float_60 (_ bv1 32)) (select symbolic_0_float_60 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_60 (_ bv3 32)) (concat (select symbolic_0_float_60 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x19 ?x34)))
 (or (or (fp.isNaN ?x36) (fp.isNaN ?x49)) (fp.gt ?x36 ?x49)))))))))))))))
(assert
 (let ((?x43 (concat (select symbolic_0_float_72 (_ bv1 32)) (select symbolic_0_float_72 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_72 (_ bv3 32)) (concat (select symbolic_0_float_72 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (let ((?x29 (concat (select symbolic_0_float_41 (_ bv1 32)) (select symbolic_0_float_41 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_41 (_ bv3 32)) (concat (select symbolic_0_float_41 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x12 (concat (select symbolic_0_float_60 (_ bv1 32)) (select symbolic_0_float_60 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_60 (_ bv3 32)) (concat (select symbolic_0_float_60 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x19 ?x34)))
 (or (or (fp.isNaN ?x36) (fp.isNaN ?x48)) (fp.lt ?x36 ?x48)))))))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x29 (concat (select symbolic_0_float_41 (_ bv1 32)) (select symbolic_0_float_41 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_41 (_ bv3 32)) (concat (select symbolic_0_float_41 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (fp.geq ?x34 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x29 (concat (select symbolic_0_float_41 (_ bv1 32)) (select symbolic_0_float_41 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_41 (_ bv3 32)) (concat (select symbolic_0_float_41 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (fp.leq ?x34 ?x24))))))
(assert
 (let ((?x86 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
 (let ((?x90 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x86))))
 (let ((?x91 ((_ to_fp 8 24) ?x90)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x92 (fp.sub roundNearestTiesToEven ?x39 ?x91)))
 (let ((?x74 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x60 ?x69)))
 (let ((?x29 (concat (select symbolic_0_float_41 (_ bv1 32)) (select symbolic_0_float_41 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_41 (_ bv3 32)) (concat (select symbolic_0_float_41 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x81 (fp.sub roundNearestTiesToEven ?x34 (fp.sub roundNearestTiesToEven ?x70 ?x79))))
 (or (or (fp.isNaN ?x81) (fp.isNaN ?x92)) (fp.gt ?x81 ?x92))))))))))))))))))))
(assert
 (let ((?x86 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
 (let ((?x90 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x86))))
 (let ((?x91 ((_ to_fp 8 24) ?x90)))
 (let ((?x74 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x60 ?x69)))
 (let ((?x29 (concat (select symbolic_0_float_41 (_ bv1 32)) (select symbolic_0_float_41 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_41 (_ bv3 32)) (concat (select symbolic_0_float_41 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x81 (fp.sub roundNearestTiesToEven ?x34 (fp.sub roundNearestTiesToEven ?x70 ?x79))))
 (or (or (fp.isNaN ?x81) (fp.isNaN ?x91)) (fp.lt ?x81 ?x91))))))))))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (concat (select symbolic_0_float_72 (_ bv1 32)) (select symbolic_0_float_72 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_72 (_ bv3 32)) (concat (select symbolic_0_float_72 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (fp.geq ?x48 ?x60))))))
(assert
 (let ((?x103 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 (concat (select symbolic_0_float_72 (_ bv1 32)) (select symbolic_0_float_72 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_72 (_ bv3 32)) (concat (select symbolic_0_float_72 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (fp.leq ?x48 ?x103))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (fp.geq ?x69 ?x60))))))
(assert
 (let ((?x103 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (fp.leq ?x69 ?x103))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x107 (fp.sub roundNearestTiesToEven ?x39 ?x69)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x112 (concat (select symbolic_0_float6 (_ bv1 32)) (select symbolic_0_float6 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float6 (_ bv3 32)) (concat (select symbolic_0_float6 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (let ((?x118 (fp.sub roundNearestTiesToEven ?x117 ?x60)))
 (or (fp.isNaN ?x107) (fp.gt ?x118 ?x107)))))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x112 (concat (select symbolic_0_float6 (_ bv1 32)) (select symbolic_0_float6 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float6 (_ bv3 32)) (concat (select symbolic_0_float6 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (let ((?x118 (fp.sub roundNearestTiesToEven ?x117 ?x60)))
 (not (fp.isNaN ?x118))))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (not (fp.isNaN ?x69))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x112 (concat (select symbolic_0_float6 (_ bv1 32)) (select symbolic_0_float6 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float6 (_ bv3 32)) (concat (select symbolic_0_float6 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (let ((?x118 (fp.sub roundNearestTiesToEven ?x117 ?x60)))
 (not (fp.lt ?x118 ?x69)))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x74 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (fp.geq ?x79 ?x60))))))
(assert
 (let ((?x103 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x74 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (fp.leq ?x79 ?x103))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x60 ?x69)))
 (let ((?x132 (concat (select symbolic_0_float_27 (_ bv1 32)) (select symbolic_0_float_27 (_ bv0 32)))))
 (let ((?x136 (concat (select symbolic_0_float_27 (_ bv3 32)) (concat (select symbolic_0_float_27 (_ bv2 32)) ?x132))))
 (let ((?x137 ((_ to_fp 8 24) ?x136)))
 (let ((?x138 (fp.sub roundNearestTiesToEven ?x137 ?x70)))
 (not (fp.isNaN ?x138))))))))))))
(assert
 (let ((?x74 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x141 (fp.sub roundNearestTiesToEven ?x39 ?x79)))
 (not (fp.isNaN ?x141))))))))
(assert
 (let ((?x74 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x141 (fp.sub roundNearestTiesToEven ?x39 ?x79)))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x60 ?x69)))
 (let ((?x132 (concat (select symbolic_0_float_27 (_ bv1 32)) (select symbolic_0_float_27 (_ bv0 32)))))
 (let ((?x136 (concat (select symbolic_0_float_27 (_ bv3 32)) (concat (select symbolic_0_float_27 (_ bv2 32)) ?x132))))
 (let ((?x137 ((_ to_fp 8 24) ?x136)))
 (let ((?x138 (fp.sub roundNearestTiesToEven ?x137 ?x70)))
 (not (fp.gt ?x138 ?x141)))))))))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x86 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
 (let ((?x90 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x86))))
 (let ((?x91 ((_ to_fp 8 24) ?x90)))
 (fp.geq ?x91 ?x60))))))
(assert
 (let ((?x103 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x86 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
 (let ((?x90 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x86))))
 (let ((?x91 ((_ to_fp 8 24) ?x90)))
 (fp.leq ?x91 ?x103))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x112 (concat (select symbolic_0_float6 (_ bv1 32)) (select symbolic_0_float6 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float6 (_ bv3 32)) (concat (select symbolic_0_float6 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (fp.geq ?x117 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x112 (concat (select symbolic_0_float6 (_ bv1 32)) (select symbolic_0_float6 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float6 (_ bv3 32)) (concat (select symbolic_0_float6 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (fp.leq ?x117 ?x24))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x132 (concat (select symbolic_0_float_27 (_ bv1 32)) (select symbolic_0_float_27 (_ bv0 32)))))
 (let ((?x136 (concat (select symbolic_0_float_27 (_ bv3 32)) (concat (select symbolic_0_float_27 (_ bv2 32)) ?x132))))
 (let ((?x137 ((_ to_fp 8 24) ?x136)))
 (fp.geq ?x137 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x132 (concat (select symbolic_0_float_27 (_ bv1 32)) (select symbolic_0_float_27 (_ bv0 32)))))
 (let ((?x136 (concat (select symbolic_0_float_27 (_ bv3 32)) (concat (select symbolic_0_float_27 (_ bv2 32)) ?x132))))
 (let ((?x137 ((_ to_fp 8 24) ?x136)))
 (fp.leq ?x137 ?x24))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_60 (_ bv1 32)) (select symbolic_0_float_60 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_float_60 (_ bv3 32)) (concat (select symbolic_0_float_60 (_ bv2 32)) ?x12))))
(let ((?x19 ((_ to_fp 8 24) ?x18)))
(not (and (fp.geq ?x19 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x19 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
