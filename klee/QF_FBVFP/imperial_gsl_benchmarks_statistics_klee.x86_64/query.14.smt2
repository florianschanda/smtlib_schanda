(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_statistics_klee.x86_64/query.14.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun data0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24)))))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24)))))
 (fp.leq ?x31 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))))
(assert
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x61 ((_ to_fp 11 53) (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54)))))
 (fp.geq ?x61 ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))))
(assert
 (let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
 (let ((?x61 ((_ to_fp 11 53) (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54)))))
 (fp.leq ?x61 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))))
(assert
 (let ((?x65 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
(let ((?x24 (concat (select data0 (_ bv5 32)) (concat (select data0 (_ bv4 32)) (concat (select data0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select data0 (_ bv7 32)) (concat (select data0 (_ bv6 32)) ?x24)))))
(let ((?x70 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x31 ?x65) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x71 (fp.add roundNearestTiesToEven ?x65 ?x70)))
(let ((?x77 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ?x71) ((_ to_fp 11 53) (_ bv4611686018427387904 64)))))
(let ((?x78 (fp.add roundNearestTiesToEven ?x71 ?x77)))
(let ((?x45 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
(let ((?x54 (concat (select data0 (_ bv21 32)) (concat (select data0 (_ bv20 32)) (concat (select data0 (_ bv19 32)) ?x45)))))
(let ((?x61 ((_ to_fp 11 53) (concat (select data0 (_ bv23 32)) (concat (select data0 (_ bv22 32)) ?x54)))))
(let ((?x82 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x61 ?x78) ((_ to_fp 11 53) (_ bv4613937818241073152 64)))))
(let ((?x83 (fp.add roundNearestTiesToEven ?x78 ?x82)))
(let ((?x89 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ?x83) ((_ to_fp 11 53) (_ bv4616189618054758400 64)))))
(let ((?x90 (fp.add roundNearestTiesToEven ?x83 ?x89)))
(let ((?x96 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ?x90) ((_ to_fp 11 53) (_ bv4617315517961601024 64)))))
(let ((?x97 (fp.add roundNearestTiesToEven ?x90 ?x96)))
(let ((?x98 (fp.sub roundNearestTiesToEven ?x31 ?x97)))
(let ((?x100 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x98 ?x98) ?x65)))
(let ((?x102 (fp.add roundNearestTiesToEven ?x65 (fp.div roundNearestTiesToEven ?x100 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))))
(let ((?x103 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ?x97)))
(let ((?x105 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x103 ?x103) ?x102)))
(let ((?x107 (fp.add roundNearestTiesToEven ?x102 (fp.div roundNearestTiesToEven ?x105 ((_ to_fp 11 53) (_ bv4611686018427387904 64))))))
(let ((?x108 (fp.sub roundNearestTiesToEven ?x61 ?x97)))
(let ((?x110 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x108 ?x108) ?x107)))
(let ((?x112 (fp.add roundNearestTiesToEven ?x107 (fp.div roundNearestTiesToEven ?x110 ((_ to_fp 11 53) (_ bv4613937818241073152 64))))))
(let ((?x113 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ?x97)))
(let ((?x115 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x113 ?x113) ?x112)))
(let ((?x117 (fp.add roundNearestTiesToEven ?x112 (fp.div roundNearestTiesToEven ?x115 ((_ to_fp 11 53) (_ bv4616189618054758400 64))))))
(let ((?x118 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ?x97)))
(let ((?x120 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x118 ?x118) ?x117)))
(let ((?x122 (fp.add roundNearestTiesToEven ?x117 (fp.div roundNearestTiesToEven ?x120 ((_ to_fp 11 53) (_ bv4617315517961601024 64))))))
(let ((?x125 (fp.mul roundNearestTiesToEven ?x122 ((_ to_fp 11 53) (_ bv4608308318706860032 64)))))
(not (and (not (fp.isNaN ?x125)) (not (fp.lt ?x125 ?x65))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
