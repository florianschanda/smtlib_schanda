(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun g0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun f1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select g0 (_ bv2 32)) (concat (select g0 (_ bv1 32)) (select g0 (_ bv0 32))))))
 (let ((?x18 (concat (select g0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select g0 (_ bv4 32))))
 (let ((?x23 (select g0 (_ bv5 32))))
 (let ((?x26 (select g0 (_ bv6 32))))
 (let ((?x29 (select g0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (not (fp.isNaN ?x31))))))))))
(assert
 (let ((?x15 (concat (select g0 (_ bv2 32)) (concat (select g0 (_ bv1 32)) (select g0 (_ bv0 32))))))
 (let ((?x18 (concat (select g0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select g0 (_ bv4 32))))
 (let ((?x23 (select g0 (_ bv5 32))))
 (let ((?x26 (select g0 (_ bv6 32))))
 (let ((?x29 (select g0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (let (($x37 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv0 64)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x31) (ite $x37 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))))))))))
(assert
 (let ((?x15 (concat (select g0 (_ bv2 32)) (concat (select g0 (_ bv1 32)) (select g0 (_ bv0 32))))))
 (let ((?x18 (concat (select g0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select g0 (_ bv4 32))))
 (let ((?x23 (select g0 (_ bv5 32))))
 (let ((?x26 (select g0 (_ bv6 32))))
 (let ((?x29 (select g0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv0 64)))))))))))
(assert
 (let ((?x47 (concat (select f1 (_ bv2 32)) (concat (select f1 (_ bv1 32)) (select f1 (_ bv0 32))))))
 (let ((?x53 (concat (select f1 (_ bv5 32)) (concat (select f1 (_ bv4 32)) (concat (select f1 (_ bv3 32)) ?x47)))))
 (let ((?x58 ((_ to_fp 11 53) (concat (select f1 (_ bv7 32)) (concat (select f1 (_ bv6 32)) ?x53)))))
 (let ((?x15 (concat (select g0 (_ bv2 32)) (concat (select g0 (_ bv1 32)) (select g0 (_ bv0 32))))))
 (let ((?x18 (concat (select g0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select g0 (_ bv4 32))))
 (let ((?x23 (select g0 (_ bv5 32))))
 (let ((?x26 (select g0 (_ bv6 32))))
 (let ((?x29 (select g0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (fp.gt ?x31 ?x58))))))))))))
(assert
 (let ((?x47 (concat (select f1 (_ bv2 32)) (concat (select f1 (_ bv1 32)) (select f1 (_ bv0 32))))))
 (let ((?x53 (concat (select f1 (_ bv5 32)) (concat (select f1 (_ bv4 32)) (concat (select f1 (_ bv3 32)) ?x47)))))
 (let ((?x58 ((_ to_fp 11 53) (concat (select f1 (_ bv7 32)) (concat (select f1 (_ bv6 32)) ?x53)))))
 (not (fp.isNaN ?x58))))))
(assert
 (let ((?x47 (concat (select f1 (_ bv2 32)) (concat (select f1 (_ bv1 32)) (select f1 (_ bv0 32))))))
 (let ((?x53 (concat (select f1 (_ bv5 32)) (concat (select f1 (_ bv4 32)) (concat (select f1 (_ bv3 32)) ?x47)))))
 (let ((?x58 ((_ to_fp 11 53) (concat (select f1 (_ bv7 32)) (concat (select f1 (_ bv6 32)) ?x53)))))
 (let (($x63 (fp.gt ?x58 ((_ to_fp 11 53) (_ bv0 64)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x58) (ite $x63 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))))))
(assert
 (let ((?x47 (concat (select f1 (_ bv2 32)) (concat (select f1 (_ bv1 32)) (select f1 (_ bv0 32))))))
 (let ((?x53 (concat (select f1 (_ bv5 32)) (concat (select f1 (_ bv4 32)) (concat (select f1 (_ bv3 32)) ?x47)))))
 (let ((?x58 ((_ to_fp 11 53) (concat (select f1 (_ bv7 32)) (concat (select f1 (_ bv6 32)) ?x53)))))
 (fp.gt ?x58 ((_ to_fp 11 53) (_ bv0 64)))))))
(assert
 (let ((?x15 (concat (select g0 (_ bv2 32)) (concat (select g0 (_ bv1 32)) (select g0 (_ bv0 32))))))
(let ((?x18 (concat (select g0 (_ bv3 32)) ?x15)))
(let ((?x26 (select g0 (_ bv6 32))))
(let ((?x29 (select g0 (_ bv7 32))))
(let ((?x70 (concat ?x29 (concat ?x26 (concat (select g0 (_ bv5 32)) (select g0 (_ bv4 32)))))))
(let ((?x78 (bvor (bvand ?x70 (_ bv2147483647 32)) (concat (_ bv0 31) ((_ extract 31 31) (bvor ?x18 (bvsub (_ bv0 32) ?x18)))))))
(not (not (bvult (_ bv2146435072 32) ?x78))))))))))
(check-sat)
(exit)
