(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_syn_nan_longdouble.x86_64/query.07.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select f0 (_ bv8 32)) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select f0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (fp.isNaN ?x43)))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select f0 (_ bv8 32)) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select f0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select f0 (_ bv8 32)) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select f0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x54 (concat (concat ((_ extract 79 79) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16383 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16383 16) (_ bv9223372036854775808 64))))))
 (let ((?x76 ((_ to_fp 15 64) ?x54)))
 (= ((_ extract 63 63) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) (ite (or (fp.isSubnormal ?x76) (fp.isZero ?x76)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x78 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x79 ((_ to_fp 15 64) ?x78)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x79) (fp.isZero ?x79)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x78 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x79 ((_ to_fp 15 64) ?x78)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x79) (fp.isZero ?x79)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x78 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
(let ((?x79 ((_ to_fp 15 64) ?x78)))
(let ((?x54 (concat (concat ((_ extract 79 79) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16383 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16383 16) (_ bv9223372036854775808 64))))))
(let ((?x76 ((_ to_fp 15 64) ?x54)))
(let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
(let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
(let ((?x33 (concat (select f0 (_ bv8 32)) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24)))))
(let ((?x36 (concat (select f0 (_ bv9 32)) ?x33)))
(let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
(let ((?x74 (fp.add roundNearestTiesToEven ?x43 ?x76)))
(let ((?x88 (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x74 ?x74) ?x79)))
(not (fp.isNaN (fp.div roundNearestTiesToEven ?x88 ?x79)))))))))))))))
(check-sat)
(exit)
