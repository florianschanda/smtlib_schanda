(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_real_numerical_recipes_qrdcmp.x86_64/query.2.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun sym_f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (fp.geq ?x19 ((_ to_fp 8 24) (_ bv1065353216 32))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (fp.leq ?x19 ((_ to_fp 8 24) (_ bv1101004800 32))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (let ((?x32 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3236780938 32)) (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3196059648 32)) ?x19))))
 (let ((?x35 (fp.div roundNearestTiesToEven ?x32 ((_ to_fp 8 24) (_ bv1075663419 32)))))
 (let ((?x37 (fp.sub roundNearestTiesToEven ?x19 (fp.mul roundNearestTiesToEven ?x35 ((_ to_fp 8 24) (_ bv3196059648 32))))))
 (let ((?x46 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3254779904 32)) (fp.mul roundNearestTiesToEven ?x35 ((_ to_fp 8 24) (_ bv1056964608 32))))))
 (let ((?x48 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) (_ bv0 32)) (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1074236894 32)) ?x46))))
 (let ((?x52 (fp.add roundNearestTiesToEven ?x48 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3204448256 32)) ?x37))))
 (let ((?x56 (fp.mul roundNearestTiesToEven (fp.div roundNearestTiesToEven ?x52 ((_ to_fp 8 24) (_ bv1075285470 32))) ((_ to_fp 8 24) (_ bv3204448256 32)))))
 (let ((?x57 (fp.sub roundNearestTiesToEven ?x37 ?x56)))
 (fp.eq ?x57 ((_ to_fp 8 24) (_ bv0 32))))))))))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
(let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
(let ((?x32 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3236780938 32)) (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3196059648 32)) ?x19))))
(let ((?x35 (fp.div roundNearestTiesToEven ?x32 ((_ to_fp 8 24) (_ bv1075663419 32)))))
(let ((?x37 (fp.sub roundNearestTiesToEven ?x19 (fp.mul roundNearestTiesToEven ?x35 ((_ to_fp 8 24) (_ bv3196059648 32))))))
(let ((?x46 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3254779904 32)) (fp.mul roundNearestTiesToEven ?x35 ((_ to_fp 8 24) (_ bv1056964608 32))))))
(let ((?x48 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) (_ bv0 32)) (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1074236894 32)) ?x46))))
(let ((?x52 (fp.add roundNearestTiesToEven ?x48 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3204448256 32)) ?x37))))
(let ((?x56 (fp.mul roundNearestTiesToEven (fp.div roundNearestTiesToEven ?x52 ((_ to_fp 8 24) (_ bv1075285470 32))) ((_ to_fp 8 24) (_ bv3204448256 32)))))
(let ((?x57 (fp.sub roundNearestTiesToEven ?x37 ?x56)))
(not (not (fp.isNaN ?x57))))))))))))))
(check-sat)
(exit)
