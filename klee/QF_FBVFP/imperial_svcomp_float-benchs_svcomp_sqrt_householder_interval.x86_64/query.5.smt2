(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_sqrt_householder_interval.x86_64/query.5.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_double0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv4591870180066957722 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.leq ?x31 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31))))))))
(assert
 (let ((?x41 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.gt ?x31 ?x41)))))))))
(assert
 (let ((?x41 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
(let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
(let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
(let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(let ((?x50 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv4613937818241073152 64))) ?x41)))
(let ((?x54 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x41 ?x50) ((_ to_fp 11 53) (_ bv13845191154443747328 64)))))
(let ((?x46 (fp.mul roundNearestTiesToEven ?x41 (fp.mul roundNearestTiesToEven ?x31 ?x41))))
(let ((?x58 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x46 ?x54) ((_ to_fp 11 53) (_ bv4624633867356078080 64)))))
(let ((?x62 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x41 ?x58) ((_ to_fp 11 53) (_ bv4593671619917905920 64)))))
(let ((?x70 (fp.mul roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4517329193108106637 64)) (fp.add roundNearestTiesToEven ?x62 ?x62))))
(let ((?x66 (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x62 ?x41) ((_ to_fp 11 53) (_ bv4611686018427387904 64)))))
(let (($x76 (or (fp.gt ?x66 ?x70) (fp.lt ?x66 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x70)))))
(not $x76))))))))))))))))
(check-sat)
(exit)
