(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_sort_smallest_klee_bug.x86_64/query.1254.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun x0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x39 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x48 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x39)))))
 (let ((?x55 ((_ to_fp 11 53) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x48)))))
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
 (let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
 (not (fp.gt ?x31 ?x55)))))))))
(assert
 (let ((?x65 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x74 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x65)))))
 (let ((?x81 ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x74)))))
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
 (let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
 (not (fp.gt ?x31 ?x81)))))))))
(assert
 (let ((?x39 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x48 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x39)))))
 (let ((?x55 ((_ to_fp 11 53) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x48)))))
 (not (fp.isNaN ?x55))))))
(assert
 (let ((?x39 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x48 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x39)))))
 (let ((?x55 ((_ to_fp 11 53) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x48)))))
 (let ((?x93 (concat (select x0 (_ bv26 32)) (concat (select x0 (_ bv25 32)) (select x0 (_ bv24 32))))))
 (let ((?x102 (concat (select x0 (_ bv29 32)) (concat (select x0 (_ bv28 32)) (concat (select x0 (_ bv27 32)) ?x93)))))
 (let (($x110 (fp.lt ((_ to_fp 11 53) (concat (select x0 (_ bv31 32)) (concat (select x0 (_ bv30 32)) ?x102))) ?x55)))
 (not $x110))))))))
(assert
 (let ((?x39 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x48 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x39)))))
 (let ((?x55 ((_ to_fp 11 53) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x48)))))
 (let ((?x119 (concat (select x0 (_ bv34 32)) (concat (select x0 (_ bv33 32)) (select x0 (_ bv32 32))))))
 (let ((?x128 (concat (select x0 (_ bv37 32)) (concat (select x0 (_ bv36 32)) (concat (select x0 (_ bv35 32)) ?x119)))))
 (let ((?x135 ((_ to_fp 11 53) (concat (select x0 (_ bv39 32)) (concat (select x0 (_ bv38 32)) ?x128)))))
 (let (($x136 (fp.isNaN ?x135)))
 (or $x136 (fp.lt ?x135 ?x55))))))))))
(assert
 (let ((?x65 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x74 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x65)))))
 (let ((?x81 ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x74)))))
 (let ((?x119 (concat (select x0 (_ bv34 32)) (concat (select x0 (_ bv33 32)) (select x0 (_ bv32 32))))))
 (let ((?x128 (concat (select x0 (_ bv37 32)) (concat (select x0 (_ bv36 32)) (concat (select x0 (_ bv35 32)) ?x119)))))
 (let ((?x135 ((_ to_fp 11 53) (concat (select x0 (_ bv39 32)) (concat (select x0 (_ bv38 32)) ?x128)))))
 (fp.gt ?x135 ?x81))))))))
(assert
 (let ((?x119 (concat (select x0 (_ bv34 32)) (concat (select x0 (_ bv33 32)) (select x0 (_ bv32 32))))))
 (let ((?x128 (concat (select x0 (_ bv37 32)) (concat (select x0 (_ bv36 32)) (concat (select x0 (_ bv35 32)) ?x119)))))
 (let ((?x135 ((_ to_fp 11 53) (concat (select x0 (_ bv39 32)) (concat (select x0 (_ bv38 32)) ?x128)))))
 (let ((?x147 (concat (select x0 (_ bv42 32)) (concat (select x0 (_ bv41 32)) (select x0 (_ bv40 32))))))
 (let ((?x156 (concat (select x0 (_ bv45 32)) (concat (select x0 (_ bv44 32)) (concat (select x0 (_ bv43 32)) ?x147)))))
 (let ((?x163 ((_ to_fp 11 53) (concat (select x0 (_ bv47 32)) (concat (select x0 (_ bv46 32)) ?x156)))))
 (or (or (fp.isNaN ?x163) (fp.isNaN ?x135)) (fp.lt ?x163 ?x135)))))))))
(assert
 (let ((?x65 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x74 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x65)))))
 (let ((?x81 ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x74)))))
 (let ((?x147 (concat (select x0 (_ bv42 32)) (concat (select x0 (_ bv41 32)) (select x0 (_ bv40 32))))))
 (let ((?x156 (concat (select x0 (_ bv45 32)) (concat (select x0 (_ bv44 32)) (concat (select x0 (_ bv43 32)) ?x147)))))
 (let ((?x163 ((_ to_fp 11 53) (concat (select x0 (_ bv47 32)) (concat (select x0 (_ bv46 32)) ?x156)))))
 (fp.gt ?x163 ?x81))))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
 (let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
 (let ((?x65 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x74 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x65)))))
 (let ((?x81 ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x74)))))
 (let (($x169 (fp.isNaN ?x31)))
 (let (($x170 (not $x169)))
 (not (and $x170 (or (or (fp.isNaN ?x81) $x169) (fp.gt ?x81 ?x31)))))))))))))
(assert
 (let ((?x39 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x48 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x39)))))
 (let ((?x55 ((_ to_fp 11 53) (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x48)))))
 (let ((?x65 (concat (select x0 (_ bv10 32)) (concat (select x0 (_ bv9 32)) (select x0 (_ bv8 32))))))
 (let ((?x74 (concat (select x0 (_ bv13 32)) (concat (select x0 (_ bv12 32)) (concat (select x0 (_ bv11 32)) ?x65)))))
 (let ((?x81 ((_ to_fp 11 53) (concat (select x0 (_ bv15 32)) (concat (select x0 (_ bv14 32)) ?x74)))))
 (not (fp.gt ?x81 ?x55)))))))))
(assert
 (let ((?x93 (concat (select x0 (_ bv26 32)) (concat (select x0 (_ bv25 32)) (select x0 (_ bv24 32))))))
 (let ((?x102 (concat (select x0 (_ bv29 32)) (concat (select x0 (_ bv28 32)) (concat (select x0 (_ bv27 32)) ?x93)))))
 (let (($x179 (fp.isNaN ((_ to_fp 11 53) (concat (select x0 (_ bv31 32)) (concat (select x0 (_ bv30 32)) ?x102))))))
 (not $x179)))))
(assert
 (let ((?x15 (concat (select x0 (_ bv18 32)) (concat (select x0 (_ bv17 32)) (select x0 (_ bv16 32))))))
(let ((?x24 (concat (select x0 (_ bv21 32)) (concat (select x0 (_ bv20 32)) (concat (select x0 (_ bv19 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select x0 (_ bv23 32)) (concat (select x0 (_ bv22 32)) ?x24)))))
(let (($x169 (fp.isNaN ?x31)))
(not $x169))))))
(check-sat)
(exit)
