(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun x10 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr11 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select x10 (_ bv2 32)) (concat (select x10 (_ bv1 32)) (select x10 (_ bv0 32))))))
 (let ((?x21 ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) (concat (select x10 (_ bv3 32)) ?x15)))))
 (fp.gt ?x21 ((_ to_fp 11 53) (_ bv4596373779694328218 64))))))
(assert
 (let ((?x15 (concat (select x10 (_ bv2 32)) (concat (select x10 (_ bv1 32)) (select x10 (_ bv0 32))))))
 (let ((?x21 ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) (concat (select x10 (_ bv3 32)) ?x15)))))
 (fp.lt ?x21 ((_ to_fp 11 53) (_ bv4600877379321698714 64))))))
(assert
 (let ((?x15 (concat (select x10 (_ bv2 32)) (concat (select x10 (_ bv1 32)) (select x10 (_ bv0 32))))))
(let ((?x21 ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) (concat (select x10 (_ bv3 32)) ?x15)))))
(let ((?x35 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x21 ((_ to_fp 11 53) (_ bv0 64))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x38 ((_ fp.to_ubv 64) roundTowardZero (fp.mul roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4621819117588971520 64)) ?x35))))
(let ((?x41 ((_ extract 31 0) (bvmul (_ bv8 64) ?x38))))
(let ((?x47 (store (store (store (store const_arr11 (_ bv0 32) (_ bv0 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x55 (store (store (store (store ?x47 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x65 (store (store (store (store ?x55 (_ bv8 32) (_ bv154 8)) (_ bv9 32) (_ bv153 8)) (_ bv10 32) (_ bv153 8)) (_ bv11 32) (_ bv153 8))))
(let ((?x75 (store (store (store (store ?x65 (_ bv12 32) (_ bv153 8)) (_ bv13 32) (_ bv153 8)) (_ bv14 32) (_ bv185 8)) (_ bv15 32) (_ bv63 8))))
(let ((?x83 (store (store (store (store ?x75 (_ bv16 32) (_ bv154 8)) (_ bv17 32) (_ bv153 8)) (_ bv18 32) (_ bv153 8)) (_ bv19 32) (_ bv153 8))))
(let ((?x92 (store (store (store (store ?x83 (_ bv20 32) (_ bv153 8)) (_ bv21 32) (_ bv153 8)) (_ bv22 32) (_ bv201 8)) (_ bv23 32) (_ bv63 8))))
(let ((?x101 (store (store (store (store ?x92 (_ bv24 32) (_ bv51 8)) (_ bv25 32) (_ bv51 8)) (_ bv26 32) (_ bv51 8)) (_ bv27 32) (_ bv51 8))))
(let ((?x110 (store (store (store (store ?x101 (_ bv28 32) (_ bv51 8)) (_ bv29 32) (_ bv51 8)) (_ bv30 32) (_ bv211 8)) (_ bv31 32) (_ bv63 8))))
(let ((?x118 (store (store (store (store ?x110 (_ bv32 32) (_ bv154 8)) (_ bv33 32) (_ bv153 8)) (_ bv34 32) (_ bv153 8)) (_ bv35 32) (_ bv153 8))))
(let ((?x127 (store (store (store (store ?x118 (_ bv36 32) (_ bv153 8)) (_ bv37 32) (_ bv153 8)) (_ bv38 32) (_ bv217 8)) (_ bv39 32) (_ bv63 8))))
(let ((?x135 (store (store (store (store ?x127 (_ bv40 32) (_ bv0 8)) (_ bv41 32) (_ bv0 8)) (_ bv42 32) (_ bv0 8)) (_ bv43 32) (_ bv0 8))))
(let ((?x144 (store (store (store (store ?x135 (_ bv44 32) (_ bv0 8)) (_ bv45 32) (_ bv0 8)) (_ bv46 32) (_ bv224 8)) (_ bv47 32) (_ bv63 8))))
(let ((?x152 (store (store (store (store ?x144 (_ bv48 32) (_ bv51 8)) (_ bv49 32) (_ bv51 8)) (_ bv50 32) (_ bv51 8)) (_ bv51 32) (_ bv51 8))))
(let ((?x161 (store (store (store (store ?x152 (_ bv52 32) (_ bv51 8)) (_ bv53 32) (_ bv51 8)) (_ bv54 32) (_ bv227 8)) (_ bv55 32) (_ bv63 8))))
(let ((?x170 (store (store (store (store ?x161 (_ bv56 32) (_ bv102 8)) (_ bv57 32) (_ bv102 8)) (_ bv58 32) (_ bv102 8)) (_ bv59 32) (_ bv102 8))))
(let ((?x179 (store (store (store (store ?x170 (_ bv60 32) (_ bv102 8)) (_ bv61 32) (_ bv102 8)) (_ bv62 32) (_ bv230 8)) (_ bv63 32) (_ bv63 8))))
(let ((?x187 (store (store (store (store ?x179 (_ bv64 32) (_ bv154 8)) (_ bv65 32) (_ bv153 8)) (_ bv66 32) (_ bv153 8)) (_ bv67 32) (_ bv153 8))))
(let ((?x196 (store (store (store (store ?x187 (_ bv68 32) (_ bv153 8)) (_ bv69 32) (_ bv153 8)) (_ bv70 32) (_ bv233 8)) (_ bv71 32) (_ bv63 8))))
(let ((?x206 (store (store (store (store ?x196 (_ bv72 32) (_ bv205 8)) (_ bv73 32) (_ bv204 8)) (_ bv74 32) (_ bv204 8)) (_ bv75 32) (_ bv204 8))))
(let ((?x215 (store (store (store (store ?x206 (_ bv76 32) (_ bv204 8)) (_ bv77 32) (_ bv204 8)) (_ bv78 32) (_ bv236 8)) (_ bv79 32) (_ bv63 8))))
(let ((?x223 (store (store (store (store ?x215 (_ bv80 32) (_ bv0 8)) (_ bv81 32) (_ bv0 8)) (_ bv82 32) (_ bv0 8)) (_ bv83 32) (_ bv0 8))))
(let ((?x232 (store (store (store (store ?x223 (_ bv84 32) (_ bv0 8)) (_ bv85 32) (_ bv0 8)) (_ bv86 32) (_ bv240 8)) (_ bv87 32) (_ bv63 8))))
(let ((?x239 (concat (select ?x232 (bvadd (_ bv2 32) ?x41)) (concat (select ?x232 (bvadd (_ bv1 32) ?x41)) (select ?x232 ?x41)))))
(let ((?x245 (concat (select ?x232 (bvadd (_ bv4 32) ?x41)) (concat (select ?x232 (bvadd (_ bv3 32) ?x41)) ?x239))))
(let ((?x251 (concat (select ?x232 (bvadd (_ bv6 32) ?x41)) (concat (select ?x232 (bvadd (_ bv5 32) ?x41)) ?x245))))
(let (($x262 (not (fp.gt ((_ to_fp 11 53) (concat (select ?x232 (bvadd (_ bv7 32) ?x41)) ?x251)) ?x21))))
(let (($x260 (and (not (fp.isNaN ((_ to_fp 11 53) (concat (select ?x232 (bvadd (_ bv7 32) ?x41)) ?x251)))) (not (fp.isNaN ?x21)))))
(not (and $x260 $x262)))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
