(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_sin_interpolated_bigrange_tight.x86_64/query.12.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv13979912523730649088 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.leq ?x31 ((_ to_fp 11 53) (_ bv4756540486875873280 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv0 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x31)))
 (fp.gt ?x44 ((_ to_fp 11 53) (_ bv4640537203540230144 64))))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x31)))
 (let ((?x51 (fp.div roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x44 ((_ to_fp 11 53) (_ bv4640537203540230144 64))) ((_ to_fp 11 53) (_ bv4645040803167600640 64)))))
 (let ((?x55 (fp.mul roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ((_ fp.to_sbv 32) roundTowardZero ?x51)) ((_ to_fp 11 53) (_ bv4645040803167600640 64)))))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x44 ?x55)))
 (not (fp.lt ?x56 ((_ to_fp 11 53) (_ bv0 64))))))))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
(let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
(let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(let ((?x44 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x31)))
(let ((?x51 (fp.div roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x44 ((_ to_fp 11 53) (_ bv4640537203540230144 64))) ((_ to_fp 11 53) (_ bv4645040803167600640 64)))))
(let ((?x55 (fp.mul roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ((_ fp.to_sbv 32) roundTowardZero ?x51)) ((_ to_fp 11 53) (_ bv4645040803167600640 64)))))
(let ((?x56 (fp.sub roundNearestTiesToEven ?x44 ?x55)))
(let ((?x62 ((_ fp.to_sbv 32) roundTowardZero (fp.mul roundNearestTiesToEven ?x56 ((_ to_fp 11 53) (_ bv4611686018427387904 64))))))
(not (bvult (bvmul (_ bv8 64) ((_ sign_extend 32) ?x62)) (_ bv2889 64))))))))))))))
(check-sat)
(exit)
