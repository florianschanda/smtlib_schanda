(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_memcpy_and_check_all_ones_significand_klee_double.x86_64/query.5.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!1 () (_ BitVec 64))
(declare-fun f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (= (_ bv9218868437227405312 64) (bvand fresh_to_ieee_bv_!0 (_ bv9218868437227405312 64))))
(assert
 (= (_ bv0 64) (bvand fresh_to_ieee_bv_!1 (_ bv4503599627370495 64))))
(assert
 (let ((?x16 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x25 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x16)))))
 (let ((?x36 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x25))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
 (= ?x36 ((_ to_fp 11 53) fresh_to_ieee_bv_!0))))))
(assert
 (let ((?x16 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x25 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x16)))))
 (let ((?x36 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x25))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
 (= ?x36 ((_ to_fp 11 53) fresh_to_ieee_bv_!1))))))
(assert
 (let ((?x16 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
(let ((?x25 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x16)))))
(let ((?x36 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x25))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x54 (ite (fp.isInfinite ?x36) (ite (fp.gt ?x36 ((_ to_fp 11 53) (_ bv0 64))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
(not (not (= (_ bv0 32) ?x54))))))))
(check-sat)
(exit)
