(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_filter2_set.x86_64/query.08.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_double0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_11 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_22 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_33 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_44 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_55 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_66 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_77 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (fp.geq ((_ to_fp 11 53) ?x30) ((_ to_fp 11 53) (_ bv4604390187031047700 64))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (fp.leq ((_ to_fp 11 53) ?x30) ((_ to_fp 11 53) (_ bv4604570331016142520 64))))))))
(assert
 (let ((?x41 (concat (select symbolic_0_double_11 (_ bv1 32)) (select symbolic_0_double_11 (_ bv0 32)))))
 (let ((?x45 (concat (select symbolic_0_double_11 (_ bv3 32)) (concat (select symbolic_0_double_11 (_ bv2 32)) ?x41))))
 (let ((?x49 (concat (select symbolic_0_double_11 (_ bv5 32)) (concat (select symbolic_0_double_11 (_ bv4 32)) ?x45))))
 (let ((?x53 (concat (select symbolic_0_double_11 (_ bv7 32)) (concat (select symbolic_0_double_11 (_ bv6 32)) ?x49))))
 (fp.geq ((_ to_fp 11 53) ?x53) ((_ to_fp 11 53) (_ bv13831950571539278070 64))))))))
(assert
 (let ((?x41 (concat (select symbolic_0_double_11 (_ bv1 32)) (select symbolic_0_double_11 (_ bv0 32)))))
 (let ((?x45 (concat (select symbolic_0_double_11 (_ bv3 32)) (concat (select symbolic_0_double_11 (_ bv2 32)) ?x41))))
 (let ((?x49 (concat (select symbolic_0_double_11 (_ bv5 32)) (concat (select symbolic_0_double_11 (_ bv4 32)) ?x45))))
 (let ((?x53 (concat (select symbolic_0_double_11 (_ bv7 32)) (concat (select symbolic_0_double_11 (_ bv6 32)) ?x49))))
 (fp.leq ((_ to_fp 11 53) ?x53) ((_ to_fp 11 53) (_ bv13831860499546730660 64))))))))
(assert
 (let ((?x64 (concat (select symbolic_0_double_22 (_ bv1 32)) (select symbolic_0_double_22 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_double_22 (_ bv3 32)) (concat (select symbolic_0_double_22 (_ bv2 32)) ?x64))))
 (let ((?x72 (concat (select symbolic_0_double_22 (_ bv5 32)) (concat (select symbolic_0_double_22 (_ bv4 32)) ?x68))))
 (let ((?x76 (concat (select symbolic_0_double_22 (_ bv7 32)) (concat (select symbolic_0_double_22 (_ bv6 32)) ?x72))))
 (fp.geq ((_ to_fp 11 53) ?x76) ((_ to_fp 11 53) (_ bv4607587742766480753 64))))))))
(assert
 (let ((?x64 (concat (select symbolic_0_double_22 (_ bv1 32)) (select symbolic_0_double_22 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_double_22 (_ bv3 32)) (concat (select symbolic_0_double_22 (_ bv2 32)) ?x64))))
 (let ((?x72 (concat (select symbolic_0_double_22 (_ bv5 32)) (concat (select symbolic_0_double_22 (_ bv4 32)) ?x68))))
 (let ((?x76 (concat (select symbolic_0_double_22 (_ bv7 32)) (concat (select symbolic_0_double_22 (_ bv6 32)) ?x72))))
 (fp.leq ((_ to_fp 11 53) ?x76) ((_ to_fp 11 53) (_ bv4607677814759028163 64))))))))
(assert
 (let ((?x87 (concat (select symbolic_0_double_33 (_ bv1 32)) (select symbolic_0_double_33 (_ bv0 32)))))
 (let ((?x91 (concat (select symbolic_0_double_33 (_ bv3 32)) (concat (select symbolic_0_double_33 (_ bv2 32)) ?x87))))
 (let ((?x95 (concat (select symbolic_0_double_33 (_ bv5 32)) (concat (select symbolic_0_double_33 (_ bv4 32)) ?x91))))
 (let ((?x99 (concat (select symbolic_0_double_33 (_ bv7 32)) (concat (select symbolic_0_double_33 (_ bv6 32)) ?x95))))
 (fp.geq ((_ to_fp 11 53) ?x99) ((_ to_fp 11 53) (_ bv4608938822654691901 64))))))))
(assert
 (let ((?x87 (concat (select symbolic_0_double_33 (_ bv1 32)) (select symbolic_0_double_33 (_ bv0 32)))))
 (let ((?x91 (concat (select symbolic_0_double_33 (_ bv3 32)) (concat (select symbolic_0_double_33 (_ bv2 32)) ?x87))))
 (let ((?x95 (concat (select symbolic_0_double_33 (_ bv5 32)) (concat (select symbolic_0_double_33 (_ bv4 32)) ?x91))))
 (let ((?x99 (concat (select symbolic_0_double_33 (_ bv7 32)) (concat (select symbolic_0_double_33 (_ bv6 32)) ?x95))))
 (fp.leq ((_ to_fp 11 53) ?x99) ((_ to_fp 11 53) (_ bv4609028894647239311 64))))))))
(assert
 (let ((?x110 (concat (select symbolic_0_double_44 (_ bv1 32)) (select symbolic_0_double_44 (_ bv0 32)))))
 (let ((?x114 (concat (select symbolic_0_double_44 (_ bv3 32)) (concat (select symbolic_0_double_44 (_ bv2 32)) ?x110))))
 (let ((?x118 (concat (select symbolic_0_double_44 (_ bv5 32)) (concat (select symbolic_0_double_44 (_ bv4 32)) ?x114))))
 (let ((?x122 (concat (select symbolic_0_double_44 (_ bv7 32)) (concat (select symbolic_0_double_44 (_ bv6 32)) ?x118))))
 (fp.geq ((_ to_fp 11 53) ?x122) ((_ to_fp 11 53) (_ bv13827942367870918328 64))))))))
(assert
 (let ((?x110 (concat (select symbolic_0_double_44 (_ bv1 32)) (select symbolic_0_double_44 (_ bv0 32)))))
 (let ((?x114 (concat (select symbolic_0_double_44 (_ bv3 32)) (concat (select symbolic_0_double_44 (_ bv2 32)) ?x110))))
 (let ((?x118 (concat (select symbolic_0_double_44 (_ bv5 32)) (concat (select symbolic_0_double_44 (_ bv4 32)) ?x114))))
 (let ((?x122 (concat (select symbolic_0_double_44 (_ bv7 32)) (concat (select symbolic_0_double_44 (_ bv6 32)) ?x118))))
 (fp.leq ((_ to_fp 11 53) ?x122) ((_ to_fp 11 53) (_ bv13827762223885823508 64))))))))
(assert
 (let ((?x148 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x133 (concat (select symbolic_0_double_55 (_ bv1 32)) (select symbolic_0_double_55 (_ bv0 32)))))
 (let ((?x137 (concat (select symbolic_0_double_55 (_ bv3 32)) (concat (select symbolic_0_double_55 (_ bv2 32)) ?x133))))
 (let ((?x141 (concat (select symbolic_0_double_55 (_ bv5 32)) (concat (select symbolic_0_double_55 (_ bv4 32)) ?x137))))
 (let ((?x145 (concat (select symbolic_0_double_55 (_ bv7 32)) (concat (select symbolic_0_double_55 (_ bv6 32)) ?x141))))
 (fp.geq ((_ to_fp 11 53) ?x145) ?x148)))))))
(assert
 (let ((?x151 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x133 (concat (select symbolic_0_double_55 (_ bv1 32)) (select symbolic_0_double_55 (_ bv0 32)))))
 (let ((?x137 (concat (select symbolic_0_double_55 (_ bv3 32)) (concat (select symbolic_0_double_55 (_ bv2 32)) ?x133))))
 (let ((?x141 (concat (select symbolic_0_double_55 (_ bv5 32)) (concat (select symbolic_0_double_55 (_ bv4 32)) ?x137))))
 (let ((?x145 (concat (select symbolic_0_double_55 (_ bv7 32)) (concat (select symbolic_0_double_55 (_ bv6 32)) ?x141))))
 (fp.leq ((_ to_fp 11 53) ?x145) ?x151)))))))
(assert
 (let ((?x148 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x156 (concat (select symbolic_0_double_66 (_ bv1 32)) (select symbolic_0_double_66 (_ bv0 32)))))
 (let ((?x160 (concat (select symbolic_0_double_66 (_ bv3 32)) (concat (select symbolic_0_double_66 (_ bv2 32)) ?x156))))
 (let ((?x164 (concat (select symbolic_0_double_66 (_ bv5 32)) (concat (select symbolic_0_double_66 (_ bv4 32)) ?x160))))
 (let ((?x168 (concat (select symbolic_0_double_66 (_ bv7 32)) (concat (select symbolic_0_double_66 (_ bv6 32)) ?x164))))
 (fp.geq ((_ to_fp 11 53) ?x168) ?x148)))))))
(assert
 (let ((?x151 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x156 (concat (select symbolic_0_double_66 (_ bv1 32)) (select symbolic_0_double_66 (_ bv0 32)))))
 (let ((?x160 (concat (select symbolic_0_double_66 (_ bv3 32)) (concat (select symbolic_0_double_66 (_ bv2 32)) ?x156))))
 (let ((?x164 (concat (select symbolic_0_double_66 (_ bv5 32)) (concat (select symbolic_0_double_66 (_ bv4 32)) ?x160))))
 (let ((?x168 (concat (select symbolic_0_double_66 (_ bv7 32)) (concat (select symbolic_0_double_66 (_ bv6 32)) ?x164))))
 (fp.leq ((_ to_fp 11 53) ?x168) ?x151)))))))
(assert
 (let ((?x148 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x175 (concat (select symbolic_0_double_77 (_ bv1 32)) (select symbolic_0_double_77 (_ bv0 32)))))
 (let ((?x179 (concat (select symbolic_0_double_77 (_ bv3 32)) (concat (select symbolic_0_double_77 (_ bv2 32)) ?x175))))
 (let ((?x183 (concat (select symbolic_0_double_77 (_ bv5 32)) (concat (select symbolic_0_double_77 (_ bv4 32)) ?x179))))
 (let ((?x187 (concat (select symbolic_0_double_77 (_ bv7 32)) (concat (select symbolic_0_double_77 (_ bv6 32)) ?x183))))
 (fp.geq ((_ to_fp 11 53) ?x187) ?x148)))))))
(assert
 (let ((?x151 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x175 (concat (select symbolic_0_double_77 (_ bv1 32)) (select symbolic_0_double_77 (_ bv0 32)))))
 (let ((?x179 (concat (select symbolic_0_double_77 (_ bv3 32)) (concat (select symbolic_0_double_77 (_ bv2 32)) ?x175))))
 (let ((?x183 (concat (select symbolic_0_double_77 (_ bv5 32)) (concat (select symbolic_0_double_77 (_ bv4 32)) ?x179))))
 (let ((?x187 (concat (select symbolic_0_double_77 (_ bv7 32)) (concat (select symbolic_0_double_77 (_ bv6 32)) ?x183))))
 (fp.leq ((_ to_fp 11 53) ?x187) ?x151)))))))
(assert
 (not false))
(check-sat)
(exit)
