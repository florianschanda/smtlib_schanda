(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_fadd_to_exact_zero_klee_double.x86_64/query.20.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f_ackermann!0 () (_ BitVec 64))
(declare-fun g_ackermann!1 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!2 () (_ BitVec 64))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) f_ackermann!0))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) g_ackermann!1))))
(assert
 (fp.eq (fp.abs ((_ to_fp 11 53) f_ackermann!0)) (fp.abs ((_ to_fp 11 53) g_ackermann!1))))
(assert
 (let ((?x22 (concat (_ bv0 63) ((_ extract 63 63) g_ackermann!1))))
 (let ((?x29 (bvor (bvand (bvxor (_ bv1 64) ?x22) (concat (_ bv0 63) ((_ extract 63 63) f_ackermann!0))) (bvand (bvxor (_ bv1 64) (concat (_ bv0 63) ((_ extract 63 63) f_ackermann!0))) ?x22))))
 (not (= (_ bv0 64) ?x29)))))
(assert
 (let ((?x39 (ite (fp.isInfinite ((_ to_fp 11 53) f_ackermann!0)) (ite (fp.gt ((_ to_fp 11 53) f_ackermann!0) ((_ to_fp 11 53) (_ bv0 64))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x39)))
(assert
 (let ((?x12 ((_ to_fp 11 53) g_ackermann!1)))
 (let ((?x9 ((_ to_fp 11 53) f_ackermann!0)))
 (= (fp.add roundTowardPositive ?x9 ?x12) ((_ to_fp 11 53) fresh_to_ieee_bv_!2)))))
(assert
 (not (not (bvslt fresh_to_ieee_bv_!2 (_ bv0 64)))))
(check-sat)
(exit)
