(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_filter2_set.x86_64/query.09.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double_ackermann!5 () (_ BitVec 64))
(declare-fun symbolic_0_double_1_ackermann!0 () (_ BitVec 64))
(declare-fun symbolic_0_double_2_ackermann!3 () (_ BitVec 64))
(declare-fun symbolic_0_double_3_ackermann!1 () (_ BitVec 64))
(declare-fun symbolic_0_double_4_ackermann!2 () (_ BitVec 64))
(declare-fun symbolic_0_double_5_ackermann!4 () (_ BitVec 64))
(declare-fun symbolic_0_double_6_ackermann!7 () (_ BitVec 64))
(declare-fun symbolic_0_double_7_ackermann!6 () (_ BitVec 64))
(assert
 (let ((?x15 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
 (fp.geq ?x15 ((_ to_fp 11 53) (_ bv4604390187031047700 64)))))
(assert
 (let ((?x15 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
 (fp.leq ?x15 ((_ to_fp 11 53) (_ bv4604570331016142520 64)))))
(assert
 (let ((?x22 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.geq ?x22 ((_ to_fp 11 53) (_ bv13831950571539278070 64)))))
(assert
 (let ((?x22 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.leq ?x22 ((_ to_fp 11 53) (_ bv13831860499546730660 64)))))
(assert
 (let ((?x29 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
 (fp.geq ?x29 ((_ to_fp 11 53) (_ bv4607587742766480753 64)))))
(assert
 (let ((?x29 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
 (fp.leq ?x29 ((_ to_fp 11 53) (_ bv4607677814759028163 64)))))
(assert
 (let ((?x36 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
 (fp.geq ?x36 ((_ to_fp 11 53) (_ bv4608938822654691901 64)))))
(assert
 (let ((?x36 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
 (fp.leq ?x36 ((_ to_fp 11 53) (_ bv4609028894647239311 64)))))
(assert
 (let ((?x43 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
 (fp.geq ?x43 ((_ to_fp 11 53) (_ bv13827942367870918328 64)))))
(assert
 (let ((?x43 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
 (fp.leq ?x43 ((_ to_fp 11 53) (_ bv13827762223885823508 64)))))
(assert
 (let ((?x52 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x50 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
 (fp.geq ?x50 ?x52))))
(assert
 (let ((?x55 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x50 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
 (fp.leq ?x50 ?x55))))
(assert
 (let ((?x52 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x57 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
 (fp.geq ?x57 ?x52))))
(assert
 (let ((?x55 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x57 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
 (fp.leq ?x57 ?x55))))
(assert
 (let ((?x52 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x60 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
 (fp.geq ?x60 ?x52))))
(assert
 (let ((?x55 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x60 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
 (fp.leq ?x60 ?x55))))
(assert
 (let ((?x50 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
(let ((?x22 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
(let ((?x60 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
(let ((?x15 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
(let ((?x69 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x15 ?x60) (fp.mul roundNearestTiesToEven ?x22 ?x50))))
(let ((?x57 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
(let ((?x29 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
(let ((?x70 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x29 ?x57) ?x69)))
(let ((?x52 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x36 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
(let ((?x71 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x36 ?x52) ?x70)))
(let ((?x43 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
(let ((?x72 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x43 ?x52) ?x71)))
(not (and (fp.geq ?x72 ((_ to_fp 11 53) (_ bv13860109328209412096 64))) (fp.leq ?x72 ((_ to_fp 11 53) (_ bv4636737291354636288 64)))))))))))))))))))
(check-sat)
(exit)
