(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_filter2_set.x86_64/query.11.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double_ackermann!5 () (_ BitVec 64))
(declare-fun symbolic_0_double_1_ackermann!0 () (_ BitVec 64))
(declare-fun symbolic_0_double_2_ackermann!3 () (_ BitVec 64))
(declare-fun symbolic_0_double_3_ackermann!1 () (_ BitVec 64))
(declare-fun symbolic_0_double_4_ackermann!2 () (_ BitVec 64))
(declare-fun symbolic_0_double_5_ackermann!4 () (_ BitVec 64))
(declare-fun symbolic_0_double_6_ackermann!7 () (_ BitVec 64))
(declare-fun symbolic_0_double_7_ackermann!6 () (_ BitVec 64))
(declare-fun symbolic_0_double_8_ackermann!8 () (_ BitVec 64))
(assert
 (let ((?x16 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
 (fp.geq ?x16 ((_ to_fp 11 53) (_ bv4604390187031047700 64)))))
(assert
 (let ((?x16 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
 (fp.leq ?x16 ((_ to_fp 11 53) (_ bv4604570331016142520 64)))))
(assert
 (let ((?x23 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.geq ?x23 ((_ to_fp 11 53) (_ bv13831950571539278070 64)))))
(assert
 (let ((?x23 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.leq ?x23 ((_ to_fp 11 53) (_ bv13831860499546730660 64)))))
(assert
 (let ((?x30 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
 (fp.geq ?x30 ((_ to_fp 11 53) (_ bv4607587742766480753 64)))))
(assert
 (let ((?x30 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
 (fp.leq ?x30 ((_ to_fp 11 53) (_ bv4607677814759028163 64)))))
(assert
 (let ((?x37 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
 (fp.geq ?x37 ((_ to_fp 11 53) (_ bv4608938822654691901 64)))))
(assert
 (let ((?x37 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
 (fp.leq ?x37 ((_ to_fp 11 53) (_ bv4609028894647239311 64)))))
(assert
 (let ((?x44 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
 (fp.geq ?x44 ((_ to_fp 11 53) (_ bv13827942367870918328 64)))))
(assert
 (let ((?x44 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
 (fp.leq ?x44 ((_ to_fp 11 53) (_ bv13827762223885823508 64)))))
(assert
 (let ((?x53 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x51 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
 (fp.geq ?x51 ?x53))))
(assert
 (let ((?x56 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x51 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
 (fp.leq ?x51 ?x56))))
(assert
 (let ((?x53 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x58 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
 (fp.geq ?x58 ?x53))))
(assert
 (let ((?x56 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x58 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
 (fp.leq ?x58 ?x56))))
(assert
 (let ((?x53 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x61 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
 (fp.geq ?x61 ?x53))))
(assert
 (let ((?x56 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x61 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
 (fp.leq ?x61 ?x56))))
(assert
 (let ((?x53 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x64 ((_ to_fp 11 53) symbolic_0_double_8_ackermann!8)))
 (fp.geq ?x64 ?x53))))
(assert
 (let ((?x56 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x64 ((_ to_fp 11 53) symbolic_0_double_8_ackermann!8)))
 (fp.leq ?x64 ?x56))))
(assert
 (let ((?x61 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
(let ((?x23 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
(let ((?x64 ((_ to_fp 11 53) symbolic_0_double_8_ackermann!8)))
(let ((?x16 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
(let ((?x81 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x16 ?x64) (fp.mul roundNearestTiesToEven ?x23 ?x61))))
(let ((?x51 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
(let ((?x30 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
(let ((?x82 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x30 ?x51) ?x81)))
(let ((?x73 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x16 ?x61) (fp.mul roundNearestTiesToEven ?x23 ?x51))))
(let ((?x58 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
(let ((?x74 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x30 ?x58) ?x73)))
(let ((?x53 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x37 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
(let ((?x75 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x37 ?x53) ?x74)))
(let ((?x44 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
(let ((?x68 (fp.mul roundNearestTiesToEven ?x44 ?x53)))
(let ((?x77 (fp.mul roundNearestTiesToEven ?x37 (fp.add roundNearestTiesToEven ?x68 ?x75))))
(let ((?x84 (fp.add roundNearestTiesToEven ?x68 (fp.add roundNearestTiesToEven ?x77 ?x82))))
(not (and (fp.geq ?x84 ((_ to_fp 11 53) (_ bv13860109328209412096 64))) (fp.leq ?x84 ((_ to_fp 11 53) (_ bv4636737291354636288 64))))))))))))))))))))))))
(check-sat)
(exit)
