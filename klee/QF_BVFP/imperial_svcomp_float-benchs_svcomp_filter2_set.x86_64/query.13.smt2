(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_filter2_set.x86_64/query.13.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double_ackermann!5 () (_ BitVec 64))
(declare-fun symbolic_0_double_1_ackermann!0 () (_ BitVec 64))
(declare-fun symbolic_0_double_2_ackermann!3 () (_ BitVec 64))
(declare-fun symbolic_0_double_3_ackermann!1 () (_ BitVec 64))
(declare-fun symbolic_0_double_4_ackermann!2 () (_ BitVec 64))
(declare-fun symbolic_0_double_5_ackermann!4 () (_ BitVec 64))
(declare-fun symbolic_0_double_6_ackermann!7 () (_ BitVec 64))
(declare-fun symbolic_0_double_7_ackermann!6 () (_ BitVec 64))
(declare-fun symbolic_0_double_8_ackermann!8 () (_ BitVec 64))
(declare-fun symbolic_0_double_9_ackermann!9 () (_ BitVec 64))
(assert
 (let ((?x17 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
 (fp.geq ?x17 ((_ to_fp 11 53) (_ bv4604390187031047700 64)))))
(assert
 (let ((?x17 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
 (fp.leq ?x17 ((_ to_fp 11 53) (_ bv4604570331016142520 64)))))
(assert
 (let ((?x24 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.geq ?x24 ((_ to_fp 11 53) (_ bv13831950571539278070 64)))))
(assert
 (let ((?x24 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.leq ?x24 ((_ to_fp 11 53) (_ bv13831860499546730660 64)))))
(assert
 (let ((?x31 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv4607587742766480753 64)))))
(assert
 (let ((?x31 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
 (fp.leq ?x31 ((_ to_fp 11 53) (_ bv4607677814759028163 64)))))
(assert
 (let ((?x38 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
 (fp.geq ?x38 ((_ to_fp 11 53) (_ bv4608938822654691901 64)))))
(assert
 (let ((?x38 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
 (fp.leq ?x38 ((_ to_fp 11 53) (_ bv4609028894647239311 64)))))
(assert
 (let ((?x45 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
 (fp.geq ?x45 ((_ to_fp 11 53) (_ bv13827942367870918328 64)))))
(assert
 (let ((?x45 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
 (fp.leq ?x45 ((_ to_fp 11 53) (_ bv13827762223885823508 64)))))
(assert
 (let ((?x54 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x52 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
 (fp.geq ?x52 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x52 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
 (fp.leq ?x52 ?x57))))
(assert
 (let ((?x54 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x59 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
 (fp.geq ?x59 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x59 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
 (fp.leq ?x59 ?x57))))
(assert
 (let ((?x54 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x62 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
 (fp.geq ?x62 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x62 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
 (fp.leq ?x62 ?x57))))
(assert
 (let ((?x54 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x65 ((_ to_fp 11 53) symbolic_0_double_8_ackermann!8)))
 (fp.geq ?x65 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x65 ((_ to_fp 11 53) symbolic_0_double_8_ackermann!8)))
 (fp.leq ?x65 ?x57))))
(assert
 (let ((?x54 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x68 ((_ to_fp 11 53) symbolic_0_double_9_ackermann!9)))
 (fp.geq ?x68 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x68 ((_ to_fp 11 53) symbolic_0_double_9_ackermann!9)))
 (fp.leq ?x68 ?x57))))
(assert
 (let ((?x65 ((_ to_fp 11 53) symbolic_0_double_8_ackermann!8)))
(let ((?x24 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
(let ((?x68 ((_ to_fp 11 53) symbolic_0_double_9_ackermann!9)))
(let ((?x17 ((_ to_fp 11 53) symbolic_0_double_ackermann!5)))
(let ((?x94 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x17 ?x68) (fp.mul roundNearestTiesToEven ?x24 ?x65))))
(let ((?x62 ((_ to_fp 11 53) symbolic_0_double_7_ackermann!6)))
(let ((?x31 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!3)))
(let ((?x95 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x62) ?x94)))
(let ((?x86 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x17 ?x65) (fp.mul roundNearestTiesToEven ?x24 ?x62))))
(let ((?x52 ((_ to_fp 11 53) symbolic_0_double_5_ackermann!4)))
(let ((?x87 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x52) ?x86)))
(let ((?x77 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x17 ?x62) (fp.mul roundNearestTiesToEven ?x24 ?x52))))
(let ((?x59 ((_ to_fp 11 53) symbolic_0_double_6_ackermann!7)))
(let ((?x78 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ?x59) ?x77)))
(let ((?x54 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x38 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!1)))
(let ((?x79 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x38 ?x54) ?x78)))
(let ((?x45 ((_ to_fp 11 53) symbolic_0_double_4_ackermann!2)))
(let ((?x72 (fp.mul roundNearestTiesToEven ?x45 ?x54)))
(let ((?x80 (fp.add roundNearestTiesToEven ?x72 ?x79)))
(let ((?x88 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x38 ?x80) ?x87)))
(let ((?x90 (fp.mul roundNearestTiesToEven ?x38 (fp.add roundNearestTiesToEven ?x72 ?x88))))
(let ((?x97 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x45 ?x80) (fp.add roundNearestTiesToEven ?x90 ?x95))))
(not (and (fp.geq ?x97 ((_ to_fp 11 53) (_ bv13860109328209412096 64))) (fp.leq ?x97 ((_ to_fp 11 53) (_ bv4636737291354636288 64)))))))))))))))))))))))))))))
(check-sat)
(exit)
