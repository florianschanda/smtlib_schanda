(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_filter1.x86_64/query.13.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double_ackermann!1 () (_ BitVec 64))
(declare-fun symbolic_0_double_1_ackermann!0 () (_ BitVec 64))
(declare-fun symbolic_0_double_2_ackermann!2 () (_ BitVec 64))
(declare-fun symbolic_0_double_3_ackermann!3 () (_ BitVec 64))
(assert
 (let ((?x13 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x11 ((_ to_fp 11 53) symbolic_0_double_ackermann!1)))
 (fp.geq ?x11 ?x13))))
(assert
 (let ((?x16 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x11 ((_ to_fp 11 53) symbolic_0_double_ackermann!1)))
 (fp.leq ?x11 ?x16))))
(assert
 (let ((?x13 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x18 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.geq ?x18 ?x13))))
(assert
 (let ((?x16 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x18 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
 (fp.leq ?x18 ?x16))))
(assert
 (let ((?x13 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x21 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!2)))
 (fp.geq ?x21 ?x13))))
(assert
 (let ((?x16 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x21 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!2)))
 (fp.leq ?x21 ?x16))))
(assert
 (let ((?x13 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x24 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!3)))
 (fp.geq ?x24 ?x13))))
(assert
 (let ((?x16 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x24 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!3)))
 (fp.leq ?x24 ?x16))))
(assert
 (let ((?x21 ((_ to_fp 11 53) symbolic_0_double_2_ackermann!2)))
(let ((?x24 ((_ to_fp 11 53) symbolic_0_double_3_ackermann!3)))
(let ((?x18 ((_ to_fp 11 53) symbolic_0_double_1_ackermann!0)))
(let ((?x11 ((_ to_fp 11 53) symbolic_0_double_ackermann!1)))
(let ((?x31 (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x18) ?x11)))
(let ((?x35 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv4607173411600762667 64))) ?x21)))
(let ((?x37 (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x35 ?x18) ((_ to_fp 11 53) (_ bv4607173411600762667 64)))))
(let ((?x39 (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x37 ?x24) ?x21)))
(not (and (fp.geq ?x39 ((_ to_fp 11 53) (_ bv13890095209322119168 64))) (fp.leq ?x39 ((_ to_fp 11 53) (_ bv4666723172467343360 64))))))))))))))
(check-sat)
(exit)
