(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_mod_float.x86_64/query.03.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f_ackermann!0 () (_ BitVec 32))
(declare-fun g_ackermann!1 () (_ BitVec 32))
(declare-fun fresh_to_ieee_bv_!2 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!3 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!4 () (_ BitVec 64))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) f_ackermann!0))))
(assert
 (let ((?x19 (ite (fp.isInfinite ((_ to_fp 8 24) f_ackermann!0)) (ite (fp.gt ((_ to_fp 8 24) f_ackermann!0) ((_ to_fp 8 24) (_ bv0 32))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x19)))
(assert
 (let ((?x9 ((_ to_fp 8 24) f_ackermann!0)))
 (fp.gt ?x9 ((_ to_fp 8 24) (_ bv0 32)))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) g_ackermann!1))))
(assert
 (let ((?x27 (ite (fp.isInfinite ((_ to_fp 8 24) g_ackermann!1)) (ite (fp.gt ((_ to_fp 8 24) g_ackermann!1) ((_ to_fp 8 24) (_ bv0 32))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x27)))
(assert
 (let ((?x21 ((_ to_fp 8 24) g_ackermann!1)))
 (fp.gt ?x21 ((_ to_fp 8 24) (_ bv0 32)))))
(assert
 (let ((?x9 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x21 ((_ to_fp 8 24) g_ackermann!1)))
 (fp.gt ?x21 ?x9))))
(assert
 (let ((?x21 ((_ to_fp 8 24) g_ackermann!1)))
 (let ((?x31 ((_ to_fp 11 53) roundNearestTiesToEven ?x21)))
 (= ?x31 ((_ to_fp 11 53) fresh_to_ieee_bv_!2)))))
(assert
 (let ((?x21 ((_ to_fp 8 24) g_ackermann!1)))
 (let ((?x31 ((_ to_fp 11 53) roundNearestTiesToEven ?x21)))
 (= ?x31 ((_ to_fp 11 53) fresh_to_ieee_bv_!3)))))
(assert
 (= ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) f_ackermann!0)) ((_ to_fp 11 53) fresh_to_ieee_bv_!4)))
(assert
 (let ((?x50 ((_ extract 63 32) fresh_to_ieee_bv_!4)))
(let ((?x42 (bvor (bvand ((_ extract 63 32) fresh_to_ieee_bv_!2) (_ bv2147483647 32)) ((_ extract 31 0) fresh_to_ieee_bv_!3))))
(let (($x56 (and (not (= (_ bv0 32) ?x42)) (not (bvsle (_ bv2146435072 32) (bvxor ?x50 (bvand ?x50 (_ bv2147483648 32))))))))
(not $x56)))))
(check-sat)
(exit)
