(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_mod_longdouble.x86_64/query.3.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun f_ackermann!0 () (_ BitVec 80))
(declare-fun g_ackermann!1 () (_ BitVec 80))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (not (fp.isNaN ?x15)))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x36 ((_ to_fp 15 64) ?x33)))
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (let (($x45 (fp.gt ?x15 ?x36)))
 (= (_ bv0 32) (ite (fp.isInfinite ?x15) (ite $x45 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x36 ((_ to_fp 15 64) ?x33)))
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (fp.gt ?x15 ?x36))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (fp.gt ?x54 ?x15))))))
(assert
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (not (fp.isNaN ?x54)))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x36 ((_ to_fp 15 64) ?x33)))
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (let (($x64 (fp.gt ?x54 ?x36)))
 (= (_ bv0 32) (ite (fp.isInfinite ?x54) (ite $x64 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x36 ((_ to_fp 15 64) ?x33)))
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (fp.gt ?x54 ?x36))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x36 ((_ to_fp 15 64) ?x33)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x36) (fp.isZero ?x36)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (= ((_ extract 63 63) g_ackermann!1) (ite (or (fp.isSubnormal ?x54) (fp.isZero ?x54)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (= ((_ extract 63 63) g_ackermann!1) (ite (or (fp.isSubnormal ?x54) (fp.isZero ?x54)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (= ((_ extract 63 63) g_ackermann!1) (ite (or (fp.isSubnormal ?x54) (fp.isZero ?x54)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x53 (concat (concat ((_ extract 79 79) g_ackermann!1) ((_ extract 78 64) g_ackermann!1)) ((_ extract 62 0) g_ackermann!1))))
 (let ((?x54 ((_ to_fp 15 64) ?x53)))
 (= ((_ extract 63 63) g_ackermann!1) (ite (or (fp.isSubnormal ?x54) (fp.isZero ?x54)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x36 ((_ to_fp 15 64) ?x33)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x36) (fp.isZero ?x36)) (_ bv0 1) (_ bv1 1))))))
(assert
 (not (= (concat (_ bv0 16) (_ bv288444596360418433 64)) f_ackermann!0)))
(check-sat)
(exit)
