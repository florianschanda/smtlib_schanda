(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_inf_longdouble.x86_64/query.08.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun ld_ackermann!0 () (_ BitVec 80))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x30)))
 (let ((?x14 (concat (concat ((_ extract 79 79) ld_ackermann!0) ((_ extract 78 64) ld_ackermann!0)) ((_ extract 62 0) ld_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (let (($x44 (= (_ bv0 32) (ite (fp.isInfinite ?x15) (ite (fp.gt ?x15 ?x33) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))
 (not $x44)))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) ld_ackermann!0) ((_ extract 78 64) ld_ackermann!0)) ((_ extract 62 0) ld_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) ld_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) ld_ackermann!0) ((_ extract 78 64) ld_ackermann!0)) ((_ extract 62 0) ld_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) ld_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x30)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x33) (fp.isZero ?x33)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) ld_ackermann!0) ((_ extract 78 64) ld_ackermann!0)) ((_ extract 62 0) ld_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) ld_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x55 (concat (concat ((_ extract 79 79) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16383 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16383 16) (_ bv9223372036854775808 64))))))
 (let ((?x56 ((_ to_fp 15 64) ?x55)))
 (= ((_ extract 63 63) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) (ite (or (fp.isSubnormal ?x56) (fp.isZero ?x56)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x30)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x33) (fp.isZero ?x33)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
(let ((?x33 ((_ to_fp 15 64) ?x30)))
(let ((?x55 (concat (concat ((_ extract 79 79) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16383 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16383 16) (_ bv9223372036854775808 64))))))
(let ((?x56 ((_ to_fp 15 64) ?x55)))
(let ((?x14 (concat (concat ((_ extract 79 79) ld_ackermann!0) ((_ extract 78 64) ld_ackermann!0)) ((_ extract 62 0) ld_ackermann!0))))
(let ((?x15 ((_ to_fp 15 64) ?x14)))
(not (fp.gt (fp.add roundNearestTiesToEven (fp.abs ?x15) ?x56) ?x33)))))))))
(check-sat)
(exit)
