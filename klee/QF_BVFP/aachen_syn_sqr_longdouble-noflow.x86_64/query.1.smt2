(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_sqr_longdouble-noflow.x86_64/query.1.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun f_ackermann!0 () (_ BitVec 80))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (not (fp.isNaN ?x14)))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv16382 16) (_ bv18262276632972455936 64))) ((_ extract 78 64) (concat (_ bv16382 16) (_ bv18262276632972455936 64)))) ((_ extract 62 0) (concat (_ bv16382 16) (_ bv18262276632972455936 64))))))
 (let ((?x34 ((_ to_fp 15 64) ?x33)))
 (= ((_ extract 63 63) (concat (_ bv16382 16) (_ bv18262276632972455936 64))) (ite (or (fp.isSubnormal ?x34) (fp.isZero ?x34)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv16382 16) (_ bv18262276632972455936 64))) ((_ extract 78 64) (concat (_ bv16382 16) (_ bv18262276632972455936 64)))) ((_ extract 62 0) (concat (_ bv16382 16) (_ bv18262276632972455936 64))))))
 (let ((?x34 ((_ to_fp 15 64) ?x33)))
 (= ((_ extract 63 63) (concat (_ bv16382 16) (_ bv18262276632972455936 64))) (ite (or (fp.isSubnormal ?x34) (fp.isZero ?x34)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x33 (concat (concat ((_ extract 79 79) (concat (_ bv16382 16) (_ bv18262276632972455936 64))) ((_ extract 78 64) (concat (_ bv16382 16) (_ bv18262276632972455936 64)))) ((_ extract 62 0) (concat (_ bv16382 16) (_ bv18262276632972455936 64))))))
(let ((?x34 ((_ to_fp 15 64) ?x33)))
(let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
(let ((?x14 ((_ to_fp 15 64) ?x13)))
(let ((?x42 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x14 ?x14))))
(let ((?x51 (fp.mul roundNearestTiesToEven ?x42 ?x34)))
(let ((?x32 (fp.abs ?x14)))
(let (($x46 (or (fp.isNaN (fp.mul roundNearestTiesToEven ?x32 ?x34)) (fp.isNaN ?x42))))
(let (($x55 (or (or $x46 (fp.gt (fp.mul roundNearestTiesToEven ?x32 ?x34) ?x42)) (or (or (fp.isNaN ?x32) (fp.isNaN ?x51)) (fp.lt ?x32 ?x51)))))
(not $x55)))))))))))
(check-sat)
(exit)
