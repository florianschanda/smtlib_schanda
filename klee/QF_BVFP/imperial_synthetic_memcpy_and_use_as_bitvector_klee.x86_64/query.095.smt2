(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_memcpy_and_use_as_bitvector_klee.x86_64/query.095.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun shiftAmount1_ackermann!0 () (_ BitVec 32))
(declare-fun fresh_to_ieee_bv_!2 () (_ BitVec 32))
(declare-fun f_ackermann!1 () (_ BitVec 32))
(assert
 (bvult shiftAmount1_ackermann!0 (_ bv32 32)))
(assert
 (= (fp.add roundNearestTiesToEven ((_ to_fp 8 24) f_ackermann!1) ((_ to_fp 8 24) (_ bv1065353216 32))) ((_ to_fp 8 24) fresh_to_ieee_bv_!2)))
(assert
 (let ((?x26 (ite (= shiftAmount1_ackermann!0 (_ bv31 32)) (concat (_ bv0 31) ((_ extract 31 31) fresh_to_ieee_bv_!2)) (_ bv0 32))))
(let ((?x32 (ite (= shiftAmount1_ackermann!0 (_ bv30 32)) (concat (_ bv0 30) ((_ extract 31 30) fresh_to_ieee_bv_!2)) ?x26)))
(let ((?x38 (ite (= shiftAmount1_ackermann!0 (_ bv29 32)) (concat (_ bv0 29) ((_ extract 31 29) fresh_to_ieee_bv_!2)) ?x32)))
(let ((?x44 (ite (= shiftAmount1_ackermann!0 (_ bv28 32)) (concat (_ bv0 28) ((_ extract 31 28) fresh_to_ieee_bv_!2)) ?x38)))
(let ((?x50 (ite (= shiftAmount1_ackermann!0 (_ bv27 32)) (concat (_ bv0 27) ((_ extract 31 27) fresh_to_ieee_bv_!2)) ?x44)))
(let ((?x56 (ite (= shiftAmount1_ackermann!0 (_ bv26 32)) (concat (_ bv0 26) ((_ extract 31 26) fresh_to_ieee_bv_!2)) ?x50)))
(let ((?x62 (ite (= shiftAmount1_ackermann!0 (_ bv25 32)) (concat (_ bv0 25) ((_ extract 31 25) fresh_to_ieee_bv_!2)) ?x56)))
(let ((?x68 (ite (= shiftAmount1_ackermann!0 (_ bv24 32)) (concat (_ bv0 24) ((_ extract 31 24) fresh_to_ieee_bv_!2)) ?x62)))
(let ((?x74 (ite (= shiftAmount1_ackermann!0 (_ bv23 32)) (concat (_ bv0 23) ((_ extract 31 23) fresh_to_ieee_bv_!2)) ?x68)))
(let ((?x80 (ite (= shiftAmount1_ackermann!0 (_ bv22 32)) (concat (_ bv0 22) ((_ extract 31 22) fresh_to_ieee_bv_!2)) ?x74)))
(let ((?x86 (ite (= shiftAmount1_ackermann!0 (_ bv21 32)) (concat (_ bv0 21) ((_ extract 31 21) fresh_to_ieee_bv_!2)) ?x80)))
(let ((?x92 (ite (= shiftAmount1_ackermann!0 (_ bv20 32)) (concat (_ bv0 20) ((_ extract 31 20) fresh_to_ieee_bv_!2)) ?x86)))
(let ((?x98 (ite (= shiftAmount1_ackermann!0 (_ bv19 32)) (concat (_ bv0 19) ((_ extract 31 19) fresh_to_ieee_bv_!2)) ?x92)))
(let ((?x104 (ite (= shiftAmount1_ackermann!0 (_ bv18 32)) (concat (_ bv0 18) ((_ extract 31 18) fresh_to_ieee_bv_!2)) ?x98)))
(let ((?x110 (ite (= shiftAmount1_ackermann!0 (_ bv17 32)) (concat (_ bv0 17) ((_ extract 31 17) fresh_to_ieee_bv_!2)) ?x104)))
(let ((?x116 (ite (= shiftAmount1_ackermann!0 (_ bv16 32)) (concat (_ bv0 16) ((_ extract 31 16) fresh_to_ieee_bv_!2)) ?x110)))
(let ((?x122 (ite (= shiftAmount1_ackermann!0 (_ bv15 32)) (concat (_ bv0 15) ((_ extract 31 15) fresh_to_ieee_bv_!2)) ?x116)))
(let ((?x128 (ite (= shiftAmount1_ackermann!0 (_ bv14 32)) (concat (_ bv0 14) ((_ extract 31 14) fresh_to_ieee_bv_!2)) ?x122)))
(let ((?x134 (ite (= shiftAmount1_ackermann!0 (_ bv13 32)) (concat (_ bv0 13) ((_ extract 31 13) fresh_to_ieee_bv_!2)) ?x128)))
(let ((?x140 (ite (= shiftAmount1_ackermann!0 (_ bv12 32)) (concat (_ bv0 12) ((_ extract 31 12) fresh_to_ieee_bv_!2)) ?x134)))
(let ((?x146 (ite (= shiftAmount1_ackermann!0 (_ bv11 32)) (concat (_ bv0 11) ((_ extract 31 11) fresh_to_ieee_bv_!2)) ?x140)))
(let ((?x152 (ite (= shiftAmount1_ackermann!0 (_ bv10 32)) (concat (_ bv0 10) ((_ extract 31 10) fresh_to_ieee_bv_!2)) ?x146)))
(let ((?x158 (ite (= shiftAmount1_ackermann!0 (_ bv9 32)) (concat (_ bv0 9) ((_ extract 31 9) fresh_to_ieee_bv_!2)) ?x152)))
(let ((?x164 (ite (= shiftAmount1_ackermann!0 (_ bv8 32)) (concat (_ bv0 8) ((_ extract 31 8) fresh_to_ieee_bv_!2)) ?x158)))
(let ((?x170 (ite (= shiftAmount1_ackermann!0 (_ bv7 32)) (concat (_ bv0 7) ((_ extract 31 7) fresh_to_ieee_bv_!2)) ?x164)))
(let ((?x176 (ite (= shiftAmount1_ackermann!0 (_ bv6 32)) (concat (_ bv0 6) ((_ extract 31 6) fresh_to_ieee_bv_!2)) ?x170)))
(let ((?x181 (ite (= shiftAmount1_ackermann!0 (_ bv5 32)) (concat (_ bv0 5) ((_ extract 31 5) fresh_to_ieee_bv_!2)) ?x176)))
(let ((?x187 (ite (= shiftAmount1_ackermann!0 (_ bv4 32)) (concat (_ bv0 4) ((_ extract 31 4) fresh_to_ieee_bv_!2)) ?x181)))
(let ((?x193 (ite (= shiftAmount1_ackermann!0 (_ bv3 32)) (concat (_ bv0 3) ((_ extract 31 3) fresh_to_ieee_bv_!2)) ?x187)))
(let ((?x199 (ite (= shiftAmount1_ackermann!0 (_ bv2 32)) (concat (_ bv0 2) ((_ extract 31 2) fresh_to_ieee_bv_!2)) ?x193)))
(let ((?x205 (ite (= shiftAmount1_ackermann!0 (_ bv1 32)) (concat (_ bv0 1) ((_ extract 31 1) fresh_to_ieee_bv_!2)) ?x199)))
(let (($x10 (bvult shiftAmount1_ackermann!0 (_ bv32 32))))
(let ((?x208 (ite $x10 (ite (= shiftAmount1_ackermann!0 (_ bv0 32)) fresh_to_ieee_bv_!2 ?x205) (_ bv0 32))))
(not (bvult (_ bv5 32) ?x208))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
