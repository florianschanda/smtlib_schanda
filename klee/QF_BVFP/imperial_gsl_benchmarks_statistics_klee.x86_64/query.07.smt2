(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_statistics_klee.x86_64/query.07.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data_ackermann!0 () (_ BitVec 64))
(declare-fun data_ackermann!1 () (_ BitVec 64))
(assert
 (let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
 (fp.geq ?x9 ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))
(assert
 (let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
 (fp.leq ?x9 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))
(assert
 (let ((?x16 ((_ to_fp 11 53) data_ackermann!1)))
 (fp.geq ?x16 ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))
(assert
 (let ((?x16 ((_ to_fp 11 53) data_ackermann!1)))
 (fp.leq ?x16 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))
(assert
 (let ((?x40 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) data_ackermann!0)) (_ bv4625787914760591770 64) data_ackermann!0)))
(let ((?x43 (ite (fp.lt ((_ to_fp 11 53) data_ackermann!1) ((_ to_fp 11 53) ?x40)) data_ackermann!1 ?x40)))
(let ((?x46 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x43)) (_ bv4625844209755933901 64) ?x43)))
(let ((?x26 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) data_ackermann!0)) (_ bv4625787914760591770 64) data_ackermann!0)))
(let ((?x29 (ite (fp.gt ((_ to_fp 11 53) data_ackermann!1) ((_ to_fp 11 53) ?x26)) data_ackermann!1 ?x26)))
(let ((?x32 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x29)) (_ bv4625844209755933901 64) ?x29)))
(let (($x54 (fp.lt ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x32)) (_ bv4623282787467866931 64) ?x32)) ((_ to_fp 11 53) (ite (fp.lt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x46)) (_ bv4623282787467866931 64) ?x46)))))
(let (($x52 (not (fp.isNaN ((_ to_fp 11 53) (ite (fp.lt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x46)) (_ bv4623282787467866931 64) ?x46))))))
(let (($x38 (not (fp.isNaN ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x32)) (_ bv4623282787467866931 64) ?x32))))))
(not (and (and $x38 $x52) (not $x54)))))))))))))
(check-sat)
(exit)
