(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_statistics_klee.x86_64/query.12.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data_ackermann!0 () (_ BitVec 64))
(declare-fun data_ackermann!1 () (_ BitVec 64))
(assert
 (let ((?x11 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
 (fp.geq ?x9 ?x11))))
(assert
 (let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
 (fp.leq ?x9 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))
(assert
 (let ((?x11 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
 (let ((?x16 ((_ to_fp 11 53) data_ackermann!1)))
 (fp.geq ?x16 ?x11))))
(assert
 (let ((?x16 ((_ to_fp 11 53) data_ackermann!1)))
 (fp.leq ?x16 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))
(assert
 (let ((?x11 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))
(let ((?x25 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) data_ackermann!0) ((_ to_fp 11 53) (_ bv0 64))) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x26 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x25)))
(let ((?x32 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ?x26) ((_ to_fp 11 53) (_ bv4611686018427387904 64)))))
(let ((?x33 (fp.add roundNearestTiesToEven ?x26 ?x32)))
(let ((?x16 ((_ to_fp 11 53) data_ackermann!1)))
(let ((?x37 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x16 ?x33) ((_ to_fp 11 53) (_ bv4613937818241073152 64)))))
(let ((?x38 (fp.add roundNearestTiesToEven ?x33 ?x37)))
(let ((?x44 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ?x38) ((_ to_fp 11 53) (_ bv4616189618054758400 64)))))
(let ((?x45 (fp.add roundNearestTiesToEven ?x38 ?x44)))
(let ((?x51 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ?x45) ((_ to_fp 11 53) (_ bv4617315517961601024 64)))))
(let ((?x52 (fp.add roundNearestTiesToEven ?x45 ?x51)))
(not (and (not (fp.isNaN ?x52)) (not (fp.lt ?x52 ?x11)))))))))))))))))
(check-sat)
(exit)
