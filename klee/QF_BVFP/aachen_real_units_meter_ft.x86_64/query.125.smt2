(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_real_units_meter_ft.x86_64/query.125.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun |argv[1]_ackermann!0| () (_ BitVec 8))
(assert
 (let ((?x9 ((_ sign_extend 24) |argv[1]_ackermann!0|)))
 (bvsle (_ bv48 32) ?x9)))
(assert
 (let ((?x9 ((_ sign_extend 24) |argv[1]_ackermann!0|)))
 (bvsle ?x9 (_ bv57 32))))
(assert
 (not (= (_ bv48 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv49 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv50 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv51 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv52 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv53 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv54 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv55 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (not (= (_ bv56 8) ((_ extract 7 0) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(assert
 (let ((?x49 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x50 ((_ to_fp 15 64) ?x49)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x50) (fp.isZero ?x50)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x73 (concat (concat ((_ extract 79 79) (concat (_ bv16385 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16385 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16385 16) (_ bv9223372036854775808 64))))))
 (let ((?x74 ((_ to_fp 15 64) ?x73)))
 (= ((_ extract 63 63) (concat (_ bv16385 16) (_ bv9223372036854775808 64))) (ite (or (fp.isSubnormal ?x74) (fp.isZero ?x74)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x49 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x50 ((_ to_fp 15 64) ?x49)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x50) (fp.isZero ?x50)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x49 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
(let ((?x50 ((_ to_fp 15 64) ?x49)))
(let ((?x60 ((_ to_fp 15 64) roundNearestTiesToEven (bvadd (_ bv4294967248 32) ((_ sign_extend 24) |argv[1]_ackermann!0|)))))
(let ((?x63 ((_ to_fp 11 53) roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x50 ?x60))))
(let ((?x64 ((_ to_fp 15 64) roundNearestTiesToEven ?x63)))
(let ((?x73 (concat (concat ((_ extract 79 79) (concat (_ bv16385 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16385 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16385 16) (_ bv9223372036854775808 64))))))
(let ((?x74 ((_ to_fp 15 64) ?x73)))
(let (($x86 (and (fp.eq ?x64 (fp.div roundNearestTiesToEven ?x64 ?x74)) (not (fp.eq ?x64 ?x50)))))
(not (not $x86)))))))))))
(check-sat)
(exit)
