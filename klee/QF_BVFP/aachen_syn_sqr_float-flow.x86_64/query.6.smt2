(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_sqr_float-flow.x86_64/query.6.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun f_ackermann!0 () (_ BitVec 32))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) f_ackermann!0))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
 (not (fp.eq ?x13 ((_ to_fp 8 24) (_ bv2139095040 32)))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
 (not (fp.eq ?x13 ((_ to_fp 8 24) (_ bv0 32)))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x22 (fp.abs ?x8)))
 (let ((?x23 ((_ to_fp 11 53) roundNearestTiesToEven ?x22)))
 (let ((?x26 (fp.mul roundNearestTiesToEven ?x23 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (not (fp.isNaN ?x26)))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
 (let ((?x29 ((_ to_fp 11 53) roundNearestTiesToEven ?x13)))
 (not (fp.isNaN ?x29))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
 (let ((?x29 ((_ to_fp 11 53) roundNearestTiesToEven ?x13)))
 (let ((?x22 (fp.abs ?x8)))
 (let ((?x23 ((_ to_fp 11 53) roundNearestTiesToEven ?x22)))
 (let ((?x26 (fp.mul roundNearestTiesToEven ?x23 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (not (fp.gt ?x26 ?x29)))))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x22 (fp.abs ?x8)))
 (let ((?x23 ((_ to_fp 11 53) roundNearestTiesToEven ?x22)))
 (not (fp.isNaN ?x23))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
 (let ((?x29 ((_ to_fp 11 53) roundNearestTiesToEven ?x13)))
 (let ((?x36 (fp.mul roundNearestTiesToEven ?x29 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (not (fp.isNaN ?x36)))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
 (let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
 (let ((?x29 ((_ to_fp 11 53) roundNearestTiesToEven ?x13)))
 (let ((?x36 (fp.mul roundNearestTiesToEven ?x29 ((_ to_fp 11 53) (_ bv4607092346807469998 64)))))
 (let ((?x22 (fp.abs ?x8)))
 (let ((?x23 ((_ to_fp 11 53) roundNearestTiesToEven ?x22)))
 (not (fp.lt ?x23 ?x36)))))))))
(assert
 (let ((?x8 ((_ to_fp 8 24) f_ackermann!0)))
(let ((?x13 (fp.sqrt roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x8 ?x8))))
(let ((?x22 (fp.abs ?x8)))
(not (not (fp.eq ?x22 ?x13)))))))
(check-sat)
(exit)
