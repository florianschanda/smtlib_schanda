(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_real_numerical_recipes_gaussj.x86_64/query.23.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun sym_f_ackermann!0 () (_ BitVec 32))
(assert
 (let ((?x10 ((_ to_fp 8 24) (_ bv1065353216 32))))
 (let ((?x8 ((_ to_fp 8 24) sym_f_ackermann!0)))
 (fp.gt ?x8 ?x10))))
(assert
 (let ((?x8 ((_ to_fp 8 24) sym_f_ackermann!0)))
 (fp.lt ?x8 ((_ to_fp 8 24) (_ bv1120403456 32)))))
(assert
 (not (fp.isNaN (fp.abs ((_ to_fp 8 24) sym_f_ackermann!0)))))
(assert
 (not (fp.lt (fp.abs ((_ to_fp 8 24) sym_f_ackermann!0)) ((_ to_fp 8 24) (_ bv1082130432 32)))))
(assert
 (let ((?x34 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x8 ((_ to_fp 8 24) sym_f_ackermann!0)))
 (let ((?x10 ((_ to_fp 8 24) (_ bv1065353216 32))))
 (let ((?x23 (fp.div roundNearestTiesToEven ?x10 ?x8)))
 (let ((?x35 (fp.mul roundNearestTiesToEven ?x23 ?x34)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv1082130432 32))))
 (let ((?x37 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1073741824 32)) (fp.mul roundNearestTiesToEven ?x19 ?x35))))
 (let ((?x38 (fp.abs ?x37)))
 (let ((?x26 (fp.mul roundNearestTiesToEven ?x23 ((_ to_fp 8 24) (_ bv1079194419 32)))))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x10 (fp.mul roundNearestTiesToEven ?x19 ?x26))))
 (let ((?x29 (fp.abs ?x28)))
 (or (or (fp.isNaN ?x29) (fp.isNaN ?x38)) (fp.lt ?x29 ?x38))))))))))))))
(assert
 (let ((?x34 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x8 ((_ to_fp 8 24) sym_f_ackermann!0)))
(let ((?x10 ((_ to_fp 8 24) (_ bv1065353216 32))))
(let ((?x23 (fp.div roundNearestTiesToEven ?x10 ?x8)))
(let ((?x26 (fp.mul roundNearestTiesToEven ?x23 ((_ to_fp 8 24) (_ bv1079194419 32)))))
(let ((?x19 ((_ to_fp 8 24) (_ bv1082130432 32))))
(let ((?x28 (fp.sub roundNearestTiesToEven ?x10 (fp.mul roundNearestTiesToEven ?x19 ?x26))))
(let ((?x35 (fp.mul roundNearestTiesToEven ?x23 ?x34)))
(let ((?x37 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1073741824 32)) (fp.mul roundNearestTiesToEven ?x19 ?x35))))
(let ((?x50 (fp.mul roundNearestTiesToEven (fp.div roundNearestTiesToEven ?x10 ?x37) ?x28)))
(let ((?x48 (fp.sub roundNearestTiesToEven ?x10 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3212836864 32)) ?x35))))
(let ((?x46 (fp.sub roundNearestTiesToEven ?x34 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3212836864 32)) ?x26))))
(let ((?x52 (fp.sub roundNearestTiesToEven ?x46 (fp.mul roundNearestTiesToEven ?x48 ?x50))))
(not (not (fp.eq ?x52 ?x34)))))))))))))))))
(check-sat)
(exit)
