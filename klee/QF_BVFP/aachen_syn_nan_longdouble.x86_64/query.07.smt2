(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_nan_longdouble.x86_64/query.07.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f_ackermann!0 () (_ BitVec 80))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (fp.isNaN ?x14))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) f_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x29 (concat (concat ((_ extract 79 79) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16383 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16383 16) (_ bv9223372036854775808 64))))))
 (let ((?x32 ((_ to_fp 15 64) ?x29)))
 (= ((_ extract 63 63) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) (ite (or (fp.isSubnormal ?x32) (fp.isZero ?x32)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x49 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x50 ((_ to_fp 15 64) ?x49)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x50) (fp.isZero ?x50)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x49 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x50 ((_ to_fp 15 64) ?x49)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x50) (fp.isZero ?x50)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x49 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
(let ((?x50 ((_ to_fp 15 64) ?x49)))
(let ((?x29 (concat (concat ((_ extract 79 79) (concat (_ bv16383 16) (_ bv9223372036854775808 64))) ((_ extract 78 64) (concat (_ bv16383 16) (_ bv9223372036854775808 64)))) ((_ extract 62 0) (concat (_ bv16383 16) (_ bv9223372036854775808 64))))))
(let ((?x32 ((_ to_fp 15 64) ?x29)))
(let ((?x13 (concat (concat ((_ extract 79 79) f_ackermann!0) ((_ extract 78 64) f_ackermann!0)) ((_ extract 62 0) f_ackermann!0))))
(let ((?x14 ((_ to_fp 15 64) ?x13)))
(let ((?x41 (fp.add roundNearestTiesToEven ?x14 ?x32)))
(let ((?x59 (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x41 ?x41) ?x50)))
(not (fp.isNaN (fp.div roundNearestTiesToEven ?x59 ?x50))))))))))))
(check-sat)
(exit)
