(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_sqrt_inf_nan_zeros_klee_long_double.x86_64/query.09.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun x_ackermann!0 () (_ BitVec 80))
(declare-fun fresh_to_ieee_bv_!1 () (_ BitVec 80))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (not (fp.isNaN ?x14)))))
(assert
 (let ((?x31 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x31)))
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (not (fp.lt ?x14 ?x33)))))))
(assert
 (let ((?x31 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x31)))
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= (_ bv0 32) (ite (fp.isInfinite ?x14) (ite (fp.gt ?x14 ?x33) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))))))
(assert
 (let ((?x31 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x31)))
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (fp.eq ?x14 ?x33))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) x_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) x_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x31 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x31)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x33) (fp.isZero ?x33)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) x_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) x_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x31 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x31)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x33) (fp.isZero ?x33)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) x_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x31 (concat (concat ((_ extract 79 79) (concat (_ bv0 16) (_ bv0 64))) ((_ extract 78 64) (concat (_ bv0 16) (_ bv0 64)))) ((_ extract 62 0) (concat (_ bv0 16) (_ bv0 64))))))
 (let ((?x33 ((_ to_fp 15 64) ?x31)))
 (= ((_ extract 63 63) (concat (_ bv0 16) (_ bv0 64))) (ite (or (fp.isSubnormal ?x33) (fp.isZero ?x33)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= ((_ extract 63 63) x_ackermann!0) (ite (or (fp.isSubnormal ?x14) (fp.isZero ?x14)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x61 (concat (concat ((_ extract 79 79) fresh_to_ieee_bv_!1) ((_ extract 78 64) fresh_to_ieee_bv_!1)) ((_ extract 62 0) fresh_to_ieee_bv_!1))))
 (let ((?x63 ((_ to_fp 15 64) ?x61)))
 (= ((_ extract 63 63) fresh_to_ieee_bv_!1) (ite (or (fp.isSubnormal ?x63) (fp.isZero ?x63)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x61 (concat (concat ((_ extract 79 79) fresh_to_ieee_bv_!1) ((_ extract 78 64) fresh_to_ieee_bv_!1)) ((_ extract 62 0) fresh_to_ieee_bv_!1))))
 (let ((?x63 ((_ to_fp 15 64) ?x61)))
 (let ((?x13 (concat (concat ((_ extract 79 79) x_ackermann!0) ((_ extract 78 64) x_ackermann!0)) ((_ extract 62 0) x_ackermann!0))))
 (let ((?x14 ((_ to_fp 15 64) ?x13)))
 (= (fp.sqrt roundNearestTiesToEven ?x14) ?x63))))))
(assert
 (let (($x70 (or (bvslt (concat (_ bv65535 16) (_ bv18446744073709551615 64)) x_ackermann!0) (bvslt fresh_to_ieee_bv_!1 (concat (_ bv0 16) (_ bv0 64))))))
(not $x70)))
(check-sat)
(exit)
