(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_statistics_klee_bug.x86_64/query.14.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data_ackermann!0 () (_ BitVec 64))
(declare-fun data_ackermann!1 () (_ BitVec 64))
(assert
 (let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
 (fp.geq ?x9 ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))
(assert
 (let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
 (fp.leq ?x9 ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_ackermann!1))))
(assert
 (let ((?x26 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) data_ackermann!0)) (_ bv4625787914760591770 64) data_ackermann!0)))
 (let ((?x29 (ite (fp.gt ((_ to_fp 11 53) data_ackermann!1) ((_ to_fp 11 53) ?x26)) data_ackermann!1 ?x26)))
 (let ((?x32 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x29)) (_ bv4625844209755933901 64) ?x29)))
 (not (fp.isNaN ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x32)) (_ bv4623282787467866931 64) ?x32))))))))
(assert
 (let ((?x26 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) data_ackermann!0)) (_ bv4625787914760591770 64) data_ackermann!0)))
 (let ((?x29 (ite (fp.gt ((_ to_fp 11 53) data_ackermann!1) ((_ to_fp 11 53) ?x26)) data_ackermann!1 ?x26)))
 (let ((?x32 (ite (fp.gt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x29)) (_ bv4625844209755933901 64) ?x29)))
 (let (($x39 (fp.gt ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x32)) (_ bv4623282787467866931 64) ?x32)) ((_ to_fp 11 53) (_ bv4626322717216342016 64)))))
 (not $x39))))))
(assert
 (let ((?x42 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) data_ackermann!0)) (_ bv4625787914760591770 64) data_ackermann!0)))
 (let ((?x45 (ite (fp.lt ((_ to_fp 11 53) data_ackermann!1) ((_ to_fp 11 53) ?x42)) data_ackermann!1 ?x42)))
 (let ((?x48 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x45)) (_ bv4625844209755933901 64) ?x45)))
 (not (fp.isNaN ((_ to_fp 11 53) (ite (fp.lt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x48)) (_ bv4623282787467866931 64) ?x48))))))))
(assert
 (let ((?x42 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625787914760591770 64)) ((_ to_fp 11 53) data_ackermann!0)) (_ bv4625787914760591770 64) data_ackermann!0)))
 (let ((?x45 (ite (fp.lt ((_ to_fp 11 53) data_ackermann!1) ((_ to_fp 11 53) ?x42)) data_ackermann!1 ?x42)))
 (let ((?x48 (ite (fp.lt ((_ to_fp 11 53) (_ bv4625844209755933901 64)) ((_ to_fp 11 53) ?x45)) (_ bv4625844209755933901 64) ?x45)))
 (let (($x55 (fp.lt ((_ to_fp 11 53) (ite (fp.lt ((_ to_fp 11 53) (_ bv4623282787467866931 64)) ((_ to_fp 11 53) ?x48)) (_ bv4623282787467866931 64) ?x48)) ((_ to_fp 11 53) (_ bv4621819117588971520 64)))))
 (not $x55))))))
(assert
 (let ((?x58 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x63 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) data_ackermann!0) ?x58) ((_ to_fp 11 53) (_ bv4607182418800017408 64)))))
(let ((?x64 (fp.add roundNearestTiesToEven ?x58 ?x63)))
(let ((?x24 ((_ to_fp 11 53) (_ bv4625787914760591770 64))))
(let ((?x68 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x24 ?x64) ((_ to_fp 11 53) (_ bv4611686018427387904 64)))))
(let ((?x69 (fp.add roundNearestTiesToEven ?x64 ?x68)))
(let ((?x16 ((_ to_fp 11 53) data_ackermann!1)))
(let ((?x73 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x16 ?x69) ((_ to_fp 11 53) (_ bv4613937818241073152 64)))))
(let ((?x74 (fp.add roundNearestTiesToEven ?x69 ?x73)))
(let ((?x22 ((_ to_fp 11 53) (_ bv4625844209755933901 64))))
(let ((?x78 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x22 ?x74) ((_ to_fp 11 53) (_ bv4616189618054758400 64)))))
(let ((?x79 (fp.add roundNearestTiesToEven ?x74 ?x78)))
(let ((?x20 ((_ to_fp 11 53) (_ bv4623282787467866931 64))))
(let ((?x83 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x20 ?x79) ((_ to_fp 11 53) (_ bv4617315517961601024 64)))))
(let ((?x84 (fp.add roundNearestTiesToEven ?x79 ?x83)))
(let ((?x9 ((_ to_fp 11 53) data_ackermann!0)))
(let ((?x85 (fp.sub roundNearestTiesToEven ?x9 ?x84)))
(let ((?x87 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x85 ?x85) ?x58)))
(let ((?x89 (fp.add roundNearestTiesToEven ?x58 (fp.div roundNearestTiesToEven ?x87 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))))
(let ((?x90 (fp.sub roundNearestTiesToEven ?x24 ?x84)))
(let ((?x92 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x90 ?x90) ?x89)))
(let ((?x94 (fp.add roundNearestTiesToEven ?x89 (fp.div roundNearestTiesToEven ?x92 ((_ to_fp 11 53) (_ bv4611686018427387904 64))))))
(let ((?x95 (fp.sub roundNearestTiesToEven ?x16 ?x84)))
(let ((?x97 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x95 ?x95) ?x94)))
(let ((?x99 (fp.add roundNearestTiesToEven ?x94 (fp.div roundNearestTiesToEven ?x97 ((_ to_fp 11 53) (_ bv4613937818241073152 64))))))
(let ((?x100 (fp.sub roundNearestTiesToEven ?x22 ?x84)))
(let ((?x102 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x100 ?x100) ?x99)))
(let ((?x104 (fp.add roundNearestTiesToEven ?x99 (fp.div roundNearestTiesToEven ?x102 ((_ to_fp 11 53) (_ bv4616189618054758400 64))))))
(let ((?x105 (fp.sub roundNearestTiesToEven ?x20 ?x84)))
(let ((?x107 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x105 ?x105) ?x104)))
(let ((?x109 (fp.add roundNearestTiesToEven ?x104 (fp.div roundNearestTiesToEven ?x107 ((_ to_fp 11 53) (_ bv4617315517961601024 64))))))
(let ((?x112 (fp.mul roundNearestTiesToEven ?x109 ((_ to_fp 11 53) (_ bv4608308318706860032 64)))))
(not (and (not (fp.isNaN ?x112)) (not (fp.lt ?x112 ?x58)))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
