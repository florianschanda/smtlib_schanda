(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_interval_klee_no_bug.x86_64/query.19.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun initial_ackermann!0 () (_ BitVec 32))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) initial_ackermann!0))))
(assert
 (let ((?x18 (ite (fp.isInfinite ((_ to_fp 8 24) initial_ackermann!0)) (ite (fp.gt ((_ to_fp 8 24) initial_ackermann!0) ((_ to_fp 8 24) (_ bv0 32))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x18)))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv1251513984 32))))
(let ((?x24 (fp.add roundTowardPositive (fp.add roundTowardPositive ((_ to_fp 8 24) initial_ackermann!0) ?x21) ?x21)))
(let ((?x25 (fp.add roundTowardPositive ?x24 ?x21)))
(let ((?x30 (fp.add roundTowardNegative (fp.add roundTowardNegative ((_ to_fp 8 24) initial_ackermann!0) ?x21) ?x21)))
(let (($x33 (and (not (fp.isNaN ?x25)) (fp.leq (fp.add roundTowardNegative ?x30 ?x21) ?x25))))
(not $x33)))))))
(check-sat)
(exit)
