(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_prefix_sum_klee_bug_double.x86_64/query.14.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data_in_ackermann!0 () (_ BitVec 64))
(declare-fun data_in_ackermann!1 () (_ BitVec 64))
(declare-fun data_in_ackermann!2 () (_ BitVec 64))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!0))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!0) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!1))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!1) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!2))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!2) ((_ to_fp 11 53) data_in_ackermann!2))))
(assert
 (let ((?x10 ((_ to_fp 11 53) data_in_ackermann!0)))
 (let ((?x22 ((_ to_fp 11 53) data_in_ackermann!2)))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x22 ?x10)))
 (not (fp.isNaN ?x28))))))
(assert
 (let ((?x10 ((_ to_fp 11 53) data_in_ackermann!0)))
 (let ((?x22 ((_ to_fp 11 53) data_in_ackermann!2)))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x22 ?x10)))
 (not (fp.lt ?x28 ?x10))))))
(assert
 (let ((?x17 ((_ to_fp 11 53) data_in_ackermann!1)))
(let ((?x10 ((_ to_fp 11 53) data_in_ackermann!0)))
(let ((?x22 ((_ to_fp 11 53) data_in_ackermann!2)))
(let ((?x28 (fp.add roundNearestTiesToEven ?x22 ?x10)))
(let ((?x33 (fp.add roundNearestTiesToEven ?x17 ?x28)))
(not (and (not (fp.isNaN ?x33)) (not (fp.lt ?x33 ?x17))))))))))
(check-sat)
(exit)
