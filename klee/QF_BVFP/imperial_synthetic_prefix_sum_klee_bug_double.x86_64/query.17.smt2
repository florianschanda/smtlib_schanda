(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_prefix_sum_klee_bug_double.x86_64/query.17.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data_in_ackermann!0 () (_ BitVec 64))
(declare-fun data_in_ackermann!1 () (_ BitVec 64))
(declare-fun data_in_ackermann!2 () (_ BitVec 64))
(declare-fun data_in_ackermann!3 () (_ BitVec 64))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!0))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!0) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!1))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!1) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!2))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!2) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!3))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!3) ((_ to_fp 11 53) data_in_ackermann!3))))
(assert
 (let ((?x11 ((_ to_fp 11 53) data_in_ackermann!0)))
 (let ((?x28 ((_ to_fp 11 53) data_in_ackermann!3)))
 (let ((?x34 (fp.add roundNearestTiesToEven ?x28 ?x11)))
 (not (fp.isNaN ?x34))))))
(assert
 (let ((?x11 ((_ to_fp 11 53) data_in_ackermann!0)))
 (let ((?x28 ((_ to_fp 11 53) data_in_ackermann!3)))
 (let ((?x34 (fp.add roundNearestTiesToEven ?x28 ?x11)))
 (not (fp.lt ?x34 ?x11))))))
(assert
 (let ((?x11 ((_ to_fp 11 53) data_in_ackermann!0)))
(let ((?x28 ((_ to_fp 11 53) data_in_ackermann!3)))
(let ((?x34 (fp.add roundNearestTiesToEven ?x28 ?x11)))
(let ((?x18 ((_ to_fp 11 53) data_in_ackermann!1)))
(let ((?x39 (fp.add roundNearestTiesToEven ?x18 ?x34)))
(let ((?x23 ((_ to_fp 11 53) data_in_ackermann!2)))
(let ((?x40 (fp.add roundNearestTiesToEven ?x23 ?x39)))
(let (($x48 (and (and (not (fp.isNaN ?x40)) (not (fp.isNaN ?x39))) (not (fp.lt ?x40 ?x39)))))
(not $x48))))))))))
(check-sat)
(exit)
