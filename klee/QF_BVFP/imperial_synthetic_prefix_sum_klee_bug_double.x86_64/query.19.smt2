(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_prefix_sum_klee_bug_double.x86_64/query.19.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data_in_ackermann!0 () (_ BitVec 64))
(declare-fun data_in_ackermann!1 () (_ BitVec 64))
(declare-fun data_in_ackermann!2 () (_ BitVec 64))
(declare-fun data_in_ackermann!3 () (_ BitVec 64))
(declare-fun data_in_ackermann!4 () (_ BitVec 64))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!0))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!0) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!1))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!1) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!2))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!2) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!3))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!3) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.isNaN ((_ to_fp 11 53) data_in_ackermann!4))))
(assert
 (not (fp.lt ((_ to_fp 11 53) data_in_ackermann!4) ((_ to_fp 11 53) data_in_ackermann!4))))
(assert
 (let ((?x12 ((_ to_fp 11 53) data_in_ackermann!0)))
 (let ((?x34 ((_ to_fp 11 53) data_in_ackermann!4)))
 (let ((?x40 (fp.add roundNearestTiesToEven ?x34 ?x12)))
 (not (fp.isNaN ?x40))))))
(assert
 (let ((?x12 ((_ to_fp 11 53) data_in_ackermann!0)))
 (let ((?x34 ((_ to_fp 11 53) data_in_ackermann!4)))
 (let ((?x40 (fp.add roundNearestTiesToEven ?x34 ?x12)))
 (not (fp.lt ?x40 ?x12))))))
(assert
 (let ((?x12 ((_ to_fp 11 53) data_in_ackermann!0)))
(let ((?x34 ((_ to_fp 11 53) data_in_ackermann!4)))
(let ((?x40 (fp.add roundNearestTiesToEven ?x34 ?x12)))
(let ((?x19 ((_ to_fp 11 53) data_in_ackermann!1)))
(let ((?x24 ((_ to_fp 11 53) data_in_ackermann!2)))
(let ((?x46 (fp.add roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x19 ?x40))))
(let ((?x29 ((_ to_fp 11 53) data_in_ackermann!3)))
(let ((?x47 (fp.add roundNearestTiesToEven ?x29 ?x46)))
(let (($x55 (and (and (not (fp.isNaN ?x47)) (not (fp.isNaN ?x46))) (not (fp.lt ?x47 ?x46)))))
(not $x55)))))))))))
(check-sat)
(exit)
