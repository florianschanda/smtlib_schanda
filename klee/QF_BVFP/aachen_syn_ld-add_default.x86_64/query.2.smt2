(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/aachen_syn_ld-add_default.x86_64/query.2.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun a_ackermann!0 () (_ BitVec 80))
(declare-fun b_ackermann!1 () (_ BitVec 80))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x32 ((_ to_fp 15 64) ?x30)))
 (let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (fp.leq ?x15 ?x32))))))
(assert
 (let ((?x46 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x47 ((_ to_fp 15 64) ?x46)))
 (let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (fp.geq ?x15 ?x47))))))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x32 ((_ to_fp 15 64) ?x30)))
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
 (let ((?x60 ((_ to_fp 15 64) ?x59)))
 (fp.leq ?x60 ?x32))))))
(assert
 (let ((?x46 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x47 ((_ to_fp 15 64) ?x46)))
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
 (let ((?x60 ((_ to_fp 15 64) ?x59)))
 (fp.geq ?x60 ?x47))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) a_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x32 ((_ to_fp 15 64) ?x30)))
 (= ((_ extract 63 63) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x32) (fp.isZero ?x32)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) a_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x46 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x47 ((_ to_fp 15 64) ?x46)))
 (= ((_ extract 63 63) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x47) (fp.isZero ?x47)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
 (let ((?x60 ((_ to_fp 15 64) ?x59)))
 (= ((_ extract 63 63) b_ackermann!1) (ite (or (fp.isSubnormal ?x60) (fp.isZero ?x60)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x30 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x32 ((_ to_fp 15 64) ?x30)))
 (= ((_ extract 63 63) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x32) (fp.isZero ?x32)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
 (let ((?x60 ((_ to_fp 15 64) ?x59)))
 (= ((_ extract 63 63) b_ackermann!1) (ite (or (fp.isSubnormal ?x60) (fp.isZero ?x60)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x46 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x47 ((_ to_fp 15 64) ?x46)))
 (= ((_ extract 63 63) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x47) (fp.isZero ?x47)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) a_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
 (let ((?x60 ((_ to_fp 15 64) ?x59)))
 (= ((_ extract 63 63) b_ackermann!1) (ite (or (fp.isSubnormal ?x60) (fp.isZero ?x60)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
 (let ((?x15 ((_ to_fp 15 64) ?x14)))
 (= ((_ extract 63 63) a_ackermann!0) (ite (or (fp.isSubnormal ?x15) (fp.isZero ?x15)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
 (let ((?x60 ((_ to_fp 15 64) ?x59)))
 (= ((_ extract 63 63) b_ackermann!1) (ite (or (fp.isSubnormal ?x60) (fp.isZero ?x60)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x59 (concat (concat ((_ extract 79 79) b_ackermann!1) ((_ extract 78 64) b_ackermann!1)) ((_ extract 62 0) b_ackermann!1))))
(let ((?x60 ((_ to_fp 15 64) ?x59)))
(let ((?x14 (concat (concat ((_ extract 79 79) a_ackermann!0) ((_ extract 78 64) a_ackermann!0)) ((_ extract 62 0) a_ackermann!0))))
(let ((?x15 ((_ to_fp 15 64) ?x14)))
(let ((?x70 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ?x15) ((_ to_fp 11 53) roundNearestTiesToEven ?x60))))
(let (($x73 (fp.eq (fp.add roundNearestTiesToEven ?x15 ?x60) ((_ to_fp 15 64) roundNearestTiesToEven ?x70))))
(not (not $x73)))))))))
(check-sat)
(exit)
