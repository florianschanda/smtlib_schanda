(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_synthetic_interval_klee_bug.x86_64/query.28.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun initial_ackermann!0 () (_ BitVec 32))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) initial_ackermann!0))))
(assert
 (let ((?x18 (ite (fp.isInfinite ((_ to_fp 8 24) initial_ackermann!0)) (ite (fp.gt ((_ to_fp 8 24) initial_ackermann!0) ((_ to_fp 8 24) (_ bv0 32))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (= (_ bv0 32) ?x18)))
(assert
 (let ((?x28 ((_ to_fp 11 53) (_ bv4707126720094797824 64))))
 (let ((?x29 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) initial_ackermann!0)) ?x28)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv1251513984 32))))
 (let ((?x8 ((_ to_fp 8 24) initial_ackermann!0)))
 (let ((?x23 (fp.add roundTowardNegative ?x8 ?x21)))
 (fp.geq ((_ to_fp 11 53) roundNearestTiesToEven ?x23) ?x29)))))))
(assert
 (let ((?x28 ((_ to_fp 11 53) (_ bv4707126720094797824 64))))
 (let ((?x29 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) initial_ackermann!0)) ?x28)))
 (let ((?x33 (fp.add roundNearestTiesToEven ?x29 ?x28)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv1251513984 32))))
 (let ((?x8 ((_ to_fp 8 24) initial_ackermann!0)))
 (let ((?x23 (fp.add roundTowardNegative ?x8 ?x21)))
 (let ((?x31 (fp.add roundTowardNegative ?x23 ?x21)))
 (fp.geq ((_ to_fp 11 53) roundNearestTiesToEven ?x31) ?x33)))))))))
(assert
 (let ((?x28 ((_ to_fp 11 53) (_ bv4707126720094797824 64))))
 (let ((?x29 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) initial_ackermann!0)) ?x28)))
 (let ((?x33 (fp.add roundNearestTiesToEven ?x29 ?x28)))
 (let ((?x37 (fp.add roundNearestTiesToEven ?x33 ?x28)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv1251513984 32))))
 (let ((?x8 ((_ to_fp 8 24) initial_ackermann!0)))
 (let ((?x23 (fp.add roundTowardNegative ?x8 ?x21)))
 (let ((?x31 (fp.add roundTowardNegative ?x23 ?x21)))
 (let ((?x35 (fp.add roundTowardNegative ?x31 ?x21)))
 (fp.geq ((_ to_fp 11 53) roundNearestTiesToEven ?x35) ?x37)))))))))))
(assert
 (let ((?x28 ((_ to_fp 11 53) (_ bv4707126720094797824 64))))
 (let ((?x29 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) initial_ackermann!0)) ?x28)))
 (let ((?x33 (fp.add roundNearestTiesToEven ?x29 ?x28)))
 (let ((?x37 (fp.add roundNearestTiesToEven ?x33 ?x28)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv1251513984 32))))
 (let ((?x8 ((_ to_fp 8 24) initial_ackermann!0)))
 (let ((?x23 (fp.add roundTowardNegative ?x8 ?x21)))
 (let ((?x31 (fp.add roundTowardNegative ?x23 ?x21)))
 (let ((?x35 (fp.add roundTowardNegative ?x31 ?x21)))
 (let ((?x39 (fp.add roundTowardNegative ?x35 ?x21)))
 (fp.geq ((_ to_fp 11 53) roundNearestTiesToEven ?x39) (fp.add roundNearestTiesToEven ?x37 ?x28)))))))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv1251513984 32))))
(let ((?x8 ((_ to_fp 8 24) initial_ackermann!0)))
(let ((?x23 (fp.add roundTowardNegative ?x8 ?x21)))
(let ((?x31 (fp.add roundTowardNegative ?x23 ?x21)))
(let ((?x35 (fp.add roundTowardNegative ?x31 ?x21)))
(let ((?x39 (fp.add roundTowardNegative ?x35 ?x21)))
(not (not (fp.isNaN (fp.add roundTowardNegative ?x39 ?x21)))))))))))
(check-sat)
(exit)
