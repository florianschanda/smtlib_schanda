(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.608.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x38 ?x39)))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x32 (fp.sub roundNearestTiesToEven ?x30 ?x31)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x35 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x32 ?x33))))
 (or (or (fp.isNaN ?x35) (fp.isNaN ?x40)) (fp.gt ?x35 ?x40))))))))))))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x32 (fp.sub roundNearestTiesToEven ?x30 ?x31)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x35 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x32 ?x33))))
 (or (or (fp.isNaN ?x35) (fp.isNaN ?x39)) (fp.lt ?x35 ?x39))))))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x26 ?x25))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x26 ?x51))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x53 (fp.sub roundNearestTiesToEven ?x38 ?x26)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x55 ?x25)))
 (or (fp.isNaN ?x53) (fp.gt ?x56 ?x53)))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x55 ?x25)))
 (not (fp.isNaN ?x56))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x55 ?x25)))
 (not (fp.lt ?x56 ?x26)))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x29 ?x25))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x29 ?x51))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x67 ?x28)))
 (not (fp.isNaN ?x68))))))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x38 ?x29)))
 (not (fp.isNaN ?x71))))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x38 ?x29)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x67 ?x28)))
 (not (fp.gt ?x68 ?x71)))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x31 ?x25))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x31 ?x51))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x78 ?x30)))
 (not (fp.isNaN ?x79))))))))))
(assert
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x38 ?x31)))
 (not (fp.isNaN ?x82))))))
(assert
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x38 ?x31)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x78 ?x30)))
 (not (fp.gt ?x79 ?x82)))))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x33 ?x25))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x33 ?x51))))
(assert
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x38 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x89 (fp.sub roundNearestTiesToEven ?x38 ?x33)))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x32 (fp.sub roundNearestTiesToEven ?x30 ?x31)))
 (let ((?x91 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x92 (fp.sub roundNearestTiesToEven ?x91 ?x32)))
 (or (fp.isNaN ?x89) (fp.gt ?x92 ?x89)))))))))))))))
(assert
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x32 (fp.sub roundNearestTiesToEven ?x30 ?x31)))
 (let ((?x91 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x92 (fp.sub roundNearestTiesToEven ?x91 ?x32)))
 (not (fp.isNaN ?x92))))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6))))
(assert
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x32 (fp.sub roundNearestTiesToEven ?x30 ?x31)))
 (let ((?x91 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x92 (fp.sub roundNearestTiesToEven ?x91 ?x32)))
 (not (fp.lt ?x92 ?x33)))))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x39 ?x25))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x39 ?x51))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x55 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x55 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x67 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x67 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x78 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x78 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x91 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x91 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x91 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x91 ?x22))))
(assert
 (not false))
(check-sat)
(exit)
