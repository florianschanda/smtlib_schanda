(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.578.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x35 (fp.sub roundNearestTiesToEven ?x33 ?x34)))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.add roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x27 ?x28))))
 (or (or (fp.isNaN ?x30) (fp.isNaN ?x35)) (fp.gt ?x30 ?x35))))))))))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.add roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x27 ?x28))))
 (or (or (fp.isNaN ?x30) (fp.isNaN ?x34)) (fp.lt ?x30 ?x34))))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x44 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x44 ?x22))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x47 ?x49))))
(assert
 (let ((?x52 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x47 ?x52))))
(assert
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x33 ?x47)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x44 ?x17)))
 (or (or (fp.isNaN ?x54) (fp.isNaN ?x56)) (fp.gt ?x54 ?x56)))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x33 ?x65)))
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x24 ?x49)))
 (or (or (fp.isNaN ?x63) (fp.isNaN ?x66)) (fp.gt ?x63 ?x66)))))))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x24 ?x49)))
 (or (or (fp.isNaN ?x63) (fp.isNaN ?x65)) (fp.lt ?x63 ?x65)))))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x25 ?x49))))
(assert
 (let ((?x52 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x25 ?x52))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x77 (fp.sub roundNearestTiesToEven ?x33 ?x25)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x79 ?x24)))
 (or (fp.isNaN ?x77) (fp.gt ?x80 ?x77)))))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x79 ?x24)))
 (not (fp.isNaN ?x80))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x79 ?x24)))
 (not (fp.lt ?x80 ?x25)))))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x28 ?x49))))
(assert
 (let ((?x52 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x28 ?x52))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x91 (fp.sub roundNearestTiesToEven ?x33 ?x28)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.add roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x93 ?x27)))
 (or (fp.isNaN ?x91) (fp.gt ?x94 ?x91)))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.add roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x93 ?x27)))
 (not (fp.isNaN ?x94))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.add roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x93 ?x27)))
 (not (fp.lt ?x94 ?x28)))))))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x34 ?x49))))
(assert
 (let ((?x52 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x34 ?x52))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x65 ?x49))))
(assert
 (let ((?x52 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x65 ?x52))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x79 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x79 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x93 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x93 ?x22))))
(assert
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x44 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
(let ((?x54 (fp.sub roundNearestTiesToEven ?x44 ?x17)))
(let (($x117 (and (and (not (fp.isNaN ?x54)) (not (fp.isNaN ?x47))) (not (fp.lt ?x54 ?x47)))))
(not $x117)))))))
(check-sat)
(exit)
