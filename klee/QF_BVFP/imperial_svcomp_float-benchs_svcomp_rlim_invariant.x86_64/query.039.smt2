(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.039.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x30 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x32 (fp.sub roundNearestTiesToEven ?x30 ?x31)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 (fp.add roundNearestTiesToEven ?x21 ?x22)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x13 (fp.add roundNearestTiesToEven ?x24 ?x25))))
 (or (or (fp.isNaN ?x27) (fp.isNaN ?x32)) (fp.gt ?x27 ?x32))))))))))))
(assert
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 (fp.add roundNearestTiesToEven ?x21 ?x22)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x13 (fp.add roundNearestTiesToEven ?x24 ?x25))))
 (or (or (fp.isNaN ?x27) (fp.isNaN ?x31)) (fp.lt ?x27 ?x31))))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x22 ?x21))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x22 ?x43))))
(assert
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x30 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x30 ?x22)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x21)))
 (or (fp.isNaN ?x45) (fp.gt ?x48 ?x45)))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x21)))
 (not (fp.isNaN ?x48))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4))))
(assert
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x21)))
 (not (fp.lt ?x48 ?x22)))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x25 ?x21))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x25 ?x43))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x30 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x30 ?x25)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 (fp.add roundNearestTiesToEven ?x21 ?x22)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x61 ?x24)))
 (or (fp.isNaN ?x59) (fp.gt ?x62 ?x59)))))))))))
(assert
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 (fp.add roundNearestTiesToEven ?x21 ?x22)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x61 ?x24)))
 (not (fp.isNaN ?x62))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 (fp.add roundNearestTiesToEven ?x21 ?x22)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x61 ?x24)))
 (not (fp.lt ?x62 ?x25)))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x31 ?x21))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x31 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x31 ?x43))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x47 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x47 ?x18))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x61 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x61 ?x18))))
(assert
 (let (($x83 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x83)))
(check-sat)
(exit)
