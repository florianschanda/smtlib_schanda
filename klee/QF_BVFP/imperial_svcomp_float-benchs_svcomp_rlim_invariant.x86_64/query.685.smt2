(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.685.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31)))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x40 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x40 ?x22))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x43 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x43 ?x48))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x29 ?x43)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x40 ?x17)))
 (or (or (fp.isNaN ?x50) (fp.isNaN ?x52)) (fp.gt ?x50 ?x52)))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x29 ?x62)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x24 ?x59)))
 (or (or (fp.isNaN ?x60) (fp.isNaN ?x63)) (fp.gt ?x60 ?x63)))))))))
(assert
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x24 ?x59)))
 (or (or (fp.isNaN ?x60) (fp.isNaN ?x62)) (fp.lt ?x60 ?x62)))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x30 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x30 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x59 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x59 ?x22))))
(assert
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x81 (fp.sub roundNearestTiesToEven ?x29 ?x80)))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x78 (fp.sub roundNearestTiesToEven ?x59 (fp.add roundNearestTiesToEven ?x45 ?x76))))
 (or (or (fp.isNaN ?x78) (fp.isNaN ?x81)) (fp.gt ?x78 ?x81))))))))))
(assert
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x78 (fp.sub roundNearestTiesToEven ?x59 (fp.add roundNearestTiesToEven ?x45 ?x76))))
 (or (or (fp.isNaN ?x78) (fp.isNaN ?x80)) (fp.lt ?x78 ?x80))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x62 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x62 ?x48))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x76 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x76 ?x48))))
(assert
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x29 ?x76)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x45)))
 (or (fp.isNaN ?x94) (fp.gt ?x97 ?x94)))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x45)))
 (not (fp.isNaN ?x97))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x45)))
 (not (fp.lt ?x97 ?x76)))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x80 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x80 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x96 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x96 ?x22))))
(assert
 (not false))
(check-sat)
(exit)
