(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.071.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x27)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x13 ?x21)))
 (or (or (fp.isNaN ?x23) (fp.isNaN ?x28)) (fp.gt ?x23 ?x28)))))))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x13 ?x21)))
 (or (or (fp.isNaN ?x23) (fp.isNaN ?x27)) (fp.lt ?x23 ?x27)))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x37 ?x21))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x37 ?x40))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x43 (fp.sub roundNearestTiesToEven ?x42 ?x13)))
 (not (fp.isNaN ?x43))))))
(assert
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x26 ?x37)))
 (not (fp.isNaN ?x46))))))
(assert
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x26 ?x37)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x43 (fp.sub roundNearestTiesToEven ?x42 ?x13)))
 (not (fp.gt ?x43 ?x46)))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x51 ?x21))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x51 ?x40))))
(assert
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x13 ?x37)))
 (let ((?x54 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x54 ?x55)))
 (not (fp.isNaN ?x56))))))))
(assert
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x26 ?x51)))
 (not (fp.isNaN ?x59))))))
(assert
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x26 ?x51)))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x13 ?x37)))
 (let ((?x54 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x54 ?x55)))
 (not (fp.gt ?x56 ?x59)))))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x27 ?x21))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x27 ?x40))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x42 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x42 ?x18))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x54 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x54 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x54 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x54 ?x18))))
(assert
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
(let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x13 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
(let ((?x55 (fp.sub roundNearestTiesToEven ?x13 ?x37)))
(let ((?x70 (fp.sub roundNearestTiesToEven ?x55 ?x51)))
(not (and (fp.geq ?x70 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x70 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))))
(check-sat)
(exit)
