(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.197.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x27 ?x28)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x29)) (fp.gt ?x24 ?x29)))))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x28)) (fp.lt ?x24 ?x28)))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x22 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x22 ?x20))))
(assert
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x27 ?x48)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x41 ?x42)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x22 (fp.add roundNearestTiesToEven ?x43 ?x44))))
 (or (or (fp.isNaN ?x46) (fp.isNaN ?x49)) (fp.gt ?x46 ?x49))))))))))))
(assert
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x41 ?x42)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x22 (fp.add roundNearestTiesToEven ?x43 ?x44))))
 (or (or (fp.isNaN ?x46) (fp.isNaN ?x48)) (fp.lt ?x46 ?x48))))))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x28 ?x41))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x28 ?x60))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x42 ?x41))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x42 ?x60))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x27 ?x42)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x66 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x66 ?x41)))
 (or (fp.isNaN ?x64) (fp.gt ?x67 ?x64)))))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x66 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x66 ?x41)))
 (not (fp.isNaN ?x67))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x66 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x66 ?x41)))
 (not (fp.lt ?x67 ?x42)))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x44 ?x41))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x44 ?x60))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x78 (fp.sub roundNearestTiesToEven ?x27 ?x44)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x41 ?x42)))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x81 (fp.sub roundNearestTiesToEven ?x80 ?x43)))
 (or (fp.isNaN ?x78) (fp.gt ?x81 ?x78)))))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x41 ?x42)))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x81 (fp.sub roundNearestTiesToEven ?x80 ?x43)))
 (not (fp.isNaN ?x81))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x41 ?x42)))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x81 (fp.sub roundNearestTiesToEven ?x80 ?x43)))
 (not (fp.lt ?x81 ?x44)))))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x48 ?x41))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x48 ?x60))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x66 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x66 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x66 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x66 ?x20))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x80 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x80 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x80 ?x20))))
(assert
 (not false))
(check-sat)
(exit)
