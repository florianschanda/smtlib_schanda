(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.242.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x27 ?x28)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x29)) (fp.gt ?x24 ?x29)))))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x28)) (fp.lt ?x24 ?x28)))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x22 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x22 ?x20))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x27 ?x43)))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x41 (fp.sub roundNearestTiesToEven ?x22 ?x40)))
 (or (or (fp.isNaN ?x41) (fp.isNaN ?x44)) (fp.gt ?x41 ?x44)))))))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x41 (fp.sub roundNearestTiesToEven ?x22 ?x40)))
 (or (or (fp.isNaN ?x41) (fp.isNaN ?x43)) (fp.lt ?x41 ?x43)))))))
(assert
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x28 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x28 ?x57))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x40 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x40 ?x20))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x27 ?x65)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x40 (fp.add roundNearestTiesToEven ?x54 ?x61))))
 (or (or (fp.isNaN ?x63) (fp.isNaN ?x66)) (fp.gt ?x63 ?x66))))))))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x40 (fp.add roundNearestTiesToEven ?x54 ?x61))))
 (or (or (fp.isNaN ?x63) (fp.isNaN ?x65)) (fp.lt ?x63 ?x65))))))))
(assert
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x43 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x43 ?x57))))
(assert
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x61 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x61 ?x57))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x27 ?x61)))
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x54)))
 (or (fp.isNaN ?x79) (fp.gt ?x82 ?x79)))))))))
(assert
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x54)))
 (not (fp.isNaN ?x82))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x54)))
 (not (fp.lt ?x82 ?x61)))))))
(assert
 (let ((?x54 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x65 ?x54))))
(assert
 (let ((?x57 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x65 ?x57))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x81 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x81 ?x20))))
(assert
 (let (($x101 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x101)))
(check-sat)
(exit)
