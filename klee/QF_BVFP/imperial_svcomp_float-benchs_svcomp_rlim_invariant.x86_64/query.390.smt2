(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.390.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x32 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x31 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x33 (fp.sub roundNearestTiesToEven ?x31 ?x32)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x24 ?x25))))
 (or (or (fp.isNaN ?x28) (fp.isNaN ?x33)) (fp.gt ?x28 ?x33))))))))))
(assert
 (let ((?x32 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x24 ?x25))))
 (or (or (fp.isNaN ?x28) (fp.isNaN ?x32)) (fp.lt ?x28 ?x32))))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x42 ?x44))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x42 ?x47))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x31 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x31 ?x42)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x51 ?x17)))
 (or (fp.isNaN ?x49) (fp.gt ?x52 ?x49)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x51 ?x17)))
 (not (fp.isNaN ?x52))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x51 ?x17)))
 (not (fp.lt ?x52 ?x42)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x31 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x31 ?x67)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x44 ?x63))))
 (or (or (fp.isNaN ?x65) (fp.isNaN ?x68)) (fp.gt ?x65 ?x68))))))))))
(assert
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x44 ?x63))))
 (or (or (fp.isNaN ?x65) (fp.isNaN ?x67)) (fp.lt ?x65 ?x67))))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x25 ?x44))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x25 ?x47))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x31 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x31 ?x25)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x24)))
 (or (fp.isNaN ?x79) (fp.gt ?x82 ?x79)))))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x24)))
 (not (fp.isNaN ?x82))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x24)))
 (not (fp.lt ?x82 ?x25)))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x32 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x32 ?x44))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x32 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x32 ?x47))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x51 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x51 ?x22))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x63 ?x44))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x63 ?x47))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x31 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x31 ?x63)))
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x99 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x100 (fp.sub roundNearestTiesToEven ?x99 ?x44)))
 (or (fp.isNaN ?x97) (fp.gt ?x100 ?x97)))))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x99 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x100 (fp.sub roundNearestTiesToEven ?x99 ?x44)))
 (not (fp.isNaN ?x100))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x99 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x100 (fp.sub roundNearestTiesToEven ?x99 ?x44)))
 (not (fp.lt ?x100 ?x63)))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x67 ?x44))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x67 ?x47))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x81 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x81 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x99 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x99 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x99 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x99 ?x22))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x115 (fp.add roundNearestTiesToEven ?x17 ?x42)))
(not (and (fp.geq ?x115 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x115 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
