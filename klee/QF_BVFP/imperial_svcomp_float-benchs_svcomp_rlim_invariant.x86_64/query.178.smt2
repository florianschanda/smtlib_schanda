(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.178.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x25 (fp.sub roundNearestTiesToEven ?x15 ?x23)))
 (or (or (fp.isNaN ?x25) (fp.isNaN ?x30)) (fp.gt ?x25 ?x30)))))))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x25 (fp.sub roundNearestTiesToEven ?x15 ?x23)))
 (or (or (fp.isNaN ?x25) (fp.isNaN ?x29)) (fp.lt ?x25 ?x29)))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x39 ?x23))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x39 ?x42))))
(assert
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x44 ?x15)))
 (not (fp.isNaN ?x45))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x28 ?x39)))
 (not (fp.isNaN ?x48))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x28 ?x39)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x44 ?x15)))
 (not (fp.gt ?x45 ?x48)))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x53 ?x23))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x53 ?x42))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x28 ?x53)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x58 ?x59)))
 (or (fp.isNaN ?x56) (fp.gt ?x60 ?x56)))))))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x58 ?x59)))
 (not (fp.isNaN ?x60))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x58 ?x59)))
 (not (fp.lt ?x60 ?x53)))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x69 ?x23))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x69 ?x42))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x72 (fp.sub roundNearestTiesToEven ?x28 ?x69)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
 (let ((?x75 (fp.add roundNearestTiesToEven ?x59 ?x53)))
 (let ((?x74 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x76 (fp.sub roundNearestTiesToEven ?x74 ?x75)))
 (or (fp.isNaN ?x72) (fp.gt ?x76 ?x72)))))))))))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
 (let ((?x75 (fp.add roundNearestTiesToEven ?x59 ?x53)))
 (let ((?x74 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x76 (fp.sub roundNearestTiesToEven ?x74 ?x75)))
 (not (fp.isNaN ?x76))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
 (let ((?x75 (fp.add roundNearestTiesToEven ?x59 ?x53)))
 (let ((?x74 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x76 (fp.sub roundNearestTiesToEven ?x74 ?x75)))
 (not (fp.lt ?x76 ?x69)))))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x29 ?x23))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x29 ?x42))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x44 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x44 ?x20))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x58 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x58 ?x20))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x74 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x74 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x74 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x74 ?x20))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
(let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
(let ((?x39 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x15 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
(let ((?x59 (fp.sub roundNearestTiesToEven ?x15 ?x39)))
(let ((?x75 (fp.add roundNearestTiesToEven ?x59 ?x53)))
(let ((?x93 (fp.add roundNearestTiesToEven ?x75 ?x69)))
(not (and (fp.geq ?x93 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x93 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))))))
(check-sat)
(exit)
