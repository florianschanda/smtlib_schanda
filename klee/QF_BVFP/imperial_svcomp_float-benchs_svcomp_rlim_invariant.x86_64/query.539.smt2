(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.539.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31)))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x40 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x40 ?x45))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x17)))
 (not (fp.isNaN ?x48))))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x29 ?x40)))
 (not (fp.isNaN ?x51))))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x29 ?x40)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x17)))
 (not (fp.gt ?x48 ?x51)))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x64 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x29 ?x64)))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x42 ?x58)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x59 ?x60))))
 (or (or (fp.isNaN ?x62) (fp.isNaN ?x65)) (fp.gt ?x62 ?x65))))))))))))
(assert
 (let ((?x64 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x42 ?x58)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x59 ?x60))))
 (or (or (fp.isNaN ?x62) (fp.isNaN ?x64)) (fp.lt ?x62 ?x64))))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x30 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x30 ?x45))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x47 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x47 ?x22))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x58 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x58 ?x45))))
(assert
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x29 ?x58)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x82 ?x42)))
 (or (fp.isNaN ?x80) (fp.gt ?x83 ?x80)))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x82 ?x42)))
 (not (fp.isNaN ?x83))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x82 ?x42)))
 (not (fp.lt ?x83 ?x58)))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x60 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x60 ?x45))))
(assert
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x29 ?x60)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x42 ?x58)))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x59)))
 (or (fp.isNaN ?x94) (fp.gt ?x97 ?x94)))))))))))
(assert
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x42 ?x58)))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x59)))
 (not (fp.isNaN ?x97))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x42 ?x58)))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x59)))
 (not (fp.lt ?x97 ?x60)))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x64 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x64 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x64 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x64 ?x45))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x82 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x82 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x96 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x96 ?x22))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x112 (fp.sub roundNearestTiesToEven ?x17 ?x40)))
(not (and (fp.geq ?x112 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x112 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
