(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.556.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x25 ?x17)))
 (not (fp.isNaN ?x27))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x25 ?x17)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x30 ?x19)))
 (not (fp.gt ?x31 ?x27)))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x34 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x34 ?x22))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x37 (fp.sub roundNearestTiesToEven ?x25 ?x34)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x41 (fp.sub roundNearestTiesToEven ?x39 ?x40)))
 (or (fp.isNaN ?x37) (fp.gt ?x41 ?x37)))))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x41 (fp.sub roundNearestTiesToEven ?x39 ?x40)))
 (not (fp.isNaN ?x41))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x41 (fp.sub roundNearestTiesToEven ?x39 ?x40)))
 (not (fp.lt ?x41 ?x34)))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x50 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x50 ?x22))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x54 (fp.add roundNearestTiesToEven ?x40 ?x34)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x53 ?x54)))
 (not (fp.isNaN ?x55))))))))))
(assert
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x58 (fp.sub roundNearestTiesToEven ?x25 ?x50)))
 (not (fp.isNaN ?x58))))))
(assert
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x58 (fp.sub roundNearestTiesToEven ?x25 ?x50)))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x54 (fp.add roundNearestTiesToEven ?x40 ?x34)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x53 ?x54)))
 (not (fp.gt ?x55 ?x58)))))))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x63 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x63 ?x22))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x25 ?x63)))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x54 (fp.add roundNearestTiesToEven ?x40 ?x34)))
 (let ((?x69 (fp.sub roundNearestTiesToEven ?x54 ?x50)))
 (let ((?x68 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x70 (fp.sub roundNearestTiesToEven ?x68 ?x69)))
 (or (fp.isNaN ?x66) (fp.gt ?x70 ?x66)))))))))))))))
(assert
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x54 (fp.add roundNearestTiesToEven ?x40 ?x34)))
 (let ((?x69 (fp.sub roundNearestTiesToEven ?x54 ?x50)))
 (let ((?x68 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x70 (fp.sub roundNearestTiesToEven ?x68 ?x69)))
 (not (fp.isNaN ?x70))))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
 (let ((?x54 (fp.add roundNearestTiesToEven ?x40 ?x34)))
 (let ((?x69 (fp.sub roundNearestTiesToEven ?x54 ?x50)))
 (let ((?x68 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x70 (fp.sub roundNearestTiesToEven ?x68 ?x69)))
 (not (fp.lt ?x70 ?x63)))))))))))))
(assert
 (let ((?x81 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x79 ?x81))))
(assert
 (let ((?x84 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x79 ?x84))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x86 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x86 ?x22))))
(assert
 (let ((?x81 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x30 ?x81))))
(assert
 (let ((?x84 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x30 ?x84))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x30 ?x19)))
 (not (fp.isNaN ?x31))))))
(assert
 (let ((?x81 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x39 ?x81))))
(assert
 (let ((?x84 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x39 ?x84))))
(assert
 (let ((?x81 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x53 ?x81))))
(assert
 (let ((?x84 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x53 ?x84))))
(assert
 (let ((?x81 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x68 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x68 ?x81))))
(assert
 (let ((?x84 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x68 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x68 ?x84))))
(assert
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
(let ((?x102 (fp.sub roundNearestTiesToEven ?x25 ?x86)))
(let ((?x63 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
(let ((?x50 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
(let ((?x34 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
(let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x40 (fp.sub roundNearestTiesToEven ?x19 ?x17)))
(let ((?x54 (fp.add roundNearestTiesToEven ?x40 ?x34)))
(let ((?x69 (fp.sub roundNearestTiesToEven ?x54 ?x50)))
(let ((?x79 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
(let ((?x100 (fp.sub roundNearestTiesToEven ?x79 (fp.add roundNearestTiesToEven ?x69 ?x63))))
(not (or (or (fp.isNaN ?x100) (fp.isNaN ?x102)) (fp.gt ?x100 ?x102)))))))))))))))))
(check-sat)
(exit)
