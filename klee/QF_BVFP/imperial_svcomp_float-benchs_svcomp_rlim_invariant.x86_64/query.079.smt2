(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.079.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x21 ?x13)))
 (not (fp.isNaN ?x23))))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x21 ?x13)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x26 ?x15)))
 (not (fp.gt ?x27 ?x23)))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x30 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x30 ?x18))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x33 (fp.sub roundNearestTiesToEven ?x21 ?x30)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x37 (fp.sub roundNearestTiesToEven ?x35 ?x36)))
 (or (fp.isNaN ?x33) (fp.gt ?x37 ?x33)))))))))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x37 (fp.sub roundNearestTiesToEven ?x35 ?x36)))
 (not (fp.isNaN ?x37))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x37 (fp.sub roundNearestTiesToEven ?x35 ?x36)))
 (not (fp.lt ?x37 ?x30)))))))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x46 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x46 ?x48))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x46 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x46 ?x51))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x53 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x53 ?x18))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x21 ?x53)))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x46 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x57 (fp.sub roundNearestTiesToEven ?x46 (fp.add roundNearestTiesToEven ?x36 ?x30))))
 (or (or (fp.isNaN ?x57) (fp.isNaN ?x59)) (fp.gt ?x57 ?x59))))))))))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x26 ?x48))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x26 ?x51))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x26 ?x15)))
 (not (fp.isNaN ?x27))))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x35 ?x48))))
(assert
 (let ((?x51 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x35 ?x51))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
(let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
(let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x36 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
(let ((?x46 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
(let ((?x57 (fp.sub roundNearestTiesToEven ?x46 (fp.add roundNearestTiesToEven ?x36 ?x30))))
(let (($x76 (and (and (not (fp.isNaN ?x57)) (not (fp.isNaN ?x53))) (not (fp.lt ?x57 ?x53)))))
(not $x76))))))))))
(check-sat)
(exit)
