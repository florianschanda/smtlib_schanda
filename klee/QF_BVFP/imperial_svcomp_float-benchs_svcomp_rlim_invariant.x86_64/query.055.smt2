(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.055.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x21 ?x13)))
 (not (fp.isNaN ?x23))))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x21 ?x13)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x26 ?x15)))
 (not (fp.gt ?x27 ?x23)))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x30 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x30 ?x18))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x35 (fp.sub roundNearestTiesToEven ?x33 ?x34)))
 (not (fp.isNaN ?x35))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x38 (fp.sub roundNearestTiesToEven ?x21 ?x30)))
 (not (fp.isNaN ?x38))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x38 (fp.sub roundNearestTiesToEven ?x21 ?x30)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x35 (fp.sub roundNearestTiesToEven ?x33 ?x34)))
 (not (fp.gt ?x35 ?x38)))))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x43 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x43 ?x18))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x21 ?x43)))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x34 ?x30)))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x48 ?x49)))
 (or (fp.isNaN ?x46) (fp.gt ?x50 ?x46)))))))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x34 ?x30)))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x48 ?x49)))
 (not (fp.isNaN ?x50))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x34 ?x30)))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x48 ?x49)))
 (not (fp.lt ?x50 ?x43)))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x26 ?x60))))
(assert
 (let ((?x63 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x26 ?x63))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x26 ?x15)))
 (not (fp.isNaN ?x27))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x33 ?x60))))
(assert
 (let ((?x63 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x33 ?x63))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x48 ?x60))))
(assert
 (let ((?x63 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x48 ?x63))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
(let ((?x30 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
(let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x34 (fp.sub roundNearestTiesToEven ?x15 ?x13)))
(let ((?x49 (fp.sub roundNearestTiesToEven ?x34 ?x30)))
(let ((?x71 (fp.add roundNearestTiesToEven ?x49 ?x43)))
(not (and (fp.geq ?x71 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x71 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))))))
(check-sat)
(exit)
