(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.007.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_1_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!1 () (_ BitVec 32))
(assert
 (let ((?x11 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x9 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!0)))
 (fp.geq ?x9 ?x11))))
(assert
 (let ((?x9 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!0)))
 (fp.leq ?x9 ((_ to_fp 8 24) (_ bv1098907648 32)))))
(assert
 (let ((?x9 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!0)))
 (let ((?x19 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv2147483648 32)) ?x9)))
 (let ((?x11 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_ackermann!1)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x21 ?x11)))
 (or (fp.isNaN ?x19) (fp.gt ?x22 ?x19))))))))
(assert
 (let ((?x11 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_ackermann!1)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x21 ?x11)))
 (not (fp.isNaN ?x22))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!0))))
(assert
 (let ((?x9 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!0)))
 (let ((?x11 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_ackermann!1)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x21 ?x11)))
 (not (fp.lt ?x22 ?x9)))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_ackermann!1)))
 (fp.geq ?x21 ((_ to_fp 8 24) (_ bv3271557120 32)))))
(assert
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_ackermann!1)))
 (fp.leq ?x21 ((_ to_fp 8 24) (_ bv1124073472 32)))))
(assert
 (let ((?x9 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!0)))
(let ((?x11 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x37 (fp.add roundNearestTiesToEven ?x11 ?x9)))
(not (and (fp.geq ?x37 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x37 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
