(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.098.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x28 ?x29)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x25 (fp.sub roundNearestTiesToEven ?x13 (fp.add roundNearestTiesToEven ?x21 ?x22))))
 (or (or (fp.isNaN ?x25) (fp.isNaN ?x30)) (fp.gt ?x25 ?x30))))))))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x25 (fp.sub roundNearestTiesToEven ?x13 (fp.add roundNearestTiesToEven ?x21 ?x22))))
 (or (or (fp.isNaN ?x25) (fp.isNaN ?x29)) (fp.lt ?x25 ?x29))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x39 ?x21))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x39 ?x42))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x44 ?x13)))
 (not (fp.isNaN ?x45))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x28 ?x39)))
 (not (fp.isNaN ?x48))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x28 ?x39)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x44 ?x13)))
 (not (fp.gt ?x45 ?x48)))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x22 ?x21))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x22 ?x42))))
(assert
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x28 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x28 ?x22)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x58 (fp.sub roundNearestTiesToEven ?x57 ?x21)))
 (or (fp.isNaN ?x55) (fp.gt ?x58 ?x55)))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x58 (fp.sub roundNearestTiesToEven ?x57 ?x21)))
 (not (fp.isNaN ?x58))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4))))
(assert
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x58 (fp.sub roundNearestTiesToEven ?x57 ?x21)))
 (not (fp.lt ?x58 ?x22)))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x29 ?x21))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x29 ?x42))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x44 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x44 ?x18))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x57 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x57 ?x18))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
(let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
(let ((?x73 (fp.sub roundNearestTiesToEven ?x13 ?x39)))
(not (and (fp.geq ?x73 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x73 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
