(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.356.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31)))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x40 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x40 ?x22))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x43 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x43 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x29 ?x55)))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x53 (fp.sub roundNearestTiesToEven ?x24 ?x52)))
 (or (or (fp.isNaN ?x53) (fp.isNaN ?x56)) (fp.gt ?x53 ?x56)))))))))
(assert
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x53 (fp.sub roundNearestTiesToEven ?x24 ?x52)))
 (or (or (fp.isNaN ?x53) (fp.isNaN ?x55)) (fp.lt ?x53 ?x55)))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x30 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x30 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x52 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x52 ?x22))))
(assert
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x74 (fp.sub roundNearestTiesToEven ?x29 ?x73)))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x52 (fp.sub roundNearestTiesToEven ?x45 ?x69))))
 (or (or (fp.isNaN ?x71) (fp.isNaN ?x74)) (fp.gt ?x71 ?x74))))))))))
(assert
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x52 (fp.sub roundNearestTiesToEven ?x45 ?x69))))
 (or (or (fp.isNaN ?x71) (fp.isNaN ?x73)) (fp.lt ?x71 ?x73))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x55 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x55 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x55 ?x48))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x69 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x69 ?x48))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x87 (fp.sub roundNearestTiesToEven ?x29 ?x69)))
 (not (fp.isNaN ?x87))))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x87 (fp.sub roundNearestTiesToEven ?x29 ?x69)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x91 (fp.sub roundNearestTiesToEven ?x90 ?x45)))
 (not (fp.gt ?x91 ?x87)))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x73 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x73 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x90 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x90 ?x22))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x91 (fp.sub roundNearestTiesToEven ?x90 ?x45)))
 (not (fp.isNaN ?x91))))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
(let ((?x103 (fp.sub roundNearestTiesToEven ?x29 ?x43)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
(let ((?x100 (fp.sub roundNearestTiesToEven ?x40 ?x17)))
(let (($x109 (and (and (not (fp.isNaN ?x100)) (not (fp.isNaN ?x103))) (not (fp.gt ?x100 ?x103)))))
(not $x109)))))))))
(check-sat)
(exit)
