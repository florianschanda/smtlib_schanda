(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.048.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x21 ?x13)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x25 ?x15)))
 (or (fp.isNaN ?x23) (fp.gt ?x26 ?x23)))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x25 ?x15)))
 (not (fp.isNaN ?x26))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x25 ?x15)))
 (not (fp.lt ?x26 ?x13)))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x35 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x35 ?x18))))
(assert
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 (fp.add roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x38 ?x39)))
 (not (fp.isNaN ?x40))))))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x43 (fp.sub roundNearestTiesToEven ?x21 ?x35)))
 (not (fp.isNaN ?x43))))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x43 (fp.sub roundNearestTiesToEven ?x21 ?x35)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 (fp.add roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x38 ?x39)))
 (not (fp.gt ?x40 ?x43)))))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x48 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x48 ?x18))))
(assert
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x21 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x21 ?x48)))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 (fp.add roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x39 ?x35)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x53 ?x54)))
 (or (fp.isNaN ?x51) (fp.gt ?x55 ?x51)))))))))))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 (fp.add roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x39 ?x35)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x53 ?x54)))
 (not (fp.isNaN ?x55))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2))))
(assert
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 (fp.add roundNearestTiesToEven ?x15 ?x13)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x39 ?x35)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x53 ?x54)))
 (not (fp.lt ?x55 ?x48)))))))))))
(assert
 (let ((?x65 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x25 ?x65))))
(assert
 (let ((?x68 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x25 ?x68))))
(assert
 (let ((?x65 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x38 ?x65))))
(assert
 (let ((?x68 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x38 ?x68))))
(assert
 (let ((?x65 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x53 ?x65))))
(assert
 (let ((?x68 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x53 ?x68))))
(assert
 (let ((?x48 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
(let ((?x35 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x13 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
(let ((?x15 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x39 (fp.add roundNearestTiesToEven ?x15 ?x13)))
(let ((?x54 (fp.sub roundNearestTiesToEven ?x39 ?x35)))
(let ((?x74 (fp.add roundNearestTiesToEven ?x54 ?x48)))
(not (and (fp.geq ?x74 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x74 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))))))
(check-sat)
(exit)
