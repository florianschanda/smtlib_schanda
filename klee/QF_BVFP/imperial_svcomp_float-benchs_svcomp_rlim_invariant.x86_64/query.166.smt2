(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.166.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x27 ?x28)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x29)) (fp.gt ?x24 ?x29)))))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x28)) (fp.lt ?x24 ?x28)))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x38 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x38 ?x20))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x41 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x41 ?x43))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x41 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x41 ?x46))))
(assert
 (let ((?x41 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x27 ?x41)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x38 ?x15)))
 (or (or (fp.isNaN ?x48) (fp.isNaN ?x50)) (fp.gt ?x48 ?x50)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x22 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x22 ?x20))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x27 ?x61)))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x22 (fp.sub roundNearestTiesToEven ?x43 ?x57))))
 (or (or (fp.isNaN ?x59) (fp.isNaN ?x62)) (fp.gt ?x59 ?x62))))))))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x22 (fp.sub roundNearestTiesToEven ?x43 ?x57))))
 (or (or (fp.isNaN ?x59) (fp.isNaN ?x61)) (fp.lt ?x59 ?x61))))))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x28 ?x43))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x28 ?x46))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x57 ?x43))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x57 ?x46))))
(assert
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x75 (fp.sub roundNearestTiesToEven ?x27 ?x57)))
 (not (fp.isNaN ?x75))))))
(assert
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x75 (fp.sub roundNearestTiesToEven ?x27 ?x57)))
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x78 ?x43)))
 (not (fp.gt ?x79 ?x75)))))))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x61 ?x43))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x61 ?x46))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x78 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x78 ?x20))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x78 ?x43)))
 (not (fp.isNaN ?x79))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
(let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
(let ((?x38 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
(let ((?x48 (fp.sub roundNearestTiesToEven ?x38 ?x15)))
(let (($x94 (and (and (not (fp.isNaN ?x48)) (not (fp.isNaN ?x41))) (not (fp.lt ?x48 ?x41)))))
(not $x94)))))))
(check-sat)
(exit)
