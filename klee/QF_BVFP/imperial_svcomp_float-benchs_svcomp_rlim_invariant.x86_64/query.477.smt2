(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.477.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x35 (fp.sub roundNearestTiesToEven ?x33 ?x34)))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x17 (fp.sub roundNearestTiesToEven ?x27 ?x28))))
 (or (or (fp.isNaN ?x30) (fp.isNaN ?x35)) (fp.gt ?x30 ?x35))))))))))))
(assert
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x30 (fp.sub roundNearestTiesToEven ?x17 (fp.sub roundNearestTiesToEven ?x27 ?x28))))
 (or (or (fp.isNaN ?x30) (fp.isNaN ?x34)) (fp.lt ?x30 ?x34))))))))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x44 ?x46))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x44 ?x49))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x33 ?x44)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x53 ?x17)))
 (or (fp.isNaN ?x51) (fp.gt ?x54 ?x51)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x53 ?x17)))
 (not (fp.isNaN ?x54))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x54 (fp.sub roundNearestTiesToEven ?x53 ?x17)))
 (not (fp.lt ?x54 ?x44)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x33 ?x67)))
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x24 ?x46)))
 (or (or (fp.isNaN ?x65) (fp.isNaN ?x68)) (fp.gt ?x65 ?x68)))))))))
(assert
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x24 ?x46)))
 (or (or (fp.isNaN ?x65) (fp.isNaN ?x67)) (fp.lt ?x65 ?x67)))))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x25 ?x46))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x25 ?x49))))
(assert
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x79 ?x24)))
 (not (fp.isNaN ?x80))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x33 ?x25)))
 (not (fp.isNaN ?x83))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x33 ?x25)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x79 ?x24)))
 (not (fp.gt ?x80 ?x83)))))))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x28 ?x46))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x28 ?x49))))
(assert
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x91 (fp.sub roundNearestTiesToEven ?x90 ?x27)))
 (not (fp.isNaN ?x91))))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x33 ?x28)))
 (not (fp.isNaN ?x94))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x33 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x33 ?x28)))
 (let ((?x25 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x24 ?x25)))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x91 (fp.sub roundNearestTiesToEven ?x90 ?x27)))
 (not (fp.gt ?x91 ?x94)))))))))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x34 ?x46))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x34 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x34 ?x49))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x53 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x53 ?x22))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x67 ?x46))))
(assert
 (let ((?x49 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x67 ?x49))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x79 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x79 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x90 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x90 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x90 ?x22))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x109 (fp.add roundNearestTiesToEven ?x17 ?x44)))
(not (and (fp.geq ?x109 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x109 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
