(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.066.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x13 ?x20)))
 (or (or (fp.isNaN ?x22) (fp.isNaN ?x27)) (fp.gt ?x22 ?x27)))))))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x13 ?x20)))
 (or (or (fp.isNaN ?x22) (fp.isNaN ?x26)) (fp.lt ?x22 ?x26)))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x36 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x36 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x36 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x36 ?x18))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x39 ?x41))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x39 ?x44))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x25 ?x39)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x36 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x36 ?x13)))
 (or (or (fp.isNaN ?x46) (fp.isNaN ?x48)) (fp.gt ?x46 ?x48)))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x20 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x20 ?x18))))
(assert
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x58 (fp.sub roundNearestTiesToEven ?x25 ?x57)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x20 ?x41)))
 (or (or (fp.isNaN ?x55) (fp.isNaN ?x58)) (fp.gt ?x55 ?x58)))))))))
(assert
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x55 (fp.sub roundNearestTiesToEven ?x20 ?x41)))
 (or (or (fp.isNaN ?x55) (fp.isNaN ?x57)) (fp.lt ?x55 ?x57)))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x26 ?x41))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x26 ?x44))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x57 ?x41))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x57 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x57 ?x44))))
(assert
 (let ((?x39 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
(let ((?x13 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
(let ((?x36 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
(let ((?x46 (fp.sub roundNearestTiesToEven ?x36 ?x13)))
(not (or (or (fp.isNaN ?x46) (fp.isNaN ?x39)) (fp.lt ?x46 ?x39))))))))
(check-sat)
(exit)
