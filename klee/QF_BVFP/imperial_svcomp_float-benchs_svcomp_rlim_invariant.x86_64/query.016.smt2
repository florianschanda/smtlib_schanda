(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.016.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x11 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x11 ((_ to_fp 8 24) (_ bv3271557120 32)))))
(assert
 (let ((?x11 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x11 ((_ to_fp 8 24) (_ bv1124073472 32)))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv2147483648 32)) ?x27)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x11 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x11 (fp.add roundNearestTiesToEven ?x19 ?x20))))
 (or (or (fp.isNaN ?x23) (fp.isNaN ?x28)) (fp.gt ?x23 ?x28)))))))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x11 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x23 (fp.sub roundNearestTiesToEven ?x11 (fp.add roundNearestTiesToEven ?x19 ?x20))))
 (or (or (fp.isNaN ?x23) (fp.isNaN ?x27)) (fp.lt ?x23 ?x27))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2)))
 (fp.geq ?x20 ?x19))))
(assert
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2)))
 (fp.leq ?x20 ((_ to_fp 8 24) (_ bv1098907648 32)))))
(assert
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2)))
 (let ((?x41 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv2147483648 32)) ?x20)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_ackermann!3)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x43 ?x19)))
 (or (fp.isNaN ?x41) (fp.gt ?x44 ?x41))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_ackermann!3)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x43 ?x19)))
 (not (fp.isNaN ?x44))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2))))
(assert
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!2)))
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_ackermann!3)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x43 ?x19)))
 (not (fp.lt ?x44 ?x20)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x27 ?x19))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x27 ((_ to_fp 8 24) (_ bv1098907648 32)))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_ackermann!3)))
 (fp.geq ?x43 ((_ to_fp 8 24) (_ bv3271557120 32)))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_ackermann!3)))
 (fp.leq ?x43 ((_ to_fp 8 24) (_ bv1124073472 32)))))
(assert
 (let (($x63 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x63)))
(check-sat)
(exit)
