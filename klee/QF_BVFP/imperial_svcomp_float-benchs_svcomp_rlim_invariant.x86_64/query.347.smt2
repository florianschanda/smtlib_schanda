(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.347.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x32 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x34 (fp.sub roundNearestTiesToEven ?x32 ?x33)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x25 ?x26))))
 (or (or (fp.isNaN ?x29) (fp.isNaN ?x34)) (fp.gt ?x29 ?x34))))))))))
(assert
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x17 (fp.add roundNearestTiesToEven ?x25 ?x26))))
 (or (or (fp.isNaN ?x29) (fp.isNaN ?x33)) (fp.lt ?x29 ?x33))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x43 ?x25))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x43 ?x46))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x32 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x32 ?x43)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x50 ?x17)))
 (or (fp.isNaN ?x48) (fp.gt ?x51 ?x48)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x50 ?x17)))
 (not (fp.isNaN ?x51))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x50 ?x17)))
 (not (fp.lt ?x51 ?x43)))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x60 ?x25))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x60 ?x46))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x64 (fp.add roundNearestTiesToEven ?x17 ?x43)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x63 ?x64)))
 (not (fp.isNaN ?x65))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x32 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x32 ?x60)))
 (not (fp.isNaN ?x68))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x32 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x32 ?x60)))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x64 (fp.add roundNearestTiesToEven ?x17 ?x43)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x63 ?x64)))
 (not (fp.gt ?x65 ?x68)))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x73 ?x25))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x73 ?x46))))
(assert
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x32 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x76 (fp.sub roundNearestTiesToEven ?x32 ?x73)))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x64 (fp.add roundNearestTiesToEven ?x17 ?x43)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x64 ?x60)))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x78 ?x79)))
 (or (fp.isNaN ?x76) (fp.gt ?x80 ?x76)))))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x64 (fp.add roundNearestTiesToEven ?x17 ?x43)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x64 ?x60)))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x78 ?x79)))
 (not (fp.isNaN ?x80))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1))))
(assert
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x64 (fp.add roundNearestTiesToEven ?x17 ?x43)))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x64 ?x60)))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x78 ?x79)))
 (not (fp.lt ?x80 ?x73)))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x26 ?x25))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x26 ?x46))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x32 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x91 (fp.sub roundNearestTiesToEven ?x32 ?x26)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x93 ?x25)))
 (or (fp.isNaN ?x91) (fp.gt ?x94 ?x91)))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x93 ?x25)))
 (not (fp.isNaN ?x94))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x93 ?x25)))
 (not (fp.lt ?x94 ?x26)))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x33 ?x25))))
(assert
 (let ((?x46 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x33 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x33 ?x46))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x50 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x50 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x50 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x63 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x63 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x78 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x78 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x78 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x93 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x93 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x93 ?x22))))
(assert
 (let ((?x73 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x60 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
(let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
(let ((?x64 (fp.add roundNearestTiesToEven ?x17 ?x43)))
(let ((?x79 (fp.sub roundNearestTiesToEven ?x64 ?x60)))
(let ((?x113 (fp.add roundNearestTiesToEven ?x79 ?x73)))
(not (and (fp.geq ?x113 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x113 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))))))
(check-sat)
(exit)
