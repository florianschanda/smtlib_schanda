(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.169.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x27 ?x28)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x29)) (fp.gt ?x24 ?x29)))))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x15 ?x22)))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x28)) (fp.lt ?x24 ?x28)))))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x38 ?x40))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x38 ?x43))))
(assert
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x27 ?x38)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x15)))
 (or (fp.isNaN ?x45) (fp.gt ?x48 ?x45)))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x15)))
 (not (fp.isNaN ?x48))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5))))
(assert
 (let ((?x38 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x47 ?x15)))
 (not (fp.lt ?x48 ?x38)))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x22 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x22 ?x20))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x27 ?x63)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x61 (fp.sub roundNearestTiesToEven ?x22 (fp.sub roundNearestTiesToEven ?x40 ?x59))))
 (or (or (fp.isNaN ?x61) (fp.isNaN ?x64)) (fp.gt ?x61 ?x64))))))))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x61 (fp.sub roundNearestTiesToEven ?x22 (fp.sub roundNearestTiesToEven ?x40 ?x59))))
 (or (or (fp.isNaN ?x61) (fp.isNaN ?x63)) (fp.lt ?x61 ?x63))))))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x28 ?x40))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x28 ?x43))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x47 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x47 ?x20))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x59 ?x40))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x59 ?x43))))
(assert
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x27 ?x59)))
 (not (fp.isNaN ?x79))))))
(assert
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x27 ?x59)))
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x82 ?x40)))
 (not (fp.gt ?x83 ?x79)))))))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x63 ?x40))))
(assert
 (let ((?x43 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x63 ?x43))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x82 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x82 ?x20))))
(assert
 (let ((?x40 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x82 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x82 ?x40)))
 (not (fp.isNaN ?x83))))))
(assert
 (not false))
(check-sat)
(exit)
