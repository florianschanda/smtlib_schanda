(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.428.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x34 ?x35)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x17 (fp.sub roundNearestTiesToEven ?x28 ?x29))))
 (or (or (fp.isNaN ?x31) (fp.isNaN ?x36)) (fp.gt ?x31 ?x36))))))))))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x17 (fp.sub roundNearestTiesToEven ?x28 ?x29))))
 (or (or (fp.isNaN ?x31) (fp.isNaN ?x35)) (fp.lt ?x31 ?x35))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x45 ?x25))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x45 ?x48))))
(assert
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x34 ?x45)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x53 (fp.sub roundNearestTiesToEven ?x52 ?x17)))
 (or (fp.isNaN ?x50) (fp.gt ?x53 ?x50)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x53 (fp.sub roundNearestTiesToEven ?x52 ?x17)))
 (not (fp.isNaN ?x53))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6))))
(assert
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x53 (fp.sub roundNearestTiesToEven ?x52 ?x17)))
 (not (fp.lt ?x53 ?x45)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x62 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x62 ?x22))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x65 ?x25))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x65 ?x48))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x26 ?x25))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x26 ?x48))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x70 (fp.sub roundNearestTiesToEven ?x34 ?x26)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x72 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x73 (fp.sub roundNearestTiesToEven ?x72 ?x25)))
 (or (fp.isNaN ?x70) (fp.gt ?x73 ?x70)))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x72 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x73 (fp.sub roundNearestTiesToEven ?x72 ?x25)))
 (not (fp.isNaN ?x73))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x72 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x73 (fp.sub roundNearestTiesToEven ?x72 ?x25)))
 (not (fp.lt ?x73 ?x26)))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x29 ?x25))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x29 ?x48))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x84 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x85 (fp.sub roundNearestTiesToEven ?x84 ?x28)))
 (not (fp.isNaN ?x85))))))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x88 (fp.sub roundNearestTiesToEven ?x34 ?x29)))
 (not (fp.isNaN ?x88))))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x88 (fp.sub roundNearestTiesToEven ?x34 ?x29)))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 (fp.add roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x84 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x85 (fp.sub roundNearestTiesToEven ?x84 ?x28)))
 (not (fp.gt ?x85 ?x88)))))))))))
(assert
 (let ((?x25 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x35 ?x25))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x35 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x52 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x52 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x52 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x72 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x72 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x72 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x72 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x84 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x84 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x84 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x84 ?x22))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
(let ((?x104 (fp.sub roundNearestTiesToEven ?x34 ?x65)))
(let ((?x45 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
(let ((?x62 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
(let ((?x102 (fp.sub roundNearestTiesToEven ?x62 (fp.add roundNearestTiesToEven ?x17 ?x45))))
(not (or (or (fp.isNaN ?x102) (fp.isNaN ?x104)) (fp.gt ?x102 ?x104)))))))))))
(check-sat)
(exit)
