(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.157.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x25 (fp.sub roundNearestTiesToEven ?x23 ?x15)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x27 ?x17)))
 (or (fp.isNaN ?x25) (fp.gt ?x28 ?x25)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x27 ?x17)))
 (not (fp.isNaN ?x28))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6))))
(assert
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x27 ?x17)))
 (not (fp.lt ?x28 ?x15)))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x37 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x37 ?x20))))
(assert
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x40 (fp.sub roundNearestTiesToEven ?x23 ?x37)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x42 ?x43)))
 (or (fp.isNaN ?x40) (fp.gt ?x44 ?x40)))))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x42 ?x43)))
 (not (fp.isNaN ?x44))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x44 (fp.sub roundNearestTiesToEven ?x42 ?x43)))
 (not (fp.lt ?x44 ?x37)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x53 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x53 ?x20))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x56 (fp.sub roundNearestTiesToEven ?x23 ?x53)))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x43 ?x37)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x58 ?x59)))
 (or (fp.isNaN ?x56) (fp.gt ?x60 ?x56)))))))))))))
(assert
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x43 ?x37)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x58 ?x59)))
 (not (fp.isNaN ?x60))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3))))
(assert
 (let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
 (let ((?x59 (fp.add roundNearestTiesToEven ?x43 ?x37)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x58 ?x59)))
 (not (fp.lt ?x60 ?x53)))))))))))
(assert
 (let ((?x71 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x69 ?x71))))
(assert
 (let ((?x74 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x69 ?x74))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x76 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x76 ?x20))))
(assert
 (let ((?x71 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x27 ?x71))))
(assert
 (let ((?x74 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x27 ?x74))))
(assert
 (let ((?x71 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x42 ?x71))))
(assert
 (let ((?x74 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x42 ?x74))))
(assert
 (let ((?x71 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x58 ?x71))))
(assert
 (let ((?x74 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x58 ?x74))))
(assert
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
(let ((?x23 ((_ to_fp 8 24) (_ bv2147483648 32))))
(let ((?x89 (fp.sub roundNearestTiesToEven ?x23 ?x76)))
(let ((?x53 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
(let ((?x37 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
(let ((?x15 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
(let ((?x17 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x43 (fp.add roundNearestTiesToEven ?x17 ?x15)))
(let ((?x59 (fp.add roundNearestTiesToEven ?x43 ?x37)))
(let ((?x69 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
(let ((?x86 (fp.sub roundNearestTiesToEven ?x69 (fp.add roundNearestTiesToEven ?x59 ?x53))))
(let (($x95 (and (and (not (fp.isNaN ?x86)) (not (fp.isNaN ?x89))) (not (fp.gt ?x86 ?x89)))))
(not $x95))))))))))))))
(check-sat)
(exit)
