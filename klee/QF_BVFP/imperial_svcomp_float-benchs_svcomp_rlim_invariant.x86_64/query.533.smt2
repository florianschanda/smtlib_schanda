(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.533.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31)))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x40 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x40 ?x22))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x43 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x43 ?x48))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x29 ?x43)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x40 ?x17)))
 (or (or (fp.isNaN ?x50) (fp.isNaN ?x52)) (fp.gt ?x50 ?x52)))))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x66 (fp.sub roundNearestTiesToEven ?x29 ?x65)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 (fp.add roundNearestTiesToEven ?x45 ?x59)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x60 ?x61))))
 (or (or (fp.isNaN ?x63) (fp.isNaN ?x66)) (fp.gt ?x63 ?x66))))))))))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 (fp.add roundNearestTiesToEven ?x45 ?x59)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x60 ?x61))))
 (or (or (fp.isNaN ?x63) (fp.isNaN ?x65)) (fp.lt ?x63 ?x65))))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x30 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x30 ?x48))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x59 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x59 ?x48))))
(assert
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x79 (fp.sub roundNearestTiesToEven ?x29 ?x59)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x45)))
 (or (fp.isNaN ?x79) (fp.gt ?x82 ?x79)))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x45)))
 (not (fp.isNaN ?x82))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x45)))
 (not (fp.lt ?x82 ?x59)))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x61 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x61 ?x48))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x93 (fp.sub roundNearestTiesToEven ?x29 ?x61)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 (fp.add roundNearestTiesToEven ?x45 ?x59)))
 (let ((?x95 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x96 (fp.sub roundNearestTiesToEven ?x95 ?x60)))
 (or (fp.isNaN ?x93) (fp.gt ?x96 ?x93)))))))))))
(assert
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 (fp.add roundNearestTiesToEven ?x45 ?x59)))
 (let ((?x95 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x96 (fp.sub roundNearestTiesToEven ?x95 ?x60)))
 (not (fp.isNaN ?x96))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x59 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x60 (fp.add roundNearestTiesToEven ?x45 ?x59)))
 (let ((?x95 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x96 (fp.sub roundNearestTiesToEven ?x95 ?x60)))
 (not (fp.lt ?x96 ?x61)))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x65 ?x45))))
(assert
 (let ((?x48 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x65 ?x48))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x81 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x81 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x95 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x95 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x95 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x95 ?x22))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x40 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
(let ((?x50 (fp.sub roundNearestTiesToEven ?x40 ?x17)))
(let (($x117 (and (and (not (fp.isNaN ?x50)) (not (fp.isNaN ?x43))) (not (fp.lt ?x50 ?x43)))))
(not $x117)))))))
(check-sat)
(exit)
