(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.095.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x27 (fp.sub roundNearestTiesToEven ?x25 ?x26)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x13 ?x20)))
 (or (or (fp.isNaN ?x22) (fp.isNaN ?x27)) (fp.gt ?x22 ?x27)))))))))
(assert
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x22 (fp.sub roundNearestTiesToEven ?x13 ?x20)))
 (or (or (fp.isNaN ?x22) (fp.isNaN ?x26)) (fp.lt ?x22 ?x26)))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x20 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x20 ?x18))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x25 ?x44)))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x42 (fp.sub roundNearestTiesToEven ?x20 (fp.add roundNearestTiesToEven ?x39 ?x40))))
 (or (or (fp.isNaN ?x42) (fp.isNaN ?x45)) (fp.gt ?x42 ?x45))))))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x42 (fp.sub roundNearestTiesToEven ?x20 (fp.add roundNearestTiesToEven ?x39 ?x40))))
 (or (or (fp.isNaN ?x42) (fp.isNaN ?x44)) (fp.lt ?x42 ?x44))))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x26 ?x39))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x26 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x26 ?x56))))
(assert
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x40 ?x39))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x40 ?x56))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x25 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x60 (fp.sub roundNearestTiesToEven ?x25 ?x40)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x62 ?x39)))
 (or (fp.isNaN ?x60) (fp.gt ?x63 ?x60)))))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x62 ?x39)))
 (not (fp.isNaN ?x63))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x63 (fp.sub roundNearestTiesToEven ?x62 ?x39)))
 (not (fp.lt ?x63 ?x40)))))))
(assert
 (let ((?x39 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x44 ?x39))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x44 ?x56))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x62 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x62 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x62 ?x18))))
(assert
 (let (($x82 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x82)))
(check-sat)
(exit)
