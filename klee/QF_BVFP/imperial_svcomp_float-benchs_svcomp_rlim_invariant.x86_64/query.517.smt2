(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.517.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31)))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x48 (fp.sub roundNearestTiesToEven ?x29 ?x47)))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x24 (fp.sub roundNearestTiesToEven ?x42 ?x43))))
 (or (or (fp.isNaN ?x45) (fp.isNaN ?x48)) (fp.gt ?x45 ?x48))))))))))
(assert
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x24 (fp.sub roundNearestTiesToEven ?x42 ?x43))))
 (or (or (fp.isNaN ?x45) (fp.isNaN ?x47)) (fp.lt ?x45 ?x47))))))))
(assert
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x30 ?x58))))
(assert
 (let ((?x61 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x30 ?x61))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x42 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x42 ?x22))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x70 (fp.sub roundNearestTiesToEven ?x29 ?x69)))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x42 (fp.add roundNearestTiesToEven ?x58 ?x65))))
 (or (or (fp.isNaN ?x67) (fp.isNaN ?x70)) (fp.gt ?x67 ?x70))))))))))
(assert
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x42 (fp.add roundNearestTiesToEven ?x58 ?x65))))
 (or (or (fp.isNaN ?x67) (fp.isNaN ?x69)) (fp.lt ?x67 ?x69))))))))
(assert
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x43 ?x58))))
(assert
 (let ((?x61 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x43 ?x61))))
(assert
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x42)))
 (not (fp.isNaN ?x82))))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x85 (fp.sub roundNearestTiesToEven ?x29 ?x43)))
 (not (fp.isNaN ?x85))))))
(assert
 (let ((?x43 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x85 (fp.sub roundNearestTiesToEven ?x29 ?x43)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x81 ?x42)))
 (not (fp.gt ?x82 ?x85)))))))))
(assert
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x47 ?x58))))
(assert
 (let ((?x61 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x47 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x47 ?x61))))
(assert
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x65 ?x58))))
(assert
 (let ((?x61 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x65 ?x61))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x94 (fp.sub roundNearestTiesToEven ?x29 ?x65)))
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x58)))
 (or (fp.isNaN ?x94) (fp.gt ?x97 ?x94)))))))))
(assert
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x58)))
 (not (fp.isNaN ?x97))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7))))
(assert
 (let ((?x65 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x96 ?x58)))
 (not (fp.lt ?x97 ?x65)))))))
(assert
 (let ((?x58 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x69 ?x58))))
(assert
 (let ((?x61 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x69 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x69 ?x61))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x81 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x81 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x81 ?x22))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x96 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x96 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x96 ?x22))))
(assert
 (let (($x118 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x118)))
(check-sat)
(exit)
