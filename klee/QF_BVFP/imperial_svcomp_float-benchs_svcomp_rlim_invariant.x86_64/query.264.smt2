(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.264.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x23 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x15 (fp.add roundNearestTiesToEven ?x22 ?x23))))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31))))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x23 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x15 (fp.add roundNearestTiesToEven ?x22 ?x23))))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x22 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x22 ?x20))))
(assert
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x46 (fp.sub roundNearestTiesToEven ?x29 ?x45)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x43 (fp.sub roundNearestTiesToEven ?x22 ?x42)))
 (or (or (fp.isNaN ?x43) (fp.isNaN ?x46)) (fp.gt ?x43 ?x46)))))))))
(assert
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x43 (fp.sub roundNearestTiesToEven ?x22 ?x42)))
 (or (or (fp.isNaN ?x43) (fp.isNaN ?x45)) (fp.lt ?x43 ?x45)))))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x23 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x23 ?x56))))
(assert
 (let ((?x59 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x23 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x23 ?x59))))
(assert
 (let ((?x23 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x61 (fp.sub roundNearestTiesToEven ?x29 ?x23)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x63 ?x22)))
 (or (fp.isNaN ?x61) (fp.gt ?x64 ?x61)))))))))
(assert
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x63 ?x22)))
 (not (fp.isNaN ?x64))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3))))
(assert
 (let ((?x23 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x22 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x63 ?x22)))
 (not (fp.lt ?x64 ?x23)))))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x30 ?x56))))
(assert
 (let ((?x59 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x30 ?x59))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x42 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x42 ?x20))))
(assert
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x80 (fp.sub roundNearestTiesToEven ?x29 ?x79)))
 (let ((?x56 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x77 (fp.sub roundNearestTiesToEven ?x42 ?x56)))
 (or (or (fp.isNaN ?x77) (fp.isNaN ?x80)) (fp.gt ?x77 ?x80)))))))))
(assert
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x56 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x42 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x77 (fp.sub roundNearestTiesToEven ?x42 ?x56)))
 (or (or (fp.isNaN ?x77) (fp.isNaN ?x79)) (fp.lt ?x77 ?x79)))))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x45 ?x56))))
(assert
 (let ((?x59 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x45 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x45 ?x59))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x63 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x63 ?x20))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x79 ?x56))))
(assert
 (let ((?x59 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x79 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x79 ?x59))))
(assert
 (let (($x101 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x101)))
(check-sat)
(exit)
