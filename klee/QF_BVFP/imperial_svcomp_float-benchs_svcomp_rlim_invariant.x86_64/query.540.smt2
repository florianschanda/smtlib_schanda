(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.540.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_9_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_8_ackermann!9 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!8 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!3 () (_ BitVec 32))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.geq ?x17 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (fp.leq ?x17 ?x22))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x29 ?x30)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x31)) (fp.gt ?x26 ?x31)))))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x26 (fp.sub roundNearestTiesToEven ?x17 ?x24)))
 (or (or (fp.isNaN ?x26) (fp.isNaN ?x30)) (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.geq ?x40 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (fp.leq ?x40 ?x45))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x47 (fp.sub roundNearestTiesToEven ?x29 ?x40)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x49 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x49 ?x17)))
 (or (fp.isNaN ?x47) (fp.gt ?x50 ?x47)))))))))
(assert
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x49 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x49 ?x17)))
 (not (fp.isNaN ?x50))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
 (let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
 (let ((?x49 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (let ((?x50 (fp.sub roundNearestTiesToEven ?x49 ?x17)))
 (not (fp.lt ?x50 ?x40)))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.geq ?x24 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (fp.leq ?x24 ?x22))))
(assert
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x68 (fp.sub roundNearestTiesToEven ?x29 ?x67)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x42 ?x61)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x62 ?x63))))
 (or (or (fp.isNaN ?x65) (fp.isNaN ?x68)) (fp.gt ?x65 ?x68))))))))))))
(assert
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x42 ?x61)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!5)))
 (let ((?x65 (fp.sub roundNearestTiesToEven ?x24 (fp.add roundNearestTiesToEven ?x62 ?x63))))
 (or (or (fp.isNaN ?x65) (fp.isNaN ?x67)) (fp.lt ?x65 ?x67))))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.geq ?x30 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!6)))
 (fp.leq ?x30 ?x45))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x49 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.geq ?x49 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x49 ((_ to_fp 8 24) symbolic_0_float_8_ackermann!9)))
 (fp.leq ?x49 ?x22))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.geq ?x61 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (fp.leq ?x61 ?x45))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x29 ?x61)))
 (not (fp.isNaN ?x83))))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x83 (fp.sub roundNearestTiesToEven ?x29 ?x61)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x87 (fp.sub roundNearestTiesToEven ?x86 ?x42)))
 (not (fp.gt ?x87 ?x83)))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x63 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x63 ?x45))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x29 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x92 (fp.sub roundNearestTiesToEven ?x29 ?x63)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x42 ?x61)))
 (let ((?x94 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x95 (fp.sub roundNearestTiesToEven ?x94 ?x62)))
 (or (fp.isNaN ?x92) (fp.gt ?x95 ?x92)))))))))))
(assert
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x42 ?x61)))
 (let ((?x94 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x95 (fp.sub roundNearestTiesToEven ?x94 ?x62)))
 (not (fp.isNaN ?x95))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0))))
(assert
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x61 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!7)))
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x42 ?x61)))
 (let ((?x94 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (let ((?x95 (fp.sub roundNearestTiesToEven ?x94 ?x62)))
 (not (fp.lt ?x95 ?x63)))))))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.geq ?x67 ?x42))))
(assert
 (let ((?x45 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x67 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!4)))
 (fp.leq ?x67 ?x45))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.geq ?x86 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (fp.leq ?x86 ?x22))))
(assert
 (let ((?x42 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x86 ((_ to_fp 8 24) symbolic_0_float_ackermann!8)))
 (let ((?x87 (fp.sub roundNearestTiesToEven ?x86 ?x42)))
 (not (fp.isNaN ?x87))))))
(assert
 (let ((?x19 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x94 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.geq ?x94 ?x19))))
(assert
 (let ((?x22 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x94 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!3)))
 (fp.leq ?x94 ?x22))))
(assert
 (let ((?x40 ((_ to_fp 8 24) symbolic_0_float_9_ackermann!1)))
(let ((?x17 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!2)))
(let ((?x112 (fp.add roundNearestTiesToEven ?x17 ?x40)))
(not (and (fp.geq ?x112 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x112 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
