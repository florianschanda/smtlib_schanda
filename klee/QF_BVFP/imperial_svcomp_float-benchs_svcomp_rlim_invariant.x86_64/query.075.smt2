(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.075.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_4_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!4 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!1 () (_ BitVec 32))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.geq ?x13 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (fp.leq ?x13 ?x18))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x29 (fp.sub roundNearestTiesToEven ?x27 ?x28)))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x13 (fp.sub roundNearestTiesToEven ?x20 ?x21))))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x29)) (fp.gt ?x24 ?x29))))))))))
(assert
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x13 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3)))
 (let ((?x24 (fp.sub roundNearestTiesToEven ?x13 (fp.sub roundNearestTiesToEven ?x20 ?x21))))
 (or (or (fp.isNaN ?x24) (fp.isNaN ?x28)) (fp.lt ?x24 ?x28))))))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.geq ?x20 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (fp.leq ?x20 ?x18))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x45 (fp.sub roundNearestTiesToEven ?x27 ?x44)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x42 (fp.sub roundNearestTiesToEven ?x20 ?x41)))
 (or (or (fp.isNaN ?x42) (fp.isNaN ?x45)) (fp.gt ?x42 ?x45)))))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x42 (fp.sub roundNearestTiesToEven ?x20 ?x41)))
 (or (or (fp.isNaN ?x42) (fp.isNaN ?x44)) (fp.lt ?x42 ?x44)))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x21 ?x41))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x21 ?x56))))
(assert
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x58 ?x20)))
 (not (fp.isNaN ?x59))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x27 ?x21)))
 (not (fp.isNaN ?x62))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x27 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x62 (fp.sub roundNearestTiesToEven ?x27 ?x21)))
 (let ((?x20 ((_ to_fp 8 24) symbolic_0_float_ackermann!5)))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x58 ?x20)))
 (not (fp.gt ?x59 ?x62)))))))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.geq ?x28 ?x41))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x28 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!2)))
 (fp.leq ?x28 ?x56))))
(assert
 (let ((?x41 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.geq ?x44 ?x41))))
(assert
 (let ((?x56 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x44 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!4)))
 (fp.leq ?x44 ?x56))))
(assert
 (let ((?x15 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.geq ?x58 ?x15))))
(assert
 (let ((?x18 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x58 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!1)))
 (fp.leq ?x58 ?x18))))
(assert
 (let (($x79 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_4_ackermann!3) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x79)))
(check-sat)
(exit)
