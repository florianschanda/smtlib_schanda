(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.120.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_6_ackermann!1 () (_ BitVec 32))
(declare-fun symbolic_0_float_7_ackermann!5 () (_ BitVec 32))
(declare-fun symbolic_0_float_5_ackermann!3 () (_ BitVec 32))
(declare-fun symbolic_0_float_3_ackermann!0 () (_ BitVec 32))
(declare-fun symbolic_0_float_1_ackermann!6 () (_ BitVec 32))
(declare-fun symbolic_0_float_ackermann!7 () (_ BitVec 32))
(declare-fun symbolic_0_float_2_ackermann!2 () (_ BitVec 32))
(declare-fun symbolic_0_float_4_ackermann!4 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.geq ?x15 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (fp.leq ?x15 ?x20))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x34 ?x35)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x27)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x15 (fp.add roundNearestTiesToEven ?x28 ?x29))))
 (or (or (fp.isNaN ?x31) (fp.isNaN ?x36)) (fp.gt ?x31 ?x36))))))))))))))
(assert
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x27)))
 (let ((?x15 ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1)))
 (let ((?x31 (fp.sub roundNearestTiesToEven ?x15 (fp.add roundNearestTiesToEven ?x28 ?x29))))
 (or (or (fp.isNaN ?x31) (fp.isNaN ?x35)) (fp.lt ?x31 ?x35))))))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.geq ?x24 ?x23))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (fp.leq ?x24 ?x47))))
(assert
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x34 ?x24)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x51 ?x23)))
 (or (fp.isNaN ?x49) (fp.gt ?x52 ?x49)))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x51 ?x23)))
 (not (fp.isNaN ?x52))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6))))
(assert
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (let ((?x52 (fp.sub roundNearestTiesToEven ?x51 ?x23)))
 (not (fp.lt ?x52 ?x24)))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.geq ?x27 ?x23))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (fp.leq ?x27 ?x47))))
(assert
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x63 ?x26)))
 (not (fp.isNaN ?x64))))))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x34 ?x27)))
 (not (fp.isNaN ?x67))))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x67 (fp.sub roundNearestTiesToEven ?x34 ?x27)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (let ((?x64 (fp.sub roundNearestTiesToEven ?x63 ?x26)))
 (not (fp.gt ?x64 ?x67)))))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.geq ?x29 ?x23))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (fp.leq ?x29 ?x47))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x34 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x74 (fp.sub roundNearestTiesToEven ?x34 ?x29)))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x27)))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x77 (fp.sub roundNearestTiesToEven ?x76 ?x28)))
 (or (fp.isNaN ?x74) (fp.gt ?x77 ?x74)))))))))))))
(assert
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x27)))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x77 (fp.sub roundNearestTiesToEven ?x76 ?x28)))
 (not (fp.isNaN ?x77))))))))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3))))
(assert
 (let ((?x29 ((_ to_fp 8 24) symbolic_0_float_5_ackermann!3)))
 (let ((?x27 ((_ to_fp 8 24) symbolic_0_float_3_ackermann!0)))
 (let ((?x24 ((_ to_fp 8 24) symbolic_0_float_1_ackermann!6)))
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x26 (fp.add roundNearestTiesToEven ?x23 ?x24)))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x27)))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (let ((?x77 (fp.sub roundNearestTiesToEven ?x76 ?x28)))
 (not (fp.lt ?x77 ?x29)))))))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.geq ?x35 ?x23))))
(assert
 (let ((?x47 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x35 ((_ to_fp 8 24) symbolic_0_float_7_ackermann!5)))
 (fp.leq ?x35 ?x47))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.geq ?x51 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x51 ((_ to_fp 8 24) symbolic_0_float_ackermann!7)))
 (fp.leq ?x51 ?x20))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.geq ?x63 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x63 ((_ to_fp 8 24) symbolic_0_float_2_ackermann!2)))
 (fp.leq ?x63 ?x20))))
(assert
 (let ((?x17 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.geq ?x76 ?x17))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x76 ((_ to_fp 8 24) symbolic_0_float_4_ackermann!4)))
 (fp.leq ?x76 ?x20))))
(assert
 (let (($x100 (and (fp.geq ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1) ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ((_ to_fp 8 24) symbolic_0_float_6_ackermann!1) ((_ to_fp 8 24) (_ bv1124139008 32))))))
(not $x100)))
(check-sat)
(exit)
