(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_cos_polynomial.x86_64/query.7.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double_ackermann!0 () (_ BitVec 64))
(assert
 (let ((?x8 ((_ to_fp 11 53) symbolic_0_double_ackermann!0)))
 (fp.geq ?x8 ((_ to_fp 11 53) (_ bv13826050856027422720 64)))))
(assert
 (let ((?x8 ((_ to_fp 11 53) symbolic_0_double_ackermann!0)))
 (fp.leq ?x8 ((_ to_fp 11 53) (_ bv4604930618986332160 64)))))
(assert
 (not (fp.lt ((_ to_fp 11 53) symbolic_0_double_ackermann!0) ((_ to_fp 11 53) (_ bv0 64)))))
(assert
 (not (fp.lt ((_ to_fp 11 53) symbolic_0_double_ackermann!0) ((_ to_fp 11 53) (_ bv4599075939470750515 64)))))
(assert
 (let ((?x8 ((_ to_fp 11 53) symbolic_0_double_ackermann!0)))
(let ((?x30 (fp.mul roundNearestTiesToEven ?x8 ?x8)))
(let ((?x48 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4477121870137962948 64)) (fp.mul roundNearestTiesToEven ?x30 ((_ to_fp 11 53) (_ bv13666448951086692564 64))))))
(let ((?x50 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv13732177093731308205 64)) (fp.mul roundNearestTiesToEven ?x30 ?x48))))
(let ((?x52 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4537941361668330896 64)) (fp.mul roundNearestTiesToEven ?x30 ?x50))))
(let ((?x54 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv13787419979223748983 64)) (fp.mul roundNearestTiesToEven ?x30 ?x52))))
(let ((?x56 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4586165620538955084 64)) (fp.mul roundNearestTiesToEven ?x30 ?x54))))
(let ((?x58 (fp.mul roundNearestTiesToEven ?x30 (fp.mul roundNearestTiesToEven ?x30 ?x56))))
(let ((?x28 (fp.mul roundNearestTiesToEven ?x8 ((_ to_fp 11 53) (_ bv4598175219545276416 64)))))
(let ((?x34 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x30 ((_ to_fp 11 53) (_ bv4602678819172646912 64))) ?x28)))
(let ((?x60 (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4607182418800017408 64)) ?x28) (fp.sub roundNearestTiesToEven ?x34 ?x58))))
(not (and (fp.geq ?x60 ((_ to_fp 11 53) (_ bv0 64))) (fp.leq ?x60 ((_ to_fp 11 53) (_ bv4607632778762754458 64)))))))))))))))))
(check-sat)
(exit)
