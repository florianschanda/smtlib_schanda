(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_exp_loop.c.x86_64/query.125.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_ackermann!0 () (_ BitVec 32))
(assert
 (fp.geq ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) symbolic_0_float_ackermann!0)) ((_ to_fp 11 53) (_ bv4457293557087583675 64))))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.leq ?x8 ((_ to_fp 8 24) (_ bv1343554297 32)))))
(assert
 (or (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_ackermann!0)) (fp.lt ((_ to_fp 8 24) symbolic_0_float_ackermann!0) ((_ to_fp 8 24) (_ bv1065353216 32)))))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.lt ?x8 ((_ to_fp 8 24) (_ bv1056964608 32)))))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1048576000 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1040187392 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1031798784 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1023410176 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1015021568 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1006632960 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv998244352 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv989855744 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv981467136 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv973078528 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv964689920 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv956301312 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv947912704 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv939524096 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv931135488 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv922746880 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv914358272 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv905969664 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv897581056 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv889192448 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv880803840 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv872415232 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv864026624 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv855638016 32)) ?x8)))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv847249408 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
(let ((?x102 (fp.mul roundNearestTiesToEven (fp.div roundNearestTiesToEven ?x8 ((_ to_fp 8 24) (_ bv855638016 32))) ((_ to_fp 8 24) (_ bv964689920 32)))))
(let (($x104 (not (fp.isNaN ?x102))))
(let (($x115 (and (and $x104 (not (fp.lt ?x102 ((_ to_fp 8 24) (_ bv0 32))))) (and $x104 (not (fp.gt ?x102 ((_ to_fp 8 24) (_ bv1232348160 32))))))))
(not $x115))))))
(check-sat)
(exit)
