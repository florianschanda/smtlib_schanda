(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_exp_loop.c.x86_64/query.088.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_ackermann!0 () (_ BitVec 32))
(assert
 (fp.geq ((_ to_fp 11 53) roundNearestTiesToEven ((_ to_fp 8 24) symbolic_0_float_ackermann!0)) ((_ to_fp 11 53) (_ bv4457293557087583675 64))))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.leq ?x8 ((_ to_fp 8 24) (_ bv1343554297 32)))))
(assert
 (not (fp.isNaN ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.lt ((_ to_fp 8 24) symbolic_0_float_ackermann!0) ((_ to_fp 8 24) (_ bv1065353216 32)))))
(assert
 (not (fp.lt ((_ to_fp 8 24) symbolic_0_float_ackermann!0) ((_ to_fp 8 24) (_ bv1073741824 32)))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1082130432 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1090519040 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1098907648 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1107296256 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1115684864 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1124073472 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1132462080 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1140850688 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1149239296 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1157627904 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1166016512 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1174405120 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1182793728 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (not (fp.gt ((_ to_fp 8 24) (_ bv1191182336 32)) ((_ to_fp 8 24) symbolic_0_float_ackermann!0))))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
 (fp.gt ((_ to_fp 8 24) (_ bv1199570944 32)) ?x8)))
(assert
 (let ((?x8 ((_ to_fp 8 24) symbolic_0_float_ackermann!0)))
(let ((?x87 (fp.mul roundNearestTiesToEven (fp.div roundNearestTiesToEven ?x8 ((_ to_fp 8 24) (_ bv1199570944 32))) ((_ to_fp 8 24) (_ bv1132462080 32)))))
(let (($x89 (not (fp.isNaN ?x87))))
(let (($x100 (and (and $x89 (not (fp.lt ?x87 ((_ to_fp 8 24) (_ bv0 32))))) (and $x89 (not (fp.gt ?x87 ((_ to_fp 8 24) (_ bv1232348160 32))))))))
(not $x100))))))
(check-sat)
(exit)
