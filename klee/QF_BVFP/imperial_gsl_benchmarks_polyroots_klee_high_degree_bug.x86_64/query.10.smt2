(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (bitvectors replaced with reads from arrays of bitvectors) is available at QF_ABVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_polyroots_klee_high_degree_bug.x86_64/query.10.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun a_ackermann!0 () (_ BitVec 64))
(assert
 (let ((?x8 ((_ to_fp 11 53) a_ackermann!0)))
 (fp.gt ?x8 ((_ to_fp 11 53) (_ bv13830554455654793221 64)))))
(assert
 (let ((?x8 ((_ to_fp 11 53) a_ackermann!0)))
 (fp.lt ?x8 ((_ to_fp 11 53) (_ bv13830554455654793207 64)))))
(assert
 (let ((?x22 ((_ to_fp 11 53) (_ bv0 64))))
(let ((?x20 ((_ to_fp 11 53) (_ bv9223372036854775808 64))))
(let ((?x18 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
(let ((?x25 (fp.div roundNearestTiesToEven (fp.sub roundNearestTiesToEven ?x20 ((_ to_fp 11 53) a_ackermann!0)) ?x18)))
(let ((?x27 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x25 ?x20) ?x20)))
(let ((?x31 (fp.sub roundNearestTiesToEven ?x20 (fp.mul roundNearestTiesToEven ?x18 ?x27))))
(let ((?x29 (fp.sub roundNearestTiesToEven ?x20 (fp.mul roundNearestTiesToEven ?x22 ?x27))))
(let ((?x33 (fp.add roundNearestTiesToEven ?x29 (fp.mul roundNearestTiesToEven ?x22 ?x31))))
(let ((?x34 (fp.add roundNearestTiesToEven ?x33 ?x22)))
(let ((?x16 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
(let ((?x36 (fp.sub roundNearestTiesToEven ?x20 (fp.mul roundNearestTiesToEven ?x16 ?x34))))
(let ((?x38 (fp.sub roundNearestTiesToEven ?x31 (fp.mul roundNearestTiesToEven ?x22 ?x34))))
(let ((?x40 (fp.add roundNearestTiesToEven ?x38 (fp.mul roundNearestTiesToEven ?x22 ?x36))))
(let ((?x41 (fp.add roundNearestTiesToEven ?x40 ?x20)))
(let ((?x49 (fp.sub roundNearestTiesToEven ?x20 (fp.mul roundNearestTiesToEven ?x18 ?x41))))
(let ((?x51 (fp.add roundNearestTiesToEven ?x22 (fp.mul roundNearestTiesToEven ?x18 ?x49))))
(let ((?x43 (fp.sub roundNearestTiesToEven ?x36 (fp.mul roundNearestTiesToEven ?x22 ?x41))))
(let ((?x45 (fp.add roundNearestTiesToEven ?x16 (fp.mul roundNearestTiesToEven ?x18 ?x43))))
(let ((?x54 (fp.add roundNearestTiesToEven (fp.abs (fp.sub roundNearestTiesToEven ?x16 ?x45)) (fp.abs (fp.sub roundNearestTiesToEven ?x22 ?x51)))))
(not (not (fp.eq (fp.add roundNearestTiesToEven ?x54 ?x22) ?x22)))))))))))))))))))))))
(check-sat)
(exit)
