(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_sorted_search_klee_bug_float.x86_64/query.13.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun data0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun elem1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x15))))
 (not (fp.isNaN ?x19)))))
(assert
 (let ((?x29 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x29))))
 (let ((?x15 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x15))))
 (not (fp.lt ?x19 ?x33)))))))
(assert
 (let ((?x15 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x15))))
 (let ((?x43 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (not (fp.lt ((_ to_fp 8 24) (concat (select data0 (_ bv19 32)) ?x43)) ?x19))))))
(assert
 (let ((?x70 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
 (let ((?x74 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x70))))
 (let ((?x57 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x61 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x57))))
 (not (fp.eq ?x61 ?x74)))))))
(assert
 (let ((?x70 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
 (let ((?x74 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x70))))
 (let ((?x29 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x29))))
 (not (fp.eq ?x33 ?x74)))))))
(assert
 (let ((?x57 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x61 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x57))))
 (not (fp.isNaN ?x61)))))
(assert
 (let ((?x85 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x57 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x61 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x57))))
 (not (fp.lt ?x61 ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x85))))))))
(assert
 (let ((?x29 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x29))))
 (not (fp.isNaN ?x33)))))
(assert
 (let ((?x57 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x61 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x57))))
 (let ((?x29 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x29))))
 (not (fp.lt ?x33 ?x61)))))))
(assert
 (let ((?x43 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (not (fp.isNaN ((_ to_fp 8 24) (concat (select data0 (_ bv19 32)) ?x43))))))
(assert
 (let ((?x85 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (not (fp.isNaN ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x85))))))
(assert
 (let ((?x70 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
(let ((?x74 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x70))))
(let ((?x15 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
(let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x15))))
(not (not (fp.eq ?x19 ?x74))))))))
(check-sat)
(exit)
