(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun g1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x18 (concat (select f0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select f0 (_ bv4 32))))
 (let ((?x23 (select f0 (_ bv5 32))))
 (let ((?x26 (select f0 (_ bv6 32))))
 (let ((?x29 (select f0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (not (fp.isNaN ?x31))))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x18 (concat (select f0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select f0 (_ bv4 32))))
 (let ((?x23 (select f0 (_ bv5 32))))
 (let ((?x26 (select f0 (_ bv6 32))))
 (let ((?x29 (select f0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (let (($x37 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv0 64)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x31) (ite $x37 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x18 (concat (select f0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select f0 (_ bv4 32))))
 (let ((?x23 (select f0 (_ bv5 32))))
 (let ((?x26 (select f0 (_ bv6 32))))
 (let ((?x29 (select f0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv0 64)))))))))))
(assert
 (let ((?x47 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x49 (concat (select g1 (_ bv3 32)) ?x47)))
 (let ((?x50 (select g1 (_ bv4 32))))
 (let ((?x52 (select g1 (_ bv5 32))))
 (let ((?x54 (select g1 (_ bv6 32))))
 (let ((?x56 (select g1 (_ bv7 32))))
 (let ((?x58 ((_ to_fp 11 53) (concat ?x56 (concat ?x54 (concat ?x52 (concat ?x50 ?x49)))))))
 (not (fp.isNaN ?x58))))))))))
(assert
 (let ((?x47 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x49 (concat (select g1 (_ bv3 32)) ?x47)))
 (let ((?x50 (select g1 (_ bv4 32))))
 (let ((?x52 (select g1 (_ bv5 32))))
 (let ((?x54 (select g1 (_ bv6 32))))
 (let ((?x56 (select g1 (_ bv7 32))))
 (let ((?x58 ((_ to_fp 11 53) (concat ?x56 (concat ?x54 (concat ?x52 (concat ?x50 ?x49)))))))
 (let (($x62 (fp.gt ?x58 ((_ to_fp 11 53) (_ bv0 64)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x58) (ite $x62 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))))))))))
(assert
 (let ((?x47 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x49 (concat (select g1 (_ bv3 32)) ?x47)))
 (let ((?x50 (select g1 (_ bv4 32))))
 (let ((?x52 (select g1 (_ bv5 32))))
 (let ((?x54 (select g1 (_ bv6 32))))
 (let ((?x56 (select g1 (_ bv7 32))))
 (let ((?x58 ((_ to_fp 11 53) (concat ?x56 (concat ?x54 (concat ?x52 (concat ?x50 ?x49)))))))
 (fp.gt ?x58 ((_ to_fp 11 53) (_ bv0 64)))))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x18 (concat (select f0 (_ bv3 32)) ?x15)))
 (let ((?x20 (select f0 (_ bv4 32))))
 (let ((?x23 (select f0 (_ bv5 32))))
 (let ((?x26 (select f0 (_ bv6 32))))
 (let ((?x29 (select f0 (_ bv7 32))))
 (let ((?x31 ((_ to_fp 11 53) (concat ?x29 (concat ?x26 (concat ?x23 (concat ?x20 ?x18)))))))
 (let ((?x47 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x49 (concat (select g1 (_ bv3 32)) ?x47)))
 (let ((?x50 (select g1 (_ bv4 32))))
 (let ((?x52 (select g1 (_ bv5 32))))
 (let ((?x54 (select g1 (_ bv6 32))))
 (let ((?x56 (select g1 (_ bv7 32))))
 (let ((?x58 ((_ to_fp 11 53) (concat ?x56 (concat ?x54 (concat ?x52 (concat ?x50 ?x49)))))))
 (fp.gt ?x58 ?x31))))))))))))))))
(assert
 (let ((?x54 (select g1 (_ bv6 32))))
 (let ((?x56 (select g1 (_ bv7 32))))
 (let ((?x75 (concat ?x56 (concat ?x54 (concat (select g1 (_ bv5 32)) (select g1 (_ bv4 32)))))))
 (let ((?x26 (select f0 (_ bv6 32))))
 (let ((?x29 (select f0 (_ bv7 32))))
 (let ((?x69 (concat ?x29 (concat ?x26 (concat (select f0 (_ bv5 32)) (select f0 (_ bv4 32)))))))
 (not (bvslt (bvxor ?x69 (bvand ?x69 (_ bv2147483648 32))) (bvand ?x75 (_ bv2147483647 32)))))))))))
(assert
 (let ((?x47 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
(let ((?x49 (concat (select g1 (_ bv3 32)) ?x47)))
(let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
(let ((?x18 (concat (select f0 (_ bv3 32)) ?x15)))
(not (bvult ?x18 ?x49)))))))
(check-sat)
(exit)
