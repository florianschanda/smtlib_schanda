(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_real_sorting_full_sym_doubles.x86_64/query.10.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun arr0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select arr0 (_ bv2 32)) (concat (select arr0 (_ bv1 32)) (select arr0 (_ bv0 32))))))
 (let ((?x24 (concat (select arr0 (_ bv5 32)) (concat (select arr0 (_ bv4 32)) (concat (select arr0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select arr0 (_ bv7 32)) (concat (select arr0 (_ bv6 32)) ?x24)))))
 (not (fp.isNaN ?x31))))))
(assert
 (let ((?x41 (concat (select arr0 (_ bv10 32)) (concat (select arr0 (_ bv9 32)) (select arr0 (_ bv8 32))))))
 (let ((?x50 (concat (select arr0 (_ bv13 32)) (concat (select arr0 (_ bv12 32)) (concat (select arr0 (_ bv11 32)) ?x41)))))
 (let ((?x57 ((_ to_fp 11 53) (concat (select arr0 (_ bv15 32)) (concat (select arr0 (_ bv14 32)) ?x50)))))
 (not (fp.isNaN ?x57))))))
(assert
 (let ((?x41 (concat (select arr0 (_ bv10 32)) (concat (select arr0 (_ bv9 32)) (select arr0 (_ bv8 32))))))
(let ((?x50 (concat (select arr0 (_ bv13 32)) (concat (select arr0 (_ bv12 32)) (concat (select arr0 (_ bv11 32)) ?x41)))))
(let ((?x57 ((_ to_fp 11 53) (concat (select arr0 (_ bv15 32)) (concat (select arr0 (_ bv14 32)) ?x50)))))
(let ((?x15 (concat (select arr0 (_ bv2 32)) (concat (select arr0 (_ bv1 32)) (select arr0 (_ bv0 32))))))
(let ((?x24 (concat (select arr0 (_ bv5 32)) (concat (select arr0 (_ bv4 32)) (concat (select arr0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select arr0 (_ bv7 32)) (concat (select arr0 (_ bv6 32)) ?x24)))))
(let (($x66 (bvult (bvmul (_ bv8 64) ((_ sign_extend 32) (ite (fp.lt ?x31 ?x57) (_ bv0 32) (_ bv1 32)))) (_ bv73 64))))
(not $x66)))))))))
(check-sat)
(exit)
