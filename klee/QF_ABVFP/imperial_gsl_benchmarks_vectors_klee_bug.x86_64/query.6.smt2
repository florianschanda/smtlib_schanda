(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_gsl_benchmarks_vectors_klee_bug.x86_64/query.6.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun temp0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!1 () (_ BitVec 64))
(assert
 (let ((?x15 (concat (select temp0 (_ bv2 32)) (concat (select temp0 (_ bv1 32)) (select temp0 (_ bv0 32))))))
 (let ((?x24 (concat (select temp0 (_ bv5 32)) (concat (select temp0 (_ bv4 32)) (concat (select temp0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select temp0 (_ bv7 32)) (concat (select temp0 (_ bv6 32)) ?x24)))))
 (let ((?x35 (fp.add roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv4612451630364040888 64)))))
 (not (fp.isNaN ?x35)))))))
(assert
 (let ((?x15 (concat (select temp0 (_ bv2 32)) (concat (select temp0 (_ bv1 32)) (select temp0 (_ bv0 32))))))
 (let ((?x24 (concat (select temp0 (_ bv5 32)) (concat (select temp0 (_ bv4 32)) (concat (select temp0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select temp0 (_ bv7 32)) (concat (select temp0 (_ bv6 32)) ?x24)))))
 (let ((?x35 (fp.add roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv4612451630364040888 64)))))
 (= ?x35 ((_ to_fp 11 53) fresh_to_ieee_bv_!0)))))))
(assert
 (let ((?x15 (concat (select temp0 (_ bv2 32)) (concat (select temp0 (_ bv1 32)) (select temp0 (_ bv0 32))))))
 (let ((?x24 (concat (select temp0 (_ bv5 32)) (concat (select temp0 (_ bv4 32)) (concat (select temp0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select temp0 (_ bv7 32)) (concat (select temp0 (_ bv6 32)) ?x24)))))
 (let ((?x54 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4612451630364040888 64)) (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x31))))
 (= ?x54 ((_ to_fp 11 53) fresh_to_ieee_bv_!1)))))))
(assert
 (let ((?x15 (concat (select temp0 (_ bv2 32)) (concat (select temp0 (_ bv1 32)) (select temp0 (_ bv0 32))))))
(let ((?x24 (concat (select temp0 (_ bv5 32)) (concat (select temp0 (_ bv4 32)) (concat (select temp0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select temp0 (_ bv7 32)) (concat (select temp0 (_ bv6 32)) ?x24)))))
(let ((?x54 (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4612451630364040888 64)) (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x31))))
(let ((?x59 (ite (fp.gt ((_ to_fp 11 53) (_ bv4617957280908501320 64)) ?x54) (_ bv4617957280908501320 64) fresh_to_ieee_bv_!1)))
(let ((?x46 (ite (fp.gt ((_ to_fp 11 53) (_ bv4617957280908501320 64)) (fp.add roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv4612451630364040888 64)))) (_ bv4617957280908501320 64) fresh_to_ieee_bv_!0)))
(let (($x64 (fp.eq ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4620209080722186568 64)) ((_ to_fp 11 53) ?x46)) (_ bv4620209080722186568 64) ?x46)) ((_ to_fp 11 53) (ite (fp.gt ((_ to_fp 11 53) (_ bv4620209080722186568 64)) ((_ to_fp 11 53) ?x59)) (_ bv4620209080722186568 64) ?x59)))))
(not $x64)))))))))
(check-sat)
(exit)
