(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_real_wxpro_tostr.x86_64/query.42.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun meters0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select meters0 (_ bv2 32)) (concat (select meters0 (_ bv1 32)) (select meters0 (_ bv0 32))))))
 (let ((?x24 (concat (select meters0 (_ bv5 32)) (concat (select meters0 (_ bv4 32)) (concat (select meters0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select meters0 (_ bv7 32)) (concat (select meters0 (_ bv6 32)) ?x24)))))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv0 64)))))))
(assert
 (let ((?x15 (concat (select meters0 (_ bv2 32)) (concat (select meters0 (_ bv1 32)) (select meters0 (_ bv0 32))))))
 (let ((?x24 (concat (select meters0 (_ bv5 32)) (concat (select meters0 (_ bv4 32)) (concat (select meters0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select meters0 (_ bv7 32)) (concat (select meters0 (_ bv6 32)) ?x24)))))
 (fp.leq ?x31 ((_ to_fp 11 53) (_ bv4652007308841189376 64)))))))
(assert
 (let ((?x15 (concat (select meters0 (_ bv2 32)) (concat (select meters0 (_ bv1 32)) (select meters0 (_ bv0 32))))))
 (let ((?x24 (concat (select meters0 (_ bv5 32)) (concat (select meters0 (_ bv4 32)) (concat (select meters0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select meters0 (_ bv7 32)) (concat (select meters0 (_ bv6 32)) ?x24)))))
 (let ((?x38 (fp.abs ?x31)))
 (let ((?x40 ((_ fp.to_sbv 32) roundTowardZero ?x38)))
 (let ((?x41 ((_ sign_extend 32) ?x40)))
 (let ((?x48 (bvor (bvudiv ((_ extract 31 0) ?x41) (_ bv10 32)) ((_ extract 31 0) (concat (_ bv0 32) ((_ extract 63 32) ?x41))))))
 (= (_ bv0 32) ?x48)))))))))
(assert
 (let ((?x15 (concat (select meters0 (_ bv2 32)) (concat (select meters0 (_ bv1 32)) (select meters0 (_ bv0 32))))))
 (let ((?x24 (concat (select meters0 (_ bv5 32)) (concat (select meters0 (_ bv4 32)) (concat (select meters0 (_ bv3 32)) ?x15)))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select meters0 (_ bv7 32)) (concat (select meters0 (_ bv6 32)) ?x24)))))
 (let ((?x38 (fp.abs ?x31)))
 (let ((?x40 ((_ fp.to_sbv 32) roundTowardZero ?x38)))
 (let ((?x41 ((_ sign_extend 32) ?x40)))
 (let ((?x42 ((_ extract 31 0) ?x41)))
 (not (= (_ bv48 8) ((_ extract 7 0) (bvadd (_ bv48 32) (bvurem ?x42 (_ bv10 32))))))))))))))
(assert
 (let ((?x15 (concat (select meters0 (_ bv2 32)) (concat (select meters0 (_ bv1 32)) (select meters0 (_ bv0 32))))))
(let ((?x24 (concat (select meters0 (_ bv5 32)) (concat (select meters0 (_ bv4 32)) (concat (select meters0 (_ bv3 32)) ?x15)))))
(let ((?x31 ((_ to_fp 11 53) (concat (select meters0 (_ bv7 32)) (concat (select meters0 (_ bv6 32)) ?x24)))))
(let ((?x38 (fp.abs ?x31)))
(let ((?x40 ((_ fp.to_sbv 32) roundTowardZero ?x38)))
(let ((?x59 (fp.sub roundNearestTiesToEven ?x38 ((_ to_fp 11 53) roundNearestTiesToEven ?x40))))
(let ((?x65 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x59 ((_ to_fp 11 53) (_ bv4636737291354636288 64))) ((_ to_fp 11 53) (_ bv4633641066610819072 64)))))
(let ((?x67 ((_ fp.to_sbv 32) roundTowardZero (fp.div roundNearestTiesToEven ?x65 ((_ to_fp 11 53) (_ bv4636737291354636288 64))))))
(let ((?x68 ((_ sign_extend 32) ?x67)))
(let ((?x74 (bvor (bvudiv ((_ extract 31 0) ?x68) (_ bv10 32)) ((_ extract 31 0) (concat (_ bv0 32) ((_ extract 63 32) ?x68))))))
(not (not (= (_ bv0 32) ?x74))))))))))))))
(check-sat)
(exit)
