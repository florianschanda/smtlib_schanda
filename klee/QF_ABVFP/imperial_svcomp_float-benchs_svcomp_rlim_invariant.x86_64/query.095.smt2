(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.095.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float_40 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_52 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_21 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_34 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_13 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float5 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x12 (concat (select symbolic_0_float_40 (_ bv1 32)) (select symbolic_0_float_40 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_40 (_ bv3 32)) (concat (select symbolic_0_float_40 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x12 (concat (select symbolic_0_float_40 (_ bv1 32)) (select symbolic_0_float_40 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_40 (_ bv3 32)) (concat (select symbolic_0_float_40 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ?x24))))))
(assert
 (let ((?x43 (concat (select symbolic_0_float_52 (_ bv1 32)) (select symbolic_0_float_52 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_52 (_ bv3 32)) (concat (select symbolic_0_float_52 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x49 (fp.sub roundNearestTiesToEven ?x39 ?x48)))
 (let ((?x29 (concat (select symbolic_0_float_21 (_ bv1 32)) (select symbolic_0_float_21 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_21 (_ bv3 32)) (concat (select symbolic_0_float_21 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x12 (concat (select symbolic_0_float_40 (_ bv1 32)) (select symbolic_0_float_40 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_40 (_ bv3 32)) (concat (select symbolic_0_float_40 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x19 ?x34)))
 (or (or (fp.isNaN ?x36) (fp.isNaN ?x49)) (fp.gt ?x36 ?x49)))))))))))))))
(assert
 (let ((?x43 (concat (select symbolic_0_float_52 (_ bv1 32)) (select symbolic_0_float_52 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_52 (_ bv3 32)) (concat (select symbolic_0_float_52 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (let ((?x29 (concat (select symbolic_0_float_21 (_ bv1 32)) (select symbolic_0_float_21 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_21 (_ bv3 32)) (concat (select symbolic_0_float_21 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x12 (concat (select symbolic_0_float_40 (_ bv1 32)) (select symbolic_0_float_40 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_40 (_ bv3 32)) (concat (select symbolic_0_float_40 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x36 (fp.sub roundNearestTiesToEven ?x19 ?x34)))
 (or (or (fp.isNaN ?x36) (fp.isNaN ?x48)) (fp.lt ?x36 ?x48)))))))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x29 (concat (select symbolic_0_float_21 (_ bv1 32)) (select symbolic_0_float_21 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_21 (_ bv3 32)) (concat (select symbolic_0_float_21 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (fp.geq ?x34 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x29 (concat (select symbolic_0_float_21 (_ bv1 32)) (select symbolic_0_float_21 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_21 (_ bv3 32)) (concat (select symbolic_0_float_21 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (fp.leq ?x34 ?x24))))))
(assert
 (let ((?x76 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x80 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x76))))
 (let ((?x81 ((_ to_fp 8 24) ?x80)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x82 (fp.sub roundNearestTiesToEven ?x39 ?x81)))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 (concat (select symbolic_0_float_21 (_ bv1 32)) (select symbolic_0_float_21 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_21 (_ bv3 32)) (concat (select symbolic_0_float_21 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x34 (fp.add roundNearestTiesToEven ?x60 ?x69))))
 (or (or (fp.isNaN ?x71) (fp.isNaN ?x82)) (fp.gt ?x71 ?x82))))))))))))))))
(assert
 (let ((?x76 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x80 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x76))))
 (let ((?x81 ((_ to_fp 8 24) ?x80)))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x29 (concat (select symbolic_0_float_21 (_ bv1 32)) (select symbolic_0_float_21 (_ bv0 32)))))
 (let ((?x33 (concat (select symbolic_0_float_21 (_ bv3 32)) (concat (select symbolic_0_float_21 (_ bv2 32)) ?x29))))
 (let ((?x34 ((_ to_fp 8 24) ?x33)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x34 (fp.add roundNearestTiesToEven ?x60 ?x69))))
 (or (or (fp.isNaN ?x71) (fp.isNaN ?x81)) (fp.lt ?x71 ?x81))))))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x43 (concat (select symbolic_0_float_52 (_ bv1 32)) (select symbolic_0_float_52 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_52 (_ bv3 32)) (concat (select symbolic_0_float_52 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (fp.geq ?x48 ?x60))))))
(assert
 (let ((?x93 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x43 (concat (select symbolic_0_float_52 (_ bv1 32)) (select symbolic_0_float_52 (_ bv0 32)))))
 (let ((?x47 (concat (select symbolic_0_float_52 (_ bv3 32)) (concat (select symbolic_0_float_52 (_ bv2 32)) ?x43))))
 (let ((?x48 ((_ to_fp 8 24) ?x47)))
 (fp.leq ?x48 ?x93))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (fp.geq ?x69 ?x60))))))
(assert
 (let ((?x93 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (fp.leq ?x69 ?x93))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x39 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x97 (fp.sub roundNearestTiesToEven ?x39 ?x69)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x106 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x102))))
 (let ((?x107 ((_ to_fp 8 24) ?x106)))
 (let ((?x108 (fp.sub roundNearestTiesToEven ?x107 ?x60)))
 (or (fp.isNaN ?x97) (fp.gt ?x108 ?x97)))))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x106 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x102))))
 (let ((?x107 ((_ to_fp 8 24) ?x106)))
 (let ((?x108 (fp.sub roundNearestTiesToEven ?x107 ?x60)))
 (not (fp.isNaN ?x108))))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (not (fp.isNaN ?x69))))))
(assert
 (let ((?x64 (concat (select symbolic_0_float_13 (_ bv1 32)) (select symbolic_0_float_13 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_13 (_ bv3 32)) (concat (select symbolic_0_float_13 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x106 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x102))))
 (let ((?x107 ((_ to_fp 8 24) ?x106)))
 (let ((?x108 (fp.sub roundNearestTiesToEven ?x107 ?x60)))
 (not (fp.lt ?x108 ?x69)))))))))))
(assert
 (let ((?x60 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x76 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x80 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x76))))
 (let ((?x81 ((_ to_fp 8 24) ?x80)))
 (fp.geq ?x81 ?x60))))))
(assert
 (let ((?x93 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x76 (concat (select symbolic_0_float_34 (_ bv1 32)) (select symbolic_0_float_34 (_ bv0 32)))))
 (let ((?x80 (concat (select symbolic_0_float_34 (_ bv3 32)) (concat (select symbolic_0_float_34 (_ bv2 32)) ?x76))))
 (let ((?x81 ((_ to_fp 8 24) ?x80)))
 (fp.leq ?x81 ?x93))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x106 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x102))))
 (let ((?x107 ((_ to_fp 8 24) ?x106)))
 (fp.geq ?x107 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x106 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x102))))
 (let ((?x107 ((_ to_fp 8 24) ?x106)))
 (fp.leq ?x107 ?x24))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_40 (_ bv1 32)) (select symbolic_0_float_40 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_float_40 (_ bv3 32)) (concat (select symbolic_0_float_40 (_ bv2 32)) ?x12))))
(let ((?x19 ((_ to_fp 8 24) ?x18)))
(not (and (fp.geq ?x19 ((_ to_fp 8 24) (_ bv3271622656 32))) (fp.leq ?x19 ((_ to_fp 8 24) (_ bv1124139008 32)))))))))
(check-sat)
(exit)
