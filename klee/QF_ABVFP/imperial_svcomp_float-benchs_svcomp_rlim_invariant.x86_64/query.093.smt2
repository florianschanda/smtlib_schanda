(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.093.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_20 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_32 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_11 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_43 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_54 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float5 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x12 (concat (select symbolic_0_float_20 (_ bv1 32)) (select symbolic_0_float_20 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_20 (_ bv3 32)) (concat (select symbolic_0_float_20 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x12 (concat (select symbolic_0_float_20 (_ bv1 32)) (select symbolic_0_float_20 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_20 (_ bv3 32)) (concat (select symbolic_0_float_20 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ?x24))))))
(assert
 (let ((?x45 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x49 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x45))))
 (let ((?x50 ((_ to_fp 8 24) ?x49)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x51 (fp.sub roundNearestTiesToEven ?x41 ?x50)))
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x12 (concat (select symbolic_0_float_20 (_ bv1 32)) (select symbolic_0_float_20 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_20 (_ bv3 32)) (concat (select symbolic_0_float_20 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x38 (fp.sub roundNearestTiesToEven ?x19 (fp.add roundNearestTiesToEven ?x26 ?x35))))
 (or (or (fp.isNaN ?x38) (fp.isNaN ?x51)) (fp.gt ?x38 ?x51))))))))))))))))
(assert
 (let ((?x45 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x49 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x45))))
 (let ((?x50 ((_ to_fp 8 24) ?x49)))
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x12 (concat (select symbolic_0_float_20 (_ bv1 32)) (select symbolic_0_float_20 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_20 (_ bv3 32)) (concat (select symbolic_0_float_20 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x38 (fp.sub roundNearestTiesToEven ?x19 (fp.add roundNearestTiesToEven ?x26 ?x35))))
 (or (or (fp.isNaN ?x38) (fp.isNaN ?x50)) (fp.lt ?x38 ?x50))))))))))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x63 (concat (select symbolic_0_float_43 (_ bv1 32)) (select symbolic_0_float_43 (_ bv0 32)))))
 (let ((?x67 (concat (select symbolic_0_float_43 (_ bv3 32)) (concat (select symbolic_0_float_43 (_ bv2 32)) ?x63))))
 (let ((?x68 ((_ to_fp 8 24) ?x67)))
 (fp.geq ?x68 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x63 (concat (select symbolic_0_float_43 (_ bv1 32)) (select symbolic_0_float_43 (_ bv0 32)))))
 (let ((?x67 (concat (select symbolic_0_float_43 (_ bv3 32)) (concat (select symbolic_0_float_43 (_ bv2 32)) ?x63))))
 (let ((?x68 ((_ to_fp 8 24) ?x67)))
 (fp.leq ?x68 ?x24))))))
(assert
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x74 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (fp.geq ?x79 ?x26))))))
(assert
 (let ((?x82 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x74 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (fp.leq ?x79 ?x82))))))
(assert
 (let ((?x74 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x78 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x74))))
 (let ((?x79 ((_ to_fp 8 24) ?x78)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x86 (fp.sub roundNearestTiesToEven ?x41 ?x79)))
 (let ((?x12 (concat (select symbolic_0_float_20 (_ bv1 32)) (select symbolic_0_float_20 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_20 (_ bv3 32)) (concat (select symbolic_0_float_20 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x63 (concat (select symbolic_0_float_43 (_ bv1 32)) (select symbolic_0_float_43 (_ bv0 32)))))
 (let ((?x67 (concat (select symbolic_0_float_43 (_ bv3 32)) (concat (select symbolic_0_float_43 (_ bv2 32)) ?x63))))
 (let ((?x68 ((_ to_fp 8 24) ?x67)))
 (let ((?x84 (fp.sub roundNearestTiesToEven ?x68 ?x19)))
 (or (or (fp.isNaN ?x84) (fp.isNaN ?x86)) (fp.gt ?x84 ?x86)))))))))))))))
(assert
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (fp.geq ?x35 ?x26))))))
(assert
 (let ((?x82 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (fp.leq ?x35 ?x82))))))
(assert
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (let ((?x41 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x93 (fp.sub roundNearestTiesToEven ?x41 ?x35)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x98 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x98))))
 (let ((?x103 ((_ to_fp 8 24) ?x102)))
 (let ((?x104 (fp.sub roundNearestTiesToEven ?x103 ?x26)))
 (or (fp.isNaN ?x93) (fp.gt ?x104 ?x93)))))))))))))
(assert
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x98 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x98))))
 (let ((?x103 ((_ to_fp 8 24) ?x102)))
 (let ((?x104 (fp.sub roundNearestTiesToEven ?x103 ?x26)))
 (not (fp.isNaN ?x104))))))))
(assert
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (not (fp.isNaN ?x35))))))
(assert
 (let ((?x30 (concat (select symbolic_0_float_11 (_ bv1 32)) (select symbolic_0_float_11 (_ bv0 32)))))
 (let ((?x34 (concat (select symbolic_0_float_11 (_ bv3 32)) (concat (select symbolic_0_float_11 (_ bv2 32)) ?x30))))
 (let ((?x35 ((_ to_fp 8 24) ?x34)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x98 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x98))))
 (let ((?x103 ((_ to_fp 8 24) ?x102)))
 (let ((?x104 (fp.sub roundNearestTiesToEven ?x103 ?x26)))
 (not (fp.lt ?x104 ?x35)))))))))))
(assert
 (let ((?x26 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x45 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x49 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x45))))
 (let ((?x50 ((_ to_fp 8 24) ?x49)))
 (fp.geq ?x50 ?x26))))))
(assert
 (let ((?x82 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x45 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x49 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x45))))
 (let ((?x50 ((_ to_fp 8 24) ?x49)))
 (fp.leq ?x50 ?x82))))))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x98 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x98))))
 (let ((?x103 ((_ to_fp 8 24) ?x102)))
 (fp.geq ?x103 ?x21))))))
(assert
 (let ((?x24 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x98 (concat (select symbolic_0_float5 (_ bv1 32)) (select symbolic_0_float5 (_ bv0 32)))))
 (let ((?x102 (concat (select symbolic_0_float5 (_ bv3 32)) (concat (select symbolic_0_float5 (_ bv2 32)) ?x98))))
 (let ((?x103 ((_ to_fp 8 24) ?x102)))
 (fp.leq ?x103 ?x24))))))
(assert
 (let ((?x74 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
(let ((?x78 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x74))))
(let ((?x79 ((_ to_fp 8 24) ?x78)))
(let ((?x12 (concat (select symbolic_0_float_20 (_ bv1 32)) (select symbolic_0_float_20 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_float_20 (_ bv3 32)) (concat (select symbolic_0_float_20 (_ bv2 32)) ?x12))))
(let ((?x19 ((_ to_fp 8 24) ?x18)))
(let ((?x63 (concat (select symbolic_0_float_43 (_ bv1 32)) (select symbolic_0_float_43 (_ bv0 32)))))
(let ((?x67 (concat (select symbolic_0_float_43 (_ bv3 32)) (concat (select symbolic_0_float_43 (_ bv2 32)) ?x63))))
(let ((?x68 ((_ to_fp 8 24) ?x67)))
(let ((?x84 (fp.sub roundNearestTiesToEven ?x68 ?x19)))
(let (($x123 (and (and (not (fp.isNaN ?x84)) (not (fp.isNaN ?x79))) (not (fp.lt ?x84 ?x79)))))
(not $x123)))))))))))))
(check-sat)
(exit)
