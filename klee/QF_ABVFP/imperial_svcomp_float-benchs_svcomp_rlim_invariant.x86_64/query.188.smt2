(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.188.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_10 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_32 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_23 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_54 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_45 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_66 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_77 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ?x23))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x19)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x38 ?x20)))
 (or (fp.isNaN ?x28) (fp.gt ?x39 ?x28)))))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x38 ?x20)))
 (not (fp.isNaN ?x39))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (not (fp.isNaN ?x19))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x38 ?x20)))
 (not (fp.lt ?x39 ?x19)))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (fp.geq ?x56 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (fp.leq ?x56 ?x23))))))
(assert
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x59 (fp.sub roundNearestTiesToEven ?x26 ?x56)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x64 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x69 ?x70)))
 (or (fp.isNaN ?x59) (fp.gt ?x71 ?x59)))))))))))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x64 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x69 ?x70)))
 (not (fp.isNaN ?x71))))))))))))
(assert
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (not (fp.isNaN ?x56))))))
(assert
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x64 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (let ((?x71 (fp.sub roundNearestTiesToEven ?x69 ?x70)))
 (not (fp.lt ?x71 ?x56)))))))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x83 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x87 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x83))))
 (let ((?x88 ((_ to_fp 8 24) ?x87)))
 (fp.geq ?x88 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x83 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x87 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x83))))
 (let ((?x88 ((_ to_fp 8 24) ?x87)))
 (fp.leq ?x88 ?x23))))))
(assert
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x100 (fp.add roundNearestTiesToEven ?x70 ?x56)))
 (let ((?x94 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x98 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x94))))
 (let ((?x99 ((_ to_fp 8 24) ?x98)))
 (let ((?x101 (fp.sub roundNearestTiesToEven ?x99 ?x100)))
 (not (fp.isNaN ?x101))))))))))))))))
(assert
 (let ((?x83 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x87 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x83))))
 (let ((?x88 ((_ to_fp 8 24) ?x87)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x104 (fp.sub roundNearestTiesToEven ?x26 ?x88)))
 (not (fp.isNaN ?x104))))))))
(assert
 (let ((?x83 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x87 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x83))))
 (let ((?x88 ((_ to_fp 8 24) ?x87)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x104 (fp.sub roundNearestTiesToEven ?x26 ?x88)))
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x100 (fp.add roundNearestTiesToEven ?x70 ?x56)))
 (let ((?x94 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x98 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x94))))
 (let ((?x99 ((_ to_fp 8 24) ?x98)))
 (let ((?x101 (fp.sub roundNearestTiesToEven ?x99 ?x100)))
 (not (fp.gt ?x101 ?x104)))))))))))))))))))))
(assert
 (let ((?x119 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x112 (concat (select symbolic_0_float_66 (_ bv1 32)) (select symbolic_0_float_66 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float_66 (_ bv3 32)) (concat (select symbolic_0_float_66 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (fp.geq ?x117 ?x119))))))
(assert
 (let ((?x122 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x112 (concat (select symbolic_0_float_66 (_ bv1 32)) (select symbolic_0_float_66 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float_66 (_ bv3 32)) (concat (select symbolic_0_float_66 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (fp.leq ?x117 ?x122))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x127 (concat (select symbolic_0_float_77 (_ bv1 32)) (select symbolic_0_float_77 (_ bv0 32)))))
 (let ((?x131 (concat (select symbolic_0_float_77 (_ bv3 32)) (concat (select symbolic_0_float_77 (_ bv2 32)) ?x127))))
 (let ((?x132 ((_ to_fp 8 24) ?x131)))
 (fp.geq ?x132 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x127 (concat (select symbolic_0_float_77 (_ bv1 32)) (select symbolic_0_float_77 (_ bv0 32)))))
 (let ((?x131 (concat (select symbolic_0_float_77 (_ bv3 32)) (concat (select symbolic_0_float_77 (_ bv2 32)) ?x127))))
 (let ((?x132 ((_ to_fp 8 24) ?x131)))
 (fp.leq ?x132 ?x23))))))
(assert
 (let ((?x127 (concat (select symbolic_0_float_77 (_ bv1 32)) (select symbolic_0_float_77 (_ bv0 32)))))
 (let ((?x131 (concat (select symbolic_0_float_77 (_ bv3 32)) (concat (select symbolic_0_float_77 (_ bv2 32)) ?x127))))
 (let ((?x132 ((_ to_fp 8 24) ?x131)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x138 (fp.sub roundNearestTiesToEven ?x26 ?x132)))
 (let ((?x83 (concat (select symbolic_0_float_54 (_ bv1 32)) (select symbolic_0_float_54 (_ bv0 32)))))
 (let ((?x87 (concat (select symbolic_0_float_54 (_ bv3 32)) (concat (select symbolic_0_float_54 (_ bv2 32)) ?x83))))
 (let ((?x88 ((_ to_fp 8 24) ?x87)))
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x70 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x100 (fp.add roundNearestTiesToEven ?x70 ?x56)))
 (let ((?x112 (concat (select symbolic_0_float_66 (_ bv1 32)) (select symbolic_0_float_66 (_ bv0 32)))))
 (let ((?x116 (concat (select symbolic_0_float_66 (_ bv3 32)) (concat (select symbolic_0_float_66 (_ bv2 32)) ?x112))))
 (let ((?x117 ((_ to_fp 8 24) ?x116)))
 (let ((?x136 (fp.sub roundNearestTiesToEven ?x117 (fp.sub roundNearestTiesToEven ?x100 ?x88))))
 (or (or (fp.isNaN ?x136) (fp.isNaN ?x138)) (fp.gt ?x136 ?x138))))))))))))))))))))))))
(assert
 (let ((?x119 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (fp.geq ?x38 ?x119))))))
(assert
 (let ((?x122 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (fp.leq ?x38 ?x122))))))
(assert
 (let ((?x119 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x64 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (fp.geq ?x69 ?x119))))))
(assert
 (let ((?x122 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x64 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x68 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x64))))
 (let ((?x69 ((_ to_fp 8 24) ?x68)))
 (fp.leq ?x69 ?x122))))))
(assert
 (let ((?x119 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x94 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x98 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x94))))
 (let ((?x99 ((_ to_fp 8 24) ?x98)))
 (fp.geq ?x99 ?x119))))))
(assert
 (let ((?x122 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x94 (concat (select symbolic_0_float_45 (_ bv1 32)) (select symbolic_0_float_45 (_ bv0 32)))))
 (let ((?x98 (concat (select symbolic_0_float_45 (_ bv3 32)) (concat (select symbolic_0_float_45 (_ bv2 32)) ?x94))))
 (let ((?x99 ((_ to_fp 8 24) ?x98)))
 (fp.leq ?x99 ?x122))))))
(assert
 (not false))
(check-sat)
(exit)
