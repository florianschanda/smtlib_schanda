(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_rlim_invariant.x86_64/query.042.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun symbolic_0_float_10 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_32 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_23 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_44 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_float_55 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ?x23))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x28 (fp.sub roundNearestTiesToEven ?x26 ?x19)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x38 ?x20)))
 (or (fp.isNaN ?x28) (fp.gt ?x39 ?x28)))))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x38 ?x20)))
 (not (fp.isNaN ?x39))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (not (fp.isNaN ?x19))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x38 ?x20)))
 (not (fp.lt ?x39 ?x19)))))))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (fp.geq ?x56 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (fp.leq ?x56 ?x23))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x68 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x62 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x66 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x62))))
 (let ((?x67 ((_ to_fp 8 24) ?x66)))
 (let ((?x69 (fp.sub roundNearestTiesToEven ?x67 ?x68)))
 (not (fp.isNaN ?x69))))))))))))
(assert
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x72 (fp.sub roundNearestTiesToEven ?x26 ?x56)))
 (not (fp.isNaN ?x72))))))))
(assert
 (let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
 (let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
 (let ((?x56 ((_ to_fp 8 24) ?x55)))
 (let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
 (let ((?x72 (fp.sub roundNearestTiesToEven ?x26 ?x56)))
 (let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x68 (fp.add roundNearestTiesToEven ?x20 ?x19)))
 (let ((?x62 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x66 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x62))))
 (let ((?x67 ((_ to_fp 8 24) ?x66)))
 (let ((?x69 (fp.sub roundNearestTiesToEven ?x67 ?x68)))
 (not (fp.gt ?x69 ?x72)))))))))))))))))
(assert
 (let ((?x87 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x80 (concat (select symbolic_0_float_44 (_ bv1 32)) (select symbolic_0_float_44 (_ bv0 32)))))
 (let ((?x84 (concat (select symbolic_0_float_44 (_ bv3 32)) (concat (select symbolic_0_float_44 (_ bv2 32)) ?x80))))
 (let ((?x85 ((_ to_fp 8 24) ?x84)))
 (fp.geq ?x85 ?x87))))))
(assert
 (let ((?x90 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x80 (concat (select symbolic_0_float_44 (_ bv1 32)) (select symbolic_0_float_44 (_ bv0 32)))))
 (let ((?x84 (concat (select symbolic_0_float_44 (_ bv3 32)) (concat (select symbolic_0_float_44 (_ bv2 32)) ?x80))))
 (let ((?x85 ((_ to_fp 8 24) ?x84)))
 (fp.leq ?x85 ?x90))))))
(assert
 (let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x95 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
 (let ((?x99 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x95))))
 (let ((?x100 ((_ to_fp 8 24) ?x99)))
 (fp.geq ?x100 ?x20))))))
(assert
 (let ((?x23 ((_ to_fp 8 24) (_ bv1098907648 32))))
 (let ((?x95 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
 (let ((?x99 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x95))))
 (let ((?x100 ((_ to_fp 8 24) ?x99)))
 (fp.leq ?x100 ?x23))))))
(assert
 (let ((?x87 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (fp.geq ?x38 ?x87))))))
(assert
 (let ((?x90 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x33 (concat (select symbolic_0_float1 (_ bv1 32)) (select symbolic_0_float1 (_ bv0 32)))))
 (let ((?x37 (concat (select symbolic_0_float1 (_ bv3 32)) (concat (select symbolic_0_float1 (_ bv2 32)) ?x33))))
 (let ((?x38 ((_ to_fp 8 24) ?x37)))
 (fp.leq ?x38 ?x90))))))
(assert
 (let ((?x87 ((_ to_fp 8 24) (_ bv3271557120 32))))
 (let ((?x62 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x66 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x62))))
 (let ((?x67 ((_ to_fp 8 24) ?x66)))
 (fp.geq ?x67 ?x87))))))
(assert
 (let ((?x90 ((_ to_fp 8 24) (_ bv1124073472 32))))
 (let ((?x62 (concat (select symbolic_0_float_23 (_ bv1 32)) (select symbolic_0_float_23 (_ bv0 32)))))
 (let ((?x66 (concat (select symbolic_0_float_23 (_ bv3 32)) (concat (select symbolic_0_float_23 (_ bv2 32)) ?x62))))
 (let ((?x67 ((_ to_fp 8 24) ?x66)))
 (fp.leq ?x67 ?x90))))))
(assert
 (let ((?x95 (concat (select symbolic_0_float_55 (_ bv1 32)) (select symbolic_0_float_55 (_ bv0 32)))))
(let ((?x99 (concat (select symbolic_0_float_55 (_ bv3 32)) (concat (select symbolic_0_float_55 (_ bv2 32)) ?x95))))
(let ((?x100 ((_ to_fp 8 24) ?x99)))
(let ((?x26 ((_ to_fp 8 24) (_ bv2147483648 32))))
(let ((?x111 (fp.sub roundNearestTiesToEven ?x26 ?x100)))
(let ((?x51 (concat (select symbolic_0_float_32 (_ bv1 32)) (select symbolic_0_float_32 (_ bv0 32)))))
(let ((?x55 (concat (select symbolic_0_float_32 (_ bv3 32)) (concat (select symbolic_0_float_32 (_ bv2 32)) ?x51))))
(let ((?x56 ((_ to_fp 8 24) ?x55)))
(let ((?x12 (concat (select symbolic_0_float_10 (_ bv1 32)) (select symbolic_0_float_10 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_float_10 (_ bv3 32)) (concat (select symbolic_0_float_10 (_ bv2 32)) ?x12))))
(let ((?x19 ((_ to_fp 8 24) ?x18)))
(let ((?x20 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x68 (fp.add roundNearestTiesToEven ?x20 ?x19)))
(let ((?x80 (concat (select symbolic_0_float_44 (_ bv1 32)) (select symbolic_0_float_44 (_ bv0 32)))))
(let ((?x84 (concat (select symbolic_0_float_44 (_ bv3 32)) (concat (select symbolic_0_float_44 (_ bv2 32)) ?x80))))
(let ((?x85 ((_ to_fp 8 24) ?x84)))
(let ((?x108 (fp.sub roundNearestTiesToEven ?x85 (fp.sub roundNearestTiesToEven ?x68 ?x56))))
(let (($x117 (and (and (not (fp.isNaN ?x108)) (not (fp.isNaN ?x111))) (not (fp.gt ?x108 ?x111)))))
(not $x117))))))))))))))))))))
(check-sat)
(exit)
