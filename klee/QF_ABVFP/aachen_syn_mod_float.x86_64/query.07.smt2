(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_syn_mod_float.x86_64/query.07.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun g1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!1 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!2 () (_ BitVec 64))
(declare-fun fresh_to_ieee_bv_!3 () (_ BitVec 64))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select f0 (_ bv3 32)) ?x15))))
 (not (fp.isNaN ?x19)))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select f0 (_ bv3 32)) ?x15))))
 (let (($x24 (fp.gt ?x19 ((_ to_fp 8 24) (_ bv0 32)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x19) (ite $x24 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select f0 (_ bv3 32)) ?x15))))
 (fp.gt ?x19 ((_ to_fp 8 24) (_ bv0 32))))))
(assert
 (let ((?x34 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x37 ((_ to_fp 8 24) (concat (select g1 (_ bv3 32)) ?x34))))
 (not (fp.isNaN ?x37)))))
(assert
 (let ((?x34 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x37 ((_ to_fp 8 24) (concat (select g1 (_ bv3 32)) ?x34))))
 (let (($x41 (fp.gt ?x37 ((_ to_fp 8 24) (_ bv0 32)))))
 (= (_ bv0 32) (ite (fp.isInfinite ?x37) (ite $x41 (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))))
(assert
 (let ((?x34 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x37 ((_ to_fp 8 24) (concat (select g1 (_ bv3 32)) ?x34))))
 (fp.gt ?x37 ((_ to_fp 8 24) (_ bv0 32))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select f0 (_ bv3 32)) ?x15))))
 (let ((?x34 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x37 ((_ to_fp 8 24) (concat (select g1 (_ bv3 32)) ?x34))))
 (fp.gt ?x37 ?x19))))))
(assert
 (let ((?x51 ((_ extract 63 32) fresh_to_ieee_bv_!0)))
 (let (($x62 (bvslt (bvxor ?x51 (bvand ?x51 (_ bv2147483648 32))) (bvand ((_ extract 63 32) fresh_to_ieee_bv_!1) (_ bv2147483647 32)))))
 (not $x62))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select f0 (_ bv3 32)) ?x15))))
 (let ((?x47 ((_ to_fp 11 53) roundNearestTiesToEven ?x19)))
 (= ?x47 ((_ to_fp 11 53) fresh_to_ieee_bv_!0))))))
(assert
 (let ((?x34 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x37 ((_ to_fp 8 24) (concat (select g1 (_ bv3 32)) ?x34))))
 (let ((?x55 ((_ to_fp 11 53) roundNearestTiesToEven ?x37)))
 (= ?x55 ((_ to_fp 11 53) fresh_to_ieee_bv_!1))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select f0 (_ bv3 32)) ?x15))))
 (let ((?x47 ((_ to_fp 11 53) roundNearestTiesToEven ?x19)))
 (= ?x47 ((_ to_fp 11 53) fresh_to_ieee_bv_!2))))))
(assert
 (let ((?x34 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x37 ((_ to_fp 8 24) (concat (select g1 (_ bv3 32)) ?x34))))
 (let ((?x55 ((_ to_fp 11 53) roundNearestTiesToEven ?x37)))
 (= ?x55 ((_ to_fp 11 53) fresh_to_ieee_bv_!3))))))
(assert
 (not (bvult ((_ extract 31 0) fresh_to_ieee_bv_!2) ((_ extract 31 0) fresh_to_ieee_bv_!3))))
(check-sat)
(exit)
