(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_sum_is_commutative_klee_float_bug.x86_64/query.09.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun data0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (fp.gt ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x15)) ((_ to_fp 8 24) (_ bv0 32)))))
(assert
 (let ((?x73 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x60 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x47 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x29 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x29))))
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x35 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x15)) ((_ to_fp 8 24) (_ bv0 32)))))
 (let ((?x52 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x35 ?x33) ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x47)))))
 (let ((?x65 (fp.add roundNearestTiesToEven ?x52 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x60)))))
 (let ((?x78 (fp.add roundNearestTiesToEven ?x65 ((_ to_fp 8 24) (concat (select data0 (_ bv19 32)) ?x73)))))
 (let ((?x81 (bvand (ite (fp.isNaN (fp.add roundNearestTiesToEven ?x33 ?x35)) (_ bv1 32) (_ bv0 32)) (ite (fp.isNaN ?x78) (_ bv1 32) (_ bv0 32)))))
 (= (_ bv0 32) ?x81)))))))))))))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x35 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x15)) ((_ to_fp 8 24) (_ bv0 32)))))
 (let ((?x29 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x29))))
 (let ((?x36 (fp.add roundNearestTiesToEven ?x33 ?x35)))
 (let ((?x73 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (let ((?x60 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x47 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x52 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven ?x35 ?x33) ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x47)))))
 (let ((?x65 (fp.add roundNearestTiesToEven ?x52 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x60)))))
 (let ((?x78 (fp.add roundNearestTiesToEven ?x65 ((_ to_fp 8 24) (concat (select data0 (_ bv19 32)) ?x73)))))
 (not (fp.eq ?x78 ?x36))))))))))))))
(assert
 (let ((?x29 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x29))))
 (fp.lt ((_ to_fp 8 24) (_ bv1065353216 32)) ?x33))))
(assert
 (let ((?x47 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (not (fp.lt ((_ to_fp 8 24) (_ bv1073741824 32)) ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x47))))))
(assert
 (not false))
(check-sat)
(exit)
