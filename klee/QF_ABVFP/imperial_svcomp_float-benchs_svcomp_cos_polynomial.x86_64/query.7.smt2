(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_cos_polynomial.x86_64/query.7.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun symbolic_0_double0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.geq ?x31 ((_ to_fp 11 53) (_ bv13826050856027422720 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.leq ?x31 ((_ to_fp 11 53) (_ bv4604930618986332160 64)))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.lt ?x31 ((_ to_fp 11 53) (_ bv0 64))))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.lt ?x31 ((_ to_fp 11 53) (_ bv4599075939470750515 64))))))))))
(assert
 (let ((?x12 (concat (select symbolic_0_double0 (_ bv1 32)) (select symbolic_0_double0 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_double0 (_ bv3 32)) (concat (select symbolic_0_double0 (_ bv2 32)) ?x12))))
(let ((?x24 (concat (select symbolic_0_double0 (_ bv5 32)) (concat (select symbolic_0_double0 (_ bv4 32)) ?x18))))
(let ((?x30 (concat (select symbolic_0_double0 (_ bv7 32)) (concat (select symbolic_0_double0 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(let ((?x53 (fp.mul roundNearestTiesToEven ?x31 ?x31)))
(let ((?x71 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4477121870137962948 64)) (fp.mul roundNearestTiesToEven ?x53 ((_ to_fp 11 53) (_ bv13666448951086692564 64))))))
(let ((?x73 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv13732177093731308205 64)) (fp.mul roundNearestTiesToEven ?x53 ?x71))))
(let ((?x75 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4537941361668330896 64)) (fp.mul roundNearestTiesToEven ?x53 ?x73))))
(let ((?x77 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv13787419979223748983 64)) (fp.mul roundNearestTiesToEven ?x53 ?x75))))
(let ((?x79 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4586165620538955084 64)) (fp.mul roundNearestTiesToEven ?x53 ?x77))))
(let ((?x81 (fp.mul roundNearestTiesToEven ?x53 (fp.mul roundNearestTiesToEven ?x53 ?x79))))
(let ((?x51 (fp.mul roundNearestTiesToEven ?x31 ((_ to_fp 11 53) (_ bv4598175219545276416 64)))))
(let ((?x57 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x53 ((_ to_fp 11 53) (_ bv4602678819172646912 64))) ?x51)))
(let ((?x83 (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv4607182418800017408 64)) ?x51) (fp.sub roundNearestTiesToEven ?x57 ?x81))))
(not (and (fp.geq ?x83 ((_ to_fp 11 53) (_ bv0 64))) (fp.leq ?x83 ((_ to_fp 11 53) (_ bv4607632778762754458 64)))))))))))))))))))))
(check-sat)
(exit)
