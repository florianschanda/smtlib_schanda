(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_fadd_to_exact_zero_klee_double.x86_64/query.15.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun g1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x39 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x45 (concat (select g1 (_ bv5 32)) (concat (select g1 (_ bv4 32)) (concat (select g1 (_ bv3 32)) ?x39)))))
 (let ((?x49 (concat (select g1 (_ bv7 32)) (concat (select g1 (_ bv6 32)) ?x45))))
 (let ((?x50 ((_ to_fp 11 53) ?x49)))
 (not (fp.isNaN ?x50)))))))
(assert
 (let ((?x39 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x45 (concat (select g1 (_ bv5 32)) (concat (select g1 (_ bv4 32)) (concat (select g1 (_ bv3 32)) ?x39)))))
 (let ((?x49 (concat (select g1 (_ bv7 32)) (concat (select g1 (_ bv6 32)) ?x45))))
 (let ((?x50 ((_ to_fp 11 53) ?x49)))
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.eq (fp.abs ?x31) (fp.abs ?x50)))))))))))
(assert
 (let ((?x39 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
 (let ((?x45 (concat (select g1 (_ bv5 32)) (concat (select g1 (_ bv4 32)) (concat (select g1 (_ bv3 32)) ?x39)))))
 (let ((?x49 (concat (select g1 (_ bv7 32)) (concat (select g1 (_ bv6 32)) ?x45))))
 (let ((?x60 (concat (_ bv0 63) ((_ extract 63 63) ?x49))))
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24))))
 (let ((?x63 (concat (_ bv0 63) ((_ extract 63 63) ?x30))))
 (let (($x68 (= (_ bv0 64) (bvor (bvand (bvxor (_ bv1 64) ?x60) ?x63) (bvand (bvxor (_ bv1 64) ?x63) ?x60)))))
 (not $x68)))))))))))
(assert
 (let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
 (let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (let ((?x75 (ite (fp.isInfinite ?x31) (ite (fp.gt ?x31 ((_ to_fp 11 53) (_ bv0 64))) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32))))
 (not (= (_ bv0 32) ?x75))))))))
(assert
 (let ((?x39 (concat (select g1 (_ bv2 32)) (concat (select g1 (_ bv1 32)) (select g1 (_ bv0 32))))))
(let ((?x45 (concat (select g1 (_ bv5 32)) (concat (select g1 (_ bv4 32)) (concat (select g1 (_ bv3 32)) ?x39)))))
(let ((?x49 (concat (select g1 (_ bv7 32)) (concat (select g1 (_ bv6 32)) ?x45))))
(let ((?x50 ((_ to_fp 11 53) ?x49)))
(let ((?x15 (concat (select f0 (_ bv2 32)) (concat (select f0 (_ bv1 32)) (select f0 (_ bv0 32))))))
(let ((?x24 (concat (select f0 (_ bv5 32)) (concat (select f0 (_ bv4 32)) (concat (select f0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select f0 (_ bv7 32)) (concat (select f0 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(not (fp.isNaN (fp.add roundTowardPositive ?x31 ?x50))))))))))))
(check-sat)
(exit)
