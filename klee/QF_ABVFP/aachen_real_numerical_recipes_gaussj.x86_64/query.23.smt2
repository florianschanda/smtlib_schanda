(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_real_numerical_recipes_gaussj.x86_64/query.23.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun sym_f0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x21 ((_ to_fp 8 24) (_ bv1065353216 32))))
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (fp.gt ?x19 ?x21)))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (fp.lt ?x19 ((_ to_fp 8 24) (_ bv1120403456 32))))))
(assert
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (let ((?x26 (fp.abs ?x19)))
 (not (fp.isNaN ?x26))))))
(assert
 (let ((?x30 ((_ to_fp 8 24) (_ bv1082130432 32))))
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (let ((?x26 (fp.abs ?x19)))
 (not (fp.lt ?x26 ?x30)))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
 (let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
 (let ((?x21 ((_ to_fp 8 24) (_ bv1065353216 32))))
 (let ((?x34 (fp.div roundNearestTiesToEven ?x21 ?x19)))
 (let ((?x45 (fp.mul roundNearestTiesToEven ?x34 ?x44)))
 (let ((?x30 ((_ to_fp 8 24) (_ bv1082130432 32))))
 (let ((?x47 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1073741824 32)) (fp.mul roundNearestTiesToEven ?x30 ?x45))))
 (let ((?x48 (fp.abs ?x47)))
 (let ((?x37 (fp.mul roundNearestTiesToEven ?x34 ((_ to_fp 8 24) (_ bv1079194419 32)))))
 (let ((?x39 (fp.sub roundNearestTiesToEven ?x21 (fp.mul roundNearestTiesToEven ?x30 ?x37))))
 (let ((?x40 (fp.abs ?x39)))
 (or (or (fp.isNaN ?x40) (fp.isNaN ?x48)) (fp.lt ?x40 ?x48)))))))))))))))
(assert
 (let ((?x44 ((_ to_fp 8 24) (_ bv0 32))))
(let ((?x15 (concat (select sym_f0 (_ bv2 32)) (concat (select sym_f0 (_ bv1 32)) (select sym_f0 (_ bv0 32))))))
(let ((?x19 ((_ to_fp 8 24) (concat (select sym_f0 (_ bv3 32)) ?x15))))
(let ((?x21 ((_ to_fp 8 24) (_ bv1065353216 32))))
(let ((?x34 (fp.div roundNearestTiesToEven ?x21 ?x19)))
(let ((?x37 (fp.mul roundNearestTiesToEven ?x34 ((_ to_fp 8 24) (_ bv1079194419 32)))))
(let ((?x30 ((_ to_fp 8 24) (_ bv1082130432 32))))
(let ((?x39 (fp.sub roundNearestTiesToEven ?x21 (fp.mul roundNearestTiesToEven ?x30 ?x37))))
(let ((?x45 (fp.mul roundNearestTiesToEven ?x34 ?x44)))
(let ((?x47 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1073741824 32)) (fp.mul roundNearestTiesToEven ?x30 ?x45))))
(let ((?x60 (fp.mul roundNearestTiesToEven (fp.div roundNearestTiesToEven ?x21 ?x47) ?x39)))
(let ((?x58 (fp.sub roundNearestTiesToEven ?x21 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3212836864 32)) ?x45))))
(let ((?x56 (fp.sub roundNearestTiesToEven ?x44 (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) (_ bv3212836864 32)) ?x37))))
(let ((?x62 (fp.sub roundNearestTiesToEven ?x56 (fp.mul roundNearestTiesToEven ?x58 ?x60))))
(not (not (fp.eq ?x62 ?x44))))))))))))))))))
(check-sat)
(exit)
