(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_filter1.x86_64/query.14.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_double_10 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_21 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbolic_0_double_32 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x12 (concat (select symbolic_0_double_10 (_ bv1 32)) (select symbolic_0_double_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double_10 (_ bv3 32)) (concat (select symbolic_0_double_10 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double_10 (_ bv5 32)) (concat (select symbolic_0_double_10 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double_10 (_ bv7 32)) (concat (select symbolic_0_double_10 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.geq ?x31 ?x33))))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x12 (concat (select symbolic_0_double_10 (_ bv1 32)) (select symbolic_0_double_10 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_double_10 (_ bv3 32)) (concat (select symbolic_0_double_10 (_ bv2 32)) ?x12))))
 (let ((?x24 (concat (select symbolic_0_double_10 (_ bv5 32)) (concat (select symbolic_0_double_10 (_ bv4 32)) ?x18))))
 (let ((?x30 (concat (select symbolic_0_double_10 (_ bv7 32)) (concat (select symbolic_0_double_10 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.leq ?x31 ?x36))))))))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x41 (concat (select symbolic_0_double_21 (_ bv1 32)) (select symbolic_0_double_21 (_ bv0 32)))))
 (let ((?x45 (concat (select symbolic_0_double_21 (_ bv3 32)) (concat (select symbolic_0_double_21 (_ bv2 32)) ?x41))))
 (let ((?x49 (concat (select symbolic_0_double_21 (_ bv5 32)) (concat (select symbolic_0_double_21 (_ bv4 32)) ?x45))))
 (let ((?x53 (concat (select symbolic_0_double_21 (_ bv7 32)) (concat (select symbolic_0_double_21 (_ bv6 32)) ?x49))))
 (let ((?x54 ((_ to_fp 11 53) ?x53)))
 (fp.geq ?x54 ?x33))))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x41 (concat (select symbolic_0_double_21 (_ bv1 32)) (select symbolic_0_double_21 (_ bv0 32)))))
 (let ((?x45 (concat (select symbolic_0_double_21 (_ bv3 32)) (concat (select symbolic_0_double_21 (_ bv2 32)) ?x41))))
 (let ((?x49 (concat (select symbolic_0_double_21 (_ bv5 32)) (concat (select symbolic_0_double_21 (_ bv4 32)) ?x45))))
 (let ((?x53 (concat (select symbolic_0_double_21 (_ bv7 32)) (concat (select symbolic_0_double_21 (_ bv6 32)) ?x49))))
 (let ((?x54 ((_ to_fp 11 53) ?x53)))
 (fp.leq ?x54 ?x36))))))))
(assert
 (let ((?x33 ((_ to_fp 11 53) (_ bv13830554455654793216 64))))
 (let ((?x60 (concat (select symbolic_0_double_32 (_ bv1 32)) (select symbolic_0_double_32 (_ bv0 32)))))
 (let ((?x64 (concat (select symbolic_0_double_32 (_ bv3 32)) (concat (select symbolic_0_double_32 (_ bv2 32)) ?x60))))
 (let ((?x68 (concat (select symbolic_0_double_32 (_ bv5 32)) (concat (select symbolic_0_double_32 (_ bv4 32)) ?x64))))
 (let ((?x72 (concat (select symbolic_0_double_32 (_ bv7 32)) (concat (select symbolic_0_double_32 (_ bv6 32)) ?x68))))
 (let ((?x73 ((_ to_fp 11 53) ?x72)))
 (fp.geq ?x73 ?x33))))))))
(assert
 (let ((?x36 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))
 (let ((?x60 (concat (select symbolic_0_double_32 (_ bv1 32)) (select symbolic_0_double_32 (_ bv0 32)))))
 (let ((?x64 (concat (select symbolic_0_double_32 (_ bv3 32)) (concat (select symbolic_0_double_32 (_ bv2 32)) ?x60))))
 (let ((?x68 (concat (select symbolic_0_double_32 (_ bv5 32)) (concat (select symbolic_0_double_32 (_ bv4 32)) ?x64))))
 (let ((?x72 (concat (select symbolic_0_double_32 (_ bv7 32)) (concat (select symbolic_0_double_32 (_ bv6 32)) ?x68))))
 (let ((?x73 ((_ to_fp 11 53) ?x72)))
 (fp.leq ?x73 ?x36))))))))
(assert
 (let ((?x41 (concat (select symbolic_0_double_21 (_ bv1 32)) (select symbolic_0_double_21 (_ bv0 32)))))
(let ((?x45 (concat (select symbolic_0_double_21 (_ bv3 32)) (concat (select symbolic_0_double_21 (_ bv2 32)) ?x41))))
(let ((?x49 (concat (select symbolic_0_double_21 (_ bv5 32)) (concat (select symbolic_0_double_21 (_ bv4 32)) ?x45))))
(let ((?x53 (concat (select symbolic_0_double_21 (_ bv7 32)) (concat (select symbolic_0_double_21 (_ bv6 32)) ?x49))))
(let ((?x54 ((_ to_fp 11 53) ?x53)))
(let ((?x60 (concat (select symbolic_0_double_32 (_ bv1 32)) (select symbolic_0_double_32 (_ bv0 32)))))
(let ((?x64 (concat (select symbolic_0_double_32 (_ bv3 32)) (concat (select symbolic_0_double_32 (_ bv2 32)) ?x60))))
(let ((?x68 (concat (select symbolic_0_double_32 (_ bv5 32)) (concat (select symbolic_0_double_32 (_ bv4 32)) ?x64))))
(let ((?x72 (concat (select symbolic_0_double_32 (_ bv7 32)) (concat (select symbolic_0_double_32 (_ bv6 32)) ?x68))))
(let ((?x73 ((_ to_fp 11 53) ?x72)))
(let ((?x12 (concat (select symbolic_0_double_10 (_ bv1 32)) (select symbolic_0_double_10 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_double_10 (_ bv3 32)) (concat (select symbolic_0_double_10 (_ bv2 32)) ?x12))))
(let ((?x24 (concat (select symbolic_0_double_10 (_ bv5 32)) (concat (select symbolic_0_double_10 (_ bv4 32)) ?x18))))
(let ((?x30 (concat (select symbolic_0_double_10 (_ bv7 32)) (concat (select symbolic_0_double_10 (_ bv6 32)) ?x24))))
(let ((?x31 ((_ to_fp 11 53) ?x30)))
(let ((?x80 (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven ((_ to_fp 11 53) (_ bv0 64)) ?x54) ?x31)))
(let ((?x84 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x80 ((_ to_fp 11 53) (_ bv4607173411600762667 64))) ?x73)))
(let ((?x85 (fp.sub roundNearestTiesToEven ?x84 ?x54)))
(not (and (fp.geq ?x85 ((_ to_fp 11 53) (_ bv13890095209322119168 64))) (fp.leq ?x85 ((_ to_fp 11 53) (_ bv4666723172467343360 64))))))))))))))))))))))))
(check-sat)
(exit)
