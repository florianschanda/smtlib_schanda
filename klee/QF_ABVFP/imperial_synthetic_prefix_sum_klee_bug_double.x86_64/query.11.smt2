(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_prefix_sum_klee_bug_double.x86_64/query.11.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun data_in0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select data_in0 (_ bv10 32)) (concat (select data_in0 (_ bv9 32)) (select data_in0 (_ bv8 32))))))
 (let ((?x21 (concat (select data_in0 (_ bv12 32)) (concat (select data_in0 (_ bv11 32)) ?x15))))
 (let ((?x27 (concat (select data_in0 (_ bv14 32)) (concat (select data_in0 (_ bv13 32)) ?x21))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select data_in0 (_ bv15 32)) ?x27))))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x15 (concat (select data_in0 (_ bv10 32)) (concat (select data_in0 (_ bv9 32)) (select data_in0 (_ bv8 32))))))
 (let ((?x21 (concat (select data_in0 (_ bv12 32)) (concat (select data_in0 (_ bv11 32)) ?x15))))
 (let ((?x27 (concat (select data_in0 (_ bv14 32)) (concat (select data_in0 (_ bv13 32)) ?x21))))
 (let ((?x31 ((_ to_fp 11 53) (concat (select data_in0 (_ bv15 32)) ?x27))))
 (not (fp.lt ?x31 ((_ to_fp 11 53) (_ bv0 64)))))))))
(assert
 (let ((?x45 (concat (select data_in0 (_ bv2 32)) (concat (select data_in0 (_ bv1 32)) (select data_in0 (_ bv0 32))))))
 (let ((?x51 (concat (select data_in0 (_ bv4 32)) (concat (select data_in0 (_ bv3 32)) ?x45))))
 (let ((?x57 (concat (select data_in0 (_ bv6 32)) (concat (select data_in0 (_ bv5 32)) ?x51))))
 (let ((?x61 ((_ to_fp 11 53) (concat (select data_in0 (_ bv7 32)) ?x57))))
 (not (fp.isNaN ?x61)))))))
(assert
 (let ((?x45 (concat (select data_in0 (_ bv2 32)) (concat (select data_in0 (_ bv1 32)) (select data_in0 (_ bv0 32))))))
 (let ((?x51 (concat (select data_in0 (_ bv4 32)) (concat (select data_in0 (_ bv3 32)) ?x45))))
 (let ((?x57 (concat (select data_in0 (_ bv6 32)) (concat (select data_in0 (_ bv5 32)) ?x51))))
 (let ((?x61 ((_ to_fp 11 53) (concat (select data_in0 (_ bv7 32)) ?x57))))
 (not (fp.lt ?x61 ?x61)))))))
(assert
 (let ((?x15 (concat (select data_in0 (_ bv10 32)) (concat (select data_in0 (_ bv9 32)) (select data_in0 (_ bv8 32))))))
(let ((?x21 (concat (select data_in0 (_ bv12 32)) (concat (select data_in0 (_ bv11 32)) ?x15))))
(let ((?x27 (concat (select data_in0 (_ bv14 32)) (concat (select data_in0 (_ bv13 32)) ?x21))))
(let ((?x31 ((_ to_fp 11 53) (concat (select data_in0 (_ bv15 32)) ?x27))))
(let ((?x45 (concat (select data_in0 (_ bv2 32)) (concat (select data_in0 (_ bv1 32)) (select data_in0 (_ bv0 32))))))
(let ((?x51 (concat (select data_in0 (_ bv4 32)) (concat (select data_in0 (_ bv3 32)) ?x45))))
(let ((?x57 (concat (select data_in0 (_ bv6 32)) (concat (select data_in0 (_ bv5 32)) ?x51))))
(let ((?x61 ((_ to_fp 11 53) (concat (select data_in0 (_ bv7 32)) ?x57))))
(let ((?x67 (fp.add roundNearestTiesToEven ?x61 ?x31)))
(not (and (not (fp.isNaN ?x67)) (not (fp.lt ?x67 ?x31))))))))))))))
(check-sat)
(exit)
