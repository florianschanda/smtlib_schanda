(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun data0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun elem1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x15))))
 (not (fp.isNaN ?x19)))))
(assert
 (let ((?x29 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x29))))
 (not (fp.isNaN ?x33)))))
(assert
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x15))))
 (let ((?x29 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x29))))
 (not (fp.lt ?x33 ?x19)))))))
(assert
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x49 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x45))))
 (not (fp.isNaN ?x49)))))
(assert
 (let ((?x29 (concat (select data0 (_ bv6 32)) (concat (select data0 (_ bv5 32)) (select data0 (_ bv4 32))))))
 (let ((?x33 ((_ to_fp 8 24) (concat (select data0 (_ bv7 32)) ?x29))))
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x49 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x45))))
 (not (fp.lt ?x49 ?x33)))))))
(assert
 (let ((?x61 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x65 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x61))))
 (not (fp.isNaN ?x65)))))
(assert
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x49 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x45))))
 (let ((?x61 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x65 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x61))))
 (not (fp.lt ?x65 ?x49)))))))
(assert
 (let ((?x77 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (not (fp.isNaN ((_ to_fp 8 24) (concat (select data0 (_ bv19 32)) ?x77))))))
(assert
 (let ((?x61 (concat (select data0 (_ bv14 32)) (concat (select data0 (_ bv13 32)) (select data0 (_ bv12 32))))))
 (let ((?x65 ((_ to_fp 8 24) (concat (select data0 (_ bv15 32)) ?x61))))
 (let ((?x77 (concat (select data0 (_ bv18 32)) (concat (select data0 (_ bv17 32)) (select data0 (_ bv16 32))))))
 (not (fp.lt ((_ to_fp 8 24) (concat (select data0 (_ bv19 32)) ?x77)) ?x65))))))
(assert
 (let ((?x91 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
 (let ((?x94 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x91))))
 (let ((?x15 (concat (select data0 (_ bv2 32)) (concat (select data0 (_ bv1 32)) (select data0 (_ bv0 32))))))
 (let ((?x19 ((_ to_fp 8 24) (concat (select data0 (_ bv3 32)) ?x15))))
 (fp.eq ?x19 ?x94))))))
(assert
 (let ((?x91 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
 (let ((?x94 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x91))))
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x49 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x45))))
 (not (fp.eq ?x49 ?x94)))))))
(assert
 (let ((?x91 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
 (let ((?x94 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x91))))
 (let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
 (let ((?x49 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x45))))
 (let (($x98 (fp.gt ?x49 ?x94)))
 (let ((?x100 (ite $x98 (_ bv2 32) (_ bv5 32))))
 (let ((?x99 (ite $x98 (_ bv0 32) (_ bv2 32))))
 (let ((?x102 (bvsdiv (bvadd ?x99 ?x100) (_ bv2 32))))
 (let ((?x106 ((_ extract 31 0) (bvmul (_ bv4 64) ((_ sign_extend 32) ?x102)))))
 (let ((?x113 (concat (select data0 (bvadd (_ bv2 32) ?x106)) (concat (select data0 (bvadd (_ bv1 32) ?x106)) (select data0 ?x106)))))
 (not (fp.eq ((_ to_fp 8 24) (concat (select data0 (bvadd (_ bv3 32) ?x106)) ?x113)) ?x94)))))))))))))
(assert
 (let ((?x91 (concat (select elem1 (_ bv2 32)) (concat (select elem1 (_ bv1 32)) (select elem1 (_ bv0 32))))))
(let ((?x94 ((_ to_fp 8 24) (concat (select elem1 (_ bv3 32)) ?x91))))
(let ((?x45 (concat (select data0 (_ bv10 32)) (concat (select data0 (_ bv9 32)) (select data0 (_ bv8 32))))))
(let ((?x49 ((_ to_fp 8 24) (concat (select data0 (_ bv11 32)) ?x45))))
(let (($x98 (fp.gt ?x49 ?x94)))
(let ((?x100 (ite $x98 (_ bv2 32) (_ bv5 32))))
(let ((?x102 (bvsdiv (bvadd (ite $x98 (_ bv0 32) (_ bv2 32)) ?x100) (_ bv2 32))))
(let ((?x110 (concat (select data0 (bvadd (_ bv1 32) ((_ extract 31 0) (bvmul (_ bv4 64) ((_ sign_extend 32) ?x102))))) (select data0 ((_ extract 31 0) (bvmul (_ bv4 64) ((_ sign_extend 32) ?x102)))))))
(let ((?x113 (concat (select data0 (bvadd (_ bv2 32) ((_ extract 31 0) (bvmul (_ bv4 64) ((_ sign_extend 32) ?x102))))) ?x110)))
(let ((?x116 (concat (select data0 (bvadd (_ bv3 32) ((_ extract 31 0) (bvmul (_ bv4 64) ((_ sign_extend 32) ?x102))))) ?x113)))
(let (($x120 (fp.gt ((_ to_fp 8 24) ?x116) ?x94)))
(not (not (= (ite $x120 (ite $x98 (_ bv0 32) (_ bv2 32)) ?x102) (ite $x120 ?x102 ?x100))))))))))))))))
(check-sat)
(exit)
