(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun d0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr21 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.gt ?x31 ((_ to_fp 11 53) (_ bv4607182418800017408 64))))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
 (let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.lt ?x31 ((_ to_fp 11 53) (_ bv4621819117588971520 64))))))))
(assert
 (not (= (_ bv0 8) (bvxor (_ bv1 8) (bvand (select d0 (_ bv0 32)) (_ bv1 8))))))
(assert
 (let ((?x15 (concat (select d0 (_ bv2 32)) (concat (select d0 (_ bv1 32)) (select d0 (_ bv0 32))))))
(let ((?x24 (concat (select d0 (_ bv5 32)) (concat (select d0 (_ bv4 32)) (concat (select d0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select d0 (_ bv7 32)) (concat (select d0 (_ bv6 32)) ?x24))))
(let ((?x62 (bvor ?x30 (_ bv1 64))))
(let ((?x68 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x62)) (_ bv2047 64))) (_ bv64 64)))))
(let ((?x70 ((_ sign_extend 32) ((_ extract 31 0) ?x68))))
(let ((?x58 (bvadd (_ bv18446744073709551553 64) (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) ?x30)) (_ bv2047 64))) (_ bv64 64)))))
(let ((?x76 ((_ extract 31 0) (bvadd (_ bv18446744073663167008 64) (ite (bvslt ((_ sign_extend 32) ((_ extract 31 0) ?x58)) ?x70) (_ bv41343728 64) (_ bv46384624 64))))))
(let ((?x119 (store (store (store (store const_arr21 (_ bv0 32) (_ bv2 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x123 (store (store (store (store ?x119 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x127 (store (store (store (store ?x123 (_ bv8 32) (_ bv0 8)) (_ bv9 32) (_ bv0 8)) (_ bv10 32) (_ bv0 8)) (_ bv11 32) (_ bv0 8))))
(let ((?x131 (store (store (store (store ?x127 (_ bv12 32) (_ bv0 8)) (_ bv13 32) (_ bv0 8)) (_ bv14 32) (_ bv0 8)) (_ bv15 32) (_ bv0 8))))
(let ((?x135 (store (store (store (store ?x131 (_ bv16 32) (_ bv0 8)) (_ bv17 32) (_ bv0 8)) (_ bv18 32) (_ bv0 8)) (_ bv19 32) (_ bv0 8))))
(let ((?x139 (store (store (store (store ?x135 (_ bv20 32) (_ bv0 8)) (_ bv21 32) (_ bv0 8)) (_ bv22 32) (_ bv0 8)) (_ bv23 32) (_ bv0 8))))
(let ((?x140 (store ?x139 (_ bv4 32) ((_ extract 7 0) (ite (fp.lt ((_ to_fp 11 53) ?x62) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))))
(let ((?x141 (store ?x140 (_ bv5 32) ((_ extract 15 8) (ite (fp.lt ((_ to_fp 11 53) ?x62) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))))
(let ((?x142 (store ?x141 (_ bv6 32) ((_ extract 23 16) (ite (fp.lt ((_ to_fp 11 53) ?x62) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))))
(let ((?x143 (store ?x142 (_ bv7 32) ((_ extract 31 24) (ite (fp.lt ((_ to_fp 11 53) ?x62) ((_ to_fp 11 53) (_ bv0 64))) (_ bv4294967294 32) (_ bv2 32))))))
(let ((?x146 (store (store (store ?x143 (_ bv8 32) ((_ extract 7 0) ?x70)) (_ bv9 32) ((_ extract 15 8) ?x70)) (_ bv10 32) ((_ extract 23 16) ?x70))))
(let ((?x149 (store (store (store ?x146 (_ bv11 32) ((_ extract 31 24) ?x70)) (_ bv12 32) ((_ extract 39 32) ?x70)) (_ bv13 32) ((_ extract 47 40) ?x70))))
(let ((?x152 (store (store (store ?x149 (_ bv14 32) ((_ extract 55 48) ?x70)) (_ bv15 32) ((_ extract 63 56) ?x70)) (_ bv16 32) (_ bv208 8))))
(let ((?x156 (store (store (store (store ?x152 (_ bv17 32) (_ bv88 8)) (_ bv18 32) (_ bv109 8)) (_ bv19 32) (_ bv2 8)) (_ bv20 32) (_ bv0 8))))
(let ((?x159 (store (store (store ?x156 (_ bv21 32) (_ bv0 8)) (_ bv22 32) (_ bv0 8)) (_ bv23 32) (_ bv0 8))))
(let ((?x166 (concat (select ?x159 (bvadd (_ bv2 32) ?x76)) (concat (select ?x159 (bvadd (_ bv1 32) ?x76)) (select ?x159 ?x76)))))
(let ((?x172 (concat (select ?x159 (bvadd (_ bv4 32) ?x76)) (concat (select ?x159 (bvadd (_ bv3 32) ?x76)) ?x166))))
(let ((?x178 (concat (select ?x159 (bvadd (_ bv6 32) ?x76)) (concat (select ?x159 (bvadd (_ bv5 32) ?x76)) ?x172))))
(let (($x184 (bvult (bvadd (_ bv18446744073668831024 64) (concat (select ?x159 (bvadd (_ bv7 32) ?x76)) ?x178)) (_ bv17 64))))
(not $x184)))))))))))))))))))))))))))))
(check-sat)
(exit)
