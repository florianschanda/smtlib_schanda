(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun i0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(declare-fun const_arr31 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun const_arr22 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x15 (concat (select i0 (_ bv2 32)) (concat (select i0 (_ bv1 32)) (select i0 (_ bv0 32))))))
 (let ((?x20 ((_ to_fp 11 53) roundNearestTiesToEven (concat (select i0 (_ bv3 32)) ?x15))))
 (or (fp.isNaN ?x20) (fp.lt ?x20 ((_ to_fp 11 53) (_ bv0 64)))))))
(assert
 (let ((?x15 (concat (select i0 (_ bv2 32)) (concat (select i0 (_ bv1 32)) (select i0 (_ bv0 32))))))
 (let ((?x20 ((_ to_fp 11 53) roundNearestTiesToEven (concat (select i0 (_ bv3 32)) ?x15))))
 (= (fp.sub roundNearestTiesToEven ((_ to_fp 11 53) (_ bv9223372036854775808 64)) ?x20) ((_ to_fp 11 53) fresh_to_ieee_bv_!0)))))
(assert
 (let ((?x45 (bvsdiv (bvadd (_ bv3074 64) (bvand (concat (_ bv0 52) ((_ extract 63 52) fresh_to_ieee_bv_!0)) (_ bv2047 64))) (_ bv64 64))))
(let ((?x52 ((_ extract 31 0) (bvmul (_ bv8 64) (bvsub (_ bv1 64) ((_ sign_extend 32) ((_ extract 31 0) (bvadd (_ bv18446744073709551553 64) ?x45))))))))
(let ((?x68 (store (store (store (store const_arr31 (_ bv0 32) (_ bv1 8)) (_ bv1 32) (_ bv0 8)) (_ bv2 32) (_ bv0 8)) (_ bv3 32) (_ bv0 8))))
(let ((?x72 (store (store (store (store ?x68 (_ bv4 32) (_ bv0 8)) (_ bv5 32) (_ bv0 8)) (_ bv6 32) (_ bv0 8)) (_ bv7 32) (_ bv0 8))))
(let ((?x75 (store (store (store ?x72 ?x52 (_ bv1 8)) (bvadd (_ bv1 32) ?x52) (_ bv0 8)) (bvadd (_ bv2 32) ?x52) (_ bv0 8))))
(let ((?x78 (store (store (store ?x75 (bvadd (_ bv3 32) ?x52) (_ bv0 8)) (bvadd (_ bv4 32) ?x52) (_ bv0 8)) (bvadd (_ bv5 32) ?x52) (_ bv0 8))))
(let ((?x80 (store (store ?x78 (bvadd (_ bv6 32) ?x52) (_ bv0 8)) (bvadd (_ bv7 32) ?x52) (_ bv0 8))))
(let ((?x85 (concat (select ?x80 (_ bv2 32)) (concat (select ?x80 (_ bv1 32)) (select ?x80 (_ bv0 32))))))
(let ((?x91 (concat (select ?x80 (_ bv5 32)) (concat (select ?x80 (_ bv4 32)) (concat (select ?x80 (_ bv3 32)) ?x85)))))
(let ((?x95 (concat (select ?x80 (_ bv7 32)) (concat (select ?x80 (_ bv6 32)) ?x91))))
(let ((?x106 (store (store (store (store const_arr22 (_ bv0 32) (_ bv1 8)) (_ bv1 32) (_ bv2 8)) (_ bv2 32) (_ bv3 8)) (_ bv3 32) (_ bv3 8))))
(let ((?x111 (store (store (store (store ?x106 (_ bv4 32) (_ bv4 8)) (_ bv5 32) (_ bv4 8)) (_ bv6 32) (_ bv4 8)) (_ bv7 32) (_ bv4 8))))
(let ((?x120 (store (store (store (store ?x111 (_ bv8 32) (_ bv5 8)) (_ bv9 32) (_ bv5 8)) (_ bv10 32) (_ bv5 8)) (_ bv11 32) (_ bv5 8))))
(let ((?x128 (store (store (store (store ?x120 (_ bv12 32) (_ bv5 8)) (_ bv13 32) (_ bv5 8)) (_ bv14 32) (_ bv5 8)) (_ bv15 32) (_ bv5 8))))
(let ((?x137 (store (store (store (store ?x128 (_ bv16 32) (_ bv6 8)) (_ bv17 32) (_ bv6 8)) (_ bv18 32) (_ bv6 8)) (_ bv19 32) (_ bv6 8))))
(let ((?x145 (store (store (store (store ?x137 (_ bv20 32) (_ bv6 8)) (_ bv21 32) (_ bv6 8)) (_ bv22 32) (_ bv6 8)) (_ bv23 32) (_ bv6 8))))
(let ((?x153 (store (store (store (store ?x145 (_ bv24 32) (_ bv6 8)) (_ bv25 32) (_ bv6 8)) (_ bv26 32) (_ bv6 8)) (_ bv27 32) (_ bv6 8))))
(let ((?x161 (store (store (store (store ?x153 (_ bv28 32) (_ bv6 8)) (_ bv29 32) (_ bv6 8)) (_ bv30 32) (_ bv6 8)) (_ bv31 32) (_ bv6 8))))
(let ((?x170 (store (store (store (store ?x161 (_ bv32 32) (_ bv7 8)) (_ bv33 32) (_ bv7 8)) (_ bv34 32) (_ bv7 8)) (_ bv35 32) (_ bv7 8))))
(let ((?x178 (store (store (store (store ?x170 (_ bv36 32) (_ bv7 8)) (_ bv37 32) (_ bv7 8)) (_ bv38 32) (_ bv7 8)) (_ bv39 32) (_ bv7 8))))
(let ((?x186 (store (store (store (store ?x178 (_ bv40 32) (_ bv7 8)) (_ bv41 32) (_ bv7 8)) (_ bv42 32) (_ bv7 8)) (_ bv43 32) (_ bv7 8))))
(let ((?x194 (store (store (store (store ?x186 (_ bv44 32) (_ bv7 8)) (_ bv45 32) (_ bv7 8)) (_ bv46 32) (_ bv7 8)) (_ bv47 32) (_ bv7 8))))
(let ((?x202 (store (store (store (store ?x194 (_ bv48 32) (_ bv7 8)) (_ bv49 32) (_ bv7 8)) (_ bv50 32) (_ bv7 8)) (_ bv51 32) (_ bv7 8))))
(let ((?x210 (store (store (store (store ?x202 (_ bv52 32) (_ bv7 8)) (_ bv53 32) (_ bv7 8)) (_ bv54 32) (_ bv7 8)) (_ bv55 32) (_ bv7 8))))
(let ((?x218 (store (store (store (store ?x210 (_ bv56 32) (_ bv7 8)) (_ bv57 32) (_ bv7 8)) (_ bv58 32) (_ bv7 8)) (_ bv59 32) (_ bv7 8))))
(let ((?x226 (store (store (store (store ?x218 (_ bv60 32) (_ bv7 8)) (_ bv61 32) (_ bv7 8)) (_ bv62 32) (_ bv7 8)) (_ bv63 32) (_ bv7 8))))
(let ((?x235 (store (store (store (store ?x226 (_ bv64 32) (_ bv8 8)) (_ bv65 32) (_ bv8 8)) (_ bv66 32) (_ bv8 8)) (_ bv67 32) (_ bv8 8))))
(let ((?x243 (store (store (store (store ?x235 (_ bv68 32) (_ bv8 8)) (_ bv69 32) (_ bv8 8)) (_ bv70 32) (_ bv8 8)) (_ bv71 32) (_ bv8 8))))
(let ((?x251 (store (store (store (store ?x243 (_ bv72 32) (_ bv8 8)) (_ bv73 32) (_ bv8 8)) (_ bv74 32) (_ bv8 8)) (_ bv75 32) (_ bv8 8))))
(let ((?x259 (store (store (store (store ?x251 (_ bv76 32) (_ bv8 8)) (_ bv77 32) (_ bv8 8)) (_ bv78 32) (_ bv8 8)) (_ bv79 32) (_ bv8 8))))
(let ((?x267 (store (store (store (store ?x259 (_ bv80 32) (_ bv8 8)) (_ bv81 32) (_ bv8 8)) (_ bv82 32) (_ bv8 8)) (_ bv83 32) (_ bv8 8))))
(let ((?x275 (store (store (store (store ?x267 (_ bv84 32) (_ bv8 8)) (_ bv85 32) (_ bv8 8)) (_ bv86 32) (_ bv8 8)) (_ bv87 32) (_ bv8 8))))
(let ((?x283 (store (store (store (store ?x275 (_ bv88 32) (_ bv8 8)) (_ bv89 32) (_ bv8 8)) (_ bv90 32) (_ bv8 8)) (_ bv91 32) (_ bv8 8))))
(let ((?x291 (store (store (store (store ?x283 (_ bv92 32) (_ bv8 8)) (_ bv93 32) (_ bv8 8)) (_ bv94 32) (_ bv8 8)) (_ bv95 32) (_ bv8 8))))
(let ((?x299 (store (store (store (store ?x291 (_ bv96 32) (_ bv8 8)) (_ bv97 32) (_ bv8 8)) (_ bv98 32) (_ bv8 8)) (_ bv99 32) (_ bv8 8))))
(let ((?x307 (store (store (store (store ?x299 (_ bv100 32) (_ bv8 8)) (_ bv101 32) (_ bv8 8)) (_ bv102 32) (_ bv8 8)) (_ bv103 32) (_ bv8 8))))
(let ((?x315 (store (store (store (store ?x307 (_ bv104 32) (_ bv8 8)) (_ bv105 32) (_ bv8 8)) (_ bv106 32) (_ bv8 8)) (_ bv107 32) (_ bv8 8))))
(let ((?x323 (store (store (store (store ?x315 (_ bv108 32) (_ bv8 8)) (_ bv109 32) (_ bv8 8)) (_ bv110 32) (_ bv8 8)) (_ bv111 32) (_ bv8 8))))
(let ((?x331 (store (store (store (store ?x323 (_ bv112 32) (_ bv8 8)) (_ bv113 32) (_ bv8 8)) (_ bv114 32) (_ bv8 8)) (_ bv115 32) (_ bv8 8))))
(let ((?x339 (store (store (store (store ?x331 (_ bv116 32) (_ bv8 8)) (_ bv117 32) (_ bv8 8)) (_ bv118 32) (_ bv8 8)) (_ bv119 32) (_ bv8 8))))
(let ((?x347 (store (store (store (store ?x339 (_ bv120 32) (_ bv8 8)) (_ bv121 32) (_ bv8 8)) (_ bv122 32) (_ bv8 8)) (_ bv123 32) (_ bv8 8))))
(let ((?x355 (store (store (store (store ?x347 (_ bv124 32) (_ bv8 8)) (_ bv125 32) (_ bv8 8)) (_ bv126 32) (_ bv8 8)) (_ bv127 32) (_ bv8 8))))
(let ((?x361 (concat (_ bv0 56) (select (store ?x355 (_ bv128 32) (_ bv9 8)) ((_ extract 31 0) (concat (_ bv0 1) ((_ extract 63 1) ?x95)))))))
(let ((?x364 (bvand (bvsub (_ bv64 64) ?x361) (_ bv4294967295 64))))
(let ((?x376 (ite (= ?x364 (_ bv62 64)) (concat ((_ extract 1 0) ?x95) (_ bv0 62)) (ite (= ?x364 (_ bv63 64)) (concat ((_ extract 0 0) ?x95) (_ bv0 63)) (_ bv0 64)))))
(let ((?x388 (ite (= ?x364 (_ bv60 64)) (concat ((_ extract 3 0) ?x95) (_ bv0 60)) (ite (= ?x364 (_ bv61 64)) (concat ((_ extract 2 0) ?x95) (_ bv0 61)) ?x376))))
(let ((?x400 (ite (= ?x364 (_ bv58 64)) (concat ((_ extract 5 0) ?x95) (_ bv0 58)) (ite (= ?x364 (_ bv59 64)) (concat ((_ extract 4 0) ?x95) (_ bv0 59)) ?x388))))
(let ((?x411 (ite (= ?x364 (_ bv56 64)) (concat ((_ extract 7 0) ?x95) (_ bv0 56)) (ite (= ?x364 (_ bv57 64)) (concat ((_ extract 6 0) ?x95) (_ bv0 57)) ?x400))))
(let ((?x423 (ite (= ?x364 (_ bv54 64)) (concat ((_ extract 9 0) ?x95) (_ bv0 54)) (ite (= ?x364 (_ bv55 64)) (concat ((_ extract 8 0) ?x95) (_ bv0 55)) ?x411))))
(let ((?x434 (ite (= ?x364 (_ bv52 64)) (concat ((_ extract 11 0) ?x95) (_ bv0 52)) (ite (= ?x364 (_ bv53 64)) (concat ((_ extract 10 0) ?x95) (_ bv0 53)) ?x423))))
(let ((?x446 (ite (= ?x364 (_ bv50 64)) (concat ((_ extract 13 0) ?x95) (_ bv0 50)) (ite (= ?x364 (_ bv51 64)) (concat ((_ extract 12 0) ?x95) (_ bv0 51)) ?x434))))
(let ((?x458 (ite (= ?x364 (_ bv48 64)) (concat ((_ extract 15 0) ?x95) (_ bv0 48)) (ite (= ?x364 (_ bv49 64)) (concat ((_ extract 14 0) ?x95) (_ bv0 49)) ?x446))))
(let ((?x470 (ite (= ?x364 (_ bv46 64)) (concat ((_ extract 17 0) ?x95) (_ bv0 46)) (ite (= ?x364 (_ bv47 64)) (concat ((_ extract 16 0) ?x95) (_ bv0 47)) ?x458))))
(let ((?x482 (ite (= ?x364 (_ bv44 64)) (concat ((_ extract 19 0) ?x95) (_ bv0 44)) (ite (= ?x364 (_ bv45 64)) (concat ((_ extract 18 0) ?x95) (_ bv0 45)) ?x470))))
(let ((?x494 (ite (= ?x364 (_ bv42 64)) (concat ((_ extract 21 0) ?x95) (_ bv0 42)) (ite (= ?x364 (_ bv43 64)) (concat ((_ extract 20 0) ?x95) (_ bv0 43)) ?x482))))
(let ((?x506 (ite (= ?x364 (_ bv40 64)) (concat ((_ extract 23 0) ?x95) (_ bv0 40)) (ite (= ?x364 (_ bv41 64)) (concat ((_ extract 22 0) ?x95) (_ bv0 41)) ?x494))))
(let ((?x518 (ite (= ?x364 (_ bv38 64)) (concat ((_ extract 25 0) ?x95) (_ bv0 38)) (ite (= ?x364 (_ bv39 64)) (concat ((_ extract 24 0) ?x95) (_ bv0 39)) ?x506))))
(let ((?x530 (ite (= ?x364 (_ bv36 64)) (concat ((_ extract 27 0) ?x95) (_ bv0 36)) (ite (= ?x364 (_ bv37 64)) (concat ((_ extract 26 0) ?x95) (_ bv0 37)) ?x518))))
(let ((?x542 (ite (= ?x364 (_ bv34 64)) (concat ((_ extract 29 0) ?x95) (_ bv0 34)) (ite (= ?x364 (_ bv35 64)) (concat ((_ extract 28 0) ?x95) (_ bv0 35)) ?x530))))
(let ((?x553 (ite (= ?x364 (_ bv32 64)) (concat ((_ extract 31 0) ?x95) (_ bv0 32)) (ite (= ?x364 (_ bv33 64)) (concat ((_ extract 30 0) ?x95) (_ bv0 33)) ?x542))))
(let ((?x565 (ite (= ?x364 (_ bv30 64)) (concat ((_ extract 33 0) ?x95) (_ bv0 30)) (ite (= ?x364 (_ bv31 64)) (concat ((_ extract 32 0) ?x95) (_ bv0 31)) ?x553))))
(let ((?x577 (ite (= ?x364 (_ bv28 64)) (concat ((_ extract 35 0) ?x95) (_ bv0 28)) (ite (= ?x364 (_ bv29 64)) (concat ((_ extract 34 0) ?x95) (_ bv0 29)) ?x565))))
(let ((?x589 (ite (= ?x364 (_ bv26 64)) (concat ((_ extract 37 0) ?x95) (_ bv0 26)) (ite (= ?x364 (_ bv27 64)) (concat ((_ extract 36 0) ?x95) (_ bv0 27)) ?x577))))
(let ((?x601 (ite (= ?x364 (_ bv24 64)) (concat ((_ extract 39 0) ?x95) (_ bv0 24)) (ite (= ?x364 (_ bv25 64)) (concat ((_ extract 38 0) ?x95) (_ bv0 25)) ?x589))))
(let ((?x613 (ite (= ?x364 (_ bv22 64)) (concat ((_ extract 41 0) ?x95) (_ bv0 22)) (ite (= ?x364 (_ bv23 64)) (concat ((_ extract 40 0) ?x95) (_ bv0 23)) ?x601))))
(let ((?x625 (ite (= ?x364 (_ bv20 64)) (concat ((_ extract 43 0) ?x95) (_ bv0 20)) (ite (= ?x364 (_ bv21 64)) (concat ((_ extract 42 0) ?x95) (_ bv0 21)) ?x613))))
(let ((?x637 (ite (= ?x364 (_ bv18 64)) (concat ((_ extract 45 0) ?x95) (_ bv0 18)) (ite (= ?x364 (_ bv19 64)) (concat ((_ extract 44 0) ?x95) (_ bv0 19)) ?x625))))
(let ((?x649 (ite (= ?x364 (_ bv16 64)) (concat ((_ extract 47 0) ?x95) (_ bv0 16)) (ite (= ?x364 (_ bv17 64)) (concat ((_ extract 46 0) ?x95) (_ bv0 17)) ?x637))))
(let ((?x661 (ite (= ?x364 (_ bv14 64)) (concat ((_ extract 49 0) ?x95) (_ bv0 14)) (ite (= ?x364 (_ bv15 64)) (concat ((_ extract 48 0) ?x95) (_ bv0 15)) ?x649))))
(let ((?x673 (ite (= ?x364 (_ bv12 64)) (concat ((_ extract 51 0) ?x95) (_ bv0 12)) (ite (= ?x364 (_ bv13 64)) (concat ((_ extract 50 0) ?x95) (_ bv0 13)) ?x661))))
(let ((?x685 (ite (= ?x364 (_ bv10 64)) (concat ((_ extract 53 0) ?x95) (_ bv0 10)) (ite (= ?x364 (_ bv11 64)) (concat ((_ extract 52 0) ?x95) (_ bv0 11)) ?x673))))
(let ((?x695 (ite (= ?x364 (_ bv8 64)) (concat ((_ extract 55 0) ?x95) (_ bv0 8)) (ite (= ?x364 (_ bv9 64)) (concat ((_ extract 54 0) ?x95) (_ bv0 9)) ?x685))))
(let ((?x707 (ite (= ?x364 (_ bv6 64)) (concat ((_ extract 57 0) ?x95) (_ bv0 6)) (ite (= ?x364 (_ bv7 64)) (concat ((_ extract 56 0) ?x95) (_ bv0 7)) ?x695))))
(let ((?x719 (ite (= ?x364 (_ bv4 64)) (concat ((_ extract 59 0) ?x95) (_ bv0 4)) (ite (= ?x364 (_ bv5 64)) (concat ((_ extract 58 0) ?x95) (_ bv0 5)) ?x707))))
(let ((?x731 (ite (= ?x364 (_ bv2 64)) (concat ((_ extract 61 0) ?x95) (_ bv0 2)) (ite (= ?x364 (_ bv3 64)) (concat ((_ extract 60 0) ?x95) (_ bv0 3)) ?x719))))
(let ((?x737 (ite (= ?x364 (_ bv0 64)) ?x95 (ite (= ?x364 (_ bv1 64)) (concat ((_ extract 62 0) ?x95) (_ bv0 1)) ?x731))))
(let ((?x739 (ite (bvult ?x364 (_ bv64 64)) ?x737 (_ bv0 64))))
(let ((?x749 (bvand ?x739 (_ bv4294967295 64))))
(let ((?x742 (concat (_ bv0 32) ((_ extract 63 32) ?x739))))
(let ((?x740 (bvxor (_ bv18446744073709551615 64) ?x739)))
(let ((?x748 (bvor (concat ((_ extract 31 0) (bvsub ?x740 (bvmul (bvudiv ?x740 ?x742) ?x742))) (_ bv0 32)) (_ bv4294967295 64))))
(let ((?x751 (bvsub ?x748 (bvmul (bvudiv ?x740 ?x742) ?x749))))
(let ((?x752 (bvudiv ?x751 ?x742)))
(let (($x759 (bvult (bvor (concat ((_ extract 31 0) (bvsub ?x751 (bvmul ?x752 ?x742))) (_ bv0 32)) (_ bv4294967295 64)) (bvmul ?x752 ?x749))))
(not (not $x759)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
