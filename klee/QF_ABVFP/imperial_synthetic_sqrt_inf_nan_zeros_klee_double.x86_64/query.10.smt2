(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_synthetic_sqrt_inf_nan_zeros_klee_double.x86_64/query.10.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun x0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun fresh_to_ieee_bv_!0 () (_ BitVec 64))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.isNaN ?x31)))))))
(assert
 (let ((?x35 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (not (fp.lt ?x31 ?x35))))))))
(assert
 (let ((?x35 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (= (_ bv0 32) (ite (fp.isInfinite ?x31) (ite (fp.gt ?x31 ?x35) (_ bv1 32) (_ bv4294967295 32)) (_ bv0 32)))))))))
(assert
 (let ((?x35 ((_ to_fp 11 53) (_ bv0 64))))
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (fp.eq ?x31 ?x35)))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
 (let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
 (let ((?x30 (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24))))
 (let ((?x31 ((_ to_fp 11 53) ?x30)))
 (= (fp.sqrt roundNearestTiesToEven ?x31) ((_ to_fp 11 53) fresh_to_ieee_bv_!0)))))))
(assert
 (let ((?x15 (concat (select x0 (_ bv2 32)) (concat (select x0 (_ bv1 32)) (select x0 (_ bv0 32))))))
(let ((?x24 (concat (select x0 (_ bv5 32)) (concat (select x0 (_ bv4 32)) (concat (select x0 (_ bv3 32)) ?x15)))))
(let ((?x30 (concat (select x0 (_ bv7 32)) (concat (select x0 (_ bv6 32)) ?x24))))
(not (or (bvslt (_ bv18446744073709551615 64) ?x30) (bvslt fresh_to_ieee_bv_!0 (_ bv0 64))))))))
(check-sat)
(exit)
