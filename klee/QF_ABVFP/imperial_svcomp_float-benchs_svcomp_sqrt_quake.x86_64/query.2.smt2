(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/imperial_svcomp_float-benchs_svcomp_sqrt_quake.x86_64/query.2.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun symbolic_0_float0 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x12 (concat (select symbolic_0_float0 (_ bv1 32)) (select symbolic_0_float0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float0 (_ bv3 32)) (concat (select symbolic_0_float0 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.geq ?x19 ((_ to_fp 8 24) (_ bv1036831949 32)))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float0 (_ bv1 32)) (select symbolic_0_float0 (_ bv0 32)))))
 (let ((?x18 (concat (select symbolic_0_float0 (_ bv3 32)) (concat (select symbolic_0_float0 (_ bv2 32)) ?x12))))
 (let ((?x19 ((_ to_fp 8 24) ?x18)))
 (fp.leq ?x19 ((_ to_fp 8 24) (_ bv1120403456 32)))))))
(assert
 (let ((?x12 (concat (select symbolic_0_float0 (_ bv1 32)) (select symbolic_0_float0 (_ bv0 32)))))
(let ((?x18 (concat (select symbolic_0_float0 (_ bv3 32)) (concat (select symbolic_0_float0 (_ bv2 32)) ?x12))))
(let ((?x34 (ite (= ((_ extract 31 31) ?x18) (_ bv1 1)) (concat (_ bv1 1) ((_ extract 31 1) ?x18)) (concat (_ bv0 1) ((_ extract 31 1) ?x18)))))
(let ((?x36 ((_ to_fp 8 24) (bvsub (_ bv1597463007 32) ?x34))))
(let ((?x43 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven ((_ to_fp 8 24) ?x18) ((_ to_fp 8 24) (_ bv1056964608 32))) ?x36)))
(let ((?x45 (fp.sub roundNearestTiesToEven ((_ to_fp 8 24) (_ bv1069547520 32)) (fp.mul roundNearestTiesToEven ?x36 ?x43))))
(let ((?x46 (fp.mul roundNearestTiesToEven ?x36 ?x45)))
(let (($x48 (not (fp.isNaN ?x46))))
(let (($x58 (and (and $x48 (not (fp.lt ?x46 ((_ to_fp 8 24) (_ bv0 32))))) (and $x48 (not (fp.gt ?x46 ((_ to_fp 8 24) (_ bv1092616192 32))))))))
(not $x58)))))))))))
(check-sat)
(exit)
