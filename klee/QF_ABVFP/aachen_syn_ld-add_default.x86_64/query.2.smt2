(set-info :smt-lib-version 2.6)
(set-logic QF_ABVFP)
(set-info :source |
Generated by: Daniel Liew, Daniel Schemmel, Cristian Cadar, Alastair Donaldson, and Rafael ZÃ¤hl
Generated on: 2017-4-28
Generator: KLEE
Application: Branch satisfiability check for symbolic execution of C programs
Target solver: Z3 or MathSAT5
Corresponding query: An equisatisfiable query (arrays replaced with bitvectors) is available at QF_BVFP/20170428-Liew-KLEE/aachen_syn_ld-add_default.x86_64/query.2.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun a0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun b1 () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x74 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x75 ((_ to_fp 15 64) ?x74)))
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (fp.leq ?x43 ?x75)))))))))
(assert
 (let ((?x90 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x91 ((_ to_fp 15 64) ?x90)))
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (fp.geq ?x43 ?x91)))))))))
(assert
 (let ((?x74 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x75 ((_ to_fp 15 64) ?x74)))
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
 (let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
 (let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
 (let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
 (let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
 (fp.leq ?x108 ?x75)))))))))
(assert
 (let ((?x90 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x91 ((_ to_fp 15 64) ?x90)))
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
 (let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
 (let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
 (let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
 (let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
 (fp.geq ?x108 ?x91)))))))))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x74 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x75 ((_ to_fp 15 64) ?x74)))
 (= ((_ extract 63 63) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x75) (fp.isZero ?x75)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x90 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x91 ((_ to_fp 15 64) ?x90)))
 (= ((_ extract 63 63) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x91) (fp.isZero ?x91)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
 (let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
 (let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
 (let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
 (let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
 (= ((_ extract 63 63) ?x101) (ite (or (fp.isSubnormal ?x108) (fp.isZero ?x108)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x74 (concat (concat ((_ extract 79 79) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv16402 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv16402 16) (_ bv17592186044416000000 64))))))
 (let ((?x75 ((_ to_fp 15 64) ?x74)))
 (= ((_ extract 63 63) (concat (_ bv16402 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x75) (fp.isZero ?x75)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
 (let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
 (let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
 (let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
 (let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
 (= ((_ extract 63 63) ?x101) (ite (or (fp.isSubnormal ?x108) (fp.isZero ?x108)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x90 (concat (concat ((_ extract 79 79) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) ((_ extract 78 64) (concat (_ bv49170 16) (_ bv17592186044416000000 64)))) ((_ extract 62 0) (concat (_ bv49170 16) (_ bv17592186044416000000 64))))))
 (let ((?x91 ((_ to_fp 15 64) ?x90)))
 (= ((_ extract 63 63) (concat (_ bv49170 16) (_ bv17592186044416000000 64))) (ite (or (fp.isSubnormal ?x91) (fp.isZero ?x91)) (_ bv0 1) (_ bv1 1))))))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
 (let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
 (let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
 (let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
 (let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
 (= ((_ extract 63 63) ?x101) (ite (or (fp.isSubnormal ?x108) (fp.isZero ?x108)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
 (let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
 (let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
 (let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
 (let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
 (= ((_ extract 63 63) ?x36) (ite (or (fp.isSubnormal ?x43) (fp.isZero ?x43)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
 (let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
 (let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
 (let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
 (let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
 (= ((_ extract 63 63) ?x101) (ite (or (fp.isSubnormal ?x108) (fp.isZero ?x108)) (_ bv0 1) (_ bv1 1)))))))))
(assert
 (let ((?x80 (concat (select b1 (_ bv2 32)) (concat (select b1 (_ bv1 32)) (select b1 (_ bv0 32))))))
(let ((?x93 (concat (select b1 (_ bv5 32)) (concat (select b1 (_ bv4 32)) (concat (select b1 (_ bv3 32)) ?x80)))))
(let ((?x99 (concat (select b1 (_ bv8 32)) (concat (select b1 (_ bv7 32)) (concat (select b1 (_ bv6 32)) ?x93)))))
(let ((?x101 (concat (select b1 (_ bv9 32)) ?x99)))
(let ((?x108 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x101) ((_ extract 78 64) ?x101)) ((_ extract 62 0) ?x101)))))
(let ((?x15 (concat (select a0 (_ bv2 32)) (concat (select a0 (_ bv1 32)) (select a0 (_ bv0 32))))))
(let ((?x24 (concat (select a0 (_ bv5 32)) (concat (select a0 (_ bv4 32)) (concat (select a0 (_ bv3 32)) ?x15)))))
(let ((?x33 (concat (select a0 (_ bv8 32)) (concat (select a0 (_ bv7 32)) (concat (select a0 (_ bv6 32)) ?x24)))))
(let ((?x36 (concat (select a0 (_ bv9 32)) ?x33)))
(let ((?x43 ((_ to_fp 15 64) (concat (concat ((_ extract 79 79) ?x36) ((_ extract 78 64) ?x36)) ((_ extract 62 0) ?x36)))))
(let ((?x139 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven ?x43) ((_ to_fp 11 53) roundNearestTiesToEven ?x108))))
(let (($x138 (fp.eq (fp.add roundNearestTiesToEven ?x43 ?x108) ((_ to_fp 15 64) roundNearestTiesToEven ?x139))))
(not (not $x138)))))))))))))))
(check-sat)
(exit)
