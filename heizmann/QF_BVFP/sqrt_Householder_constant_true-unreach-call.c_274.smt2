(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements 
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by 
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2017 [5,6].

This script might _not_ contain all SMT commands that are used by 
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2017-05-01, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)


[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Wen Chen, Daniel Dietsch, Marius Greitschus, 
Alexander Nutz, Betim Musa, Claus Schätzle, Christian Schilling, 
Frank Schüssele, Andreas Podelski:
Ultimate Automizer with an On-Demand Construction of Floyd-Hoare 
Automata - (Competition Contribution). TACAS (2) 2017: 394-398
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model 
Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Software Verification with Validation of Results - 
(Report on SV-COMP 2017). TACAS (2) 2017: 331-349
[6] https://sv-comp.sosy-lab.org/2017/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun c_~_EPS () (_ FloatingPoint 11 53))
(declare-fun |c_SqrtR_#in~Input| () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~Input () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~xn~4 () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~xn~4_primed () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~xnp1~4_primed () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~residu~4_primed () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~lsup~4_primed () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~linf~4_primed () (_ FloatingPoint 11 53))
(declare-fun c_SqrtR_~i~4 () (_ BitVec 32))
(declare-fun c_SqrtR_~i~4_primed () (_ BitVec 32))
(declare-fun c_SqrtR_~cond~4 () (_ BitVec 32))
(declare-fun c_SqrtR_~cond~4_primed () (_ BitVec 32))
(assert (and (not (= c_SqrtR_~cond~4 (_ bv0 32))) (= c_SqrtR_~xnp1~4_primed (fp.div RNE (fp.mul RNE c_SqrtR_~xn~4 (fp.add RNE ((_ to_fp 11 53) RNE 15.0) (fp.mul RNE (fp.mul RNE (fp.mul RNE c_SqrtR_~Input c_SqrtR_~xn~4) c_SqrtR_~xn~4) (fp.add RNE (fp.neg ((_ to_fp 11 53) RNE 10.0)) (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE 3.0) c_SqrtR_~Input) c_SqrtR_~xn~4) c_SqrtR_~xn~4))))) ((_ to_fp 11 53) RNE 8.0))) (= c_SqrtR_~residu~4_primed (fp.mul RNE ((_ to_fp 11 53) RNE 2.0) (fp.sub RNE c_SqrtR_~xnp1~4_primed c_SqrtR_~xn~4))) (= c_SqrtR_~xn~4_primed c_SqrtR_~xnp1~4_primed) (= c_SqrtR_~lsup~4_primed (fp.mul RNE c_~_EPS (fp.add RNE c_SqrtR_~xn~4_primed c_SqrtR_~xnp1~4_primed))) (= c_SqrtR_~linf~4_primed (fp.neg c_SqrtR_~lsup~4_primed)) (= c_SqrtR_~cond~4_primed (ite (or (fp.gt c_SqrtR_~residu~4_primed c_SqrtR_~lsup~4_primed) (fp.lt c_SqrtR_~residu~4_primed c_SqrtR_~linf~4_primed)) (_ bv1 32) (_ bv0 32))) (= (bvadd c_SqrtR_~i~4_primed (_ bv4294967295 32)) c_SqrtR_~i~4)))
(assert (= |c_SqrtR_#in~Input| c_SqrtR_~Input))
(check-sat)
(exit)
