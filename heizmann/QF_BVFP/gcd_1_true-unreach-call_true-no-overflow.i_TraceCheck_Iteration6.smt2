(set-info :smt-lib-version 2.6)
(set-logic QF_BVFP)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements 
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by 
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2017 [5,6].

This script might _not_ contain all SMT commands that are used by 
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2017-05-01, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)


[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Wen Chen, Daniel Dietsch, Marius Greitschus, 
Alexander Nutz, Betim Musa, Claus Schätzle, Christian Schilling, 
Frank Schüssele, Andreas Podelski:
Ultimate Automizer with an On-Demand Construction of Floyd-Hoare 
Automata - (Competition Contribution). TACAS (2) 2017: 394-398
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model 
Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Software Verification with Validation of Results - 
(Report on SV-COMP 2017). TACAS (2) 2017: 331-349
[6] https://sv-comp.sosy-lab.org/2017/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |main_#t~nondet1_3| () (_ BitVec 8))
(declare-fun |main_#t~nondet0_3| () (_ BitVec 8))
(declare-fun main_~x~7_4 () (_ BitVec 8))
(declare-fun main_~y~7_4 () (_ BitVec 8))
(declare-fun |gcd_test_#in~a_6| () (_ BitVec 8))
(declare-fun |gcd_test_#in~b_6| () (_ BitVec 8))
(declare-fun gcd_test_~b_7 () (_ BitVec 8))
(declare-fun gcd_test_~a_7 () (_ BitVec 8))
(declare-fun gcd_test_~a_8 () (_ BitVec 8))
(declare-fun gcd_test_~b_11 () (_ BitVec 8))
(declare-fun gcd_test_~a_11 () (_ BitVec 8))
(declare-fun gcd_test_~t~5_11 () (_ BitVec 8))
(declare-fun gcd_test_~b_13 () (_ BitVec 8))
(declare-fun gcd_test_~a_13 () (_ BitVec 8))
(declare-fun gcd_test_~t~5_13 () (_ BitVec 8))
(declare-fun |gcd_test_#res_16| () (_ BitVec 8))
(declare-fun |main_#t~ret2_18| () (_ BitVec 8))
(declare-fun main_~g~7_19 () (_ BitVec 8))
(declare-fun |__VERIFIER_assert_#in~cond_20| () (_ BitVec 32))
(declare-fun __VERIFIER_assert_~cond_21 () (_ BitVec 32))
(assert (= main_~x~7_4 |main_#t~nondet0_3|))
(assert (= main_~y~7_4 |main_#t~nondet1_3|))
(assert (bvsgt ((_ sign_extend 24) main_~y~7_4) (_ bv0 32)))
(assert (= (bvsrem ((_ sign_extend 24) main_~x~7_4) ((_ sign_extend 24) main_~y~7_4)) (_ bv0 32)))
(assert (= |gcd_test_#in~a_6| main_~x~7_4))
(assert (= |gcd_test_#in~b_6| main_~y~7_4))
(assert (= gcd_test_~a_7 |gcd_test_#in~a_6|))
(assert (= gcd_test_~b_7 |gcd_test_#in~b_6|))
(assert (bvslt ((_ sign_extend 24) gcd_test_~a_7) (_ bv0 32)))
(assert (= gcd_test_~a_8 ((_ extract 7 0) (bvneg ((_ sign_extend 24) gcd_test_~a_7)))))
(assert (not (bvslt ((_ sign_extend 24) gcd_test_~b_7) (_ bv0 32))))
(assert (not (= ((_ sign_extend 24) gcd_test_~b_7) (_ bv0 32))))
(assert (= gcd_test_~t~5_11 gcd_test_~b_7))
(assert (= gcd_test_~b_11 ((_ extract 7 0) (bvsrem ((_ sign_extend 24) gcd_test_~a_8) ((_ sign_extend 24) gcd_test_~b_7)))))
(assert (= gcd_test_~a_11 gcd_test_~t~5_11))
(assert (not (= ((_ sign_extend 24) gcd_test_~b_11) (_ bv0 32))))
(assert (= gcd_test_~t~5_13 gcd_test_~b_11))
(assert (= gcd_test_~b_13 ((_ extract 7 0) (bvsrem ((_ sign_extend 24) gcd_test_~a_11) ((_ sign_extend 24) gcd_test_~b_11)))))
(assert (= gcd_test_~a_13 gcd_test_~t~5_13))
(assert (= ((_ sign_extend 24) gcd_test_~b_13) (_ bv0 32)))
(assert (= |gcd_test_#res_16| gcd_test_~a_13))
(assert (= |main_#t~ret2_18| |gcd_test_#res_16|))
(assert (= main_~g~7_19 |main_#t~ret2_18|))
(assert (= |__VERIFIER_assert_#in~cond_20| (ite (= ((_ sign_extend 24) main_~g~7_19) ((_ sign_extend 24) main_~y~7_4)) (_ bv1 32) (_ bv0 32))))
(assert (= __VERIFIER_assert_~cond_21 |__VERIFIER_assert_#in~cond_20|))
(assert (= __VERIFIER_assert_~cond_21 (_ bv0 32)))
(check-sat)
(exit)
