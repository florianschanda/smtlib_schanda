(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int4 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned32 unsigned32) Bool)
(declare-const dummy1 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant1 ((temp___expr_258 (_ BitVec 32)) (temp___is_init_255 Bool) (temp___skip_constant_256 Bool) (temp___do_toplevel_257 Bool)) Bool true)
(declare-sort rritemtype 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (rritemtype rritemtype) Bool)
(declare-const dummy2 rritemtype)
(declare-datatypes () ((rritemtype__ref (mk_rritemtype__ref (rritemtype__content rritemtype)))))
(define-fun rritemtype__ref___projection ((a rritemtype__ref)) rritemtype (rritemtype__content a))
(define-fun dynamic_invariant2 ((temp___expr_270 Int) (temp___is_init_267 Bool) (temp___skip_constant_268 Bool) (temp___do_toplevel_269 Bool)) Bool (=> (or (= temp___is_init_267 true) (<= 0 10)) (in_range2 temp___expr_270)))
(declare-sort linelengthindex 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 256)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (linelengthindex linelengthindex) Bool)
(declare-const dummy3 linelengthindex)
(declare-datatypes () ((linelengthindex__ref (mk_linelengthindex__ref (linelengthindex__content linelengthindex)))))
(define-fun linelengthindex__ref___projection ((a linelengthindex__ref)) linelengthindex (linelengthindex__content a))
(define-fun dynamic_invariant3 ((temp___expr_276 Int) (temp___is_init_273 Bool) (temp___skip_constant_274 Bool) (temp___do_toplevel_275 Bool)) Bool (=> (or (= temp___is_init_273 true) (<= 1 256)) (in_range3 temp___expr_276)))
(declare-sort character 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (character character) Bool)
(declare-const dummy4 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (byte byte) Bool)
(declare-const dummy5 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep1 (byte) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int5 ((x byte)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int5 x)) :pattern ((to_int5 x)))))
(declare-sort query_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (query_type query_type) Bool)
(declare-const dummy6 query_type)
(declare-datatypes () ((query_type__ref (mk_query_type__ref (query_type__content query_type)))))
(define-fun query_type__ref___projection ((a query_type__ref)) query_type (query_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_509 Int) (temp___is_init_506 Bool) (temp___skip_constant_507 Bool) (temp___do_toplevel_508 Bool)) Bool (=> (or (= temp___is_init_506 true) (<= 0 18)) (in_range5 temp___expr_509)))
(declare-fun to_rep2 (query_type) Int)
(declare-fun of_rep2 (Int) query_type)
(assert (forall ((x query_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x query_type)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int byte))))))
(declare-fun slide1 ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int byte) Int Int (Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (byte Int) (Array Int byte))
(assert (forall ((v byte)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_150 Int)) (=> (and (<= a__first temp___idx_150) (<= temp___idx_150 a__last)) (= (to_rep1 (select a temp___idx_150)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_150))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_150 Int)) (=> (and (<= a__first temp___idx_150) (<= temp___idx_150 a__last)) (= (to_rep1 (select a temp___idx_150)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_150)))))))))))
(declare-fun compare1 ((Array Int byte) Int Int (Array Int byte) Int Int) Int)
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-fun getrecordtype ((Array Int character) Int Int) Int)
(declare-fun getrecordtype__function_guard (Int (Array Int character) Int Int) Bool)
(assert (forall ((s (Array Int character))) (forall ((begidx Int) (endidx Int)) (! (=> (and (and (dynamic_invariant3 begidx true true true) (dynamic_invariant3 endidx true true true)) (<= begidx endidx)) (dynamic_invariant4 (getrecordtype s begidx endidx) true false true)) :pattern ((getrecordtype s begidx endidx))))))
(declare-sort recordtypeindexvalue 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq7 (recordtypeindexvalue recordtypeindexvalue) Bool)
(declare-const dummy7 recordtypeindexvalue)
(declare-datatypes () ((recordtypeindexvalue__ref (mk_recordtypeindexvalue__ref (recordtypeindexvalue__content recordtypeindexvalue)))))
(define-fun recordtypeindexvalue__ref___projection ((a recordtypeindexvalue__ref)) recordtypeindexvalue (recordtypeindexvalue__content a))
(define-fun dynamic_invariant5 ((temp___expr_1129 Int) (temp___is_init_1126 Bool) (temp___skip_constant_1127 Bool) (temp___do_toplevel_1128 Bool)) Bool (=> (or (= temp___is_init_1126 true) (<= 0 32)) (in_range6 temp___expr_1129)))
(declare-sort recordtypearrayindex 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq8 (recordtypearrayindex recordtypearrayindex) Bool)
(declare-const dummy8 recordtypearrayindex)
(declare-datatypes () ((recordtypearrayindex__ref (mk_recordtypearrayindex__ref (recordtypearrayindex__content recordtypearrayindex)))))
(define-fun recordtypearrayindex__ref___projection ((a recordtypearrayindex__ref)) recordtypearrayindex (recordtypearrayindex__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int query_type))))))
(declare-fun slide2 ((Array Int query_type) Int Int) (Array Int query_type))
(assert (forall ((a (Array Int query_type))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int query_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int query_type) Int Int (Array Int query_type) Int Int) (Array Int query_type))
(assert (forall ((a (Array Int query_type)) (b (Array Int query_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 (query_type Int) (Array Int query_type))
(assert (forall ((v query_type)) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq2 ((a (Array Int query_type)) (a__first Int) (a__last Int) (b (Array Int query_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_181 Int)) (=> (and (<= a__first temp___idx_181) (<= temp___idx_181 a__last)) (= (to_rep2 (select a temp___idx_181)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_181))))))) true false))
(assert (forall ((a (Array Int query_type)) (b (Array Int query_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_181 Int)) (=> (and (<= a__first temp___idx_181) (<= temp___idx_181 a__last)) (= (to_rep2 (select a temp___idx_181)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_181)))))))))))
(declare-fun compare2 ((Array Int query_type) Int Int (Array Int query_type) Int Int) Int)
(assert (forall ((a (Array Int query_type)) (b (Array Int query_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare2 a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int query_type)) (b (Array Int query_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare2 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int query_type)) (b (Array Int query_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare2 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(declare-sort blocknumbervalue 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq9 (blocknumbervalue blocknumbervalue) Bool)
(declare-const dummy9 blocknumbervalue)
(declare-datatypes () ((blocknumbervalue__ref (mk_blocknumbervalue__ref (blocknumbervalue__content blocknumbervalue)))))
(define-fun blocknumbervalue__ref___projection ((a blocknumbervalue__ref)) blocknumbervalue (blocknumbervalue__content a))
(define-fun dynamic_invariant6 ((temp___expr_1150 Int) (temp___is_init_1147 Bool) (temp___skip_constant_1148 Bool) (temp___do_toplevel_1149 Bool)) Bool (=> (or (= temp___is_init_1147 true) (<= 0 32)) (in_range8 temp___expr_1150)))
(declare-sort blocknumberarrayindex 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq10 (blocknumberarrayindex blocknumberarrayindex) Bool)
(declare-const dummy10 blocknumberarrayindex)
(declare-datatypes () ((blocknumberarrayindex__ref (mk_blocknumberarrayindex__ref (blocknumberarrayindex__content blocknumberarrayindex)))))
(define-fun blocknumberarrayindex__ref___projection ((a blocknumberarrayindex__ref)) blocknumberarrayindex (blocknumberarrayindex__content a))
(declare-sort blocklengthvalue 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq11 (blocklengthvalue blocklengthvalue) Bool)
(declare-const dummy11 blocklengthvalue)
(declare-datatypes () ((blocklengthvalue__ref (mk_blocklengthvalue__ref (blocklengthvalue__content blocklengthvalue)))))
(define-fun blocklengthvalue__ref___projection ((a blocklengthvalue__ref)) blocklengthvalue (blocklengthvalue__content a))
(define-fun dynamic_invariant7 ((temp___expr_1171 Int) (temp___is_init_1168 Bool) (temp___skip_constant_1169 Bool) (temp___do_toplevel_1170 Bool)) Bool (=> (or (= temp___is_init_1168 true) (<= 1 32)) (in_range10 temp___expr_1171)))
(declare-fun to_rep3 (blocklengthvalue) Int)
(declare-fun of_rep3 (Int) blocklengthvalue)
(assert (forall ((x blocklengthvalue)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x blocklengthvalue)) (! (in_range10 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int blocklengthvalue))))))
(declare-fun slide3 ((Array Int blocklengthvalue) Int Int) (Array Int blocklengthvalue))
(assert (forall ((a (Array Int blocklengthvalue))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int blocklengthvalue))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(declare-fun concat4 ((Array Int blocklengthvalue) Int Int (Array Int blocklengthvalue) Int Int) (Array Int blocklengthvalue))
(assert (forall ((a (Array Int blocklengthvalue)) (b (Array Int blocklengthvalue))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat4 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton4 (blocklengthvalue Int) (Array Int blocklengthvalue))
(assert (forall ((v blocklengthvalue)) (forall ((i Int)) (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i))))))
(define-fun bool_eq3 ((a (Array Int blocklengthvalue)) (a__first Int) (a__last Int) (b (Array Int blocklengthvalue)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_182 Int)) (=> (and (<= a__first temp___idx_182) (<= temp___idx_182 a__last)) (= (to_rep3 (select a temp___idx_182)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_182))))))) true false))
(assert (forall ((a (Array Int blocklengthvalue)) (b (Array Int blocklengthvalue))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_182 Int)) (=> (and (<= a__first temp___idx_182) (<= temp___idx_182 a__last)) (= (to_rep3 (select a temp___idx_182)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_182)))))))))))
(declare-fun compare3 ((Array Int blocklengthvalue) Int Int (Array Int blocklengthvalue) Int Int) Int)
(assert (forall ((a (Array Int blocklengthvalue)) (b (Array Int blocklengthvalue))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare3 a a_first a_last b b_first b_last) 0) (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int blocklengthvalue)) (b (Array Int blocklengthvalue))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare3 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq3 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int blocklengthvalue)) (b (Array Int blocklengthvalue))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare3 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq3 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(declare-const dummy12 (Array Int byte))
(declare-const value__size Int)
(declare-fun object__size ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int byte)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))
(declare-fun user_eq12 ((Array Int byte) (Array Int byte)) Bool)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int byte)))))))
(declare-fun slide4 ((Array Int (Array Int byte)) Int Int) (Array Int (Array Int byte)))
(assert (forall ((a (Array Int (Array Int byte)))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int (Array Int byte)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(declare-fun concat5 ((Array Int (Array Int byte)) Int Int (Array Int (Array Int byte)) Int Int) (Array Int (Array Int byte)))
(assert (forall ((a (Array Int (Array Int byte))) (b (Array Int (Array Int byte)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat5 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton5 ((Array Int byte) Int) (Array Int (Array Int byte)))
(assert (forall ((v (Array Int byte))) (forall ((i Int)) (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i))))))
(define-fun bool_eq4 ((a (Array Int (Array Int byte))) (a__first Int) (a__last Int) (b (Array Int (Array Int byte))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_183 Int)) (=> (and (<= a__first temp___idx_183) (<= temp___idx_183 a__last)) (= (bool_eq1 (select a temp___idx_183) 1 32 (select b (+ (- b__first a__first) temp___idx_183)) 1 32) true)))) true false))
(assert (forall ((a (Array Int (Array Int byte))) (b (Array Int (Array Int byte)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_183 Int)) (=> (and (<= a__first temp___idx_183) (<= temp___idx_183 a__last)) (= (bool_eq1 (select a temp___idx_183) 1 32 (select b (+ (- b__first a__first) temp___idx_183)) 1 32) true))))))))
(declare-const rrstring (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const linecount (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-sort blockmapindex 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE13 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) (_ BitVec 8))
(declare-fun user_eq13 (blockmapindex blockmapindex) Bool)
(declare-const dummy13 blockmapindex)
(declare-datatypes () ((blockmapindex__ref (mk_blockmapindex__ref (blockmapindex__content blockmapindex)))))
(define-fun blockmapindex__ref___projection ((a blockmapindex__ref)) blockmapindex (blockmapindex__content a))
(define-fun dynamic_invariant8 ((temp___expr_1389 (_ BitVec 8)) (temp___is_init_1386 Bool) (temp___skip_constant_1387 Bool) (temp___do_toplevel_1388 Bool)) Bool true)
(declare-datatypes () ((map__ref5 (mk_map__ref5 (map__content5 (Array (_ BitVec 8) Bool))))))
(declare-fun slide5 ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(assert (forall ((a (Array (_ BitVec 8) Bool))) (forall ((first (_ BitVec 8))) (! (= (slide5 a first first) a) :pattern ((slide5 a first first))))))
(assert (forall ((a (Array (_ BitVec 8) Bool))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide5 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide5 a old_first new_first) i))))))))
(declare-fun concat6 ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat6 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat6 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select (concat6 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton6 (Bool (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(assert (forall ((v Bool)) (forall ((i (_ BitVec 8))) (! (= (select (singleton6 v i) i) v) :pattern ((select (singleton6 v i) i))))))
(define-fun bool_eq5 ((a (Array (_ BitVec 8) Bool)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) Bool)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_207 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_207) (bvule temp___idx_207 a__last)) (= (select a temp___idx_207) (select b (bvadd (bvsub b__first a__first) temp___idx_207)))))) true false))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_207 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_207) (bvule temp___idx_207 a__last)) (= (select a temp___idx_207) (select b (bvadd (bvsub b__first a__first) temp___idx_207))))))))))
(declare-fun compare4 ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) Int)
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (! (= (= (compare4 a a_first a_last b b_first b_last) 0) (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern ((compare4 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (! (= (< (compare4 a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 8)) (j (_ BitVec 8))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq5 a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (< (to_int3 (select a (bvadd i #x01))) (to_int3 (select b (bvadd j #x01))))))))))) :pattern ((compare4 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (! (= (< 0 (compare4 a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 8)) (j (_ BitVec 8))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq5 a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (< (to_int3 (select b (bvadd i #x01))) (to_int3 (select a (bvadd j #x01))))))))))) :pattern ((compare4 a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(declare-fun andb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(declare-fun orb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(declare-fun notb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (=> (and (bvule a_first i) (bvule i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (=> (and (bvule a_first i) (bvule i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (=> (and (bvule a_first i) (bvule i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array (_ BitVec 8) Bool))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (=> (and (bvule a_first i) (bvule i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-datatypes () ((map__ref6 (mk_map__ref6 (map__content6 (Array (_ BitVec 8) blocklengthvalue))))))
(declare-fun slide6 ((Array (_ BitVec 8) blocklengthvalue) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) blocklengthvalue))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue))) (forall ((first (_ BitVec 8))) (! (= (slide6 a first first) a) :pattern ((slide6 a first first))))))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide6 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide6 a old_first new_first) i))))))))
(declare-fun concat7 ((Array (_ BitVec 8) blocklengthvalue) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) blocklengthvalue) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) blocklengthvalue))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue)) (b (Array (_ BitVec 8) blocklengthvalue))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat7 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat7 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select (concat7 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton7 (blocklengthvalue (_ BitVec 8)) (Array (_ BitVec 8) blocklengthvalue))
(assert (forall ((v blocklengthvalue)) (forall ((i (_ BitVec 8))) (! (= (select (singleton7 v i) i) v) :pattern ((select (singleton7 v i) i))))))
(define-fun bool_eq6 ((a (Array (_ BitVec 8) blocklengthvalue)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) blocklengthvalue)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_208 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_208) (bvule temp___idx_208 a__last)) (= (to_rep3 (select a temp___idx_208)) (to_rep3 (select b (bvadd (bvsub b__first a__first) temp___idx_208))))))) true false))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue)) (b (Array (_ BitVec 8) blocklengthvalue))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_208 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_208) (bvule temp___idx_208 a__last)) (= (to_rep3 (select a temp___idx_208)) (to_rep3 (select b (bvadd (bvsub b__first a__first) temp___idx_208)))))))))))
(declare-fun compare5 ((Array (_ BitVec 8) blocklengthvalue) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) blocklengthvalue) (_ BitVec 8) (_ BitVec 8)) Int)
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue)) (b (Array (_ BitVec 8) blocklengthvalue))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (! (= (= (compare5 a a_first a_last b b_first b_last) 0) (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern ((compare5 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue)) (b (Array (_ BitVec 8) blocklengthvalue))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (! (= (< (compare5 a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 8)) (j (_ BitVec 8))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq6 a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (< (to_rep3 (select a (bvadd i #x01))) (to_rep3 (select b (bvadd j #x01))))))))))) :pattern ((compare5 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue)) (b (Array (_ BitVec 8) blocklengthvalue))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (! (= (< 0 (compare5 a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 8)) (j (_ BitVec 8))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq6 a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (< (to_rep3 (select b (bvadd i #x01))) (to_rep3 (select a (bvadd j #x01))))))))))) :pattern ((compare5 a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-sort source 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq14 (source source) Bool)
(declare-const dummy14 source)
(declare-datatypes () ((source__ref (mk_source__ref (source__content source)))))
(define-fun source__ref___projection ((a source__ref)) source (source__content a))
(define-fun dynamic_invariant9 ((temp___expr_1413 Int) (temp___is_init_1410 Bool) (temp___skip_constant_1411 Bool) (temp___do_toplevel_1412 Bool)) Bool (=> (or (= temp___is_init_1410 true) (<= 0 18)) (in_range11 temp___expr_1413)))
(declare-sort target 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE15 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) (_ BitVec 16))
(declare-fun user_eq15 (target target) Bool)
(declare-const dummy15 target)
(declare-datatypes () ((target__ref (mk_target__ref (target__content target)))))
(define-fun target__ref___projection ((a target__ref)) target (target__content a))
(define-fun dynamic_invariant10 ((temp___expr_1419 (_ BitVec 16)) (temp___is_init_1416 Bool) (temp___skip_constant_1417 Bool) (temp___do_toplevel_1418 Bool)) Bool true)
(declare-fun from_query_type (Int) (_ BitVec 16))
(declare-fun from_query_type__function_guard ((_ BitVec 16) Int) Bool)
(assert (forall ((s Int)) (! (=> (dynamic_invariant9 s true true true) (dynamic_invariant10 (from_query_type s) true false true)) :pattern ((from_query_type s)))))
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const r60b Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-sort integer 0)
(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)
(declare-fun user_eq16 (integer integer) Bool)
(declare-const dummy16 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep4 (integer) Int)
(declare-fun of_rep4 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x integer)) (! (in_range12 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range12 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)
(declare-fun user_eq17 (integer integer) Bool)
(declare-const dummy17 integer)
(declare-datatypes () ((t61b__ref (mk_t61b__ref (t61b__content integer)))))
(define-fun t61b__ref___projection ((a t61b__ref)) integer (t61b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const r62b Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)
(declare-fun user_eq18 (integer integer) Bool)
(declare-const dummy18 integer)
(declare-datatypes () ((t63b__ref (mk_t63b__ref (t63b__content integer)))))
(define-fun t63b__ref___projection ((a t63b__ref)) integer (t63b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-fun zone_file_parser__fillblockinfo__blockmap__aggregate_def (Bool) (Array (_ BitVec 8) Bool))
(assert (forall ((temp___1587 Bool)) (forall ((temp___1588 (_ BitVec 8))) (= (select (zone_file_parser__fillblockinfo__blockmap__aggregate_def temp___1587) temp___1588) temp___1587))))
(declare-fun zone_file_parser__fillblockinfo__blocklengthmap__aggregate_def (Int) (Array (_ BitVec 8) blocklengthvalue))
(assert (forall ((temp___1590 Int)) (forall ((temp___1591 (_ BitVec 8))) (= (select (zone_file_parser__fillblockinfo__blocklengthmap__aggregate_def temp___1590) temp___1591) (of_rep3 temp___1590)))))
(declare-fun temp___1592 (Int) (Array Int query_type))
(assert (forall ((temp___1594 Int)) (forall ((temp___1595 Int)) (= (select (temp___1592 temp___1594) temp___1595) (of_rep2 temp___1594)))))
(declare-fun temp___1596 ((_ BitVec 8)) (Array Int byte))
(assert (forall ((temp___1598 (_ BitVec 8))) (forall ((temp___1599 Int)) (= (select (temp___1596 temp___1598) temp___1599) (of_rep1 temp___1598)))))
(declare-fun temp___1600 (Int) (Array Int blocklengthvalue))
(assert (forall ((temp___1602 Int)) (forall ((temp___1603 Int)) (= (select (temp___1600 temp___1602) temp___1603) (of_rep3 temp___1602)))))
(declare-fun temp___1604 ((Array Int byte)) (Array Int (Array Int byte)))
(assert (forall ((temp___1606 (Array Int byte))) (forall ((temp___1607 Int)) (= (select (temp___1604 temp___1606) temp___1607) temp___1606))))
(declare-fun temp___1608 ((_ BitVec 8)) (Array Int byte))
(assert (forall ((temp___1610 (_ BitVec 8))) (forall ((temp___1611 Int)) (= (select (temp___1608 temp___1610) temp___1611) (of_rep1 temp___1610)))))
(declare-fun temp___1633 ((Array Int byte)) (Array Int (Array Int byte)))
(assert (forall ((temp___1635 (Array Int byte))) (forall ((temp___1636 Int)) (= (select (temp___1633 temp___1635) temp___1636) temp___1635))))
(declare-fun temp___1637 ((_ BitVec 8)) (Array Int byte))
(assert (forall ((temp___1639 (_ BitVec 8))) (forall ((temp___1640 Int)) (= (select (temp___1637 temp___1639) temp___1640) (of_rep1 temp___1639)))))
(define-fun dynamic_invariant11 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range4 temp___expr_63)))
(define-fun dynamic_invariant12 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range12 temp___expr_15)))
(define-fun dynamic_invariant13 ((temp___expr_457 (_ BitVec 8)) (temp___is_init_454 Bool) (temp___skip_constant_455 Bool) (temp___do_toplevel_456 Bool)) Bool true)
(define-fun dynamic_invariant14 ((temp___expr_1135 Int) (temp___is_init_1132 Bool) (temp___skip_constant_1133 Bool) (temp___do_toplevel_1134 Bool)) Bool (=> (or (= temp___is_init_1132 true) (<= 1 32)) (in_range7 temp___expr_1135)))
(define-fun dynamic_invariant15 ((temp___expr_1156 Int) (temp___is_init_1153 Bool) (temp___skip_constant_1154 Bool) (temp___do_toplevel_1155 Bool)) Bool (=> (or (= temp___is_init_1153 true) (<= 1 32)) (in_range9 temp___expr_1156)))
(declare-const numberofrecordtypes Int)
(declare-const recordtypes (Array Int query_type))
(declare-const numberofblocks Int)
(declare-const blocknumbers (Array Int byte))
(declare-const blocklengths (Array Int blocklengthvalue))
(declare-const bitmaps (Array Int (Array Int byte)))
(declare-const success Bool)
(declare-const blockmap (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx Int)
(declare-const endidx Int)
(declare-const foundtype Int)
(declare-const recordtype Int)
(declare-const blocknumber (_ BitVec 8))
(declare-const blocknumberoffirstrecordtype (_ BitVec 8))
(declare-const blockindex Int)
(declare-const bytenumber Int)
(declare-const bitnumber Int)
(declare-const i (_ BitVec 8))
(declare-const i1 Int)
(declare-const j Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 query_type)
(declare-const o3 Int)
(declare-const o4 (Array Int query_type))
(declare-const o5 (_ BitVec 16))
(declare-const o6 (_ BitVec 16))
(declare-const o7 (_ BitVec 16))
(declare-const o8 (_ BitVec 16))
(declare-const o9 (_ BitVec 8))
(declare-const o10 Int)
(declare-const o11 (_ BitVec 16))
(declare-const o12 (_ BitVec 16))
(declare-const o13 (_ BitVec 16))
(declare-const o14 (_ BitVec 16))
(declare-const o15 (_ BitVec 16))
(declare-const o16 (_ BitVec 16))
(declare-const o17 (_ BitVec 16))
(declare-const o18 (_ BitVec 16))
(declare-const o19 Int)
(declare-const o20 blocklengthvalue)
(declare-const o21 (Array (_ BitVec 8) blocklengthvalue))
(declare-const temp___1623 Int)
(declare-const temp___1624 Int)
(declare-const temp___1621 (Array (_ BitVec 8) Bool))
(declare-const temp___1620 Int)
(declare-const temp___1619 Int)
(declare-const temp___1618 (_ BitVec 8))
(declare-const temp___1616 (Array Int query_type))
(declare-const temp___1615 Int)
(declare-const temp___1613 (Array (_ BitVec 8) blocklengthvalue))
(declare-const temp___1612 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 query_type)
(declare-const o25 Int)
(declare-const o26 (Array Int query_type))
(declare-const o27 (_ BitVec 16))
(declare-const o28 (_ BitVec 16))
(declare-const o29 (_ BitVec 16))
(declare-const o30 (_ BitVec 16))
(declare-const o31 (_ BitVec 8))
(declare-const o32 (_ BitVec 16))
(declare-const o33 (_ BitVec 16))
(declare-const o34 (_ BitVec 16))
(declare-const o35 (_ BitVec 16))
(declare-const o36 (_ BitVec 16))
(declare-const o37 (_ BitVec 16))
(declare-const o38 (_ BitVec 16))
(declare-const o39 (_ BitVec 16))
(declare-const o40 Int)
(declare-const o41 blocklengthvalue)
(declare-const o42 (Array (_ BitVec 8) blocklengthvalue))
(declare-const temp___1629 (Array Int blocklengthvalue))
(declare-const temp___1627 (Array Int byte))
(declare-const temp___1626 Int)
(declare-const temp___1625 (_ BitVec 8))
(declare-const o43 Int)
(declare-const o44 byte)
(declare-const o45 Int)
(declare-const o46 (Array Int byte))
(declare-const o47 blocklengthvalue)
(declare-const o48 Int)
(declare-const o49 (Array Int blocklengthvalue))
(declare-const temp___1654 Int)
(declare-const temp___1653 Int)
(declare-const temp___1652 Int)
(declare-const temp___1649 (Array Int (Array Int byte)))
(declare-const temp___1648 Int)
(declare-const temp___1642 Int)
(declare-const temp___1641 Int)
(declare-const o50 (_ BitVec 16))
(declare-const o51 (_ BitVec 16))
(declare-const o52 (_ BitVec 16))
(declare-const o53 (_ BitVec 16))
(declare-const o54 (_ BitVec 8))
(declare-const o55 (_ BitVec 16))
(declare-const o56 (_ BitVec 16))
(declare-const o57 (_ BitVec 16))
(declare-const o58 (_ BitVec 16))
(declare-const o59 (_ BitVec 16))
(declare-const o60 (_ BitVec 16))
(declare-const o61 (_ BitVec 16))
(declare-const o62 (_ BitVec 16))
(declare-const o63 Int)
(declare-const o64 (_ BitVec 16))
(declare-const o65 (_ BitVec 16))
(declare-const o66 Int)
(declare-const o67 Int)
(declare-const temp___1645 (Array Int byte))
(declare-const o68 byte)
(declare-const temp___1646 Int)
(declare-const o69 (_ BitVec 8))
(declare-const o70 (_ BitVec 8))
(declare-const o71 (_ BitVec 8))
(declare-const o72 byte)
(declare-const o73 (Array Int byte))
(declare-const o74 Int)
(declare-const o75 (Array Int (Array Int byte)))
(declare-const success1 Bool)
(declare-const recordtype1 Int)
(declare-const blocknumber1 (_ BitVec 8))
(declare-const blocknumberoffirstrecordtype1 (_ BitVec 8))
(declare-const blockindex1 Int)
(declare-const bytenumber1 Int)
(declare-const bitnumber1 Int)
(declare-const i2 (_ BitVec 8))
(declare-const i3 Int)
(declare-const j1 Int)
(declare-const result map__ref5)
(declare-const blockmap1 (Array (_ BitVec 8) Bool))
(declare-const result1 map__ref6)
(declare-const blocklengthmap1 (Array (_ BitVec 8) blocklengthvalue))
(declare-const result2 int__ref)
(declare-const numberofrecordtypes1 Int)
(declare-const result3 map__ref2)
(declare-const recordtypes1 (Array Int query_type))
(declare-const result4 int__ref)
(declare-const numberofblocks1 Int)
(declare-const result5 map__ref1)
(declare-const blocknumbers1 (Array Int byte))
(declare-const result6 map__ref3)
(declare-const blocklengths1 (Array Int blocklengthvalue))
(declare-const result7 map__ref4)
(declare-const bitmaps1 (Array Int (Array Int byte)))
(declare-const result8 int__ref)
(declare-const begidx1 Int)
(declare-const begidx2 Int)
(declare-const endidx1 Int)
(declare-const foundtype1 Int)
(declare-const result9 bool__ref)
(declare-const success2 Bool)
(declare-const result10 int__ref)
(declare-const recordtype2 Int)
(declare-const result11 int__ref)
(declare-const numberofrecordtypes2 Int)
(declare-const result12 map__ref2)
(declare-const recordtypes2 (Array Int query_type))
(declare-const result13 t__ref)
(declare-const blocknumberoffirstrecordtype2 (_ BitVec 8))
(declare-const result14 map__ref5)
(declare-const blockmap2 (Array (_ BitVec 8) Bool))
(declare-const result15 int__ref)
(declare-const numberofblocks2 Int)
(declare-const result16 int__ref)
(declare-const bytenumber2 Int)
(declare-const result17 map__ref6)
(declare-const blocklengthmap2 (Array (_ BitVec 8) blocklengthvalue))
(declare-const numberofrecordtypes3 Int)
(declare-const recordtypes3 (Array Int query_type))
(declare-const blockmap3 (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap3 (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx3 Int)
(declare-const endidx2 Int)
(declare-const foundtype2 Int)
(declare-const recordtype3 Int)
(declare-const blocknumber2 (_ BitVec 8))
(declare-const bytenumber3 Int)
(declare-const begidx4 Int)
(declare-const endidx3 Int)
(declare-const foundtype3 Int)
(declare-const result18 int__ref)
(declare-const recordtype4 Int)
(declare-const result19 int__ref)
(declare-const numberofrecordtypes4 Int)
(declare-const result20 map__ref2)
(declare-const recordtypes4 (Array Int query_type))
(declare-const result21 t__ref)
(declare-const blocknumber3 (_ BitVec 8))
(declare-const result22 map__ref5)
(declare-const blockmap4 (Array (_ BitVec 8) Bool))
(declare-const result23 int__ref)
(declare-const bytenumber4 Int)
(declare-const result24 map__ref6)
(declare-const blocklengthmap4 (Array (_ BitVec 8) blocklengthvalue))
(declare-const numberofrecordtypes5 int__ref)
(declare-const recordtypes5 map__ref2)
(declare-const blockmap5 map__ref5)
(declare-const blocklengthmap5 map__ref6)
(declare-const begidx5 int__ref)
(declare-const endidx4 int__ref)
(declare-const foundtype4 int__ref)
(declare-const recordtype5 int__ref)
(declare-const blocknumber4 t__ref)
(declare-const bytenumber5 int__ref)
(declare-const numberofrecordtypes6 Int)
(declare-const recordtypes6 (Array Int query_type))
(declare-const blockmap6 (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap6 (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx6 Int)
(declare-const endidx5 Int)
(declare-const foundtype5 Int)
(declare-const recordtype6 Int)
(declare-const blocknumber5 (_ BitVec 8))
(declare-const bytenumber6 Int)
(declare-const numberofrecordtypes7 int__ref)
(declare-const recordtypes7 map__ref2)
(declare-const blockmap7 map__ref5)
(declare-const blocklengthmap7 map__ref6)
(declare-const begidx7 int__ref)
(declare-const endidx6 int__ref)
(declare-const foundtype6 int__ref)
(declare-const recordtype7 int__ref)
(declare-const blocknumber6 t__ref)
(declare-const bytenumber7 int__ref)
(declare-const numberofrecordtypes8 Int)
(declare-const recordtypes8 (Array Int query_type))
(declare-const blockmap8 (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap8 (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx8 Int)
(declare-const endidx7 Int)
(declare-const foundtype7 Int)
(declare-const recordtype8 Int)
(declare-const blocknumber7 (_ BitVec 8))
(declare-const bytenumber8 Int)
(declare-const numberofrecordtypes9 int__ref)
(declare-const recordtypes9 map__ref2)
(declare-const blockmap9 map__ref5)
(declare-const blocklengthmap9 map__ref6)
(declare-const begidx9 int__ref)
(declare-const endidx8 int__ref)
(declare-const foundtype8 int__ref)
(declare-const recordtype9 int__ref)
(declare-const blocknumber8 t__ref)
(declare-const bytenumber9 int__ref)
(declare-const numberofrecordtypes10 Int)
(declare-const recordtypes10 (Array Int query_type))
(declare-const blockmap10 (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap10 (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx10 Int)
(declare-const endidx9 Int)
(declare-const foundtype9 Int)
(declare-const recordtype10 Int)
(declare-const blocknumber9 (_ BitVec 8))
(declare-const bytenumber10 Int)
(declare-const result25 t__ref)
(declare-const i4 (_ BitVec 8))
(declare-const numberofblocks3 Int)
(declare-const blocknumbers2 (Array Int byte))
(declare-const blocklengths2 (Array Int blocklengthvalue))
(declare-const i5 (_ BitVec 8))
(declare-const result26 int__ref)
(declare-const numberofblocks4 Int)
(declare-const result27 map__ref1)
(declare-const blocknumbers3 (Array Int byte))
(declare-const result28 map__ref3)
(declare-const blocklengths3 (Array Int blocklengthvalue))
(declare-const numberofblocks5 int__ref)
(declare-const blocknumbers4 map__ref1)
(declare-const blocklengths4 map__ref3)
(declare-const numberofblocks6 Int)
(declare-const blocknumbers5 (Array Int byte))
(declare-const blocklengths5 (Array Int blocklengthvalue))
(declare-const result29 t__ref)
(declare-const i6 (_ BitVec 8))
(declare-const numberofblocks7 int__ref)
(declare-const blocknumbers6 map__ref1)
(declare-const blocklengths6 map__ref3)
(declare-const i7 t__ref)
(declare-const numberofblocks8 Int)
(declare-const blocknumbers7 (Array Int byte))
(declare-const blocklengths7 (Array Int blocklengthvalue))
(declare-const i8 (_ BitVec 8))
(declare-const numberofblocks9 int__ref)
(declare-const blocknumbers8 map__ref1)
(declare-const blocklengths8 map__ref3)
(declare-const i9 t__ref)
(declare-const numberofblocks10 Int)
(declare-const blocknumbers9 (Array Int byte))
(declare-const blocklengths9 (Array Int blocklengthvalue))
(declare-const i10 (_ BitVec 8))
(declare-const numberofblocks11 int__ref)
(declare-const blocknumbers10 map__ref1)
(declare-const blocklengths10 map__ref3)
(declare-const i11 t__ref)
(declare-const numberofblocks12 Int)
(declare-const blocknumbers11 (Array Int byte))
(declare-const blocklengths11 (Array Int blocklengthvalue))
(declare-const i12 (_ BitVec 8))
(declare-const numberofblocks13 int__ref)
(declare-const blocknumbers12 map__ref1)
(declare-const blocklengths12 map__ref3)
(declare-const i13 t__ref)
(declare-const numberofblocks14 Int)
(declare-const blocknumbers13 (Array Int byte))
(declare-const blocklengths13 (Array Int blocklengthvalue))
(declare-const i14 (_ BitVec 8))
(declare-const result30 map__ref4)
(declare-const bitmaps2 (Array Int (Array Int byte)))
(declare-const result31 int__ref)
(declare-const i15 Int)
(declare-const bitmaps3 (Array Int (Array Int byte)))
(declare-const blockindex2 Int)
(declare-const bytenumber11 Int)
(declare-const bitnumber2 Int)
(declare-const i16 Int)
(declare-const j2 Int)
(declare-const result32 int__ref)
(declare-const blockindex3 Int)
(declare-const result33 int__ref)
(declare-const j3 Int)
(declare-const blockindex4 Int)
(declare-const j4 Int)
(declare-const result34 Bool)
(declare-const result35 int__ref)
(declare-const blockindex5 Int)
(declare-const blockindex6 int__ref)
(declare-const blockindex7 Int)
(declare-const result36 int__ref)
(declare-const j5 Int)
(declare-const blockindex8 int__ref)
(declare-const blockindex9 Int)
(declare-const blockindex10 int__ref)
(declare-const j6 int__ref)
(declare-const blockindex11 Int)
(declare-const j7 Int)
(declare-const blockindex12 int__ref)
(declare-const j8 int__ref)
(declare-const blockindex13 Int)
(declare-const j9 Int)
(declare-const blockindex14 int__ref)
(declare-const j10 int__ref)
(declare-const blockindex15 Int)
(declare-const j11 Int)
(declare-const blockindex16 int__ref)
(declare-const j12 int__ref)
(declare-const blockindex17 Int)
(declare-const j13 Int)
(declare-const result37 int__ref)
(declare-const bytenumber12 Int)
(declare-const result38 int__ref)
(declare-const bitnumber3 Int)
(declare-const result39 map__ref4)
(declare-const bitmaps4 (Array Int (Array Int byte)))
(declare-const result40 int__ref)
(declare-const i17 Int)
(declare-const bitmaps5 map__ref4)
(declare-const blockindex18 int__ref)
(declare-const bytenumber13 int__ref)
(declare-const bitnumber4 int__ref)
(declare-const i18 int__ref)
(declare-const j14 int__ref)
(declare-const bitmaps6 (Array Int (Array Int byte)))
(declare-const blockindex19 Int)
(declare-const bytenumber14 Int)
(declare-const bitnumber5 Int)
(declare-const i19 Int)
(declare-const j15 Int)
(declare-const bitmaps7 map__ref4)
(declare-const blockindex20 int__ref)
(declare-const bytenumber15 int__ref)
(declare-const bitnumber6 int__ref)
(declare-const i20 int__ref)
(declare-const j16 int__ref)
(declare-const bitmaps8 (Array Int (Array Int byte)))
(declare-const blockindex21 Int)
(declare-const bytenumber16 Int)
(declare-const bitnumber7 Int)
(declare-const i21 Int)
(declare-const j17 Int)
(declare-const bitmaps9 map__ref4)
(declare-const blockindex22 int__ref)
(declare-const bytenumber17 int__ref)
(declare-const bitnumber8 int__ref)
(declare-const i22 int__ref)
(declare-const j18 int__ref)
(declare-const bitmaps10 (Array Int (Array Int byte)))
(declare-const blockindex23 Int)
(declare-const bytenumber18 Int)
(declare-const bitnumber9 Int)
(declare-const i23 Int)
(declare-const j19 Int)
(declare-const bitmaps11 map__ref4)
(declare-const blockindex24 int__ref)
(declare-const bytenumber19 int__ref)
(declare-const bitnumber10 int__ref)
(declare-const i24 int__ref)
(declare-const j20 int__ref)
(declare-const bitmaps12 (Array Int (Array Int byte)))
(declare-const blockindex25 Int)
(declare-const bytenumber20 Int)
(declare-const bitnumber11 Int)
(declare-const i25 Int)
(declare-const j21 Int)
(declare-const numberofrecordtypes11 int__ref)
(declare-const recordtypes11 map__ref2)
(declare-const numberofblocks15 int__ref)
(declare-const blocknumbers14 map__ref1)
(declare-const blocklengths14 map__ref3)
(declare-const bitmaps13 map__ref4)
(declare-const success3 bool__ref)
(declare-const blockmap11 map__ref5)
(declare-const blocklengthmap11 map__ref6)
(declare-const begidx11 int__ref)
(declare-const endidx10 int__ref)
(declare-const foundtype10 int__ref)
(declare-const recordtype11 int__ref)
(declare-const blocknumber10 t__ref)
(declare-const blocknumberoffirstrecordtype3 t__ref)
(declare-const blockindex26 int__ref)
(declare-const bytenumber21 int__ref)
(declare-const bitnumber12 int__ref)
(declare-const i26 t__ref)
(declare-const i27 int__ref)
(declare-const j22 int__ref)
(declare-const numberofrecordtypes12 Int)
(declare-const recordtypes12 (Array Int query_type))
(declare-const numberofblocks16 Int)
(declare-const blocknumbers15 (Array Int byte))
(declare-const blocklengths15 (Array Int blocklengthvalue))
(declare-const bitmaps14 (Array Int (Array Int byte)))
(declare-const success4 Bool)
(declare-const blockmap12 (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap12 (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx12 Int)
(declare-const endidx11 Int)
(declare-const foundtype11 Int)
(declare-const recordtype12 Int)
(declare-const blocknumber11 (_ BitVec 8))
(declare-const blocknumberoffirstrecordtype4 (_ BitVec 8))
(declare-const blockindex27 Int)
(declare-const bytenumber22 Int)
(declare-const bitnumber13 Int)
(declare-const i28 (_ BitVec 8))
(declare-const i29 Int)
(declare-const j23 Int)
(declare-const numberofrecordtypes13 int__ref)
(declare-const recordtypes13 map__ref2)
(declare-const numberofblocks17 int__ref)
(declare-const blocknumbers16 map__ref1)
(declare-const blocklengths16 map__ref3)
(declare-const bitmaps15 map__ref4)
(declare-const success5 bool__ref)
(declare-const blockmap13 map__ref5)
(declare-const blocklengthmap13 map__ref6)
(declare-const begidx13 int__ref)
(declare-const endidx12 int__ref)
(declare-const foundtype12 int__ref)
(declare-const recordtype13 int__ref)
(declare-const blocknumber12 t__ref)
(declare-const blocknumberoffirstrecordtype5 t__ref)
(declare-const blockindex28 int__ref)
(declare-const bytenumber23 int__ref)
(declare-const bitnumber14 int__ref)
(declare-const i30 t__ref)
(declare-const i31 int__ref)
(declare-const j24 int__ref)
(declare-const numberofrecordtypes14 Int)
(declare-const recordtypes14 (Array Int query_type))
(declare-const numberofblocks18 Int)
(declare-const blocknumbers17 (Array Int byte))
(declare-const blocklengths17 (Array Int blocklengthvalue))
(declare-const bitmaps16 (Array Int (Array Int byte)))
(declare-const success6 Bool)
(declare-const blockmap14 (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap14 (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx14 Int)
(declare-const endidx13 Int)
(declare-const foundtype13 Int)
(declare-const recordtype14 Int)
(declare-const blocknumber13 (_ BitVec 8))
(declare-const blocknumberoffirstrecordtype6 (_ BitVec 8))
(declare-const blockindex29 Int)
(declare-const bytenumber24 Int)
(declare-const bitnumber15 Int)
(declare-const i32 (_ BitVec 8))
(declare-const i33 Int)
(declare-const j25 Int)
(assert (=> (<= 0 32) (in_range6 numberofrecordtypes)))
(assert (=> (<= 0 32) (in_range8 numberofblocks)))
(assert true)
(assert (= result (mk_map__ref5 blockmap)))
(assert (= blockmap1 (zone_file_parser__fillblockinfo__blockmap__aggregate_def (of_int 0))))
(assert (= result1 (mk_map__ref6 blocklengthmap)))
(assert (= blocklengthmap1 (zone_file_parser__fillblockinfo__blocklengthmap__aggregate_def 1)))
(assert (=> (<= 1 256) (in_range3 begidx)))
(assert (=> (<= 1 256) (in_range3 endidx)))
(assert (=> (<= 0 10) (in_range2 foundtype)))
(assert (=> (<= 0 18) (in_range5 recordtype)))
(assert true)
(assert true)
(assert (=> (<= 0 32) (in_range8 blockindex)))
(assert (=> (<= 1 32) (in_range10 bytenumber)))
(assert (=> (<= 0 2147483647) (in_range1 bitnumber)))
(assert (= result2 (mk_int__ref numberofrecordtypes)))
(assert (= numberofrecordtypes1 0))
(assert (= result3 (mk_map__ref2 recordtypes)))
(assert (= recordtypes1 (temp___1592 18)))
(assert (= result4 (mk_int__ref numberofblocks)))
(assert (= numberofblocks1 0))
(assert (= result5 (mk_map__ref1 blocknumbers)))
(assert (= blocknumbers1 (temp___1596 ((_ int2bv 8) 0))))
(assert (= result6 (mk_map__ref3 blocklengths)))
(assert (= blocklengths1 (temp___1600 1)))
(assert (= result7 (mk_map__ref4 bitmaps)))
(assert (= bitmaps1 (temp___1604 (temp___1608 ((_ int2bv 8) 0)))))
(assert (= result8 (mk_int__ref begidx)))
(assert (= begidx1 1))
(assert (and (and (and (and (<= begidx2 endidx1) (<= begidx2 256)) (<= endidx1 256)) (=> (= foundtype1 1) (forall ((i34 Int)) (=> (and (<= begidx2 i34) (<= i34 endidx1)) (and (<= 48 (to_rep (select rrstring i34))) (<= (to_rep (select rrstring i34)) 57)))))) (and (and (in_range3 begidx2) (in_range3 endidx1)) (in_range2 foundtype1))))
(assert (= foundtype1 3))
(assert (and (= o (getrecordtype rrstring begidx2 endidx1)) (in_range5 o)))
(assert (= result10 (mk_int__ref recordtype)))
(assert (= recordtype2 o))
(assert (and (= o1 (+ numberofrecordtypes1 1)) (in_range6 (+ numberofrecordtypes1 1))))
(assert (= result11 (mk_int__ref numberofrecordtypes1)))
(assert (= numberofrecordtypes2 o1))
(assert (= (to_rep2 o2) recordtype2))
(assert (and (<= 1 numberofrecordtypes2) (<= numberofrecordtypes2 32)))
(assert (= o3 numberofrecordtypes2))
(assert (= o4 (store recordtypes1 o3 o2)))
(assert (= result12 (mk_map__ref2 recordtypes1)))
(assert (= recordtypes2 o4))
(assert (= o5 (from_query_type recordtype2)))
(assert (= o6 (bvudiv o5 ((_ int2bv 16) 256))))
(assert (= o7 (bvurem o6 ((_ int2bv 16) 256))))
(assert (= o8 o7))
(assert (= o9 ((_ extract 7 0) o8)))
(assert (= result13 (mk_t__ref blocknumberoffirstrecordtype)))
(assert (= blocknumberoffirstrecordtype2 o9))
(assert (= result14 (mk_map__ref5 blockmap1)))
(assert (= blockmap2 (store blockmap1 blocknumberoffirstrecordtype2 (of_int 1))))
(assert (and (= o10 (+ numberofblocks1 1)) (in_range8 (+ numberofblocks1 1))))
(assert (= result15 (mk_int__ref numberofblocks1)))
(assert (= numberofblocks2 o10))
(assert (= o11 (from_query_type recordtype2)))
(assert (= o12 (bvudiv o11 ((_ int2bv 16) 256))))
(assert (= o13 (bvmul ((_ int2bv 16) 256) o12)))
(assert (= o14 (from_query_type recordtype2)))
(assert (= o15 (bvsub o14 o13)))
(assert (= o16 (bvudiv o15 ((_ int2bv 16) 8))))
(assert (not (not (= ((_ int2bv 16) 32) #x0000))))
(check-sat)
(exit)
