(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 16) Int) Bool)
(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 32) Int) Bool)
(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min1 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort index3 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(define-fun in_range1 ((x (_ BitVec 32))) Bool (and (bvule #x00000001 x) (bvule x #x00000003)))
(define-fun in_range_int ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (index3 index3) Bool)
(declare-const dummy1 index3)
(declare-datatypes () ((index3__ref (mk_index3__ref (index3__content index3)))))
(define-fun index3__ref___projection ((a index3__ref)) index3 (index3__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-sort map1 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int (_ BitVec 16)) (Array Int integer))
(declare-fun set (map1 Int (_ BitVec 16) (Array Int integer)) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j (_ BitVec 16))) (forall ((a (Array Int integer))) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j (_ BitVec 16)) (j2 (_ BitVec 16))) (forall ((a (Array Int integer))) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide1 (map1 Int Int (_ BitVec 16) (_ BitVec 16)) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 (_ BitVec 16)) (old_first_2 (_ BitVec 16))) (forall ((i Int)) (forall ((j (_ BitVec 16))) (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get (slide1 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq1 ((a map1) (a__first Int) (a__last Int) (a__first_2 (_ BitVec 16)) (a__last_2 (_ BitVec 16)) (b map1) (b__first Int) (b__last Int) (b__first_2 (_ BitVec 16)) (b__last_2 (_ BitVec 16))) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (forall ((temp___idx_155 Int)) (forall ((temp___idx_156 (_ BitVec 16))) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (bvule a__first_2 temp___idx_156) (bvule temp___idx_156 a__last_2))) (= (bool_eq (get a temp___idx_155 temp___idx_156) 1 3 (get b (+ (- b__first a__first) temp___idx_155) (bvadd (bvsub b__first_2 a__first_2) temp___idx_156)) 1 3) true))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (forall ((a__first_2 (_ BitVec 16)) (a__last_2 (_ BitVec 16)) (b__first_2 (_ BitVec 16)) (b__last_2 (_ BitVec 16))) (=> (= (bool_eq1 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (forall ((temp___idx_155 Int)) (forall ((temp___idx_156 (_ BitVec 16))) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (bvule a__first_2 temp___idx_156) (bvule temp___idx_156 a__last_2))) (= (bool_eq (get a temp___idx_155 temp___idx_156) 1 3 (get b (+ (- b__first a__first) temp___idx_155) (bvadd (bvsub b__first_2 a__first_2) temp___idx_156)) 1 3) true))))))))))
(declare-const dummy3 map1)
(declare-const value__size1 Int)
(declare-fun object__size1 (map1) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 (map1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (map1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a map1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a map1)) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a map1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (map1 map1) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array (_ BitVec 32) map1))))))
(declare-fun slide2 ((Array (_ BitVec 32) map1) (_ BitVec 32) (_ BitVec 32)) (Array (_ BitVec 32) map1))
(assert (forall ((a (Array (_ BitVec 32) map1))) (forall ((first (_ BitVec 32))) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array (_ BitVec 32) map1))) (forall ((old_first (_ BitVec 32))) (forall ((new_first (_ BitVec 32))) (forall ((i (_ BitVec 32))) (! (= (select (slide2 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array (_ BitVec 32) map1)) (a__first (_ BitVec 32)) (a__last (_ BitVec 32)) (b (Array (_ BitVec 32) map1)) (b__first (_ BitVec 32)) (b__last (_ BitVec 32))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_157 (_ BitVec 32))) (=> (and (bvule a__first temp___idx_157) (bvule temp___idx_157 a__last)) (= (bool_eq1 (select a temp___idx_157) 1 3 #x0001 #x0003 (select b (bvadd (bvsub b__first a__first) temp___idx_157)) 1 3 #x0001 #x0003) true)))) true false))
(assert (forall ((a (Array (_ BitVec 32) map1)) (b (Array (_ BitVec 32) map1))) (forall ((a__first (_ BitVec 32)) (a__last (_ BitVec 32)) (b__first (_ BitVec 32)) (b__last (_ BitVec 32))) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_157 (_ BitVec 32))) (=> (and (bvule a__first temp___idx_157) (bvule temp___idx_157 a__last)) (= (bool_eq1 (select a temp___idx_157) 1 3 #x0001 #x0003 (select b (bvadd (bvsub b__first a__first) temp___idx_157)) 1 3 #x0001 #x0003) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y (Array (_ BitVec 32) map1))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort u32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq4 (u32 u32) Bool)
(declare-const dummy4 u32)
(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))
(declare-fun to_rep1 (u32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) u32)
(assert (forall ((x u32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x u32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x u32)) (! (uint_in_range1 (to_int3 x)) :pattern ((to_int3 x)))))
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))
(define-fun dynamic_property ((first_int (_ BitVec 32)) (last_int (_ BitVec 32)) (x (_ BitVec 32))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq5 (u32 u32) Bool)
(declare-const dummy5 u32)
(declare-datatypes () ((t12b__ref (mk_t12b__ref (t12b__content u32)))))
(define-fun t12b__ref___projection ((a t12b__ref)) u32 (t12b__content a))
(declare-sort t 0)
(declare-fun first (t) u32)
(declare-fun last (t) u32)
(declare-fun mk ((_ BitVec 32) (_ BitVec 32)) t)
(assert (forall ((f (_ BitVec 32)) (l (_ BitVec 32))) (! (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first (_ BitVec 32)) (range_last (_ BitVec 32)) (low (_ BitVec 32)) (high (_ BitVec 32))) Bool (=> (bvule low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 32) map1)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 32) map1) (elts a))
(define-fun of_array ((a (Array (_ BitVec 32) map1)) (f (_ BitVec 32)) (l (_ BitVec 32))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 32) (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 32) (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array (_ BitVec 32) map1)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array (_ BitVec 32) map1)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array (_ BitVec 32) map1)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t) (y1 us_t)) Bool (bool_eq2 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y1) (to_rep1 (first (rt y1))) (to_rep1 (last (rt y1)))))
(declare-fun user_eq6 (us_t us_t) Bool)
(declare-const dummy6 us_t)
(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content us_t)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_t (t13b__content a))
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))
(define-fun dynamic_property2 ((first_int (_ BitVec 32)) (last_int (_ BitVec 32)) (x (_ BitVec 32))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))
(declare-fun user_eq7 (u32 u32) Bool)
(declare-const dummy7 u32)
(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content u32)))))
(define-fun t14b__ref___projection ((a t14b__ref)) u32 (t14b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) u32)
(declare-fun last2 (t1) u32)
(declare-fun mk1 ((_ BitVec 32) (_ BitVec 32)) t1)
(assert (forall ((f (_ BitVec 32)) (l (_ BitVec 32))) (! (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)) :pattern ((mk1 f l)))))
(define-fun dynamic_property3 ((range_first (_ BitVec 32)) (range_last (_ BitVec 32)) (low (_ BitVec 32)) (high (_ BitVec 32))) Bool (=> (bvule low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array (_ BitVec 32) map1)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 32) map1) (elts1 a))
(define-fun of_array1 ((a (Array (_ BitVec 32) map1)) (f (_ BitVec 32)) (l (_ BitVec 32))) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) (_ BitVec 32) (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) (_ BitVec 32) (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a)) (+ (- (bv2nat (last3 a)) (bv2nat (first3 a))) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array (_ BitVec 32) map1)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array (_ BitVec 32) map1)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array (_ BitVec 32) map1)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq4 ((x us_t1) (y1 us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y1) (to_rep1 (first2 (rt1 y1))) (to_rep1 (last2 (rt1 y1)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))
(declare-fun p_bv__x__aggregate_def (map1) (Array (_ BitVec 32) map1))
(declare-fun temp_____aggregate_def_281 ((Array Int integer)) map1)
(declare-fun temp_____aggregate_def_286 (Int) (Array Int integer))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_218 (_ BitVec 32)) (temp___is_init_214 Bool) (temp___skip_constant_215 Bool) (temp___do_toplevel_216 Bool) (temp___do_typ_inv_217 Bool)) Bool true)
(define-fun dynamic_invariant2 ((temp___expr_232 (_ BitVec 32)) (temp___is_init_228 Bool) (temp___skip_constant_229 Bool) (temp___do_toplevel_230 Bool) (temp___do_typ_inv_231 Bool)) Bool (=> (or (= temp___is_init_228 true) (bvule #x00000001 #x00000003)) (in_range1 temp___expr_232)))
(assert (forall ((temp___279 map1)) (forall ((temp___280 (_ BitVec 32))) (= (select (p_bv__x__aggregate_def temp___279) temp___280) temp___279))))
(assert (forall ((temp___283 (Array Int integer))) (forall ((temp___284 Int)) (forall ((temp___285 (_ BitVec 16))) (= (get (temp_____aggregate_def_281 temp___283) temp___284 temp___285) temp___283)))))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(assert (forall ((temp___288 Int)) (=> (dynamic_invariant temp___288 true true true true) (forall ((temp___289 Int)) (= (select (temp_____aggregate_def_286 temp___288) temp___289) rliteral)))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(assert (not true))
(check-sat)
(exit)
