(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort length_type 0)
(declare-fun length_typeqtint (length_type) Int)
(assert (forall ((i length_type)) (and (<= 0 (length_typeqtint i)) (<= (length_typeqtint i) 5))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (length_type length_type) Bool)
(declare-const dummy length_type)
(declare-datatypes () ((length_type__ref (mk_length_type__ref (length_type__content length_type)))))
(define-fun length_type__ref___projection ((a length_type__ref)) length_type (length_type__content a))
(define-fun to_rep ((x length_type)) Int (length_typeqtint x))
(declare-fun of_rep (Int) length_type)
(assert (forall ((x length_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x length_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort entry_id 0)
(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x04)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (entry_id entry_id) Bool)
(declare-const dummy1 entry_id)
(declare-datatypes () ((entry_id__ref (mk_entry_id__ref (entry_id__content entry_id)))))
(define-fun entry_id__ref___projection ((a entry_id__ref)) entry_id (entry_id__content a))
(declare-fun to_rep1 (entry_id) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) entry_id)
(assert (forall ((x entry_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x entry_id)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x05))) (=> (in_range1 y) (= (to_rep1 (of_rep1 x)) y))) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int2 ((x entry_id)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x entry_id)) (! (in_range_int (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep2 ((x integer)) Int (integerqtint x))
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) integer))))))
(declare-fun slide ((Array (_ BitVec 8) integer) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) integer))
(assert (forall ((a (Array (_ BitVec 8) integer))) (forall ((first (_ BitVec 8))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 8) integer))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 8) integer)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) integer)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 8) integer)) (b (Array (_ BitVec 8) integer))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array (_ BitVec 8) integer))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 8) integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 8) integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 8) integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 8) integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 8) integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 8) integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array (_ BitVec 8) integer) (Array (_ BitVec 8) integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test__t__remaining length_type) (rec__test__t__index entry_id) (rec__test__t__cards (Array (_ BitVec 8) integer))))))
(define-fun us_split_fields_Remaining__projection ((a us_split_fields)) length_type (rec__test__t__remaining a))
(define-fun us_split_fields_Index__projection ((a us_split_fields)) entry_id (rec__test__t__index a))
(define-fun us_split_fields_Cards__projection ((a us_split_fields)) (Array (_ BitVec 8) integer) (rec__test__t__cards a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__test__t__remaining (us_split_fields1 a))) (to_rep (rec__test__t__remaining (us_split_fields1 b)))) (= (to_rep1 (rec__test__t__index (us_split_fields1 a))) (to_rep1 (rec__test__t__index (us_split_fields1 b))))) (= (bool_eq (rec__test__t__cards (us_split_fields1 a)) #x00 #x04 (rec__test__t__cards (us_split_fields1 b)) #x00 #x04) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const test__t__remaining__first__bit Int)
(declare-const test__t__remaining__last__bit Int)
(declare-const test__t__remaining__position Int)
(assert (<= 0 test__t__remaining__first__bit))
(assert (< test__t__remaining__first__bit test__t__remaining__last__bit))
(assert (<= 0 test__t__remaining__position))
(declare-const test__t__index__first__bit Int)
(declare-const test__t__index__last__bit Int)
(declare-const test__t__index__position Int)
(assert (<= 0 test__t__index__first__bit))
(assert (< test__t__index__first__bit test__t__index__last__bit))
(assert (<= 0 test__t__index__position))
(declare-const test__t__cards__first__bit Int)
(declare-const test__t__cards__last__bit Int)
(declare-const test__t__cards__position Int)
(assert (<= 0 test__t__cards__first__bit))
(assert (< test__t__cards__first__bit test__t__cards__last__bit))
(assert (<= 0 test__t__cards__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 us_rep)))))
(define-fun t__ref___projection ((a t__ref1)) us_rep (t__content1 a))
(declare-fun get_remaining (us_rep) Int)
(declare-fun get_remaining__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(assert (forall ((s us_rep)) (! (dynamic_invariant (get_remaining s) true false true true) :pattern ((get_remaining s)))))
(assert (forall ((s us_rep)) (! (= (get_remaining s) (to_rep (rec__test__t__remaining (us_split_fields1 s)))) :pattern ((get_remaining s)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 5)) (in_range temp___expr_159)))
(define-fun dynamic_invariant2 ((temp___expr_166 (_ BitVec 8)) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (bvule #x00 #x04)) (in_range1 temp___expr_166)))
(declare-const s__split_fields length_type)
(declare-const s__split_fields1 entry_id)
(declare-const s__split_fields2 (Array (_ BitVec 8) integer))
(declare-const o Int)
(declare-const o1 length_type)
(declare-const o2 length_type)
(declare-const o3 entry_id)
(declare-const o4 (Array (_ BitVec 8) integer))
(declare-const temp___208 length_type)
(declare-const temp___2081 entry_id)
(declare-const temp___2082 (Array (_ BitVec 8) integer))
(declare-const result length_type)
(declare-const result1 entry_id)
(declare-const result2 (Array (_ BitVec 8) integer))
(declare-const s__split_fields3 length_type)
(declare-const s__split_fields4 entry_id)
(declare-const s__split_fields5 (Array (_ BitVec 8) integer))
(declare-const s__split_fields6 length_type)
(declare-const s__split_fields7 entry_id)
(declare-const s__split_fields8 (Array (_ BitVec 8) integer))
(declare-const s__split_fields9 length_type)
(declare-const s__split_fields10 entry_id)
(declare-const s__split_fields11 (Array (_ BitVec 8) integer))
(declare-const s__split_fields12 length_type)
(declare-const s__split_fields13 entry_id)
(declare-const s__split_fields14 (Array (_ BitVec 8) integer))
(assert (< 0 (get_remaining (mk___rep (mk___split_fields s__split_fields s__split_fields1 s__split_fields2)))))
(assert (and (= o (- (to_rep s__split_fields) 1)) (in_range (- (to_rep s__split_fields) 1))))
(assert (= (to_rep o1) o))
(assert (= o1 o2))
(assert (= s__split_fields1 o3))
(assert (= s__split_fields2 o4))
(assert (= temp___208 o2))
(assert (= temp___2081 o3))
(assert (= temp___2082 o4))
(assert (= result s__split_fields))
(assert (= result1 s__split_fields1))
(assert (= result2 s__split_fields2))
(assert (= temp___208 s__split_fields3))
(assert (= temp___2081 s__split_fields4))
(assert (= temp___2082 s__split_fields5))
(assert (= (get_remaining (mk___rep (mk___split_fields s__split_fields6 s__split_fields7 s__split_fields8))) (get_remaining (mk___rep (mk___split_fields s__split_fields3 s__split_fields4 s__split_fields5)))))
(assert (= s__split_fields9 s__split_fields6))
(assert (= s__split_fields10 s__split_fields7))
(assert (= s__split_fields11 s__split_fields8))
(assert (= s__split_fields12 s__split_fields6))
(assert (= s__split_fields13 s__split_fields7))
(assert (= s__split_fields14 s__split_fields8))
(assert (not (<= (get_remaining (mk___rep (mk___split_fields s__split_fields9 s__split_fields10 s__split_fields11))) (get_remaining (mk___rep (mk___split_fields s__split_fields s__split_fields1 s__split_fields2))))))
(check-sat)
(exit)
