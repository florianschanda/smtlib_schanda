(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 8))
(declare-fun user_eq (unsigned8 unsigned8) Bool)
(declare-const dummy unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun readmem8 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))
(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq1 (unsigned64 unsigned64) Bool)
(declare-const dummy1 unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_236 (_ BitVec 64)) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool true)
(define-fun dynamic_invariant1 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem8 addr x86__memory))) (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant1 result true false true true)))) :pattern ((readmem8 addr x86__memory))))))
(declare-fun hasmem64 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun hasmem64__function_guard (Bool (Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert true)
(assert (forall ((mem (Array (_ BitVec 64) unsigned8))) (forall ((addr (_ BitVec 64)) (val__ (_ BitVec 64))) (! (= (= (hasmem64 mem addr val__) true) (and (and (and (and (and (and (and (= (bvand val__ #x00000000000000FF) ((_ zero_extend 56) (to_rep (select mem addr)))) (= (bvand val__ #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000001)))) #x0000000000000100))) (= (bvand val__ #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000002)))) #x0000000000010000))) (= (bvand val__ #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000003)))) #x0000000001000000))) (= (bvand val__ #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000004)))) #x0000000100000000))) (= (bvand val__ #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000005)))) #x0000010000000000))) (= (bvand val__ #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000006)))) #x0001000000000000))) (= (bvand val__ #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000007)))) #x0100000000000000)))) :pattern ((hasmem64 mem addr val__))))))
(declare-const addr (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const memory (Array (_ BitVec 64) unsigned8))
(declare-const result__ (_ BitVec 64))
(declare-const x86__readmem64__result (_ BitVec 64))
(declare-const o (_ BitVec 8))
(declare-const o1 (_ BitVec 8))
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const o4 (_ BitVec 64))
(declare-const o5 (_ BitVec 8))
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 (_ BitVec 8))
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const o13 (_ BitVec 8))
(declare-const o14 (_ BitVec 64))
(declare-const o15 (_ BitVec 64))
(declare-const o16 (_ BitVec 64))
(declare-const o17 (_ BitVec 8))
(declare-const o18 (_ BitVec 64))
(declare-const o19 (_ BitVec 64))
(declare-const o20 (_ BitVec 64))
(declare-const o21 (_ BitVec 8))
(declare-const o22 (_ BitVec 64))
(declare-const o23 (_ BitVec 64))
(declare-const o24 (_ BitVec 64))
(declare-const o25 (_ BitVec 8))
(declare-const o26 (_ BitVec 64))
(declare-const o27 (_ BitVec 64))
(declare-const o28 (_ BitVec 64))
(declare-const o29 (_ BitVec 64))
(declare-const result (_ BitVec 64))
(declare-const result__1 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const x86__readmem64__result1 (_ BitVec 64))
(declare-const x86__readmem64__result2 (_ BitVec 64))
(declare-const x86__readmem64__result3 (_ BitVec 64))
(declare-const result__2 (_ BitVec 64))
(declare-const x86__readmem64__result4 (_ BitVec 64))
(declare-const result__3 (_ BitVec 64))
(declare-const x86__readmem64__result5 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(assert (and (= o25 (readmem8 (bvadd addr #x0000000000000007) memory)) (= o25 (to_rep (select memory (bvadd addr #x0000000000000007))))))
(assert (= o26 ((_ zero_extend 56) o25)))
(assert (= o27 (bvshl o26 ((_ int2bv 64) 56))))
(assert (and (= o21 (readmem8 (bvadd addr #x0000000000000006) memory)) (= o21 (to_rep (select memory (bvadd addr #x0000000000000006))))))
(assert (= o22 ((_ zero_extend 56) o21)))
(assert (= o23 (bvshl o22 ((_ int2bv 64) 48))))
(assert (and (= o17 (readmem8 (bvadd addr #x0000000000000005) memory)) (= o17 (to_rep (select memory (bvadd addr #x0000000000000005))))))
(assert (= o18 ((_ zero_extend 56) o17)))
(assert (= o19 (bvshl o18 ((_ int2bv 64) 40))))
(assert (and (= o13 (readmem8 (bvadd addr #x0000000000000004) memory)) (= o13 (to_rep (select memory (bvadd addr #x0000000000000004))))))
(assert (= o14 ((_ zero_extend 56) o13)))
(assert (= o15 (bvshl o14 ((_ int2bv 64) 32))))
(assert (and (= o9 (readmem8 (bvadd addr #x0000000000000003) memory)) (= o9 (to_rep (select memory (bvadd addr #x0000000000000003))))))
(assert (= o10 ((_ zero_extend 56) o9)))
(assert (= o11 (bvshl o10 ((_ int2bv 64) 24))))
(assert (and (= o5 (readmem8 (bvadd addr #x0000000000000002) memory)) (= o5 (to_rep (select memory (bvadd addr #x0000000000000002))))))
(assert (= o6 ((_ zero_extend 56) o5)))
(assert (= o7 (bvshl o6 ((_ int2bv 64) 16))))
(assert (and (= o1 (readmem8 (bvadd addr #x0000000000000001) memory)) (= o1 (to_rep (select memory (bvadd addr #x0000000000000001))))))
(assert (= o2 ((_ zero_extend 56) o1)))
(assert (= o3 (bvshl o2 ((_ int2bv 64) 8))))
(assert (and (= o (readmem8 addr memory)) (= o (to_rep (select memory addr)))))
(assert (= o4 ((_ zero_extend 56) o)))
(assert (= o8 (bvor o4 o3)))
(assert (= o12 (bvor o8 o7)))
(assert (= o16 (bvor o12 o11)))
(assert (= o20 (bvor o16 o15)))
(assert (= o24 (bvor o20 o19)))
(assert (= o28 (bvor o24 o23)))
(assert (= o29 (bvor o28 o27)))
(assert (= result result__))
(assert (= result__1 o29))
(assert (= x86__readmem64__result1 x86__readmem64__result2))
(assert (= x86__readmem64__result3 x86__readmem64__result1))
(assert (= result1 x86__readmem64__result))
(assert (= x86__readmem64__result1 result__1))
(assert (= (mk_t__ref1 x86__readmem64__result4) (mk_t__ref1 x86__readmem64__result2)))
(assert (= result__2 result__1))
(assert (= x86__readmem64__result5 x86__readmem64__result3))
(assert (= result__3 result__1))
(assert (= result2 x86__readmem64__result4))
(assert (not (= (hasmem64 memory addr x86__readmem64__result4) true)))
(check-sat)
(exit)
