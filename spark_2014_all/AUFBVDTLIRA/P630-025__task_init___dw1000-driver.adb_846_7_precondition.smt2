(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort bits_1 0)
(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x01)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (bits_1 bits_1) Bool)
(declare-const dummy1 bits_1)
(declare-datatypes () ((bits_1__ref (mk_bits_1__ref (bits_1__content bits_1)))))
(define-fun bits_1__ref___projection ((a bits_1__ref)) bits_1 (bits_1__content a))
(declare-fun to_rep1 (bits_1) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) bits_1)
(assert (forall ((x bits_1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x bits_1)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x02))) (=> (in_range1 y) (= (to_rep1 (of_rep1 x)) y))) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x bits_1)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x bits_1)) (! (in_range_int (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort bits_13 0)
(define-fun in_range2 ((x (_ BitVec 16))) Bool (and (bvule #x0000 x) (bvule x #x1FFF)))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 8191)))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq2 (bits_13 bits_13) Bool)
(declare-const dummy2 bits_13)
(declare-datatypes () ((bits_13__ref (mk_bits_13__ref (bits_13__content bits_13)))))
(define-fun bits_13__ref___projection ((a bits_13__ref)) bits_13 (bits_13__content a))
(declare-fun to_rep2 (bits_13) (_ BitVec 16))
(declare-fun of_rep2 ((_ BitVec 16)) bits_13)
(assert (forall ((x bits_13)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x bits_13)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x (_ BitVec 16))) (! (let ((y (bvurem x #x2000))) (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int4 ((x bits_13)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x bits_13)) (! (in_range_int1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dw1000__register_types__aon_cfg1_type__sleep_ce bits_1) (rec__dw1000__register_types__aon_cfg1_type__smxx bits_1) (rec__dw1000__register_types__aon_cfg1_type__lposc_c bits_1) (rec__dw1000__register_types__aon_cfg1_type__reserved bits_13)))))
(define-fun us_split_fields_SLEEP_CE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_cfg1_type__sleep_ce a))
(define-fun us_split_fields_SMXX__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_cfg1_type__smxx a))
(define-fun us_split_fields_LPOSC_C__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_cfg1_type__lposc_c a))
(define-fun us_split_fields_Reserved__19__projection ((a us_split_fields)) bits_13 (rec__dw1000__register_types__aon_cfg1_type__reserved a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___72__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___72__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep1 (rec__dw1000__register_types__aon_cfg1_type__sleep_ce (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_cfg1_type__sleep_ce (us_split_fields1 b)))) (= (to_rep1 (rec__dw1000__register_types__aon_cfg1_type__smxx (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_cfg1_type__smxx (us_split_fields1 b))))) (= (to_rep1 (rec__dw1000__register_types__aon_cfg1_type__lposc_c (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_cfg1_type__lposc_c (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__aon_cfg1_type__reserved (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__aon_cfg1_type__reserved (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__sleep_ce__position Int)
(assert (<= 0 dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit))
(assert (< dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit))
(assert (<= 0 dw1000__register_types__aon_cfg1_type__sleep_ce__position))
(declare-const dw1000__register_types__aon_cfg1_type__smxx__first__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__smxx__last__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__smxx__position Int)
(assert (<= 0 dw1000__register_types__aon_cfg1_type__smxx__first__bit))
(assert (< dw1000__register_types__aon_cfg1_type__smxx__first__bit dw1000__register_types__aon_cfg1_type__smxx__last__bit))
(assert (<= 0 dw1000__register_types__aon_cfg1_type__smxx__position))
(declare-const dw1000__register_types__aon_cfg1_type__lposc_c__first__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__lposc_c__last__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__lposc_c__position Int)
(assert (<= 0 dw1000__register_types__aon_cfg1_type__lposc_c__first__bit))
(assert (< dw1000__register_types__aon_cfg1_type__lposc_c__first__bit dw1000__register_types__aon_cfg1_type__lposc_c__last__bit))
(assert (<= 0 dw1000__register_types__aon_cfg1_type__lposc_c__position))
(declare-const dw1000__register_types__aon_cfg1_type__reserved__first__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__reserved__last__bit Int)
(declare-const dw1000__register_types__aon_cfg1_type__reserved__position Int)
(assert (<= 0 dw1000__register_types__aon_cfg1_type__reserved__first__bit))
(assert (< dw1000__register_types__aon_cfg1_type__reserved__first__bit dw1000__register_types__aon_cfg1_type__reserved__last__bit))
(assert (<= 0 dw1000__register_types__aon_cfg1_type__reserved__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((aon_cfg1_type__ref (mk_aon_cfg1_type__ref (aon_cfg1_type__content us_rep)))))
(define-fun aon_cfg1_type__ref___projection ((a aon_cfg1_type__ref)) us_rep (aon_cfg1_type__content a))
(declare-datatypes () ((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___71__projection ((a register_type__ref)) us_rep (register_type__content a))
(declare-sort bits_2 0)
(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x03)))
(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (bits_2 bits_2) Bool)
(declare-const dummy4 bits_2)
(declare-datatypes () ((bits_2__ref (mk_bits_2__ref (bits_2__content bits_2)))))
(define-fun bits_2__ref___projection ((a bits_2__ref)) bits_2 (bits_2__content a))
(declare-fun to_rep3 (bits_2) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) bits_2)
(assert (forall ((x bits_2)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x bits_2)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x04))) (=> (in_range3 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int5 ((x bits_2)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x bits_2)) (! (in_range_int2 (to_int5 x)) :pattern ((to_int5 x)))))
(declare-sort bits_3 0)
(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x07)))
(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (bits_3 bits_3) Bool)
(declare-const dummy5 bits_3)
(declare-datatypes () ((bits_3__ref (mk_bits_3__ref (bits_3__content bits_3)))))
(define-fun bits_3__ref___projection ((a bits_3__ref)) bits_3 (bits_3__content a))
(declare-fun to_rep4 (bits_3) (_ BitVec 8))
(declare-fun of_rep4 ((_ BitVec 8)) bits_3)
(assert (forall ((x bits_3)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x bits_3)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x08))) (=> (in_range4 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int6 ((x bits_3)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x bits_3)) (! (in_range_int3 (to_int6 x)) :pattern ((to_int6 x)))))
(declare-sort bits_4 0)
(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x0F)))
(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (bits_4 bits_4) Bool)
(declare-const dummy6 bits_4)
(declare-datatypes () ((bits_4__ref (mk_bits_4__ref (bits_4__content bits_4)))))
(define-fun bits_4__ref___projection ((a bits_4__ref)) bits_4 (bits_4__content a))
(declare-fun to_rep5 (bits_4) (_ BitVec 8))
(declare-fun of_rep5 ((_ BitVec 8)) bits_4)
(assert (forall ((x bits_4)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x bits_4)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x10))) (=> (in_range5 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5 (of_rep5 x))))))
(define-fun to_int7 ((x bits_4)) Int (bv2nat (to_rep5 x)))
(assert (forall ((x bits_4)) (! (in_range_int4 (to_int7 x)) :pattern ((to_int7 x)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks bits_2) (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks bits_2) (rec__dw1000__register_types__pmsc_ctrl0_type__txclks bits_2) (rec__dw1000__register_types__pmsc_ctrl0_type__face bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__adcce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__amce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gpce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gprn bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__softreset bits_4) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 bits_3) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 bits_4) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 bits_3) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 bits_4)))))
(define-fun us_split_fields_SYSCLKS__projection ((a us_split_fields2)) bits_2 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks a))
(define-fun us_split_fields_RXCLKS__projection ((a us_split_fields2)) bits_2 (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks a))
(define-fun us_split_fields_TXCLKS__projection ((a us_split_fields2)) bits_2 (rec__dw1000__register_types__pmsc_ctrl0_type__txclks a))
(define-fun us_split_fields_FACE__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__face a))
(define-fun us_split_fields_ADCCE__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__adcce a))
(define-fun us_split_fields_AMCE__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__amce a))
(define-fun us_split_fields_GPCE__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpce a))
(define-fun us_split_fields_GPRN__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gprn a))
(define-fun us_split_fields_GPDCE__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce a))
(define-fun us_split_fields_GPDRN__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn a))
(define-fun us_split_fields_KHZCLKEN__projection ((a us_split_fields2)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken a))
(define-fun us_split_fields_SOFTRESET__projection ((a us_split_fields2)) bits_4 (rec__dw1000__register_types__pmsc_ctrl0_type__softreset a))
(define-fun us_split_fields_Reserved_1__16__projection ((a us_split_fields2)) bits_3 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 a))
(define-fun us_split_fields_Reserved_2__16__projection ((a us_split_fields2)) bits_4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 a))
(define-fun us_split_fields_Reserved_3__5__projection ((a us_split_fields2)) bits_3 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 a))
(define-fun us_split_fields_Reserved_4__2__projection ((a us_split_fields2)) bits_4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___101__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___101__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks (us_split_fields3 a))) (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks (us_split_fields3 b)))) (= (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks (us_split_fields3 a))) (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks (us_split_fields3 b))))) (= (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__txclks (us_split_fields3 a))) (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__txclks (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__face (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__face (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__adcce (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__adcce (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__amce (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__amce (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpce (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpce (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gprn (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gprn (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn (us_split_fields3 b))))) (= (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken (us_split_fields3 a))) (to_rep1 (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken (us_split_fields3 b))))) (= (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__softreset (us_split_fields3 a))) (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__softreset (us_split_fields3 b))))) (= (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 (us_split_fields3 a))) (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 (us_split_fields3 b))))) (= (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 (us_split_fields3 a))) (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 (us_split_fields3 b))))) (= (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 (us_split_fields3 a))) (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 (us_split_fields3 b))))) (= (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 (us_split_fields3 a))) (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__sysclks__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__sysclks__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__rxclks__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__rxclks__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__txclks__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__txclks__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__face__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__face__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__face__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__face__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__face__first__bit dw1000__register_types__pmsc_ctrl0_type__face__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__face__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__adcce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__adcce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__amce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__amce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__amce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__amce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__amce__first__bit dw1000__register_types__pmsc_ctrl0_type__amce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__amce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gprn__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gprn__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdrn__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdrn__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__khzclken__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__khzclken__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__softreset__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__softreset__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_1__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_1__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_2__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_2__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_3__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_3__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_4__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_4__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((pmsc_ctrl0_type__ref (mk_pmsc_ctrl0_type__ref (pmsc_ctrl0_type__content us_rep1)))))
(define-fun pmsc_ctrl0_type__ref___projection ((a pmsc_ctrl0_type__ref)) us_rep1 (pmsc_ctrl0_type__content a))
(declare-datatypes () ((register_type__ref1 (mk_register_type__ref1 (register_type__content1 us_rep1)))))
(define-fun register_type__ref___100__projection ((a register_type__ref1)) us_rep1 (register_type__content1 a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (natural natural) Bool)
(declare-const dummy8 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort bits_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))
(declare-fun user_eq9 (bits_8 bits_8) Bool)
(declare-const dummy9 bits_8)
(declare-datatypes () ((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content a))
(declare-fun to_rep6 (bits_8) (_ BitVec 8))
(declare-fun of_rep6 ((_ BitVec 8)) bits_8)
(assert (forall ((x bits_8)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep6 (of_rep6 x)) x) :pattern ((to_rep6 (of_rep6 x))))))
(define-fun to_int8 ((x bits_8)) Int (bv2nat (to_rep6 x)))
(assert (forall ((x bits_8)) (! (uint_in_range (to_int8 x)) :pattern ((to_int8 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int bits_8))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int bits_8)) (a__first Int) (a__last Int) (b (Array Int bits_8)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep6 (select a temp___idx_154)) (to_rep6 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep6 (select a temp___idx_154)) (to_rep6 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range6 low) (in_range6 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int bits_8)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))
(define-fun of_array ((a (Array Int bits_8)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int bits_8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int bits_8)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int bits_8)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t) (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq10 (us_t us_t) Bool)
(declare-const dummy10 us_t)
(declare-datatypes () ((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content a))
(declare-sort bits_16 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 16))
(declare-fun user_eq11 (bits_16 bits_16) Bool)
(declare-const dummy11 bits_16)
(declare-datatypes () ((bits_16__ref (mk_bits_16__ref (bits_16__content bits_16)))))
(define-fun bits_16__ref___projection ((a bits_16__ref)) bits_16 (bits_16__content a))
(define-fun dynamic_invariant ((temp___expr_413 (_ BitVec 16)) (temp___is_init_409 Bool) (temp___skip_constant_410 Bool) (temp___do_toplevel_411 Bool) (temp___do_typ_inv_412 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tTdataSP1 0)
(declare-fun tTdataSP1qtint (tTdataSP1) Int)
(assert (forall ((i tTdataSP1)) (and (<= 1 (tTdataSP1qtint i)) (<= (tTdataSP1qtint i) 2))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq12 (tTdataSP1 tTdataSP1) Bool)
(declare-const dummy12 tTdataSP1)
(declare-datatypes () ((tTdataSP1__ref (mk_tTdataSP1__ref (tTdataSP1__content tTdataSP1)))))
(define-fun tTdataSP1__ref___projection ((a tTdataSP1__ref)) tTdataSP1 (tTdataSP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range6 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_308 (_ BitVec 8)) (temp___is_init_304 Bool) (temp___skip_constant_305 Bool) (temp___do_toplevel_306 Bool) (temp___do_typ_inv_307 Bool)) Bool (=> (or (= temp___is_init_304 true) (bvule #x00 #x01)) (in_range1 temp___expr_308)))
(define-fun dynamic_invariant4 ((temp___expr_315 (_ BitVec 8)) (temp___is_init_311 Bool) (temp___skip_constant_312 Bool) (temp___do_toplevel_313 Bool) (temp___do_typ_inv_314 Bool)) Bool (=> (or (= temp___is_init_311 true) (bvule #x00 #x03)) (in_range3 temp___expr_315)))
(define-fun dynamic_invariant5 ((temp___expr_322 (_ BitVec 8)) (temp___is_init_318 Bool) (temp___skip_constant_319 Bool) (temp___do_toplevel_320 Bool) (temp___do_typ_inv_321 Bool)) Bool (=> (or (= temp___is_init_318 true) (bvule #x00 #x07)) (in_range4 temp___expr_322)))
(define-fun dynamic_invariant6 ((temp___expr_329 (_ BitVec 8)) (temp___is_init_325 Bool) (temp___skip_constant_326 Bool) (temp___do_toplevel_327 Bool) (temp___do_typ_inv_328 Bool)) Bool (=> (or (= temp___is_init_325 true) (bvule #x00 #x0F)) (in_range5 temp___expr_329)))
(define-fun dynamic_invariant7 ((temp___expr_357 (_ BitVec 8)) (temp___is_init_353 Bool) (temp___skip_constant_354 Bool) (temp___do_toplevel_355 Bool) (temp___do_typ_inv_356 Bool)) Bool true)
(define-fun dynamic_invariant8 ((temp___expr_392 (_ BitVec 16)) (temp___is_init_388 Bool) (temp___skip_constant_389 Bool) (temp___do_toplevel_390 Bool) (temp___do_typ_inv_391 Bool)) Bool (=> (or (= temp___is_init_388 true) (bvule #x0000 #x1FFF)) (in_range2 temp___expr_392)))
(define-fun dynamic_invariant9 ((temp___expr_756 us_t) (temp___is_init_752 Bool) (temp___skip_constant_753 Bool) (temp___do_toplevel_754 Bool) (temp___do_typ_inv_755 Bool)) Bool (=> (not (= temp___skip_constant_753 true)) (dynamic_property 0 2147483647 (first1 temp___expr_756) (last1 temp___expr_756))))
(declare-const pmsc_ctrl0_reg__split_fields bits_2)
(declare-const pmsc_ctrl0_reg__split_fields1 bits_2)
(declare-const pmsc_ctrl0_reg__split_fields2 bits_2)
(declare-const pmsc_ctrl0_reg__split_fields3 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields4 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields5 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields6 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields7 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields8 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields9 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields10 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields11 bits_4)
(declare-const pmsc_ctrl0_reg__split_fields12 bits_3)
(declare-const pmsc_ctrl0_reg__split_fields13 bits_4)
(declare-const pmsc_ctrl0_reg__split_fields14 bits_3)
(declare-const pmsc_ctrl0_reg__split_fields15 bits_4)
(declare-const o bits_13)
(declare-const o1 bits_1)
(declare-const o2 bits_1)
(declare-const o3 bits_1)
(declare-const o4 bits_1)
(declare-const o5 bits_1)
(declare-const o6 bits_1)
(declare-const o7 bits_13)
(declare-const o8 bits_1)
(declare-const o9 bits_1)
(declare-const o10 bits_1)
(declare-const o11 bits_13)
(declare-const o12 bits_13)
(declare-const o13 bits_1)
(declare-const o14 bits_1)
(declare-const o15 bits_1)
(declare-const o16 bits_1)
(declare-const o17 bits_1)
(declare-const o18 bits_1)
(declare-const o19 bits_13)
(declare-const o20 bits_1)
(declare-const o21 bits_1)
(declare-const o22 bits_1)
(declare-const o23 bits_13)
(declare-const o24 bits_2)
(declare-const o25 bits_2)
(declare-const o26 bits_2)
(declare-const o27 bits_2)
(declare-const o28 bits_1)
(declare-const o29 bits_1)
(declare-const o30 bits_1)
(declare-const o31 bits_1)
(declare-const o32 bits_1)
(declare-const o33 bits_1)
(declare-const o34 bits_1)
(declare-const o35 bits_1)
(declare-const o36 bits_4)
(declare-const o37 bits_3)
(declare-const o38 bits_4)
(declare-const o39 bits_3)
(declare-const o40 bits_4)
(declare-const temp___3680 bits_2)
(declare-const temp___36801 bits_2)
(declare-const temp___36802 bits_2)
(declare-const temp___36803 bits_1)
(declare-const temp___36804 bits_1)
(declare-const temp___36805 bits_1)
(declare-const temp___36806 bits_1)
(declare-const temp___36807 bits_1)
(declare-const temp___36808 bits_1)
(declare-const temp___36809 bits_1)
(declare-const temp___368010 bits_1)
(declare-const temp___368011 bits_4)
(declare-const temp___368012 bits_3)
(declare-const temp___368013 bits_4)
(declare-const temp___368014 bits_3)
(declare-const temp___368015 bits_4)
(declare-const o41 bits_2)
(declare-const o42 bits_2)
(declare-const o43 bits_2)
(declare-const o44 bits_2)
(declare-const o45 bits_1)
(declare-const o46 bits_1)
(declare-const o47 bits_1)
(declare-const o48 bits_1)
(declare-const o49 bits_1)
(declare-const o50 bits_1)
(declare-const o51 bits_1)
(declare-const o52 bits_1)
(declare-const o53 bits_4)
(declare-const o54 bits_3)
(declare-const o55 bits_4)
(declare-const o56 bits_3)
(declare-const o57 bits_4)
(declare-const temp___3682 bits_2)
(declare-const temp___36821 bits_2)
(declare-const temp___36822 bits_2)
(declare-const temp___36823 bits_1)
(declare-const temp___36824 bits_1)
(declare-const temp___36825 bits_1)
(declare-const temp___36826 bits_1)
(declare-const temp___36827 bits_1)
(declare-const temp___36828 bits_1)
(declare-const temp___36829 bits_1)
(declare-const temp___368210 bits_1)
(declare-const temp___368211 bits_4)
(declare-const temp___368212 bits_3)
(declare-const temp___368213 bits_4)
(declare-const temp___368214 bits_3)
(declare-const temp___368215 bits_4)
(declare-const o58 integer)
(declare-const o59 integer)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields bits_2)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields1 bits_2)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields2 bits_2)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields3 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields4 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields5 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields6 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields7 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields8 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields9 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields10 bits_1)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields11 bits_4)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields12 bits_3)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields13 bits_4)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields14 bits_3)
(declare-const dw1000__registers__pmsc_ctrl0__read__reg__fields15 bits_4)
(declare-const result bits_2)
(declare-const result1 bits_2)
(declare-const result2 bits_2)
(declare-const result3 bits_1)
(declare-const result4 bits_1)
(declare-const result5 bits_1)
(declare-const result6 bits_1)
(declare-const result7 bits_1)
(declare-const result8 bits_1)
(declare-const result9 bits_1)
(declare-const result10 bits_1)
(declare-const result11 bits_4)
(declare-const result12 bits_3)
(declare-const result13 bits_4)
(declare-const result14 bits_3)
(declare-const result15 bits_4)
(declare-const pmsc_ctrl0_reg__split_fields16 bits_2)
(declare-const pmsc_ctrl0_reg__split_fields17 bits_2)
(declare-const pmsc_ctrl0_reg__split_fields18 bits_2)
(declare-const pmsc_ctrl0_reg__split_fields19 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields20 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields21 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields22 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields23 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields24 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields25 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields26 bits_1)
(declare-const pmsc_ctrl0_reg__split_fields27 bits_4)
(declare-const pmsc_ctrl0_reg__split_fields28 bits_3)
(declare-const pmsc_ctrl0_reg__split_fields29 bits_4)
(declare-const pmsc_ctrl0_reg__split_fields30 bits_3)
(declare-const pmsc_ctrl0_reg__split_fields31 bits_4)
(declare-const result16 bits_2)
(declare-const result17 bits_2)
(declare-const result18 bits_2)
(declare-const result19 bits_1)
(declare-const result20 bits_1)
(declare-const result21 bits_1)
(declare-const result22 bits_1)
(declare-const result23 bits_1)
(declare-const result24 bits_1)
(declare-const result25 bits_1)
(declare-const result26 bits_1)
(declare-const result27 bits_4)
(declare-const result28 bits_3)
(declare-const result29 bits_4)
(declare-const result30 bits_3)
(declare-const result31 bits_4)
(declare-const pmsc_ctrl0_reg__split_fields32 us_split_fields2)
(declare-const result32 us_split_fields__ref1)
(declare-const pmsc_ctrl0_reg__split_fields33 us_split_fields2)
(assert (= (to_rep2 o) #x0000))
(assert (= (to_rep1 o1) #x01))
(assert (= (to_rep1 o2) #x00))
(assert (= (to_rep1 o3) #x00))
(assert (= o3 o4))
(assert (= o2 o5))
(assert (= o1 o6))
(assert (= o o7))
(assert (= o8 o4))
(assert (= o9 o5))
(assert (= o10 o6))
(assert (= o11 o7))
(assert (= (to_rep2 o12) #x0000))
(assert (= (to_rep1 o13) #x00))
(assert (= (to_rep1 o14) #x00))
(assert (= (to_rep1 o15) #x00))
(assert (= o15 o16))
(assert (= o14 o17))
(assert (= o13 o18))
(assert (= o12 o19))
(assert (= o20 o16))
(assert (= o21 o17))
(assert (= o22 o18))
(assert (= o23 o19))
(assert (= result pmsc_ctrl0_reg__split_fields))
(assert (= result1 pmsc_ctrl0_reg__split_fields1))
(assert (= result2 pmsc_ctrl0_reg__split_fields2))
(assert (= result3 pmsc_ctrl0_reg__split_fields3))
(assert (= result4 pmsc_ctrl0_reg__split_fields4))
(assert (= result5 pmsc_ctrl0_reg__split_fields5))
(assert (= result6 pmsc_ctrl0_reg__split_fields6))
(assert (= result7 pmsc_ctrl0_reg__split_fields7))
(assert (= result8 pmsc_ctrl0_reg__split_fields8))
(assert (= result9 pmsc_ctrl0_reg__split_fields9))
(assert (= result10 pmsc_ctrl0_reg__split_fields10))
(assert (= result11 pmsc_ctrl0_reg__split_fields11))
(assert (= result12 pmsc_ctrl0_reg__split_fields12))
(assert (= result13 pmsc_ctrl0_reg__split_fields13))
(assert (= result14 pmsc_ctrl0_reg__split_fields14))
(assert (= result15 pmsc_ctrl0_reg__split_fields15))
(assert (= (mk___split_fields1 pmsc_ctrl0_reg__split_fields16 pmsc_ctrl0_reg__split_fields17 pmsc_ctrl0_reg__split_fields18 pmsc_ctrl0_reg__split_fields19 pmsc_ctrl0_reg__split_fields20 pmsc_ctrl0_reg__split_fields21 pmsc_ctrl0_reg__split_fields22 pmsc_ctrl0_reg__split_fields23 pmsc_ctrl0_reg__split_fields24 pmsc_ctrl0_reg__split_fields25 pmsc_ctrl0_reg__split_fields26 pmsc_ctrl0_reg__split_fields27 pmsc_ctrl0_reg__split_fields28 pmsc_ctrl0_reg__split_fields29 pmsc_ctrl0_reg__split_fields30 pmsc_ctrl0_reg__split_fields31) (mk___split_fields1 dw1000__registers__pmsc_ctrl0__read__reg__fields dw1000__registers__pmsc_ctrl0__read__reg__fields1 dw1000__registers__pmsc_ctrl0__read__reg__fields2 dw1000__registers__pmsc_ctrl0__read__reg__fields3 dw1000__registers__pmsc_ctrl0__read__reg__fields4 dw1000__registers__pmsc_ctrl0__read__reg__fields5 dw1000__registers__pmsc_ctrl0__read__reg__fields6 dw1000__registers__pmsc_ctrl0__read__reg__fields7 dw1000__registers__pmsc_ctrl0__read__reg__fields8 dw1000__registers__pmsc_ctrl0__read__reg__fields9 dw1000__registers__pmsc_ctrl0__read__reg__fields10 dw1000__registers__pmsc_ctrl0__read__reg__fields11 dw1000__registers__pmsc_ctrl0__read__reg__fields12 dw1000__registers__pmsc_ctrl0__read__reg__fields13 dw1000__registers__pmsc_ctrl0__read__reg__fields14 dw1000__registers__pmsc_ctrl0__read__reg__fields15)))
(assert (= (to_rep3 o24) #x01))
(assert (= o24 o25))
(assert (= pmsc_ctrl0_reg__split_fields17 o26))
(assert (= pmsc_ctrl0_reg__split_fields18 o27))
(assert (= pmsc_ctrl0_reg__split_fields19 o28))
(assert (= pmsc_ctrl0_reg__split_fields20 o29))
(assert (= pmsc_ctrl0_reg__split_fields21 o30))
(assert (= pmsc_ctrl0_reg__split_fields22 o31))
(assert (= pmsc_ctrl0_reg__split_fields23 o32))
(assert (= pmsc_ctrl0_reg__split_fields24 o33))
(assert (= pmsc_ctrl0_reg__split_fields25 o34))
(assert (= pmsc_ctrl0_reg__split_fields26 o35))
(assert (= pmsc_ctrl0_reg__split_fields27 o36))
(assert (= pmsc_ctrl0_reg__split_fields28 o37))
(assert (= pmsc_ctrl0_reg__split_fields29 o38))
(assert (= pmsc_ctrl0_reg__split_fields30 o39))
(assert (= pmsc_ctrl0_reg__split_fields31 o40))
(assert (= temp___3680 o25))
(assert (= temp___36801 o26))
(assert (= temp___36802 o27))
(assert (= temp___36803 o28))
(assert (= temp___36804 o29))
(assert (= temp___36805 o30))
(assert (= temp___36806 o31))
(assert (= temp___36807 o32))
(assert (= temp___36808 o33))
(assert (= temp___36809 o34))
(assert (= temp___368010 o35))
(assert (= temp___368011 o36))
(assert (= temp___368012 o37))
(assert (= temp___368013 o38))
(assert (= temp___368014 o39))
(assert (= temp___368015 o40))
(assert (= result16 pmsc_ctrl0_reg__split_fields16))
(assert (= result17 pmsc_ctrl0_reg__split_fields17))
(assert (= result18 pmsc_ctrl0_reg__split_fields18))
(assert (= result19 pmsc_ctrl0_reg__split_fields19))
(assert (= result20 pmsc_ctrl0_reg__split_fields20))
(assert (= result21 pmsc_ctrl0_reg__split_fields21))
(assert (= result22 pmsc_ctrl0_reg__split_fields22))
(assert (= result23 pmsc_ctrl0_reg__split_fields23))
(assert (= result24 pmsc_ctrl0_reg__split_fields24))
(assert (= result25 pmsc_ctrl0_reg__split_fields25))
(assert (= result26 pmsc_ctrl0_reg__split_fields26))
(assert (= result27 pmsc_ctrl0_reg__split_fields27))
(assert (= result28 pmsc_ctrl0_reg__split_fields28))
(assert (= result29 pmsc_ctrl0_reg__split_fields29))
(assert (= result30 pmsc_ctrl0_reg__split_fields30))
(assert (= result31 pmsc_ctrl0_reg__split_fields31))
(assert (= pmsc_ctrl0_reg__split_fields32 (mk___split_fields1 temp___3680 temp___36801 temp___36802 temp___36803 temp___36804 temp___36805 temp___36806 temp___36807 temp___36808 temp___36809 temp___368010 temp___368011 temp___368012 temp___368013 temp___368014 temp___368015)))
(assert (= (to_rep3 o41) #x00))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks pmsc_ctrl0_reg__split_fields32) o42))
(assert (= o41 o43))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__txclks pmsc_ctrl0_reg__split_fields32) o44))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__face pmsc_ctrl0_reg__split_fields32) o45))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__adcce pmsc_ctrl0_reg__split_fields32) o46))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__amce pmsc_ctrl0_reg__split_fields32) o47))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__gpce pmsc_ctrl0_reg__split_fields32) o48))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__gprn pmsc_ctrl0_reg__split_fields32) o49))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce pmsc_ctrl0_reg__split_fields32) o50))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn pmsc_ctrl0_reg__split_fields32) o51))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken pmsc_ctrl0_reg__split_fields32) o52))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__softreset pmsc_ctrl0_reg__split_fields32) o53))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 pmsc_ctrl0_reg__split_fields32) o54))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 pmsc_ctrl0_reg__split_fields32) o55))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 pmsc_ctrl0_reg__split_fields32) o56))
(assert (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 pmsc_ctrl0_reg__split_fields32) o57))
(assert (= temp___3682 o42))
(assert (= temp___36821 o43))
(assert (= temp___36822 o44))
(assert (= temp___36823 o45))
(assert (= temp___36824 o46))
(assert (= temp___36825 o47))
(assert (= temp___36826 o48))
(assert (= temp___36827 o49))
(assert (= temp___36828 o50))
(assert (= temp___36829 o51))
(assert (= temp___368210 o52))
(assert (= temp___368211 o53))
(assert (= temp___368212 o54))
(assert (= temp___368213 o55))
(assert (= temp___368214 o56))
(assert (= temp___368215 o57))
(assert (= result32 (mk___split_fields__ref1 pmsc_ctrl0_reg__split_fields32)))
(assert (= pmsc_ctrl0_reg__split_fields33 (mk___split_fields1 temp___3682 temp___36821 temp___36822 temp___36823 temp___36824 temp___36825 temp___36826 temp___36827 temp___36828 temp___36829 temp___368210 temp___368211 temp___368212 temp___368213 temp___368214 temp___368215)))
(assert (= (to_rep o59) 2))
(assert (= (to_rep o58) 1))
(assert (not (<= (+ (bv2nat #x75) (ite (<= (to_rep o58) (to_rep o59)) (+ (- (to_rep o59) (to_rep o58)) 1) 0)) 256)))
(check-sat)
(exit)
