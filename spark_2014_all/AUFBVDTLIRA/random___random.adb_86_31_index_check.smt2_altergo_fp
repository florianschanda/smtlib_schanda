(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(4294967296 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type long_long_integer

predicate in_range2(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : long_long_integer, long_long_integer -> bool

logic dummy1 : long_long_integer

type long_long_integer__ref = { long_long_integer__content :
long_long_integer
}

function long_long_integer__ref___projection(a: long_long_integer__ref) : long_long_integer =
  (a).long_long_integer__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type unsigned_32

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq3 : unsigned_32, unsigned_32 -> bool

logic dummy3 : unsigned_32

type unsigned_32__ref = { unsigned_32__content : unsigned_32
}

function unsigned_32__ref___projection(a: unsigned_32__ref) : unsigned_32 =
  (a).unsigned_32__content

logic to_rep : unsigned_32 -> t

logic of_rep : t -> unsigned_32

axiom inversion_axiom :
  (forall x:unsigned_32 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: unsigned_32) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned_32 [to_int2(x)]. uint_in_range(to_int2(x)))

type state_range

predicate in_range4(x: int) = ((0 <= x) and (x <= 623))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : state_range, state_range -> bool

logic dummy4 : state_range

type state_range__ref = { state_range__content : state_range
}

function state_range__ref___projection(a: state_range__ref) : state_range =
  (a).state_range__content

type map__ref = { map__content : (int,unsigned_32) farray
}

logic slide : (int,unsigned_32) farray, int, int -> (int,unsigned_32) farray

axiom slide_eq :
  (forall a:(int,unsigned_32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,unsigned_32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,unsigned_32) farray, int, int, (int,unsigned_32) farray,
  int, int -> (int,unsigned_32) farray

axiom concat_def :
  (forall a:(int,unsigned_32) farray. forall b:(int,unsigned_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : unsigned_32, int -> (int,unsigned_32) farray

axiom singleton_def :
  (forall v:unsigned_32.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq8 : (int,unsigned_32) farray, int, int,
  (int,unsigned_32) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,unsigned_32) farray. forall a__first:int.
  forall a__last:int. forall b:(int,unsigned_32) farray. forall b__first:int.
  forall b__last:int [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,unsigned_32) farray. forall b:(int,unsigned_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,unsigned_32) farray, int, int, (int,unsigned_32) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,unsigned_32) farray. forall b:(int,unsigned_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,unsigned_32) farray. forall b:(int,unsigned_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep((a[(i + 1)])), to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,unsigned_32) farray. forall b:(int,unsigned_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep((a[(j + 1)])), to_rep((b[(i + 1)]))))))))))))

logic to_rep1 : state_range -> int

logic of_rep1 : int -> state_range

axiom inversion_axiom1 :
  (forall x:state_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:state_range [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic dummy5 : (int,unsigned_32) farray

logic value__size : int

logic object__size : (int,unsigned_32) farray -> int

logic value__component__size : int

logic object__component__size : (int,unsigned_32) farray -> int

logic value__alignment : int

logic object__alignment : (int,unsigned_32) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,unsigned_32) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,unsigned_32) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,unsigned_32) farray. (0 <= object__alignment(a)))

logic user_eq5 : (int,unsigned_32) farray, (int,unsigned_32) farray -> bool

type us_split_fields = { rec__random__generator__state :
(int,unsigned_32) farray; rec__random__generator__index : state_range
}

function us_split_fields_State__projection(a: us_split_fields) : (int,unsigned_32) farray =
  (a).rec__random__generator__state

function us_split_fields_Index__projection(a: us_split_fields) : state_range =
  (a).rec__random__generator__index

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((bool_eq8(((a).us_split_fields1).rec__random__generator__state, 0, 623,
  ((b).us_split_fields1).rec__random__generator__state, 0, 623) = true) and
  (to_rep1(((a).us_split_fields1).rec__random__generator__index) = to_rep1(((b).us_split_fields1).rec__random__generator__index))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((bool_eq8(((a).us_split_fields1).rec__random__generator__state, 0,
  623, ((b).us_split_fields1).rec__random__generator__state, 0,
  623) = true) and
  (to_rep1(((a).us_split_fields1).rec__random__generator__index) = to_rep1(((b).us_split_fields1).rec__random__generator__index)))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,unsigned_32) farray. forall a1:state_range.
  (0 <= object__size1({ us_split_fields1 = { rec__random__generator__state =
  a; rec__random__generator__index = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,unsigned_32) farray. forall a1:state_range.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__random__generator__state = a; rec__random__generator__index = a1 }
  })))

logic random__generator__state__first__bit : int

logic random__generator__state__last__bit : int

logic random__generator__state__position : int

axiom random__generator__state__first__bit_axiom :
  (0 <= random__generator__state__first__bit)

axiom random__generator__state__last__bit_axiom :
  (random__generator__state__first__bit <  random__generator__state__last__bit)

axiom random__generator__state__position_axiom :
  (0 <= random__generator__state__position)

logic random__generator__index__first__bit : int

logic random__generator__index__last__bit : int

logic random__generator__index__position : int

axiom random__generator__index__first__bit_axiom :
  (0 <= random__generator__index__first__bit)

axiom random__generator__index__last__bit_axiom :
  (random__generator__index__first__bit <  random__generator__index__last__bit)

axiom random__generator__index__position_axiom :
  (0 <= random__generator__index__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : (int,unsigned_32) farray

logic dummy7 : state_range

type generator__ref = { generator__content : us_rep
}

function generator__ref___projection(a: generator__ref) : us_rep =
  (a).generator__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,unsigned_32) farray; rt : t1
}

function to_array(a: us_t) : (int,unsigned_32) farray = (a).elts

function of_array(a: (int,unsigned_32) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,unsigned_32) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,unsigned_32) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,unsigned_32) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,unsigned_32) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,unsigned_32) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,unsigned_32) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy8 : (int,unsigned_32) farray

logic dummy9 : t1

type initialization_vector__ref = { initialization_vector__content : us_t
}

function initialization_vector__ref___projection(a: initialization_vector__ref) : us_t =
  (a).initialization_vector__content

logic reset : t -> us_rep

logic reset__function_guard : us_rep, t -> prop

axiom reset__post_axiom : true

logic initiator : (int,unsigned_32) farray

logic initiator1 : t1

logic attr__ATTRIBUTE_ADDRESS : int

logic to_state : int -> t

logic to_state__function_guard : t, int -> prop

axiom to_state__post_axiom : true

axiom to_state__def_axiom :
  (forall s:int [to_state(s)]. (in_range4(s) -> (to_state(s) = of_int(s))))

logic to_state__2 : int -> t

logic to_state__2__function_guard : t, int -> prop

axiom to_state__2__post_axiom : true

axiom to_state__2__def_axiom :
  (forall s:int [to_state__2(s)]. (in_range3(s) ->
  (to_state__2(s) = of_int(s))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic to_rep3 : long_long_integer -> int

logic of_rep3 : int -> long_long_integer

axiom inversion_axiom3 :
  (forall x:long_long_integer [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:long_long_integer [to_rep3(x)]. in_range2(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range2(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : long_long_integer, long_long_integer -> bool

logic dummy10 : long_long_integer

type t4b__ref = { t4b__content : long_long_integer
}

function t4b__ref___projection(a: t4b__ref) : long_long_integer =
  (a).t4b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type t5b

predicate in_range5(x: int) = ((1 <= x) and (x <= 623))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : t5b, t5b -> bool

logic dummy11 : t5b

type t5b__ref = { t5b__content : t5b
}

function t5b__ref___projection(a: t5b__ref) : t5b = (a).t5b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic i : int

logic j : int

logic g__split_fields : (int,unsigned_32) farray

logic g__split_fields1 : state_range

logic k : int

logic k1 : int

logic random__reset__2__R3b__g__assume : (int,unsigned_32) farray

logic random__reset__2__R3b__g__assume1 : state_range

logic temp___285 : int

logic temp___284 : int

logic temp___283 : int

logic temp___281 : (int,unsigned_32) farray

logic temp___2811 : state_range

logic o : int

logic o1 : unsigned_32

logic o2 : int

logic o3 : unsigned_32

logic o4 : t

logic o5 : t

logic o6 : t

logic o7 : t

logic o8 : t

logic o9 : int

logic o10 : unsigned_32

logic o11 : t

logic o12 : t

logic o13 : t

logic o14 : t

logic o15 : t

logic o16 : unsigned_32

logic o17 : (int,unsigned_32) farray

logic o18 : (int,unsigned_32) farray

logic o19 : state_range

logic temp___276 : (int,unsigned_32) farray

logic temp___2761 : state_range

logic o20 : unsigned_32

logic o21 : (int,unsigned_32) farray

logic o22 : (int,unsigned_32) farray

logic o23 : state_range

logic temp___280 : (int,unsigned_32) farray

logic temp___2801 : state_range

logic o24 : int

logic o25 : int

logic o26 : int

logic o27 : unsigned_32

logic o28 : int

logic o29 : unsigned_32

logic o30 : t

logic o31 : t

logic o32 : t

logic o33 : t

logic o34 : t

logic o35 : int

logic o36 : unsigned_32

logic o37 : t

logic o38 : t

logic o39 : t

logic o40 : t

logic o41 : t

logic o42 : unsigned_32

logic o43 : (int,unsigned_32) farray

logic o44 : (int,unsigned_32) farray

logic o45 : state_range

logic temp___2762 : (int,unsigned_32) farray

logic temp___2763 : state_range

logic o46 : unsigned_32

logic o47 : (int,unsigned_32) farray

logic o48 : (int,unsigned_32) farray

logic o49 : state_range

logic temp___2802 : (int,unsigned_32) farray

logic temp___2803 : state_range

logic o50 : int

logic o51 : int

logic o52 : int

logic o53 : unsigned_32

logic o54 : int

logic o55 : unsigned_32

logic o56 : t

logic o57 : t

logic o58 : t

logic o59 : t

logic o60 : t

logic o61 : t

logic o62 : t

logic o63 : t

logic o64 : unsigned_32

logic o65 : (int,unsigned_32) farray

logic o66 : (int,unsigned_32) farray

logic o67 : state_range

logic temp___295 : (int,unsigned_32) farray

logic temp___2951 : state_range

logic o68 : unsigned_32

logic o69 : (int,unsigned_32) farray

logic o70 : (int,unsigned_32) farray

logic o71 : state_range

logic temp___299 : (int,unsigned_32) farray

logic temp___2991 : state_range

logic o72 : int

logic o73 : int

logic o74 : unsigned_32

logic o75 : int

logic o76 : unsigned_32

logic o77 : t

logic o78 : t

logic o79 : t

logic o80 : t

logic o81 : t

logic o82 : t

logic o83 : t

logic o84 : t

logic o85 : unsigned_32

logic o86 : (int,unsigned_32) farray

logic o87 : (int,unsigned_32) farray

logic o88 : state_range

logic temp___2952 : (int,unsigned_32) farray

logic temp___2953 : state_range

logic o89 : unsigned_32

logic o90 : (int,unsigned_32) farray

logic o91 : (int,unsigned_32) farray

logic o92 : state_range

logic temp___2992 : (int,unsigned_32) farray

logic temp___2993 : state_range

logic o93 : int

logic result : int

logic i1 : int

logic result1 : int

logic j1 : int

logic result2 : (int,unsigned_32) farray

logic result3 : state_range

logic g__split_fields2 : (int,unsigned_32) farray

logic g__split_fields3 : state_range

logic result4 : int

logic k2 : int

logic result5 : (int,unsigned_32) farray

logic result6 : state_range

logic g__split_fields4 : (int,unsigned_32) farray

logic g__split_fields5 : state_range

logic result7 : (int,unsigned_32) farray

logic result8 : state_range

logic g__split_fields6 : (int,unsigned_32) farray

logic g__split_fields7 : state_range

logic result9 : int

logic i2 : int

logic result10 : int

logic i3 : int

logic result11 : int

logic j2 : int

logic i4 : int

logic j3 : int

logic g__split_fields8 : (int,unsigned_32) farray

logic g__split_fields9 : state_range

logic k3 : int

logic result12 : int

logic k4 : int

logic result13 : (int,unsigned_32) farray

logic result14 : state_range

logic g__split_fields10 : (int,unsigned_32) farray

logic g__split_fields11 : state_range

logic result15 : (int,unsigned_32) farray

logic result16 : state_range

logic g__split_fields12 : (int,unsigned_32) farray

logic g__split_fields13 : state_range

logic result17 : int

logic i5 : int

logic result18 : int

logic i6 : int

logic result19 : int

logic j4 : int

logic i7 : int

logic j5 : int

logic g__split_fields14 : (int,unsigned_32) farray

logic g__split_fields15 : state_range

logic k5 : int

logic i8 : int

logic j6 : int

logic g__split_fields16 : (int,unsigned_32) farray

logic g__split_fields17 : state_range

logic k6 : int

logic i9 : int

logic j7 : int

logic g__split_fields18 : (int,unsigned_32) farray

logic g__split_fields19 : state_range

logic k7 : int

logic i10 : int

logic j8 : int

logic g__split_fields20 : (int,unsigned_32) farray

logic g__split_fields21 : state_range

logic k8 : int

logic i11 : int

logic j9 : int

logic g__split_fields22 : (int,unsigned_32) farray

logic g__split_fields23 : state_range

logic k9 : int

logic i12 : int

logic j10 : int

logic g__split_fields24 : (int,unsigned_32) farray

logic g__split_fields25 : state_range

logic k10 : int

logic result20 : int

logic k11 : int

logic result21 : (int,unsigned_32) farray

logic result22 : state_range

logic g__split_fields26 : (int,unsigned_32) farray

logic g__split_fields27 : state_range

logic result23 : (int,unsigned_32) farray

logic result24 : state_range

logic g__split_fields28 : (int,unsigned_32) farray

logic g__split_fields29 : state_range

logic result25 : int

logic i13 : int

logic result26 : int

logic i14 : int

logic i15 : int

logic g__split_fields30 : (int,unsigned_32) farray

logic g__split_fields31 : state_range

logic i16 : int

logic g__split_fields32 : (int,unsigned_32) farray

logic g__split_fields33 : state_range

logic i17 : int

logic g__split_fields34 : (int,unsigned_32) farray

logic g__split_fields35 : state_range

logic k12 : int

logic result27 : int

logic k13 : int

logic result28 : (int,unsigned_32) farray

logic result29 : state_range

logic g__split_fields36 : (int,unsigned_32) farray

logic g__split_fields37 : state_range

logic result30 : (int,unsigned_32) farray

logic result31 : state_range

logic g__split_fields38 : (int,unsigned_32) farray

logic g__split_fields39 : state_range

logic result32 : int

logic i18 : int

logic result33 : int

logic i19 : int

logic i20 : int

logic g__split_fields40 : (int,unsigned_32) farray

logic g__split_fields41 : state_range

logic i21 : int

logic g__split_fields42 : (int,unsigned_32) farray

logic g__split_fields43 : state_range

logic i22 : int

logic g__split_fields44 : (int,unsigned_32) farray

logic g__split_fields45 : state_range

logic k14 : int

logic i23 : int

logic g__split_fields46 : (int,unsigned_32) farray

logic g__split_fields47 : state_range

logic k15 : int

axiom H : dynamic_property(0, 2147483647, to_rep2(first(initiator1)),
  to_rep2(last(initiator1)))

axiom H1 : ((to_rep2(first(initiator1)) = 0) and (1 <= length({ elts =
  initiator; rt = initiator1 })))

axiom H2 : (result = i)

axiom H3 : (i1 = 1)

axiom H4 : in_range4(i1)

axiom H5 : (result1 = j)

axiom H6 : (j1 = 0)

axiom H7 : in_range3(j1)

axiom H8 : ({ us_split_fields1 = { rec__random__generator__state =
  random__reset__2__R3b__g__assume; rec__random__generator__index =
  random__reset__2__R3b__g__assume1 } } = reset(of_int(19650218)))

axiom H9 : ((result2 = g__split_fields) and (result3 = g__split_fields1))

axiom H10 : ((g__split_fields2 = random__reset__2__R3b__g__assume) and
  (g__split_fields3 = random__reset__2__R3b__g__assume1))

axiom H11 : (result4 = k)

axiom H12 : (k2 = 1)

axiom H13 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (((temp___285 = j1) and ((temp___284 = i1) and
  ((temp___283 = k2) and (((g__split_fields2 = temp___281) and
  (g__split_fields3 = temp___2811)) and (((((((((o13 = to_state__2(j1)) and
  (o13 = of_int(j1))) and (((((((to_rep2(first(initiator1)) <= j1) and
  (j1 <= to_rep2(last(initiator1)))) and (o9 = j1)) and
  (o10 = (initiator[o9]))) and (o11 = to_rep(o10))) and
  ((((((((((0 <= (i1 - 1)) and ((i1 - 1) <= 623)) and (o2 = (i1 - 1))) and
  (o3 = (g__split_fields2[o2]))) and (o4 = to_rep(o3))) and (o5 = lsr_bv(o4,
  of_int(30)))) and ((((((0 <= (i1 - 1)) and ((i1 - 1) <= 623)) and
  (o = (i1 - 1))) and (o1 = (g__split_fields2[o]))) and
  (o6 = to_rep(o1))) and (o7 = bw_xor(o6, o5)))) and (o8 = mul(o7,
  of_int(1664525)))) and (o12 = bw_xor(to_rep((g__split_fields2[i1])),
  o8))) and (o14 = add(o12, o11)))) and (o15 = add(o14, o13)))) and
  (to_rep(o16) = o15)) and (o17 = (g__split_fields2[i1 <- o16]))) and
  ((o17 = o18) and (g__split_fields3 = o19))) and ((temp___276 = o18) and
  (temp___2761 = o19))) and (((result5 = g__split_fields2) and
  (result6 = g__split_fields3)) and ((g__split_fields4 = temp___276) and
  (g__split_fields5 = temp___2761)))) and ((((i1 = 623) ->
  ((((((to_rep(o20) = to_rep((g__split_fields4[623]))) and
  (o21 = (g__split_fields4[0 <- o20]))) and ((o21 = o22) and
  (g__split_fields5 = o23))) and ((temp___280 = o22) and
  (temp___2801 = o23))) and (((result7 = g__split_fields4) and
  (result8 = g__split_fields5)) and ((g__split_fields6 = temp___280) and
  (g__split_fields7 = temp___2801)))) and ((result9 = i1) and (i2 = 1)))) and
  ((not (i1 = 623)) -> ((((o24 = (i1 + 1)) and in_range4((i1 + 1))) and
  ((result10 = i1) and (i3 = o24))) and
  (((g__split_fields6 = g__split_fields4) and
  (g__split_fields7 = g__split_fields5)) and (i2 = i3))))) and
  (((((j1 = to_rep2(last(initiator1))) -> (o25 = 0)) and
  ((not (j1 = to_rep2(last(initiator1)))) -> ((o25 = (j1 + 1)) and
  in_range1((j1 + 1))))) and ((result11 = j1) and (j2 = o25))) and
  (((0 <  i4) and ((to_rep2(first(initiator1)) <= j3) and
  (j3 <= to_rep2(last(initiator1))))) and
  ((((((g__split_fields9 = temp___2811) and ((1 <= max(624, length({ elts =
  initiator; rt = initiator1 }))) -> dynamic_property1(1, max(624, length({
  elts = initiator; rt = initiator1 })), k3))) and ((0 <= 623) ->
  in_range4(i4))) and ((0 <= 2147483647) -> in_range3(j3))) and
  ((1 <= k3) and (k3 <= max(624, length({ elts = initiator; rt = initiator1
  }))))) and (k3 = max(624, length({ elts = initiator; rt = initiator1
  })))))))))))) and (((k7 = k3) and
  (((g__split_fields18 = g__split_fields8) and
  (g__split_fields19 = g__split_fields9)) and ((j7 = j3) and (i9 = i4)))) and
  ((k8 = k3) and (((g__split_fields20 = g__split_fields8) and
  (g__split_fields21 = g__split_fields9)) and ((j8 = j3) and (i10 = i4)))))))

axiom H14 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (k9 = k7))

axiom H15 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> ((g__split_fields22 = g__split_fields18) and
  (g__split_fields23 = g__split_fields19)))

axiom H16 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (j9 = j7))

axiom H17 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (i11 = i9))

axiom H18 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (k10 = k8))

axiom H19 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> ((g__split_fields24 = g__split_fields20) and
  (g__split_fields25 = g__split_fields21)))

axiom H20 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (j10 = j8))

axiom H21 : (((1 <= k2) and (k2 <= max(624, length({ elts = initiator; rt =
  initiator1 })))) -> (i12 = i10))

axiom H22 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> (k9 = k2))

axiom H23 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> ((g__split_fields22 = g__split_fields2) and
  (g__split_fields23 = g__split_fields3)))

axiom H24 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> (j9 = j1))

axiom H25 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> (i11 = i1))

axiom H26 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> (k10 = k2))

axiom H27 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> ((g__split_fields24 = g__split_fields2) and
  (g__split_fields25 = g__split_fields3)))

axiom H28 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> (j10 = j1))

axiom H29 : ((not ((1 <= k2) and (k2 <= max(624, length({ elts = initiator;
  rt = initiator1 }))))) -> (i12 = i1))

axiom H30 : (result20 = k1)

axiom H31 : (k11 = 1)

axiom H32 : (1 <= k11)

axiom H33 : (k11 <= 623)

axiom H34 : ((o61 = to_state(i11)) and (o61 = of_int(i11)))

axiom H35 : ((0 <= (i11 - 1)) and ((i11 - 1) <= 623))

axiom H36 : (o54 = (i11 - 1))

axiom H37 : (o55 = (g__split_fields22[o54]))

axiom H38 : (o56 = to_rep(o55))

axiom H39 : (o57 = lsr_bv(o56, of_int(30)))

 (* File "random.ads", line 68, characters 0-0 *)
goal WP_parameter_def : (0 <= (i11 - 1))
