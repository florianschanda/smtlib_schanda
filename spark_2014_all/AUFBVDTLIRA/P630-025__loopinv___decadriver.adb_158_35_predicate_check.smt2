(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort frame_length 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (frame_length frame_length) Bool)
(declare-const dummy2 frame_length)
(declare-datatypes () ((frame_length__ref (mk_frame_length__ref (frame_length__content frame_length)))))
(define-fun frame_length__ref___projection ((a frame_length__ref)) frame_length (frame_length__content a))
(declare-fun to_rep1 (frame_length) Int)
(declare-fun of_rep1 (Int) frame_length)
(assert (forall ((x frame_length)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x frame_length)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort rx_errors 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (rx_errors rx_errors) Bool)
(declare-const dummy3 rx_errors)
(declare-datatypes () ((rx_errors__ref (mk_rx_errors__ref (rx_errors__content rx_errors)))))
(define-fun rx_errors__ref___projection ((a rx_errors__ref)) rx_errors (rx_errors__content a))
(define-fun dynamic_invariant ((temp___expr_4403 Int) (temp___is_init_4400 Bool) (temp___skip_constant_4401 Bool) (temp___do_toplevel_4402 Bool)) Bool (=> (or (= temp___is_init_4400 true) (<= 0 5)) (in_range4 temp___expr_4403)))
(declare-fun to_rep2 (rx_errors) Int)
(declare-fun of_rep2 (Int) rx_errors)
(assert (forall ((x rx_errors)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x rx_errors)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort bits_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (bits_8 bits_8) Bool)
(declare-const dummy4 bits_8)
(declare-datatypes () ((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content a))
(declare-fun to_rep3 (bits_8) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) bits_8)
(assert (forall ((x bits_8)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int3 ((x bits_8)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x bits_8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int bits_8))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))
(assert (forall ((v bits_8)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int) (b (Array Int bits_8)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep3 (select a temp___idx_132)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep3 (select a temp___idx_132)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int Int) Int)
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep3 (select a (+ j 1))) (to_rep3 (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy5 (Array Int bits_8))
(declare-const value__size Int)
(declare-fun object__size ((Array Int bits_8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int bits_8)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int bits_8)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))
(declare-fun user_eq5 ((Array Int bits_8) (Array Int bits_8)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__decadriver__rx_frame_type__size frame_length) (rec__decadriver__rx_frame_type__frame (Array Int bits_8)) (rec__decadriver__rx_frame_type__error rx_errors) (rec__decadriver__rx_frame_type__overrun Bool)))))
(define-fun us_split_fields_Size__2__projection ((a us_split_fields)) frame_length (rec__decadriver__rx_frame_type__size a))
(define-fun us_split_fields_Frame__projection ((a us_split_fields)) (Array Int bits_8) (rec__decadriver__rx_frame_type__frame a))
(define-fun us_split_fields_Error__projection ((a us_split_fields)) rx_errors (rec__decadriver__rx_frame_type__error a))
(define-fun us_split_fields_Overrun__projection ((a us_split_fields)) Bool (rec__decadriver__rx_frame_type__overrun a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___137__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___139__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 a))) (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 b)))) (= (bool_eq (rec__decadriver__rx_frame_type__frame (us_split_fields1 a)) 0 1024 (rec__decadriver__rx_frame_type__frame (us_split_fields1 b)) 0 1024) true)) (= (to_rep2 (rec__decadriver__rx_frame_type__error (us_split_fields1 a))) (to_rep2 (rec__decadriver__rx_frame_type__error (us_split_fields1 b))))) (= (rec__decadriver__rx_frame_type__overrun (us_split_fields1 a)) (rec__decadriver__rx_frame_type__overrun (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const decadriver__rx_frame_type__size__first__bit Int)
(declare-const decadriver__rx_frame_type__size__last__bit Int)
(declare-const decadriver__rx_frame_type__size__position Int)
(assert (<= 0 decadriver__rx_frame_type__size__first__bit))
(assert (< decadriver__rx_frame_type__size__first__bit decadriver__rx_frame_type__size__last__bit))
(assert (<= 0 decadriver__rx_frame_type__size__position))
(declare-const decadriver__rx_frame_type__frame__first__bit Int)
(declare-const decadriver__rx_frame_type__frame__last__bit Int)
(declare-const decadriver__rx_frame_type__frame__position Int)
(assert (<= 0 decadriver__rx_frame_type__frame__first__bit))
(assert (< decadriver__rx_frame_type__frame__first__bit decadriver__rx_frame_type__frame__last__bit))
(assert (<= 0 decadriver__rx_frame_type__frame__position))
(declare-const decadriver__rx_frame_type__error__first__bit Int)
(declare-const decadriver__rx_frame_type__error__last__bit Int)
(declare-const decadriver__rx_frame_type__error__position Int)
(assert (<= 0 decadriver__rx_frame_type__error__first__bit))
(assert (< decadriver__rx_frame_type__error__first__bit decadriver__rx_frame_type__error__last__bit))
(assert (<= 0 decadriver__rx_frame_type__error__position))
(declare-const decadriver__rx_frame_type__overrun__first__bit Int)
(declare-const decadriver__rx_frame_type__overrun__last__bit Int)
(declare-const decadriver__rx_frame_type__overrun__position Int)
(assert (<= 0 decadriver__rx_frame_type__overrun__first__bit))
(assert (< decadriver__rx_frame_type__overrun__first__bit decadriver__rx_frame_type__overrun__last__bit))
(assert (<= 0 decadriver__rx_frame_type__overrun__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((rx_frame_type__ref (mk_rx_frame_type__ref (rx_frame_type__content us_rep)))))
(define-fun rx_frame_type__ref___projection ((a rx_frame_type__ref)) us_rep (rx_frame_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_4409 us_rep) (temp___is_init_4406 Bool) (temp___skip_constant_4407 Bool) (temp___do_toplevel_4408 Bool)) Bool (=> (= temp___do_toplevel_4408 true) (=> (= temp___is_init_4406 true) (ite (= (to_rep2 (rec__decadriver__rx_frame_type__error (us_split_fields1 temp___expr_4409))) 0) (< 0 (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 temp___expr_4409)))) (= (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 temp___expr_4409))) 0)))))
(define-fun dynamic_predicate ((temp___4420 us_rep)) Bool (ite (= (to_rep2 (rec__decadriver__rx_frame_type__error (us_split_fields1 temp___4420))) 0) (< 0 (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 temp___4420)))) (= (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 temp___4420))) 0)))
(declare-sort rx_frame_queue_index 0)
(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 1))))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq7 (rx_frame_queue_index rx_frame_queue_index) Bool)
(declare-const dummy7 rx_frame_queue_index)
(declare-datatypes () ((rx_frame_queue_index__ref (mk_rx_frame_queue_index__ref (rx_frame_queue_index__content rx_frame_queue_index)))))
(define-fun rx_frame_queue_index__ref___projection ((a rx_frame_queue_index__ref)) rx_frame_queue_index (rx_frame_queue_index__content a))
(define-fun dynamic_invariant2 ((temp___expr_4427 (_ BitVec 8)) (temp___is_init_4424 Bool) (temp___skip_constant_4425 Bool) (temp___do_toplevel_4426 Bool)) Bool (=> (or (= temp___is_init_4424 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1))) (in_range5 temp___expr_4427)))
(declare-fun to_rep4 (rx_frame_queue_index) (_ BitVec 8))
(declare-fun of_rep4 ((_ BitVec 8)) rx_frame_queue_index)
(assert (forall ((x rx_frame_queue_index)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x rx_frame_queue_index)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 2)))) (=> (in_range5 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int4 ((x rx_frame_queue_index)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x rx_frame_queue_index)) (! (in_range_int (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 8) us_rep))))))
(declare-fun slide1 ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) us_rep))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (forall ((first (_ BitVec 8))) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) us_rep))
(assert (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep))) (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)) (b_first (_ BitVec 8)) (b_last (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep (_ BitVec 8)) (Array (_ BitVec 8) us_rep))
(assert (forall ((v us_rep)) (forall ((i (_ BitVec 8))) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq2 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_183 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_183) (bvule temp___idx_183 a__last)) (= (bool_eq1 (select a temp___idx_183) (select b (bvadd (bvsub b__first a__first) temp___idx_183))) true)))) true false))
(assert (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_183 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_183) (bvule temp___idx_183 a__last)) (= (bool_eq1 (select a temp___idx_183) (select b (bvadd (bvsub b__first a__first) temp___idx_183))) true))))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__decadriver__receiver_type__frame_queue (Array (_ BitVec 8) us_rep)) (rec__decadriver__receiver_type__queue_head rx_frame_queue_index) (rec__decadriver__receiver_type__rx_count natural) (rec__decadriver__receiver_type__overrun_occurred Bool) (rec__decadriver__receiver_type__frame_ready Bool)))))
(define-fun us_split_fields_Frame_Queue__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep) (rec__decadriver__receiver_type__frame_queue a))
(define-fun us_split_fields_Queue_Head__projection ((a us_split_fields2)) rx_frame_queue_index (rec__decadriver__receiver_type__queue_head a))
(define-fun us_split_fields_Rx_Count__projection ((a us_split_fields2)) natural (rec__decadriver__receiver_type__rx_count a))
(define-fun us_split_fields_Overrun_Occurred__projection ((a us_split_fields2)) Bool (rec__decadriver__receiver_type__overrun_occurred a))
(define-fun us_split_fields_Frame_Ready__projection ((a us_split_fields2)) Bool (rec__decadriver__receiver_type__frame_ready a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___138__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___140__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const decadriver__receiver_type__frame_queue__first__bit Int)
(declare-const decadriver__receiver_type__frame_queue__last__bit Int)
(declare-const decadriver__receiver_type__frame_queue__position Int)
(assert (<= 0 decadriver__receiver_type__frame_queue__first__bit))
(assert (< decadriver__receiver_type__frame_queue__first__bit decadriver__receiver_type__frame_queue__last__bit))
(assert (<= 0 decadriver__receiver_type__frame_queue__position))
(declare-const decadriver__receiver_type__queue_head__first__bit Int)
(declare-const decadriver__receiver_type__queue_head__last__bit Int)
(declare-const decadriver__receiver_type__queue_head__position Int)
(assert (<= 0 decadriver__receiver_type__queue_head__first__bit))
(assert (< decadriver__receiver_type__queue_head__first__bit decadriver__receiver_type__queue_head__last__bit))
(assert (<= 0 decadriver__receiver_type__queue_head__position))
(declare-const decadriver__receiver_type__rx_count__first__bit Int)
(declare-const decadriver__receiver_type__rx_count__last__bit Int)
(declare-const decadriver__receiver_type__rx_count__position Int)
(assert (<= 0 decadriver__receiver_type__rx_count__first__bit))
(assert (< decadriver__receiver_type__rx_count__first__bit decadriver__receiver_type__rx_count__last__bit))
(assert (<= 0 decadriver__receiver_type__rx_count__position))
(declare-const decadriver__receiver_type__overrun_occurred__first__bit Int)
(declare-const decadriver__receiver_type__overrun_occurred__last__bit Int)
(declare-const decadriver__receiver_type__overrun_occurred__position Int)
(assert (<= 0 decadriver__receiver_type__overrun_occurred__first__bit))
(assert (< decadriver__receiver_type__overrun_occurred__first__bit decadriver__receiver_type__overrun_occurred__last__bit))
(assert (<= 0 decadriver__receiver_type__overrun_occurred__position))
(declare-const decadriver__receiver_type__frame_ready__first__bit Int)
(declare-const decadriver__receiver_type__frame_ready__last__bit Int)
(declare-const decadriver__receiver_type__frame_ready__position Int)
(assert (<= 0 decadriver__receiver_type__frame_ready__first__bit))
(assert (< decadriver__receiver_type__frame_ready__first__bit decadriver__receiver_type__frame_ready__last__bit))
(assert (<= 0 decadriver__receiver_type__frame_ready__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-datatypes () ((receiver_type__ref (mk_receiver_type__ref (receiver_type__content us_rep1)))))
(define-fun receiver_type__ref___projection ((a receiver_type__ref)) us_rep1 (receiver_type__content a))
(declare-fun temp___4465 (us_rep) (Array (_ BitVec 8) us_rep))
(assert (forall ((temp___4467 us_rep)) (forall ((temp___4468 (_ BitVec 8))) (= (select (temp___4465 temp___4467) temp___4468) temp___4467))))
(declare-fun temp___4469 ((_ BitVec 8)) (Array Int bits_8))
(assert (forall ((temp___4471 (_ BitVec 8))) (forall ((temp___4472 Int)) (= (select (temp___4469 temp___4471) temp___4472) (of_rep3 temp___4471)))))
(define-fun dynamic_invariant3 ((temp___expr_4459 us_rep1) (temp___is_init_4456 Bool) (temp___skip_constant_4457 Bool) (temp___do_toplevel_4458 Bool)) Bool (forall ((temp___4460 (_ BitVec 8))) (=> (and (bvule ((_ int2bv 8) 0) temp___4460) (bvule temp___4460 ((_ int2bv 8) 1))) (let ((temp___4461 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 temp___expr_4459)) temp___4460))) (ite (= (to_rep2 (rec__decadriver__rx_frame_type__error (us_split_fields1 temp___4461))) 0) (< 0 (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 temp___4461)))) (= (to_rep1 (rec__decadriver__rx_frame_type__size (us_split_fields1 temp___4461))) 0))))))
(define-fun default_initial_assumption ((temp___expr_4463 us_rep1) (temp___skip_top_level_4464 Bool)) Bool (and (and (and (and (= (rec__decadriver__receiver_type__frame_queue (us_split_fields3 temp___expr_4463)) (temp___4465 (mk___rep (mk___split_fields (of_rep1 0) (temp___4469 ((_ int2bv 8) 0)) (of_rep2 0) (of_int 0))))) (= (to_rep4 (rec__decadriver__receiver_type__queue_head (us_split_fields3 temp___expr_4463))) ((_ int2bv 8) 1))) (= (to_rep (rec__decadriver__receiver_type__rx_count (us_split_fields3 temp___expr_4463))) 0)) (= (rec__decadriver__receiver_type__overrun_occurred (us_split_fields3 temp___expr_4463)) (of_int 0))) (= (rec__decadriver__receiver_type__frame_ready (us_split_fields3 temp___expr_4463)) (of_int 0))))
(declare-const error Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant6 ((temp___expr_4397 Int) (temp___is_init_4394 Bool) (temp___skip_constant_4395 Bool) (temp___do_toplevel_4396 Bool)) Bool (=> (or (= temp___is_init_4394 true) (<= 0 1024)) (in_range3 temp___expr_4397)))
(define-fun dynamic_invariant7 ((temp___expr_323 (_ BitVec 8)) (temp___is_init_320 Bool) (temp___skip_constant_321 Bool) (temp___do_toplevel_322 Bool)) Bool true)
(declare-const next_idx (_ BitVec 8))
(declare-const self__ (Array (_ BitVec 8) us_rep))
(declare-const self__1 rx_frame_queue_index)
(declare-const self__2 natural)
(declare-const self__3 Bool)
(declare-const self__4 Bool)
(declare-const o Int)
(declare-const o1 (_ BitVec 8))
(declare-const o2 (_ BitVec 8))
(declare-const o3 (_ BitVec 8))
(declare-const o4 Int)
(declare-const o5 natural)
(declare-const o6 (Array (_ BitVec 8) us_rep))
(declare-const o7 rx_frame_queue_index)
(declare-const o8 natural)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const o11 (Array (_ BitVec 8) us_rep))
(declare-const o12 rx_frame_queue_index)
(declare-const o13 natural)
(declare-const o14 Bool)
(declare-const o15 Bool)
(declare-const o16 frame_length)
(declare-const o17 frame_length)
(declare-const o18 (Array Int bits_8))
(declare-const o19 rx_errors)
(declare-const o20 Bool)
(declare-const temp___4579 frame_length)
(declare-const temp___45791 (Array Int bits_8))
(declare-const temp___45792 rx_errors)
(declare-const temp___45793 Bool)
(declare-const o21 frame_length)
(declare-const o22 (Array Int bits_8))
(declare-const o23 rx_errors)
(declare-const o24 Bool)
(declare-const o25 (Array (_ BitVec 8) us_rep))
(declare-const o26 (Array (_ BitVec 8) us_rep))
(declare-const o27 rx_frame_queue_index)
(declare-const o28 natural)
(declare-const o29 Bool)
(declare-const o30 Bool)
(declare-const o31 (Array (_ BitVec 8) us_rep))
(declare-const o32 rx_frame_queue_index)
(declare-const o33 natural)
(declare-const o34 Bool)
(declare-const o35 Bool)
(declare-const o36 rx_errors)
(declare-const o37 frame_length)
(declare-const o38 (Array Int bits_8))
(declare-const o39 rx_errors)
(declare-const o40 Bool)
(declare-const temp___4583 frame_length)
(declare-const temp___45831 (Array Int bits_8))
(declare-const temp___45832 rx_errors)
(declare-const temp___45833 Bool)
(declare-const o41 frame_length)
(declare-const o42 (Array Int bits_8))
(declare-const o43 rx_errors)
(declare-const o44 Bool)
(declare-const o45 (Array (_ BitVec 8) us_rep))
(declare-const o46 (Array (_ BitVec 8) us_rep))
(declare-const o47 rx_frame_queue_index)
(declare-const o48 natural)
(declare-const o49 Bool)
(declare-const o50 Bool)
(declare-const o51 us_rep1)
(declare-const result t__ref)
(declare-const next_idx1 (_ BitVec 8))
(declare-const result1 receiver_type__ref)
(declare-const self__5 us_rep1)
(declare-const result2 receiver_type__ref)
(declare-const self__6 us_rep1)
(declare-const result3 receiver_type__ref)
(declare-const self__7 us_rep1)
(assert (dynamic_invariant3 (mk___rep1 (mk___split_fields1 self__ self__1 self__2 self__3 self__4)) true false true))
(assert (in_range4 error))
(assert (not (= error 0)))
(assert (=> (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1)) (in_range5 next_idx)))
(assert (not (<= 2 (to_rep self__2))))
(assert (and (= o (to_rep self__2)) (in_range_int (to_rep self__2))))
(assert (= o1 ((_ int2bv 8) o)))
(assert (= o2 (bvadd (to_rep4 self__1) o1)))
(assert (= o3 (bvurem o2 ((_ int2bv 8) 2))))
(assert (= result (mk_t__ref next_idx)))
(assert (= next_idx1 o3))
(assert (and (= o4 (+ (to_rep self__2) 1)) (in_range1 (+ (to_rep self__2) 1))))
(assert (= (to_rep o5) o4))
(assert (= self__ o6))
(assert (= self__1 o7))
(assert (= o5 o8))
(assert (= self__3 o9))
(assert (= self__4 o10))
(assert (= o11 o6))
(assert (= o12 o7))
(assert (= o13 o8))
(assert (= o14 o9))
(assert (= o15 o10))
(assert (= result1 (mk_receiver_type__ref (mk___rep1 (mk___split_fields1 self__ self__1 self__2 self__3 self__4)))))
(assert (= self__5 (mk___rep1 (mk___split_fields1 o11 o12 o13 o14 o15))))
(assert (= (to_rep1 o16) 0))
(assert (= o16 o17))
(assert (= (rec__decadriver__rx_frame_type__frame (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__5)) next_idx1))) o18))
(assert (= (rec__decadriver__rx_frame_type__error (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__5)) next_idx1))) o19))
(assert (= (rec__decadriver__rx_frame_type__overrun (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__5)) next_idx1))) o20))
(assert (= temp___4579 o17))
(assert (= temp___45791 o18))
(assert (= temp___45792 o19))
(assert (= temp___45793 o20))
(assert (dynamic_predicate (mk___rep (mk___split_fields temp___4579 temp___45791 temp___45792 temp___45793))))
(assert (= (mk___rep (mk___split_fields o21 o22 o23 o24)) (mk___rep (mk___split_fields temp___4579 temp___45791 temp___45792 temp___45793))))
(assert (= o25 (store (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__5)) next_idx1 (mk___rep (mk___split_fields o21 o22 o23 o24)))))
(assert (= o25 o26))
(assert (= (rec__decadriver__receiver_type__queue_head (us_split_fields3 self__5)) o27))
(assert (= (rec__decadriver__receiver_type__rx_count (us_split_fields3 self__5)) o28))
(assert (= (rec__decadriver__receiver_type__overrun_occurred (us_split_fields3 self__5)) o29))
(assert (= (rec__decadriver__receiver_type__frame_ready (us_split_fields3 self__5)) o30))
(assert (= o31 o26))
(assert (= o32 o27))
(assert (= o33 o28))
(assert (= o34 o29))
(assert (= o35 o30))
(assert (= result2 (mk_receiver_type__ref self__5)))
(assert (= self__6 (mk___rep1 (mk___split_fields1 o31 o32 o33 o34 o35))))
(assert (= (to_rep2 o36) error))
(assert (= (rec__decadriver__rx_frame_type__size (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__6)) next_idx1))) o37))
(assert (= (rec__decadriver__rx_frame_type__frame (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__6)) next_idx1))) o38))
(assert (= o36 o39))
(assert (= (rec__decadriver__rx_frame_type__overrun (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__6)) next_idx1))) o40))
(assert (= temp___4583 o37))
(assert (= temp___45831 o38))
(assert (= temp___45832 o39))
(assert (= temp___45833 o40))
(assert (dynamic_predicate (mk___rep (mk___split_fields temp___4583 temp___45831 temp___45832 temp___45833))))
(assert (= (mk___rep (mk___split_fields o41 o42 o43 o44)) (mk___rep (mk___split_fields temp___4583 temp___45831 temp___45832 temp___45833))))
(assert (= o45 (store (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__6)) next_idx1 (mk___rep (mk___split_fields o41 o42 o43 o44)))))
(assert (= o45 o46))
(assert (= (rec__decadriver__receiver_type__queue_head (us_split_fields3 self__6)) o47))
(assert (= (rec__decadriver__receiver_type__rx_count (us_split_fields3 self__6)) o48))
(assert (= (rec__decadriver__receiver_type__overrun_occurred (us_split_fields3 self__6)) o49))
(assert (= (rec__decadriver__receiver_type__frame_ready (us_split_fields3 self__6)) o50))
(assert (= o51 (mk___rep1 (mk___split_fields1 o46 o47 o48 o49 o50))))
(assert (= result3 (mk_receiver_type__ref self__6)))
(assert (= self__7 o51))
(assert (not (dynamic_predicate (mk___rep (mk___split_fields (rec__decadriver__rx_frame_type__size (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__7)) next_idx1))) (rec__decadriver__rx_frame_type__frame (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__7)) next_idx1))) (rec__decadriver__rx_frame_type__error (us_split_fields1 (select (rec__decadriver__receiver_type__frame_queue (us_split_fields3 self__7)) next_idx1))) (rec__decadriver__receiver_type__overrun_occurred (us_split_fields3 self__7)))))))
(check-sat)
(exit)
