(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth3 ((_ BitVec 64) Int) Bool)
(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl3 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left4 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right4 v (bv2nat n)))))
(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth3 x (bv2nat i)) (nth_bv3 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))
(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun inmemoryrange ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun inmemoryrange__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_236 (_ BitVec 64)) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool true)
(assert (forall ((var (_ BitVec 64)) (lower (_ BitVec 64)) (upper (_ BitVec 64))) (! (=> (and (and (dynamic_invariant var true true true true) (dynamic_invariant lower true true true true)) (dynamic_invariant upper true true true true)) (= (= (inmemoryrange var lower upper) true) (ite (bvult lower upper) (and (bvule lower var) (bvult var upper)) (or (bvule lower var) (bvult var upper))))) :pattern ((inmemoryrange var lower upper)))))
(declare-fun insaferegion64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun insaferegion64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((var (_ BitVec 64)) (rsp (_ BitVec 64))) (! (=> (and (dynamic_invariant var true true true true) (dynamic_invariant rsp true true true true)) (= (= (insaferegion64 var rsp) true) (or (and (bvule var #xCFFFFFFFFFFFFFFF) (bvuge var (bvadd rsp #x0000000000000008))) (and (bvule var #x3FFFFFFFFFFFFFFF) (bvuge var #x0000000000000000))))) :pattern ((insaferegion64 var rsp)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))
(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned32 unsigned32) Bool)
(declare-const dummy1 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant1 ((temp___expr_243 (_ BitVec 32)) (temp___is_init_239 Bool) (temp___skip_constant_240 Bool) (temp___do_toplevel_241 Bool) (temp___do_typ_inv_242 Bool)) Bool true)
(assert (forall ((x86__rax (_ BitVec 64))) (! (=> (dynamic_invariant x86__rax true true true true) (let ((result (eax x86__rax))) (and (= result ((_ extract 31 0) (bvand x86__rax #x00000000FFFFFFFF))) (dynamic_invariant1 result true false true true)))) :pattern ((eax x86__rax)))))
(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)
(declare-fun writereg32post__function_guard (Bool (_ BitVec 64) (_ BitVec 32)) Bool)
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (unsigned8 unsigned8) Bool)
(declare-const dummy2 unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int5 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int5 x)) :pattern ((to_int5 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun readmem64 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem64 addr x86__memory))) (and (and (and (and (and (and (and (and (= (bvand result #x00000000000000FF) ((_ zero_extend 56) (to_rep (select x86__memory addr)))) (= (bvand result #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0000000000000100))) (= (bvand result #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x0000000000010000))) (= (bvand result #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x0000000001000000))) (= (bvand result #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000004)))) #x0000000100000000))) (= (bvand result #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000005)))) #x0000010000000000))) (= (bvand result #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000006)))) #x0001000000000000))) (= (bvand result #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000007)))) #x0100000000000000))) (dynamic_invariant result true false true true)))) :pattern ((readmem64 addr x86__memory))))))
(declare-sort unsigned16 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))
(declare-fun user_eq3 (unsigned16 unsigned16) Bool)
(declare-const dummy3 unsigned16)
(declare-datatypes () ((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16 (unsigned16__content a))
(define-fun dynamic_invariant2 ((temp___expr_250 (_ BitVec 16)) (temp___is_init_246 Bool) (temp___skip_constant_247 Bool) (temp___do_toplevel_248 Bool) (temp___do_typ_inv_249 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-sort unsigned641 0)
(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (unsigned641 unsigned641) Bool)
(declare-const dummy4 unsigned641)
(declare-datatypes () ((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641 (unsigned64__content1 a))
(define-fun dynamic_invariant3 ((temp___expr_314 (_ BitVec 64)) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(define-fun dynamic_invariant4 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true true) (let ((result (readreg32 reg))) (and (= result ((_ extract 31 0) (bvand reg #x00000000FFFFFFFF))) (dynamic_invariant1 result true false true true)))) :pattern ((readreg32 reg)))))
(assert (forall ((regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 32))) (! (=> (and (dynamic_invariant regnew true true true true) (dynamic_invariant1 val__ true true true true)) (= (= (writereg32post regnew val__) true) (and (= (readreg32 regnew) val__) (= (bvand regnew #xFFFFFFFF00000000) #x0000000000000000)))) :pattern ((writereg32post regnew val__))))))
(declare-const zeroflag Bool)
(declare-const carryflag Bool)
(declare-const signflag Bool)
(declare-const overflowflag Bool)
(declare-const rax (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rbp (_ BitVec 64))
(declare-const rsi (_ BitVec 64))
(declare-const rdi (_ BitVec 64))
(declare-const memory map__ref)
(declare-const rdx_400586 t__ref3)
(declare-const rdi_400586 t__ref3)
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 64))
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 32))
(declare-const o4 (_ BitVec 32))
(declare-const o5 (_ BitVec 64))
(declare-const o6 (_ BitVec 64))
(declare-const o7 Bool)
(declare-const o8 (_ BitVec 64))
(declare-const o9 (_ BitVec 64))
(declare-const o10 Bool)
(declare-const o11 Bool)
(declare-const o12 (_ BitVec 64))
(declare-const o13 (_ BitVec 64))
(declare-const o14 (_ BitVec 64))
(declare-const o15 (_ BitVec 64))
(declare-const o16 (_ BitVec 64))
(declare-const o17 (_ BitVec 64))
(declare-const result t__ref3)
(declare-const rdx_4005861 (_ BitVec 64))
(declare-const result1 t__ref3)
(declare-const rdi_4005861 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result2 t__ref3)
(declare-const rsp1 (_ BitVec 64))
(declare-const result3 t__ref3)
(declare-const rbp1 (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const memory3 (Array (_ BitVec 64) unsigned8))
(declare-const memory4 (Array (_ BitVec 64) unsigned8))
(declare-const result4 t__ref3)
(declare-const rax1 (_ BitVec 64))
(declare-const rax2 (_ BitVec 64))
(declare-const result5 bool__ref)
(declare-const zeroflag1 Bool)
(declare-const result6 bool__ref)
(declare-const signflag1 Bool)
(declare-const result7 bool__ref)
(declare-const carryflag1 Bool)
(declare-const result8 bool__ref)
(declare-const overflowflag1 Bool)
(declare-const result9 Bool)
(declare-const result10 Bool)
(declare-const result11 t__ref3)
(declare-const rax3 (_ BitVec 64))
(declare-const memory5 (Array (_ BitVec 64) unsigned8))
(declare-const result12 t__ref3)
(declare-const rax4 (_ BitVec 64))
(declare-const memory6 (Array (_ BitVec 64) unsigned8))
(declare-const memory7 (Array (_ BitVec 64) unsigned8))
(declare-const result13 t__ref3)
(declare-const rax5 (_ BitVec 64))
(declare-const memory8 (Array (_ BitVec 64) unsigned8))
(declare-const result14 t__ref3)
(declare-const rax6 (_ BitVec 64))
(declare-const memory9 (Array (_ BitVec 64) unsigned8))
(declare-const memory10 (Array (_ BitVec 64) unsigned8))
(declare-const result15 t__ref3)
(declare-const rax7 (_ BitVec 64))
(declare-const result16 t__ref3)
(declare-const rbp2 (_ BitVec 64))
(declare-const result17 t__ref3)
(declare-const rsp2 (_ BitVec 64))
(declare-const result18 t__ref3)
(declare-const rsp3 (_ BitVec 64))
(declare-const zeroflag2 bool__ref)
(declare-const carryflag2 bool__ref)
(declare-const signflag2 bool__ref)
(declare-const overflowflag2 bool__ref)
(declare-const rax8 t__ref3)
(declare-const rsp4 t__ref3)
(declare-const rbp3 t__ref3)
(declare-const memory11 map__ref)
(declare-const rdx_4005862 t__ref3)
(declare-const rdi_4005862 t__ref3)
(declare-const zeroflag3 Bool)
(declare-const carryflag3 Bool)
(declare-const signflag3 Bool)
(declare-const overflowflag3 Bool)
(declare-const rax9 (_ BitVec 64))
(declare-const rsp5 (_ BitVec 64))
(declare-const rbp4 (_ BitVec 64))
(declare-const memory12 (Array (_ BitVec 64) unsigned8))
(declare-const rdx_4005863 (_ BitVec 64))
(declare-const rdi_4005863 (_ BitVec 64))
(assert (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (= (inmemoryrange i rdi (bvadd rdi rdx)) true) (= (insaferegion64 i rsp) true)))))
(assert (= o rdx))
(assert (= result rdx_400586))
(assert (= (let ((subject rdx_400586)) rdx_4005861) o))
(assert (= o1 rdi))
(assert (= result1 rdi_400586))
(assert (= (let ((subject rdi_400586)) rdi_4005861) o1))
(assert (= rsp #xA7FFFFFFFFFFFFFF))
(assert (and (and (and (and (and (and (and (and (= (bvand rbp #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvsub rsp #x0000000000000008))))) (= (bvand rbp #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand rbp #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand rbp #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand rbp #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand rbp #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand rbp #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand rbp #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub rsp #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rsp #x0000000000000008))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub rsp #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep (select (map__content memory) i))))))))
(assert (= result2 (mk_t__ref3 rsp)))
(assert (= rsp1 (bvsub rsp #x0000000000000008)))
(assert (= result3 (mk_t__ref3 rbp)))
(assert (= rbp1 rsp1))
(assert (and (and (and (and (and (and (and (and (= (bvand rdi #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvsub rbp1 #x0000000000000038))))) (= (bvand rdi #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000001)))) #x0000000000000100))) (= (bvand rdi #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000002)))) #x0000000000010000))) (= (bvand rdi #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000003)))) #x0000000001000000))) (= (bvand rdi #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000004)))) #x0000000100000000))) (= (bvand rdi #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000005)))) #x0000010000000000))) (= (bvand rdi #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000006)))) #x0001000000000000))) (= (bvand rdi #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000038))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep (select (let ((subject memory)) memory1) i))))))))
(assert (and (and (and (and (and (and (and (and (= (bvand rsi #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvsub rbp1 #x0000000000000040))))) (= (bvand rsi #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000001)))) #x0000000000000100))) (= (bvand rsi #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000002)))) #x0000000000010000))) (= (bvand rsi #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000003)))) #x0000000001000000))) (= (bvand rsi #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000004)))) #x0000000100000000))) (= (bvand rsi #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000005)))) #x0000010000000000))) (= (bvand rsi #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000006)))) #x0001000000000000))) (= (bvand rsi #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000040))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep (select (let ((subject memory)) memory2) i))))))))
(assert (and (and (and (and (and (and (and (and (= (bvand rdx #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub rbp1 #x0000000000000048))))) (= (bvand rdx #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000001)))) #x0000000000000100))) (= (bvand rdx #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000002)))) #x0000000000010000))) (= (bvand rdx #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000003)))) #x0000000001000000))) (= (bvand rdx #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000004)))) #x0000000100000000))) (= (bvand rdx #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000005)))) #x0000010000000000))) (= (bvand rdx #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000006)))) #x0001000000000000))) (= (bvand rdx #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000048))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep (select (let ((subject memory)) memory3) i))))))))
(assert (and (= o2 (readmem64 (bvsub rbp1 #x0000000000000038) (let ((subject memory)) memory4))) (and (and (and (and (and (and (and (= (bvand o2 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub rbp1 #x0000000000000038))))) (= (bvand o2 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000001)))) #x0000000000000100))) (= (bvand o2 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000002)))) #x0000000000010000))) (= (bvand o2 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000003)))) #x0000000001000000))) (= (bvand o2 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000004)))) #x0000000100000000))) (= (bvand o2 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000005)))) #x0000010000000000))) (= (bvand o2 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000006)))) #x0001000000000000))) (= (bvand o2 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result4 (mk_t__ref3 rax)))
(assert (= rax1 o2))
(assert (and (= o3 (eax rax1)) (= o3 ((_ extract 31 0) (bvand rax1 #x00000000FFFFFFFF)))))
(assert (= o4 (bvand o3 #x00000007)))
(assert (= (writereg32post rax2 o4) true))
(assert (= result5 (mk_bool__ref zeroflag)))
(assert (= zeroflag1 (ite (= rax2 #x0000000000000000) true false)))
(assert (= result6 (mk_bool__ref signflag)))
(assert (= signflag1 (ite (bvugt rax2 #x7FFFFFFFFFFFFFFF) true false)))
(assert (= result7 (mk_bool__ref carryflag)))
(assert (= carryflag1 (distinct 0 0)))
(assert (= result8 (mk_bool__ref overflowflag)))
(assert (= overflowflag1 (distinct 0 0)))
(assert (=> (not (= rax2 #x0000000000000000)) (= result10 true)))
(assert (=> (not (not (= rax2 #x0000000000000000))) (and (= o8 (readmem64 (bvsub rbp1 #x0000000000000040) (let ((subject memory)) memory4))) (and (and (and (and (and (and (and (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub rbp1 #x0000000000000040))))) (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000001)))) #x0000000000000100))) (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000002)))) #x0000000000010000))) (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000003)))) #x0000000001000000))) (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000004)))) #x0000000100000000))) (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000005)))) #x0000010000000000))) (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000006)))) #x0001000000000000))) (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000007)))) #x0100000000000000))))))
(assert (=> (not (not (= rax2 #x0000000000000000))) (= o9 (bvand o8 #x0000000000000007))))
(assert (=> (not (not (= rax2 #x0000000000000000))) (= o10 (ite (= o9 #x0000000000000000) true false))))
(assert (=> (not (not (= rax2 #x0000000000000000))) (= result10 (ite (not (= o10 true)) true false))))
(assert (=> (= result10 true) (= o11 true)))
(assert (=> (not (= result10 true)) (and (= o5 (readmem64 (bvsub rbp1 #x0000000000000048) (let ((subject memory)) memory4))) (and (and (and (and (and (and (and (= (bvand o5 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub rbp1 #x0000000000000048))))) (= (bvand o5 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000001)))) #x0000000000000100))) (= (bvand o5 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000002)))) #x0000000000010000))) (= (bvand o5 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000003)))) #x0000000001000000))) (= (bvand o5 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000004)))) #x0000000100000000))) (= (bvand o5 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000005)))) #x0000010000000000))) (= (bvand o5 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000006)))) #x0001000000000000))) (= (bvand o5 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000048) #x0000000000000007)))) #x0100000000000000))))))
(assert (=> (not (= result10 true)) (= o6 (bvand o5 #x0000000000000007))))
(assert (=> (not (= result10 true)) (= o7 (ite (= o6 #x0000000000000000) true false))))
(assert (=> (not (= result10 true)) (= o11 (ite (not (= o7 true)) true false))))
(assert (= result9 (ite (not (= o11 true)) true false)))
(assert (=> (= result9 true) (and (= o12 (readmem64 (bvsub rbp1 #x0000000000000038) (let ((subject memory)) memory4))) (and (and (and (and (and (and (and (= (bvand o12 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub rbp1 #x0000000000000038))))) (= (bvand o12 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000001)))) #x0000000000000100))) (= (bvand o12 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000002)))) #x0000000000010000))) (= (bvand o12 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000003)))) #x0000000001000000))) (= (bvand o12 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000004)))) #x0000000100000000))) (= (bvand o12 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000005)))) #x0000010000000000))) (= (bvand o12 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000006)))) #x0001000000000000))) (= (bvand o12 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000007)))) #x0100000000000000))))))
(assert (=> (= result9 true) (= result11 (mk_t__ref3 rax2))))
(assert (=> (= result9 true) (= rax3 o12)))
(assert (=> (= result9 true) (and (and (and (and (and (and (and (and (= (bvand rax3 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvsub rbp1 #x0000000000000010))))) (= (bvand rax3 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000001)))) #x0000000000000100))) (= (bvand rax3 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000002)))) #x0000000000010000))) (= (bvand rax3 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000003)))) #x0000000001000000))) (= (bvand rax3 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000004)))) #x0000000100000000))) (= (bvand rax3 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000005)))) #x0000010000000000))) (= (bvand rax3 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000006)))) #x0001000000000000))) (= (bvand rax3 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000010))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000010) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep (select (let ((subject memory)) memory4) i)))))))))
(assert (=> (= result9 true) (and (= o13 (readmem64 (bvsub rbp1 #x0000000000000040) (let ((subject memory)) memory5))) (and (and (and (and (and (and (and (= (bvand o13 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvsub rbp1 #x0000000000000040))))) (= (bvand o13 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000001)))) #x0000000000000100))) (= (bvand o13 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000002)))) #x0000000000010000))) (= (bvand o13 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000003)))) #x0000000001000000))) (= (bvand o13 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000004)))) #x0000000100000000))) (= (bvand o13 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000005)))) #x0000010000000000))) (= (bvand o13 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000006)))) #x0001000000000000))) (= (bvand o13 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000007)))) #x0100000000000000))))))
(assert (=> (= result9 true) (= result12 (mk_t__ref3 rax3))))
(assert (=> (= result9 true) (= rax4 o13)))
(assert (=> (= result9 true) (and (and (and (and (and (and (and (and (= (bvand rax4 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvsub rbp1 #x0000000000000018))))) (= (bvand rax4 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000001)))) #x0000000000000100))) (= (bvand rax4 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000002)))) #x0000000000010000))) (= (bvand rax4 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000003)))) #x0000000001000000))) (= (bvand rax4 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000004)))) #x0000000100000000))) (= (bvand rax4 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000005)))) #x0000010000000000))) (= (bvand rax4 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000006)))) #x0001000000000000))) (= (bvand rax4 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000018))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000018) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep (select (let ((subject memory)) memory5) i)))))))))
(assert (=> (= result9 true) (and (and (and (and (and (and (and (and (= (bvand #x0000000000000000 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvsub rbp1 #x0000000000000008))))) (= (bvand #x0000000000000000 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand #x0000000000000000 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand #x0000000000000000 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand #x0000000000000000 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand #x0000000000000000 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand #x0000000000000000 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand #x0000000000000000 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000008))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory7) i)) (to_rep (select (let ((subject memory)) memory6) i)))))))))
(assert (=> (not (= result9 true)) (and (= o14 (readmem64 (bvsub rbp1 #x0000000000000038) (let ((subject memory)) memory4))) (and (and (and (and (and (and (and (= (bvand o14 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub rbp1 #x0000000000000038))))) (= (bvand o14 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000001)))) #x0000000000000100))) (= (bvand o14 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000002)))) #x0000000000010000))) (= (bvand o14 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000003)))) #x0000000001000000))) (= (bvand o14 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000004)))) #x0000000100000000))) (= (bvand o14 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000005)))) #x0000010000000000))) (= (bvand o14 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000006)))) #x0001000000000000))) (= (bvand o14 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000007)))) #x0100000000000000))))))
(assert (=> (not (= result9 true)) (= result13 (mk_t__ref3 rax2))))
(assert (=> (not (= result9 true)) (= rax5 o14)))
(assert (=> (not (= result9 true)) (and (and (and (and (and (and (and (and (= (bvand rax5 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvsub rbp1 #x0000000000000020))))) (= (bvand rax5 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000001)))) #x0000000000000100))) (= (bvand rax5 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000002)))) #x0000000000010000))) (= (bvand rax5 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000003)))) #x0000000001000000))) (= (bvand rax5 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000004)))) #x0000000100000000))) (= (bvand rax5 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000005)))) #x0000010000000000))) (= (bvand rax5 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000006)))) #x0001000000000000))) (= (bvand rax5 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000020))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000020) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory8) i)) (to_rep (select (let ((subject memory)) memory4) i)))))))))
(assert (=> (not (= result9 true)) (and (= o15 (readmem64 (bvsub rbp1 #x0000000000000040) (let ((subject memory)) memory8))) (and (and (and (and (and (and (and (= (bvand o15 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvsub rbp1 #x0000000000000040))))) (= (bvand o15 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000001)))) #x0000000000000100))) (= (bvand o15 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000002)))) #x0000000000010000))) (= (bvand o15 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000003)))) #x0000000001000000))) (= (bvand o15 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000004)))) #x0000000100000000))) (= (bvand o15 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000005)))) #x0000010000000000))) (= (bvand o15 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000006)))) #x0001000000000000))) (= (bvand o15 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 #x0000000000000040) #x0000000000000007)))) #x0100000000000000))))))
(assert (=> (not (= result9 true)) (= result14 (mk_t__ref3 rax5))))
(assert (=> (not (= result9 true)) (= rax6 o15)))
(assert (=> (not (= result9 true)) (and (and (and (and (and (and (and (and (= (bvand rax6 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvsub rbp1 #x0000000000000028))))) (= (bvand rax6 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000001)))) #x0000000000000100))) (= (bvand rax6 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000002)))) #x0000000000010000))) (= (bvand rax6 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000003)))) #x0000000001000000))) (= (bvand rax6 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000004)))) #x0000000100000000))) (= (bvand rax6 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000005)))) #x0000010000000000))) (= (bvand rax6 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000006)))) #x0001000000000000))) (= (bvand rax6 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000028))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000028) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory9) i)) (to_rep (select (let ((subject memory)) memory8) i)))))))))
(assert (=> (not (= result9 true)) (and (and (and (and (and (and (and (and (= (bvand #x0000000000000000 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvsub rbp1 #x0000000000000008))))) (= (bvand #x0000000000000000 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand #x0000000000000000 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand #x0000000000000000 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand #x0000000000000000 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand #x0000000000000000 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand #x0000000000000000 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand #x0000000000000000 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp1 #x0000000000000008))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp1 #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory10) i)) (to_rep (select (let ((subject memory)) memory9) i)))))))))
(assert (=> (not (= result9 true)) (= (let ((subject memory)) (mk_map__ref memory7)) (let ((subject memory)) (mk_map__ref memory10)))))
(assert (=> (not (= result9 true)) (= rax4 rax6)))
(assert (=> (not (= result9 true)) (= memory7 memory10)))
(assert (=> (not (= result9 true)) (= rax4 rax6)))
(assert (and (= o16 (readmem64 (bvsub rbp1 #x0000000000000038) (let ((subject memory)) memory7))) (and (and (and (and (and (and (and (= (bvand o16 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvsub rbp1 #x0000000000000038))))) (= (bvand o16 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000001)))) #x0000000000000100))) (= (bvand o16 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000002)))) #x0000000000010000))) (= (bvand o16 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000003)))) #x0000000001000000))) (= (bvand o16 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000004)))) #x0000000100000000))) (= (bvand o16 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000005)))) #x0000010000000000))) (= (bvand o16 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000006)))) #x0001000000000000))) (= (bvand o16 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 #x0000000000000038) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result15 (mk_t__ref3 rax4)))
(assert (= rax7 o16))
(assert (and (= o17 (readmem64 rsp1 (let ((subject memory)) memory7))) (and (and (and (and (and (and (and (= (bvand o17 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) rsp1)))) (= (bvand o17 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000001)))) #x0000000000000100))) (= (bvand o17 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000002)))) #x0000000000010000))) (= (bvand o17 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000003)))) #x0000000001000000))) (= (bvand o17 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000004)))) #x0000000100000000))) (= (bvand o17 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000005)))) #x0000010000000000))) (= (bvand o17 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000006)))) #x0001000000000000))) (= (bvand o17 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd rsp1 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result16 (mk_t__ref3 rbp1)))
(assert (= rbp2 o17))
(assert (= result17 (mk_t__ref3 rsp1)))
(assert (= rsp2 (bvadd rsp1 #x0000000000000008)))
(assert (= result18 (mk_t__ref3 rsp2)))
(assert (= rsp3 (bvadd rsp2 #x0000000000000008)))
(assert (= rdi_4005862 (let ((subject rdi_400586)) (mk_t__ref3 rdi_4005861))))
(assert (= rdx_4005862 (let ((subject rdx_400586)) (mk_t__ref3 rdx_4005861))))
(assert (= memory11 (let ((subject memory)) (mk_map__ref memory7))))
(assert (= rbp3 (mk_t__ref3 rbp2)))
(assert (= rsp4 (mk_t__ref3 rsp3)))
(assert (= rax8 (mk_t__ref3 rax7)))
(assert (= overflowflag2 (mk_bool__ref overflowflag1)))
(assert (= signflag2 (mk_bool__ref signflag1)))
(assert (= carryflag2 (mk_bool__ref carryflag1)))
(assert (= zeroflag2 (mk_bool__ref zeroflag1)))
(assert (= rdi_4005863 rdi_4005861))
(assert (= rdx_4005863 rdx_4005861))
(assert (= memory12 memory7))
(assert (= rbp4 rbp2))
(assert (= rsp5 rsp3))
(assert (= rax9 rax7))
(assert (= overflowflag3 overflowflag1))
(assert (= signflag3 signflag1))
(assert (= carryflag3 carryflag1))
(assert (= zeroflag3 zeroflag1))
(assert (not (= (to_rep (select (map__content memory11) rsp)) (to_rep (select (map__content memory) rsp)))))
(check-sat)
(exit)
