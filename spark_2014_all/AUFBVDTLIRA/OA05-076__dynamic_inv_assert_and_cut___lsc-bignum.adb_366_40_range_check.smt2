(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort word32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (word32 word32) Bool)
(declare-const dummy2 word32)
(declare-datatypes () ((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content a))
(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32)) (temp___is_init_214 Bool) (temp___skip_constant_215 Bool) (temp___do_toplevel_216 Bool)) Bool true)
(declare-fun to_rep1 (word32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) word32)
(assert (forall ((x word32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x word32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x word32)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))
(assert (forall ((a (Array Int word32))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int word32))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int Int) (Array Int word32))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (word32 Int) (Array Int word32))
(assert (forall ((v word32)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int) (b (Array Int word32)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep1 (select a temp___idx_134)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep1 (select a temp___idx_134)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int Int) Int)
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq1 (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content a))
(declare-fun oadd (us_rep us_rep) us_rep)
(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun osubtract (us_rep us_rep) us_rep)
(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun omultiply (us_rep us_rep) us_rep)
(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun omod (us_rep us_rep) us_rep)
(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun oexpon (us_rep Int) us_rep)
(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)
(assert true)
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun olt (us_rep us_rep) Bool)
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun from_word32 ((_ BitVec 32)) us_rep)
(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)
(assert true)
(declare-fun base (tuple0) us_rep)
(declare-fun base__function_guard (us_rep tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern ((base us_void_param)))))
(declare-sort big_int_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (big_int_range big_int_range) Bool)
(declare-const dummy4 big_int_range)
(declare-datatypes () ((big_int_range__ref (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range (big_int_range__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int word32)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))
(define-fun of_array ((a (Array Int word32)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int word32)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int word32)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int word32)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content a))
(define-fun dynamic_invariant2 ((temp___expr_289 us_t) (temp___is_init_286 Bool) (temp___skip_constant_287 Bool) (temp___do_toplevel_288 Bool)) Bool (=> (not (= temp___skip_constant_287 true)) (dynamic_property 0 2147483646 (first1 temp___expr_289) (last1 temp___expr_289))))
(declare-fun num_of_big_int (us_t Int Int) us_rep)
(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)
(assert true)
(declare-fun inverse (us_rep us_rep) us_rep)
(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun num_of_boolean (Bool) us_rep)
(declare-fun num_of_boolean__function_guard (us_rep Bool) Bool)
(declare-fun less (us_t Int Int us_t Int) Bool)
(declare-fun less__function_guard (Bool us_t Int Int us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (forall ((a_first Int) (a_last Int) (b_first Int)) (! (=> (and (and (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant a_first true true true)) (dynamic_invariant a_last true true true)) (dynamic_invariant2 b true true true)) (dynamic_invariant b_first true true true)) (and (and (and (and (and (<= (first1 a) a_first) (<= a_first (last1 a))) (and (<= (first1 a) a_last) (<= a_last (last1 a)))) (and (<= (first1 b) b_first) (<= b_first (last1 b)))) (and (<= (first1 b) (+ b_first (- a_last a_first))) (<= (+ b_first (- a_last a_first)) (last1 b)))) (<= a_first a_last))) (= (= (less a a_first a_last b b_first) true) (= (olt (num_of_big_int a a_first (+ (- a_last a_first) 1)) (num_of_big_int b b_first (+ (- a_last a_first) 1))) true))) :pattern ((less a a_first a_last b b_first))))))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const a_last Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const b_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c us_t)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const c_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const m us_t)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const m_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const m_inv (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-fun word_of_boolean (Bool) (_ BitVec 32))
(declare-fun word_of_boolean__function_guard ((_ BitVec 32) Bool) Bool)
(assert (forall ((b1 Bool)) (! (let ((result (word_of_boolean b1))) (and (= (oeq (from_word32 result) (num_of_boolean b1)) true) (dynamic_invariant1 result true false true))) :pattern ((word_of_boolean b1)))))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t62b__ref (mk_t62b__ref (t62b__content integer)))))
(define-fun t62b__ref___projection ((a t62b__ref)) integer (t62b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant4 ((temp___expr_283 Int) (temp___is_init_280 Bool) (temp___skip_constant_281 Bool) (temp___do_toplevel_282 Bool)) Bool (=> (or (= temp___is_init_280 true) (<= 0 2147483646)) (in_range3 temp___expr_283)))
(assert true)
(declare-const carry Bool)
(declare-const carry1 (_ BitVec 32))
(declare-const carry2 (_ BitVec 32))
(declare-const a_msw (_ BitVec 32))
(declare-const bi (_ BitVec 32))
(declare-const u (_ BitVec 32))
(declare-const i Int)
(declare-const o us_rep)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 us_rep)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 us_rep)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 us_rep)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Bool)
(declare-const o23 Bool)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const o30 Bool)
(declare-const o31 Bool)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 Int)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const o38 Bool)
(declare-const o39 Bool)
(declare-const temp___612 (Array Int word32))
(declare-const temp___610 (_ BitVec 32))
(declare-const temp___609 (_ BitVec 32))
(declare-const temp___608 (_ BitVec 32))
(declare-const temp___607 Int)
(declare-const temp___606 (_ BitVec 32))
(declare-const temp___605 (_ BitVec 32))
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 Int)
(declare-const o44 us_rep)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 us_rep)
(declare-const o50 us_rep)
(declare-const o51 us_rep)
(declare-const o52 Int)
(declare-const o53 Int)
(declare-const o54 Int)
(declare-const o55 Int)
(declare-const o56 us_rep)
(declare-const o57 Int)
(declare-const o58 Int)
(declare-const o59 us_rep)
(declare-const o60 Int)
(declare-const o61 Int)
(declare-const o62 Int)
(declare-const o63 Int)
(declare-const o64 us_rep)
(declare-const o65 us_rep)
(declare-const o66 Int)
(declare-const o67 Int)
(declare-const o68 Int)
(declare-const o69 Int)
(declare-const o70 us_rep)
(declare-const o71 us_rep)
(declare-const o72 us_rep)
(declare-const o73 Int)
(declare-const o74 Int)
(declare-const o75 us_rep)
(declare-const o76 us_rep)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 Int)
(declare-const o80 Int)
(declare-const o81 us_rep)
(declare-const o82 us_rep)
(declare-const o83 Int)
(declare-const o84 Int)
(declare-const o85 Int)
(declare-const o86 Int)
(declare-const o87 us_rep)
(declare-const o88 us_rep)
(declare-const o89 Int)
(declare-const o90 Int)
(declare-const o91 Int)
(declare-const o92 Int)
(declare-const o93 us_rep)
(declare-const o94 us_rep)
(declare-const o95 us_rep)
(declare-const o96 us_rep)
(declare-const o97 us_rep)
(declare-const o98 Int)
(declare-const o99 Int)
(declare-const o100 Int)
(declare-const o101 Int)
(declare-const o102 us_rep)
(declare-const o103 us_rep)
(declare-const o104 us_rep)
(declare-const o105 us_rep)
(declare-const o106 Bool)
(declare-const o107 Int)
(declare-const o108 Int)
(declare-const temp___603 Int)
(declare-const o109 Int)
(declare-const o110 word32)
(declare-const o111 (_ BitVec 32))
(declare-const o112 Int)
(declare-const o113 word32)
(declare-const o114 Int)
(declare-const o115 word32)
(declare-const o116 (_ BitVec 32))
(declare-const o117 (_ BitVec 32))
(declare-const o118 (_ BitVec 32))
(declare-const o119 (_ BitVec 32))
(declare-const o120 (_ BitVec 32))
(declare-const o121 Int)
(declare-const o122 word32)
(declare-const o123 (_ BitVec 32))
(declare-const lsc__bignum__single_add_mult_mult__a (_ BitVec 32))
(declare-const o124 Int)
(declare-const o125 word32)
(declare-const o126 (_ BitVec 32))
(declare-const o127 Int)
(declare-const o128 word32)
(declare-const o129 (_ BitVec 32))
(declare-const o130 word32)
(declare-const o131 Int)
(declare-const o132 (Array Int word32))
(declare-const o133 Int)
(declare-const o134 Int)
(declare-const o135 Int)
(declare-const o136 word32)
(declare-const o137 Int)
(declare-const o138 (Array Int word32))
(declare-const o139 Int)
(declare-const o140 word32)
(declare-const o141 (_ BitVec 32))
(declare-const o142 Bool)
(declare-const o143 (_ BitVec 32))
(declare-const o144 (_ BitVec 32))
(declare-const o145 Int)
(declare-const o146 Int)
(declare-const o147 Int)
(declare-const o148 Int)
(declare-const o149 us_rep)
(declare-const o150 Int)
(declare-const o151 Int)
(declare-const o152 Int)
(declare-const o153 Int)
(declare-const o154 us_rep)
(declare-const o155 us_rep)
(declare-const o156 us_rep)
(declare-const o157 Int)
(declare-const o158 Int)
(declare-const o159 Int)
(declare-const o160 Int)
(declare-const o161 us_rep)
(declare-const o162 Int)
(declare-const o163 Int)
(declare-const o164 Int)
(declare-const o165 Int)
(declare-const o166 us_rep)
(declare-const o167 Int)
(declare-const o168 Int)
(declare-const o169 Int)
(declare-const o170 Int)
(declare-const o171 us_rep)
(declare-const o172 us_rep)
(declare-const o173 Int)
(declare-const o174 Int)
(declare-const o175 Int)
(declare-const o176 Int)
(declare-const o177 us_rep)
(declare-const o178 us_rep)
(declare-const o179 us_rep)
(declare-const o180 Int)
(declare-const o181 Int)
(declare-const o182 Int)
(declare-const o183 Int)
(declare-const o184 us_rep)
(declare-const o185 us_rep)
(declare-const o186 Int)
(declare-const o187 Int)
(declare-const o188 Int)
(declare-const o189 Int)
(declare-const o190 us_rep)
(declare-const o191 us_rep)
(declare-const o192 Int)
(declare-const o193 Int)
(declare-const o194 Int)
(declare-const o195 Int)
(declare-const o196 us_rep)
(declare-const o197 us_rep)
(declare-const o198 Int)
(declare-const o199 Int)
(declare-const o200 Int)
(declare-const o201 Int)
(declare-const o202 us_rep)
(declare-const o203 us_rep)
(declare-const o204 us_rep)
(declare-const o205 us_rep)
(declare-const o206 us_rep)
(declare-const o207 Int)
(declare-const o208 Int)
(declare-const o209 Int)
(declare-const o210 Int)
(declare-const o211 us_rep)
(declare-const o212 us_rep)
(declare-const o213 us_rep)
(declare-const o214 us_rep)
(declare-const o215 Bool)
(declare-const o216 Bool)
(declare-const o217 Int)
(declare-const o218 Int)
(declare-const o219 Int)
(declare-const o220 Int)
(declare-const o221 Int)
(declare-const o222 Int)
(declare-const o223 Int)
(declare-const o224 Int)
(declare-const o225 us_rep)
(declare-const o226 Int)
(declare-const o227 Int)
(declare-const o228 Int)
(declare-const o229 Int)
(declare-const o230 us_rep)
(declare-const o231 us_rep)
(declare-const o232 Int)
(declare-const o233 Int)
(declare-const o234 Int)
(declare-const o235 Int)
(declare-const o236 us_rep)
(declare-const o237 us_rep)
(declare-const o238 us_rep)
(declare-const o239 Int)
(declare-const o240 Int)
(declare-const o241 Int)
(declare-const o242 Int)
(declare-const o243 us_rep)
(declare-const o244 us_rep)
(declare-const o245 Int)
(declare-const o246 Int)
(declare-const o247 Int)
(declare-const o248 Int)
(declare-const o249 us_rep)
(declare-const o250 us_rep)
(declare-const carry3 Bool)
(declare-const carry11 (_ BitVec 32))
(declare-const carry21 (_ BitVec 32))
(declare-const bi1 (_ BitVec 32))
(declare-const u1 (_ BitVec 32))
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const a (Array Int word32))
(declare-const result5 (_ BitVec 32))
(declare-const a_msw1 (_ BitVec 32))
(declare-const result6 Int)
(declare-const i1 Int)
(declare-const a1 (Array Int word32))
(declare-const carry12 (_ BitVec 32))
(declare-const carry22 (_ BitVec 32))
(declare-const a_msw2 (_ BitVec 32))
(declare-const bi2 (_ BitVec 32))
(declare-const u2 (_ BitVec 32))
(declare-const i2 Int)
(declare-const result7 (_ BitVec 32))
(declare-const carry13 (_ BitVec 32))
(declare-const result8 (_ BitVec 32))
(declare-const carry23 (_ BitVec 32))
(declare-const result9 (_ BitVec 32))
(declare-const bi3 (_ BitVec 32))
(declare-const result10 (_ BitVec 32))
(declare-const u3 (_ BitVec 32))
(declare-const carry14 (_ BitVec 32))
(declare-const carry24 (_ BitVec 32))
(declare-const lsc__bignum__single_add_mult_mult__a1 (_ BitVec 32))
(declare-const result11 (Array Int word32))
(declare-const a2 (Array Int word32))
(declare-const a3 (Array Int word32))
(declare-const carry15 (_ BitVec 32))
(declare-const carry25 (_ BitVec 32))
(declare-const result12 (Array Int word32))
(declare-const a4 (Array Int word32))
(declare-const result13 (_ BitVec 32))
(declare-const a_msw3 (_ BitVec 32))
(declare-const result14 Int)
(declare-const i3 Int)
(declare-const a5 (Array Int word32))
(declare-const carry16 (_ BitVec 32))
(declare-const carry26 t__ref)
(declare-const a_msw4 t__ref)
(declare-const bi4 t__ref)
(declare-const u4 t__ref)
(declare-const i4 int__ref)
(declare-const a6 (Array Int word32))
(declare-const carry17 (_ BitVec 32))
(declare-const carry27 (_ BitVec 32))
(declare-const a_msw5 (_ BitVec 32))
(declare-const bi5 (_ BitVec 32))
(declare-const u5 (_ BitVec 32))
(declare-const i5 Int)
(declare-const a7 map__ref)
(declare-const carry18 t__ref)
(declare-const carry28 t__ref)
(declare-const a_msw6 t__ref)
(declare-const bi6 t__ref)
(declare-const u6 t__ref)
(declare-const i6 int__ref)
(declare-const a8 (Array Int word32))
(declare-const carry19 (_ BitVec 32))
(declare-const carry29 (_ BitVec 32))
(declare-const a_msw7 (_ BitVec 32))
(declare-const bi7 (_ BitVec 32))
(declare-const u7 (_ BitVec 32))
(declare-const i7 Int)
(declare-const a9 map__ref)
(declare-const carry110 t__ref)
(declare-const carry210 t__ref)
(declare-const a_msw8 t__ref)
(declare-const bi8 t__ref)
(declare-const u8 t__ref)
(declare-const i8 int__ref)
(declare-const a10 (Array Int word32))
(declare-const carry111 (_ BitVec 32))
(declare-const carry211 (_ BitVec 32))
(declare-const a_msw9 (_ BitVec 32))
(declare-const bi9 (_ BitVec 32))
(declare-const u9 (_ BitVec 32))
(declare-const i9 Int)
(declare-const result15 Bool)
(declare-const a11 (Array Int word32))
(declare-const carry4 Bool)
(declare-const a12 map__ref)
(declare-const carry5 bool__ref)
(declare-const a13 (Array Int word32))
(declare-const carry6 Bool)
(declare-const a14 map__ref)
(declare-const carry7 bool__ref)
(declare-const carry112 t__ref)
(declare-const carry212 t__ref)
(declare-const a_msw10 t__ref)
(declare-const bi10 t__ref)
(declare-const u10 t__ref)
(declare-const i10 int__ref)
(declare-const a15 (Array Int word32))
(declare-const carry8 Bool)
(declare-const carry113 (_ BitVec 32))
(declare-const carry213 (_ BitVec 32))
(declare-const a_msw11 (_ BitVec 32))
(declare-const bi11 (_ BitVec 32))
(declare-const u11 (_ BitVec 32))
(declare-const i11 Int)
(assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))
(assert (in_range2 a_first))
(assert (in_range2 a_last))
(assert (dynamic_invariant2 b true false true))
(assert (in_range2 b_first))
(assert (dynamic_invariant2 c true false true))
(assert (in_range2 c_first))
(assert (dynamic_invariant2 m true false true))
(assert (in_range2 m_first))
(assert true)
(assert (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))) (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))) (and (< a_first a_last) (and (and (<= (to_rep (first (rt b))) b_first) (<= b_first (to_rep (last (rt b))))) (and (and (<= (to_rep (first (rt b))) (+ b_first (- a_last a_first))) (<= (+ b_first (- a_last a_first)) (to_rep (last (rt b))))) (and (and (<= (to_rep (first (rt c))) c_first) (<= c_first (to_rep (last (rt c))))) (and (and (<= (to_rep (first (rt c))) (+ c_first (- a_last a_first))) (<= (+ c_first (- a_last a_first)) (to_rep (last (rt c))))) (and (and (<= (to_rep (first (rt m))) m_first) (<= m_first (to_rep (last (rt m))))) (and (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first))) (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m))))) (and (= (olt (num_of_big_int c c_first (+ (- a_last a_first) 1)) (num_of_big_int m m_first (+ (- a_last a_first) 1))) true) (and (= (olt (from_word32 ((_ int2bv 32) 1)) (num_of_big_int m m_first (+ (- a_last a_first) 1))) true) (= (bvadd ((_ int2bv 32) 1) (bvmul m_inv (to_rep1 (select (elts m) m_first)))) ((_ int2bv 32) 0))))))))))))))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (forall ((k Int)) (=> (and (<= a_first k) (<= k a_last)) (= (to_rep1 (select a k)) ((_ int2bv 32) 0)))))
(assert (= (mk_t__ref result5) (mk_t__ref a_msw)))
(assert (= a_msw1 ((_ int2bv 32) 0)))
(assert (= (mk_int__ref result6) (mk_int__ref i)))
(assert (= i1 a_first))
(assert (<= a_first i1))
(assert (<= i1 a_last))
(assert (and (= (oeq (omod (oadd (num_of_big_int (mk___t a1 (mk (to_rep a__first) (to_rep a__last))) a_first (+ (- a_last a_first) 1)) (omultiply (oexpon (base Tuple0) (+ (- a_last a_first) 1)) (from_word32 a_msw2))) (num_of_big_int m m_first (+ (- a_last a_first) 1))) (omod (omultiply (omultiply (num_of_big_int b b_first (- i2 a_first)) (num_of_big_int c c_first (+ (- a_last a_first) 1))) (oexpon (inverse (num_of_big_int m m_first (+ (- a_last a_first) 1)) (base Tuple0)) (- i2 a_first))) (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true) (= (olt (oadd (num_of_big_int (mk___t a1 (mk (to_rep a__first) (to_rep a__last))) a_first (+ (- a_last a_first) 1)) (omultiply (oexpon (base Tuple0) (+ (- a_last a_first) 1)) (from_word32 a_msw2))) (osubtract (omultiply (from_word32 ((_ int2bv 32) 2)) (num_of_big_int m m_first (+ (- a_last a_first) 1))) (from_word32 ((_ int2bv 32) 1)))) true)))
(assert (and (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2)) (and (<= a_first i2) (<= i2 a_last))))
(assert (= carry12 result7))
(assert (= carry13 ((_ int2bv 32) 0)))
(assert (= carry22 result8))
(assert (= carry23 ((_ int2bv 32) 0)))
(assert (and (= o107 (- i2 a_first)) (in_range1 (- i2 a_first))))
(assert (= o108 (+ b_first o107)))
(assert (and (= temp___603 o108) (in_range1 o108)))
(assert (and (<= (to_rep (first (rt b))) temp___603) (<= temp___603 (to_rep (last (rt b))))))
(assert (= o109 temp___603))
(assert (= o110 (select (elts b) o109)))
(assert (= o111 (to_rep1 o110)))
(assert (= bi2 result9))
(assert (= bi3 o111))
(assert (and (<= (to_rep (first (rt c))) c_first) (<= c_first (to_rep (last (rt c))))))
(assert (= o114 c_first))
(assert (= o115 (select (elts c) o114)))
(assert (= o116 (to_rep1 o115)))
(assert (= o117 (bvmul bi3 o116)))
(assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))
(assert (= o112 a_first))
(assert (= o113 (select a1 o112)))
(assert (= o118 (to_rep1 o113)))
(assert (= o119 (bvadd o118 o117)))
(assert (= o120 (bvmul o119 m_inv)))
(assert (= u2 result10))
(assert (= u3 o120))
(assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))
(assert (= o121 a_first))
(assert (= o122 (select a1 o121)))
(assert (= o123 (to_rep1 o122)))
(assert (= o123 lsc__bignum__single_add_mult_mult__a))
(assert (and (<= (to_rep (first (rt m))) m_first) (<= m_first (to_rep (last (rt m))))))
(assert (= o127 m_first))
(assert (= o128 (select (elts m) o127)))
(assert (= o129 (to_rep1 o128)))
(assert (and (<= (to_rep (first (rt c))) c_first) (<= c_first (to_rep (last (rt c))))))
(assert (= o124 c_first))
(assert (= o125 (select (elts c) o124)))
(assert (= o126 (to_rep1 o125)))
(assert (= (oeq (oadd (oadd (oadd (oadd (from_word32 lsc__bignum__single_add_mult_mult__a) (omultiply (from_word32 bi3) (from_word32 o126))) (omultiply (from_word32 o129) (from_word32 u3))) (from_word32 carry13)) (omultiply (base Tuple0) (from_word32 carry23))) (oadd (from_word32 lsc__bignum__single_add_mult_mult__a1) (omultiply (base Tuple0) (oadd (from_word32 carry14) (omultiply (base Tuple0) (from_word32 carry24)))))) true))
(assert (= (to_rep1 o130) lsc__bignum__single_add_mult_mult__a1))
(assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))
(assert (= o131 a_first))
(assert (= o132 (store a1 o131 o130)))
(assert (= a1 result11))
(assert (= a2 o132))
(assert (and (= o135 (+ m_first 1)) (in_range1 (+ m_first 1))))
(assert (and (= o134 (+ c_first 1)) (in_range1 (+ c_first 1))))
(assert (and (= o133 (- a_last 1)) (in_range2 (- a_last 1))))
(assert (= (oeq (oadd (oadd (oadd (oadd (num_of_big_int (mk___t a2 (mk (to_rep a__first) (to_rep a__last))) (+ a_first 1) (+ (- o133 a_first) 1)) (omultiply (num_of_big_int c o134 (+ (- o133 a_first) 1)) (from_word32 bi3))) (omultiply (num_of_big_int m o135 (+ (- o133 a_first) 1)) (from_word32 u3))) (from_word32 carry14)) (omultiply (base Tuple0) (from_word32 carry24))) (oadd (num_of_big_int (mk___t a3 (mk (to_rep a__first) (to_rep a__last))) a_first (+ (- o133 a_first) 1)) (omultiply (oexpon (base Tuple0) (+ (- o133 a_first) 1)) (oadd (from_word32 carry15) (omultiply (base Tuple0) (from_word32 carry25)))))) true))
(assert (= (to_rep1 o136) (bvadd a_msw2 carry15)))
(assert (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))))
(assert (= o137 a_last))
(assert (= o138 (store a3 o137 o136)))
(assert (= a3 result12))
(assert (= a4 o138))
(assert (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))))
(assert (= o139 a_last))
(assert (= o140 (select a4 o139)))
(assert (= o141 (to_rep1 o140)))
(assert (= o142 (ite (bvult o141 carry15) true false)))
(assert (and (= o143 (word_of_boolean o142)) (= (oeq (from_word32 o143) (num_of_boolean o142)) true)))
(assert (= o144 (bvadd carry25 o143)))
(assert (= a_msw2 result13))
(assert (= a_msw3 o144))
(assert (= o213 (from_word32 ((_ int2bv 32) 1))))
(assert (and (= o207 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o208 (+ o207 1)))
(assert (and (= o209 o208) (in_range1 o208)))
(assert (and (= o210 o209) (in_range2 o209)))
(assert (= o211 (num_of_big_int m m_first o210)))
(assert (= o206 (from_word32 ((_ int2bv 32) 2))))
(assert (= o212 (omultiply o206 o211)))
(assert (= o214 (osubtract o212 o213)))
(assert (= o203 (from_word32 a_msw3)))
(assert (and (= o198 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o199 (+ o198 1)))
(assert (and (= o200 o199) (in_range1 o199)))
(assert (and (= o201 o200) (in_range2 o200)))
(assert (and (= o197 (base Tuple0)) (= o197 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))
(assert (= o202 (oexpon o197 o201)))
(assert (= o204 (omultiply o202 o203)))
(assert (and (= o192 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o193 (+ o192 1)))
(assert (and (= o194 o193) (in_range1 o193)))
(assert (and (= o195 o194) (in_range2 o194)))
(assert (= o196 (num_of_big_int (mk___t a4 (mk (to_rep a__first) (to_rep a__last))) a_first o195)))
(assert (= o205 (oadd o196 o204)))
(assert (= o215 (olt o205 o214)))
(assert (and (= o186 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o187 (+ o186 1)))
(assert (and (= o188 o187) (in_range1 o187)))
(assert (and (= o189 o188) (in_range2 o188)))
(assert (= o190 (num_of_big_int m m_first o189)))
(assert (and (= o180 (+ i2 1)) (in_range1 (+ i2 1))))
(assert (= o181 (- o180 a_first)))
(assert (and (= o182 o181) (in_range1 o181)))
(assert (and (= o183 o182) (in_range2 o182)))
(assert (and (= o178 (base Tuple0)) (= o178 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))
(assert (and (= o173 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o174 (+ o173 1)))
(assert (and (= o175 o174) (in_range1 o174)))
(assert (and (= o176 o175) (in_range2 o175)))
(assert (= o177 (num_of_big_int m m_first o176)))
(assert (= o179 (inverse o177 o178)))
(assert (= o184 (oexpon o179 o183)))
(assert (and (= o167 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o168 (+ o167 1)))
(assert (and (= o169 o168) (in_range1 o168)))
(assert (and (= o170 o169) (in_range2 o169)))
(assert (= o171 (num_of_big_int c c_first o170)))
(assert (and (= o162 (+ i2 1)) (in_range1 (+ i2 1))))
(assert (= o163 (- o162 a_first)))
(assert (and (= o164 o163) (in_range1 o163)))
(assert (and (= o165 o164) (in_range2 o164)))
(assert (= o166 (num_of_big_int b b_first o165)))
(assert (= o172 (omultiply o166 o171)))
(assert (= o185 (omultiply o172 o184)))
(assert (= o191 (omod o185 o190)))
(assert (and (= o157 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o158 (+ o157 1)))
(assert (and (= o159 o158) (in_range1 o158)))
(assert (and (= o160 o159) (in_range2 o159)))
(assert (= o161 (num_of_big_int m m_first o160)))
(assert (= o155 (from_word32 a_msw3)))
(assert (and (= o150 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o151 (+ o150 1)))
(assert (and (= o152 o151) (in_range1 o151)))
(assert (not (in_range2 o152)))
(check-sat)
(exit)
