(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort packet_length_range 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 8192)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (packet_length_range packet_length_range) Bool)
(declare-const dummy packet_length_range)
(declare-datatypes () ((packet_length_range__ref (mk_packet_length_range__ref (packet_length_range__content packet_length_range)))))
(define-fun packet_length_range__ref___projection ((a packet_length_range__ref)) packet_length_range (packet_length_range__content a))
(define-fun dynamic_invariant ((temp___expr_789 Int) (temp___is_init_785 Bool) (temp___skip_constant_786 Bool) (temp___do_toplevel_787 Bool) (temp___do_typ_inv_788 Bool)) Bool (=> (or (= temp___is_init_785 true) (<= 0 8192)) (in_range1 temp___expr_789)))
(declare-sort unsigned_short 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (unsigned_short unsigned_short) Bool)
(declare-const dummy1 unsigned_short)
(declare-datatypes () ((unsigned_short__ref (mk_unsigned_short__ref (unsigned_short__content unsigned_short)))))
(define-fun unsigned_short__ref___projection ((a unsigned_short__ref)) unsigned_short (unsigned_short__content a))
(declare-fun to_rep (unsigned_short) Int)
(declare-fun of_rep (Int) unsigned_short)
(assert (forall ((x unsigned_short)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x unsigned_short)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort response_code 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (response_code response_code) Bool)
(declare-const dummy2 response_code)
(declare-datatypes () ((response_code__ref (mk_response_code__ref (response_code__content response_code)))))
(define-fun response_code__ref___projection ((a response_code__ref)) response_code (response_code__content a))
(declare-fun to_rep1 (response_code) Int)
(declare-fun of_rep1 (Int) response_code)
(assert (forall ((x response_code)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x response_code)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort opcode_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (opcode_type opcode_type) Bool)
(declare-const dummy3 opcode_type)
(declare-datatypes () ((opcode_type__ref (mk_opcode_type__ref (opcode_type__content opcode_type)))))
(define-fun opcode_type__ref___projection ((a opcode_type__ref)) opcode_type (opcode_type__content a))
(declare-fun to_rep2 (opcode_type) Int)
(declare-fun of_rep2 (Int) opcode_type)
(assert (forall ((x opcode_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x opcode_type)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dns_types__header_type__messageid unsigned_short) (rec__dns_types__header_type__qr Bool) (rec__dns_types__header_type__opcode opcode_type) (rec__dns_types__header_type__aa Bool) (rec__dns_types__header_type__tc Bool) (rec__dns_types__header_type__rd Bool) (rec__dns_types__header_type__ra Bool) (rec__dns_types__header_type__res1 Bool) (rec__dns_types__header_type__res2 Bool) (rec__dns_types__header_type__res3 Bool) (rec__dns_types__header_type__rcode response_code) (rec__dns_types__header_type__qdcount unsigned_short) (rec__dns_types__header_type__ancount unsigned_short) (rec__dns_types__header_type__nscount unsigned_short) (rec__dns_types__header_type__arcount unsigned_short)))))
(define-fun us_split_fields_MessageID__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__messageid a))
(define-fun us_split_fields_QR__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__qr a))
(define-fun us_split_fields_Opcode__projection ((a us_split_fields)) opcode_type (rec__dns_types__header_type__opcode a))
(define-fun us_split_fields_AA__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__aa a))
(define-fun us_split_fields_TC__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__tc a))
(define-fun us_split_fields_RD__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__rd a))
(define-fun us_split_fields_RA__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__ra a))
(define-fun us_split_fields_Res1__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__res1 a))
(define-fun us_split_fields_Res2__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__res2 a))
(define-fun us_split_fields_Res3__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__res3 a))
(define-fun us_split_fields_RCode__projection ((a us_split_fields)) response_code (rec__dns_types__header_type__rcode a))
(define-fun us_split_fields_QDCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__qdcount a))
(define-fun us_split_fields_ANCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__ancount a))
(define-fun us_split_fields_NSCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__nscount a))
(define-fun us_split_fields_ARCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__arcount a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (rec__dns_types__header_type__messageid (us_split_fields1 a))) (to_rep (rec__dns_types__header_type__messageid (us_split_fields1 b)))) (= (rec__dns_types__header_type__qr (us_split_fields1 a)) (rec__dns_types__header_type__qr (us_split_fields1 b)))) (= (to_rep2 (rec__dns_types__header_type__opcode (us_split_fields1 a))) (to_rep2 (rec__dns_types__header_type__opcode (us_split_fields1 b))))) (= (rec__dns_types__header_type__aa (us_split_fields1 a)) (rec__dns_types__header_type__aa (us_split_fields1 b)))) (= (rec__dns_types__header_type__tc (us_split_fields1 a)) (rec__dns_types__header_type__tc (us_split_fields1 b)))) (= (rec__dns_types__header_type__rd (us_split_fields1 a)) (rec__dns_types__header_type__rd (us_split_fields1 b)))) (= (rec__dns_types__header_type__ra (us_split_fields1 a)) (rec__dns_types__header_type__ra (us_split_fields1 b)))) (= (rec__dns_types__header_type__res1 (us_split_fields1 a)) (rec__dns_types__header_type__res1 (us_split_fields1 b)))) (= (rec__dns_types__header_type__res2 (us_split_fields1 a)) (rec__dns_types__header_type__res2 (us_split_fields1 b)))) (= (rec__dns_types__header_type__res3 (us_split_fields1 a)) (rec__dns_types__header_type__res3 (us_split_fields1 b)))) (= (to_rep1 (rec__dns_types__header_type__rcode (us_split_fields1 a))) (to_rep1 (rec__dns_types__header_type__rcode (us_split_fields1 b))))) (= (to_rep (rec__dns_types__header_type__qdcount (us_split_fields1 a))) (to_rep (rec__dns_types__header_type__qdcount (us_split_fields1 b))))) (= (to_rep (rec__dns_types__header_type__ancount (us_split_fields1 a))) (to_rep (rec__dns_types__header_type__ancount (us_split_fields1 b))))) (= (to_rep (rec__dns_types__header_type__nscount (us_split_fields1 a))) (to_rep (rec__dns_types__header_type__nscount (us_split_fields1 b))))) (= (to_rep (rec__dns_types__header_type__arcount (us_split_fields1 a))) (to_rep (rec__dns_types__header_type__arcount (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dns_types__header_type__messageid__first__bit Int)
(declare-const dns_types__header_type__messageid__last__bit Int)
(declare-const dns_types__header_type__messageid__position Int)
(assert (<= 0 dns_types__header_type__messageid__first__bit))
(assert (< dns_types__header_type__messageid__first__bit dns_types__header_type__messageid__last__bit))
(assert (<= 0 dns_types__header_type__messageid__position))
(declare-const dns_types__header_type__qr__first__bit Int)
(declare-const dns_types__header_type__qr__last__bit Int)
(declare-const dns_types__header_type__qr__position Int)
(assert (<= 0 dns_types__header_type__qr__first__bit))
(assert (< dns_types__header_type__qr__first__bit dns_types__header_type__qr__last__bit))
(assert (<= 0 dns_types__header_type__qr__position))
(declare-const dns_types__header_type__opcode__first__bit Int)
(declare-const dns_types__header_type__opcode__last__bit Int)
(declare-const dns_types__header_type__opcode__position Int)
(assert (<= 0 dns_types__header_type__opcode__first__bit))
(assert (< dns_types__header_type__opcode__first__bit dns_types__header_type__opcode__last__bit))
(assert (<= 0 dns_types__header_type__opcode__position))
(declare-const dns_types__header_type__aa__first__bit Int)
(declare-const dns_types__header_type__aa__last__bit Int)
(declare-const dns_types__header_type__aa__position Int)
(assert (<= 0 dns_types__header_type__aa__first__bit))
(assert (< dns_types__header_type__aa__first__bit dns_types__header_type__aa__last__bit))
(assert (<= 0 dns_types__header_type__aa__position))
(declare-const dns_types__header_type__tc__first__bit Int)
(declare-const dns_types__header_type__tc__last__bit Int)
(declare-const dns_types__header_type__tc__position Int)
(assert (<= 0 dns_types__header_type__tc__first__bit))
(assert (< dns_types__header_type__tc__first__bit dns_types__header_type__tc__last__bit))
(assert (<= 0 dns_types__header_type__tc__position))
(declare-const dns_types__header_type__rd__first__bit Int)
(declare-const dns_types__header_type__rd__last__bit Int)
(declare-const dns_types__header_type__rd__position Int)
(assert (<= 0 dns_types__header_type__rd__first__bit))
(assert (< dns_types__header_type__rd__first__bit dns_types__header_type__rd__last__bit))
(assert (<= 0 dns_types__header_type__rd__position))
(declare-const dns_types__header_type__ra__first__bit Int)
(declare-const dns_types__header_type__ra__last__bit Int)
(declare-const dns_types__header_type__ra__position Int)
(assert (<= 0 dns_types__header_type__ra__first__bit))
(assert (< dns_types__header_type__ra__first__bit dns_types__header_type__ra__last__bit))
(assert (<= 0 dns_types__header_type__ra__position))
(declare-const dns_types__header_type__res1__first__bit Int)
(declare-const dns_types__header_type__res1__last__bit Int)
(declare-const dns_types__header_type__res1__position Int)
(assert (<= 0 dns_types__header_type__res1__first__bit))
(assert (< dns_types__header_type__res1__first__bit dns_types__header_type__res1__last__bit))
(assert (<= 0 dns_types__header_type__res1__position))
(declare-const dns_types__header_type__res2__first__bit Int)
(declare-const dns_types__header_type__res2__last__bit Int)
(declare-const dns_types__header_type__res2__position Int)
(assert (<= 0 dns_types__header_type__res2__first__bit))
(assert (< dns_types__header_type__res2__first__bit dns_types__header_type__res2__last__bit))
(assert (<= 0 dns_types__header_type__res2__position))
(declare-const dns_types__header_type__res3__first__bit Int)
(declare-const dns_types__header_type__res3__last__bit Int)
(declare-const dns_types__header_type__res3__position Int)
(assert (<= 0 dns_types__header_type__res3__first__bit))
(assert (< dns_types__header_type__res3__first__bit dns_types__header_type__res3__last__bit))
(assert (<= 0 dns_types__header_type__res3__position))
(declare-const dns_types__header_type__rcode__first__bit Int)
(declare-const dns_types__header_type__rcode__last__bit Int)
(declare-const dns_types__header_type__rcode__position Int)
(assert (<= 0 dns_types__header_type__rcode__first__bit))
(assert (< dns_types__header_type__rcode__first__bit dns_types__header_type__rcode__last__bit))
(assert (<= 0 dns_types__header_type__rcode__position))
(declare-const dns_types__header_type__qdcount__first__bit Int)
(declare-const dns_types__header_type__qdcount__last__bit Int)
(declare-const dns_types__header_type__qdcount__position Int)
(assert (<= 0 dns_types__header_type__qdcount__first__bit))
(assert (< dns_types__header_type__qdcount__first__bit dns_types__header_type__qdcount__last__bit))
(assert (<= 0 dns_types__header_type__qdcount__position))
(declare-const dns_types__header_type__ancount__first__bit Int)
(declare-const dns_types__header_type__ancount__last__bit Int)
(declare-const dns_types__header_type__ancount__position Int)
(assert (<= 0 dns_types__header_type__ancount__first__bit))
(assert (< dns_types__header_type__ancount__first__bit dns_types__header_type__ancount__last__bit))
(assert (<= 0 dns_types__header_type__ancount__position))
(declare-const dns_types__header_type__nscount__first__bit Int)
(declare-const dns_types__header_type__nscount__last__bit Int)
(declare-const dns_types__header_type__nscount__position Int)
(assert (<= 0 dns_types__header_type__nscount__first__bit))
(assert (< dns_types__header_type__nscount__first__bit dns_types__header_type__nscount__last__bit))
(assert (<= 0 dns_types__header_type__nscount__position))
(declare-const dns_types__header_type__arcount__first__bit Int)
(declare-const dns_types__header_type__arcount__last__bit Int)
(declare-const dns_types__header_type__arcount__position Int)
(assert (<= 0 dns_types__header_type__arcount__first__bit))
(assert (< dns_types__header_type__arcount__first__bit dns_types__header_type__arcount__last__bit))
(assert (<= 0 dns_types__header_type__arcount__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((header_type__ref (mk_header_type__ref (header_type__content us_rep)))))
(define-fun header_type__ref___projection ((a header_type__ref)) us_rep (header_type__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (byte byte) Bool)
(declare-const dummy5 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep3 (byte) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int2 ((x byte)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep3 (select a temp___idx_173)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep3 (select a temp___idx_173)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-const dummy6 (Array Int byte))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int byte)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq6 ((Array Int byte) (Array Int byte)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dns_types__dns_packet__header us_rep) (rec__dns_types__dns_packet__bytes (Array Int byte))))))
(define-fun us_split_fields_Header__projection ((a us_split_fields2)) us_rep (rec__dns_types__dns_packet__header a))
(define-fun us_split_fields_Bytes__projection ((a us_split_fields2)) (Array Int byte) (rec__dns_types__dns_packet__bytes a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq (rec__dns_types__dns_packet__header (us_split_fields3 a)) (rec__dns_types__dns_packet__header (us_split_fields3 b))) true) (= (bool_eq1 (rec__dns_types__dns_packet__bytes (us_split_fields3 a)) 1 8180 (rec__dns_types__dns_packet__bytes (us_split_fields3 b)) 1 8180) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const dns_types__dns_packet__header__first__bit Int)
(declare-const dns_types__dns_packet__header__last__bit Int)
(declare-const dns_types__dns_packet__header__position Int)
(assert (<= 0 dns_types__dns_packet__header__first__bit))
(assert (< dns_types__dns_packet__header__first__bit dns_types__dns_packet__header__last__bit))
(assert (<= 0 dns_types__dns_packet__header__position))
(declare-const dns_types__dns_packet__bytes__first__bit Int)
(declare-const dns_types__dns_packet__bytes__last__bit Int)
(declare-const dns_types__dns_packet__bytes__position Int)
(assert (<= 0 dns_types__dns_packet__bytes__first__bit))
(assert (< dns_types__dns_packet__bytes__first__bit dns_types__dns_packet__bytes__last__bit))
(assert (<= 0 dns_types__dns_packet__bytes__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((dns_packet__ref (mk_dns_packet__ref (dns_packet__content us_rep1)))))
(define-fun dns_packet__ref___projection ((a dns_packet__ref)) us_rep1 (dns_packet__content a))
(declare-const input_bytes Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_803 (_ BitVec 8)) (temp___is_init_799 Bool) (temp___skip_constant_800 Bool) (temp___do_toplevel_801 Bool) (temp___do_typ_inv_802 Bool)) Bool true)
(define-fun dynamic_invariant2 ((temp___expr_810 Int) (temp___is_init_806 Bool) (temp___skip_constant_807 Bool) (temp___do_toplevel_808 Bool) (temp___do_typ_inv_809 Bool)) Bool (=> (or (= temp___is_init_806 true) (<= 0 65535)) (in_range2 temp___expr_810)))
(define-fun dynamic_invariant3 ((temp___expr_817 Int) (temp___is_init_813 Bool) (temp___skip_constant_814 Bool) (temp___do_toplevel_815 Bool) (temp___do_typ_inv_816 Bool)) Bool (=> (or (= temp___is_init_813 true) (<= 0 2)) (in_range4 temp___expr_817)))
(define-fun dynamic_invariant4 ((temp___expr_824 Int) (temp___is_init_820 Bool) (temp___skip_constant_821 Bool) (temp___do_toplevel_822 Bool) (temp___do_typ_inv_823 Bool)) Bool (=> (or (= temp___is_init_820 true) (<= 0 5)) (in_range3 temp___expr_824)))
(declare-const output_packet__split_fields unsigned_short)
(declare-const output_packet__split_fields1 Bool)
(declare-const output_packet__split_fields2 opcode_type)
(declare-const output_packet__split_fields3 Bool)
(declare-const output_packet__split_fields4 Bool)
(declare-const output_packet__split_fields5 Bool)
(declare-const output_packet__split_fields6 Bool)
(declare-const output_packet__split_fields7 Bool)
(declare-const output_packet__split_fields8 Bool)
(declare-const output_packet__split_fields9 Bool)
(declare-const output_packet__split_fields10 response_code)
(declare-const output_packet__split_fields11 unsigned_short)
(declare-const output_packet__split_fields12 unsigned_short)
(declare-const output_packet__split_fields13 unsigned_short)
(declare-const output_packet__split_fields14 unsigned_short)
(declare-const output_packet__split_fields15 (Array Int byte))
(declare-const output_bytes Int)
(declare-const o response_code)
(declare-const o1 unsigned_short)
(declare-const o2 Bool)
(declare-const o3 opcode_type)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const o6 Bool)
(declare-const o7 Bool)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const o11 response_code)
(declare-const o12 unsigned_short)
(declare-const o13 unsigned_short)
(declare-const o14 unsigned_short)
(declare-const o15 unsigned_short)
(declare-const o16 unsigned_short)
(declare-const o17 Bool)
(declare-const o18 opcode_type)
(declare-const o19 Bool)
(declare-const o20 Bool)
(declare-const o21 Bool)
(declare-const o22 Bool)
(declare-const o23 Bool)
(declare-const o24 Bool)
(declare-const o25 Bool)
(declare-const o26 response_code)
(declare-const o27 unsigned_short)
(declare-const o28 unsigned_short)
(declare-const o29 unsigned_short)
(declare-const o30 unsigned_short)
(declare-const o31 unsigned_short)
(declare-const o32 Bool)
(declare-const o33 opcode_type)
(declare-const o34 Bool)
(declare-const o35 Bool)
(declare-const o36 Bool)
(declare-const o37 Bool)
(declare-const o38 Bool)
(declare-const o39 Bool)
(declare-const o40 Bool)
(declare-const o41 response_code)
(declare-const o42 unsigned_short)
(declare-const o43 unsigned_short)
(declare-const o44 unsigned_short)
(declare-const o45 unsigned_short)
(declare-const o46 (Array Int byte))
(declare-const temp___7148 unsigned_short)
(declare-const temp___71481 Bool)
(declare-const temp___71482 opcode_type)
(declare-const temp___71483 Bool)
(declare-const temp___71484 Bool)
(declare-const temp___71485 Bool)
(declare-const temp___71486 Bool)
(declare-const temp___71487 Bool)
(declare-const temp___71488 Bool)
(declare-const temp___71489 Bool)
(declare-const temp___714810 response_code)
(declare-const temp___714811 unsigned_short)
(declare-const temp___714812 unsigned_short)
(declare-const temp___714813 unsigned_short)
(declare-const temp___714814 unsigned_short)
(declare-const temp___714815 (Array Int byte))
(declare-const o47 unsigned_short)
(declare-const o48 unsigned_short)
(declare-const o49 Bool)
(declare-const o50 opcode_type)
(declare-const o51 Bool)
(declare-const o52 Bool)
(declare-const o53 Bool)
(declare-const o54 Bool)
(declare-const o55 Bool)
(declare-const o56 Bool)
(declare-const o57 Bool)
(declare-const o58 response_code)
(declare-const o59 unsigned_short)
(declare-const o60 unsigned_short)
(declare-const o61 unsigned_short)
(declare-const o62 unsigned_short)
(declare-const o63 unsigned_short)
(declare-const o64 Bool)
(declare-const o65 opcode_type)
(declare-const o66 Bool)
(declare-const o67 Bool)
(declare-const o68 Bool)
(declare-const o69 Bool)
(declare-const o70 Bool)
(declare-const o71 Bool)
(declare-const o72 Bool)
(declare-const o73 response_code)
(declare-const o74 unsigned_short)
(declare-const o75 unsigned_short)
(declare-const o76 unsigned_short)
(declare-const o77 unsigned_short)
(declare-const o78 unsigned_short)
(declare-const o79 Bool)
(declare-const o80 opcode_type)
(declare-const o81 Bool)
(declare-const o82 Bool)
(declare-const o83 Bool)
(declare-const o84 Bool)
(declare-const o85 Bool)
(declare-const o86 Bool)
(declare-const o87 Bool)
(declare-const o88 response_code)
(declare-const o89 unsigned_short)
(declare-const o90 unsigned_short)
(declare-const o91 unsigned_short)
(declare-const o92 unsigned_short)
(declare-const o93 (Array Int byte))
(declare-const temp___7151 us_rep1)
(declare-const result us_split_fields__ref1)
(declare-const output_packet__split_fields16 us_split_fields2)
(declare-const result1 us_split_fields__ref1)
(declare-const output_packet__split_fields17 us_split_fields2)
(declare-const result2 us_split_fields__ref1)
(declare-const output_packet__split_fields18 us_split_fields2)
(declare-const result3 int__ref)
(declare-const output_bytes1 Int)
(declare-const output_packet__split_fields19 us_split_fields__ref1)
(declare-const output_bytes2 int__ref)
(declare-const output_packet__split_fields20 us_split_fields2)
(declare-const output_bytes3 Int)
(assert (in_range1 input_bytes))
(assert (=> (<= 0 8192) (in_range1 output_bytes)))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 (mk___rep (mk___split_fields output_packet__split_fields output_packet__split_fields1 output_packet__split_fields2 output_packet__split_fields3 output_packet__split_fields4 output_packet__split_fields5 output_packet__split_fields6 output_packet__split_fields7 output_packet__split_fields8 output_packet__split_fields9 output_packet__split_fields10 output_packet__split_fields11 output_packet__split_fields12 output_packet__split_fields13 output_packet__split_fields14)) output_packet__split_fields15))))
(assert (= output_packet__split_fields16 (mk___split_fields1 (mk___rep (mk___split_fields output_packet__split_fields output_packet__split_fields1 output_packet__split_fields2 (distinct 1 0) output_packet__split_fields4 output_packet__split_fields5 output_packet__split_fields6 output_packet__split_fields7 output_packet__split_fields8 output_packet__split_fields9 output_packet__split_fields10 output_packet__split_fields11 output_packet__split_fields12 output_packet__split_fields13 output_packet__split_fields14)) output_packet__split_fields15)))
(assert (= (to_rep1 o) 4))
(assert (= (rec__dns_types__header_type__messageid (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o1))
(assert (= (rec__dns_types__header_type__qr (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o2))
(assert (= (rec__dns_types__header_type__opcode (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o3))
(assert (= (rec__dns_types__header_type__aa (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o4))
(assert (= (rec__dns_types__header_type__tc (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o5))
(assert (= (rec__dns_types__header_type__rd (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o6))
(assert (= (rec__dns_types__header_type__ra (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o7))
(assert (= (rec__dns_types__header_type__res1 (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o8))
(assert (= (rec__dns_types__header_type__res2 (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o9))
(assert (= (rec__dns_types__header_type__res3 (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o10))
(assert (= o o11))
(assert (= (rec__dns_types__header_type__qdcount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o12))
(assert (= (rec__dns_types__header_type__ancount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o13))
(assert (= (rec__dns_types__header_type__nscount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o14))
(assert (= (rec__dns_types__header_type__arcount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields16))) o15))
(assert (= o16 o1))
(assert (= o17 o2))
(assert (= o18 o3))
(assert (= o19 o4))
(assert (= o20 o5))
(assert (= o21 o6))
(assert (= o22 o7))
(assert (= o23 o8))
(assert (= o24 o9))
(assert (= o25 o10))
(assert (= o26 o11))
(assert (= o27 o12))
(assert (= o28 o13))
(assert (= o29 o14))
(assert (= o30 o15))
(assert (= o31 o16))
(assert (= o32 o17))
(assert (= o33 o18))
(assert (= o34 o19))
(assert (= o35 o20))
(assert (= o36 o21))
(assert (= o37 o22))
(assert (= o38 o23))
(assert (= o39 o24))
(assert (= o40 o25))
(assert (= o41 o26))
(assert (= o42 o27))
(assert (= o43 o28))
(assert (= o44 o29))
(assert (= o45 o30))
(assert (= (rec__dns_types__dns_packet__bytes output_packet__split_fields16) o46))
(assert (= temp___7148 o31))
(assert (= temp___71481 o32))
(assert (= temp___71482 o33))
(assert (= temp___71483 o34))
(assert (= temp___71484 o35))
(assert (= temp___71485 o36))
(assert (= temp___71486 o37))
(assert (= temp___71487 o38))
(assert (= temp___71488 o39))
(assert (= temp___71489 o40))
(assert (= temp___714810 o41))
(assert (= temp___714811 o42))
(assert (= temp___714812 o43))
(assert (= temp___714813 o44))
(assert (= temp___714814 o45))
(assert (= temp___714815 o46))
(assert (= result1 (mk___split_fields__ref1 output_packet__split_fields16)))
(assert (= output_packet__split_fields17 (mk___split_fields1 (mk___rep (mk___split_fields temp___7148 temp___71481 temp___71482 temp___71483 temp___71484 temp___71485 temp___71486 temp___71487 temp___71488 temp___71489 temp___714810 temp___714811 temp___714812 temp___714813 temp___714814)) temp___714815)))
(assert (= (to_rep o47) 0))
(assert (= (rec__dns_types__header_type__messageid (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o48))
(assert (= (rec__dns_types__header_type__qr (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o49))
(assert (= (rec__dns_types__header_type__opcode (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o50))
(assert (= (rec__dns_types__header_type__aa (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o51))
(assert (= (rec__dns_types__header_type__tc (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o52))
(assert (= (rec__dns_types__header_type__rd (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o53))
(assert (= (rec__dns_types__header_type__ra (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o54))
(assert (= (rec__dns_types__header_type__res1 (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o55))
(assert (= (rec__dns_types__header_type__res2 (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o56))
(assert (= (rec__dns_types__header_type__res3 (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o57))
(assert (= (rec__dns_types__header_type__rcode (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o58))
(assert (= (rec__dns_types__header_type__qdcount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o59))
(assert (= o47 o60))
(assert (= (rec__dns_types__header_type__nscount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o61))
(assert (= (rec__dns_types__header_type__arcount (us_split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields17))) o62))
(assert (= o63 o48))
(assert (= o64 o49))
(assert (= o65 o50))
(assert (= o66 o51))
(assert (= o67 o52))
(assert (= o68 o53))
(assert (= o69 o54))
(assert (= o70 o55))
(assert (= o71 o56))
(assert (= o72 o57))
(assert (= o73 o58))
(assert (= o74 o59))
(assert (= o75 o60))
(assert (= o76 o61))
(assert (= o77 o62))
(assert (= o78 o63))
(assert (= o79 o64))
(assert (= o80 o65))
(assert (= o81 o66))
(assert (= o82 o67))
(assert (= o83 o68))
(assert (= o84 o69))
(assert (= o85 o70))
(assert (= o86 o71))
(assert (= o87 o72))
(assert (= o88 o73))
(assert (= o89 o74))
(assert (= o90 o75))
(assert (= o91 o76))
(assert (= o92 o77))
(assert (= (rec__dns_types__dns_packet__bytes output_packet__split_fields17) o93))
(assert (= temp___7151 (mk___rep1 (mk___split_fields1 (mk___rep (mk___split_fields o78 o79 o80 o81 o82 o83 o84 o85 o86 o87 o88 o89 o90 o91 o92)) o93))))
(assert (= result2 (mk___split_fields__ref1 output_packet__split_fields17)))
(assert (= output_packet__split_fields18 (us_split_fields3 temp___7151)))
(assert (= result3 (mk_int__ref output_bytes)))
(assert (= output_bytes1 input_bytes))
(assert (= output_bytes2 (mk_int__ref output_bytes1)))
(assert (= output_packet__split_fields19 (mk___split_fields__ref1 output_packet__split_fields18)))
(assert (= output_bytes3 output_bytes1))
(assert (= output_packet__split_fields20 output_packet__split_fields18))
(assert (not (= (int__content output_bytes2) input_bytes)))
(check-sat)
(exit)
