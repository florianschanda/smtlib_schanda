(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort long_long_integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (long_long_integer long_long_integer) Bool)
(declare-const dummy1 long_long_integer)
(declare-datatypes () ((long_long_integer__ref (mk_long_long_integer__ref (long_long_integer__content long_long_integer)))))
(define-fun long_long_integer__ref___projection ((a long_long_integer__ref)) long_long_integer (long_long_integer__content a))
(declare-sort natural 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range3 temp___expr_33)))
(declare-sort unsigned_32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))
(declare-fun user_eq3 (unsigned_32 unsigned_32) Bool)
(declare-const dummy3 unsigned_32)
(declare-datatypes () ((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32 (unsigned_32__content a))
(declare-fun to_rep (unsigned_32) (_ BitVec 32))
(declare-fun of_rep ((_ BitVec 32)) unsigned_32)
(assert (forall ((x unsigned_32)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x unsigned_32)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned_32)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort state_range 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 623)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (state_range state_range) Bool)
(declare-const dummy4 state_range)
(declare-datatypes () ((state_range__ref (mk_state_range__ref (state_range__content state_range)))))
(define-fun state_range__ref___projection ((a state_range__ref)) state_range (state_range__content a))
(define-fun dynamic_invariant1 ((temp___expr_207 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 623)) (in_range4 temp___expr_207)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int unsigned_32))))))
(declare-fun slide ((Array Int unsigned_32) Int Int) (Array Int unsigned_32))
(assert (forall ((a (Array Int unsigned_32))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int unsigned_32))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int unsigned_32) Int Int (Array Int unsigned_32) Int Int) (Array Int unsigned_32))
(assert (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (unsigned_32 Int) (Array Int unsigned_32))
(assert (forall ((v unsigned_32)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int unsigned_32)) (a__first Int) (a__last Int) (b (Array Int unsigned_32)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int unsigned_32) Int Int (Array Int unsigned_32) Int Int) Int)
(assert (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (state_range) Int)
(declare-fun of_rep1 (Int) state_range)
(assert (forall ((x state_range)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x state_range)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const dummy5 (Array Int unsigned_32))
(declare-const value__size Int)
(declare-fun object__size ((Array Int unsigned_32)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int unsigned_32)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int unsigned_32)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__alignment a))))
(declare-fun user_eq5 ((Array Int unsigned_32) (Array Int unsigned_32)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__random__generator__state (Array Int unsigned_32)) (rec__random__generator__index state_range)))))
(define-fun us_split_fields_State__projection ((a us_split_fields)) (Array Int unsigned_32) (rec__random__generator__state a))
(define-fun us_split_fields_Index__projection ((a us_split_fields)) state_range (rec__random__generator__index a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__random__generator__state (us_split_fields1 a)) 0 623 (rec__random__generator__state (us_split_fields1 b)) 0 623) true) (= (to_rep1 (rec__random__generator__index (us_split_fields1 a))) (to_rep1 (rec__random__generator__index (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const random__generator__state__first__bit Int)
(declare-const random__generator__state__last__bit Int)
(declare-const random__generator__state__position Int)
(assert (<= 0 random__generator__state__first__bit))
(assert (< random__generator__state__first__bit random__generator__state__last__bit))
(assert (<= 0 random__generator__state__position))
(declare-const random__generator__index__first__bit Int)
(declare-const random__generator__index__last__bit Int)
(declare-const random__generator__index__position Int)
(assert (<= 0 random__generator__index__first__bit))
(assert (< random__generator__index__first__bit random__generator__index__last__bit))
(assert (<= 0 random__generator__index__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((generator__ref (mk_generator__ref (generator__content us_rep)))))
(define-fun generator__ref___projection ((a generator__ref)) us_rep (generator__content a))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int unsigned_32)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int unsigned_32) (elts a))
(define-fun of_array ((a (Array Int unsigned_32)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int unsigned_32)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int unsigned_32)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int unsigned_32)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq7 (us_t us_t) Bool)
(declare-const dummy7 us_t)
(declare-datatypes () ((initialization_vector__ref (mk_initialization_vector__ref (initialization_vector__content us_t)))))
(define-fun initialization_vector__ref___projection ((a initialization_vector__ref)) us_t (initialization_vector__content a))
(define-fun dynamic_invariant2 ((temp___expr_233 us_t) (temp___is_init_230 Bool) (temp___skip_constant_231 Bool) (temp___do_toplevel_232 Bool)) Bool (=> (not (= temp___skip_constant_231 true)) (dynamic_property 0 2147483647 (first1 temp___expr_233) (last1 temp___expr_233))))
(define-fun dynamic_invariant3 ((temp___expr_183 (_ BitVec 32)) (temp___is_init_180 Bool) (temp___skip_constant_181 Bool) (temp___do_toplevel_182 Bool)) Bool true)
(declare-fun reset1 ((_ BitVec 32)) us_rep)
(declare-fun reset__function_guard (us_rep (_ BitVec 32)) Bool)
(assert true)
(declare-const initiator us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun to_state (Int) (_ BitVec 32))
(declare-fun to_state__function_guard ((_ BitVec 32) Int) Bool)
(assert (forall ((s Int)) (! (=> (dynamic_invariant1 s true true true) (dynamic_invariant3 (to_state s) true false true)) :pattern ((to_state s)))))
(assert (forall ((s Int)) (! (=> (dynamic_invariant1 s true true true) (= (to_state s) ((_ int2bv 32) s))) :pattern ((to_state s)))))
(declare-fun to_state__2 (Int) (_ BitVec 32))
(declare-fun to_state__2__function_guard ((_ BitVec 32) Int) Bool)
(assert (forall ((s Int)) (! (=> (dynamic_invariant s true true true) (dynamic_invariant3 (to_state__2 s) true false true)) :pattern ((to_state__2 s)))))
(assert (forall ((s Int)) (! (=> (dynamic_invariant s true true true) (= (to_state__2 s) ((_ int2bv 32) s))) :pattern ((to_state__2 s)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun to_rep3 (long_long_integer) Int)
(declare-fun of_rep3 (Int) long_long_integer)
(assert (forall ((x long_long_integer)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x long_long_integer)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (long_long_integer long_long_integer) Bool)
(declare-const dummy8 long_long_integer)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content long_long_integer)))))
(define-fun t4b__ref___projection ((a t4b__ref)) long_long_integer (t4b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort t5b 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 623)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (t5b t5b) Bool)
(declare-const dummy9 t5b)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content t5b)))))
(define-fun t5b__ref___projection ((a t5b__ref)) t5b (t5b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant4 ((temp___expr_27 Int) (temp___is_init_24 Bool) (temp___skip_constant_25 Bool) (temp___do_toplevel_26 Bool)) Bool (=> (or (= temp___is_init_24 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range2 temp___expr_27)))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const i Int)
(declare-const j Int)
(declare-const g__split_fields (Array Int unsigned_32))
(declare-const g__split_fields1 state_range)
(declare-const random__reset__2__R3b__g__assume (Array Int unsigned_32))
(declare-const random__reset__2__R3b__g__assume1 state_range)
(declare-const result int__ref)
(declare-const i1 Int)
(declare-const result1 int__ref)
(declare-const j1 Int)
(declare-const result2 us_split_fields__ref)
(declare-const g__split_fields2 us_split_fields)
(assert (dynamic_invariant2 initiator true false true))
(assert (and (= (to_rep2 (first (rt initiator))) 0) (<= 1 (length initiator))))
(assert (= result (mk_int__ref i)))
(assert (= i1 1))
(assert (in_range4 i1))
(assert (= result1 (mk_int__ref j)))
(assert (= j1 0))
(assert (in_range3 j1))
(assert (= (mk___rep (mk___split_fields random__reset__2__R3b__g__assume random__reset__2__R3b__g__assume1)) (reset1 ((_ int2bv 32) 19650218))))
(assert (= result2 (mk___split_fields__ref (mk___split_fields g__split_fields g__split_fields1))))
(assert (= g__split_fields2 (mk___split_fields random__reset__2__R3b__g__assume random__reset__2__R3b__g__assume1)))
(assert (<= 1 (ite (< 624 (length initiator)) (length initiator) 624)))
(assert (not (<= (- 9223372036854775808) 1)))
(check-sat)
(exit)
