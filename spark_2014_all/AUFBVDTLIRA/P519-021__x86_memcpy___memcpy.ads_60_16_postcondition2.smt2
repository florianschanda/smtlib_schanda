(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_236 (_ BitVec 64)) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool true)
(assert (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64)) (range_size (_ BitVec 64))) (! (=> (and (and (dynamic_invariant var true true true true) (dynamic_invariant bottom true true true true)) (dynamic_invariant range_size true true true true)) (= (= (inrange64 var bottom range_size) true) (ite (bvule bottom (bvadd (bvsub #xFFFFFFFFFFFFFFFF range_size) #x0000000000000001)) (and (bvule bottom var) (bvule var (bvadd bottom (bvsub range_size #x0000000000000001)))) (or (and (bvule bottom var) (bvule var #xFFFFFFFFFFFFFFFF)) (bvule var (bvsub (bvsub range_size (bvsub #xFFFFFFFFFFFFFFFF bottom)) #x0000000000000002)))))) :pattern ((inrange64 var bottom range_size)))))
(declare-fun insaferegion64 ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun insaferegion64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((var (_ BitVec 64)) (rsp (_ BitVec 64))) (! (=> (and (dynamic_invariant var true true true true) (dynamic_invariant rsp true true true true)) (= (= (insaferegion64 var rsp) true) (or (and (bvule var #xCFFFFFFFFFFFFFFF) (bvuge var (bvadd rsp #x0000000000000008))) (and (bvule var #x3FFFFFFFFFFFFFFF) (bvuge var #x0000000000000000))))) :pattern ((insaferegion64 var rsp)))))
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (unsigned8 unsigned8) Bool)
(declare-const dummy1 unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun readmem64 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem64 addr x86__memory))) (and (and (and (and (and (and (and (and (= (bvand result #x00000000000000FF) ((_ zero_extend 56) (to_rep (select x86__memory addr)))) (= (bvand result #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0000000000000100))) (= (bvand result #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x0000000000010000))) (= (bvand result #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x0000000001000000))) (= (bvand result #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000004)))) #x0000000100000000))) (= (bvand result #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000005)))) #x0000010000000000))) (= (bvand result #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000006)))) #x0001000000000000))) (= (bvand result #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000007)))) #x0100000000000000))) (dynamic_invariant result true false true true)))) :pattern ((readmem64 addr x86__memory))))))
(declare-fun readmem64ghost ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64ghost__function_guard ((_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((mem (Array (_ BitVec 64) unsigned8)) (x86__memory (Array (_ BitVec 64) unsigned8))) (forall ((addr (_ BitVec 64))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem64ghost mem addr x86__memory))) (and (= result (bvor (bvor (bvor (bvor (bvor (bvor (bvor ((_ zero_extend 56) (to_rep (select mem addr))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000001)))) ((_ int2bv 64) 8))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000002)))) ((_ int2bv 64) 16))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000003)))) ((_ int2bv 64) 24))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000004)))) ((_ int2bv 64) 32))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000005)))) ((_ int2bv 64) 40))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000006)))) ((_ int2bv 64) 48))) (bvshl ((_ zero_extend 56) (to_rep (select mem (bvadd addr #x0000000000000007)))) ((_ int2bv 64) 56)))) (dynamic_invariant result true false true true)))) :pattern ((readmem64ghost mem addr x86__memory))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-sort unsigned641 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))
(declare-fun user_eq2 (unsigned641 unsigned641) Bool)
(declare-const dummy2 unsigned641)
(declare-datatypes () ((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641 (unsigned64__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_314 (_ BitVec 64)) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(define-fun dynamic_invariant2 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(declare-const zeroflag Bool)
(declare-const carryflag Bool)
(declare-const signflag Bool)
(declare-const overflowflag Bool)
(declare-const rax (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rbp (_ BitVec 64))
(declare-const memory (Array (_ BitVec 64) unsigned8))
(declare-const saved_rbp_16 (_ BitVec 64))
(declare-const saved_rbp_72 (_ BitVec 64))
(declare-const tmp_register (_ BitVec 64))
(declare-const saved_rbp (_ BitVec 64))
(declare-const saved_ra (_ BitVec 64))
(declare-const saved_mem (Array (_ BitVec 64) unsigned8))
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 64))
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const o4 (_ BitVec 64))
(declare-const o5 (_ BitVec 64))
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 (_ BitVec 64))
(declare-const temp___472 (Array (_ BitVec 64) unsigned8))
(declare-const temp___481 (Array (_ BitVec 64) unsigned8))
(declare-const temp___480 Bool)
(declare-const temp___479 Bool)
(declare-const temp___478 (_ BitVec 64))
(declare-const temp___477 Bool)
(declare-const temp___482 (Array (_ BitVec 64) unsigned8))
(declare-const temp___476 (_ BitVec 64))
(declare-const temp___475 (_ BitVec 64))
(declare-const temp___473 (_ BitVec 64))
(declare-const temp___474 Bool)
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const o13 (_ BitVec 64))
(declare-const o14 (_ BitVec 64))
(declare-const rcx1 (_ BitVec 64))
(declare-const rdx1 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result (_ BitVec 64))
(declare-const saved_rbp_161 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const saved_rbp_721 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const tmp_register1 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const saved_rbp1 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const saved_ra1 (_ BitVec 64))
(declare-const result5 map__ref)
(declare-const saved_mem1 (Array (_ BitVec 64) unsigned8))
(declare-const result6 t__ref1)
(declare-const rax1 (_ BitVec 64))
(declare-const result7 t__ref1)
(declare-const rax2 (_ BitVec 64))
(declare-const result8 bool__ref)
(declare-const zeroflag1 Bool)
(declare-const result9 bool__ref)
(declare-const signflag1 Bool)
(declare-const result10 bool__ref)
(declare-const carryflag1 Bool)
(declare-const result11 bool__ref)
(declare-const overflowflag1 Bool)
(declare-const zeroflag2 Bool)
(declare-const carryflag2 Bool)
(declare-const signflag2 Bool)
(declare-const overflowflag2 Bool)
(declare-const rax3 (_ BitVec 64))
(declare-const rcx2 (_ BitVec 64))
(declare-const rdx2 (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const tmp_register2 (_ BitVec 64))
(declare-const result12 t__ref1)
(declare-const rax4 (_ BitVec 64))
(declare-const result13 t__ref1)
(declare-const rdx3 (_ BitVec 64))
(declare-const result14 t__ref1)
(declare-const rax5 (_ BitVec 64))
(declare-const result15 bool__ref)
(declare-const zeroflag3 Bool)
(declare-const result16 bool__ref)
(declare-const signflag3 Bool)
(declare-const result17 t__ref1)
(declare-const rdx4 (_ BitVec 64))
(declare-const result18 t__ref1)
(declare-const rax6 (_ BitVec 64))
(declare-const result19 t__ref1)
(declare-const rcx3 (_ BitVec 64))
(declare-const result20 t__ref1)
(declare-const rax7 (_ BitVec 64))
(declare-const result21 bool__ref)
(declare-const zeroflag4 Bool)
(declare-const result22 bool__ref)
(declare-const signflag4 Bool)
(declare-const result23 t__ref1)
(declare-const rax8 (_ BitVec 64))
(declare-const result24 t__ref1)
(declare-const rax9 (_ BitVec 64))
(declare-const memory3 (Array (_ BitVec 64) unsigned8))
(declare-const result25 t__ref1)
(declare-const tmp_register3 (_ BitVec 64))
(declare-const result26 t__ref1)
(declare-const rax10 (_ BitVec 64))
(declare-const result27 t__ref1)
(declare-const rax11 (_ BitVec 64))
(declare-const result28 bool__ref)
(declare-const zeroflag5 Bool)
(declare-const result29 bool__ref)
(declare-const signflag5 Bool)
(declare-const result30 bool__ref)
(declare-const carryflag3 Bool)
(declare-const result31 bool__ref)
(declare-const overflowflag3 Bool)
(declare-const zeroflag6 bool__ref)
(declare-const carryflag4 bool__ref)
(declare-const signflag6 bool__ref)
(declare-const overflowflag4 bool__ref)
(declare-const rax12 t__ref1)
(declare-const zeroflag7 Bool)
(declare-const carryflag5 Bool)
(declare-const signflag7 Bool)
(declare-const overflowflag5 Bool)
(declare-const rax13 (_ BitVec 64))
(declare-const zeroflag8 bool__ref)
(declare-const carryflag6 bool__ref)
(declare-const signflag8 bool__ref)
(declare-const overflowflag6 bool__ref)
(declare-const rax14 t__ref1)
(declare-const rcx4 t__ref1)
(declare-const rdx5 t__ref1)
(declare-const memory4 map__ref)
(declare-const tmp_register4 t__ref1)
(declare-const zeroflag9 Bool)
(declare-const carryflag7 Bool)
(declare-const signflag9 Bool)
(declare-const overflowflag7 Bool)
(declare-const rax15 (_ BitVec 64))
(declare-const rcx5 (_ BitVec 64))
(declare-const rdx6 (_ BitVec 64))
(declare-const memory5 (Array (_ BitVec 64) unsigned8))
(declare-const tmp_register5 (_ BitVec 64))
(declare-const zeroflag10 bool__ref)
(declare-const carryflag8 bool__ref)
(declare-const signflag10 bool__ref)
(declare-const overflowflag8 bool__ref)
(declare-const rax16 t__ref1)
(declare-const rcx6 t__ref1)
(declare-const rdx7 t__ref1)
(declare-const memory6 map__ref)
(declare-const tmp_register6 t__ref1)
(declare-const zeroflag11 Bool)
(declare-const carryflag9 Bool)
(declare-const signflag11 Bool)
(declare-const overflowflag9 Bool)
(declare-const rax17 (_ BitVec 64))
(declare-const rcx7 (_ BitVec 64))
(declare-const rdx8 (_ BitVec 64))
(declare-const memory7 (Array (_ BitVec 64) unsigned8))
(declare-const tmp_register7 (_ BitVec 64))
(declare-const zeroflag12 bool__ref)
(declare-const carryflag10 bool__ref)
(declare-const signflag12 bool__ref)
(declare-const overflowflag10 bool__ref)
(declare-const rax18 t__ref1)
(declare-const rcx8 t__ref1)
(declare-const rdx9 t__ref1)
(declare-const memory8 map__ref)
(declare-const tmp_register8 t__ref1)
(declare-const zeroflag13 Bool)
(declare-const carryflag11 Bool)
(declare-const signflag13 Bool)
(declare-const overflowflag11 Bool)
(declare-const rax19 (_ BitVec 64))
(declare-const rcx9 (_ BitVec 64))
(declare-const rdx10 (_ BitVec 64))
(declare-const memory9 (Array (_ BitVec 64) unsigned8))
(declare-const tmp_register9 (_ BitVec 64))
(declare-const memory10 (Array (_ BitVec 64) unsigned8))
(declare-const zeroflag14 bool__ref)
(declare-const carryflag12 bool__ref)
(declare-const signflag14 bool__ref)
(declare-const overflowflag12 bool__ref)
(declare-const rax20 t__ref1)
(declare-const rcx10 t__ref1)
(declare-const rdx11 t__ref1)
(declare-const memory11 map__ref)
(declare-const saved_rbp_162 t__ref1)
(declare-const saved_rbp_722 t__ref1)
(declare-const tmp_register10 t__ref1)
(declare-const saved_rbp2 t__ref1)
(declare-const saved_ra2 t__ref1)
(declare-const saved_mem2 map__ref)
(declare-const zeroflag15 Bool)
(declare-const carryflag13 Bool)
(declare-const signflag15 Bool)
(declare-const overflowflag13 Bool)
(declare-const rax21 (_ BitVec 64))
(declare-const rcx11 (_ BitVec 64))
(declare-const rdx12 (_ BitVec 64))
(declare-const memory12 (Array (_ BitVec 64) unsigned8))
(declare-const saved_rbp_163 (_ BitVec 64))
(declare-const saved_rbp_723 (_ BitVec 64))
(declare-const tmp_register11 (_ BitVec 64))
(declare-const saved_rbp3 (_ BitVec 64))
(declare-const saved_ra3 (_ BitVec 64))
(declare-const saved_mem3 (Array (_ BitVec 64) unsigned8))
(assert (and (and (= rbp rsp) (= (readmem64 (bvsub rbp #x0000000000000008) memory) #x0000000000000000)) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (= (inrange64 i (readmem64 (bvsub rbp #x0000000000000010) memory) (readmem64 (bvsub rbp #x0000000000000048) memory)) true) (= (insaferegion64 i (bvadd rsp #x0000000000000008)) true))))))
(assert (and (= o (readmem64 (bvsub rbp #x0000000000000010) memory)) (and (and (and (and (and (and (and (= (bvand o #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory (bvsub rbp #x0000000000000010))))) (= (bvand o #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000001)))) #x0000000000000100))) (= (bvand o #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000002)))) #x0000000000010000))) (= (bvand o #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000003)))) #x0000000001000000))) (= (bvand o #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000004)))) #x0000000100000000))) (= (bvand o #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000005)))) #x0000010000000000))) (= (bvand o #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000006)))) #x0001000000000000))) (= (bvand o #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000010) #x0000000000000007)))) #x0100000000000000)))))
(assert (= o1 o))
(assert (= (mk_t__ref1 result) (mk_t__ref1 saved_rbp_16)))
(assert (= saved_rbp_161 o1))
(assert (and (= o2 (readmem64 (bvsub rbp #x0000000000000048) memory)) (and (and (and (and (and (and (and (= (bvand o2 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory (bvsub rbp #x0000000000000048))))) (= (bvand o2 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000001)))) #x0000000000000100))) (= (bvand o2 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000002)))) #x0000000000010000))) (= (bvand o2 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000003)))) #x0000000001000000))) (= (bvand o2 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000004)))) #x0000000100000000))) (= (bvand o2 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000005)))) #x0000010000000000))) (= (bvand o2 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000006)))) #x0001000000000000))) (= (bvand o2 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000007)))) #x0100000000000000)))))
(assert (= o3 o2))
(assert (= (mk_t__ref1 result1) (mk_t__ref1 saved_rbp_72)))
(assert (= saved_rbp_721 o3))
(assert (and (= o4 (readmem64 (bvsub rbp #x0000000000000008) memory)) (and (and (and (and (and (and (and (= (bvand o4 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory (bvsub rbp #x0000000000000008))))) (= (bvand o4 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand o4 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand o4 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand o4 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand o4 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand o4 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand o4 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000008) #x0000000000000007)))) #x0100000000000000)))))
(assert (= o5 o4))
(assert (= (mk_t__ref1 result2) (mk_t__ref1 tmp_register)))
(assert (= tmp_register1 o5))
(assert (and (= o6 (readmem64 rbp memory)) (and (and (and (and (and (and (and (= (bvand o6 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory rbp)))) (= (bvand o6 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000001)))) #x0000000000000100))) (= (bvand o6 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000002)))) #x0000000000010000))) (= (bvand o6 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000003)))) #x0000000001000000))) (= (bvand o6 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000004)))) #x0000000100000000))) (= (bvand o6 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000005)))) #x0000010000000000))) (= (bvand o6 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000006)))) #x0001000000000000))) (= (bvand o6 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd rbp #x0000000000000007)))) #x0100000000000000)))))
(assert (= o7 o6))
(assert (= (mk_t__ref1 result3) (mk_t__ref1 saved_rbp)))
(assert (= saved_rbp1 o7))
(assert (and (= o8 (readmem64 (bvadd rsp #x0000000000000008) memory)) (and (and (and (and (and (and (and (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory (bvadd rsp #x0000000000000008))))) (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvadd rsp #x0000000000000008) #x0000000000000007)))) #x0100000000000000)))))
(assert (= o9 o8))
(assert (= (mk_t__ref1 result4) (mk_t__ref1 saved_ra)))
(assert (= saved_ra1 o9))
(assert (= result5 (mk_map__ref saved_mem)))
(assert (= saved_mem1 memory))
(assert (= rsp #xA800000000000007))
(assert (= temp___472 memory))
(assert (= temp___481 memory))
(assert (= temp___480 overflowflag))
(assert (= temp___479 signflag))
(assert (= temp___478 rax))
(assert (= temp___477 carryflag))
(assert (= temp___482 memory))
(assert (= temp___476 rcx))
(assert (= temp___475 tmp_register1))
(assert (= temp___473 rdx))
(assert (= temp___474 zeroflag))
(assert (and (= o10 (readmem64 (bvsub rbp #x0000000000000048) memory)) (and (and (and (and (and (and (and (= (bvand o10 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory (bvsub rbp #x0000000000000048))))) (= (bvand o10 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000001)))) #x0000000000000100))) (= (bvand o10 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000002)))) #x0000000000010000))) (= (bvand o10 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000003)))) #x0000000001000000))) (= (bvand o10 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000004)))) #x0000000100000000))) (= (bvand o10 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000005)))) #x0000010000000000))) (= (bvand o10 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000006)))) #x0001000000000000))) (= (bvand o10 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory (bvadd (bvsub rbp #x0000000000000048) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result6 (mk_t__ref1 rax)))
(assert (= rax1 o10))
(assert (= result7 (mk_t__ref1 rax1)))
(assert (= rax2 (bvudiv rax1 #x0000000000000008)))
(assert (= result8 (mk_bool__ref zeroflag)))
(assert (= zeroflag1 (ite (= (bvsub rax2 tmp_register1) #x0000000000000000) true false)))
(assert (= result9 (mk_bool__ref signflag)))
(assert (= signflag1 (ite (bvugt (bvsub rax2 tmp_register1) #x7FFFFFFFFFFFFFFF) true false)))
(assert (= result10 (mk_bool__ref carryflag)))
(assert (= carryflag1 (ite (bvult rax2 tmp_register1) true false)))
(assert (= result11 (mk_bool__ref overflowflag)))
(assert (= overflowflag1 (ite (and (and (= signflag1 true) (bvugt tmp_register1 #x7FFFFFFFFFFFFFFF)) (bvule rax2 #x7FFFFFFFFFFFFFFF)) true (ite (and (and (not (= signflag1 true)) (bvugt rax2 #x7FFFFFFFFFFFFFFF)) (bvule tmp_register1 #x7FFFFFFFFFFFFFFF)) true false))))
(assert (or (and (and (and (= tmp_register4 (mk_t__ref1 tmp_register1)) (and (= memory4 (mk_map__ref memory)) (and (= rdx5 (mk_t__ref1 rdx)) (and (= rcx4 (mk_t__ref1 rcx)) (and (= rax14 (mk_t__ref1 rax2)) (and (= overflowflag6 (mk_bool__ref overflowflag1)) (and (= signflag8 (mk_bool__ref signflag1)) (and (= carryflag6 (mk_bool__ref carryflag1)) (= zeroflag8 (mk_bool__ref zeroflag1)))))))))) (and (= tmp_register5 tmp_register1) (and (= memory5 memory1) (and (= rdx6 rdx1) (and (= rcx5 rcx1) (and (= rax15 rax2) (and (= overflowflag7 overflowflag1) (and (= signflag9 signflag1) (and (= carryflag7 carryflag1) (= zeroflag9 zeroflag1)))))))))) (= (ite (= carryflag1 false) zeroflag1 true) true)) (and (not (= (ite (= carryflag1 false) zeroflag1 true) true)) (and (and (and (= tmp_register4 (mk_t__ref1 tmp_register3)) (and (= memory4 (mk_map__ref memory3)) (and (= rdx5 (mk_t__ref1 rdx4)) (and (= rcx4 (mk_t__ref1 rcx3)) (and (= rax14 rax12) (and (= overflowflag6 overflowflag4) (and (= signflag8 signflag6) (and (= carryflag6 carryflag4) (= zeroflag8 zeroflag6))))))))) (and (= tmp_register5 tmp_register3) (and (= memory5 memory3) (and (= rdx6 rdx4) (and (= rcx5 rcx3) (and (= rax15 rax13) (and (= overflowflag7 overflowflag5) (and (= signflag9 signflag7) (and (= carryflag7 carryflag5) (= zeroflag9 zeroflag7)))))))))) (and (and (forall ((i (_ BitVec 64))) (=> (and (bvule saved_rbp_161 i) (bvule i (bvsub (bvadd saved_rbp_161 saved_rbp_721) #x0000000000000001))) (= (insaferegion64 i (bvadd rsp #x0000000000000008)) true))) (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (not (= (inrange64 i saved_rbp_161 saved_rbp_721) true)) (not (= (inrange64 i (bvsub rbp #x0000000000000008) #x0000000000000008) true))) (= (to_rep (select memory2 i)) (to_rep (select temp___482 i)))))) (and (= saved_rbp_161 (readmem64 (bvsub rbp #x0000000000000010) memory2)) (and (= saved_rbp_721 (readmem64 (bvsub rbp #x0000000000000048) memory2)) (and (bvult tmp_register2 (bvudiv saved_rbp_721 #x0000000000000008)) (and (= (readmem64 rbp memory2) saved_rbp1) (= (readmem64 (bvadd rsp #x0000000000000008) memory2) saved_ra1))))))) (and (and (= result12 (mk_t__ref1 rax3)) (= rax4 tmp_register2)) (and (and (= result13 (mk_t__ref1 rdx2)) (= rdx3 (bvmul rax4 #x0000000000000008))) (and (and (and (= o11 (readmem64 (bvsub rbp #x0000000000000010) memory2)) (and (and (and (and (and (and (and (= (bvand o11 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 (bvsub rbp #x0000000000000010))))) (= (bvand o11 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000001)))) #x0000000000000100))) (= (bvand o11 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000002)))) #x0000000000010000))) (= (bvand o11 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000003)))) #x0000000001000000))) (= (bvand o11 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000004)))) #x0000000100000000))) (= (bvand o11 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000005)))) #x0000010000000000))) (= (bvand o11 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000006)))) #x0001000000000000))) (= (bvand o11 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000010) #x0000000000000007)))) #x0100000000000000)))) (and (= result14 (mk_t__ref1 rax4)) (= rax5 o11))) (and (and (= result15 (mk_bool__ref zeroflag2)) (= zeroflag3 (ite (= (bvadd rdx3 rax5) #x0000000000000000) true false))) (and (and (= result16 (mk_bool__ref signflag2)) (= signflag3 (ite (bvugt (bvadd rdx3 rax5) #x7FFFFFFFFFFFFFFF) true false))) (and (and (= result17 (mk_t__ref1 rdx3)) (= rdx4 (bvadd rdx3 rax5))) (and (and (= result18 (mk_t__ref1 rax5)) (= rax6 tmp_register2)) (and (and (= result19 (mk_t__ref1 rcx2)) (= rcx3 (bvmul rax6 #x0000000000000008))) (and (and (and (= o12 (readmem64 (bvsub rbp #x0000000000000018) memory2)) (and (and (and (and (and (and (and (= (bvand o12 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 (bvsub rbp #x0000000000000018))))) (= (bvand o12 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000001)))) #x0000000000000100))) (= (bvand o12 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000002)))) #x0000000000010000))) (= (bvand o12 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000003)))) #x0000000001000000))) (= (bvand o12 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000004)))) #x0000000100000000))) (= (bvand o12 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000005)))) #x0000010000000000))) (= (bvand o12 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000006)))) #x0001000000000000))) (= (bvand o12 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd (bvsub rbp #x0000000000000018) #x0000000000000007)))) #x0100000000000000)))) (and (= result20 (mk_t__ref1 rax6)) (= rax7 o12))) (and (and (= result21 (mk_bool__ref zeroflag3)) (= zeroflag4 (ite (= (bvadd rax7 rcx3) #x0000000000000000) true false))) (and (and (= result22 (mk_bool__ref signflag3)) (= signflag4 (ite (bvugt (bvadd rax7 rcx3) #x7FFFFFFFFFFFFFFF) true false))) (and (and (= result23 (mk_t__ref1 rax7)) (= rax8 (bvadd rax7 rcx3))) (and (and (and (= o13 (readmem64 rax8 memory2)) (and (and (and (and (and (and (and (= (bvand o13 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 rax8)))) (= (bvand o13 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000001)))) #x0000000000000100))) (= (bvand o13 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000002)))) #x0000000000010000))) (= (bvand o13 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000003)))) #x0000000001000000))) (= (bvand o13 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000004)))) #x0000000100000000))) (= (bvand o13 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000005)))) #x0000010000000000))) (= (bvand o13 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000006)))) #x0001000000000000))) (= (bvand o13 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rax8 #x0000000000000007)))) #x0100000000000000)))) (and (= result24 (mk_t__ref1 rax8)) (= rax9 o13))) (and (forall ((i (_ BitVec 64))) (=> (and (bvule saved_rbp_161 i) (bvule i (bvsub (bvadd saved_rbp_161 saved_rbp_721) #x0000000000000001))) (= (insaferegion64 i (bvadd rsp #x0000000000000008)) true))) (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (not (= (inrange64 i saved_rbp_161 saved_rbp_721) true)) (not (= (inrange64 i (bvsub rbp #x0000000000000008) #x0000000000000008) true))) (= (to_rep (select memory2 i)) (to_rep (select temp___472 i)))))) (and (= saved_rbp_161 (readmem64 (bvsub rbp #x0000000000000010) memory2)) (and (= saved_rbp_721 (readmem64 (bvsub rbp #x0000000000000048) memory2)) (and (bvult tmp_register2 (bvudiv saved_rbp_721 #x0000000000000008)) (and (= (inrange64 rdx4 saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000001) saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000002) saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000003) saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000004) saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000005) saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000006) saved_rbp_161 saved_rbp_721) true) (and (= (inrange64 (bvadd rdx4 #x0000000000000007) saved_rbp_161 saved_rbp_721) true) (and (and (and (and (and (and (and (and (and (= (bvand rax9 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory3 rdx4)))) (= (bvand rax9 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000001)))) #x0000000000000100))) (= (bvand rax9 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000002)))) #x0000000000010000))) (= (bvand rax9 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000003)))) #x0000000001000000))) (= (bvand rax9 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000004)))) #x0000000100000000))) (= (bvand rax9 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000005)))) #x0000010000000000))) (= (bvand rax9 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000006)))) #x0001000000000000))) (= (bvand rax9 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd rdx4 #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i rdx4)) (not (= i (bvadd rdx4 #x0000000000000001)))) (not (= i (bvadd rdx4 #x0000000000000002)))) (not (= i (bvadd rdx4 #x0000000000000003)))) (not (= i (bvadd rdx4 #x0000000000000004)))) (not (= i (bvadd rdx4 #x0000000000000005)))) (not (= i (bvadd rdx4 #x0000000000000006)))) (not (= i (bvadd rdx4 #x0000000000000007)))) (= (to_rep (select memory3 i)) (to_rep (select memory2 i))))))) (and (and (= result25 (mk_t__ref1 tmp_register2)) (= tmp_register3 (bvadd tmp_register2 #x0000000000000001))) (and (and (and (= rax12 (mk_t__ref1 rax11)) (and (= overflowflag4 (mk_bool__ref overflowflag3)) (and (= signflag6 (mk_bool__ref signflag5)) (and (= carryflag4 (mk_bool__ref carryflag3)) (= zeroflag6 (mk_bool__ref zeroflag5)))))) (and (= rax13 rax11) (and (= overflowflag5 overflowflag3) (and (= signflag7 signflag5) (and (= carryflag5 carryflag3) (= zeroflag7 zeroflag5)))))) (and (and (and (= o14 (readmem64 (bvsub rbp #x0000000000000048) memory3)) (and (and (and (and (and (and (and (= (bvand o14 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory3 (bvsub rbp #x0000000000000048))))) (= (bvand o14 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000001)))) #x0000000000000100))) (= (bvand o14 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000002)))) #x0000000000010000))) (= (bvand o14 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000003)))) #x0000000001000000))) (= (bvand o14 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000004)))) #x0000000100000000))) (= (bvand o14 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000005)))) #x0000010000000000))) (= (bvand o14 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000006)))) #x0001000000000000))) (= (bvand o14 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub rbp #x0000000000000048) #x0000000000000007)))) #x0100000000000000)))) (and (= result26 (mk_t__ref1 rax9)) (= rax10 o14))) (and (and (= result27 (mk_t__ref1 rax10)) (= rax11 (bvudiv rax10 #x0000000000000008))) (and (and (= result28 (mk_bool__ref zeroflag4)) (= zeroflag5 (ite (= (bvsub rax11 tmp_register3) #x0000000000000000) true false))) (and (and (= result29 (mk_bool__ref signflag4)) (= signflag5 (ite (bvugt (bvsub rax11 tmp_register3) #x7FFFFFFFFFFFFFFF) true false))) (and (and (= result30 (mk_bool__ref carryflag2)) (= carryflag3 (ite (bvult rax11 tmp_register3) true false))) (and (and (= result31 (mk_bool__ref overflowflag2)) (= overflowflag3 (ite (and (and (= signflag5 true) (bvugt tmp_register3 #x7FFFFFFFFFFFFFFF)) (bvule rax11 #x7FFFFFFFFFFFFFFF)) true (ite (and (and (not (= signflag5 true)) (bvugt rax11 #x7FFFFFFFFFFFFFFF)) (bvule tmp_register3 #x7FFFFFFFFFFFFFFF)) true false)))) (= (ite (= carryflag3 false) zeroflag5 true) true)))))))))))))))))))))))))))))))))))))))))
(assert (= tmp_register6 tmp_register4))
(assert (= memory6 memory4))
(assert (= rdx7 rdx5))
(assert (= rcx6 rcx4))
(assert (= rax16 rax14))
(assert (= overflowflag8 overflowflag6))
(assert (= signflag10 signflag8))
(assert (= carryflag8 carryflag6))
(assert (= zeroflag10 zeroflag8))
(assert (= tmp_register7 tmp_register5))
(assert (= memory7 memory5))
(assert (= rdx8 rdx6))
(assert (= rcx7 rcx5))
(assert (= rax17 rax15))
(assert (= overflowflag9 overflowflag7))
(assert (= signflag11 signflag9))
(assert (= carryflag9 carryflag7))
(assert (= zeroflag11 zeroflag9))
(assert (= tmp_register8 tmp_register6))
(assert (= memory8 memory6))
(assert (= rdx9 rdx7))
(assert (= rcx8 rcx6))
(assert (= rax18 rax16))
(assert (= overflowflag10 overflowflag8))
(assert (= signflag12 signflag10))
(assert (= carryflag10 carryflag8))
(assert (= zeroflag12 zeroflag10))
(assert (= tmp_register9 tmp_register7))
(assert (= memory9 memory7))
(assert (= rdx10 rdx8))
(assert (= rcx9 rcx7))
(assert (= rax19 rax17))
(assert (= overflowflag11 overflowflag9))
(assert (= signflag13 signflag11))
(assert (= carryflag11 carryflag9))
(assert (= zeroflag13 zeroflag11))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content1 tmp_register8) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory10 (bvsub rbp #x0000000000000008))))) (= (bvand (t__content1 tmp_register8) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content1 tmp_register8) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content1 tmp_register8) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content1 tmp_register8) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content1 tmp_register8) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content1 tmp_register8) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content1 tmp_register8) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory10 (bvadd (bvsub rbp #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub rbp #x0000000000000008))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub rbp #x0000000000000008) #x0000000000000007)))) (= (to_rep (select memory10 i)) (to_rep (select (map__content memory8) i))))))))
(assert (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (not (= (inrange64 i saved_rbp_161 saved_rbp_721) true)) (not (= (inrange64 i (bvsub rbp #x0000000000000008) #x0000000000000008) true))) (= (to_rep (select memory10 i)) (to_rep (select saved_mem1 i)))))))
(assert (= saved_rbp_161 (readmem64 (bvsub rbp #x0000000000000010) memory10)))
(assert (= saved_rbp_721 (readmem64 (bvsub rbp #x0000000000000048) memory10)))
(assert (bvuge (readmem64 (bvsub rbp #x0000000000000008) memory10) (bvudiv (readmem64 (bvsub rbp #x0000000000000048) memory10) #x0000000000000008)))
(assert (= (readmem64 rbp memory10) saved_rbp1))
(assert (= (readmem64 (bvadd rsp #x0000000000000008) memory10) saved_ra1))
(assert (= saved_mem2 (mk_map__ref saved_mem1)))
(assert (= saved_ra2 (mk_t__ref1 saved_ra1)))
(assert (= saved_rbp2 (mk_t__ref1 saved_rbp1)))
(assert (= tmp_register10 tmp_register8))
(assert (= saved_rbp_722 (mk_t__ref1 saved_rbp_721)))
(assert (= saved_rbp_162 (mk_t__ref1 saved_rbp_161)))
(assert (= memory11 (mk_map__ref memory10)))
(assert (= rdx11 rdx9))
(assert (= rcx10 rcx8))
(assert (= rax20 rax18))
(assert (= overflowflag12 overflowflag10))
(assert (= signflag14 signflag12))
(assert (= carryflag12 carryflag10))
(assert (= zeroflag14 zeroflag12))
(assert (= saved_mem3 saved_mem1))
(assert (= saved_ra3 saved_ra1))
(assert (= saved_rbp3 saved_rbp1))
(assert (= tmp_register11 tmp_register9))
(assert (= saved_rbp_723 saved_rbp_721))
(assert (= saved_rbp_163 saved_rbp_161))
(assert (= memory12 memory10))
(assert (= rdx12 rdx10))
(assert (= rcx11 rcx9))
(assert (= rax21 rax19))
(assert (= overflowflag13 overflowflag11))
(assert (= signflag15 signflag13))
(assert (= carryflag13 carryflag11))
(assert (= zeroflag15 zeroflag13))
(declare-const i (_ BitVec 64))
(assert (bvule #x0000000000000000 i))
(assert (bvule i #xFFFFFFFFFFFFFFFF))
(assert (not (= (inrange64 i (readmem64 (bvsub rbp #x0000000000000010) (map__content memory11)) (readmem64 (bvsub rbp #x0000000000000048) (map__content memory11))) true)))
(assert (not (= (inrange64 i (bvsub rbp #x0000000000000008) #x0000000000000008) true)))
(assert (not (= (to_rep (select (map__content memory11) i)) (to_rep (select memory i)))))
(check-sat)
(exit)
