(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort mod_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (mod_8 mod_8) Bool)
(declare-const dummy1 mod_8)
(declare-datatypes () ((mod_8__ref (mk_mod_8__ref (mod_8__content mod_8)))))
(define-fun mod_8__ref___projection ((a mod_8__ref)) mod_8 (mod_8__content a))
(declare-fun to_rep (mod_8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) mod_8)
(assert (forall ((x mod_8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int2 ((x mod_8)) Int (bv2nat (to_rep x)))
(assert (forall ((x mod_8)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort character 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep1 (character) Int)
(declare-fun of_rep1 (Int) character)
(assert (forall ((x character)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x character)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) character))))))
(declare-fun slide ((Array (_ BitVec 8) character) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) character))
(assert (forall ((a (Array (_ BitVec 8) character))) (forall ((first (_ BitVec 8))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 8) character))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 8) character)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) character)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 8) character)) (b (Array (_ BitVec 8) character))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) mod_8)
(declare-fun last (t) mod_8)
(declare-fun mk ((_ BitVec 8) (_ BitVec 8)) t)
(assert (forall ((f (_ BitVec 8)) (l (_ BitVec 8))) (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 8)) (range_last (_ BitVec 8)) (low (_ BitVec 8)) (high (_ BitVec 8))) Bool true)
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 8) character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 8) character) (elts a))
(define-fun of_array ((a (Array (_ BitVec 8) character)) (f (_ BitVec 8)) (l (_ BitVec 8))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 8) (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 8) (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 8) character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 8) character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 8) character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 8) character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 8) character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 8) character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((mod_string__ref (mk_mod_string__ref (mod_string__content us_t)))))
(define-fun mod_string__ref___projection ((a mod_string__ref)) us_t (mod_string__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y__first mod_8)
(declare-const y__last mod_8)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const z__first mod_8)
(declare-const z__last mod_8)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp___String_Literal_188 (tuple0) (Array (_ BitVec 8) character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x01)) 49) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x02)) 50)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x03)) 51)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x04)) 52)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x05)) 53)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x06)) 54)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x07)) 55)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x08)) 56)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x09)) 57)) (= (to_rep1 (select (temp___String_Literal_188 us_void_param) #x0A)) 48)) :pattern ((temp___String_Literal_188 us_void_param)))))
(declare-fun temp___String_Literal_189 (tuple0) (Array (_ BitVec 8) character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x00)) 49) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x01)) 50)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x02)) 51)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x03)) 52)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x04)) 53)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x05)) 54)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x06)) 55)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x07)) 56)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x08)) 57)) (= (to_rep1 (select (temp___String_Literal_189 us_void_param) #x09)) 48)) :pattern ((temp___String_Literal_189 us_void_param)))))
(declare-fun temp___String_Literal_191 (tuple0) (Array (_ BitVec 8) character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x00)) 49) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x01)) 50)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x02)) 51)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x03)) 52)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x04)) 53)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x05)) 54)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x06)) 55)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x07)) 56)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x08)) 57)) (= (to_rep1 (select (temp___String_Literal_191 us_void_param) #x09)) 97)) :pattern ((temp___String_Literal_191 us_void_param)))))
(declare-fun temp___String_Literal_193 (tuple0) (Array (_ BitVec 8) character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep1 (select (temp___String_Literal_193 us_void_param) #x01)) 49) (= (to_rep1 (select (temp___String_Literal_193 us_void_param) #x02)) 50)) (= (to_rep1 (select (temp___String_Literal_193 us_void_param) #x03)) 51)) (= (to_rep1 (select (temp___String_Literal_193 us_void_param) #x04)) 52)) (= (to_rep1 (select (temp___String_Literal_193 us_void_param) #x05)) 53)) :pattern ((temp___String_Literal_193 us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range1 temp___expr_74)))
(define-fun dynamic_invariant2 ((temp___expr_159 (_ BitVec 8)) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)
(define-fun dynamic_invariant3 ((temp___expr_166 us_t) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (not (= temp___skip_constant_163 true)) (dynamic_property #x00 #xFF (first1 temp___expr_166) (last1 temp___expr_166))))
(declare-const x (Array (_ BitVec 8) character))
(declare-const y (Array (_ BitVec 8) character))
(declare-const z (Array (_ BitVec 8) character))
(declare-const f (Array (_ BitVec 8) character))
(declare-const o Int)
(declare-const result (Array (_ BitVec 8) character))
(declare-const x1 (Array (_ BitVec 8) character))
(declare-const result1 (Array (_ BitVec 8) character))
(declare-const y1 (Array (_ BitVec 8) character))
(declare-const result2 (Array (_ BitVec 8) character))
(declare-const z1 (Array (_ BitVec 8) character))
(declare-const result3 (Array (_ BitVec 8) character))
(declare-const f1 (Array (_ BitVec 8) character))
(assert (= (mk_map__ref result) (mk_map__ref x)))
(assert (= x1 (temp___String_Literal_188 Tuple0)))
(assert (= (mk_map__ref result1) (mk_map__ref y)))
(assert (= y1 (temp___String_Literal_189 Tuple0)))
(assert (= (to_rep y__first) (to_rep (first (mk #x00 #x09)))))
(assert (= (to_rep y__last) (to_rep (last (mk #x00 #x09)))))
(assert (dynamic_property #x00 #xFF (to_rep y__first) (to_rep y__last)))
(assert (= (mk_map__ref result2) (mk_map__ref z)))
(assert (= z1 (temp___String_Literal_191 Tuple0)))
(assert (= (to_rep z__first) (to_rep (first (mk #x00 #x09)))))
(assert (= (to_rep z__last) (to_rep (last (mk #x00 #x09)))))
(assert (dynamic_property #x00 #xFF (to_rep z__first) (to_rep z__last)))
(assert (= (mk_map__ref result3) (mk_map__ref f)))
(assert (= f1 (temp___String_Literal_193 Tuple0)))
(assert (= (to_rep y__first) #x00))
(assert (=> (<= (bv2nat (to_rep z__first)) (bv2nat (to_rep z__last))) (= o (+ (- (bv2nat (to_rep z__last)) (bv2nat (to_rep z__first))) 1))))
(assert (=> (not (<= (bv2nat (to_rep z__first)) (bv2nat (to_rep z__last)))) (= o 0)))
(assert (not (in_range o)))
(check-sat)
(exit)
