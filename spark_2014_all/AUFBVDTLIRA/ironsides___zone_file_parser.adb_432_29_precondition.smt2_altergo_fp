(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 65535)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (16 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  16)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (16 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 16))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 16))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(65536 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  65536)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 16)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 65535)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  65536) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  65536)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 65536)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  65536) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 65536)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 16)]. (eq_sub(x, y, 0, 16) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 4294967295)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (32 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 32))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 32))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(4294967296 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  4294967296)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  4294967296) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  4294967296)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 4294967296)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  4294967296) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 4294967296)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 32)]. (eq_sub1(x, y, 0, 32) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 : (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 255)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (8 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  8)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (8 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 8))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 8))))))

logic is_signed_positive2 : t2 -> prop

logic of_int3 : int -> t2

logic to_int3 : t2 -> int

axiom to_int_def3 :
  (forall x:t2 [to_int3(x)]. ((is_signed_positive2(x) ->
  (to_int3(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int3(x) = (-(256 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int3(v) = to_int3(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  256)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint2(of_int3(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 8)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 255)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int3(v1) <  to_int3(v2))

predicate sle2(v1: t2, v2: t2) = (to_int3(v1) <= to_int3(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int3(v2) <  to_int3(v1))

predicate sge2(v1: t2, v2: t2) = (to_int3(v2) <= to_int3(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) + tqtint2(v2)) <  256) ->
  (tqtint2(add2(v1, v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  256)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 256)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) * tqtint2(v2)) <  256) ->
  (tqtint2(mul2(v1, v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 256)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv2(x,
  of_int3(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 8)]. (eq_sub2(x, y, 0, 8) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq7 : t2, t2 -> bool

axiom bool_eq_def6 :
  (forall x:t2. forall y:t2 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic bool_ne3 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne3(x, y)]. (((not (x = y)) -> (bool_ne3(x,
  y) = true)) and ((x = y) -> (bool_ne3(x, y) = false))))

logic bool_lt3 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt3(x, y)]. ((ult2(x, y) -> (bool_lt3(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt3(x, y) = false))))

logic bool_le3 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le3(x, y)]. ((ule2(x, y) -> (bool_le3(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le3(x, y) = false))))

logic bool_gt3 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt3(x, y)]. ((ugt2(x, y) -> (bool_gt3(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt3(x, y) = false))))

logic bool_ge3 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge3(x, y)]. ((uge2(x, y) -> (bool_ge3(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge3(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

type unsigned8

logic attr__ATTRIBUTE_MODULUS : t2

logic bool_eq8 : t2, t2 -> bool

axiom bool_eq_def7 :
  (forall x:t2. forall y:t2 [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t2

logic user_eq2 : unsigned8, unsigned8 -> bool

logic dummy2 : unsigned8

type unsigned8__ref = { unsigned8__content : unsigned8
}

function unsigned8__ref___projection(a: unsigned8__ref) : unsigned8 =
  (a).unsigned8__content

type unsigned16

logic attr__ATTRIBUTE_MODULUS1 : t

logic bool_eq9 : t, t -> bool

axiom bool_eq_def8 :
  (forall x:t. forall y:t [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq3 : unsigned16, unsigned16 -> bool

logic dummy3 : unsigned16

type unsigned16__ref = { unsigned16__content : unsigned16
}

function unsigned16__ref___projection(a: unsigned16__ref) : unsigned16 =
  (a).unsigned16__content

logic to_rep1 : unsigned16 -> t

logic of_rep1 : t -> unsigned16

axiom inversion_axiom1 :
  (forall x:unsigned16 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int4(x: unsigned16) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:unsigned16 [to_int4(x)]. uint_in_range(to_int4(x)))

type unsigned32

logic attr__ATTRIBUTE_MODULUS2 : t1

logic bool_eq10 : t1, t1 -> bool

axiom bool_eq_def9 :
  (forall x:t1. forall y:t1 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq4 : unsigned32, unsigned32 -> bool

logic dummy4 : unsigned32

type unsigned32__ref = { unsigned32__content : unsigned32
}

function unsigned32__ref___projection(a: unsigned32__ref) : unsigned32 =
  (a).unsigned32__content

logic to_rep2 : unsigned32 -> t1

logic of_rep2 : t1 -> unsigned32

axiom inversion_axiom2 :
  (forall x:unsigned32 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t1 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int5(x: unsigned32) : int = tqtint1(to_rep2(x))

axiom range_int_axiom1 :
  (forall x:unsigned32 [to_int5(x)]. uint_in_range1(to_int5(x)))

type classtype

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : classtype, classtype -> bool

logic dummy5 : classtype

type classtype__ref = { classtype__content : classtype
}

function classtype__ref___projection(a: classtype__ref) : classtype =
  (a).classtype__content

type rritemtype

predicate in_range4(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : rritemtype, rritemtype -> bool

logic dummy6 : rritemtype

type rritemtype__ref = { rritemtype__content : rritemtype
}

function rritemtype__ref___projection(a: rritemtype__ref) : rritemtype =
  (a).rritemtype__content

type linelengthindex

predicate in_range5(x: int) = ((1 <= x) and (x <= 256))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : linelengthindex, linelengthindex -> bool

logic dummy7 : linelengthindex

type linelengthindex__ref = { linelengthindex__content : linelengthindex
}

function linelengthindex__ref___projection(a: linelengthindex__ref) : linelengthindex =
  (a).linelengthindex__content

type domainnamestringtypeindex

predicate in_range6(x: int) = ((1 <= x) and (x <= 128))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq8 : domainnamestringtypeindex, domainnamestringtypeindex -> bool

logic dummy8 : domainnamestringtypeindex

type domainnamestringtypeindex__ref = { domainnamestringtypeindex__content :
domainnamestringtypeindex
}

function domainnamestringtypeindex__ref___projection(a: domainnamestringtypeindex__ref) : domainnamestringtypeindex =
  (a).domainnamestringtypeindex__content

type query_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq9 : query_type, query_type -> bool

logic dummy9 : query_type

type query_type__ref = { query_type__content : query_type
}

function query_type__ref___projection(a: query_type__ref) : query_type =
  (a).query_type__content

type timestringtypeindex

predicate in_range8(x: int) = ((1 <= x) and (x <= 14))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq10 : timestringtypeindex, timestringtypeindex -> bool

logic dummy10 : timestringtypeindex

type timestringtypeindex__ref = { timestringtypeindex__content :
timestringtypeindex
}

function timestringtypeindex__ref___projection(a: timestringtypeindex__ref) : timestringtypeindex =
  (a).timestringtypeindex__content

type siglengthvaluetype

predicate in_range9(x: int) = ((0 <= x) and (x <= 1365))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq11 : siglengthvaluetype, siglengthvaluetype -> bool

logic dummy11 : siglengthvaluetype

type siglengthvaluetype__ref = { siglengthvaluetype__content :
siglengthvaluetype
}

function siglengthvaluetype__ref___projection(a: siglengthvaluetype__ref) : siglengthvaluetype =
  (a).siglengthvaluetype__content

logic to_rep3 : unsigned8 -> t2

logic of_rep3 : t2 -> unsigned8

axiom inversion_axiom3 :
  (forall x:unsigned8 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : true

axiom coerce_axiom3 :
  (forall x:t2 [to_rep3(of_rep3(x))]. (to_rep3(of_rep3(x)) = x))

function to_int6(x: unsigned8) : int = tqtint2(to_rep3(x))

axiom range_int_axiom2 :
  (forall x:unsigned8 [to_int6(x)]. uint_in_range2(to_int6(x)))

logic to_rep4 : classtype -> int

logic of_rep4 : int -> classtype

axiom inversion_axiom4 :
  (forall x:classtype [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:classtype [to_rep4(x)]. in_range3(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range3(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy12 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq12 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__rr_type__resourcerecordtype__ttlinseconds :
unsigned32; rec__rr_type__resourcerecordtype__class : classtype; rec__ext__ :
us_private
}

function us_split_fields_TTLInSeconds__projection(a: us_split_fields) : unsigned32 =
  (a).rec__rr_type__resourcerecordtype__ttlinseconds

function us_split_fields_Class__projection(a: us_split_fields) : classtype =
  (a).rec__rr_type__resourcerecordtype__class

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq18 : us_rep, us_rep -> bool

axiom bool_eq_def17 :
  (forall a:us_rep. forall b:us_rep [bool_eq18(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds) = to_rep2(((b).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds)) and
  (to_rep4(((a).us_split_fields1).rec__rr_type__resourcerecordtype__class) = to_rep4(((b).us_split_fields1).rec__rr_type__resourcerecordtype__class))) ->
  (bool_eq18(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds) = to_rep2(((b).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds)) and
  (to_rep4(((a).us_split_fields1).rec__rr_type__resourcerecordtype__class) = to_rep4(((b).us_split_fields1).rec__rr_type__resourcerecordtype__class)))) ->
  (bool_eq18(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:unsigned32. forall a1:classtype. forall a2:us_private.
  forall a3:int. (0 <= object__size1({ us_split_fields1 = {
  rec__rr_type__resourcerecordtype__ttlinseconds = a;
  rec__rr_type__resourcerecordtype__class = a1; rec__ext__ = a2 };
  attr__tag = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:unsigned32. forall a1:classtype. forall a2:us_private.
  forall a3:int. (0 <= object__alignment1({ us_split_fields1 = {
  rec__rr_type__resourcerecordtype__ttlinseconds = a;
  rec__rr_type__resourcerecordtype__class = a1; rec__ext__ = a2 };
  attr__tag = a3 })))

logic rr_type__resourcerecordtype__ttlinseconds__first__bit : int

logic rr_type__resourcerecordtype__ttlinseconds__last__bit : int

logic rr_type__resourcerecordtype__ttlinseconds__position : int

axiom rr_type__resourcerecordtype__ttlinseconds__first__bit_axiom :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__first__bit)

axiom rr_type__resourcerecordtype__ttlinseconds__last__bit_axiom :
  (rr_type__resourcerecordtype__ttlinseconds__first__bit <  rr_type__resourcerecordtype__ttlinseconds__last__bit)

axiom rr_type__resourcerecordtype__ttlinseconds__position_axiom :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__position)

logic rr_type__resourcerecordtype__class__first__bit : int

logic rr_type__resourcerecordtype__class__last__bit : int

logic rr_type__resourcerecordtype__class__position : int

axiom rr_type__resourcerecordtype__class__first__bit_axiom :
  (0 <= rr_type__resourcerecordtype__class__first__bit)

axiom rr_type__resourcerecordtype__class__last__bit_axiom :
  (rr_type__resourcerecordtype__class__first__bit <  rr_type__resourcerecordtype__class__last__bit)

axiom rr_type__resourcerecordtype__class__position_axiom :
  (0 <= rr_type__resourcerecordtype__class__position)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy13 : unsigned32

logic dummy14 : classtype

logic dummy15 : us_private

logic dummy16 : int

type resourcerecordtype__ref = { resourcerecordtype__content : us_rep
}

function resourcerecordtype__ref___projection(a: resourcerecordtype__ref) : us_rep =
  (a).resourcerecordtype__content

logic to_rep5 : query_type -> int

logic of_rep5 : int -> query_type

axiom inversion_axiom5 :
  (forall x:query_type [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:query_type [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

logic dummy17 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq14 : (int,character) farray, (int,character) farray -> bool

logic to_rep6 : siglengthvaluetype -> int

logic of_rep6 : int -> siglengthvaluetype

axiom inversion_axiom6 :
  (forall x:siglengthvaluetype [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:siglengthvaluetype [to_rep6(x)]. in_range9(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range9(x) ->
  (to_rep6(of_rep6(x)) = x)))

type us_split_fields2 = {
rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered : query_type;
rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm : unsigned8;
rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels : unsigned8;
rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl : unsigned32;
rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration : unsigned32;
rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception : unsigned32;
rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag : unsigned16;
rec__rr_type__rrsig_record_type__rrsigrecordtype__signername :
(int,character) farray;
rec__rr_type__rrsig_record_type__rrsigrecordtype__signature :
(int,character) farray;
rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength :
siglengthvaluetype; rec__rr_type__resourcerecordtype__ttlinseconds1 :
unsigned32; rec__rr_type__resourcerecordtype__class1 : classtype; rec__ext__1
: us_private
}

function us_split_fields_TypeCovered__projection(a: us_split_fields2) : query_type =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered

function us_split_fields_Algorithm__2__projection(a: us_split_fields2) : unsigned8 =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm

function us_split_fields_NumLabels__projection(a: us_split_fields2) : unsigned8 =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels

function us_split_fields_OrigTTL__projection(a: us_split_fields2) : unsigned32 =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl

function us_split_fields_SigExpiration__projection(a: us_split_fields2) : unsigned32 =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration

function us_split_fields_SigInception__projection(a: us_split_fields2) : unsigned32 =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception

function us_split_fields_KeyTag__projection(a: us_split_fields2) : unsigned16 =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag

function us_split_fields_SignerName__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__signername

function us_split_fields_Signature__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__signature

function us_split_fields_SignatureLength__projection(a: us_split_fields2) : siglengthvaluetype =
  (a).rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength

function us_split_fields_TTLInSeconds__4__projection(a: us_split_fields2) : unsigned32 =
  (a).rec__rr_type__resourcerecordtype__ttlinseconds1

function us_split_fields_Class__4__projection(a: us_split_fields2) : classtype =
  (a).rec__rr_type__resourcerecordtype__class1

function us_split_fields___4__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___11__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___12__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : query_type, unsigned8, unsigned8, unsigned32, unsigned32,
  unsigned32, unsigned16, (int,character) farray, (int,character) farray,
  siglengthvaluetype, us_private -> us_private

logic extract__typecovered : us_private -> query_type

axiom extract__typecovered__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private.
  (extract__typecovered(hide_ext__(typecovered, algorithm, numlabels,
  origttl, sigexpiration, siginception, keytag, signername, signature,
  signaturelength, rec__ext__2)) = typecovered))))))))

logic extract__algorithm : us_private -> unsigned8

axiom extract__algorithm__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private. (extract__algorithm(hide_ext__(typecovered,
  algorithm, numlabels, origttl, sigexpiration, siginception, keytag,
  signername, signature, signaturelength, rec__ext__2)) = algorithm))))))))

logic extract__numlabels : us_private -> unsigned8

axiom extract__numlabels__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private. (extract__numlabels(hide_ext__(typecovered,
  algorithm, numlabels, origttl, sigexpiration, siginception, keytag,
  signername, signature, signaturelength, rec__ext__2)) = numlabels))))))))

logic extract__origttl : us_private -> unsigned32

axiom extract__origttl__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private. (extract__origttl(hide_ext__(typecovered,
  algorithm, numlabels, origttl, sigexpiration, siginception, keytag,
  signername, signature, signaturelength, rec__ext__2)) = origttl))))))))

logic extract__sigexpiration : us_private -> unsigned32

axiom extract__sigexpiration__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private.
  (extract__sigexpiration(hide_ext__(typecovered, algorithm, numlabels,
  origttl, sigexpiration, siginception, keytag, signername, signature,
  signaturelength, rec__ext__2)) = sigexpiration))))))))

logic extract__siginception : us_private -> unsigned32

axiom extract__siginception__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private.
  (extract__siginception(hide_ext__(typecovered, algorithm, numlabels,
  origttl, sigexpiration, siginception, keytag, signername, signature,
  signaturelength, rec__ext__2)) = siginception))))))))

logic extract__keytag : us_private -> unsigned16

axiom extract__keytag__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private. (extract__keytag(hide_ext__(typecovered,
  algorithm, numlabels, origttl, sigexpiration, siginception, keytag,
  signername, signature, signaturelength, rec__ext__2)) = keytag))))))))

logic extract__signername : us_private -> (int,character) farray

axiom extract__signername__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private.
  (extract__signername(hide_ext__(typecovered, algorithm, numlabels, origttl,
  sigexpiration, siginception, keytag, signername, signature,
  signaturelength, rec__ext__2)) = signername))))))))

logic extract__signature : us_private -> (int,character) farray

axiom extract__signature__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private. (extract__signature(hide_ext__(typecovered,
  algorithm, numlabels, origttl, sigexpiration, siginception, keytag,
  signername, signature, signaturelength, rec__ext__2)) = signature))))))))

logic extract__signaturelength : us_private -> siglengthvaluetype

axiom extract__signaturelength__conv :
  (forall typecovered:query_type.
  (forall algorithm:unsigned8. forall numlabels:unsigned8.
  (forall origttl:unsigned32. forall sigexpiration:unsigned32.
  forall siginception:unsigned32.
  (forall keytag:unsigned16.
  (forall signername:(int,character) farray.
  forall signature:(int,character) farray.
  (forall signaturelength:siglengthvaluetype.
  (forall rec__ext__2:us_private.
  (extract__signaturelength(hide_ext__(typecovered, algorithm, numlabels,
  origttl, sigexpiration, siginception, keytag, signername, signature,
  signaturelength, rec__ext__2)) = signaturelength))))))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__rr_type__resourcerecordtype__ttlinseconds =
  ((a).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1;
  rec__rr_type__resourcerecordtype__class =
  ((a).us_split_fields3).rec__rr_type__resourcerecordtype__class1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signername,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signature,
  ((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  extract__typecovered(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  extract__algorithm(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  extract__numlabels(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  extract__origttl(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  extract__sigexpiration(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  extract__siginception(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  extract__keytag(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  extract__signername(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  extract__signature(((r).us_split_fields1).rec__ext__);
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  extract__signaturelength(((r).us_split_fields1).rec__ext__);
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  ((r).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds;
  rec__rr_type__resourcerecordtype__class1 =
  ((r).us_split_fields1).rec__rr_type__resourcerecordtype__class;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq19 : us_rep1, us_rep1 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq19(a, b)].
  ((((((((((((((to_rep5(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered) = to_rep5(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered)) and
  (to_rep3(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm) = to_rep3(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm))) and
  (to_rep3(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels) = to_rep3(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl) = to_rep2(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration) = to_rep2(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception) = to_rep2(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception))) and
  (to_rep1(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag) = to_rep1(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag))) and
  (bool_eq6(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signername,
  1, 128,
  ((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signername,
  1, 128) = true)) and
  (bool_eq6(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signature,
  1, 1365,
  ((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signature,
  1, 1365) = true)) and
  (to_rep6(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength) = to_rep6(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1) = to_rep2(((b).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1))) and
  (to_rep4(((a).us_split_fields3).rec__rr_type__resourcerecordtype__class1) = to_rep4(((b).us_split_fields3).rec__rr_type__resourcerecordtype__class1))) ->
  (bool_eq19(a, b) = true)) and
  ((not ((((((((((((to_rep5(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered) = to_rep5(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered)) and
  (to_rep3(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm) = to_rep3(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm))) and
  (to_rep3(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels) = to_rep3(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl) = to_rep2(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration) = to_rep2(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception) = to_rep2(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception))) and
  (to_rep1(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag) = to_rep1(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag))) and
  (bool_eq6(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signername,
  1, 128,
  ((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signername,
  1, 128) = true)) and
  (bool_eq6(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signature,
  1, 1365,
  ((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signature,
  1, 1365) = true)) and
  (to_rep6(((a).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength) = to_rep6(((b).us_split_fields3).rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength))) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1) = to_rep2(((b).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1))) and
  (to_rep4(((a).us_split_fields3).rec__rr_type__resourcerecordtype__class1) = to_rep4(((b).us_split_fields3).rec__rr_type__resourcerecordtype__class1)))) ->
  (bool_eq19(a, b) = false))))

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:query_type. forall a1:unsigned8. forall a2:unsigned8.
  forall a3:unsigned32. forall a4:unsigned32. forall a5:unsigned32.
  forall a6:unsigned16. forall a7:(int,character) farray.
  forall a8:(int,character) farray. forall a9:siglengthvaluetype.
  forall a10:unsigned32. forall a11:classtype. forall a12:us_private.
  forall a13:int. (0 <= object__size3({ us_split_fields3 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered = a;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm = a1;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels = a2;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl = a3;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration = a4;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception = a5;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag = a6;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername = a7;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature = a8;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength = a9;
  rec__rr_type__resourcerecordtype__ttlinseconds1 = a10;
  rec__rr_type__resourcerecordtype__class1 = a11; rec__ext__1 = a12 };
  attr__tag1 = a13 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:query_type. forall a1:unsigned8. forall a2:unsigned8.
  forall a3:unsigned32. forall a4:unsigned32. forall a5:unsigned32.
  forall a6:unsigned16. forall a7:(int,character) farray.
  forall a8:(int,character) farray. forall a9:siglengthvaluetype.
  forall a10:unsigned32. forall a11:classtype. forall a12:us_private.
  forall a13:int. (0 <= object__alignment3({ us_split_fields3 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered = a;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm = a1;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels = a2;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl = a3;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration = a4;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception = a5;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag = a6;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername = a7;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature = a8;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength = a9;
  rec__rr_type__resourcerecordtype__ttlinseconds1 = a10;
  rec__rr_type__resourcerecordtype__class1 = a11; rec__ext__1 = a12 };
  attr__tag1 = a13 })))

logic rr_type__rrsig_record_type__rrsigrecordtype__typecovered__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__typecovered__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__typecovered__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__typecovered__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__typecovered__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__typecovered__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__typecovered__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__typecovered__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__typecovered__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__typecovered__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__algorithm__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__algorithm__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__algorithm__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__algorithm__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__algorithm__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__algorithm__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__algorithm__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__algorithm__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__algorithm__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__algorithm__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__numlabels__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__numlabels__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__numlabels__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__numlabels__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__numlabels__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__numlabels__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__numlabels__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__numlabels__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__numlabels__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__numlabels__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__origttl__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__origttl__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__origttl__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__origttl__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__origttl__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__origttl__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__origttl__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__origttl__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__origttl__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__origttl__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__siginception__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__siginception__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__siginception__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__siginception__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__siginception__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__siginception__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__siginception__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__siginception__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__siginception__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__siginception__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__keytag__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__keytag__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__keytag__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__keytag__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__keytag__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__keytag__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__keytag__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__keytag__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__keytag__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__keytag__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__signername__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__signername__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__signername__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__signername__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__signername__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__signername__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__signername__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__signername__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__signername__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__signername__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__signature__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__signature__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__signature__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__signature__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__signature__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__signature__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__signature__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__signature__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__signature__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__signature__position)

logic rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__first__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__last__bit : int

logic rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__position : int

axiom rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__first__bit_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__first__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__last__bit_axiom :
  (rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__first__bit <  rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__last__bit)

axiom rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__position_axiom :
  (0 <= rr_type__rrsig_record_type__rrsigrecordtype__signaturelength__position)

logic rr_type__resourcerecordtype__ttlinseconds__first__bit1 : int

logic rr_type__resourcerecordtype__ttlinseconds__last__bit1 : int

logic rr_type__resourcerecordtype__ttlinseconds__position1 : int

axiom rr_type__resourcerecordtype__ttlinseconds__first__bit_axiom1 :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__first__bit1)

axiom rr_type__resourcerecordtype__ttlinseconds__last__bit_axiom1 :
  (rr_type__resourcerecordtype__ttlinseconds__first__bit1 <  rr_type__resourcerecordtype__ttlinseconds__last__bit1)

axiom rr_type__resourcerecordtype__ttlinseconds__position_axiom1 :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__position1)

logic rr_type__resourcerecordtype__class__first__bit1 : int

logic rr_type__resourcerecordtype__class__last__bit1 : int

logic rr_type__resourcerecordtype__class__position1 : int

axiom rr_type__resourcerecordtype__class__first__bit_axiom1 :
  (0 <= rr_type__resourcerecordtype__class__first__bit1)

axiom rr_type__resourcerecordtype__class__last__bit_axiom1 :
  (rr_type__resourcerecordtype__class__first__bit1 <  rr_type__resourcerecordtype__class__last__bit1)

axiom rr_type__resourcerecordtype__class__position_axiom1 :
  (0 <= rr_type__resourcerecordtype__class__position1)

logic user_eq15 : us_rep1, us_rep1 -> bool

logic dummy18 : query_type

logic dummy19 : unsigned8

logic dummy20 : unsigned8

logic dummy21 : unsigned32

logic dummy22 : unsigned32

logic dummy23 : unsigned32

logic dummy24 : unsigned16

logic dummy25 : (int,character) farray

logic dummy26 : (int,character) farray

logic dummy27 : siglengthvaluetype

logic dummy28 : unsigned32

logic dummy29 : classtype

logic dummy30 : us_private

logic dummy31 : int

type rrsigrecordtype__ref = { rrsigrecordtype__content : us_rep1
}

function rrsigrecordtype__ref___projection(a: rrsigrecordtype__ref) : us_rep1 =
  (a).rrsigrecordtype__content

logic rrsig_rec__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic zonefileline : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic zlength : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r13b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic r14b : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic to_rep7 : integer -> int

logic of_rep7 : int -> integer

axiom inversion_axiom7 :
  (forall x:integer [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : (forall x:integer [to_rep7(x)]. in_range1(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range1(x) ->
  (to_rep7(of_rep7(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq16 : integer, integer -> bool

logic dummy32 : integer

type t15b__ref = { t15b__content : integer
}

function t15b__ref___projection(a: t15b__ref) : integer = (a).t15b__content

logic attr__ATTRIBUTE_ADDRESS13 : int

logic r16b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq17 : integer, integer -> bool

logic dummy33 : integer

type t17b__ref = { t17b__content : integer
}

function t17b__ref___projection(a: t17b__ref) : integer = (a).t17b__content

logic attr__ATTRIBUTE_ADDRESS15 : int

logic zone_file_parser__parserrsig2ndline__timestring__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___1527:int. (in_range2(temp___1527) ->
  (forall temp___1528:int.
  (to_rep((zone_file_parser__parserrsig2ndline__timestring__aggregate_def(temp___1527)[temp___1528])) = temp___1527))))

 (* File "zone_file_parser.adb", line 368, characters 0-0 *)
goal WP_parameter_def :
  (forall rrsig_rec__split_fields:query_type.
  forall rrsig_rec__split_fields1:unsigned8.
  forall rrsig_rec__split_fields2:unsigned8.
  forall rrsig_rec__split_fields3:unsigned32.
  forall rrsig_rec__split_fields4:unsigned32.
  forall rrsig_rec__split_fields5:unsigned32.
  forall rrsig_rec__split_fields6:unsigned16.
  forall rrsig_rec__split_fields7:(int,character) farray.
  forall rrsig_rec__split_fields8:(int,character) farray.
  forall rrsig_rec__split_fields9:siglengthvaluetype.
  forall rrsig_rec__split_fields10:unsigned32.
  forall rrsig_rec__split_fields11:classtype.
  forall rrsig_rec__split_fields12:us_private. forall success:bool.
  forall begidx:int. forall endidx:int. forall lengthoftoken:int.
  forall foundtype:int. forall timestring:(int,character) farray.
  forall i:int. forall i1:int. forall o:unsigned32. forall o1:query_type.
  forall o2:unsigned8. forall o3:unsigned8. forall o4:unsigned32.
  forall o5:unsigned32. forall o6:unsigned32. forall o7:unsigned16.
  forall o8:(int,character) farray. forall o9:(int,character) farray.
  forall o10:siglengthvaluetype. forall o11:unsigned32. forall o12:classtype.
  forall o13:us_private. forall temp___1545:query_type.
  forall temp___15451:unsigned8. forall temp___15452:unsigned8.
  forall temp___15453:unsigned32. forall temp___15454:unsigned32.
  forall temp___15455:unsigned32. forall temp___15456:unsigned16.
  forall temp___15457:(int,character) farray.
  forall temp___15458:(int,character) farray.
  forall temp___15459:siglengthvaluetype. forall temp___154510:unsigned32.
  forall temp___154511:classtype. forall temp___154512:us_private.
  forall temp___154513:int. forall temp___1531:(int,character) farray.
  forall temp___1535:int. forall temp___1534:int. forall temp___1533:int.
  forall temp___1530:int. forall o14:int. forall o15:character.
  forall o16:int. forall o17:character. forall o18:(int,character) farray.
  forall temp___1539:bool. forall temp___1538:int. forall o19:unsigned32.
  forall o20:query_type. forall o21:unsigned8. forall o22:unsigned8.
  forall o23:unsigned32. forall o24:unsigned32. forall o25:unsigned32.
  forall o26:unsigned16. forall o27:(int,character) farray.
  forall o28:(int,character) farray. forall o29:siglengthvaluetype.
  forall o30:unsigned32. forall o31:classtype. forall o32:us_private.
  forall temp___1543:query_type. forall temp___15431:unsigned8.
  forall temp___15432:unsigned8. forall temp___15433:unsigned32.
  forall temp___15434:unsigned32. forall temp___15435:unsigned32.
  forall temp___15436:unsigned16. forall temp___15437:(int,character) farray.
  forall temp___15438:(int,character) farray.
  forall temp___15439:siglengthvaluetype. forall temp___154310:unsigned32.
  forall temp___154311:classtype. forall temp___154312:us_private.
  forall temp___154313:int. forall o33:int.
  forall rrsig_rec__split_fields13:query_type.
  forall rrsig_rec__split_fields14:unsigned8.
  forall rrsig_rec__split_fields15:unsigned8.
  forall rrsig_rec__split_fields16:unsigned32.
  forall rrsig_rec__split_fields17:unsigned32.
  forall rrsig_rec__split_fields18:unsigned32.
  forall rrsig_rec__split_fields19:unsigned16.
  forall rrsig_rec__split_fields20:(int,character) farray.
  forall rrsig_rec__split_fields21:(int,character) farray.
  forall rrsig_rec__split_fields22:siglengthvaluetype.
  forall rrsig_rec__split_fields23:unsigned32.
  forall rrsig_rec__split_fields24:classtype.
  forall rrsig_rec__split_fields25:us_private. forall i2:int. forall i3:int.
  forall result:(int,character) farray.
  forall timestring1:(int,character) farray. forall result1:int.
  forall begidx1:int. forall begidx2:int. forall endidx1:int.
  forall foundtype1:int. forall result2:bool. forall success1:bool.
  forall success2:bool.
  forall parser_utilities__convert32bitunsigned__value:t1.
  forall result3:query_type. forall result4:unsigned8.
  forall result5:unsigned8. forall result6:unsigned32.
  forall result7:unsigned32. forall result8:unsigned32.
  forall result9:unsigned16. forall result10:(int,character) farray.
  forall result11:(int,character) farray. forall result12:siglengthvaluetype.
  forall result13:unsigned32. forall result14:classtype.
  forall result15:us_private. forall rrsig_rec__split_fields26:query_type.
  forall rrsig_rec__split_fields27:unsigned8.
  forall rrsig_rec__split_fields28:unsigned8.
  forall rrsig_rec__split_fields29:unsigned32.
  forall rrsig_rec__split_fields30:unsigned32.
  forall rrsig_rec__split_fields31:unsigned32.
  forall rrsig_rec__split_fields32:unsigned16.
  forall rrsig_rec__split_fields33:(int,character) farray.
  forall rrsig_rec__split_fields34:(int,character) farray.
  forall rrsig_rec__split_fields35:siglengthvaluetype.
  forall rrsig_rec__split_fields36:unsigned32.
  forall rrsig_rec__split_fields37:classtype.
  forall rrsig_rec__split_fields38:us_private. forall result16:int.
  forall i4:int. forall timestring2:(int,character) farray. forall i5:int.
  forall result17:(int,character) farray.
  forall timestring3:(int,character) farray.
  forall timestring4:(int,character) farray. forall i6:int__ref.
  forall timestring5:(int,character) farray. forall i7:int.
  forall timestring6:map__ref. forall i8:int__ref.
  forall timestring7:(int,character) farray. forall i9:int.
  forall result18:int__ref. forall i10:int. forall success3:bool.
  forall i11:int. forall result19:bool__ref. forall success4:bool.
  forall success5:bool__ref. forall success6:bool. forall success7:bool__ref.
  forall success8:bool. forall success9:bool__ref. forall i12:int__ref.
  forall success10:bool. forall i13:int. forall success11:bool__ref.
  forall i14:int__ref. forall success12:bool. forall i15:int.
  forall success13:bool.
  forall parser_utilities__converttimestring__timeval:t1.
  forall result20:us_split_fields__ref1.
  forall rrsig_rec__split_fields39:us_split_fields2.
  forall rrsig_rec__split_fields40:us_split_fields__ref1.
  forall success14:bool__ref.
  forall rrsig_rec__split_fields41:us_split_fields2. forall success15:bool.
  forall rrsig_rec__split_fields42:us_split_fields__ref1.
  forall success16:bool__ref. forall timestring8:map__ref.
  forall i16:int__ref. forall i17:int__ref.
  forall rrsig_rec__split_fields43:us_split_fields2. forall success17:bool.
  forall timestring9:(int,character) farray. forall i18:int. forall i19:int.
  forall rrsig_rec__split_fields44:us_split_fields__ref1.
  forall success18:bool__ref. forall timestring10:map__ref.
  forall i20:int__ref. forall i21:int__ref.
  forall rrsig_rec__split_fields45:us_split_fields2. forall success19:bool.
  forall timestring11:(int,character) farray. forall i22:int. forall i23:int.
  forall result21:bool__ref. forall success20:bool. forall result22:int__ref.
  forall begidx3:int. forall begidx4:int. forall endidx2:int.
  forall foundtype2:int. forall result23:bool__ref. forall success21:bool.
  (in_range5(zlength) -> (((1 <= 256) -> in_range5(begidx)) ->
  (((1 <= 256) -> in_range5(endidx)) -> (((1 <= 256) ->
  in_range5(lengthoftoken)) -> (((0 <= 10) -> in_range4(foundtype)) ->
  (((result = timestring) and
  (timestring1 = zone_file_parser__parserrsig2ndline__timestring__aggregate_def(32))) ->
  (((result1 = begidx) and (begidx1 = 1)) -> ((((((begidx2 <= endidx1) and
  (begidx2 <= zlength)) and (endidx1 <= zlength)) and ((foundtype1 = 1) ->
  (forall i24:int. (((begidx2 <= i24) and (i24 <= endidx1)) ->
  ((48 <= to_rep((zonefileline[i24]))) and
  (to_rep((zonefileline[i24])) <= 57)))))) and ((in_range5(begidx2) and
  in_range5(endidx1)) and in_range4(foundtype1))) ->
  (((result2 = success) and (((foundtype1 = 1) and
  (success1 = match_bool(success, true, false))) or
  ((not (foundtype1 = 1)) and (success1 = match_bool(success, false,
  false))))) -> ((((success1 = true) and
  ((((not (((endidx1 - begidx2) + 1) = 14)) and
  (((((to_rep2(o) = parser_utilities__convert32bitunsigned__value) and
  ((rrsig_rec__split_fields = o1) and ((rrsig_rec__split_fields1 = o2) and
  ((rrsig_rec__split_fields2 = o3) and ((o = o4) and
  ((rrsig_rec__split_fields4 = o5) and ((rrsig_rec__split_fields5 = o6) and
  ((rrsig_rec__split_fields6 = o7) and ((rrsig_rec__split_fields7 = o8) and
  ((rrsig_rec__split_fields8 = o9) and ((rrsig_rec__split_fields9 = o10) and
  ((rrsig_rec__split_fields10 = o11) and
  ((rrsig_rec__split_fields11 = o12) and
  (rrsig_rec__split_fields12 = o13)))))))))))))) and (((temp___1545 = o1) and
  ((temp___15451 = o2) and ((temp___15452 = o3) and ((temp___15453 = o4) and
  ((temp___15454 = o5) and ((temp___15455 = o6) and ((temp___15456 = o7) and
  ((temp___15457 = o8) and ((temp___15458 = o9) and ((temp___15459 = o10) and
  ((temp___154510 = o11) and ((temp___154511 = o12) and
  (temp___154512 = o13))))))))))))) and
  (rrsig_rec__attr__tag = temp___154513))) and
  (((result3 = rrsig_rec__split_fields) and
  ((result4 = rrsig_rec__split_fields1) and
  ((result5 = rrsig_rec__split_fields2) and
  ((result6 = rrsig_rec__split_fields3) and
  ((result7 = rrsig_rec__split_fields4) and
  ((result8 = rrsig_rec__split_fields5) and
  ((result9 = rrsig_rec__split_fields6) and
  ((result10 = rrsig_rec__split_fields7) and
  ((result11 = rrsig_rec__split_fields8) and
  ((result12 = rrsig_rec__split_fields9) and
  ((result13 = rrsig_rec__split_fields10) and
  ((result14 = rrsig_rec__split_fields11) and
  (result15 = rrsig_rec__split_fields12))))))))))))) and
  ((temp___1545 = rrsig_rec__split_fields26) and
  ((temp___15451 = rrsig_rec__split_fields27) and
  ((temp___15452 = rrsig_rec__split_fields28) and
  ((temp___15453 = rrsig_rec__split_fields29) and
  ((temp___15454 = rrsig_rec__split_fields30) and
  ((temp___15455 = rrsig_rec__split_fields31) and
  ((temp___15456 = rrsig_rec__split_fields32) and
  ((temp___15457 = rrsig_rec__split_fields33) and
  ((temp___15458 = rrsig_rec__split_fields34) and
  ((temp___15459 = rrsig_rec__split_fields35) and
  ((temp___154510 = rrsig_rec__split_fields36) and
  ((temp___154511 = rrsig_rec__split_fields37) and
  (temp___154512 = rrsig_rec__split_fields38))))))))))))))) and (((i17 = {
  int__content = i1 }) and ((i16 = { int__content = i }) and
  ((timestring8 = { map__content = timestring1 }) and ((success16 = {
  bool__content = success2 }) and (rrsig_rec__split_fields42 = {
  us_split_fields__content1 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields26;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields27;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields28;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields29;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields30;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields31;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields32;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields33;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields34;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields35;
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields36; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields37; rec__ext__1 = rrsig_rec__split_fields38 }
  }))))) and ((i19 = i3) and ((i18 = i2) and ((timestring9 = timestring1) and
  ((success17 = success2) and (rrsig_rec__split_fields43 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields26;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields27;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields28;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields29;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields30;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields31;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields32;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields33;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields34;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields35;
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields36; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields37; rec__ext__1 = rrsig_rec__split_fields38
  })))))))) or ((((endidx1 - begidx2) + 1) = 14) and (((((result16 = i) and
  (i4 = 1)) and ((((1 <= i4) and (i4 <= 14)) and
  ((((temp___1531 = timestring1) and ((temp___1535 = zlength) and
  ((temp___1534 = endidx1) and ((temp___1533 = begidx2) and
  ((temp___1530 = i4) and (((((((begidx2 = temp___1533) and
  (endidx1 = temp___1534)) and (zlength = temp___1535)) and
  (endidx1 <= zlength)) and ((endidx1 - begidx2) = 13)) and (i5 <= 14)) and
  (((((1 <= 14) -> in_range8(i5)) and
  (forall temp___1532:int. (((1 <= temp___1532) and (temp___1532 <= 14)) ->
  ((i5 <= temp___1532) ->
  ((timestring2[temp___1532]) = (temp___1531[temp___1532])))))) and
  ((1 <= i5) and (i5 <= 14))) and (((((((((1 <= ((begidx2 + i5) - 1)) and
  (((begidx2 + i5) - 1) <= 256)) and (o14 = ((begidx2 + i5) - 1))) and
  (o15 = (zonefileline[o14]))) and (o16 = to_rep(o15))) and
  (to_rep(o17) = o16)) and (o18 = (timestring2[i5 <- o17]))) and
  ((result17 = timestring2) and (timestring3 = o18))) and
  (i5 = 14))))))))) and (((i6 = { int__content = i5 }) and
  (timestring3 = timestring4)) and ((i7 = i5) and
  (timestring5 = timestring3)))) and (((i8 = i6) and (timestring6 = {
  map__content = timestring4 })) and ((i9 = i7) and
  (timestring7 = timestring5))))) or ((not ((1 <= i4) and (i4 <= 14))) and
  (((i8 = { int__content = i4 }) and (timestring6 = { map__content =
  timestring1 })) and ((i9 = i4) and (timestring7 = timestring1)))))) and
  ((((result18 = { int__content = i1 }) and (i10 = 1)) and ((((1 <= i10) and
  (i10 <= 14)) and ((((temp___1539 = success1) and ((temp___1538 = i10) and
  ((forall j:int. (((1 <= j) and (j <= (i11 - 1))) ->
   ((48 <= to_rep(((timestring6).map__content[j]))) and
   (to_rep(((timestring6).map__content[j])) <= 57)))) and
  ((((1 <= 14) -> in_range8(i11)) and ((1 <= i11) and (i11 <= 14))) and
  ((((success7 = { bool__content = success4 }) and (success8 = success4)) and
  (((not (to_rep(((timestring6).map__content[i11])) <  48)) ->
  (57 <  to_rep(((timestring6).map__content[i11])))) and ((result19 = {
  bool__content = success3 }) and (success4 = of_int2(0))))) or
  (((not ((not (to_rep(((timestring6).map__content[i11])) <  48)) ->
  (57 <  to_rep(((timestring6).map__content[i11]))))) and ((success5 = {
  bool__content = success3 }) and (success6 = success3))) and
  (((success7 = success5) and (success8 = success6)) and
  (i11 = 14)))))))) and (((i12 = { int__content = i11 }) and
  (success9 = success7)) and ((i13 = i11) and (success10 = success8)))) and
  (((i14 = i12) and (success11 = success9)) and ((i15 = i13) and
  (success12 = success10))))) or ((not ((1 <= i10) and (i10 <= 14))) and
  (((i14 = { int__content = i10 }) and (success11 = { bool__content =
  success1 })) and ((i15 = i10) and (success12 = success1)))))) and
  ((((success11).bool__content = true) and
  (((((to_rep2(o19) = parser_utilities__converttimestring__timeval) and
  ((rrsig_rec__split_fields = o20) and ((rrsig_rec__split_fields1 = o21) and
  ((rrsig_rec__split_fields2 = o22) and ((rrsig_rec__split_fields3 = o23) and
  ((rrsig_rec__split_fields4 = o24) and ((o19 = o25) and
  ((rrsig_rec__split_fields6 = o26) and ((rrsig_rec__split_fields7 = o27) and
  ((rrsig_rec__split_fields8 = o28) and ((rrsig_rec__split_fields9 = o29) and
  ((rrsig_rec__split_fields10 = o30) and
  ((rrsig_rec__split_fields11 = o31) and
  (rrsig_rec__split_fields12 = o32)))))))))))))) and
  (((temp___1543 = o20) and ((temp___15431 = o21) and
  ((temp___15432 = o22) and ((temp___15433 = o23) and
  ((temp___15434 = o24) and ((temp___15435 = o25) and
  ((temp___15436 = o26) and ((temp___15437 = o27) and
  ((temp___15438 = o28) and ((temp___15439 = o29) and
  ((temp___154310 = o30) and ((temp___154311 = o31) and
  (temp___154312 = o32))))))))))))) and
  (rrsig_rec__attr__tag = temp___154313))) and ((result20 = {
  us_split_fields__content1 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields1;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields2;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields3;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields4;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields5;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields6;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields7;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields8;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields9; rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields10; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields11; rec__ext__1 = rrsig_rec__split_fields12 } }) and
  (rrsig_rec__split_fields39 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  temp___1543; rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  temp___15431; rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  temp___15432; rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  temp___15433;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  temp___15434;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  temp___15435; rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  temp___15436;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  temp___15437; rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  temp___15438;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  temp___15439; rec__rr_type__resourcerecordtype__ttlinseconds1 =
  temp___154310; rec__rr_type__resourcerecordtype__class1 = temp___154311;
  rec__ext__1 = temp___154312 }))) and (((success14 = { bool__content =
  success13 }) and (rrsig_rec__split_fields40 = { us_split_fields__content1 =
  rrsig_rec__split_fields39 })) and ((success15 = success13) and
  (rrsig_rec__split_fields41 = rrsig_rec__split_fields39))))) or
  ((not ((success11).bool__content = true)) and (((success14 = success11) and
  (rrsig_rec__split_fields40 = { us_split_fields__content1 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields1;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields2;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields3;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields4;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields5;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields6;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields7;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields8;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields9; rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields10; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields11; rec__ext__1 = rrsig_rec__split_fields12 }
  })) and ((success15 = success12) and (rrsig_rec__split_fields41 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields13;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields14;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields15;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields16;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields17;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields18;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields19;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields20;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields21;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields22;
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields23; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields24; rec__ext__1 = rrsig_rec__split_fields25
  }))))))) and (((i17 = i14) and ((i16 = i8) and
  ((timestring8 = timestring6) and ((success16 = success14) and
  (rrsig_rec__split_fields42 = rrsig_rec__split_fields40))))) and
  ((i19 = i15) and ((i18 = i9) and ((timestring9 = timestring7) and
  ((success17 = success15) and
  (rrsig_rec__split_fields43 = rrsig_rec__split_fields41))))))))) and
  (((i21 = i17) and ((i20 = i16) and ((timestring10 = timestring8) and
  ((success18 = success16) and
  (rrsig_rec__split_fields44 = rrsig_rec__split_fields42))))) and
  ((i23 = i19) and ((i22 = i18) and ((timestring11 = timestring9) and
  ((success19 = success17) and
  (rrsig_rec__split_fields45 = rrsig_rec__split_fields43)))))))) or
  ((not (success1 = true)) and (((i21 = { int__content = i1 }) and ((i20 = {
  int__content = i }) and ((timestring10 = { map__content = timestring1
  }) and ((success18 = { bool__content = success1 }) and
  (rrsig_rec__split_fields44 = { us_split_fields__content1 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields1;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields2;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields3;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields4;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields5;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields6;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields7;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields8;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields9; rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields10; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields11; rec__ext__1 = rrsig_rec__split_fields12 }
  }))))) and ((i23 = i3) and ((i22 = i2) and
  ((timestring11 = timestring1) and ((success19 = success1) and
  (rrsig_rec__split_fields45 = {
  rec__rr_type__rrsig_record_type__rrsigrecordtype__typecovered =
  rrsig_rec__split_fields13;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__algorithm =
  rrsig_rec__split_fields14;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__numlabels =
  rrsig_rec__split_fields15;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__origttl =
  rrsig_rec__split_fields16;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__sigexpiration =
  rrsig_rec__split_fields17;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__siginception =
  rrsig_rec__split_fields18;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__keytag =
  rrsig_rec__split_fields19;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signername =
  rrsig_rec__split_fields20;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signature =
  rrsig_rec__split_fields21;
  rec__rr_type__rrsig_record_type__rrsigrecordtype__signaturelength =
  rrsig_rec__split_fields22;
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  rrsig_rec__split_fields23; rec__rr_type__resourcerecordtype__class1 =
  rrsig_rec__split_fields24; rec__ext__1 = rrsig_rec__split_fields25
  })))))))) -> (((result21 = success18) and (((endidx1 <  zlength) and
  (success20 = match_bool((success18).bool__content, true, false))) or
  ((not (endidx1 <  zlength)) and
  (success20 = match_bool((success18).bool__content, false, false))))) ->
  ((success20 = true) -> ((((o33 = (endidx1 + 1)) and
  in_range5((endidx1 + 1))) and ((result22 = { int__content = begidx2 }) and
  (begidx3 = o33))) -> ((((((begidx4 <= endidx2) and
  (begidx4 <= zlength)) and (endidx2 <= zlength)) and ((foundtype2 = 1) ->
  (forall i24:int. (((begidx4 <= i24) and (i24 <= endidx2)) ->
  ((48 <= to_rep((zonefileline[i24]))) and
  (to_rep((zonefileline[i24])) <= 57)))))) and ((in_range5(begidx4) and
  in_range5(endidx2)) and in_range4(foundtype2))) -> (((result23 = {
  bool__content = success20 }) and (((foundtype2 = 1) and
  (success21 = true)) or ((not (foundtype2 = 1)) and
  (success21 = false)))) -> ((success21 = true) ->
  (forall i24:int. (((begidx4 <= i24) and (i24 <= endidx2)) ->
  (48 <= to_rep((zonefileline[i24]))))))))))))))))))))))
