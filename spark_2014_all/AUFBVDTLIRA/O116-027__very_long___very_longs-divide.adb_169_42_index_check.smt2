(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tdigit_count_typeB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tdigit_count_typeB tdigit_count_typeB) Bool)
(declare-const dummy tdigit_count_typeB)
(declare-datatypes () ((tdigit_count_typeB__ref (mk_tdigit_count_typeB__ref (tdigit_count_typeB__content tdigit_count_typeB)))))
(define-fun tdigit_count_typeB__ref___projection ((a tdigit_count_typeB__ref)) tdigit_count_typeB (tdigit_count_typeB__content a))
(declare-sort digit_index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (digit_index_type digit_index_type) Bool)
(declare-const dummy1 digit_index_type)
(declare-datatypes () ((digit_index_type__ref (mk_digit_index_type__ref (digit_index_type__content digit_index_type)))))
(define-fun digit_index_type__ref___projection ((a digit_index_type__ref)) digit_index_type (digit_index_type__content a))
(define-fun dynamic_invariant ((temp___expr_204 Int) (temp___is_init_201 Bool) (temp___skip_constant_202 Bool) (temp___do_toplevel_203 Bool)) Bool (=> (or (= temp___is_init_201 true) (<= 1 65536)) (in_range2 temp___expr_204)))
(declare-sort octet 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (octet octet) Bool)
(declare-const dummy2 octet)
(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))
(declare-fun to_rep (octet) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) octet)
(assert (forall ((x octet)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int4 ((x octet)) Int (bv2nat (to_rep x)))
(assert (forall ((x octet)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))
(assert (forall ((a (Array Int octet))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int octet))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int Int) (Array Int octet))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (octet Int) (Array Int octet))
(assert (forall ((v octet)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int) (b (Array Int octet)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int octet) Int Int (Array Int octet) Int Int) Int)
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (digit_index_type) Int)
(declare-fun of_rep1 (Int) digit_index_type)
(assert (forall ((x digit_index_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x digit_index_type)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-fun to_rep2 (tdigit_count_typeB) Int)
(declare-fun of_rep2 (Int) tdigit_count_typeB)
(assert (forall ((x tdigit_count_typeB)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x tdigit_count_typeB)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tdigit_count_typeB tdigit_count_typeB) Bool)
(declare-const dummy3 tdigit_count_typeB)
(declare-datatypes () ((t17s__ref (mk_t17s__ref (t17s__content tdigit_count_typeB)))))
(define-fun t17s__ref___projection ((a t17s__ref)) tdigit_count_typeB (t17s__content a))
(declare-sort t 0)
(declare-fun first (t) tdigit_count_typeB)
(declare-fun last (t) tdigit_count_typeB)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int octet)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))
(define-fun of_array ((a (Array Int octet)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int octet)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int octet)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int octet)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int octet))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int octet))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int octet))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((t18s__ref (mk_t18s__ref (t18s__content us_t)))))
(define-fun t18s__ref___projection ((a t18s__ref)) us_t (t18s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__very_longs__very_long__length digit_index_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) digit_index_type (rec__very_longs__very_long__length a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__very_longs__very_long__long_digits us_t)))))
(define-fun us_split_fields_Long_Digits__projection ((a us_split_fields)) us_t (rec__very_longs__very_long__long_digits a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 a))) (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 b)))) (= (bool_eq1 (rec__very_longs__very_long__long_digits (us_split_fields1 a)) (rec__very_longs__very_long__long_digits (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const very_longs__very_long__length__first__bit Int)
(declare-const very_longs__very_long__length__last__bit Int)
(declare-const very_longs__very_long__length__position Int)
(assert (<= 0 very_longs__very_long__length__first__bit))
(assert (< very_longs__very_long__length__first__bit very_longs__very_long__length__last__bit))
(assert (<= 0 very_longs__very_long__length__position))
(declare-const very_longs__very_long__long_digits__first__bit Int)
(declare-const very_longs__very_long__long_digits__last__bit Int)
(declare-const very_longs__very_long__long_digits__position Int)
(assert (<= 0 very_longs__very_long__long_digits__first__bit))
(assert (< very_longs__very_long__long_digits__first__bit very_longs__very_long__long_digits__last__bit))
(assert (<= 0 very_longs__very_long__long_digits__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((very_long__ref (mk_very_long__ref (very_long__content us_rep)))))
(define-fun very_long__ref___projection ((a very_long__ref)) us_rep (very_long__content a))
(define-fun dynamic_invariant1 ((temp___expr_221 us_rep) (temp___is_init_218 Bool) (temp___skip_constant_219 Bool) (temp___do_toplevel_220 Bool)) Bool (let ((temp___222 (rec__very_longs__very_long__length (us_split_discrs1 temp___expr_221)))) (and (dynamic_property1 1 (to_rep1 temp___222) (first1 (rec__very_longs__very_long__long_digits (us_split_fields1 temp___expr_221))) (last1 (rec__very_longs__very_long__long_digits (us_split_fields1 temp___expr_221)))) (and (= (first1 (rec__very_longs__very_long__long_digits (us_split_fields1 temp___expr_221))) 1) (= (last1 (rec__very_longs__very_long__long_digits (us_split_fields1 temp___expr_221))) (to_rep1 temp___222))))))
(declare-const dividend us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const divisor us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort double_octet 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))
(declare-fun user_eq6 (double_octet double_octet) Bool)
(declare-const dummy6 double_octet)
(declare-datatypes () ((double_octet__ref (mk_double_octet__ref (double_octet__content double_octet)))))
(define-fun double_octet__ref___projection ((a double_octet__ref)) double_octet (double_octet__content a))
(define-fun dynamic_invariant2 ((temp___expr_312 (_ BitVec 16)) (temp___is_init_309 Bool) (temp___skip_constant_310 Bool) (temp___do_toplevel_311 Bool)) Bool true)
(declare-sort natural 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (natural natural) Bool)
(declare-const dummy7 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range3 temp___expr_33)))
(declare-fun shift_right ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun shift_right__function_guard ((_ BitVec 16) (_ BitVec 16) Int) Bool)
(assert (forall ((value (_ BitVec 16))) (forall ((count Int)) (! (=> (and (dynamic_invariant2 value true true true) (dynamic_invariant3 count true true true)) (let ((result (shift_right value count))) (and (= result (bvudiv value (ite (< count 65536) (bvshl ((_ int2bv 16) 1) ((_ int2bv 16) count)) ((_ int2bv 16) 0)))) (dynamic_invariant2 result true false true)))) :pattern ((shift_right value count))))))
(declare-const last2 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (tdigit_count_typeB tdigit_count_typeB) Bool)
(declare-const dummy8 tdigit_count_typeB)
(declare-datatypes () ((divisor_digits_count_type__ref (mk_divisor_digits_count_type__ref (divisor_digits_count_type__content tdigit_count_typeB)))))
(define-fun divisor_digits_count_type__ref___projection ((a divisor_digits_count_type__ref)) tdigit_count_typeB (divisor_digits_count_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_690 Int) (temp___is_init_687 Bool) (temp___skip_constant_688 Bool) (temp___do_toplevel_689 Bool)) Bool (=> (or (= temp___is_init_687 true) (<= 1 last2)) (dynamic_property2 1 last2 temp___expr_690)))
(assert (= last2 (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 divisor)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (tdigit_count_typeB tdigit_count_typeB) Bool)
(declare-const dummy9 tdigit_count_typeB)
(declare-datatypes () ((tT110bP1__ref (mk_tT110bP1__ref (tT110bP1__content tdigit_count_typeB)))))
(define-fun tT110bP1__ref___projection ((a tT110bP1__ref)) tdigit_count_typeB (tT110bP1__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) tdigit_count_typeB)
(declare-fun last3 (t1) tdigit_count_typeB)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first2 (mk1 f l))) f) (= (to_rep2 (last3 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int octet)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int octet) (elts1 a))
(define-fun of_array1 ((a (Array Int octet)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep2 (first2 (rt1 a))))
(define-fun last4 ((a us_t1)) Int (to_rep2 (last3 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last4 a)) (+ (- (last4 a) (first3 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int octet)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int octet)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int octet)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int octet))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int octet))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int octet))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep2 (first2 (rt1 x))) (to_rep2 (last3 (rt1 x))) (elts1 y) (to_rep2 (first2 (rt1 y))) (to_rep2 (last3 (rt1 y)))))
(declare-fun user_eq10 (us_t1 us_t1) Bool)
(declare-const dummy10 us_t1)
(declare-datatypes () ((t110b__ref (mk_t110b__ref (t110b__content us_t1)))))
(define-fun t110b__ref___projection ((a t110b__ref)) us_t1 (t110b__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__very_longs__very_long__long_digits1 us_t1)))))
(define-fun us_split_fields_Long_Digits__30__projection ((a us_split_fields2)) us_t1 (rec__very_longs__very_long__long_digits1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___30__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___59__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___60__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (let ((temp___190 (rec__very_longs__very_long__long_digits1 (us_split_fields3 a)))) (of_array (to_array1 temp___190) (first3 temp___190) (last4 temp___190))))))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (let ((temp___189 (rec__very_longs__very_long__long_digits (us_split_fields1 r)))) (of_array1 (to_array temp___189) (first1 temp___189) (last1 temp___189))))))
(define-fun bool_eq4 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__very_longs__very_long__length (us_split_discrs2 a))) (to_rep1 (rec__very_longs__very_long__length (us_split_discrs2 b)))) (= (bool_eq3 (rec__very_longs__very_long__long_digits1 (us_split_fields3 a)) (rec__very_longs__very_long__long_digits1 (us_split_fields3 b))) true)) true false))
(define-fun in_range4 ((rec__very_longs__very_long__length1 Int) (a us_rep)) Bool (= rec__very_longs__very_long__length1 (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const very_longs__very_long__length__first__bit1 Int)
(declare-const very_longs__very_long__length__last__bit1 Int)
(declare-const very_longs__very_long__length__position1 Int)
(assert (<= 0 very_longs__very_long__length__first__bit1))
(assert (< very_longs__very_long__length__first__bit1 very_longs__very_long__length__last__bit1))
(assert (<= 0 very_longs__very_long__length__position1))
(declare-const very_longs__very_long__long_digits__first__bit1 Int)
(declare-const very_longs__very_long__long_digits__last__bit1 Int)
(declare-const very_longs__very_long__long_digits__position1 Int)
(assert (<= 0 very_longs__very_long__long_digits__first__bit1))
(assert (< very_longs__very_long__long_digits__first__bit1 very_longs__very_long__long_digits__last__bit1))
(assert (<= 0 very_longs__very_long__long_digits__position1))
(declare-fun user_eq11 (us_rep1 us_rep1) Bool)
(declare-const dummy11 us_rep1)
(declare-datatypes () ((tuS__ref (mk_tuS__ref (tuS__content us_rep1)))))
(define-fun tuS__ref___projection ((a tuS__ref)) us_rep1 (tuS__content a))
(define-fun dynamic_invariant5 ((temp___expr_708 us_rep1) (temp___is_init_705 Bool) (temp___skip_constant_706 Bool) (temp___do_toplevel_707 Bool)) Bool (and (=> (not (= temp___skip_constant_706 true)) (in_range4 (+ (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 dividend))) 1) (to_base temp___expr_708))) (and (dynamic_property4 1 (+ (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 dividend))) 1) (first3 (rec__very_longs__very_long__long_digits1 (us_split_fields3 temp___expr_708))) (last4 (rec__very_longs__very_long__long_digits1 (us_split_fields3 temp___expr_708)))) (and (= (first3 (rec__very_longs__very_long__long_digits1 (us_split_fields3 temp___expr_708))) 1) (= (last4 (rec__very_longs__very_long__long_digits1 (us_split_fields3 temp___expr_708))) (+ (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 dividend))) 1))))))
(define-fun default_initial_assumption ((temp___expr_711 us_rep1) (temp___skip_top_level_712 Bool)) Bool (= (to_rep1 (rec__very_longs__very_long__length (us_split_discrs2 temp___expr_711))) (+ (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 dividend))) 1)))
(declare-const u__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_property5 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq12 (tdigit_count_typeB tdigit_count_typeB) Bool)
(declare-const dummy12 tdigit_count_typeB)
(declare-datatypes () ((tT111bP1__ref (mk_tT111bP1__ref (tT111bP1__content tdigit_count_typeB)))))
(define-fun tT111bP1__ref___projection ((a tT111bP1__ref)) tdigit_count_typeB (tT111bP1__content a))
(declare-sort t2 0)
(declare-fun first4 (t2) tdigit_count_typeB)
(declare-fun last5 (t2) tdigit_count_typeB)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first4 (mk2 f l))) f) (= (to_rep2 (last5 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property5 range_first range_last low) (dynamic_property5 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int octet)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int octet) (elts2 a))
(define-fun of_array2 ((a (Array Int octet)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep2 (first4 (rt2 a))))
(define-fun last6 ((a us_t2)) Int (to_rep2 (last5 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last6 a)) (+ (- (last6 a) (first5 a)) 1) 0))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int octet)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int octet)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int octet)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int octet))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int octet))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int octet))) (<= 0 (object__alignment4 a))))
(define-fun bool_eq5 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep2 (first4 (rt2 x))) (to_rep2 (last5 (rt2 x))) (elts2 y) (to_rep2 (first4 (rt2 y))) (to_rep2 (last5 (rt2 y)))))
(declare-fun user_eq13 (us_t2 us_t2) Bool)
(declare-const dummy13 us_t2)
(declare-datatypes () ((t111b__ref (mk_t111b__ref (t111b__content us_t2)))))
(define-fun t111b__ref___projection ((a t111b__ref)) us_t2 (t111b__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__very_longs__very_long__long_digits2 us_t2)))))
(define-fun us_split_fields_Long_Digits__31__projection ((a us_split_fields4)) us_t2 (rec__very_longs__very_long__long_digits2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___31__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs3 us_split_discrs) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___61__projection ((a us_rep2)) us_split_discrs (us_split_discrs3 a))
(define-fun us_rep___62__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a) (mk___split_fields (let ((temp___192 (rec__very_longs__very_long__long_digits2 (us_split_fields5 a)))) (of_array (to_array2 temp___192) (first5 temp___192) (last6 temp___192))))))
(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r) (mk___split_fields2 (let ((temp___191 (rec__very_longs__very_long__long_digits (us_split_fields1 r)))) (of_array2 (to_array temp___191) (first1 temp___191) (last1 temp___191))))))
(define-fun bool_eq6 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep1 (rec__very_longs__very_long__length (us_split_discrs3 a))) (to_rep1 (rec__very_longs__very_long__length (us_split_discrs3 b)))) (= (bool_eq5 (rec__very_longs__very_long__long_digits2 (us_split_fields5 a)) (rec__very_longs__very_long__long_digits2 (us_split_fields5 b))) true)) true false))
(define-fun in_range5 ((rec__very_longs__very_long__length1 Int) (a us_rep)) Bool (= rec__very_longs__very_long__length1 (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-const very_longs__very_long__length__first__bit2 Int)
(declare-const very_longs__very_long__length__last__bit2 Int)
(declare-const very_longs__very_long__length__position2 Int)
(assert (<= 0 very_longs__very_long__length__first__bit2))
(assert (< very_longs__very_long__length__first__bit2 very_longs__very_long__length__last__bit2))
(assert (<= 0 very_longs__very_long__length__position2))
(declare-const very_longs__very_long__long_digits__first__bit2 Int)
(declare-const very_longs__very_long__long_digits__last__bit2 Int)
(declare-const very_longs__very_long__long_digits__position2 Int)
(assert (<= 0 very_longs__very_long__long_digits__first__bit2))
(assert (< very_longs__very_long__long_digits__first__bit2 very_longs__very_long__long_digits__last__bit2))
(assert (<= 0 very_longs__very_long__long_digits__position2))
(declare-fun user_eq14 (us_rep2 us_rep2) Bool)
(declare-const dummy14 us_rep2)
(declare-datatypes () ((tvS__ref (mk_tvS__ref (tvS__content us_rep2)))))
(define-fun tvS__ref___projection ((a tvS__ref)) us_rep2 (tvS__content a))
(define-fun dynamic_invariant6 ((temp___expr_720 us_rep2) (temp___is_init_717 Bool) (temp___skip_constant_718 Bool) (temp___do_toplevel_719 Bool)) Bool (and (=> (not (= temp___skip_constant_718 true)) (in_range5 (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 divisor))) (to_base1 temp___expr_720))) (and (dynamic_property6 1 (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 divisor))) (first5 (rec__very_longs__very_long__long_digits2 (us_split_fields5 temp___expr_720))) (last6 (rec__very_longs__very_long__long_digits2 (us_split_fields5 temp___expr_720)))) (and (= (first5 (rec__very_longs__very_long__long_digits2 (us_split_fields5 temp___expr_720))) 1) (= (last6 (rec__very_longs__very_long__long_digits2 (us_split_fields5 temp___expr_720))) (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 divisor))))))))
(define-fun default_initial_assumption1 ((temp___expr_723 us_rep2) (temp___skip_top_level_724 Bool)) Bool (= (to_rep1 (rec__very_longs__very_long__length (us_split_discrs3 temp___expr_723))) (to_rep1 (rec__very_longs__very_long__length (us_split_discrs1 divisor)))))
(declare-const v__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const r127b Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(define-fun dynamic_invariant7 ((temp___expr_210 (_ BitVec 8)) (temp___is_init_207 Bool) (temp___skip_constant_208 Bool) (temp___do_toplevel_209 Bool)) Bool true)
(declare-const n Int)
(declare-const u__split_fields (Array Int octet))
(declare-const u__split_fields1 t1)
(declare-const v__split_fields (Array Int octet))
(declare-const v__split_fields1 t2)
(declare-const q_hat (_ BitVec 16))
(declare-const current_borrow (_ BitVec 16))
(declare-const carry (_ BitVec 16))
(declare-const product (_ BitVec 16))
(declare-const temporary_digit (_ BitVec 16))
(declare-const future_borrow (_ BitVec 16))
(declare-const divisor_index Int)
(declare-const temp___1281 (_ BitVec 16))
(declare-const temp___1280 (_ BitVec 16))
(declare-const temp___1279 (_ BitVec 16))
(declare-const temp___1276 digit_index_type)
(declare-const temp___12761 (Array Int octet))
(declare-const temp___12762 t1)
(declare-const temp___1275 (_ BitVec 16))
(declare-const temp___1274 (_ BitVec 16))
(declare-const o Int)
(declare-const o1 octet)
(declare-const o2 (_ BitVec 8))
(declare-const o3 (_ BitVec 16))
(declare-const o4 (_ BitVec 16))
(declare-const o5 (_ BitVec 16))
(declare-const o6 (_ BitVec 16))
(declare-const o7 Int)
(declare-const temp___1267 Int)
(declare-const o8 Int)
(declare-const o9 octet)
(declare-const o10 (_ BitVec 8))
(declare-const o11 (_ BitVec 16))
(declare-const o12 Int)
(declare-const temp___1271 Int)
(declare-const o13 Int)
(declare-const temp___1269 Int)
(declare-const o14 Int)
(declare-const o15 octet)
(declare-const o16 (_ BitVec 8))
(declare-const o17 (_ BitVec 16))
(declare-const o18 (_ BitVec 16))
(declare-const o19 (_ BitVec 16))
(declare-const o20 (_ BitVec 16))
(declare-const o21 (_ BitVec 16))
(declare-const o22 (_ BitVec 8))
(declare-const o23 octet)
(declare-const o24 Int)
(declare-const o25 (Array Int octet))
(declare-const o26 (Array Int octet))
(declare-const o27 t1)
(declare-const o28 (Array Int octet))
(declare-const o29 t1)
(declare-const temp___1273 us_rep1)
(declare-const temp___1285 Int)
(declare-const o30 Int)
(declare-const o31 octet)
(declare-const o32 (_ BitVec 8))
(declare-const o33 (_ BitVec 16))
(declare-const temp___1289 Int)
(declare-const temp___1287 Int)
(declare-const o34 Int)
(declare-const o35 octet)
(declare-const o36 (_ BitVec 8))
(declare-const o37 (_ BitVec 16))
(declare-const o38 (_ BitVec 16))
(declare-const o39 (_ BitVec 16))
(declare-const o40 (_ BitVec 16))
(declare-const o41 (_ BitVec 16))
(declare-const o42 (_ BitVec 8))
(declare-const o43 octet)
(declare-const u__split_fields2 us_split_fields2)
(declare-const product1 (_ BitVec 16))
(declare-const temporary_digit1 (_ BitVec 16))
(declare-const future_borrow1 (_ BitVec 16))
(declare-const result t__ref1)
(declare-const carry1 (_ BitVec 16))
(declare-const result1 t__ref1)
(declare-const current_borrow1 (_ BitVec 16))
(declare-const result2 int__ref)
(declare-const divisor_index1 Int)
(declare-const u__split_fields3 us_split_fields2)
(declare-const current_borrow2 (_ BitVec 16))
(declare-const carry2 (_ BitVec 16))
(declare-const product2 (_ BitVec 16))
(declare-const temporary_digit2 (_ BitVec 16))
(declare-const future_borrow2 (_ BitVec 16))
(declare-const divisor_index2 Int)
(declare-const result3 t__ref1)
(declare-const product3 (_ BitVec 16))
(declare-const result4 t__ref1)
(declare-const carry3 (_ BitVec 16))
(declare-const result5 t__ref1)
(declare-const temporary_digit3 (_ BitVec 16))
(declare-const result6 Bool)
(declare-const result7 t__ref1)
(declare-const future_borrow3 (_ BitVec 16))
(declare-const result8 t__ref1)
(declare-const future_borrow4 (_ BitVec 16))
(declare-const result9 us_split_fields__ref1)
(declare-const u__split_fields4 us_split_fields2)
(declare-const result10 t__ref1)
(declare-const current_borrow3 (_ BitVec 16))
(declare-const u__split_fields5 us_split_fields__ref1)
(declare-const current_borrow4 t__ref1)
(declare-const carry4 t__ref1)
(declare-const product4 t__ref1)
(declare-const temporary_digit4 t__ref1)
(declare-const future_borrow5 t__ref1)
(declare-const divisor_index3 int__ref)
(declare-const u__split_fields6 us_split_fields2)
(declare-const current_borrow5 (_ BitVec 16))
(declare-const carry5 (_ BitVec 16))
(declare-const product5 (_ BitVec 16))
(declare-const temporary_digit5 (_ BitVec 16))
(declare-const future_borrow6 (_ BitVec 16))
(declare-const divisor_index4 Int)
(declare-const u__split_fields7 us_split_fields__ref1)
(declare-const current_borrow6 t__ref1)
(declare-const carry6 t__ref1)
(declare-const product6 t__ref1)
(declare-const temporary_digit6 t__ref1)
(declare-const future_borrow7 t__ref1)
(declare-const divisor_index5 int__ref)
(declare-const u__split_fields8 us_split_fields2)
(declare-const current_borrow7 (_ BitVec 16))
(declare-const carry7 (_ BitVec 16))
(declare-const product7 (_ BitVec 16))
(declare-const temporary_digit7 (_ BitVec 16))
(declare-const future_borrow8 (_ BitVec 16))
(declare-const divisor_index6 Int)
(declare-const result11 Bool)
(declare-const result12 t__ref1)
(declare-const future_borrow9 (_ BitVec 16))
(declare-const result13 t__ref1)
(declare-const future_borrow10 (_ BitVec 16))
(declare-const future_borrow11 t__ref1)
(declare-const future_borrow12 (_ BitVec 16))
(assert (dynamic_invariant1 dividend true false true))
(assert (dynamic_invariant1 divisor true false true))
(assert (dynamic_property2 1 last2 n))
(assert (dynamic_invariant5 (mk___rep1 u__split_discrs (mk___split_fields1 (mk___t1 u__split_fields u__split_fields1))) true false true))
(assert (dynamic_invariant6 (mk___rep2 v__split_discrs (mk___split_fields2 (mk___t2 v__split_fields v__split_fields1))) true false true))
(assert true)
(assert true)
(assert (in_range2 j))
(assert true)
(assert true)
(assert true)
(assert true)
(assert (= result (mk_t__ref1 carry)))
(assert (= carry1 ((_ int2bv 16) 0)))
(assert (= result1 (mk_t__ref1 current_borrow)))
(assert (= current_borrow1 ((_ int2bv 16) 0)))
(assert (= n r127b))
(assert (dynamic_property2 1 last2 r127b))
(assert (= result2 (mk_int__ref divisor_index)))
(assert (= divisor_index1 1))
(assert (<= 1 divisor_index1))
(assert (<= divisor_index1 r127b))
(assert (and (dynamic_invariant5 (mk___rep1 u__split_discrs u__split_fields3) true true true) (and (<= 1 divisor_index2) (<= divisor_index2 r127b))))
(assert (and (<= (to_rep2 (first4 v__split_fields1)) divisor_index2) (<= divisor_index2 (to_rep2 (last5 v__split_fields1)))))
(assert (= o divisor_index2))
(assert (= o1 (select v__split_fields o)))
(assert (= o2 (to_rep o1)))
(assert (= o3 ((_ zero_extend 8) o2)))
(assert (= o4 (bvmul q_hat o3)))
(assert (= o5 (bvadd o4 carry2)))
(assert (= result3 (mk_t__ref1 product2)))
(assert (= product3 o5))
(assert (and (= o6 (shift_right product3 8)) (= o6 (bvudiv product3 (ite (< 8 65536) (bvshl ((_ int2bv 16) 1) ((_ int2bv 16) 8)) ((_ int2bv 16) 0))))))
(assert (= result4 (mk_t__ref1 carry2)))
(assert (= carry3 o6))
(assert (= result5 (mk_t__ref1 temporary_digit2)))
(assert (= temporary_digit3 (bvand product3 ((_ int2bv 16) 255))))
(assert (and (= o7 (+ j divisor_index2)) (in_range1 (+ j divisor_index2))))
(assert (= temp___1267 (- o7 1)))
(assert (and (<= (to_rep2 (first2 (rt1 (rec__very_longs__very_long__long_digits1 u__split_fields3)))) temp___1267) (<= temp___1267 (to_rep2 (last3 (rt1 (rec__very_longs__very_long__long_digits1 u__split_fields3)))))))
(assert (= o8 temp___1267))
(assert (= o9 (select (elts1 (rec__very_longs__very_long__long_digits1 u__split_fields3)) o8)))
(assert (= o10 (to_rep o9)))
(assert (= o11 ((_ zero_extend 8) o10)))
(assert (= result6 (ite (bvuge o11 (bvadd temporary_digit3 current_borrow2)) true false)))
(assert (=> (= result6 true) (= result7 (mk_t__ref1 future_borrow2))))
(assert (=> (= result6 true) (= future_borrow3 ((_ int2bv 16) 0))))
(assert (=> (not (= result6 true)) (= result8 (mk_t__ref1 future_borrow2))))
(assert (=> (not (= result6 true)) (= future_borrow4 ((_ int2bv 16) 1))))
(assert (=> (not (= result6 true)) (= future_borrow3 future_borrow4)))
(assert (and (= o13 (+ j divisor_index2)) (in_range1 (+ j divisor_index2))))
(assert (= temp___1269 (- o13 1)))
(assert (and (<= (to_rep2 (first2 (rt1 (rec__very_longs__very_long__long_digits1 u__split_fields3)))) temp___1269) (<= temp___1269 (to_rep2 (last3 (rt1 (rec__very_longs__very_long__long_digits1 u__split_fields3)))))))
(assert (= o14 temp___1269))
(assert (= o15 (select (elts1 (rec__very_longs__very_long__long_digits1 u__split_fields3)) o14)))
(assert (= o16 (to_rep o15)))
(assert (= o17 ((_ zero_extend 8) o16)))
(assert (= o18 (bvsub o17 temporary_digit3)))
(assert (= o19 (bvsub o18 current_borrow2)))
(assert (= o20 (bvand o19 ((_ int2bv 16) 255))))
(assert (= o21 o20))
(assert (= o22 ((_ extract 7 0) o21)))
(assert (= (to_rep o23) o22))
(assert (and (= o12 (+ j divisor_index2)) (in_range1 (+ j divisor_index2))))
(assert (= temp___1271 (- o12 1)))
(assert (not (<= (to_rep2 (first2 (rt1 (rec__very_longs__very_long__long_digits1 u__split_fields3)))) temp___1271)))
(check-sat)
(exit)
