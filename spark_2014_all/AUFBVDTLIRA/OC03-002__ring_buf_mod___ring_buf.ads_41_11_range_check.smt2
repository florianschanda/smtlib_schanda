(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 16) Int) Bool)
(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort ar_index 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 16))
(declare-fun user_eq (ar_index ar_index) Bool)
(declare-const dummy ar_index)
(declare-datatypes () ((ar_index__ref (mk_ar_index__ref (ar_index__content ar_index)))))
(define-fun ar_index__ref___projection ((a ar_index__ref)) ar_index (ar_index__content a))
(declare-fun to_rep (ar_index) (_ BitVec 16))
(declare-fun of_rep ((_ BitVec 16)) ar_index)
(assert (forall ((x ar_index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 16))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int2 ((x ar_index)) Int (bv2nat (to_rep x)))
(assert (forall ((x ar_index)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort length_type 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 65536)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (length_type length_type) Bool)
(declare-const dummy1 length_type)
(declare-datatypes () ((length_type__ref (mk_length_type__ref (length_type__content length_type)))))
(define-fun length_type__ref___projection ((a length_type__ref)) length_type (length_type__content a))
(declare-fun to_rep1 (length_type) Int)
(declare-fun of_rep1 (Int) length_type)
(assert (forall ((x length_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x length_type)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 16) integer))))))
(declare-fun slide ((Array (_ BitVec 16) integer) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) integer))
(assert (forall ((a (Array (_ BitVec 16) integer))) (forall ((first (_ BitVec 16))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 16) integer))) (forall ((old_first (_ BitVec 16))) (forall ((new_first (_ BitVec 16))) (forall ((i (_ BitVec 16))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 16) integer)) (a__first (_ BitVec 16)) (a__last (_ BitVec 16)) (b (Array (_ BitVec 16) integer)) (b__first (_ BitVec 16)) (b__last (_ BitVec 16))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 16))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 16) integer)) (b (Array (_ BitVec 16) integer))) (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16)) (b__first (_ BitVec 16)) (b__last (_ BitVec 16))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 16))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-fun concat1 ((Array (_ BitVec 16) integer) (_ BitVec 16) (_ BitVec 16) (Array (_ BitVec 16) integer) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) integer))
(assert (forall ((a (Array (_ BitVec 16) integer)) (b (Array (_ BitVec 16) integer))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (forall ((i (_ BitVec 16))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (integer (_ BitVec 16) (Array (_ BitVec 16) integer) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) integer))
(assert (forall ((a integer)) (forall ((b (Array (_ BitVec 16) integer))) (forall ((a_first (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i (_ BitVec 16))) (! (=> (bvugt i a_first) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (bvadd (bvsub i a_first) (bvsub b_first #x0001))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array (_ BitVec 16) integer) (_ BitVec 16) (_ BitVec 16) integer) (Array (_ BitVec 16) integer))
(assert (forall ((a (Array (_ BitVec 16) integer))) (forall ((b integer)) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))) (! (and (= (select (concat_singleton_right a a_first a_last b) (bvadd a_last #x0001)) b) (forall ((i (_ BitVec 16))) (! (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (integer (_ BitVec 16) integer) (Array (_ BitVec 16) integer))
(assert (forall ((a integer) (b integer)) (forall ((a_first (_ BitVec 16))) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (bvadd a_first #x0001)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (integer (_ BitVec 16)) (Array (_ BitVec 16) integer))
(assert (forall ((v integer)) (forall ((i (_ BitVec 16))) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-sort t 0)
(declare-fun first (t) ar_index)
(declare-fun last (t) ar_index)
(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)
(assert (forall ((f (_ BitVec 16)) (l (_ BitVec 16))) (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 16)) (range_last (_ BitVec 16)) (low (_ BitVec 16)) (high (_ BitVec 16))) Bool true)
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 16) integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) integer) (elts a))
(define-fun of_array ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16)) (l (_ BitVec 16))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 16) integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 16) integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 16) integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((model____ref (mk_model____ref (model____content us_t)))))
(define-fun model____ref___projection ((a model____ref)) us_t (model____content a))
(declare-const dummy4 (Array (_ BitVec 16) integer))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array (_ BitVec 16) integer)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array (_ BitVec 16) integer) (Array (_ BitVec 16) integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ring_buf__ring_buffer__data (Array (_ BitVec 16) integer)) (rec__ring_buf__ring_buffer__first ar_index) (rec__ring_buf__ring_buffer__length length_type)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields)) (Array (_ BitVec 16) integer) (rec__ring_buf__ring_buffer__data a))
(define-fun us_split_fields_First__projection ((a us_split_fields)) ar_index (rec__ring_buf__ring_buffer__first a))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) length_type (rec__ring_buf__ring_buffer__length a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (bool_eq (rec__ring_buf__ring_buffer__data (us_split_fields1 a)) #x0000 #xFFFF (rec__ring_buf__ring_buffer__data (us_split_fields1 b)) #x0000 #xFFFF) true) (= (to_rep (rec__ring_buf__ring_buffer__first (us_split_fields1 a))) (to_rep (rec__ring_buf__ring_buffer__first (us_split_fields1 b))))) (= (to_rep1 (rec__ring_buf__ring_buffer__length (us_split_fields1 a))) (to_rep1 (rec__ring_buf__ring_buffer__length (us_split_fields1 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const ring_buf__ring_buffer__data__first__bit Int)
(declare-const ring_buf__ring_buffer__data__last__bit Int)
(declare-const ring_buf__ring_buffer__data__position Int)
(assert (<= 0 ring_buf__ring_buffer__data__first__bit))
(assert (< ring_buf__ring_buffer__data__first__bit ring_buf__ring_buffer__data__last__bit))
(assert (<= 0 ring_buf__ring_buffer__data__position))
(declare-const ring_buf__ring_buffer__first__first__bit Int)
(declare-const ring_buf__ring_buffer__first__last__bit Int)
(declare-const ring_buf__ring_buffer__first__position Int)
(assert (<= 0 ring_buf__ring_buffer__first__first__bit))
(assert (< ring_buf__ring_buffer__first__first__bit ring_buf__ring_buffer__first__last__bit))
(assert (<= 0 ring_buf__ring_buffer__first__position))
(declare-const ring_buf__ring_buffer__length__first__bit Int)
(declare-const ring_buf__ring_buffer__length__last__bit Int)
(declare-const ring_buf__ring_buffer__length__position Int)
(assert (<= 0 ring_buf__ring_buffer__length__first__bit))
(assert (< ring_buf__ring_buffer__length__first__bit ring_buf__ring_buffer__length__last__bit))
(assert (<= 0 ring_buf__ring_buffer__length__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((ring_buffer__ref (mk_ring_buffer__ref (ring_buffer__content us_rep)))))
(define-fun ring_buffer__ref___projection ((a ring_buffer__ref)) us_rep (ring_buffer__content a))
(declare-const r us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(define-fun dynamic_property1 ((first_int (_ BitVec 16)) (last_int (_ BitVec 16)) (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))
(declare-fun user_eq6 (ar_index ar_index) Bool)
(declare-const dummy6 ar_index)
(declare-datatypes () ((t21s__ref (mk_t21s__ref (t21s__content ar_index)))))
(define-fun t21s__ref___projection ((a t21s__ref)) ar_index (t21s__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) ar_index)
(declare-fun last2 (t1) ar_index)
(declare-fun mk1 ((_ BitVec 16) (_ BitVec 16)) t1)
(assert (forall ((f (_ BitVec 16)) (l (_ BitVec 16))) (! (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first (_ BitVec 16)) (range_last (_ BitVec 16)) (low (_ BitVec 16)) (high (_ BitVec 16))) Bool (=> (bvule low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array (_ BitVec 16) integer)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 16) integer) (elts1 a))
(define-fun of_array1 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16)) (l (_ BitVec 16))) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) (_ BitVec 16) (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) (_ BitVec 16) (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a)) (+ (- (bv2nat (last3 a)) (bv2nat (first3 a))) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array (_ BitVec 16) integer)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq7 (us_t1 us_t1) Bool)
(declare-const dummy7 us_t1)
(declare-datatypes () ((t22s__ref (mk_t22s__ref (t22s__content us_t1)))))
(define-fun t22s__ref___projection ((a t22s__ref)) us_t1 (t22s__content a))
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 16))
(define-fun dynamic_property3 ((first_int (_ BitVec 16)) (last_int (_ BitVec 16)) (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))
(declare-fun user_eq8 (ar_index ar_index) Bool)
(declare-const dummy8 ar_index)
(declare-datatypes () ((t23s__ref (mk_t23s__ref (t23s__content ar_index)))))
(define-fun t23s__ref___projection ((a t23s__ref)) ar_index (t23s__content a))
(declare-sort t2 0)
(declare-fun first4 (t2) ar_index)
(declare-fun last4 (t2) ar_index)
(declare-fun mk2 ((_ BitVec 16) (_ BitVec 16)) t2)
(assert (forall ((f (_ BitVec 16)) (l (_ BitVec 16))) (! (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)) :pattern ((mk2 f l)))))
(define-fun dynamic_property4 ((range_first (_ BitVec 16)) (range_last (_ BitVec 16)) (low (_ BitVec 16)) (high (_ BitVec 16))) Bool (=> (bvule low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array (_ BitVec 16) integer)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array (_ BitVec 16) integer) (elts2 a))
(define-fun of_array2 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16)) (l (_ BitVec 16))) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) (_ BitVec 16) (to_rep (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) (_ BitVec 16) (to_rep (last4 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (bvule (first5 a) (last5 a)) (+ (- (bv2nat (last5 a)) (bv2nat (first5 a))) 1) 0))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array (_ BitVec 16) integer)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment4 a))))
(define-fun bool_eq4 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x))) (to_rep (last4 (rt2 x))) (elts2 y) (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))
(declare-fun user_eq9 (us_t2 us_t2) Bool)
(declare-const dummy9 us_t2)
(declare-datatypes () ((t24s__ref (mk_t24s__ref (t24s__content us_t2)))))
(define-fun t24s__ref___projection ((a t24s__ref)) us_t2 (t24s__content a))
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 16))
(define-fun dynamic_property5 ((first_int (_ BitVec 16)) (last_int (_ BitVec 16)) (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))
(declare-fun user_eq10 (ar_index ar_index) Bool)
(declare-const dummy10 ar_index)
(declare-datatypes () ((t25s__ref (mk_t25s__ref (t25s__content ar_index)))))
(define-fun t25s__ref___projection ((a t25s__ref)) ar_index (t25s__content a))
(declare-sort t3 0)
(declare-fun first6 (t3) ar_index)
(declare-fun last6 (t3) ar_index)
(declare-fun mk3 ((_ BitVec 16) (_ BitVec 16)) t3)
(assert (forall ((f (_ BitVec 16)) (l (_ BitVec 16))) (! (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last6 (mk3 f l))) l)) :pattern ((mk3 f l)))))
(define-fun dynamic_property6 ((range_first (_ BitVec 16)) (range_last (_ BitVec 16)) (low (_ BitVec 16)) (high (_ BitVec 16))) Bool (=> (bvule low high) (and (dynamic_property5 range_first range_last low) (dynamic_property5 range_first range_last high))))
(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array (_ BitVec 16) integer)) (rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array (_ BitVec 16) integer) (elts3 a))
(define-fun of_array3 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16)) (l (_ BitVec 16))) us_t3 (mk___t3 a (mk3 f l)))
(define-fun first7 ((a us_t3)) (_ BitVec 16) (to_rep (first6 (rt3 a))))
(define-fun last7 ((a us_t3)) (_ BitVec 16) (to_rep (last6 (rt3 a))))
(define-fun length3 ((a us_t3)) Int (ite (bvule (first7 a) (last7 a)) (+ (- (bv2nat (last7 a)) (bv2nat (first7 a))) 1) 0))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__component__size4 Int)
(declare-fun object__component__size4 ((Array (_ BitVec 16) integer)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array (_ BitVec 16) integer)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size4))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__component__size4 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment5 a))))
(define-fun bool_eq5 ((x us_t3) (y us_t3)) Bool (bool_eq (elts3 x) (to_rep (first6 (rt3 x))) (to_rep (last6 (rt3 x))) (elts3 y) (to_rep (first6 (rt3 y))) (to_rep (last6 (rt3 y)))))
(declare-fun user_eq11 (us_t3 us_t3) Bool)
(declare-const dummy11 us_t3)
(declare-datatypes () ((t26s__ref (mk_t26s__ref (t26s__content us_t3)))))
(define-fun t26s__ref___projection ((a t26s__ref)) us_t3 (t26s__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_159 (_ BitVec 16)) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 65536)) (in_range temp___expr_166)))
(define-fun dynamic_invariant3 ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property #x0000 #xFFFF (first1 temp___expr_173) (last1 temp___expr_173))))
(declare-const o Int)
(declare-const o1 (_ BitVec 16))
(declare-const o2 (_ BitVec 16))
(declare-const o3 (_ BitVec 16))
(declare-const temp___269 (_ BitVec 16))
(declare-const o4 (Array (_ BitVec 16) integer))
(declare-const temp___272 (Array (_ BitVec 16) integer))
(declare-const temp___2721 t2)
(assert (< 65535 (- (+ (bv2nat (to_rep (rec__ring_buf__ring_buffer__first (us_split_fields1 r)))) (to_rep1 (rec__ring_buf__ring_buffer__length (us_split_fields1 r)))) 1)))
(assert (and (= o (to_rep1 (rec__ring_buf__ring_buffer__length (us_split_fields1 r)))) (uint_in_range (to_rep1 (rec__ring_buf__ring_buffer__length (us_split_fields1 r))))))
(assert (= o1 ((_ int2bv 16) o)))
(assert (= o2 (bvadd #x0000 o1)))
(assert (= o3 (bvsub o2 (bvsub #xFFFF (to_rep (rec__ring_buf__ring_buffer__first (us_split_fields1 r)))))))
(assert (= temp___269 (bvsub o3 #x0001)))
(assert (=> (bvule #x0000 temp___269) (and (and (bvule #x0000 #x0000) (bvule #x0000 #xFFFF)) (and (bvule #x0000 temp___269) (bvule temp___269 #xFFFF)))))
(assert (= o4 (rec__ring_buf__ring_buffer__data (us_split_fields1 r))))
(assert (= o4 temp___272))
(assert (= (mk2 #x0000 temp___269) temp___2721))
(assert (bvule (to_rep (rec__ring_buf__ring_buffer__first (us_split_fields1 r))) #xFFFF))
(assert (not (bvule #x0000 (to_rep (rec__ring_buf__ring_buffer__first (us_split_fields1 r))))))
(check-sat)
(exit)
