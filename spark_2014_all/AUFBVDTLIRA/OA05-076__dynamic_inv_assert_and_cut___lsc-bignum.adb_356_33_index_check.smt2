(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort word32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (word32 word32) Bool)
(declare-const dummy2 word32)
(declare-datatypes () ((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content a))
(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32)) (temp___is_init_214 Bool) (temp___skip_constant_215 Bool) (temp___do_toplevel_216 Bool)) Bool true)
(declare-fun to_rep1 (word32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) word32)
(assert (forall ((x word32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x word32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x word32)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))
(assert (forall ((a (Array Int word32))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int word32))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int Int) (Array Int word32))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (word32 Int) (Array Int word32))
(assert (forall ((v word32)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int) (b (Array Int word32)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep1 (select a temp___idx_134)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep1 (select a temp___idx_134)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int Int) Int)
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq1 (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content a))
(declare-fun oadd (us_rep us_rep) us_rep)
(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun osubtract (us_rep us_rep) us_rep)
(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun omultiply (us_rep us_rep) us_rep)
(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun omod (us_rep us_rep) us_rep)
(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun oexpon (us_rep Int) us_rep)
(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)
(assert true)
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun olt (us_rep us_rep) Bool)
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun from_word32 ((_ BitVec 32)) us_rep)
(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)
(assert true)
(declare-fun base (tuple0) us_rep)
(declare-fun base__function_guard (us_rep tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern ((base us_void_param)))))
(declare-sort big_int_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (big_int_range big_int_range) Bool)
(declare-const dummy4 big_int_range)
(declare-datatypes () ((big_int_range__ref (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range (big_int_range__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int word32)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))
(define-fun of_array ((a (Array Int word32)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int word32)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int word32)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int word32)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content a))
(define-fun dynamic_invariant2 ((temp___expr_289 us_t) (temp___is_init_286 Bool) (temp___skip_constant_287 Bool) (temp___do_toplevel_288 Bool)) Bool (=> (not (= temp___skip_constant_287 true)) (dynamic_property 0 2147483646 (first1 temp___expr_289) (last1 temp___expr_289))))
(declare-fun num_of_big_int (us_t Int Int) us_rep)
(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)
(assert true)
(declare-fun inverse (us_rep us_rep) us_rep)
(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun num_of_boolean (Bool) us_rep)
(declare-fun num_of_boolean__function_guard (us_rep Bool) Bool)
(declare-fun less (us_t Int Int us_t Int) Bool)
(declare-fun less__function_guard (Bool us_t Int Int us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (forall ((a_first Int) (a_last Int) (b_first Int)) (! (=> (and (and (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant a_first true true true)) (dynamic_invariant a_last true true true)) (dynamic_invariant2 b true true true)) (dynamic_invariant b_first true true true)) (and (and (and (and (and (<= (first1 a) a_first) (<= a_first (last1 a))) (and (<= (first1 a) a_last) (<= a_last (last1 a)))) (and (<= (first1 b) b_first) (<= b_first (last1 b)))) (and (<= (first1 b) (+ b_first (- a_last a_first))) (<= (+ b_first (- a_last a_first)) (last1 b)))) (<= a_first a_last))) (= (= (less a a_first a_last b b_first) true) (= (olt (num_of_big_int a a_first (+ (- a_last a_first) 1)) (num_of_big_int b b_first (+ (- a_last a_first) 1))) true))) :pattern ((less a a_first a_last b b_first))))))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const a_last Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const b_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c us_t)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const c_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const m us_t)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const m_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const m_inv (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-fun word_of_boolean (Bool) (_ BitVec 32))
(declare-fun word_of_boolean__function_guard ((_ BitVec 32) Bool) Bool)
(assert (forall ((b1 Bool)) (! (let ((result (word_of_boolean b1))) (and (= (oeq (from_word32 result) (num_of_boolean b1)) true) (dynamic_invariant1 result true false true))) :pattern ((word_of_boolean b1)))))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t62b__ref (mk_t62b__ref (t62b__content integer)))))
(define-fun t62b__ref___projection ((a t62b__ref)) integer (t62b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant4 ((temp___expr_283 Int) (temp___is_init_280 Bool) (temp___skip_constant_281 Bool) (temp___do_toplevel_282 Bool)) Bool (=> (or (= temp___is_init_280 true) (<= 0 2147483646)) (in_range3 temp___expr_283)))
(assert true)
(declare-const a_msw (_ BitVec 32))
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___603 Int)
(declare-const o2 Int)
(declare-const o3 word32)
(declare-const o4 (_ BitVec 32))
(declare-const o5 Int)
(declare-const o6 word32)
(declare-const o7 Int)
(declare-const o8 word32)
(declare-const o9 (_ BitVec 32))
(declare-const o10 (_ BitVec 32))
(declare-const o11 (_ BitVec 32))
(declare-const o12 (_ BitVec 32))
(declare-const o13 (_ BitVec 32))
(declare-const o14 Int)
(declare-const o15 word32)
(declare-const o16 (_ BitVec 32))
(declare-const lsc__bignum__single_add_mult_mult__a (_ BitVec 32))
(declare-const o17 Int)
(declare-const o18 word32)
(declare-const o19 (_ BitVec 32))
(declare-const a (Array Int word32))
(declare-const result (_ BitVec 32))
(declare-const a_msw1 (_ BitVec 32))
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const a1 (Array Int word32))
(declare-const carry1 (_ BitVec 32))
(declare-const carry2 (_ BitVec 32))
(declare-const a_msw2 (_ BitVec 32))
(declare-const bi (_ BitVec 32))
(declare-const u (_ BitVec 32))
(declare-const i2 Int)
(declare-const result2 (_ BitVec 32))
(declare-const carry11 (_ BitVec 32))
(declare-const result3 (_ BitVec 32))
(declare-const carry21 (_ BitVec 32))
(declare-const result4 (_ BitVec 32))
(declare-const bi1 (_ BitVec 32))
(declare-const result5 (_ BitVec 32))
(declare-const u1 (_ BitVec 32))
(assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))
(assert (in_range2 a_first))
(assert (in_range2 a_last))
(assert (dynamic_invariant2 b true false true))
(assert (in_range2 b_first))
(assert (dynamic_invariant2 c true false true))
(assert (in_range2 c_first))
(assert (dynamic_invariant2 m true false true))
(assert (in_range2 m_first))
(assert (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))) (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))) (and (< a_first a_last) (and (and (<= (to_rep (first (rt b))) b_first) (<= b_first (to_rep (last (rt b))))) (and (and (<= (to_rep (first (rt b))) (+ b_first (- a_last a_first))) (<= (+ b_first (- a_last a_first)) (to_rep (last (rt b))))) (and (and (<= (to_rep (first (rt c))) c_first) (<= c_first (to_rep (last (rt c))))) (and (and (<= (to_rep (first (rt c))) (+ c_first (- a_last a_first))) (<= (+ c_first (- a_last a_first)) (to_rep (last (rt c))))) (and (and (<= (to_rep (first (rt m))) m_first) (<= m_first (to_rep (last (rt m))))) (and (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first))) (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m))))) (and (= (olt (num_of_big_int c c_first (+ (- a_last a_first) 1)) (num_of_big_int m m_first (+ (- a_last a_first) 1))) true) (and (= (olt (from_word32 ((_ int2bv 32) 1)) (num_of_big_int m m_first (+ (- a_last a_first) 1))) true) (= (bvadd ((_ int2bv 32) 1) (bvmul m_inv (to_rep1 (select (elts m) m_first)))) ((_ int2bv 32) 0))))))))))))))
(assert (forall ((k Int)) (=> (and (<= a_first k) (<= k a_last)) (= (to_rep1 (select a k)) ((_ int2bv 32) 0)))))
(assert (= (mk_t__ref result) (mk_t__ref a_msw)))
(assert (= a_msw1 ((_ int2bv 32) 0)))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 a_first))
(assert (<= a_first i1))
(assert (<= i1 a_last))
(assert (and (= (oeq (omod (oadd (num_of_big_int (mk___t a1 (mk (to_rep a__first) (to_rep a__last))) a_first (+ (- a_last a_first) 1)) (omultiply (oexpon (base Tuple0) (+ (- a_last a_first) 1)) (from_word32 a_msw2))) (num_of_big_int m m_first (+ (- a_last a_first) 1))) (omod (omultiply (omultiply (num_of_big_int b b_first (- i2 a_first)) (num_of_big_int c c_first (+ (- a_last a_first) 1))) (oexpon (inverse (num_of_big_int m m_first (+ (- a_last a_first) 1)) (base Tuple0)) (- i2 a_first))) (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true) (= (olt (oadd (num_of_big_int (mk___t a1 (mk (to_rep a__first) (to_rep a__last))) a_first (+ (- a_last a_first) 1)) (omultiply (oexpon (base Tuple0) (+ (- a_last a_first) 1)) (from_word32 a_msw2))) (osubtract (omultiply (from_word32 ((_ int2bv 32) 2)) (num_of_big_int m m_first (+ (- a_last a_first) 1))) (from_word32 ((_ int2bv 32) 1)))) true)))
(assert (and (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2)) (and (<= a_first i2) (<= i2 a_last))))
(assert (= carry1 result2))
(assert (= carry11 ((_ int2bv 32) 0)))
(assert (= carry2 result3))
(assert (= carry21 ((_ int2bv 32) 0)))
(assert (and (= o (- i2 a_first)) (in_range1 (- i2 a_first))))
(assert (= o1 (+ b_first o)))
(assert (and (= temp___603 o1) (in_range1 o1)))
(assert (and (<= (to_rep (first (rt b))) temp___603) (<= temp___603 (to_rep (last (rt b))))))
(assert (= o2 temp___603))
(assert (= o3 (select (elts b) o2)))
(assert (= o4 (to_rep1 o3)))
(assert (= bi result4))
(assert (= bi1 o4))
(assert (and (<= (to_rep (first (rt c))) c_first) (<= c_first (to_rep (last (rt c))))))
(assert (= o7 c_first))
(assert (= o8 (select (elts c) o7)))
(assert (= o9 (to_rep1 o8)))
(assert (= o10 (bvmul bi1 o9)))
(assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))
(assert (= o5 a_first))
(assert (= o6 (select a1 o5)))
(assert (= o11 (to_rep1 o6)))
(assert (= o12 (bvadd o11 o10)))
(assert (= o13 (bvmul o12 m_inv)))
(assert (= u result5))
(assert (= u1 o13))
(assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))
(assert (= o14 a_first))
(assert (= o15 (select a1 o14)))
(assert (= o16 (to_rep1 o15)))
(assert (= o16 lsc__bignum__single_add_mult_mult__a))
(assert (and (<= (to_rep (first (rt m))) m_first) (<= m_first (to_rep (last (rt m))))))
(assert (= o17 m_first))
(assert (= o18 (select (elts m) o17)))
(assert (= o19 (to_rep1 o18)))
(assert (not (<= (to_rep (first (rt c))) c_first)))
(check-sat)
(exit)
