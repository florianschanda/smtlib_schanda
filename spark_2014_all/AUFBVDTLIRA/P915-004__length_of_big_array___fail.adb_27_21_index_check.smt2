(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort my_index 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (my_index my_index) Bool)
(declare-const dummy4 my_index)
(declare-datatypes () ((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content a))
(declare-fun to_rep2 (my_index) (_ BitVec 64))
(declare-fun of_rep2 ((_ BitVec 64)) my_index)
(assert (forall ((x my_index)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int2 ((x my_index)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x my_index)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 64) Bool))))))
(declare-fun slide1 ((Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) Bool))
(assert (forall ((a (Array (_ BitVec 64) Bool))) (forall ((first2 (_ BitVec 64))) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array (_ BitVec 64) Bool))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array (_ BitVec 64) Bool)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) Bool)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_155 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (= (select a temp___idx_155) (select b (bvadd (bvsub b__first a__first) temp___idx_155)))))) true false))
(assert (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_155 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (= (select a temp___idx_155) (select b (bvadd (bvsub b__first a__first) temp___idx_155))))))))))
(declare-sort t1 0)
(declare-fun first2 (t1) my_index)
(declare-fun last2 (t1) my_index)
(declare-fun mk1 ((_ BitVec 64) (_ BitVec 64)) t1)
(assert (forall ((f (_ BitVec 64)) (l (_ BitVec 64))) (! (and (= (to_rep2 (first2 (mk1 f l))) f) (= (to_rep2 (last2 (mk1 f l))) l)) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool true)
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array (_ BitVec 64) Bool)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 64) Bool) (elts1 a))
(define-fun of_array1 ((a (Array (_ BitVec 64) Bool)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) (_ BitVec 64) (to_rep2 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) (_ BitVec 64) (to_rep2 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a)) (+ (- (bv2nat (last3 a)) (bv2nat (first3 a))) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array (_ BitVec 64) Bool)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array (_ BitVec 64) Bool)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array (_ BitVec 64) Bool)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep2 (first2 (rt1 x))) (to_rep2 (last2 (rt1 x))) (elts1 y) (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))
(declare-fun user_eq5 (us_t1 us_t1) Bool)
(declare-const dummy5 us_t1)
(declare-datatypes () ((a__ref (mk_a__ref (a__content us_t1)))))
(define-fun a__ref___projection ((a a__ref)) us_t1 (a__content a))
(declare-fun create ((_ BitVec 64)) us_t1)
(declare-fun create__function_guard (us_t1 (_ BitVec 64)) Bool)
(define-fun dynamic_invariant ((temp___expr_338 us_t1) (temp___is_init_334 Bool) (temp___skip_constant_335 Bool) (temp___do_toplevel_336 Bool) (temp___do_typ_inv_337 Bool)) Bool (=> (not (= temp___skip_constant_335 true)) (dynamic_property1 #x0000000000000000 #xFFFFFFFFFFFFFFFF (first3 temp___expr_338) (last3 temp___expr_338))))
(declare-const c us_t1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun temp___String_Literal_721 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (= (to_rep (select (temp___String_Literal_721 us_void_param) 1)) 63) (= (to_rep (select (temp___String_Literal_721 us_void_param) 2)) 63)) (= (to_rep (select (temp___String_Literal_721 us_void_param) 3)) 63)) :pattern ((temp___String_Literal_721 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_331 (_ BitVec 64)) (temp___is_init_327 Bool) (temp___skip_constant_328 Bool) (temp___do_toplevel_329 Bool) (temp___do_typ_inv_330 Bool)) Bool true)
(assert (forall ((last4 (_ BitVec 64))) (! (=> (dynamic_invariant5 last4 true true true true) (let ((result (create last4))) (and (and (= (last3 result) last4) (= (first3 result) #x0000000000000000)) (dynamic_invariant result true false true true)))) :pattern ((create last4)))))
(assert (= c (create #xFFFFFFFFFFFFFFFF)))
(declare-const o (_ BitVec 64))
(declare-const o1 Bool)
(assert (dynamic_invariant c true false true true))
(assert (= (create #xFFFFFFFFFFFFFFFF) c))
(assert (and (= (to_rep2 (first2 (rt1 c))) #x0000000000000000) (= (to_rep2 (last2 (rt1 c))) #xFFFFFFFFFFFFFFFF)))
(assert (and (bvule (to_rep2 (first2 (rt1 c))) #x0000000000000000) (bvule #x0000000000000000 (to_rep2 (last2 (rt1 c))))))
(assert (= o #x0000000000000000))
(assert (= o1 (select (elts1 c) o)))
(assert (not (bvule #xFFFFFFFFFFFFFFFF (to_rep2 (last2 (rt1 c))))))
(check-sat)
(exit)
