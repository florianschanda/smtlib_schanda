(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq (byte byte) Bool)
(declare-const dummy byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep (byte) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x byte)) Int (bv2nat (to_rep x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-fun nth2 ((_ BitVec 16) Int) Bool)
(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right3 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left3 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int4 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv2 x ((_ int2bv 16) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 16))))))
(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min2 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort u16 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq1 (u16 u16) Bool)
(declare-const dummy1 u16)
(declare-datatypes () ((u16__ref (mk_u16__ref (u16__content u16)))))
(define-fun u16__ref___projection ((a u16__ref)) u16 (u16__content a))
(declare-fun nth3 ((_ BitVec 32) Int) Bool)
(declare-fun lsr3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right4 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left4 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int5 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl3 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left4 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right4 v (bv2nat n)))))
(declare-fun nth_bv3 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth3 x (bv2nat i)) (nth_bv3 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv3 x ((_ int2bv 32) i)) (nth3 x i)))))
(declare-fun eq_sub_bv3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub3 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 32))))))
(declare-fun power3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min3 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max3 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort u32 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (u32 u32) Bool)
(declare-const dummy2 u32)
(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq3 (u64 u64) Bool)
(declare-const dummy3 u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant ((temp___expr_352 (_ BitVec 64)) (temp___is_init_348 Bool) (temp___skip_constant_349 Bool) (temp___do_toplevel_350 Bool) (temp___do_typ_inv_351 Bool)) Bool true)
(declare-fun to_rep1 (u64) (_ BitVec 64))
(declare-fun of_rep1 ((_ BitVec 64)) u64)
(assert (forall ((x u64)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int6 ((x u64)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x u64)) (! (uint_in_range1 (to_int6 x)) :pattern ((to_int6 x)))))
(declare-sort i9 0)
(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))
(define-fun in_range1 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000000 x) (bvule x #x0000000000000008)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (i9 i9) Bool)
(declare-const dummy4 i9)
(declare-datatypes () ((i9__ref (mk_i9__ref (i9__content i9)))))
(define-fun i9__ref___projection ((a i9__ref)) i9 (i9__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) byte))))))
(declare-fun slide ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) byte))
(assert (forall ((a (Array (_ BitVec 64) byte))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) byte))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) byte)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-sort unsigned_64 0)
(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))
(declare-fun user_eq5 (unsigned_64 unsigned_64) Bool)
(declare-const dummy5 unsigned_64)
(declare-datatypes () ((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 (unsigned_64__content a))
(declare-fun to_rep2 (unsigned_64) (_ BitVec 64))
(declare-fun of_rep2 ((_ BitVec 64)) unsigned_64)
(assert (forall ((x unsigned_64)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int7 ((x unsigned_64)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x unsigned_64)) (! (uint_in_range1 (to_int7 x)) :pattern ((to_int7 x)))))
(declare-sort t 0)
(declare-fun first (t) unsigned_64)
(declare-fun last (t) unsigned_64)
(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)
(assert (forall ((f (_ BitVec 64)) (l (_ BitVec 64))) (! (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool true)
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 64) byte)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte) (elts a))
(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 64) byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 64) byte)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 64) byte)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq6 (us_t us_t) Bool)
(declare-const dummy6 us_t)
(declare-datatypes () ((byte_seq__ref (mk_byte_seq__ref (byte_seq__content us_t)))))
(define-fun byte_seq__ref___projection ((a byte_seq__ref)) us_t (byte_seq__content a))
(define-fun dynamic_invariant1 ((temp___expr_422 us_t) (temp___is_init_418 Bool) (temp___skip_constant_419 Bool) (temp___do_toplevel_420 Bool) (temp___do_typ_inv_421 Bool)) Bool (and (=> (not (= temp___skip_constant_419 true)) (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFF (first1 temp___expr_422) (last1 temp___expr_422))) (=> (= temp___do_toplevel_420 true) (=> (= temp___is_init_418 true) (bvult (last1 temp___expr_422) #xFFFFFFFFFFFFFFFF)))))
(define-fun dynamic_predicate ((temp___425 us_t)) Bool (bvult (last1 temp___425) #xFFFFFFFFFFFFFFFF))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 64) u64))))))
(declare-fun slide1 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) u64))
(assert (forall ((a (Array (_ BitVec 64) u64))) (forall ((first2 (_ BitVec 64))) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array (_ BitVec 64) u64))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_155 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (= (to_rep1 (select a temp___idx_155)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_155 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (= (to_rep1 (select a temp___idx_155)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_155)))))))))))
(declare-sort word_count_t 0)
(declare-const attr__ATTRIBUTE_MODULUS6 (_ BitVec 64))
(define-fun in_range2 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000000 x) (bvule x #x1FFFFFFFFFFFFFFF)))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 2305843009213693951)))
(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 64))
(declare-fun user_eq7 (word_count_t word_count_t) Bool)
(declare-const dummy7 word_count_t)
(declare-datatypes () ((word_count_t__ref (mk_word_count_t__ref (word_count_t__content word_count_t)))))
(define-fun word_count_t__ref___projection ((a word_count_t__ref)) word_count_t (word_count_t__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) unsigned_64)
(declare-fun last2 (t1) unsigned_64)
(declare-fun mk1 ((_ BitVec 64) (_ BitVec 64)) t1)
(assert (forall ((f (_ BitVec 64)) (l (_ BitVec 64))) (! (and (= (to_rep2 (first2 (mk1 f l))) f) (= (to_rep2 (last2 (mk1 f l))) l)) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool (=> (bvule low high) (and (in_range2 low) (in_range2 high))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array (_ BitVec 64) u64)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 64) u64) (elts1 a))
(define-fun of_array1 ((a (Array (_ BitVec 64) u64)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) (_ BitVec 64) (to_rep2 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) (_ BitVec 64) (to_rep2 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a)) (+ (- (bv2nat (last3 a)) (bv2nat (first3 a))) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array (_ BitVec 64) u64)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array (_ BitVec 64) u64)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array (_ BitVec 64) u64)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep2 (first2 (rt1 x))) (to_rep2 (last2 (rt1 x))) (elts1 y) (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((u64_seq__ref (mk_u64_seq__ref (u64_seq__content us_t1)))))
(define-fun u64_seq__ref___projection ((a u64_seq__ref)) us_t1 (u64_seq__content a))
(declare-sort hash_bit_length 0)
(declare-const attr__ATTRIBUTE_MODULUS7 (_ BitVec 64))
(define-fun in_range3 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000000 x) (bvule x #xFFFFFFFFFFFFFFF8)))
(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 18446744073709551608)))
(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 64))
(declare-fun user_eq9 (hash_bit_length hash_bit_length) Bool)
(declare-const dummy9 hash_bit_length)
(declare-datatypes () ((hash_bit_length__ref (mk_hash_bit_length__ref (hash_bit_length__content hash_bit_length)))))
(define-fun hash_bit_length__ref___projection ((a hash_bit_length__ref)) hash_bit_length (hash_bit_length__content a))
(declare-fun to_rep3 (hash_bit_length) (_ BitVec 64))
(declare-fun of_rep3 ((_ BitVec 64)) hash_bit_length)
(assert (forall ((x hash_bit_length)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x hash_bit_length)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x (_ BitVec 64))) (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int8 ((x hash_bit_length)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x hash_bit_length)) (! (in_range_int2 (to_int8 x)) :pattern ((to_int8 x)))))
(declare-sort initialized_hash_bit_length 0)
(declare-const attr__ATTRIBUTE_MODULUS8 (_ BitVec 64))
(define-fun in_range4 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000001 x) (bvule x #xFFFFFFFFFFFFFFF8)))
(define-fun in_range_int3 ((x Int)) Bool (and (<= 1 x) (<= x 18446744073709551608)))
(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 64))
(declare-fun user_eq10 (initialized_hash_bit_length initialized_hash_bit_length) Bool)
(declare-const dummy10 initialized_hash_bit_length)
(declare-datatypes () ((initialized_hash_bit_length__ref (mk_initialized_hash_bit_length__ref (initialized_hash_bit_length__content initialized_hash_bit_length)))))
(define-fun initialized_hash_bit_length__ref___projection ((a initialized_hash_bit_length__ref)) initialized_hash_bit_length (initialized_hash_bit_length__content a))
(declare-sort skein_512_block_bytes_count 0)
(declare-const attr__ATTRIBUTE_MODULUS9 (_ BitVec 64))
(define-fun in_range5 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000000 x) (bvule x #x0000000000000040)))
(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) (_ BitVec 64))
(declare-fun user_eq11 (skein_512_block_bytes_count skein_512_block_bytes_count) Bool)
(declare-const dummy11 skein_512_block_bytes_count)
(declare-datatypes () ((skein_512_block_bytes_count__ref (mk_skein_512_block_bytes_count__ref (skein_512_block_bytes_count__content skein_512_block_bytes_count)))))
(define-fun skein_512_block_bytes_count__ref___projection ((a skein_512_block_bytes_count__ref)) skein_512_block_bytes_count (skein_512_block_bytes_count__content a))
(declare-sort skein_512_block_bytes_index 0)
(declare-const attr__ATTRIBUTE_MODULUS10 (_ BitVec 64))
(define-fun in_range6 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000000 x) (bvule x #x000000000000003F)))
(define-fun in_range_int5 ((x Int)) Bool (and (<= 0 x) (<= x 63)))
(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 64))
(declare-fun user_eq12 (skein_512_block_bytes_index skein_512_block_bytes_index) Bool)
(declare-const dummy12 skein_512_block_bytes_index)
(declare-datatypes () ((skein_512_block_bytes_index__ref (mk_skein_512_block_bytes_index__ref (skein_512_block_bytes_index__content skein_512_block_bytes_index)))))
(define-fun skein_512_block_bytes_index__ref___projection ((a skein_512_block_bytes_index__ref)) skein_512_block_bytes_index (skein_512_block_bytes_index__content a))
(define-fun dynamic_invariant2 ((temp___expr_633 (Array (_ BitVec 64) byte)) (temp___is_init_629 Bool) (temp___skip_constant_630 Bool) (temp___do_toplevel_631 Bool) (temp___do_typ_inv_632 Bool)) Bool (=> (= temp___do_toplevel_631 true) (=> (= temp___is_init_629 true) (bvult (last1 (of_array temp___expr_633 #x0000000000000000 #x000000000000003F)) #xFFFFFFFFFFFFFFFF))))
(define-fun dynamic_predicate1 ((temp___641 (Array (_ BitVec 64) byte))) Bool (bvult (last1 (of_array temp___641 #x0000000000000000 #x000000000000003F)) #xFFFFFFFFFFFFFFFF))
(declare-const i25s (Array (_ BitVec 64) byte))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort positive_block_512_count_t 0)
(declare-const attr__ATTRIBUTE_MODULUS11 (_ BitVec 64))
(define-fun in_range7 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000001 x) (bvule x #x03FFFFFFFFFFFFFF)))
(define-fun in_range_int6 ((x Int)) Bool (and (<= 1 x) (<= x 288230376151711743)))
(declare-fun attr__ATTRIBUTE_IMAGE12 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) (_ BitVec 64))
(declare-fun user_eq13 (positive_block_512_count_t positive_block_512_count_t) Bool)
(declare-const dummy13 positive_block_512_count_t)
(declare-datatypes () ((positive_block_512_count_t__ref (mk_positive_block_512_count_t__ref (positive_block_512_count_t__content positive_block_512_count_t)))))
(define-fun positive_block_512_count_t__ref___projection ((a positive_block_512_count_t__ref)) positive_block_512_count_t (positive_block_512_count_t__content a))
(define-fun dynamic_invariant3 ((temp___expr_681 (_ BitVec 64)) (temp___is_init_677 Bool) (temp___skip_constant_678 Bool) (temp___do_toplevel_679 Bool) (temp___do_typ_inv_680 Bool)) Bool (=> (or (= temp___is_init_677 true) (bvule #x0000000000000001 #x03FFFFFFFFFFFFFF)) (in_range7 temp___expr_681)))
(declare-sort u7 0)
(define-fun in_range8 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x7F)))
(define-fun in_range_int7 ((x Int)) Bool (and (<= 0 x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE13 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) (_ BitVec 8))
(declare-fun user_eq14 (u7 u7) Bool)
(declare-const dummy14 u7)
(declare-datatypes () ((u7__ref (mk_u7__ref (u7__content u7)))))
(define-fun u7__ref___projection ((a u7__ref)) u7 (u7__content a))
(declare-sort u6 0)
(define-fun in_range9 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x3F)))
(define-fun in_range_int8 ((x Int)) Bool (and (<= 0 x) (<= x 63)))
(declare-fun attr__ATTRIBUTE_IMAGE14 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) (_ BitVec 8))
(declare-fun user_eq15 (u6 u6) Bool)
(declare-const dummy15 u6)
(declare-datatypes () ((u6__ref (mk_u6__ref (u6__content u6)))))
(define-fun u6__ref___projection ((a u6__ref)) u6 (u6__content a))
(declare-fun to_rep4 (u16) (_ BitVec 16))
(declare-fun of_rep4 ((_ BitVec 16)) u16)
(assert (forall ((x u16)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert true)
(assert (forall ((x (_ BitVec 16))) (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int9 ((x u16)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x u16)) (! (uint_in_range2 (to_int9 x)) :pattern ((to_int9 x)))))
(declare-fun to_rep5 (u32) (_ BitVec 32))
(declare-fun of_rep5 ((_ BitVec 32)) u32)
(assert (forall ((x u32)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))))))
(define-fun to_int10 ((x u32)) Int (bv2nat (to_rep5 x)))
(assert (forall ((x u32)) (! (uint_in_range3 (to_int10 x)) :pattern ((to_int10 x)))))
(declare-fun to_rep6 (u7) (_ BitVec 8))
(declare-fun of_rep6 ((_ BitVec 8)) u7)
(assert (forall ((x u7)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x u7)) (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x80))) (=> (in_range8 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6 (of_rep6 x))))))
(define-fun to_int11 ((x u7)) Int (bv2nat (to_rep6 x)))
(assert (forall ((x u7)) (! (in_range_int7 (to_int11 x)) :pattern ((to_int11 x)))))
(declare-fun to_rep7 (u6) (_ BitVec 8))
(declare-fun of_rep7 ((_ BitVec 8)) u6)
(assert (forall ((x u6)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)))))
(assert (forall ((x u6)) (! (in_range9 (to_rep7 x)) :pattern ((to_rep7 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x40))) (=> (in_range9 y) (= (to_rep7 (of_rep7 x)) y))) :pattern ((to_rep7 (of_rep7 x))))))
(define-fun to_int12 ((x u6)) Int (bv2nat (to_rep7 x)))
(assert (forall ((x u6)) (! (in_range_int8 (to_int12 x)) :pattern ((to_int12 x)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__skein__tweak_value__byte_count_lsb u64) (rec__skein__tweak_value__byte_count_msb u32) (rec__skein__tweak_value__reserved u16) (rec__skein__tweak_value__tree_level u7) (rec__skein__tweak_value__bit_pad Bool) (rec__skein__tweak_value__field_type u6) (rec__skein__tweak_value__first_block Bool) (rec__skein__tweak_value__final_block Bool)))))
(define-fun us_split_fields_Byte_Count_LSB__projection ((a us_split_fields)) u64 (rec__skein__tweak_value__byte_count_lsb a))
(define-fun us_split_fields_Byte_Count_MSB__projection ((a us_split_fields)) u32 (rec__skein__tweak_value__byte_count_msb a))
(define-fun us_split_fields_Reserved__projection ((a us_split_fields)) u16 (rec__skein__tweak_value__reserved a))
(define-fun us_split_fields_Tree_Level__projection ((a us_split_fields)) u7 (rec__skein__tweak_value__tree_level a))
(define-fun us_split_fields_Bit_Pad__projection ((a us_split_fields)) Bool (rec__skein__tweak_value__bit_pad a))
(define-fun us_split_fields_Field_Type__projection ((a us_split_fields)) u6 (rec__skein__tweak_value__field_type a))
(define-fun us_split_fields_First_Block__projection ((a us_split_fields)) Bool (rec__skein__tweak_value__first_block a))
(define-fun us_split_fields_Final_Block__projection ((a us_split_fields)) Bool (rec__skein__tweak_value__final_block a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq4 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep1 (rec__skein__tweak_value__byte_count_lsb (us_split_fields1 a))) (to_rep1 (rec__skein__tweak_value__byte_count_lsb (us_split_fields1 b)))) (= (to_rep5 (rec__skein__tweak_value__byte_count_msb (us_split_fields1 a))) (to_rep5 (rec__skein__tweak_value__byte_count_msb (us_split_fields1 b))))) (= (to_rep4 (rec__skein__tweak_value__reserved (us_split_fields1 a))) (to_rep4 (rec__skein__tweak_value__reserved (us_split_fields1 b))))) (= (to_rep6 (rec__skein__tweak_value__tree_level (us_split_fields1 a))) (to_rep6 (rec__skein__tweak_value__tree_level (us_split_fields1 b))))) (= (rec__skein__tweak_value__bit_pad (us_split_fields1 a)) (rec__skein__tweak_value__bit_pad (us_split_fields1 b)))) (= (to_rep7 (rec__skein__tweak_value__field_type (us_split_fields1 a))) (to_rep7 (rec__skein__tweak_value__field_type (us_split_fields1 b))))) (= (rec__skein__tweak_value__first_block (us_split_fields1 a)) (rec__skein__tweak_value__first_block (us_split_fields1 b)))) (= (rec__skein__tweak_value__final_block (us_split_fields1 a)) (rec__skein__tweak_value__final_block (us_split_fields1 b)))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const skein__tweak_value__byte_count_lsb__first__bit Int)
(declare-const skein__tweak_value__byte_count_lsb__last__bit Int)
(declare-const skein__tweak_value__byte_count_lsb__position Int)
(assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))
(assert (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))
(assert (<= 0 skein__tweak_value__byte_count_lsb__position))
(declare-const skein__tweak_value__byte_count_msb__first__bit Int)
(declare-const skein__tweak_value__byte_count_msb__last__bit Int)
(declare-const skein__tweak_value__byte_count_msb__position Int)
(assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))
(assert (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))
(assert (<= 0 skein__tweak_value__byte_count_msb__position))
(declare-const skein__tweak_value__reserved__first__bit Int)
(declare-const skein__tweak_value__reserved__last__bit Int)
(declare-const skein__tweak_value__reserved__position Int)
(assert (<= 0 skein__tweak_value__reserved__first__bit))
(assert (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))
(assert (<= 0 skein__tweak_value__reserved__position))
(declare-const skein__tweak_value__tree_level__first__bit Int)
(declare-const skein__tweak_value__tree_level__last__bit Int)
(declare-const skein__tweak_value__tree_level__position Int)
(assert (<= 0 skein__tweak_value__tree_level__first__bit))
(assert (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))
(assert (<= 0 skein__tweak_value__tree_level__position))
(declare-const skein__tweak_value__bit_pad__first__bit Int)
(declare-const skein__tweak_value__bit_pad__last__bit Int)
(declare-const skein__tweak_value__bit_pad__position Int)
(assert (<= 0 skein__tweak_value__bit_pad__first__bit))
(assert (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))
(assert (<= 0 skein__tweak_value__bit_pad__position))
(declare-const skein__tweak_value__field_type__first__bit Int)
(declare-const skein__tweak_value__field_type__last__bit Int)
(declare-const skein__tweak_value__field_type__position Int)
(assert (<= 0 skein__tweak_value__field_type__first__bit))
(assert (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))
(assert (<= 0 skein__tweak_value__field_type__position))
(declare-const skein__tweak_value__first_block__first__bit Int)
(declare-const skein__tweak_value__first_block__last__bit Int)
(declare-const skein__tweak_value__first_block__position Int)
(assert (<= 0 skein__tweak_value__first_block__first__bit))
(assert (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))
(assert (<= 0 skein__tweak_value__first_block__position))
(declare-const skein__tweak_value__final_block__first__bit Int)
(declare-const skein__tweak_value__final_block__last__bit Int)
(declare-const skein__tweak_value__final_block__position Int)
(assert (<= 0 skein__tweak_value__final_block__first__bit))
(assert (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))
(assert (<= 0 skein__tweak_value__final_block__position))
(declare-fun user_eq16 (us_rep us_rep) Bool)
(declare-const dummy16 us_rep)
(declare-datatypes () ((tweak_value__ref (mk_tweak_value__ref (tweak_value__content us_rep)))))
(define-fun tweak_value__ref___projection ((a tweak_value__ref)) us_rep (tweak_value__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__skein__context_header__tweak_words us_rep) (rec__skein__context_header__hash_bit_len hash_bit_length) (rec__skein__context_header__byte_count u64)))))
(define-fun us_split_fields_Tweak_Words__projection ((a us_split_fields2)) us_rep (rec__skein__context_header__tweak_words a))
(define-fun us_split_fields_Hash_Bit_Len__projection ((a us_split_fields2)) hash_bit_length (rec__skein__context_header__hash_bit_len a))
(define-fun us_split_fields_Byte_Count__projection ((a us_split_fields2)) u64 (rec__skein__context_header__byte_count a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq5 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (bool_eq4 (rec__skein__context_header__tweak_words (us_split_fields3 a)) (rec__skein__context_header__tweak_words (us_split_fields3 b))) true) (= (to_rep3 (rec__skein__context_header__hash_bit_len (us_split_fields3 a))) (to_rep3 (rec__skein__context_header__hash_bit_len (us_split_fields3 b))))) (= (to_rep1 (rec__skein__context_header__byte_count (us_split_fields3 a))) (to_rep1 (rec__skein__context_header__byte_count (us_split_fields3 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const skein__context_header__tweak_words__first__bit Int)
(declare-const skein__context_header__tweak_words__last__bit Int)
(declare-const skein__context_header__tweak_words__position Int)
(assert (<= 0 skein__context_header__tweak_words__first__bit))
(assert (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))
(assert (<= 0 skein__context_header__tweak_words__position))
(declare-const skein__context_header__hash_bit_len__first__bit Int)
(declare-const skein__context_header__hash_bit_len__last__bit Int)
(declare-const skein__context_header__hash_bit_len__position Int)
(assert (<= 0 skein__context_header__hash_bit_len__first__bit))
(assert (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))
(assert (<= 0 skein__context_header__hash_bit_len__position))
(declare-const skein__context_header__byte_count__first__bit Int)
(declare-const skein__context_header__byte_count__last__bit Int)
(declare-const skein__context_header__byte_count__position Int)
(assert (<= 0 skein__context_header__byte_count__first__bit))
(assert (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))
(assert (<= 0 skein__context_header__byte_count__position))
(declare-fun user_eq17 (us_rep1 us_rep1) Bool)
(declare-const dummy17 us_rep1)
(declare-datatypes () ((context_header__ref (mk_context_header__ref (context_header__content us_rep1)))))
(define-fun context_header__ref___projection ((a context_header__ref)) us_rep1 (context_header__content a))
(declare-const dummy18 (Array (_ BitVec 64) u64))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array (_ BitVec 64) u64)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array (_ BitVec 64) u64)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array (_ BitVec 64) u64)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq18 ((Array (_ BitVec 64) u64) (Array (_ BitVec 64) u64)) Bool)
(declare-const dummy19 (Array (_ BitVec 64) byte))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array (_ BitVec 64) byte)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array (_ BitVec 64) byte)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array (_ BitVec 64) byte)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment5 a))))
(declare-fun user_eq19 ((Array (_ BitVec 64) byte) (Array (_ BitVec 64) byte)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__skein__skein_512_context__h us_rep1) (rec__skein__skein_512_context__x (Array (_ BitVec 64) u64)) (rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))
(define-fun us_split_fields_H__projection ((a us_split_fields4)) us_rep1 (rec__skein__skein_512_context__h a))
(define-fun us_split_fields_X__projection ((a us_split_fields4)) (Array (_ BitVec 64) u64) (rec__skein__skein_512_context__x a))
(define-fun us_split_fields_B__projection ((a us_split_fields4)) (Array (_ BitVec 64) byte) (rec__skein__skein_512_context__b a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq6 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (bool_eq5 (rec__skein__skein_512_context__h (us_split_fields5 a)) (rec__skein__skein_512_context__h (us_split_fields5 b))) true) (= (bool_eq2 (rec__skein__skein_512_context__x (us_split_fields5 a)) #x0000000000000000 #x0000000000000007 (rec__skein__skein_512_context__x (us_split_fields5 b)) #x0000000000000000 #x0000000000000007) true)) (= (bool_eq (rec__skein__skein_512_context__b (us_split_fields5 a)) #x0000000000000000 #x000000000000003F (rec__skein__skein_512_context__b (us_split_fields5 b)) #x0000000000000000 #x000000000000003F) true)) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))
(declare-const skein__skein_512_context__h__first__bit Int)
(declare-const skein__skein_512_context__h__last__bit Int)
(declare-const skein__skein_512_context__h__position Int)
(assert (<= 0 skein__skein_512_context__h__first__bit))
(assert (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))
(assert (<= 0 skein__skein_512_context__h__position))
(declare-const skein__skein_512_context__x__first__bit Int)
(declare-const skein__skein_512_context__x__last__bit Int)
(declare-const skein__skein_512_context__x__position Int)
(assert (<= 0 skein__skein_512_context__x__first__bit))
(assert (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))
(assert (<= 0 skein__skein_512_context__x__position))
(declare-const skein__skein_512_context__b__first__bit Int)
(declare-const skein__skein_512_context__b__last__bit Int)
(declare-const skein__skein_512_context__b__position Int)
(assert (<= 0 skein__skein_512_context__b__first__bit))
(assert (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))
(assert (<= 0 skein__skein_512_context__b__position))
(declare-fun user_eq20 (us_rep2 us_rep2) Bool)
(declare-const dummy20 us_rep2)
(declare-datatypes () ((skein_512_context__ref (mk_skein_512_context__ref (skein_512_context__content us_rep2)))))
(define-fun skein_512_context__ref___projection ((a skein_512_context__ref)) us_rep2 (skein_512_context__content a))
(define-fun dynamic_invariant4 ((temp___expr_735 us_rep2) (temp___is_init_731 Bool) (temp___skip_constant_732 Bool) (temp___do_toplevel_733 Bool) (temp___do_typ_inv_734 Bool)) Bool (=> (= temp___is_init_731 true) (bvult (last1 (of_array (rec__skein__skein_512_context__b (us_split_fields5 temp___expr_735)) #x0000000000000000 #x000000000000003F)) #xFFFFFFFFFFFFFFFF)))
(declare-fun add_in_range ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun add_in_range__function_guard (Bool (_ BitVec 64) (_ BitVec 64)) Bool)
(assert true)
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64))) (! (= (= (add_in_range x y) true) (bvule y (bvsub #xFFFFFFFFFFFFFFFF x))) :pattern ((add_in_range x y)))))
(declare-sort modifier_words_index 0)
(declare-const attr__ATTRIBUTE_MODULUS12 (_ BitVec 64))
(define-fun in_range10 ((x (_ BitVec 64))) Bool (and (bvule #x0000000000000000 x) (bvule x #x0000000000000001)))
(define-fun in_range_int9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE15 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) (_ BitVec 64))
(declare-fun user_eq21 (modifier_words_index modifier_words_index) Bool)
(declare-const dummy21 modifier_words_index)
(declare-datatypes () ((modifier_words_index__ref (mk_modifier_words_index__ref (modifier_words_index__content modifier_words_index)))))
(define-fun modifier_words_index__ref___projection ((a modifier_words_index__ref)) modifier_words_index (modifier_words_index__content a))
(declare-datatypes () ((source__ref (mk_source__ref (source__content us_rep)))))
(define-fun source__ref___projection ((a source__ref)) us_rep (source__content a))
(declare-fun tweak_to_words (us_rep) (Array (_ BitVec 64) u64))
(declare-fun tweak_to_words__function_guard ((Array (_ BitVec 64) u64) us_rep) Bool)
(assert true)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const block us_t)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const starting_offset (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const block_count (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const byte_count_add (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const src_offset (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const c206b (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-fun temp___1676 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) u64))
(declare-fun temp___1693 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) u64))
(declare-fun temp___1704 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) u64))
(define-fun dynamic_invariant5 ((temp___expr_331 (_ BitVec 8)) (temp___is_init_327 Bool) (temp___skip_constant_328 Bool) (temp___do_toplevel_329 Bool) (temp___do_typ_inv_330 Bool)) Bool true)
(define-fun dynamic_invariant6 ((temp___expr_338 (_ BitVec 16)) (temp___is_init_334 Bool) (temp___skip_constant_335 Bool) (temp___do_toplevel_336 Bool) (temp___do_typ_inv_337 Bool)) Bool true)
(define-fun dynamic_invariant7 ((temp___expr_345 (_ BitVec 32)) (temp___is_init_341 Bool) (temp___skip_constant_342 Bool) (temp___do_toplevel_343 Bool) (temp___do_typ_inv_344 Bool)) Bool true)
(define-fun dynamic_invariant8 ((temp___expr_394 (_ BitVec 64)) (temp___is_init_390 Bool) (temp___skip_constant_391 Bool) (temp___do_toplevel_392 Bool) (temp___do_typ_inv_393 Bool)) Bool (=> (or (= temp___is_init_390 true) (bvule #x0000000000000000 #x0000000000000008)) (in_range1 temp___expr_394)))
(define-fun dynamic_invariant9 ((temp___expr_518 (_ BitVec 64)) (temp___is_init_514 Bool) (temp___skip_constant_515 Bool) (temp___do_toplevel_516 Bool) (temp___do_typ_inv_517 Bool)) Bool (=> (or (= temp___is_init_514 true) (bvule #x0000000000000000 #x1FFFFFFFFFFFFFFF)) (in_range2 temp___expr_518)))
(define-fun dynamic_invariant10 ((temp___expr_532 us_t1) (temp___is_init_528 Bool) (temp___skip_constant_529 Bool) (temp___do_toplevel_530 Bool) (temp___do_typ_inv_531 Bool)) Bool (=> (not (= temp___skip_constant_529 true)) (dynamic_property1 #x0000000000000000 #x1FFFFFFFFFFFFFFF (first3 temp___expr_532) (last3 temp___expr_532))))
(define-fun dynamic_invariant11 ((temp___expr_588 (_ BitVec 64)) (temp___is_init_584 Bool) (temp___skip_constant_585 Bool) (temp___do_toplevel_586 Bool) (temp___do_typ_inv_587 Bool)) Bool (=> (or (= temp___is_init_584 true) (bvule #x0000000000000000 #xFFFFFFFFFFFFFFF8)) (in_range3 temp___expr_588)))
(define-fun dynamic_invariant12 ((temp___expr_595 (_ BitVec 64)) (temp___is_init_591 Bool) (temp___skip_constant_592 Bool) (temp___do_toplevel_593 Bool) (temp___do_typ_inv_594 Bool)) Bool (=> (or (= temp___is_init_591 true) (bvule #x0000000000000001 #xFFFFFFFFFFFFFFF8)) (in_range4 temp___expr_595)))
(define-fun dynamic_invariant13 ((temp___expr_619 (_ BitVec 64)) (temp___is_init_615 Bool) (temp___skip_constant_616 Bool) (temp___do_toplevel_617 Bool) (temp___do_typ_inv_618 Bool)) Bool (=> (or (= temp___is_init_615 true) (bvule #x0000000000000000 #x0000000000000040)) (in_range5 temp___expr_619)))
(define-fun dynamic_invariant14 ((temp___expr_626 (_ BitVec 64)) (temp___is_init_622 Bool) (temp___skip_constant_623 Bool) (temp___do_toplevel_624 Bool) (temp___do_typ_inv_625 Bool)) Bool (=> (or (= temp___is_init_622 true) (bvule #x0000000000000000 #x000000000000003F)) (in_range6 temp___expr_626)))
(define-fun dynamic_invariant15 ((temp___expr_806 (_ BitVec 64)) (temp___is_init_802 Bool) (temp___skip_constant_803 Bool) (temp___do_toplevel_804 Bool) (temp___do_typ_inv_805 Bool)) Bool (=> (or (= temp___is_init_802 true) (bvule #x0000000000000000 #x0000000000000001)) (in_range10 temp___expr_806)))
(define-fun dynamic_invariant16 ((temp___expr_695 (_ BitVec 8)) (temp___is_init_691 Bool) (temp___skip_constant_692 Bool) (temp___do_toplevel_693 Bool) (temp___do_typ_inv_694 Bool)) Bool (=> (or (= temp___is_init_691 true) (bvule #x00 #x3F)) (in_range9 temp___expr_695)))
(define-fun dynamic_invariant17 ((temp___expr_688 (_ BitVec 8)) (temp___is_init_684 Bool) (temp___skip_constant_685 Bool) (temp___do_toplevel_686 Bool) (temp___do_typ_inv_687 Bool)) Bool (=> (or (= temp___is_init_684 true) (bvule #x00 #x7F)) (in_range8 temp___expr_688)))
(define-fun dynamic_invariant18 ((temp___expr_303 (_ BitVec 64)) (temp___is_init_299 Bool) (temp___skip_constant_300 Bool) (temp___do_toplevel_301 Bool) (temp___do_typ_inv_302 Bool)) Bool true)
(assert (forall ((temp___1678 (_ BitVec 64)) (temp___1679 (_ BitVec 64)) (temp___1680 (_ BitVec 64))) (let ((temp___1677 (temp___1676 temp___1678 temp___1679 temp___1680))) (=> (and (and (dynamic_invariant temp___1678 true true true true) (dynamic_invariant temp___1679 true true true true)) (dynamic_invariant temp___1680 true true true true)) (and (and (= (to_rep1 (select temp___1677 #x0000000000000000)) temp___1678) (= (to_rep1 (select temp___1677 #x0000000000000001)) temp___1679)) (= (to_rep1 (select temp___1677 #x0000000000000002)) temp___1680))))))
(assert (forall ((temp___1695 (_ BitVec 64)) (temp___1696 (_ BitVec 64)) (temp___1697 (_ BitVec 64)) (temp___1698 (_ BitVec 64)) (temp___1699 (_ BitVec 64)) (temp___1700 (_ BitVec 64)) (temp___1701 (_ BitVec 64)) (temp___1702 (_ BitVec 64))) (let ((temp___1694 (temp___1693 temp___1695 temp___1696 temp___1697 temp___1698 temp___1699 temp___1700 temp___1701 temp___1702))) (=> (and (and (and (and (and (and (and (dynamic_invariant temp___1695 true true true true) (dynamic_invariant temp___1696 true true true true)) (dynamic_invariant temp___1697 true true true true)) (dynamic_invariant temp___1698 true true true true)) (dynamic_invariant temp___1699 true true true true)) (dynamic_invariant temp___1700 true true true true)) (dynamic_invariant temp___1701 true true true true)) (dynamic_invariant temp___1702 true true true true)) (and (and (and (and (and (and (and (= (to_rep1 (select temp___1694 #x0000000000000000)) temp___1695) (= (to_rep1 (select temp___1694 #x0000000000000001)) temp___1696)) (= (to_rep1 (select temp___1694 #x0000000000000002)) temp___1697)) (= (to_rep1 (select temp___1694 #x0000000000000003)) temp___1698)) (= (to_rep1 (select temp___1694 #x0000000000000004)) temp___1699)) (= (to_rep1 (select temp___1694 #x0000000000000005)) temp___1700)) (= (to_rep1 (select temp___1694 #x0000000000000006)) temp___1701)) (= (to_rep1 (select temp___1694 #x0000000000000007)) temp___1702))))))
(assert (forall ((temp___1706 (_ BitVec 64)) (temp___1707 (_ BitVec 64)) (temp___1708 (_ BitVec 64)) (temp___1709 (_ BitVec 64)) (temp___1710 (_ BitVec 64)) (temp___1711 (_ BitVec 64)) (temp___1712 (_ BitVec 64)) (temp___1713 (_ BitVec 64))) (let ((temp___1705 (temp___1704 temp___1706 temp___1707 temp___1708 temp___1709 temp___1710 temp___1711 temp___1712 temp___1713))) (=> (and (and (and (and (and (and (and (dynamic_invariant temp___1706 true true true true) (dynamic_invariant temp___1707 true true true true)) (dynamic_invariant temp___1708 true true true true)) (dynamic_invariant temp___1709 true true true true)) (dynamic_invariant temp___1710 true true true true)) (dynamic_invariant temp___1711 true true true true)) (dynamic_invariant temp___1712 true true true true)) (dynamic_invariant temp___1713 true true true true)) (and (and (and (and (and (and (and (= (to_rep1 (select temp___1705 #x0000000000000000)) temp___1706) (= (to_rep1 (select temp___1705 #x0000000000000001)) temp___1707)) (= (to_rep1 (select temp___1705 #x0000000000000002)) temp___1708)) (= (to_rep1 (select temp___1705 #x0000000000000003)) temp___1709)) (= (to_rep1 (select temp___1705 #x0000000000000004)) temp___1710)) (= (to_rep1 (select temp___1705 #x0000000000000005)) temp___1711)) (= (to_rep1 (select temp___1705 #x0000000000000006)) temp___1712)) (= (to_rep1 (select temp___1705 #x0000000000000007)) temp___1713))))))
(declare-const ctx__split_fields u32)
(declare-const ctx__split_fields1 u16)
(declare-const ctx__split_fields2 u7)
(declare-const ctx__split_fields3 Bool)
(declare-const ctx__split_fields4 u6)
(declare-const ctx__split_fields5 Bool)
(declare-const ctx__split_fields6 hash_bit_length)
(declare-const ctx__split_fields7 u64)
(declare-const ctx__split_fields8 (Array (_ BitVec 64) byte))
(declare-const j (_ BitVec 64))
(declare-const skein__skein_512_process_block__B_8__src_offset__assume (_ BitVec 64))
(declare-const o u64)
(declare-const o1 us_split_fields)
(declare-const o2 us_rep)
(declare-const o3 us_split_fields2)
(declare-const o4 us_rep1)
(declare-const o5 us_split_fields4)
(declare-const temp___1667 us_rep2)
(declare-const o6 u64)
(declare-const o7 (Array (_ BitVec 64) u64))
(declare-const o8 u64)
(declare-const o9 (Array (_ BitVec 64) u64))
(declare-const o10 u64)
(declare-const o11 (Array (_ BitVec 64) u64))
(declare-const o12 u64)
(declare-const o13 (Array (_ BitVec 64) u64))
(declare-const o14 u64)
(declare-const o15 (Array (_ BitVec 64) u64))
(declare-const o16 u64)
(declare-const o17 (Array (_ BitVec 64) u64))
(declare-const o18 u64)
(declare-const o19 (Array (_ BitVec 64) u64))
(declare-const o20 u64)
(declare-const o21 (Array (_ BitVec 64) u64))
(declare-const o22 u64)
(declare-const o23 (Array (_ BitVec 64) u64))
(declare-const o24 u64)
(declare-const o25 (Array (_ BitVec 64) u64))
(declare-const o26 u64)
(declare-const o27 (Array (_ BitVec 64) u64))
(declare-const o28 u64)
(declare-const o29 (Array (_ BitVec 64) u64))
(declare-const o30 u64)
(declare-const o31 (Array (_ BitVec 64) u64))
(declare-const o32 u64)
(declare-const o33 (Array (_ BitVec 64) u64))
(declare-const o34 u64)
(declare-const o35 (Array (_ BitVec 64) u64))
(declare-const o36 u64)
(declare-const o37 (Array (_ BitVec 64) u64))
(declare-const o38 u64)
(declare-const o39 (Array (_ BitVec 64) u64))
(declare-const o40 (Array (_ BitVec 64) u64))
(declare-const temp___1674 us_t1)
(declare-const o41 u64)
(declare-const o42 (_ BitVec 64))
(declare-const o43 (Array (_ BitVec 64) u64))
(declare-const temp___1675 us_t1)
(declare-const o44 u64)
(declare-const o45 (_ BitVec 64))
(declare-const o46 (_ BitVec 64))
(declare-const o47 (_ BitVec 64))
(declare-const o48 byte)
(declare-const o49 (_ BitVec 8))
(declare-const o50 (_ BitVec 64))
(declare-const o51 (_ BitVec 64))
(declare-const result t__ref1)
(declare-const j1 (_ BitVec 64))
(declare-const ctx__split_fields9 us_split_fields4)
(declare-const ts (Array (_ BitVec 64) u64))
(declare-const ks (Array (_ BitVec 64) u64))
(declare-const j2 (_ BitVec 64))
(declare-const i (_ BitVec 64))
(declare-const w0 (_ BitVec 64))
(declare-const w1 (_ BitVec 64))
(declare-const dst_index (_ BitVec 64))
(declare-const src_index (_ BitVec 64))
(declare-const result1 us_split_fields__ref2)
(declare-const ctx__split_fields10 us_split_fields4)
(declare-const result2 map__ref1)
(declare-const ks1 (Array (_ BitVec 64) u64))
(declare-const result3 t__ref1)
(declare-const i1 (_ BitVec 64))
(declare-const result4 map__ref1)
(declare-const ks2 (Array (_ BitVec 64) u64))
(declare-const result5 map__ref1)
(declare-const ks3 (Array (_ BitVec 64) u64))
(declare-const result6 t__ref1)
(declare-const i2 (_ BitVec 64))
(declare-const result7 map__ref1)
(declare-const ks4 (Array (_ BitVec 64) u64))
(declare-const result8 map__ref1)
(declare-const ks5 (Array (_ BitVec 64) u64))
(declare-const result9 t__ref1)
(declare-const i3 (_ BitVec 64))
(declare-const result10 map__ref1)
(declare-const ks6 (Array (_ BitVec 64) u64))
(declare-const result11 map__ref1)
(declare-const ks7 (Array (_ BitVec 64) u64))
(declare-const result12 t__ref1)
(declare-const i4 (_ BitVec 64))
(declare-const result13 map__ref1)
(declare-const ks8 (Array (_ BitVec 64) u64))
(declare-const result14 map__ref1)
(declare-const ks9 (Array (_ BitVec 64) u64))
(declare-const result15 t__ref1)
(declare-const i5 (_ BitVec 64))
(declare-const result16 map__ref1)
(declare-const ks10 (Array (_ BitVec 64) u64))
(declare-const result17 map__ref1)
(declare-const ks11 (Array (_ BitVec 64) u64))
(declare-const result18 t__ref1)
(declare-const i6 (_ BitVec 64))
(declare-const result19 map__ref1)
(declare-const ks12 (Array (_ BitVec 64) u64))
(declare-const result20 map__ref1)
(declare-const ks13 (Array (_ BitVec 64) u64))
(declare-const result21 t__ref1)
(declare-const i7 (_ BitVec 64))
(declare-const result22 map__ref1)
(declare-const ks14 (Array (_ BitVec 64) u64))
(declare-const result23 map__ref1)
(declare-const ks15 (Array (_ BitVec 64) u64))
(declare-const result24 t__ref1)
(declare-const i8 (_ BitVec 64))
(declare-const result25 map__ref1)
(declare-const ks16 (Array (_ BitVec 64) u64))
(declare-const result26 map__ref1)
(declare-const ks17 (Array (_ BitVec 64) u64))
(declare-const result27 t__ref1)
(declare-const w01 (_ BitVec 64))
(declare-const result28 t__ref1)
(declare-const w11 (_ BitVec 64))
(declare-const result29 map__ref1)
(declare-const ts1 (Array (_ BitVec 64) u64))
(declare-const result30 t__ref1)
(declare-const dst_index1 (_ BitVec 64))
(declare-const result31 t__ref1)
(declare-const src_index1 (_ BitVec 64))
(assert (bvult (to_rep2 (last (mk #x0000000000000000 #x000000000000003F))) #xFFFFFFFFFFFFFFFF))
(assert (bvult (to_rep2 (last (mk #x0000000000000000 #x000000000000003F))) #xFFFFFFFFFFFFFFFF))
(assert (dynamic_invariant1 block true false true true))
(assert (in_range7 block_count))
(assert (and (and (and (and (and (in_range4 (to_rep3 ctx__split_fields6)) (in_range5 (to_rep1 ctx__split_fields7))) (= (to_rep2 (first (rt block))) #x0000000000000000)) (= (add_in_range starting_offset (bvadd (bvmul (bvsub block_count #x0000000000000001) #x0000000000000040) #x000000000000003F)) true)) (bvule (bvadd (bvadd starting_offset (bvmul (bvsub block_count #x0000000000000001) #x0000000000000040)) #x000000000000003F) (to_rep2 (last (rt block))))) (bvule (bvadd starting_offset #x000000000000003F) (to_rep2 (last (rt block))))))
(assert (= result (mk_t__ref1 j)))
(assert (= j1 #x0000000000000001))
(assert (bvule #x0000000000000001 j1))
(assert (bvule j1 block_count))
(assert (and (and (bvult (to_rep2 (last (mk #x0000000000000000 #x000000000000003F))) #xFFFFFFFFFFFFFFFF) (and (and (and (and (and (and (and (and (= (rec__skein__tweak_value__byte_count_msb (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) ctx__split_fields) (= (rec__skein__tweak_value__reserved (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) ctx__split_fields1)) (= (rec__skein__tweak_value__tree_level (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) ctx__split_fields2)) (= (rec__skein__tweak_value__bit_pad (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) ctx__split_fields3)) (= (rec__skein__tweak_value__field_type (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) ctx__split_fields4)) (= (rec__skein__tweak_value__final_block (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) ctx__split_fields5)) (= (rec__skein__context_header__hash_bit_len (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))) ctx__split_fields6)) (= (rec__skein__context_header__byte_count (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))) ctx__split_fields7)) (= (rec__skein__skein_512_context__b ctx__split_fields9) ctx__split_fields8))) (and (bvule #x0000000000000001 j2) (bvule j2 block_count))))
(assert (= skein__skein_512_process_block__B_8__src_offset__assume (bvadd starting_offset (bvmul (bvsub j2 #x0000000000000001) #x0000000000000040))))
(assert (= skein__skein_512_process_block__B_8__src_offset__assume src_offset))
(assert (= (to_rep1 o) (bvadd (to_rep1 (rec__skein__tweak_value__byte_count_lsb (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9)))))) byte_count_add)))
(assert (= o1 (mk___split_fields o (rec__skein__tweak_value__byte_count_msb (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) (rec__skein__tweak_value__reserved (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) (rec__skein__tweak_value__tree_level (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) (rec__skein__tweak_value__bit_pad (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) (rec__skein__tweak_value__field_type (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) (rec__skein__tweak_value__first_block (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))) (rec__skein__tweak_value__final_block (us_split_fields1 (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))))))
(assert (= o2 (mk___rep o1)))
(assert (= o3 (mk___split_fields1 o2 (rec__skein__context_header__hash_bit_len (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))) (rec__skein__context_header__byte_count (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields9))))))
(assert (= o4 (mk___rep1 o3)))
(assert (= o5 (mk___split_fields2 o4 (rec__skein__skein_512_context__x ctx__split_fields9) (rec__skein__skein_512_context__b ctx__split_fields9))))
(assert (= temp___1667 (mk___rep2 o5)))
(assert (= result1 (mk___split_fields__ref2 ctx__split_fields9)))
(assert (= ctx__split_fields10 (us_split_fields5 temp___1667)))
(assert (= (to_rep1 o6) #x1BD11BDAA9FC1A22))
(assert (= o7 (store ks #x0000000000000008 o6)))
(assert (= result2 (mk_map__ref1 ks)))
(assert (= ks1 o7))
(assert (= result3 (mk_t__ref1 i)))
(assert (= i1 #x0000000000000000))
(assert (= (to_rep1 o8) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i1))))
(assert (= o9 (store ks1 i1 o8)))
(assert (= result4 (mk_map__ref1 ks1)))
(assert (= ks2 o9))
(assert (= (to_rep1 o10) (bvxor (to_rep1 (select ks2 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i1)))))
(assert (= o11 (store ks2 #x0000000000000008 o10)))
(assert (= result5 (mk_map__ref1 ks2)))
(assert (= ks3 o11))
(assert (= result6 (mk_t__ref1 i1)))
(assert (= i2 #x0000000000000001))
(assert (= (to_rep1 o12) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i2))))
(assert (= o13 (store ks3 i2 o12)))
(assert (= result7 (mk_map__ref1 ks3)))
(assert (= ks4 o13))
(assert (= (to_rep1 o14) (bvxor (to_rep1 (select ks4 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i2)))))
(assert (= o15 (store ks4 #x0000000000000008 o14)))
(assert (= result8 (mk_map__ref1 ks4)))
(assert (= ks5 o15))
(assert (= result9 (mk_t__ref1 i2)))
(assert (= i3 #x0000000000000002))
(assert (= (to_rep1 o16) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i3))))
(assert (= o17 (store ks5 i3 o16)))
(assert (= result10 (mk_map__ref1 ks5)))
(assert (= ks6 o17))
(assert (= (to_rep1 o18) (bvxor (to_rep1 (select ks6 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i3)))))
(assert (= o19 (store ks6 #x0000000000000008 o18)))
(assert (= result11 (mk_map__ref1 ks6)))
(assert (= ks7 o19))
(assert (= result12 (mk_t__ref1 i3)))
(assert (= i4 #x0000000000000003))
(assert (= (to_rep1 o20) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i4))))
(assert (= o21 (store ks7 i4 o20)))
(assert (= result13 (mk_map__ref1 ks7)))
(assert (= ks8 o21))
(assert (= (to_rep1 o22) (bvxor (to_rep1 (select ks8 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i4)))))
(assert (= o23 (store ks8 #x0000000000000008 o22)))
(assert (= result14 (mk_map__ref1 ks8)))
(assert (= ks9 o23))
(assert (= result15 (mk_t__ref1 i4)))
(assert (= i5 #x0000000000000004))
(assert (= (to_rep1 o24) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i5))))
(assert (= o25 (store ks9 i5 o24)))
(assert (= result16 (mk_map__ref1 ks9)))
(assert (= ks10 o25))
(assert (= (to_rep1 o26) (bvxor (to_rep1 (select ks10 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i5)))))
(assert (= o27 (store ks10 #x0000000000000008 o26)))
(assert (= result17 (mk_map__ref1 ks10)))
(assert (= ks11 o27))
(assert (= result18 (mk_t__ref1 i5)))
(assert (= i6 #x0000000000000005))
(assert (= (to_rep1 o28) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i6))))
(assert (= o29 (store ks11 i6 o28)))
(assert (= result19 (mk_map__ref1 ks11)))
(assert (= ks12 o29))
(assert (= (to_rep1 o30) (bvxor (to_rep1 (select ks12 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i6)))))
(assert (= o31 (store ks12 #x0000000000000008 o30)))
(assert (= result20 (mk_map__ref1 ks12)))
(assert (= ks13 o31))
(assert (= result21 (mk_t__ref1 i6)))
(assert (= i7 #x0000000000000006))
(assert (= (to_rep1 o32) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i7))))
(assert (= o33 (store ks13 i7 o32)))
(assert (= result22 (mk_map__ref1 ks13)))
(assert (= ks14 o33))
(assert (= (to_rep1 o34) (bvxor (to_rep1 (select ks14 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i7)))))
(assert (= o35 (store ks14 #x0000000000000008 o34)))
(assert (= result23 (mk_map__ref1 ks14)))
(assert (= ks15 o35))
(assert (= result24 (mk_t__ref1 i7)))
(assert (= i8 #x0000000000000007))
(assert (= (to_rep1 o36) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i8))))
(assert (= o37 (store ks15 i8 o36)))
(assert (= result25 (mk_map__ref1 ks15)))
(assert (= ks16 o37))
(assert (= (to_rep1 o38) (bvxor (to_rep1 (select ks16 #x0000000000000008)) (to_rep1 (select (rec__skein__skein_512_context__x ctx__split_fields10) i8)))))
(assert (= o39 (store ks16 #x0000000000000008 o38)))
(assert (= result26 (mk_map__ref1 ks16)))
(assert (= ks17 o39))
(assert (= o40 (tweak_to_words (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields10))))))
(assert (= temp___1674 (mk___t1 o40 (mk1 #x0000000000000000 #x0000000000000001))))
(assert (= o41 (select (elts1 temp___1674) #x0000000000000000)))
(assert (= o42 (to_rep1 o41)))
(assert (= result27 (mk_t__ref1 w0)))
(assert (= w01 o42))
(assert (= o43 (tweak_to_words (rec__skein__context_header__tweak_words (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields10))))))
(assert (= temp___1675 (mk___t1 o43 (mk1 #x0000000000000000 #x0000000000000001))))
(assert (= o44 (select (elts1 temp___1675) #x0000000000000001)))
(assert (= o45 (to_rep1 o44)))
(assert (= result28 (mk_t__ref1 w1)))
(assert (= w11 o45))
(assert (= result29 (mk_map__ref1 ts)))
(assert (= ts1 (temp___1676 w01 w11 (bvxor w01 w11))))
(assert (= src_offset c206b))
(assert (= result30 (mk_t__ref1 dst_index)))
(assert (= dst_index1 #x0000000000000000))
(assert (= o46 (bvadd c206b (bvmul dst_index1 #x0000000000000008))))
(assert (= result31 (mk_t__ref1 src_index)))
(assert (= src_index1 o46))
(assert (and (bvule (to_rep2 (first (rt block))) (bvadd src_index1 #x0000000000000007)) (bvule (bvadd src_index1 #x0000000000000007) (to_rep2 (last (rt block))))))
(assert (= o47 (bvadd src_index1 #x0000000000000007)))
(assert (= o48 (select (elts block) o47)))
(assert (= o49 (to_rep o48)))
(assert (= o50 ((_ zero_extend 56) o49)))
(assert (= o51 (bvshl o50 ((_ int2bv 64) 56))))
(assert (not (bvule (to_rep2 (first (rt block))) (bvadd src_index1 #x0000000000000006))))
(check-sat)
(exit)
