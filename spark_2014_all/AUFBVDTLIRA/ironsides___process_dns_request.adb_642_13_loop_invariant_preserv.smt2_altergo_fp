(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type packet_length_range

predicate in_range4(x: int) = ((0 <= x) and (x <= 8192))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : packet_length_range, packet_length_range -> bool

logic dummy3 : packet_length_range

type packet_length_range__ref = { packet_length_range__content :
packet_length_range
}

function packet_length_range__ref___projection(a: packet_length_range__ref) : packet_length_range =
  (a).packet_length_range__content

type packet_bytes_range

predicate in_range5(x: int) = ((1 <= x) and (x <= 8180))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : packet_bytes_range, packet_bytes_range -> bool

logic dummy4 : packet_bytes_range

type packet_bytes_range__ref = { packet_bytes_range__content :
packet_bytes_range
}

function packet_bytes_range__ref___projection(a: packet_bytes_range__ref) : packet_bytes_range =
  (a).packet_bytes_range__content

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq9 : t, t -> bool

axiom bool_eq_def8 :
  (forall x:t. forall y:t [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq5 : byte, byte -> bool

logic dummy5 : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

logic to_rep1 : byte -> t

logic of_rep1 : t -> byte

axiom inversion_axiom1 :
  (forall x:byte [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int2(x: byte) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:byte [to_int2(x)]. uint_in_range(to_int2(x)))

type query_class

predicate in_range6(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : query_class, query_class -> bool

logic dummy6 : query_class

type query_class__ref = { query_class__content : query_class
}

function query_class__ref___projection(a: query_class__ref) : query_class =
  (a).query_class__content

type query_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : query_type, query_type -> bool

logic dummy7 : query_type

type query_type__ref = { query_type__content : query_type
}

function query_type__ref___projection(a: query_type__ref) : query_type =
  (a).query_type__content

type map__ref1 = { map__content1 : (int,byte) farray
}

logic slide1 : (int,byte) farray, int, int -> (int,byte) farray

axiom slide_eq1 :
  (forall a:(int,byte) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq12 : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> bool

axiom bool_eq_def11 :
  (forall a:(int,byte) farray. forall a__first:int. forall a__last:int.
  forall b:(int,byte) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))))))))

type unsigned_short

predicate in_range8(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq8 : unsigned_short, unsigned_short -> bool

logic dummy8 : unsigned_short

type unsigned_short__ref = { unsigned_short__content : unsigned_short
}

function unsigned_short__ref___projection(a: unsigned_short__ref) : unsigned_short =
  (a).unsigned_short__content

logic to_rep2 : unsigned_short -> int

logic of_rep2 : int -> unsigned_short

axiom inversion_axiom2 :
  (forall x:unsigned_short [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned_short [to_rep2(x)]. in_range8(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range8(x) ->
  (to_rep2(of_rep2(x)) = x)))

type opcode_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq9 : opcode_type, opcode_type -> bool

logic dummy9 : opcode_type

type opcode_type__ref = { opcode_type__content : opcode_type
}

function opcode_type__ref___projection(a: opcode_type__ref) : opcode_type =
  (a).opcode_type__content

logic to_rep3 : opcode_type -> int

logic of_rep3 : int -> opcode_type

axiom inversion_axiom3 :
  (forall x:opcode_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:opcode_type [to_rep3(x)]. in_range9(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range9(x) ->
  (to_rep3(of_rep3(x)) = x)))

type response_code

predicate in_range10(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq10 : response_code, response_code -> bool

logic dummy10 : response_code

type response_code__ref = { response_code__content : response_code
}

function response_code__ref___projection(a: response_code__ref) : response_code =
  (a).response_code__content

logic to_rep4 : response_code -> int

logic of_rep4 : int -> response_code

axiom inversion_axiom4 :
  (forall x:response_code [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:response_code [to_rep4(x)]. in_range10(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range10(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__dns_types__header_type__messageid :
unsigned_short; rec__dns_types__header_type__qr : bool;
rec__dns_types__header_type__opcode : opcode_type;
rec__dns_types__header_type__aa : bool; rec__dns_types__header_type__tc :
bool; rec__dns_types__header_type__rd : bool; rec__dns_types__header_type__ra
: bool; rec__dns_types__header_type__res1 : bool;
rec__dns_types__header_type__res2 : bool; rec__dns_types__header_type__res3 :
bool; rec__dns_types__header_type__rcode : response_code;
rec__dns_types__header_type__qdcount : unsigned_short;
rec__dns_types__header_type__ancount : unsigned_short;
rec__dns_types__header_type__nscount : unsigned_short;
rec__dns_types__header_type__arcount : unsigned_short
}

function us_split_fields_MessageID__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__messageid

function us_split_fields_QR__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__qr

function us_split_fields_Opcode__projection(a: us_split_fields) : opcode_type =
  (a).rec__dns_types__header_type__opcode

function us_split_fields_AA__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__aa

function us_split_fields_TC__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__tc

function us_split_fields_RD__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__rd

function us_split_fields_RA__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__ra

function us_split_fields_Res1__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__res1

function us_split_fields_Res2__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__res2

function us_split_fields_Res3__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__res3

function us_split_fields_RCode__projection(a: us_split_fields) : response_code =
  (a).rec__dns_types__header_type__rcode

function us_split_fields_QDCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__qdcount

function us_split_fields_ANCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__ancount

function us_split_fields_NSCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__nscount

function us_split_fields_ARCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__arcount

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq16 : us_rep, us_rep -> bool

axiom bool_eq_def15 :
  (forall a:us_rep. forall b:us_rep [bool_eq16(a, b)].
  (((((((((((((((((to_rep2(((a).us_split_fields1).rec__dns_types__header_type__messageid) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__messageid)) and
  (((a).us_split_fields1).rec__dns_types__header_type__qr = ((b).us_split_fields1).rec__dns_types__header_type__qr)) and
  (to_rep3(((a).us_split_fields1).rec__dns_types__header_type__opcode) = to_rep3(((b).us_split_fields1).rec__dns_types__header_type__opcode))) and
  (((a).us_split_fields1).rec__dns_types__header_type__aa = ((b).us_split_fields1).rec__dns_types__header_type__aa)) and
  (((a).us_split_fields1).rec__dns_types__header_type__tc = ((b).us_split_fields1).rec__dns_types__header_type__tc)) and
  (((a).us_split_fields1).rec__dns_types__header_type__rd = ((b).us_split_fields1).rec__dns_types__header_type__rd)) and
  (((a).us_split_fields1).rec__dns_types__header_type__ra = ((b).us_split_fields1).rec__dns_types__header_type__ra)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res1 = ((b).us_split_fields1).rec__dns_types__header_type__res1)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res2 = ((b).us_split_fields1).rec__dns_types__header_type__res2)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res3 = ((b).us_split_fields1).rec__dns_types__header_type__res3)) and
  (to_rep4(((a).us_split_fields1).rec__dns_types__header_type__rcode) = to_rep4(((b).us_split_fields1).rec__dns_types__header_type__rcode))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__qdcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__qdcount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__ancount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__ancount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__nscount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__nscount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__arcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__arcount))) ->
  (bool_eq16(a, b) = true)) and
  ((not (((((((((((((((to_rep2(((a).us_split_fields1).rec__dns_types__header_type__messageid) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__messageid)) and
  (((a).us_split_fields1).rec__dns_types__header_type__qr = ((b).us_split_fields1).rec__dns_types__header_type__qr)) and
  (to_rep3(((a).us_split_fields1).rec__dns_types__header_type__opcode) = to_rep3(((b).us_split_fields1).rec__dns_types__header_type__opcode))) and
  (((a).us_split_fields1).rec__dns_types__header_type__aa = ((b).us_split_fields1).rec__dns_types__header_type__aa)) and
  (((a).us_split_fields1).rec__dns_types__header_type__tc = ((b).us_split_fields1).rec__dns_types__header_type__tc)) and
  (((a).us_split_fields1).rec__dns_types__header_type__rd = ((b).us_split_fields1).rec__dns_types__header_type__rd)) and
  (((a).us_split_fields1).rec__dns_types__header_type__ra = ((b).us_split_fields1).rec__dns_types__header_type__ra)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res1 = ((b).us_split_fields1).rec__dns_types__header_type__res1)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res2 = ((b).us_split_fields1).rec__dns_types__header_type__res2)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res3 = ((b).us_split_fields1).rec__dns_types__header_type__res3)) and
  (to_rep4(((a).us_split_fields1).rec__dns_types__header_type__rcode) = to_rep4(((b).us_split_fields1).rec__dns_types__header_type__rcode))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__qdcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__qdcount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__ancount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__ancount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__nscount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__nscount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__arcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__arcount)))) ->
  (bool_eq16(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short. (0 <= object__size({
  us_split_fields1 = { rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } })))

logic dns_types__header_type__messageid__first__bit : int

logic dns_types__header_type__messageid__last__bit : int

logic dns_types__header_type__messageid__position : int

axiom dns_types__header_type__messageid__first__bit_axiom :
  (0 <= dns_types__header_type__messageid__first__bit)

axiom dns_types__header_type__messageid__last__bit_axiom :
  (dns_types__header_type__messageid__first__bit <  dns_types__header_type__messageid__last__bit)

axiom dns_types__header_type__messageid__position_axiom :
  (0 <= dns_types__header_type__messageid__position)

logic dns_types__header_type__qr__first__bit : int

logic dns_types__header_type__qr__last__bit : int

logic dns_types__header_type__qr__position : int

axiom dns_types__header_type__qr__first__bit_axiom :
  (0 <= dns_types__header_type__qr__first__bit)

axiom dns_types__header_type__qr__last__bit_axiom :
  (dns_types__header_type__qr__first__bit <  dns_types__header_type__qr__last__bit)

axiom dns_types__header_type__qr__position_axiom :
  (0 <= dns_types__header_type__qr__position)

logic dns_types__header_type__opcode__first__bit : int

logic dns_types__header_type__opcode__last__bit : int

logic dns_types__header_type__opcode__position : int

axiom dns_types__header_type__opcode__first__bit_axiom :
  (0 <= dns_types__header_type__opcode__first__bit)

axiom dns_types__header_type__opcode__last__bit_axiom :
  (dns_types__header_type__opcode__first__bit <  dns_types__header_type__opcode__last__bit)

axiom dns_types__header_type__opcode__position_axiom :
  (0 <= dns_types__header_type__opcode__position)

logic dns_types__header_type__aa__first__bit : int

logic dns_types__header_type__aa__last__bit : int

logic dns_types__header_type__aa__position : int

axiom dns_types__header_type__aa__first__bit_axiom :
  (0 <= dns_types__header_type__aa__first__bit)

axiom dns_types__header_type__aa__last__bit_axiom :
  (dns_types__header_type__aa__first__bit <  dns_types__header_type__aa__last__bit)

axiom dns_types__header_type__aa__position_axiom :
  (0 <= dns_types__header_type__aa__position)

logic dns_types__header_type__tc__first__bit : int

logic dns_types__header_type__tc__last__bit : int

logic dns_types__header_type__tc__position : int

axiom dns_types__header_type__tc__first__bit_axiom :
  (0 <= dns_types__header_type__tc__first__bit)

axiom dns_types__header_type__tc__last__bit_axiom :
  (dns_types__header_type__tc__first__bit <  dns_types__header_type__tc__last__bit)

axiom dns_types__header_type__tc__position_axiom :
  (0 <= dns_types__header_type__tc__position)

logic dns_types__header_type__rd__first__bit : int

logic dns_types__header_type__rd__last__bit : int

logic dns_types__header_type__rd__position : int

axiom dns_types__header_type__rd__first__bit_axiom :
  (0 <= dns_types__header_type__rd__first__bit)

axiom dns_types__header_type__rd__last__bit_axiom :
  (dns_types__header_type__rd__first__bit <  dns_types__header_type__rd__last__bit)

axiom dns_types__header_type__rd__position_axiom :
  (0 <= dns_types__header_type__rd__position)

logic dns_types__header_type__ra__first__bit : int

logic dns_types__header_type__ra__last__bit : int

logic dns_types__header_type__ra__position : int

axiom dns_types__header_type__ra__first__bit_axiom :
  (0 <= dns_types__header_type__ra__first__bit)

axiom dns_types__header_type__ra__last__bit_axiom :
  (dns_types__header_type__ra__first__bit <  dns_types__header_type__ra__last__bit)

axiom dns_types__header_type__ra__position_axiom :
  (0 <= dns_types__header_type__ra__position)

logic dns_types__header_type__res1__first__bit : int

logic dns_types__header_type__res1__last__bit : int

logic dns_types__header_type__res1__position : int

axiom dns_types__header_type__res1__first__bit_axiom :
  (0 <= dns_types__header_type__res1__first__bit)

axiom dns_types__header_type__res1__last__bit_axiom :
  (dns_types__header_type__res1__first__bit <  dns_types__header_type__res1__last__bit)

axiom dns_types__header_type__res1__position_axiom :
  (0 <= dns_types__header_type__res1__position)

logic dns_types__header_type__res2__first__bit : int

logic dns_types__header_type__res2__last__bit : int

logic dns_types__header_type__res2__position : int

axiom dns_types__header_type__res2__first__bit_axiom :
  (0 <= dns_types__header_type__res2__first__bit)

axiom dns_types__header_type__res2__last__bit_axiom :
  (dns_types__header_type__res2__first__bit <  dns_types__header_type__res2__last__bit)

axiom dns_types__header_type__res2__position_axiom :
  (0 <= dns_types__header_type__res2__position)

logic dns_types__header_type__res3__first__bit : int

logic dns_types__header_type__res3__last__bit : int

logic dns_types__header_type__res3__position : int

axiom dns_types__header_type__res3__first__bit_axiom :
  (0 <= dns_types__header_type__res3__first__bit)

axiom dns_types__header_type__res3__last__bit_axiom :
  (dns_types__header_type__res3__first__bit <  dns_types__header_type__res3__last__bit)

axiom dns_types__header_type__res3__position_axiom :
  (0 <= dns_types__header_type__res3__position)

logic dns_types__header_type__rcode__first__bit : int

logic dns_types__header_type__rcode__last__bit : int

logic dns_types__header_type__rcode__position : int

axiom dns_types__header_type__rcode__first__bit_axiom :
  (0 <= dns_types__header_type__rcode__first__bit)

axiom dns_types__header_type__rcode__last__bit_axiom :
  (dns_types__header_type__rcode__first__bit <  dns_types__header_type__rcode__last__bit)

axiom dns_types__header_type__rcode__position_axiom :
  (0 <= dns_types__header_type__rcode__position)

logic dns_types__header_type__qdcount__first__bit : int

logic dns_types__header_type__qdcount__last__bit : int

logic dns_types__header_type__qdcount__position : int

axiom dns_types__header_type__qdcount__first__bit_axiom :
  (0 <= dns_types__header_type__qdcount__first__bit)

axiom dns_types__header_type__qdcount__last__bit_axiom :
  (dns_types__header_type__qdcount__first__bit <  dns_types__header_type__qdcount__last__bit)

axiom dns_types__header_type__qdcount__position_axiom :
  (0 <= dns_types__header_type__qdcount__position)

logic dns_types__header_type__ancount__first__bit : int

logic dns_types__header_type__ancount__last__bit : int

logic dns_types__header_type__ancount__position : int

axiom dns_types__header_type__ancount__first__bit_axiom :
  (0 <= dns_types__header_type__ancount__first__bit)

axiom dns_types__header_type__ancount__last__bit_axiom :
  (dns_types__header_type__ancount__first__bit <  dns_types__header_type__ancount__last__bit)

axiom dns_types__header_type__ancount__position_axiom :
  (0 <= dns_types__header_type__ancount__position)

logic dns_types__header_type__nscount__first__bit : int

logic dns_types__header_type__nscount__last__bit : int

logic dns_types__header_type__nscount__position : int

axiom dns_types__header_type__nscount__first__bit_axiom :
  (0 <= dns_types__header_type__nscount__first__bit)

axiom dns_types__header_type__nscount__last__bit_axiom :
  (dns_types__header_type__nscount__first__bit <  dns_types__header_type__nscount__last__bit)

axiom dns_types__header_type__nscount__position_axiom :
  (0 <= dns_types__header_type__nscount__position)

logic dns_types__header_type__arcount__first__bit : int

logic dns_types__header_type__arcount__last__bit : int

logic dns_types__header_type__arcount__position : int

axiom dns_types__header_type__arcount__first__bit_axiom :
  (0 <= dns_types__header_type__arcount__first__bit)

axiom dns_types__header_type__arcount__last__bit_axiom :
  (dns_types__header_type__arcount__first__bit <  dns_types__header_type__arcount__last__bit)

axiom dns_types__header_type__arcount__position_axiom :
  (0 <= dns_types__header_type__arcount__position)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy11 : unsigned_short

logic dummy12 : bool

logic dummy13 : opcode_type

logic dummy14 : bool

logic dummy15 : bool

logic dummy16 : bool

logic dummy17 : bool

logic dummy18 : bool

logic dummy19 : bool

logic dummy20 : bool

logic dummy21 : response_code

logic dummy22 : unsigned_short

logic dummy23 : unsigned_short

logic dummy24 : unsigned_short

logic dummy25 : unsigned_short

type header_type__ref = { header_type__content : us_rep
}

function header_type__ref___projection(a: header_type__ref) : us_rep =
  (a).header_type__content

logic dummy26 : (int,byte) farray

logic value__size1 : int

logic object__size1 : (int,byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,byte) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,byte) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,byte) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,byte) farray. (0 <= object__alignment1(a)))

logic user_eq12 : (int,byte) farray, (int,byte) farray -> bool

type us_split_fields2 = { rec__dns_types__dns_packet__header : us_rep;
rec__dns_types__dns_packet__bytes : (int,byte) farray
}

function us_split_fields_Header__projection(a: us_split_fields2) : us_rep =
  (a).rec__dns_types__dns_packet__header

function us_split_fields_Bytes__projection(a: us_split_fields2) : (int,byte) farray =
  (a).rec__dns_types__dns_packet__bytes

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq17 : us_rep1, us_rep1 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq17(a, b)].
  ((((bool_eq16(((a).us_split_fields3).rec__dns_types__dns_packet__header,
  ((b).us_split_fields3).rec__dns_types__dns_packet__header) = true) and
  (bool_eq12(((a).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180, ((b).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180) = true)) -> (bool_eq17(a, b) = true)) and
  ((not ((bool_eq16(((a).us_split_fields3).rec__dns_types__dns_packet__header,
  ((b).us_split_fields3).rec__dns_types__dns_packet__header) = true) and
  (bool_eq12(((a).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180, ((b).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180) = true))) -> (bool_eq17(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  forall a15:(int,byte) farray. (0 <= object__size2({ us_split_fields3 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } };
  rec__dns_types__dns_packet__bytes = a15 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  forall a15:(int,byte) farray. (0 <= object__alignment2({ us_split_fields3 =
  { rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } };
  rec__dns_types__dns_packet__bytes = a15 } })))

logic dns_types__dns_packet__header__first__bit : int

logic dns_types__dns_packet__header__last__bit : int

logic dns_types__dns_packet__header__position : int

axiom dns_types__dns_packet__header__first__bit_axiom :
  (0 <= dns_types__dns_packet__header__first__bit)

axiom dns_types__dns_packet__header__last__bit_axiom :
  (dns_types__dns_packet__header__first__bit <  dns_types__dns_packet__header__last__bit)

axiom dns_types__dns_packet__header__position_axiom :
  (0 <= dns_types__dns_packet__header__position)

logic dns_types__dns_packet__bytes__first__bit : int

logic dns_types__dns_packet__bytes__last__bit : int

logic dns_types__dns_packet__bytes__position : int

axiom dns_types__dns_packet__bytes__first__bit_axiom :
  (0 <= dns_types__dns_packet__bytes__first__bit)

axiom dns_types__dns_packet__bytes__last__bit_axiom :
  (dns_types__dns_packet__bytes__first__bit <  dns_types__dns_packet__bytes__last__bit)

axiom dns_types__dns_packet__bytes__position_axiom :
  (0 <= dns_types__dns_packet__bytes__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy27 : unsigned_short

logic dummy28 : bool

logic dummy29 : opcode_type

logic dummy30 : bool

logic dummy31 : bool

logic dummy32 : bool

logic dummy33 : bool

logic dummy34 : bool

logic dummy35 : bool

logic dummy36 : bool

logic dummy37 : response_code

logic dummy38 : unsigned_short

logic dummy39 : unsigned_short

logic dummy40 : unsigned_short

logic dummy41 : unsigned_short

logic dummy42 : (int,byte) farray

type dns_packet__ref = { dns_packet__content : us_rep1
}

function dns_packet__ref___projection(a: dns_packet__ref) : us_rep1 =
  (a).dns_packet__content

type wirestringtypeindex

predicate in_range11(x: int) = ((1 <= x) and (x <= 129))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq14 : wirestringtypeindex, wirestringtypeindex -> bool

logic dummy43 : wirestringtypeindex

type wirestringtypeindex__ref = { wirestringtypeindex__content :
wirestringtypeindex
}

function wirestringtypeindex__ref___projection(a: wirestringtypeindex__ref) : wirestringtypeindex =
  (a).wirestringtypeindex__content

logic input_packet : unsigned_short

logic input_packet1 : bool

logic input_packet2 : opcode_type

logic input_packet3 : bool

logic input_packet4 : bool

logic input_packet5 : bool

logic input_packet6 : bool

logic input_packet7 : bool

logic input_packet8 : bool

logic input_packet9 : bool

logic input_packet10 : response_code

logic input_packet11 : unsigned_short

logic input_packet12 : unsigned_short

logic input_packet13 : unsigned_short

logic input_packet14 : unsigned_short

logic input_packet15 : (int,byte) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic input_bytes : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

type source

predicate in_range12(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq15 : source, source -> bool

logic dummy44 : source

type source__ref = { source__content : source
}

function source__ref___4__projection(a: source__ref) : source =
  (a).source__content

type target

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq16 : target, target -> bool

logic dummy45 : target

type target__ref = { target__content : target
}

function target__ref___3__projection(a: target__ref) : target =
  (a).target__content

logic type_to_natural : int -> int

logic type_to_natural__function_guard : int, int -> prop

axiom type_to_natural__post_axiom :
  (forall s:int [type_to_natural(s)]. (in_range12(s) ->
  in_range13(type_to_natural(s))))

type source1

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq17 : source1, source1 -> bool

logic dummy46 : source1

type source__ref1 = { source__content1 : source1
}

function source__ref___5__projection(a: source__ref1) : source1 =
  (a).source__content1

type target1

predicate in_range15(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq18 : target1, target1 -> bool

logic dummy47 : target1

type target__ref1 = { target__content1 : target1
}

function target__ref___4__projection(a: target__ref1) : target1 =
  (a).target__content1

logic to_type : int -> int

logic to_type__function_guard : int, int -> prop

axiom to_type__post_axiom :
  (forall s:int [to_type(s)]. (in_range14(s) -> in_range15(to_type(s))))

type source2

predicate in_range16(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq19 : source2, source2 -> bool

logic dummy48 : source2

type source__ref2 = { source__content2 : source2
}

function source__ref___6__projection(a: source__ref2) : source2 =
  (a).source__content2

type target2

predicate in_range17(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq20 : target2, target2 -> bool

logic dummy49 : target2

type target__ref2 = { target__content2 : target2
}

function target__ref___5__projection(a: target__ref2) : target2 =
  (a).target__content2

logic class_to_natural : int -> int

logic class_to_natural__function_guard : int, int -> prop

axiom class_to_natural__post_axiom :
  (forall s:int [class_to_natural(s)]. (in_range16(s) ->
  in_range17(class_to_natural(s))))

type source3

predicate in_range18(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE19 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_image -> prop

logic attr__ATTRIBUTE_VALUE19 : us_image -> int

logic user_eq21 : source3, source3 -> bool

logic dummy50 : source3

type source__ref3 = { source__content3 : source3
}

function source__ref___7__projection(a: source__ref3) : source3 =
  (a).source__content3

type target3

predicate in_range19(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def25 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE20 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_image -> prop

logic attr__ATTRIBUTE_VALUE20 : us_image -> int

logic user_eq22 : target3, target3 -> bool

logic dummy51 : target3

type target__ref3 = { target__content3 : target3
}

function target__ref___6__projection(a: target__ref3) : target3 =
  (a).target__content3

logic to_class : int -> int

logic to_class__function_guard : int, int -> prop

axiom to_class__post_axiom :
  (forall s:int [to_class(s)]. (in_range18(s) -> in_range19(to_class(s))))

logic temp___5823 : int -> (int,character) farray

axiom def_axiom :
  (forall temp___5825:int. (in_range3(temp___5825) ->
  (forall temp___5826:int.
  (to_rep((temp___5823(temp___5825)[temp___5826])) = temp___5825))))

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

 (* File "process_dns_request.adb", line 636, characters 0-0 *)
goal WP_parameter_def :
  (forall domainname:(int,character) farray. forall query_type1:int.
  forall query_class1:int. forall end_byte:int. forall byte1:int.
  forall i:int. forall qt_natural:int. forall qc_natural:int.
  forall o:character. forall o1:int. forall o2:(int,character) farray.
  forall o3:int. forall o4:int. forall result:int. forall byte2:int.
  forall result1:int. forall i1:int. forall result2:(int,character) farray.
  forall domainname1:(int,character) farray.
  forall domainname2:(int,character) farray. forall byte3:int. forall i2:int.
  forall result3:(int,character) farray.
  forall domainname3:(int,character) farray. forall result4:int.
  forall i3:int. forall result5:int. forall byte4:int.
  (in_range4(input_bytes) -> (((0 <= 18) -> in_range7(query_type1)) ->
  (((0 <= 4) -> in_range6(query_class1)) -> (((1 <= 8180) ->
  in_range5(end_byte)) -> (((13 <= input_bytes) and (input_bytes <  1000)) ->
  ((({ int__content = result } = { int__content = byte1 }) and
  (byte2 = 1)) -> (in_range5(byte2) -> ((({ int__content = result1 } = {
  int__content = i }) and (i1 = 1)) -> (in_range2(i1) ->
  (((0 <= 2147483647) -> in_range2(qt_natural)) -> (((0 <= 2147483647) ->
  in_range2(qc_natural)) -> ((({ map__content = result2 } = { map__content =
  domainname }) and (domainname1 = temp___5823(32))) ->
  ((((byte2 <= (input_bytes - 5)) and
  (not (to_rep1((input_packet15[byte2])) = rliteral))) and (i1 <  129)) ->
  (((((1 <= i2) and (i2 <  129)) and (1 <= byte3)) and
  (byte3 <= (input_bytes - 5))) -> ((((((1 <= 8180) -> in_range5(byte3)) and
  ((0 <= 2147483647) -> in_range2(i2))) and
  (((byte3 <= (input_bytes - 5)) and
  (not (to_rep1((input_packet15[byte3])) = rliteral))) and (i2 <  129))) and
  ((((to_rep(o) = tqtint(to_rep1((input_packet15[byte3])))) and
  ((((1 <= i2) and (i2 <= 129)) and (o1 = i2)) and
  (o2 = (domainname2[o1 <- o])))) and ((domainname2 = result3) and
  (domainname3 = o2))) and ((((o3 = (i2 + 1)) and in_range1((i2 + 1))) and
  ((i2 = result4) and (i3 = o3))) and ((((o4 = (byte3 + 1)) and
  in_range5((byte3 + 1))) and ((byte3 = result5) and (byte4 = o4))) and
  (((byte4 <= (input_bytes - 5)) and
  (not (to_rep1((input_packet15[byte4])) = rliteral))) and
  (i3 <  129)))))) -> (1 <= i3)))))))))))))))))
