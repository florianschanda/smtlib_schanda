(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth3 ((_ BitVec 64) Int) Bool)
(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl3 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left4 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right4 v (bv2nat n)))))
(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth3 x (bv2nat i)) (nth_bv3 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))
(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)
(declare-fun writereg32post__function_guard (Bool (_ BitVec 64) (_ BitVec 32)) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_236 (_ BitVec 64)) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned32 unsigned32) Bool)
(declare-const dummy1 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant1 ((temp___expr_243 (_ BitVec 32)) (temp___is_init_239 Bool) (temp___skip_constant_240 Bool) (temp___do_toplevel_241 Bool) (temp___do_typ_inv_242 Bool)) Bool true)
(assert (forall ((x86__rcx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rcx true true true true) (let ((result (ecx x86__rcx))) (and (= result (readreg32 x86__rcx)) (dynamic_invariant1 result true false true true)))) :pattern ((ecx x86__rcx)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rdx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rdx true true true true) (let ((result (edx x86__rdx))) (and (= result (readreg32 x86__rdx)) (dynamic_invariant1 result true false true true)))) :pattern ((edx x86__rdx)))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)
(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))
(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rsp (_ BitVec 64))) (! (=> (dynamic_invariant x86__rsp true true true true) (let ((result (esp x86__rsp))) (and (= result (readreg32 x86__rsp)) (dynamic_invariant1 result true false true true)))) :pattern ((esp x86__rsp)))))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))
(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rsi (_ BitVec 64))) (! (=> (dynamic_invariant x86__rsi true true true true) (let ((result (esi x86__rsi))) (and (= result (readreg32 x86__rsi)) (dynamic_invariant1 result true false true true)))) :pattern ((esi x86__rsi)))))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))
(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rdi (_ BitVec 64))) (! (=> (dynamic_invariant x86__rdi true true true true) (let ((result (edi x86__rdi))) (and (= result (readreg32 x86__rdi)) (dynamic_invariant1 result true false true true)))) :pattern ((edi x86__rdi)))))
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (unsigned8 unsigned8) Bool)
(declare-const dummy2 unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int5 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int5 x)) :pattern ((to_int5 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun readmem8 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))
(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(define-fun dynamic_invariant2 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem8 addr x86__memory))) (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant2 result true false true true)))) :pattern ((readmem8 addr x86__memory))))))
(declare-fun readmem32 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))
(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem32 addr x86__memory))) (and (and (and (and (= (bvand result #x000000FF) ((_ zero_extend 24) (to_rep (select x86__memory addr)))) (= (bvand result #x0000FF00) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x00000100))) (= (bvand result #x00FF0000) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x00010000))) (= (bvand result #xFF000000) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x01000000))) (dynamic_invariant1 result true false true true)))) :pattern ((readmem32 addr x86__memory))))))
(declare-fun readmem64 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem64 addr x86__memory))) (and (and (and (and (and (and (and (and (= (bvand result #x00000000000000FF) ((_ zero_extend 56) (to_rep (select x86__memory addr)))) (= (bvand result #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0000000000000100))) (= (bvand result #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x0000000000010000))) (= (bvand result #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x0000000001000000))) (= (bvand result #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000004)))) #x0000000100000000))) (= (bvand result #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000005)))) #x0000010000000000))) (= (bvand result #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000006)))) #x0001000000000000))) (= (bvand result #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000007)))) #x0100000000000000))) (dynamic_invariant result true false true true)))) :pattern ((readmem64 addr x86__memory))))))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const attr__ATTRIBUTE_ADDRESS26 Int)
(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-sort unsigned16 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))
(declare-fun user_eq3 (unsigned16 unsigned16) Bool)
(declare-const dummy3 unsigned16)
(declare-datatypes () ((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16 (unsigned16__content a))
(define-fun dynamic_invariant3 ((temp___expr_250 (_ BitVec 16)) (temp___is_init_246 Bool) (temp___skip_constant_247 Bool) (temp___do_toplevel_248 Bool) (temp___do_typ_inv_249 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS27 Int)
(declare-const attr__ATTRIBUTE_ADDRESS28 Int)
(declare-const attr__ATTRIBUTE_ADDRESS29 Int)
(declare-const attr__ATTRIBUTE_ADDRESS30 Int)
(declare-const attr__ATTRIBUTE_ADDRESS31 Int)
(declare-const attr__ATTRIBUTE_ADDRESS32 Int)
(declare-const attr__ATTRIBUTE_ADDRESS33 Int)
(declare-const attr__ATTRIBUTE_ADDRESS34 Int)
(declare-sort unsigned641 0)
(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (unsigned641 unsigned641) Bool)
(declare-const dummy4 unsigned641)
(declare-datatypes () ((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641 (unsigned64__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_314 (_ BitVec 64)) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool true)
(declare-sort unsigned81 0)
(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (unsigned81 unsigned81) Bool)
(declare-const dummy5 unsigned81)
(declare-datatypes () ((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref___2__projection ((a unsigned8__ref1)) unsigned81 (unsigned8__content1 a))
(define-fun dynamic_invariant5 ((temp___expr_335 (_ BitVec 8)) (temp___is_init_331 Bool) (temp___skip_constant_332 Bool) (temp___do_toplevel_333 Bool) (temp___do_typ_inv_334 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS35 Int)
(declare-const attr__ATTRIBUTE_ADDRESS36 Int)
(declare-const attr__ATTRIBUTE_ADDRESS37 Int)
(declare-const attr__ATTRIBUTE_ADDRESS38 Int)
(declare-const attr__ATTRIBUTE_ADDRESS39 Int)
(declare-const attr__ATTRIBUTE_ADDRESS40 Int)
(declare-const attr__ATTRIBUTE_ADDRESS41 Int)
(declare-const attr__ATTRIBUTE_ADDRESS42 Int)
(declare-const attr__ATTRIBUTE_ADDRESS43 Int)
(declare-const attr__ATTRIBUTE_ADDRESS44 Int)
(declare-const attr__ATTRIBUTE_ADDRESS45 Int)
(declare-const attr__ATTRIBUTE_ADDRESS46 Int)
(declare-const attr__ATTRIBUTE_ADDRESS47 Int)
(declare-const attr__ATTRIBUTE_ADDRESS48 Int)
(declare-const attr__ATTRIBUTE_ADDRESS49 Int)
(declare-const attr__ATTRIBUTE_ADDRESS50 Int)
(assert (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64)) (range_size (_ BitVec 64))) (! (=> (and (and (dynamic_invariant var true true true true) (dynamic_invariant bottom true true true true)) (dynamic_invariant range_size true true true true)) (= (= (inrange64 var bottom range_size) true) (ite (bvule bottom (bvadd (bvsub #xFFFFFFFFFFFFFFFF range_size) #x0000000000000001)) (and (bvule bottom var) (bvule var (bvadd bottom (bvsub range_size #x0000000000000001)))) (or (and (bvule bottom var) (bvule var #xFFFFFFFFFFFFFFFF)) (bvule var (bvsub (bvsub range_size (bvsub #xFFFFFFFFFFFFFFFF bottom)) #x0000000000000002)))))) :pattern ((inrange64 var bottom range_size)))))
(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))
(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true true) (let ((result (readreg16 reg))) (and (= result ((_ extract 15 0) (bvand reg #x000000000000FFFF))) (dynamic_invariant3 result true false true true)))) :pattern ((readreg16 reg)))))
(assert (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 16))) (! (=> (and (and (dynamic_invariant regold true true true true) (dynamic_invariant regnew true true true true)) (dynamic_invariant3 val__ true true true true)) (= (= (writereg16post regold regnew val__) true) (and (= (readreg16 regnew) val__) (= (bvand regnew #xFFFFFFFFFFFF0000) (bvand regold #xFFFFFFFFFFFF0000))))) :pattern ((writereg16post regold regnew val__))))))
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true true) (let ((result (readreg32 reg))) (and (= result ((_ extract 31 0) (bvand reg #x00000000FFFFFFFF))) (dynamic_invariant1 result true false true true)))) :pattern ((readreg32 reg)))))
(assert (forall ((regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 32))) (! (=> (and (dynamic_invariant regnew true true true true) (dynamic_invariant1 val__ true true true true)) (= (= (writereg32post regnew val__) true) (and (= (readreg32 regnew) val__) (= (bvand regnew #xFFFFFFFF00000000) #x0000000000000000)))) :pattern ((writereg32post regnew val__))))))
(declare-const zeroflag Bool)
(declare-const carryflag Bool)
(declare-const signflag Bool)
(declare-const overflowflag Bool)
(declare-const xmm0 (_ BitVec 64))
(declare-const xmm1 (_ BitVec 64))
(declare-const xmm2 (_ BitVec 64))
(declare-const xmm3 (_ BitVec 64))
(declare-const xmm6 (_ BitVec 64))
(declare-const rbx t__ref3)
(declare-const rsp t__ref3)
(declare-const rbp t__ref3)
(declare-const rsi t__ref3)
(declare-const rdi t__ref3)
(declare-const r8 t__ref3)
(declare-const r12 t__ref3)
(declare-const r13 t__ref3)
(declare-const r14 t__ref3)
(declare-const r15 t__ref3)
(declare-const memory map__ref)
(declare-const savestackptr t__ref3)
(declare-const ra0 t__ref)
(declare-const ra1 t__ref)
(declare-const ra2 t__ref)
(declare-const ra3 t__ref)
(declare-const ra4 t__ref)
(declare-const ra5 t__ref)
(declare-const ra6 t__ref)
(declare-const ra7 t__ref)
(declare-const saverbx t__ref3)
(declare-const saverbp t__ref3)
(declare-const saver12 t__ref3)
(declare-const saver13 t__ref3)
(declare-const saver14 t__ref3)
(declare-const saver15 t__ref3)
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 8))
(declare-const o2 (_ BitVec 8))
(declare-const o3 (_ BitVec 8))
(declare-const o4 (_ BitVec 8))
(declare-const o5 (_ BitVec 8))
(declare-const o6 (_ BitVec 8))
(declare-const o7 (_ BitVec 8))
(declare-const o8 (_ BitVec 8))
(declare-const o9 (_ BitVec 8))
(declare-const o10 (_ BitVec 8))
(declare-const o11 (_ BitVec 8))
(declare-const o12 (_ BitVec 8))
(declare-const o13 (_ BitVec 8))
(declare-const o14 (_ BitVec 8))
(declare-const o15 (_ BitVec 8))
(declare-const o16 (_ BitVec 8))
(declare-const o17 (_ BitVec 64))
(declare-const o18 (_ BitVec 64))
(declare-const o19 (_ BitVec 64))
(declare-const o20 (_ BitVec 64))
(declare-const o21 (_ BitVec 64))
(declare-const o22 (_ BitVec 64))
(declare-const o23 (_ BitVec 64))
(declare-const o24 (_ BitVec 64))
(declare-const o25 (_ BitVec 64))
(declare-const o26 (_ BitVec 64))
(declare-const o27 (_ BitVec 32))
(declare-const o28 (_ BitVec 32))
(declare-const o29 (_ BitVec 64))
(declare-const o30 (_ BitVec 32))
(declare-const o31 (_ BitVec 32))
(declare-const o32 (_ BitVec 32))
(declare-const o33 (_ BitVec 32))
(declare-const o34 Bool)
(declare-const o35 (_ BitVec 32))
(declare-const o36 (_ BitVec 32))
(declare-const o37 (_ BitVec 32))
(declare-const o38 Bool)
(declare-const o39 (_ BitVec 64))
(declare-const o40 (_ BitVec 64))
(declare-const o41 (_ BitVec 64))
(declare-const o42 (_ BitVec 64))
(declare-const o43 (_ BitVec 32))
(declare-const o44 (_ BitVec 32))
(declare-const o45 (_ BitVec 64))
(declare-const o46 (_ BitVec 32))
(declare-const o47 (_ BitVec 32))
(declare-const o48 (_ BitVec 32))
(declare-const o49 (_ BitVec 32))
(declare-const o50 Bool)
(declare-const o51 (_ BitVec 32))
(declare-const o52 (_ BitVec 32))
(declare-const o53 (_ BitVec 32))
(declare-const o54 Bool)
(declare-const o55 (_ BitVec 64))
(declare-const o56 (_ BitVec 64))
(declare-const o57 (_ BitVec 64))
(declare-const o58 (_ BitVec 64))
(declare-const o59 (_ BitVec 32))
(declare-const o60 (_ BitVec 32))
(declare-const o61 (_ BitVec 64))
(declare-const o62 (_ BitVec 32))
(declare-const o63 (_ BitVec 32))
(declare-const o64 (_ BitVec 32))
(declare-const o65 (_ BitVec 32))
(declare-const o66 Bool)
(declare-const o67 (_ BitVec 32))
(declare-const o68 (_ BitVec 32))
(declare-const o69 (_ BitVec 32))
(declare-const o70 Bool)
(declare-const o71 (_ BitVec 64))
(declare-const o72 (_ BitVec 64))
(declare-const o73 (_ BitVec 64))
(declare-const o74 (_ BitVec 32))
(declare-const o75 (_ BitVec 32))
(declare-const o76 (_ BitVec 64))
(declare-const o77 (_ BitVec 32))
(declare-const o78 (_ BitVec 32))
(declare-const o79 (_ BitVec 32))
(declare-const o80 (_ BitVec 32))
(declare-const o81 Bool)
(declare-const o82 (_ BitVec 32))
(declare-const o83 (_ BitVec 32))
(declare-const o84 (_ BitVec 32))
(declare-const o85 Bool)
(declare-const o86 (_ BitVec 64))
(declare-const o87 (_ BitVec 32))
(declare-const o88 (_ BitVec 32))
(declare-const o89 (_ BitVec 64))
(declare-const o90 (_ BitVec 32))
(declare-const o91 (_ BitVec 32))
(declare-const o92 (_ BitVec 64))
(declare-const o93 (_ BitVec 32))
(declare-const o94 (_ BitVec 64))
(declare-const o95 (_ BitVec 64))
(declare-const o96 (_ BitVec 64))
(declare-const o97 (_ BitVec 64))
(declare-const o98 (_ BitVec 64))
(declare-const o99 (_ BitVec 64))
(declare-const result t__ref3)
(declare-const savestackptr1 (_ BitVec 64))
(declare-const result1 t__ref)
(declare-const ra01 (_ BitVec 8))
(declare-const result2 t__ref)
(declare-const ra11 (_ BitVec 8))
(declare-const result3 t__ref)
(declare-const ra21 (_ BitVec 8))
(declare-const result4 t__ref)
(declare-const ra31 (_ BitVec 8))
(declare-const result5 t__ref)
(declare-const ra41 (_ BitVec 8))
(declare-const result6 t__ref)
(declare-const ra51 (_ BitVec 8))
(declare-const result7 t__ref)
(declare-const ra61 (_ BitVec 8))
(declare-const result8 t__ref)
(declare-const ra71 (_ BitVec 8))
(declare-const result9 t__ref3)
(declare-const saverbx1 (_ BitVec 64))
(declare-const result10 t__ref3)
(declare-const saverbp1 (_ BitVec 64))
(declare-const result11 t__ref3)
(declare-const saver121 (_ BitVec 64))
(declare-const result12 t__ref3)
(declare-const saver131 (_ BitVec 64))
(declare-const result13 t__ref3)
(declare-const saver141 (_ BitVec 64))
(declare-const result14 t__ref3)
(declare-const saver151 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result15 t__ref3)
(declare-const rsp1 (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const result16 t__ref3)
(declare-const rsp2 (_ BitVec 64))
(declare-const rdi1 (_ BitVec 64))
(declare-const memory3 (Array (_ BitVec 64) unsigned8))
(declare-const result17 t__ref3)
(declare-const rsp3 (_ BitVec 64))
(declare-const memory4 (Array (_ BitVec 64) unsigned8))
(declare-const result18 t__ref3)
(declare-const rsp4 (_ BitVec 64))
(declare-const memory5 (Array (_ BitVec 64) unsigned8))
(declare-const result19 t__ref3)
(declare-const rsp5 (_ BitVec 64))
(declare-const memory6 (Array (_ BitVec 64) unsigned8))
(declare-const result20 t__ref3)
(declare-const rsp6 (_ BitVec 64))
(declare-const rbx1 (_ BitVec 64))
(declare-const result21 t__ref3)
(declare-const rsp7 (_ BitVec 64))
(declare-const result22 t__ref3)
(declare-const rsp8 (_ BitVec 64))
(declare-const rsp9 (_ BitVec 64))
(declare-const result23 t__ref3)
(declare-const rsi1 (_ BitVec 64))
(declare-const result24 t__ref3)
(declare-const rdi2 (_ BitVec 64))
(declare-const result25 t__ref3)
(declare-const rbp1 (_ BitVec 64))
(declare-const result26 t__ref3)
(declare-const xmm31 (_ BitVec 64))
(declare-const result27 t__ref3)
(declare-const xmm21 (_ BitVec 64))
(declare-const result28 t__ref3)
(declare-const xmm11 (_ BitVec 64))
(declare-const result29 t__ref3)
(declare-const xmm01 (_ BitVec 64))
(declare-const result30 t__ref3)
(declare-const rsp10 (_ BitVec 64))
(declare-const rsp11 (_ BitVec 64))
(declare-const rdi3 (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const result31 t__ref3)
(declare-const rsp12 (_ BitVec 64))
(declare-const rsp13 (_ BitVec 64))
(declare-const rdi4 (_ BitVec 64))
(declare-const result32 bool__ref)
(declare-const zeroflag1 Bool)
(declare-const result33 bool__ref)
(declare-const signflag1 Bool)
(declare-const result34 bool__ref)
(declare-const carryflag1 Bool)
(declare-const result35 bool__ref)
(declare-const overflowflag1 Bool)
(declare-const zeroflag2 Bool)
(declare-const carryflag2 Bool)
(declare-const signflag2 Bool)
(declare-const overflowflag2 Bool)
(declare-const xmm02 (_ BitVec 64))
(declare-const rsp14 (_ BitVec 64))
(declare-const rbp2 (_ BitVec 64))
(declare-const rdi5 (_ BitVec 64))
(declare-const rbx2 (_ BitVec 64))
(declare-const result36 t__ref3)
(declare-const rbp3 (_ BitVec 64))
(declare-const result37 t__ref3)
(declare-const rsp15 (_ BitVec 64))
(declare-const rsp16 (_ BitVec 64))
(declare-const result38 t__ref3)
(declare-const rsi2 (_ BitVec 64))
(declare-const result39 t__ref3)
(declare-const rdi6 (_ BitVec 64))
(declare-const result40 t__ref3)
(declare-const xmm32 (_ BitVec 64))
(declare-const result41 t__ref3)
(declare-const xmm22 (_ BitVec 64))
(declare-const result42 t__ref3)
(declare-const xmm12 (_ BitVec 64))
(declare-const result43 t__ref3)
(declare-const xmm03 (_ BitVec 64))
(declare-const result44 t__ref3)
(declare-const rsp17 (_ BitVec 64))
(declare-const rsp18 (_ BitVec 64))
(declare-const rax1 (_ BitVec 64))
(declare-const rdi7 (_ BitVec 64))
(declare-const result45 t__ref3)
(declare-const rsp19 (_ BitVec 64))
(declare-const rsp20 (_ BitVec 64))
(declare-const rsi3 (_ BitVec 64))
(declare-const result46 bool__ref)
(declare-const zeroflag3 Bool)
(declare-const result47 bool__ref)
(declare-const signflag3 Bool)
(declare-const result48 bool__ref)
(declare-const carryflag3 Bool)
(declare-const result49 bool__ref)
(declare-const overflowflag3 Bool)
(declare-const zeroflag4 Bool)
(declare-const carryflag4 Bool)
(declare-const signflag4 Bool)
(declare-const overflowflag4 Bool)
(declare-const xmm04 (_ BitVec 64))
(declare-const rsp21 (_ BitVec 64))
(declare-const rbp4 (_ BitVec 64))
(declare-const rdi8 (_ BitVec 64))
(declare-const rbx3 (_ BitVec 64))
(declare-const result50 t__ref3)
(declare-const rbp5 (_ BitVec 64))
(declare-const result51 t__ref3)
(declare-const rsp22 (_ BitVec 64))
(declare-const rsp23 (_ BitVec 64))
(declare-const result52 t__ref3)
(declare-const rsi4 (_ BitVec 64))
(declare-const result53 t__ref3)
(declare-const rdi9 (_ BitVec 64))
(declare-const result54 t__ref3)
(declare-const xmm33 (_ BitVec 64))
(declare-const result55 t__ref3)
(declare-const xmm23 (_ BitVec 64))
(declare-const result56 t__ref3)
(declare-const xmm13 (_ BitVec 64))
(declare-const result57 t__ref3)
(declare-const xmm05 (_ BitVec 64))
(declare-const result58 t__ref3)
(declare-const rsp24 (_ BitVec 64))
(declare-const rsp25 (_ BitVec 64))
(declare-const rax2 (_ BitVec 64))
(declare-const rdi10 (_ BitVec 64))
(declare-const result59 t__ref3)
(declare-const rsp26 (_ BitVec 64))
(declare-const rsp27 (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const result60 bool__ref)
(declare-const zeroflag5 Bool)
(declare-const result61 bool__ref)
(declare-const signflag5 Bool)
(declare-const result62 bool__ref)
(declare-const carryflag5 Bool)
(declare-const result63 bool__ref)
(declare-const overflowflag5 Bool)
(declare-const zeroflag6 Bool)
(declare-const carryflag6 Bool)
(declare-const signflag6 Bool)
(declare-const overflowflag6 Bool)
(declare-const xmm06 (_ BitVec 64))
(declare-const rsp28 (_ BitVec 64))
(declare-const rbp6 (_ BitVec 64))
(declare-const rdi11 (_ BitVec 64))
(declare-const rbx4 (_ BitVec 64))
(declare-const result64 t__ref3)
(declare-const rbp7 (_ BitVec 64))
(declare-const result65 t__ref3)
(declare-const rsp29 (_ BitVec 64))
(declare-const rsp30 (_ BitVec 64))
(declare-const result66 t__ref3)
(declare-const xmm24 (_ BitVec 64))
(declare-const result67 t__ref3)
(declare-const rsi5 (_ BitVec 64))
(declare-const result68 t__ref3)
(declare-const rdi12 (_ BitVec 64))
(declare-const result69 t__ref3)
(declare-const xmm34 (_ BitVec 64))
(declare-const result70 t__ref3)
(declare-const xmm14 (_ BitVec 64))
(declare-const result71 t__ref3)
(declare-const xmm07 (_ BitVec 64))
(declare-const result72 t__ref3)
(declare-const rsp31 (_ BitVec 64))
(declare-const rsp32 (_ BitVec 64))
(declare-const rax3 (_ BitVec 64))
(declare-const rdi13 (_ BitVec 64))
(declare-const result73 t__ref3)
(declare-const rsp33 (_ BitVec 64))
(declare-const rsp34 (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const result74 bool__ref)
(declare-const zeroflag7 Bool)
(declare-const result75 bool__ref)
(declare-const signflag7 Bool)
(declare-const result76 bool__ref)
(declare-const carryflag7 Bool)
(declare-const result77 bool__ref)
(declare-const overflowflag7 Bool)
(declare-const rsp35 (_ BitVec 64))
(declare-const rdi14 (_ BitVec 64))
(declare-const result78 t__ref3)
(declare-const r151 (_ BitVec 64))
(declare-const result79 t__ref3)
(declare-const rsp36 (_ BitVec 64))
(declare-const rsp37 (_ BitVec 64))
(declare-const result80 t__ref3)
(declare-const xmm61 (_ BitVec 64))
(declare-const memory7 (Array (_ BitVec 64) unsigned8))
(declare-const xmm25 (_ BitVec 64))
(declare-const xmm35 (_ BitVec 64))
(declare-const xmm4 (_ BitVec 64))
(declare-const xmm5 (_ BitVec 64))
(declare-const xmm62 (_ BitVec 64))
(declare-const xmm7 (_ BitVec 64))
(declare-const rsp38 (_ BitVec 64))
(declare-const r121 (_ BitVec 64))
(declare-const r131 (_ BitVec 64))
(declare-const r141 (_ BitVec 64))
(declare-const r152 (_ BitVec 64))
(declare-const memory8 (Array (_ BitVec 64) unsigned8))
(declare-const rdi15 (_ BitVec 64))
(declare-const rbx5 (_ BitVec 64))
(declare-const rbx6 (_ BitVec 64))
(declare-const rsp39 (_ BitVec 64))
(declare-const rsi6 (_ BitVec 64))
(declare-const memory9 (Array (_ BitVec 64) unsigned8))
(declare-const result81 t__ref3)
(declare-const rsi7 (_ BitVec 64))
(declare-const rdi16 (_ BitVec 64))
(declare-const rbx7 (_ BitVec 64))
(declare-const result82 t__ref3)
(declare-const rsp40 (_ BitVec 64))
(declare-const exit_called Bool)
(declare-const carryflag8 Bool)
(declare-const signflag8 Bool)
(declare-const overflowflag8 Bool)
(declare-const rcx1 (_ BitVec 64))
(declare-const rsp41 (_ BitVec 64))
(declare-const r81 (_ BitVec 64))
(declare-const memory10 (Array (_ BitVec 64) unsigned8))
(declare-const rdx1 (_ BitVec 64))
(declare-const rsi8 (_ BitVec 64))
(declare-const rdi17 (_ BitVec 64))
(declare-const rax4 (_ BitVec 64))
(declare-const result83 t__ref3)
(declare-const rsp42 (_ BitVec 64))
(declare-const rsp43 (_ BitVec 64))
(declare-const rdi18 (_ BitVec 64))
(declare-const result84 t__ref3)
(declare-const rsp44 (_ BitVec 64))
(declare-const rsp45 (_ BitVec 64))
(declare-const result85 t__ref3)
(declare-const xmm26 (_ BitVec 64))
(declare-const xmm27 (_ BitVec 64))
(declare-const rsp46 (_ BitVec 64))
(declare-const memory11 (Array (_ BitVec 64) unsigned8))
(declare-const rdi19 (_ BitVec 64))
(declare-const rbx8 (_ BitVec 64))
(declare-const result86 t__ref3)
(declare-const rsp47 (_ BitVec 64))
(declare-const rsp48 (_ BitVec 64))
(declare-const result87 t__ref3)
(declare-const xmm28 (_ BitVec 64))
(declare-const zeroflag8 Bool)
(declare-const xmm08 (_ BitVec 64))
(declare-const xmm15 (_ BitVec 64))
(declare-const xmm29 (_ BitVec 64))
(declare-const rbx9 (_ BitVec 64))
(declare-const rsp49 (_ BitVec 64))
(declare-const rbp8 (_ BitVec 64))
(declare-const rdi20 (_ BitVec 64))
(declare-const memory12 (Array (_ BitVec 64) unsigned8))
(declare-const result88 t__ref3)
(declare-const rsp50 (_ BitVec 64))
(declare-const rax5 (_ BitVec 64))
(declare-const result89 t__ref3)
(declare-const rbx10 (_ BitVec 64))
(declare-const result90 t__ref3)
(declare-const rsp51 (_ BitVec 64))
(declare-const result91 t__ref3)
(declare-const rbp9 (_ BitVec 64))
(declare-const result92 t__ref3)
(declare-const rsp52 (_ BitVec 64))
(declare-const result93 t__ref3)
(declare-const r122 (_ BitVec 64))
(declare-const result94 t__ref3)
(declare-const rsp53 (_ BitVec 64))
(declare-const result95 t__ref3)
(declare-const r132 (_ BitVec 64))
(declare-const result96 t__ref3)
(declare-const rsp54 (_ BitVec 64))
(declare-const result97 t__ref3)
(declare-const r142 (_ BitVec 64))
(declare-const result98 t__ref3)
(declare-const rsp55 (_ BitVec 64))
(declare-const result99 t__ref3)
(declare-const r153 (_ BitVec 64))
(declare-const result100 t__ref3)
(declare-const rsp56 (_ BitVec 64))
(declare-const result101 t__ref3)
(declare-const rsp57 (_ BitVec 64))
(declare-const exit_called1 bool__ref)
(declare-const zeroflag9 bool__ref)
(declare-const carryflag9 bool__ref)
(declare-const signflag9 bool__ref)
(declare-const overflowflag9 bool__ref)
(declare-const xmm09 t__ref3)
(declare-const xmm16 t__ref3)
(declare-const xmm210 t__ref3)
(declare-const xmm36 t__ref3)
(declare-const xmm41 t__ref3)
(declare-const xmm51 t__ref3)
(declare-const xmm63 t__ref3)
(declare-const xmm71 t__ref3)
(declare-const rax6 t__ref3)
(declare-const rcx2 t__ref3)
(declare-const rdx2 t__ref3)
(declare-const rbx11 t__ref3)
(declare-const rsp58 t__ref3)
(declare-const rbp10 t__ref3)
(declare-const rsi9 t__ref3)
(declare-const rdi21 t__ref3)
(declare-const r82 t__ref3)
(declare-const r123 t__ref3)
(declare-const r133 t__ref3)
(declare-const r143 t__ref3)
(declare-const r154 t__ref3)
(declare-const memory13 map__ref)
(declare-const savestackptr2 t__ref3)
(declare-const ra02 t__ref)
(declare-const ra12 t__ref)
(declare-const ra22 t__ref)
(declare-const ra32 t__ref)
(declare-const ra42 t__ref)
(declare-const ra52 t__ref)
(declare-const ra62 t__ref)
(declare-const ra72 t__ref)
(declare-const saverbx2 t__ref3)
(declare-const saverbp2 t__ref3)
(declare-const saver122 t__ref3)
(declare-const saver132 t__ref3)
(declare-const saver142 t__ref3)
(declare-const saver152 t__ref3)
(declare-const exit_called2 Bool)
(declare-const zeroflag10 Bool)
(declare-const carryflag10 Bool)
(declare-const signflag10 Bool)
(declare-const overflowflag10 Bool)
(declare-const xmm010 (_ BitVec 64))
(declare-const xmm17 (_ BitVec 64))
(declare-const xmm211 (_ BitVec 64))
(declare-const xmm37 (_ BitVec 64))
(declare-const xmm42 (_ BitVec 64))
(declare-const xmm52 (_ BitVec 64))
(declare-const xmm64 (_ BitVec 64))
(declare-const xmm72 (_ BitVec 64))
(declare-const rax7 (_ BitVec 64))
(declare-const rcx3 (_ BitVec 64))
(declare-const rdx3 (_ BitVec 64))
(declare-const rbx12 (_ BitVec 64))
(declare-const rsp59 (_ BitVec 64))
(declare-const rbp11 (_ BitVec 64))
(declare-const rsi10 (_ BitVec 64))
(declare-const rdi22 (_ BitVec 64))
(declare-const r83 (_ BitVec 64))
(declare-const r124 (_ BitVec 64))
(declare-const r134 (_ BitVec 64))
(declare-const r144 (_ BitVec 64))
(declare-const r155 (_ BitVec 64))
(declare-const memory14 (Array (_ BitVec 64) unsigned8))
(declare-const savestackptr3 (_ BitVec 64))
(declare-const ra03 (_ BitVec 8))
(declare-const ra13 (_ BitVec 8))
(declare-const ra23 (_ BitVec 8))
(declare-const ra33 (_ BitVec 8))
(declare-const ra43 (_ BitVec 8))
(declare-const ra53 (_ BitVec 8))
(declare-const ra63 (_ BitVec 8))
(declare-const ra73 (_ BitVec 8))
(declare-const saverbx3 (_ BitVec 64))
(declare-const saverbp3 (_ BitVec 64))
(declare-const saver123 (_ BitVec 64))
(declare-const saver133 (_ BitVec 64))
(declare-const saver143 (_ BitVec 64))
(declare-const saver153 (_ BitVec 64))
(assert (= o (t__content3 rsp)))
(assert (= result savestackptr))
(assert (= (let ((subject savestackptr)) savestackptr1) o))
(assert (and (= o1 (readmem8 (t__content3 rsp) (map__content memory))) (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))
(assert (= o2 o1))
(assert (= result1 ra0))
(assert (= (let ((subject ra0)) ra01) o2))
(assert (and (= o3 (readmem8 (bvadd (t__content3 rsp) #x0000000000000001) (map__content memory))) (= o3 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000001))))))
(assert (= o4 o3))
(assert (= result2 ra1))
(assert (= (let ((subject ra1)) ra11) o4))
(assert (and (= o5 (readmem8 (bvadd (t__content3 rsp) #x0000000000000002) (map__content memory))) (= o5 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000002))))))
(assert (= o6 o5))
(assert (= result3 ra2))
(assert (= (let ((subject ra2)) ra21) o6))
(assert (and (= o7 (readmem8 (bvadd (t__content3 rsp) #x0000000000000003) (map__content memory))) (= o7 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000003))))))
(assert (= o8 o7))
(assert (= result4 ra3))
(assert (= (let ((subject ra3)) ra31) o8))
(assert (and (= o9 (readmem8 (bvadd (t__content3 rsp) #x0000000000000004) (map__content memory))) (= o9 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000004))))))
(assert (= o10 o9))
(assert (= result5 ra4))
(assert (= (let ((subject ra4)) ra41) o10))
(assert (and (= o11 (readmem8 (bvadd (t__content3 rsp) #x0000000000000005) (map__content memory))) (= o11 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000005))))))
(assert (= o12 o11))
(assert (= result6 ra5))
(assert (= (let ((subject ra5)) ra51) o12))
(assert (and (= o13 (readmem8 (bvadd (t__content3 rsp) #x0000000000000006) (map__content memory))) (= o13 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000006))))))
(assert (= o14 o13))
(assert (= result7 ra6))
(assert (= (let ((subject ra6)) ra61) o14))
(assert (and (= o15 (readmem8 (bvadd (t__content3 rsp) #x0000000000000007) (map__content memory))) (= o15 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) #x0000000000000007))))))
(assert (= o16 o15))
(assert (= result8 ra7))
(assert (= (let ((subject ra7)) ra71) o16))
(assert (= o17 (t__content3 rbx)))
(assert (= result9 saverbx))
(assert (= (let ((subject saverbx)) saverbx1) o17))
(assert (= o18 (t__content3 rbp)))
(assert (= result10 saverbp))
(assert (= (let ((subject saverbp)) saverbp1) o18))
(assert (= o19 (t__content3 r12)))
(assert (= result11 saver12))
(assert (= (let ((subject saver12)) saver121) o19))
(assert (= o20 (t__content3 r13)))
(assert (= result12 saver13))
(assert (= (let ((subject saver13)) saver131) o20))
(assert (= o21 (t__content3 r14)))
(assert (= result13 saver14))
(assert (= (let ((subject saver14)) saver141) o21))
(assert (= o22 (t__content3 r15)))
(assert (= result14 saver15))
(assert (= (let ((subject saver15)) saver151) o22))
(assert (= (t__content3 rsp) #xA7FFFFFFFFFFFFFF))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r15) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvsub (t__content3 rsp) #x0000000000000008))))) (= (bvand (t__content3 r15) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content3 r15) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content3 r15) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content3 r15) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content3 r15) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content3 r15) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content3 r15) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (t__content3 rsp) #x0000000000000008))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub (t__content3 rsp) #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep (select (map__content memory) i))))))))
(assert (= result15 rsp))
(assert (= (let ((subject rsp)) rsp1) (bvsub (t__content3 rsp) #x0000000000000008)))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r14) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvsub (let ((subject rsp)) rsp1) #x0000000000000008))))) (= (bvand (t__content3 r14) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content3 r14) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content3 r14) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content3 r14) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content3 r14) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content3 r14) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content3 r14) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp1) #x0000000000000008))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep (select (let ((subject memory)) memory1) i))))))))
(assert (= result16 (let ((subject rsp)) (mk_t__ref3 rsp1))))
(assert (= (let ((subject rsp)) rsp2) (bvsub (let ((subject rsp)) rsp1) #x0000000000000008)))
(assert (= (writereg32post (let ((subject rdi)) rdi1) #x00401068) true))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r13) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvsub (let ((subject rsp)) rsp2) #x0000000000000008))))) (= (bvand (t__content3 r13) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content3 r13) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content3 r13) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content3 r13) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content3 r13) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content3 r13) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content3 r13) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp2) #x0000000000000008))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep (select (let ((subject memory)) memory2) i))))))))
(assert (= result17 (let ((subject rsp)) (mk_t__ref3 rsp2))))
(assert (= (let ((subject rsp)) rsp3) (bvsub (let ((subject rsp)) rsp2) #x0000000000000008)))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r12) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub (let ((subject rsp)) rsp3) #x0000000000000008))))) (= (bvand (t__content3 r12) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content3 r12) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content3 r12) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content3 r12) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content3 r12) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content3 r12) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content3 r12) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp3) #x0000000000000008))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep (select (let ((subject memory)) memory3) i))))))))
(assert (= result18 (let ((subject rsp)) (mk_t__ref3 rsp3))))
(assert (= (let ((subject rsp)) rsp4) (bvsub (let ((subject rsp)) rsp3) #x0000000000000008)))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 rbp) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvsub (let ((subject rsp)) rsp4) #x0000000000000008))))) (= (bvand (t__content3 rbp) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content3 rbp) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content3 rbp) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content3 rbp) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content3 rbp) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content3 rbp) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content3 rbp) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp4) #x0000000000000008))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep (select (let ((subject memory)) memory4) i))))))))
(assert (= result19 (let ((subject rsp)) (mk_t__ref3 rsp4))))
(assert (= (let ((subject rsp)) rsp5) (bvsub (let ((subject rsp)) rsp4) #x0000000000000008)))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 rbx) #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvsub (let ((subject rsp)) rsp5) #x0000000000000008))))) (= (bvand (t__content3 rbx) #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000001)))) #x0000000000000100))) (= (bvand (t__content3 rbx) #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000002)))) #x0000000000010000))) (= (bvand (t__content3 rbx) #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000003)))) #x0000000001000000))) (= (bvand (t__content3 rbx) #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000004)))) #x0000000100000000))) (= (bvand (t__content3 rbx) #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000005)))) #x0000010000000000))) (= (bvand (t__content3 rbx) #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000006)))) #x0001000000000000))) (= (bvand (t__content3 rbx) #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp5) #x0000000000000008))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000001)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000002)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000003)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000004)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000005)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000006)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) #x0000000000000008) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep (select (let ((subject memory)) memory5) i))))))))
(assert (= result20 (let ((subject rsp)) (mk_t__ref3 rsp5))))
(assert (= (let ((subject rsp)) rsp6) (bvsub (let ((subject rsp)) rsp5) #x0000000000000008)))
(assert (= (writereg32post (let ((subject rbx)) rbx1) #x00000000) true))
(assert (= result21 (let ((subject rsp)) (mk_t__ref3 rsp6))))
(assert (= (let ((subject rsp)) rsp7) (bvsub (let ((subject rsp)) rsp6) #x0000000000000068)))
(assert (= result22 (let ((subject rsp)) (mk_t__ref3 rsp7))))
(assert (= (let ((subject rsp)) rsp8) (bvsub (let ((subject rsp)) rsp7) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp9) (bvadd (let ((subject rsp)) rsp8) #x0000000000000008)))
(assert (= result23 rsi))
(assert (= (let ((subject rsi)) rsi1) (bvadd (let ((subject rsp)) rsp9) #x0000000000000040)))
(assert (= result24 (let ((subject rdi)) (mk_t__ref3 rdi1))))
(assert (= (let ((subject rdi)) rdi2) (bvadd (let ((subject rsp)) rsp9) #x000000000000002C)))
(assert (= result25 rbp))
(assert (= (let ((subject rbp)) rbp1) (bvadd (let ((subject rsp)) rsp9) #x0000000000000040)))
(assert (and (= o23 (readmem64 #x0000000000401178 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o23 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401178)))) (= (bvand o23 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000001)))) #x0000000000000100))) (= (bvand o23 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000002)))) #x0000000000010000))) (= (bvand o23 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000003)))) #x0000000001000000))) (= (bvand o23 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000004)))) #x0000000100000000))) (= (bvand o23 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000005)))) #x0000010000000000))) (= (bvand o23 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000006)))) #x0001000000000000))) (= (bvand o23 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result26 (mk_t__ref3 xmm3)))
(assert (= xmm31 o23))
(assert (and (= o24 (readmem64 #x0000000000401180 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o24 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401180)))) (= (bvand o24 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000001)))) #x0000000000000100))) (= (bvand o24 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000002)))) #x0000000000010000))) (= (bvand o24 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000003)))) #x0000000001000000))) (= (bvand o24 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000004)))) #x0000000100000000))) (= (bvand o24 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000005)))) #x0000010000000000))) (= (bvand o24 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000006)))) #x0001000000000000))) (= (bvand o24 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401180 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result27 (mk_t__ref3 xmm2)))
(assert (= xmm21 o24))
(assert (and (= o25 (readmem64 #x0000000000401188 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o25 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401188)))) (= (bvand o25 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000001)))) #x0000000000000100))) (= (bvand o25 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000002)))) #x0000000000010000))) (= (bvand o25 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000003)))) #x0000000001000000))) (= (bvand o25 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000004)))) #x0000000100000000))) (= (bvand o25 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000005)))) #x0000010000000000))) (= (bvand o25 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000006)))) #x0001000000000000))) (= (bvand o25 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401188 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result28 (mk_t__ref3 xmm1)))
(assert (= xmm11 o25))
(assert (and (= o26 (readmem64 #x0000000000401170 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o26 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401170)))) (= (bvand o26 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000001)))) #x0000000000000100))) (= (bvand o26 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000002)))) #x0000000000010000))) (= (bvand o26 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000003)))) #x0000000001000000))) (= (bvand o26 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000004)))) #x0000000100000000))) (= (bvand o26 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000005)))) #x0000010000000000))) (= (bvand o26 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000006)))) #x0001000000000000))) (= (bvand o26 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result29 (mk_t__ref3 xmm0)))
(assert (= xmm01 o26))
(assert (= result30 (let ((subject rsp)) (mk_t__ref3 rsp9))))
(assert (= (let ((subject rsp)) rsp10) (bvsub (let ((subject rsp)) rsp9) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp11) (bvadd (let ((subject rsp)) rsp10) #x0000000000000008)))
(assert (= (writereg32post (let ((subject rdi)) rdi3) #x00401120) true))
(assert (= (writereg32post rax #x00000000) true))
(assert (= result31 (let ((subject rsp)) (mk_t__ref3 rsp11))))
(assert (= (let ((subject rsp)) rsp12) (bvsub (let ((subject rsp)) rsp11) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp13) (bvadd (let ((subject rsp)) rsp12) #x0000000000000008)))
(assert (and (= o27 (esp (let ((subject rsp)) rsp13))) (= o27 (readreg32 (let ((subject rsp)) rsp13)))))
(assert (= o28 (bvadd o27 #x0000002C)))
(assert (= o29 ((_ zero_extend 32) o28)))
(assert (and (= o30 (readmem32 o29 (let ((subject memory)) memory6))) (and (and (and (= (bvand o30 #x000000FF) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o29)))) (= (bvand o30 #x0000FF00) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o29 #x0000000000000001)))) #x00000100))) (= (bvand o30 #x00FF0000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o29 #x0000000000000002)))) #x00010000))) (= (bvand o30 #xFF000000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o29 #x0000000000000003)))) #x01000000)))))
(assert (= (writereg32post (let ((subject rdi)) rdi4) o30) true))
(assert (and (= o31 (edi (let ((subject rdi)) rdi4))) (= o31 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (and (= o32 (edi (let ((subject rdi)) rdi4))) (= o32 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (= o33 (bvand o32 o31)))
(assert (= o34 (ite (= o33 #x00000000) true false)))
(assert (= result32 (mk_bool__ref zeroflag)))
(assert (= zeroflag1 o34))
(assert (and (= o35 (edi (let ((subject rdi)) rdi4))) (= o35 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (and (= o36 (edi (let ((subject rdi)) rdi4))) (= o36 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (= o37 (bvand o36 o35)))
(assert (= o38 (ite (bvugt o37 #x7FFFFFFF) true false)))
(assert (= result33 (mk_bool__ref signflag)))
(assert (= signflag1 o38))
(assert (= result34 (mk_bool__ref carryflag)))
(assert (= carryflag1 (distinct 0 0)))
(assert (= result35 (mk_bool__ref overflowflag)))
(assert (= overflowflag1 (distinct 0 0)))
(assert (= (let ((subject rsp)) rsp14) (let ((subject rsp)) rsp13)))
(assert (= (writereg32post (let ((subject rdi)) rdi5) #x0000000A) true))
(assert (= (writereg32post (let ((subject rbx)) rbx2) #x00000000) true))
(assert (= result36 (let ((subject rbp)) (mk_t__ref3 rbp2))))
(assert (= (let ((subject rbp)) rbp3) (bvadd (let ((subject rsp)) rsp14) #x0000000000000040)))
(assert (= result37 (let ((subject rsp)) (mk_t__ref3 rsp14))))
(assert (= (let ((subject rsp)) rsp15) (bvsub (let ((subject rsp)) rsp14) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp16) (bvadd (let ((subject rsp)) rsp15) #x0000000000000008)))
(assert (= result38 (let ((subject rsi)) (mk_t__ref3 rsi1))))
(assert (= (let ((subject rsi)) rsi2) (bvadd (let ((subject rsp)) rsp16) #x0000000000000040)))
(assert (= result39 (let ((subject rdi)) (mk_t__ref3 rdi5))))
(assert (= (let ((subject rdi)) rdi6) (bvadd (let ((subject rsp)) rsp16) #x000000000000002C)))
(assert (and (= o39 (readmem64 #x0000000000401178 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o39 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401178)))) (= (bvand o39 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000001)))) #x0000000000000100))) (= (bvand o39 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000002)))) #x0000000000010000))) (= (bvand o39 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000003)))) #x0000000001000000))) (= (bvand o39 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000004)))) #x0000000100000000))) (= (bvand o39 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000005)))) #x0000010000000000))) (= (bvand o39 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000006)))) #x0001000000000000))) (= (bvand o39 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401178 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result40 (mk_t__ref3 xmm31)))
(assert (= xmm32 o39))
(assert (and (= o40 (readmem64 #x0000000000401190 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o40 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401190)))) (= (bvand o40 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000001)))) #x0000000000000100))) (= (bvand o40 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000002)))) #x0000000000010000))) (= (bvand o40 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000003)))) #x0000000001000000))) (= (bvand o40 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000004)))) #x0000000100000000))) (= (bvand o40 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000005)))) #x0000010000000000))) (= (bvand o40 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000006)))) #x0001000000000000))) (= (bvand o40 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401190 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result41 (mk_t__ref3 xmm21)))
(assert (= xmm22 o40))
(assert (and (= o41 (readmem64 #x0000000000401198 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o41 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401198)))) (= (bvand o41 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000001)))) #x0000000000000100))) (= (bvand o41 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000002)))) #x0000000000010000))) (= (bvand o41 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000003)))) #x0000000001000000))) (= (bvand o41 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000004)))) #x0000000100000000))) (= (bvand o41 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000005)))) #x0000010000000000))) (= (bvand o41 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000006)))) #x0001000000000000))) (= (bvand o41 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401198 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result42 (mk_t__ref3 xmm11)))
(assert (= xmm12 o41))
(assert (and (= o42 (readmem64 #x0000000000401170 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o42 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401170)))) (= (bvand o42 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000001)))) #x0000000000000100))) (= (bvand o42 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000002)))) #x0000000000010000))) (= (bvand o42 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000003)))) #x0000000001000000))) (= (bvand o42 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000004)))) #x0000000100000000))) (= (bvand o42 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000005)))) #x0000010000000000))) (= (bvand o42 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000006)))) #x0001000000000000))) (= (bvand o42 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result43 (mk_t__ref3 xmm02)))
(assert (= xmm03 o42))
(assert (= result44 (let ((subject rsp)) (mk_t__ref3 rsp16))))
(assert (= (let ((subject rsp)) rsp17) (bvsub (let ((subject rsp)) rsp16) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp18) (bvadd (let ((subject rsp)) rsp17) #x0000000000000008)))
(assert (= (writereg32post rax1 #x00000000) true))
(assert (= (writereg32post (let ((subject rdi)) rdi7) #x00401120) true))
(assert (= result45 (let ((subject rsp)) (mk_t__ref3 rsp18))))
(assert (= (let ((subject rsp)) rsp19) (bvsub (let ((subject rsp)) rsp18) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp20) (bvadd (let ((subject rsp)) rsp19) #x0000000000000008)))
(assert (and (= o43 (esp (let ((subject rsp)) rsp20))) (= o43 (readreg32 (let ((subject rsp)) rsp20)))))
(assert (= o44 (bvadd o43 #x0000002C)))
(assert (= o45 ((_ zero_extend 32) o44)))
(assert (and (= o46 (readmem32 o45 (let ((subject memory)) memory6))) (and (and (and (= (bvand o46 #x000000FF) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o45)))) (= (bvand o46 #x0000FF00) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o45 #x0000000000000001)))) #x00000100))) (= (bvand o46 #x00FF0000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o45 #x0000000000000002)))) #x00010000))) (= (bvand o46 #xFF000000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o45 #x0000000000000003)))) #x01000000)))))
(assert (= (writereg32post (let ((subject rsi)) rsi3) o46) true))
(assert (and (= o47 (esi (let ((subject rsi)) rsi3))) (= o47 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (and (= o48 (esi (let ((subject rsi)) rsi3))) (= o48 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (= o49 (bvand o48 o47)))
(assert (= o50 (ite (= o49 #x00000000) true false)))
(assert (= result46 (mk_bool__ref zeroflag2)))
(assert (= zeroflag3 o50))
(assert (and (= o51 (esi (let ((subject rsi)) rsi3))) (= o51 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (and (= o52 (esi (let ((subject rsi)) rsi3))) (= o52 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (= o53 (bvand o52 o51)))
(assert (= o54 (ite (bvugt o53 #x7FFFFFFF) true false)))
(assert (= result47 (mk_bool__ref signflag2)))
(assert (= signflag3 o54))
(assert (= result48 (mk_bool__ref carryflag2)))
(assert (= carryflag3 (distinct 0 0)))
(assert (= result49 (mk_bool__ref overflowflag2)))
(assert (= overflowflag3 (distinct 0 0)))
(assert (= (let ((subject rsp)) rsp21) (let ((subject rsp)) rsp20)))
(assert (= (writereg32post (let ((subject rdi)) rdi8) #x0000000A) true))
(assert (= (writereg32post (let ((subject rbx)) rbx3) #x00000000) true))
(assert (= result50 (let ((subject rbp)) (mk_t__ref3 rbp4))))
(assert (= (let ((subject rbp)) rbp5) (bvadd (let ((subject rsp)) rsp21) #x0000000000000040)))
(assert (= result51 (let ((subject rsp)) (mk_t__ref3 rsp21))))
(assert (= (let ((subject rsp)) rsp22) (bvsub (let ((subject rsp)) rsp21) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp23) (bvadd (let ((subject rsp)) rsp22) #x0000000000000008)))
(assert (= result52 (let ((subject rsi)) (mk_t__ref3 rsi3))))
(assert (= (let ((subject rsi)) rsi4) (bvadd (let ((subject rsp)) rsp23) #x0000000000000040)))
(assert (= result53 (let ((subject rdi)) (mk_t__ref3 rdi8))))
(assert (= (let ((subject rdi)) rdi9) (bvadd (let ((subject rsp)) rsp23) #x000000000000002C)))
(assert (and (= o55 (readmem64 #x00000000004011A0 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o55 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x00000000004011A0)))) (= (bvand o55 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000001)))) #x0000000000000100))) (= (bvand o55 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000002)))) #x0000000000010000))) (= (bvand o55 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000003)))) #x0000000001000000))) (= (bvand o55 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000004)))) #x0000000100000000))) (= (bvand o55 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000005)))) #x0000010000000000))) (= (bvand o55 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000006)))) #x0001000000000000))) (= (bvand o55 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A0 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result54 (mk_t__ref3 xmm32)))
(assert (= xmm33 o55))
(assert (and (= o56 (readmem64 #x00000000004011A8 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o56 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x00000000004011A8)))) (= (bvand o56 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000001)))) #x0000000000000100))) (= (bvand o56 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000002)))) #x0000000000010000))) (= (bvand o56 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000003)))) #x0000000001000000))) (= (bvand o56 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000004)))) #x0000000100000000))) (= (bvand o56 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000005)))) #x0000010000000000))) (= (bvand o56 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000006)))) #x0001000000000000))) (= (bvand o56 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011A8 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result55 (mk_t__ref3 xmm22)))
(assert (= xmm23 o56))
(assert (and (= o57 (readmem64 #x00000000004011B0 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o57 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x00000000004011B0)))) (= (bvand o57 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000001)))) #x0000000000000100))) (= (bvand o57 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000002)))) #x0000000000010000))) (= (bvand o57 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000003)))) #x0000000001000000))) (= (bvand o57 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000004)))) #x0000000100000000))) (= (bvand o57 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000005)))) #x0000010000000000))) (= (bvand o57 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000006)))) #x0001000000000000))) (= (bvand o57 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B0 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result56 (mk_t__ref3 xmm12)))
(assert (= xmm13 o57))
(assert (and (= o58 (readmem64 #x0000000000401170 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o58 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401170)))) (= (bvand o58 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000001)))) #x0000000000000100))) (= (bvand o58 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000002)))) #x0000000000010000))) (= (bvand o58 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000003)))) #x0000000001000000))) (= (bvand o58 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000004)))) #x0000000100000000))) (= (bvand o58 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000005)))) #x0000010000000000))) (= (bvand o58 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000006)))) #x0001000000000000))) (= (bvand o58 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result57 (mk_t__ref3 xmm04)))
(assert (= xmm05 o58))
(assert (= result58 (let ((subject rsp)) (mk_t__ref3 rsp23))))
(assert (= (let ((subject rsp)) rsp24) (bvsub (let ((subject rsp)) rsp23) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp25) (bvadd (let ((subject rsp)) rsp24) #x0000000000000008)))
(assert (= (writereg32post rax2 #x00000000) true))
(assert (= (writereg32post (let ((subject rdi)) rdi10) #x00401120) true))
(assert (= result59 (let ((subject rsp)) (mk_t__ref3 rsp25))))
(assert (= (let ((subject rsp)) rsp26) (bvsub (let ((subject rsp)) rsp25) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp27) (bvadd (let ((subject rsp)) rsp26) #x0000000000000008)))
(assert (and (= o59 (esp (let ((subject rsp)) rsp27))) (= o59 (readreg32 (let ((subject rsp)) rsp27)))))
(assert (= o60 (bvadd o59 #x0000002C)))
(assert (= o61 ((_ zero_extend 32) o60)))
(assert (and (= o62 (readmem32 o61 (let ((subject memory)) memory6))) (and (and (and (= (bvand o62 #x000000FF) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o61)))) (= (bvand o62 #x0000FF00) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o61 #x0000000000000001)))) #x00000100))) (= (bvand o62 #x00FF0000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o61 #x0000000000000002)))) #x00010000))) (= (bvand o62 #xFF000000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o61 #x0000000000000003)))) #x01000000)))))
(assert (= (writereg32post rcx o62) true))
(assert (and (= o63 (ecx rcx)) (= o63 (readreg32 rcx))))
(assert (and (= o64 (ecx rcx)) (= o64 (readreg32 rcx))))
(assert (= o65 (bvand o64 o63)))
(assert (= o66 (ite (= o65 #x00000000) true false)))
(assert (= result60 (mk_bool__ref zeroflag4)))
(assert (= zeroflag5 o66))
(assert (and (= o67 (ecx rcx)) (= o67 (readreg32 rcx))))
(assert (and (= o68 (ecx rcx)) (= o68 (readreg32 rcx))))
(assert (= o69 (bvand o68 o67)))
(assert (= o70 (ite (bvugt o69 #x7FFFFFFF) true false)))
(assert (= result61 (mk_bool__ref signflag4)))
(assert (= signflag5 o70))
(assert (= result62 (mk_bool__ref carryflag4)))
(assert (= carryflag5 (distinct 0 0)))
(assert (= result63 (mk_bool__ref overflowflag4)))
(assert (= overflowflag5 (distinct 0 0)))
(assert (= (let ((subject rsp)) rsp28) (let ((subject rsp)) rsp27)))
(assert (= (writereg32post (let ((subject rdi)) rdi11) #x0000000A) true))
(assert (= (writereg32post (let ((subject rbx)) rbx4) #x00000000) true))
(assert (= result64 (let ((subject rbp)) (mk_t__ref3 rbp6))))
(assert (= (let ((subject rbp)) rbp7) (bvadd (let ((subject rsp)) rsp28) #x0000000000000040)))
(assert (= result65 (let ((subject rsp)) (mk_t__ref3 rsp28))))
(assert (= (let ((subject rsp)) rsp29) (bvsub (let ((subject rsp)) rsp28) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp30) (bvadd (let ((subject rsp)) rsp29) #x0000000000000008)))
(assert (and (= o71 (readmem64 #x0000000000401170 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o71 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401170)))) (= (bvand o71 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000001)))) #x0000000000000100))) (= (bvand o71 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000002)))) #x0000000000010000))) (= (bvand o71 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000003)))) #x0000000001000000))) (= (bvand o71 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000004)))) #x0000000100000000))) (= (bvand o71 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000005)))) #x0000010000000000))) (= (bvand o71 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000006)))) #x0001000000000000))) (= (bvand o71 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result66 (mk_t__ref3 xmm23)))
(assert (= xmm24 o71))
(assert (= result67 (let ((subject rsi)) (mk_t__ref3 rsi4))))
(assert (= (let ((subject rsi)) rsi5) (bvadd (let ((subject rsp)) rsp30) #x0000000000000040)))
(assert (= result68 (let ((subject rdi)) (mk_t__ref3 rdi11))))
(assert (= (let ((subject rdi)) rdi12) (bvadd (let ((subject rsp)) rsp30) #x000000000000002C)))
(assert (and (= o72 (readmem64 #x00000000004011B8 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o72 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x00000000004011B8)))) (= (bvand o72 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000001)))) #x0000000000000100))) (= (bvand o72 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000002)))) #x0000000000010000))) (= (bvand o72 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000003)))) #x0000000001000000))) (= (bvand o72 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000004)))) #x0000000100000000))) (= (bvand o72 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000005)))) #x0000010000000000))) (= (bvand o72 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000006)))) #x0001000000000000))) (= (bvand o72 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011B8 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result69 (mk_t__ref3 xmm33)))
(assert (= xmm34 o72))
(assert (and (= o73 (readmem64 #x00000000004011C0 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o73 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x00000000004011C0)))) (= (bvand o73 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000001)))) #x0000000000000100))) (= (bvand o73 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000002)))) #x0000000000010000))) (= (bvand o73 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000003)))) #x0000000001000000))) (= (bvand o73 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000004)))) #x0000000100000000))) (= (bvand o73 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000005)))) #x0000010000000000))) (= (bvand o73 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000006)))) #x0001000000000000))) (= (bvand o73 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x00000000004011C0 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result70 (mk_t__ref3 xmm13)))
(assert (= xmm14 o73))
(assert (= result71 (mk_t__ref3 xmm06)))
(assert (= xmm07 xmm24))
(assert (= result72 (let ((subject rsp)) (mk_t__ref3 rsp30))))
(assert (= (let ((subject rsp)) rsp31) (bvsub (let ((subject rsp)) rsp30) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp32) (bvadd (let ((subject rsp)) rsp31) #x0000000000000008)))
(assert (= (writereg32post rax3 #x00000000) true))
(assert (= (writereg32post (let ((subject rdi)) rdi13) #x00401120) true))
(assert (= result73 (let ((subject rsp)) (mk_t__ref3 rsp32))))
(assert (= (let ((subject rsp)) rsp33) (bvsub (let ((subject rsp)) rsp32) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp34) (bvadd (let ((subject rsp)) rsp33) #x0000000000000008)))
(assert (and (= o74 (esp (let ((subject rsp)) rsp34))) (= o74 (readreg32 (let ((subject rsp)) rsp34)))))
(assert (= o75 (bvadd o74 #x0000002C)))
(assert (= o76 ((_ zero_extend 32) o75)))
(assert (and (= o77 (readmem32 o76 (let ((subject memory)) memory6))) (and (and (and (= (bvand o77 #x000000FF) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o76)))) (= (bvand o77 #x0000FF00) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o76 #x0000000000000001)))) #x00000100))) (= (bvand o77 #x00FF0000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o76 #x0000000000000002)))) #x00010000))) (= (bvand o77 #xFF000000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o76 #x0000000000000003)))) #x01000000)))))
(assert (= (writereg32post rdx o77) true))
(assert (and (= o78 (edx rdx)) (= o78 (readreg32 rdx))))
(assert (and (= o79 (edx rdx)) (= o79 (readreg32 rdx))))
(assert (= o80 (bvand o79 o78)))
(assert (= o81 (ite (= o80 #x00000000) true false)))
(assert (= result74 (mk_bool__ref zeroflag6)))
(assert (= zeroflag7 o81))
(assert (and (= o82 (edx rdx)) (= o82 (readreg32 rdx))))
(assert (and (= o83 (edx rdx)) (= o83 (readreg32 rdx))))
(assert (= o84 (bvand o83 o82)))
(assert (= o85 (ite (bvugt o84 #x7FFFFFFF) true false)))
(assert (= result75 (mk_bool__ref signflag6)))
(assert (= signflag7 o85))
(assert (= result76 (mk_bool__ref carryflag6)))
(assert (= carryflag7 (distinct 0 0)))
(assert (= result77 (mk_bool__ref overflowflag6)))
(assert (= overflowflag7 (distinct 0 0)))
(assert (= (let ((subject rsp)) rsp35) (let ((subject rsp)) rsp34)))
(assert (= (writereg32post (let ((subject rdi)) rdi14) #x0000000A) true))
(assert (= result78 r15))
(assert (= (let ((subject r15)) r151) #x0000000000000009))
(assert (= result79 (let ((subject rsp)) (mk_t__ref3 rsp35))))
(assert (= (let ((subject rsp)) rsp36) (bvsub (let ((subject rsp)) rsp35) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp37) (bvadd (let ((subject rsp)) rsp36) #x0000000000000008)))
(assert (and (= o86 (readmem64 #x0000000000401170 (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o86 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) #x0000000000401170)))) (= (bvand o86 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000001)))) #x0000000000000100))) (= (bvand o86 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000002)))) #x0000000000010000))) (= (bvand o86 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000003)))) #x0000000001000000))) (= (bvand o86 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000004)))) #x0000000100000000))) (= (bvand o86 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000005)))) #x0000010000000000))) (= (bvand o86 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000006)))) #x0001000000000000))) (= (bvand o86 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd #x0000000000401170 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result80 (mk_t__ref3 xmm6)))
(assert (= xmm61 o86))
(assert (and (= o87 (esp (let ((subject rsp)) rsp37))) (= o87 (readreg32 (let ((subject rsp)) rsp37)))))
(assert (= o88 (bvadd o87 #x00000018)))
(assert (= o89 ((_ zero_extend 32) o88)))
(assert (and (and (and (and (and (and (and (and (= (bvand xmm61 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) o89)))) (= (bvand xmm61 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000001)))) #x0000000000000100))) (= (bvand xmm61 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000002)))) #x0000000000010000))) (= (bvand xmm61 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000003)))) #x0000000001000000))) (= (bvand xmm61 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000004)))) #x0000000100000000))) (= (bvand xmm61 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000005)))) #x0000010000000000))) (= (bvand xmm61 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000006)))) #x0001000000000000))) (= (bvand xmm61 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory7) (bvadd o89 #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i o89)) (not (= i (bvadd o89 #x0000000000000001)))) (not (= i (bvadd o89 #x0000000000000002)))) (not (= i (bvadd o89 #x0000000000000003)))) (not (= i (bvadd o89 #x0000000000000004)))) (not (= i (bvadd o89 #x0000000000000005)))) (not (= i (bvadd o89 #x0000000000000006)))) (not (= i (bvadd o89 #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory7) i)) (to_rep (select (let ((subject memory)) memory6) i))))))))
(assert (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= i (let ((subject rsp)) rsp38))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000001)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000002)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000003)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000004)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000005)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000006)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000007)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000008)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000009)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000000A)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000000B)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000000C)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000000D)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000000E)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000000F)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000010)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000011)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000012)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000013)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000014)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000015)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000016)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000017)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000018)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x0000000000000019)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000001A)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000001B)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000001C)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000001D)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000001E)))) (not (= i (bvadd (let ((subject rsp)) rsp38) #x000000000000001F)))) (= (to_rep (select (let ((subject memory)) memory8) i)) (to_rep (select (let ((subject memory)) memory7) i)))))) (= (let ((subject rsp)) rsp38) (let ((subject rsp)) rsp37))))
(assert (= (writereg32post (let ((subject rdi)) rdi15) #x00401090) true))
(assert (= (writereg32post (let ((subject rbx)) rbx5) #x00000000) true))
(assert (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000001)))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000002)))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000003)))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000004)))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000005)))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000006)))) (not (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) #x0000000000000098) #x0000000000000068) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory9) i)) (to_rep (select (let ((subject memory)) memory8) i)))))) (= (let ((subject rsp)) rsp39) (let ((subject rsp)) rsp38))))
(assert (= result81 (let ((subject rsi)) (mk_t__ref3 rsi6))))
(assert (= (let ((subject rsi)) rsi7) (bvadd (let ((subject rsp)) rsp39) #x0000000000000030)))
(assert (= (writereg32post (let ((subject rdi)) rdi16) #x3FED0169) true))
(assert (= (writereg16post (let ((subject rbx)) rbx6) (let ((subject rbx)) rbx7) #x0169) true))
(assert (= result82 (let ((subject rsp)) (mk_t__ref3 rsp39))))
(assert (= (let ((subject rsp)) rsp40) (bvsub (let ((subject rsp)) rsp39) #x0000000000000008)))
(assert (and (and (and (and (and (and (and (and (and (= (let ((subject rsp)) rsp41) (bvadd (let ((subject rsp)) rsp40) #x0000000000000008)) (= (to_rep (select (let ((subject memory)) memory10) (let ((subject rsp)) rsp40))) (to_rep (select (let ((subject memory)) memory9) (let ((subject rsp)) rsp40))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000001))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000001))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000002))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000002))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000003))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000003))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000004))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000004))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000005))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000005))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000006))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000006))))) (= (to_rep (select (let ((subject memory)) memory10) (bvadd (let ((subject rsp)) rsp40) #x0000000000000007))) (to_rep (select (let ((subject memory)) memory9) (bvadd (let ((subject rsp)) rsp40) #x0000000000000007))))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (not (= (inrange64 i (let ((subject rsi)) rsi7) #x0000000000000008) true)) (= (to_rep (select (let ((subject memory)) memory10) i)) (to_rep (select (let ((subject memory)) memory9) i))))))))
(assert (and (= o90 (esp (let ((subject rsp)) rsp41))) (= o90 (readreg32 (let ((subject rsp)) rsp41)))))
(assert (= o91 (bvadd o90 #x00000030)))
(assert (= o92 ((_ zero_extend 32) o91)))
(assert (and (= o93 (readmem32 o92 (let ((subject memory)) memory10))) (and (and (and (= (bvand o93 #x000000FF) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory10) o92)))) (= (bvand o93 #x0000FF00) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory10) (bvadd o92 #x0000000000000001)))) #x00000100))) (= (bvand o93 #x00FF0000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory10) (bvadd o92 #x0000000000000002)))) #x00010000))) (= (bvand o93 #xFF000000) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory10) (bvadd o92 #x0000000000000003)))) #x01000000)))))
(assert (= (writereg32post rdx1 o93) true))
(assert (= (writereg32post (let ((subject rsi)) rsi8) #x3FED0169) true))
(assert (= (writereg32post (let ((subject rdi)) rdi17) #x00401140) true))
(assert (= (writereg32post rax4 #x00000000) true))
(assert (= result83 (let ((subject rsp)) (mk_t__ref3 rsp41))))
(assert (= (let ((subject rsp)) rsp42) (bvsub (let ((subject rsp)) rsp41) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp43) (bvadd (let ((subject rsp)) rsp42) #x0000000000000008)))
(assert (= (writereg32post (let ((subject rdi)) rdi18) #x004010B8) true))
(assert (= result84 (let ((subject rsp)) (mk_t__ref3 rsp43))))
(assert (= (let ((subject rsp)) rsp44) (bvsub (let ((subject rsp)) rsp43) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp45) (bvadd (let ((subject rsp)) rsp44) #x0000000000000008)))
(assert (= result85 (mk_t__ref3 xmm25)))
(assert (= xmm26 (bvxor xmm25 xmm25)))
(assert (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (let ((subject rsp)) rsp46))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000001)))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000002)))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000003)))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000004)))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000005)))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000006)))) (not (= i (bvadd (let ((subject rsp)) rsp46) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory11) i)) (to_rep (select (let ((subject memory)) memory10) i)))))) (= (let ((subject rsp)) rsp46) (let ((subject rsp)) rsp45))))
(assert (= (writereg32post (let ((subject rdi)) rdi19) #x00401150) true))
(assert (= (writereg32post (let ((subject rbx)) rbx8) #x00000169) true))
(assert (= result86 (let ((subject rsp)) (mk_t__ref3 rsp46))))
(assert (= (let ((subject rsp)) rsp47) (bvsub (let ((subject rsp)) rsp46) #x0000000000000008)))
(assert (= (let ((subject rsp)) rsp48) (bvadd (let ((subject rsp)) rsp47) #x0000000000000008)))
(assert (= result87 (mk_t__ref3 xmm27)))
(assert (= xmm28 (bvxor xmm27 xmm27)))
(assert (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (let ((subject rsp)) rsp49))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000001)))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000002)))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000003)))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000004)))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000005)))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000006)))) (not (= i (bvadd (let ((subject rsp)) rsp49) #x0000000000000007)))) (= (to_rep (select (let ((subject memory)) memory12) i)) (to_rep (select (let ((subject memory)) memory11) i)))))) (= (let ((subject rsp)) rsp49) (let ((subject rsp)) rsp48))))
(assert (= result88 (let ((subject rsp)) (mk_t__ref3 rsp49))))
(assert (= (let ((subject rsp)) rsp50) (bvadd (let ((subject rsp)) rsp49) #x0000000000000068)))
(assert (= (writereg32post rax5 #x00000000) true))
(assert (and (= o94 (readmem64 (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) (let ((subject memory)) memory12))) (and (and (and (and (and (and (and (= (bvand o94 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (let ((subject rsp)) rsp50) #x0000000000000000))))) (= (bvand o94 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000001)))) #x0000000000000100))) (= (bvand o94 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000002)))) #x0000000000010000))) (= (bvand o94 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000003)))) #x0000000001000000))) (= (bvand o94 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000004)))) #x0000000100000000))) (= (bvand o94 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000005)))) #x0000010000000000))) (= (bvand o94 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000006)))) #x0001000000000000))) (= (bvand o94 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp50) #x0000000000000000) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result89 (let ((subject rbx)) (mk_t__ref3 rbx9))))
(assert (= (let ((subject rbx)) rbx10) o94))
(assert (= result90 (let ((subject rsp)) (mk_t__ref3 rsp50))))
(assert (= (let ((subject rsp)) rsp51) (bvadd (let ((subject rsp)) rsp50) #x0000000000000008)))
(assert (and (= o95 (readmem64 (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) (let ((subject memory)) memory12))) (and (and (and (and (and (and (and (= (bvand o95 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (let ((subject rsp)) rsp51) #x0000000000000000))))) (= (bvand o95 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000001)))) #x0000000000000100))) (= (bvand o95 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000002)))) #x0000000000010000))) (= (bvand o95 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000003)))) #x0000000001000000))) (= (bvand o95 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000004)))) #x0000000100000000))) (= (bvand o95 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000005)))) #x0000010000000000))) (= (bvand o95 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000006)))) #x0001000000000000))) (= (bvand o95 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp51) #x0000000000000000) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result91 (let ((subject rbp)) (mk_t__ref3 rbp8))))
(assert (= (let ((subject rbp)) rbp9) o95))
(assert (= result92 (let ((subject rsp)) (mk_t__ref3 rsp51))))
(assert (= (let ((subject rsp)) rsp52) (bvadd (let ((subject rsp)) rsp51) #x0000000000000008)))
(assert (and (= o96 (readmem64 (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) (let ((subject memory)) memory12))) (and (and (and (and (and (and (and (= (bvand o96 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (let ((subject rsp)) rsp52) #x0000000000000000))))) (= (bvand o96 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000001)))) #x0000000000000100))) (= (bvand o96 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000002)))) #x0000000000010000))) (= (bvand o96 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000003)))) #x0000000001000000))) (= (bvand o96 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000004)))) #x0000000100000000))) (= (bvand o96 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000005)))) #x0000010000000000))) (= (bvand o96 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000006)))) #x0001000000000000))) (= (bvand o96 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp52) #x0000000000000000) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result93 (let ((subject r12)) (mk_t__ref3 r121))))
(assert (= (let ((subject r12)) r122) o96))
(assert (= result94 (let ((subject rsp)) (mk_t__ref3 rsp52))))
(assert (= (let ((subject rsp)) rsp53) (bvadd (let ((subject rsp)) rsp52) #x0000000000000008)))
(assert (and (= o97 (readmem64 (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) (let ((subject memory)) memory12))) (and (and (and (and (and (and (and (= (bvand o97 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (let ((subject rsp)) rsp53) #x0000000000000000))))) (= (bvand o97 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000001)))) #x0000000000000100))) (= (bvand o97 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000002)))) #x0000000000010000))) (= (bvand o97 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000003)))) #x0000000001000000))) (= (bvand o97 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000004)))) #x0000000100000000))) (= (bvand o97 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000005)))) #x0000010000000000))) (= (bvand o97 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000006)))) #x0001000000000000))) (= (bvand o97 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp53) #x0000000000000000) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result95 (let ((subject r13)) (mk_t__ref3 r131))))
(assert (= (let ((subject r13)) r132) o97))
(assert (= result96 (let ((subject rsp)) (mk_t__ref3 rsp53))))
(assert (= (let ((subject rsp)) rsp54) (bvadd (let ((subject rsp)) rsp53) #x0000000000000008)))
(assert (and (= o98 (readmem64 (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) (let ((subject memory)) memory12))) (and (and (and (and (and (and (and (= (bvand o98 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (let ((subject rsp)) rsp54) #x0000000000000000))))) (= (bvand o98 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000001)))) #x0000000000000100))) (= (bvand o98 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000002)))) #x0000000000010000))) (= (bvand o98 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000003)))) #x0000000001000000))) (= (bvand o98 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000004)))) #x0000000100000000))) (= (bvand o98 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000005)))) #x0000010000000000))) (= (bvand o98 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000006)))) #x0001000000000000))) (= (bvand o98 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp54) #x0000000000000000) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result97 (let ((subject r14)) (mk_t__ref3 r141))))
(assert (= (let ((subject r14)) r142) o98))
(assert (= result98 (let ((subject rsp)) (mk_t__ref3 rsp54))))
(assert (= (let ((subject rsp)) rsp55) (bvadd (let ((subject rsp)) rsp54) #x0000000000000008)))
(assert (and (= o99 (readmem64 (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) (let ((subject memory)) memory12))) (and (and (and (and (and (and (and (= (bvand o99 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (let ((subject rsp)) rsp55) #x0000000000000000))))) (= (bvand o99 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000001)))) #x0000000000000100))) (= (bvand o99 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000002)))) #x0000000000010000))) (= (bvand o99 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000003)))) #x0000000001000000))) (= (bvand o99 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000004)))) #x0000000100000000))) (= (bvand o99 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000005)))) #x0000010000000000))) (= (bvand o99 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000006)))) #x0001000000000000))) (= (bvand o99 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory12) (bvadd (bvadd (let ((subject rsp)) rsp55) #x0000000000000000) #x0000000000000007)))) #x0100000000000000)))))
(assert (= result99 (let ((subject r15)) (mk_t__ref3 r152))))
(assert (= (let ((subject r15)) r153) o99))
(assert (= result100 (let ((subject rsp)) (mk_t__ref3 rsp55))))
(assert (= (let ((subject rsp)) rsp56) (bvadd (let ((subject rsp)) rsp55) #x0000000000000008)))
(assert (= result101 (let ((subject rsp)) (mk_t__ref3 rsp56))))
(assert (= (let ((subject rsp)) rsp57) (bvadd (let ((subject rsp)) rsp56) #x0000000000000008)))
(assert (= saver152 (let ((subject saver15)) (mk_t__ref3 saver151))))
(assert (= saver142 (let ((subject saver14)) (mk_t__ref3 saver141))))
(assert (= saver132 (let ((subject saver13)) (mk_t__ref3 saver131))))
(assert (= saver122 (let ((subject saver12)) (mk_t__ref3 saver121))))
(assert (= saverbp2 (let ((subject saverbp)) (mk_t__ref3 saverbp1))))
(assert (= saverbx2 (let ((subject saverbx)) (mk_t__ref3 saverbx1))))
(assert (= ra72 (let ((subject ra7)) (mk_t__ref ra71))))
(assert (= ra62 (let ((subject ra6)) (mk_t__ref ra61))))
(assert (= ra52 (let ((subject ra5)) (mk_t__ref ra51))))
(assert (= ra42 (let ((subject ra4)) (mk_t__ref ra41))))
(assert (= ra32 (let ((subject ra3)) (mk_t__ref ra31))))
(assert (= ra22 (let ((subject ra2)) (mk_t__ref ra21))))
(assert (= ra12 (let ((subject ra1)) (mk_t__ref ra11))))
(assert (= ra02 (let ((subject ra0)) (mk_t__ref ra01))))
(assert (= savestackptr2 (let ((subject savestackptr)) (mk_t__ref3 savestackptr1))))
(assert (= memory13 (let ((subject memory)) (mk_map__ref memory12))))
(assert (= r154 (let ((subject r15)) (mk_t__ref3 r153))))
(assert (= r143 (let ((subject r14)) (mk_t__ref3 r142))))
(assert (= r133 (let ((subject r13)) (mk_t__ref3 r132))))
(assert (= r123 (let ((subject r12)) (mk_t__ref3 r122))))
(assert (= r82 (let ((subject r8)) (mk_t__ref3 r81))))
(assert (= rdi21 (let ((subject rdi)) (mk_t__ref3 rdi20))))
(assert (= rsi9 (let ((subject rsi)) (mk_t__ref3 rsi8))))
(assert (= rbp10 (let ((subject rbp)) (mk_t__ref3 rbp9))))
(assert (= rsp58 (let ((subject rsp)) (mk_t__ref3 rsp57))))
(assert (= rbx11 (let ((subject rbx)) (mk_t__ref3 rbx10))))
(assert (= rdx2 (mk_t__ref3 rdx1)))
(assert (= rcx2 (mk_t__ref3 rcx1)))
(assert (= rax6 (mk_t__ref3 rax5)))
(assert (= xmm71 (mk_t__ref3 xmm7)))
(assert (= xmm63 (mk_t__ref3 xmm62)))
(assert (= xmm51 (mk_t__ref3 xmm5)))
(assert (= xmm41 (mk_t__ref3 xmm4)))
(assert (= xmm36 (mk_t__ref3 xmm35)))
(assert (= xmm210 (mk_t__ref3 xmm29)))
(assert (= xmm16 (mk_t__ref3 xmm15)))
(assert (= xmm09 (mk_t__ref3 xmm08)))
(assert (= overflowflag9 (mk_bool__ref overflowflag8)))
(assert (= signflag9 (mk_bool__ref signflag8)))
(assert (= carryflag9 (mk_bool__ref carryflag8)))
(assert (= zeroflag9 (mk_bool__ref zeroflag8)))
(assert (= exit_called1 (mk_bool__ref exit_called)))
(assert (= saver153 saver151))
(assert (= saver143 saver141))
(assert (= saver133 saver131))
(assert (= saver123 saver121))
(assert (= saverbp3 saverbp1))
(assert (= saverbx3 saverbx1))
(assert (= ra73 ra71))
(assert (= ra63 ra61))
(assert (= ra53 ra51))
(assert (= ra43 ra41))
(assert (= ra33 ra31))
(assert (= ra23 ra21))
(assert (= ra13 ra11))
(assert (= ra03 ra01))
(assert (= savestackptr3 savestackptr1))
(assert (= memory14 memory12))
(assert (= r155 r153))
(assert (= r144 r142))
(assert (= r134 r132))
(assert (= r124 r122))
(assert (= r83 r81))
(assert (= rdi22 rdi20))
(assert (= rsi10 rsi8))
(assert (= rbp11 rbp9))
(assert (= rsp59 rsp57))
(assert (= rbx12 rbx10))
(assert (= rdx3 rdx1))
(assert (= rcx3 rcx1))
(assert (= rax7 rax5))
(assert (= xmm72 xmm7))
(assert (= xmm64 xmm62))
(assert (= xmm52 xmm5))
(assert (= xmm42 xmm4))
(assert (= xmm37 xmm35))
(assert (= xmm211 xmm29))
(assert (= xmm17 xmm15))
(assert (= xmm010 xmm08))
(assert (= overflowflag10 overflowflag8))
(assert (= signflag10 signflag8))
(assert (= carryflag10 carryflag8))
(assert (= zeroflag10 zeroflag8))
(assert (= exit_called2 exit_called))
(assert (not (= (to_rep (select (map__content memory13) (t__content3 rsp))) (to_rep (select (map__content memory) (t__content3 rsp))))))
(check-sat)
(exit)
