(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth3 ((_ BitVec 64) Int) Bool)
(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl3 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left4 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right4 v (bv2nat n)))))
(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth3 x (bv2nat i)) (nth_bv3 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))
(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64)) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool)) Bool true)
(declare-sort unsigned16 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq1 (unsigned16 unsigned16) Bool)
(declare-const dummy1 unsigned16)
(declare-datatypes () ((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16 (unsigned16__content a))
(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16)) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool)) Bool true)
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (unsigned8 unsigned8) Bool)
(declare-const dummy2 unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int6 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int6 x)) :pattern ((to_int6 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (unsigned8 (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((v unsigned8)) (forall ((i (_ BitVec 64))) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) Int)
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 64)) (j (_ BitVec 64))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep (select b (bvadd j #x0000000000000001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 64)) (j (_ BitVec 64))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep (select b (bvadd i #x0000000000000001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))
(declare-fun user_eq3 (unsigned32 unsigned32) Bool)
(declare-const dummy3 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32)) (temp___is_init_205 Bool) (temp___skip_constant_206 Bool) (temp___do_toplevel_207 Bool)) Bool true)
(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))
(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rax (_ BitVec 64))) (! (=> (dynamic_invariant x86__rax true true true) (let ((result (eax x86__rax))) (and (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295)))) (dynamic_invariant2 result true false true)))) :pattern ((eax x86__rax)))))
(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)
(declare-fun writereg32post__function_guard (Bool (_ BitVec 64) (_ BitVec 32)) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rcx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rcx true true true) (let ((result (ecx x86__rcx))) (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true false true)))) :pattern ((ecx x86__rcx)))))
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rdx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rdx true true true) (let ((result (edx x86__rdx))) (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true false true)))) :pattern ((edx x86__rdx)))))
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)
(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)
(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rbx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rbx true true true) (let ((result (ebx x86__rbx))) (and (= result (readreg32 x86__rbx)) (dynamic_invariant2 result true false true)))) :pattern ((ebx x86__rbx)))))
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))
(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rsp (_ BitVec 64))) (! (=> (dynamic_invariant x86__rsp true true true) (let ((result (esp x86__rsp))) (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true false true)))) :pattern ((esp x86__rsp)))))
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))
(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rsi (_ BitVec 64))) (! (=> (dynamic_invariant x86__rsi true true true) (let ((result (esi x86__rsi))) (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true false true)))) :pattern ((esi x86__rsi)))))
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))
(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rdi (_ BitVec 64))) (! (=> (dynamic_invariant x86__rdi true true true) (let ((result (edi x86__rdi))) (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true false true)))) :pattern ((edi x86__rdi)))))
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const attr__ATTRIBUTE_ADDRESS26 Int)
(declare-const attr__ATTRIBUTE_ADDRESS27 Int)
(declare-const attr__ATTRIBUTE_ADDRESS28 Int)
(declare-const attr__ATTRIBUTE_ADDRESS29 Int)
(declare-const attr__ATTRIBUTE_ADDRESS30 Int)
(declare-const attr__ATTRIBUTE_ADDRESS31 Int)
(declare-const attr__ATTRIBUTE_ADDRESS32 Int)
(declare-const attr__ATTRIBUTE_ADDRESS33 Int)
(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8)) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool)) Bool true)
(declare-fun readmem8 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))
(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true) (let ((result (readmem8 addr x86__memory))) (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3 result true false true)))) :pattern ((readmem8 addr x86__memory))))))
(declare-fun readmem32 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))
(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true) (let ((result (readmem32 addr x86__memory))) (and (and (and (and (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select x86__memory addr)))) (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))) (dynamic_invariant2 result true false true)))) :pattern ((readmem32 addr x86__memory))))))
(declare-fun readmem64 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true) (let ((result (readmem64 addr x86__memory))) (and (and (and (and (and (and (and (and (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select x86__memory addr)))) (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (dynamic_invariant result true false true)))) :pattern ((readmem64 addr x86__memory))))))
(declare-sort unsigned641 0)
(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (unsigned641 unsigned641) Bool)
(declare-const dummy4 unsigned641)
(declare-datatypes () ((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641 (unsigned64__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_274 (_ BitVec 64)) (temp___is_init_271 Bool) (temp___skip_constant_272 Bool) (temp___do_toplevel_273 Bool)) Bool true)
(declare-sort unsigned81 0)
(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (unsigned81 unsigned81) Bool)
(declare-const dummy5 unsigned81)
(declare-datatypes () ((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref___2__projection ((a unsigned8__ref1)) unsigned81 (unsigned8__content1 a))
(define-fun dynamic_invariant5 ((temp___expr_292 (_ BitVec 8)) (temp___is_init_289 Bool) (temp___skip_constant_290 Bool) (temp___do_toplevel_291 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS34 Int)
(declare-const attr__ATTRIBUTE_ADDRESS35 Int)
(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS36 Int)
(declare-const attr__ATTRIBUTE_ADDRESS37 Int)
(declare-const attr__ATTRIBUTE_ADDRESS38 Int)
(declare-const attr__ATTRIBUTE_ADDRESS39 Int)
(declare-const attr__ATTRIBUTE_ADDRESS40 Int)
(declare-const attr__ATTRIBUTE_ADDRESS41 Int)
(declare-const attr__ATTRIBUTE_ADDRESS42 Int)
(declare-const attr__ATTRIBUTE_ADDRESS43 Int)
(declare-const attr__ATTRIBUTE_ADDRESS44 Int)
(declare-const attr__ATTRIBUTE_ADDRESS45 Int)
(declare-const attr__ATTRIBUTE_ADDRESS46 Int)
(declare-const attr__ATTRIBUTE_ADDRESS47 Int)
(declare-const attr__ATTRIBUTE_ADDRESS48 Int)
(declare-const attr__ATTRIBUTE_ADDRESS49 Int)
(declare-const attr__ATTRIBUTE_ADDRESS50 Int)
(assert (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64)) (range_size (_ BitVec 64))) (! (=> (and (and (dynamic_invariant var true true true) (dynamic_invariant bottom true true true)) (dynamic_invariant range_size true true true)) (= (= (inrange64 var bottom range_size) true) (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1))) (and (bvule bottom var) (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1))))) (or (and (bvule bottom var) (bvule var ((_ int2bv 64) 18446744073709551615))) (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern ((inrange64 var bottom range_size)))))
(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))
(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true) (let ((result (readreg16 reg))) (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535)))) (dynamic_invariant1 result true false true)))) :pattern ((readreg16 reg)))))
(assert (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 16))) (! (=> (and (and (dynamic_invariant regold true true true) (dynamic_invariant regnew true true true)) (dynamic_invariant1 val__ true true true)) (= (= (writereg16post regold regnew val__) true) (and (= (readreg16 regnew) val__) (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080)))))) :pattern ((writereg16post regold regnew val__))))))
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true) (let ((result (readreg32 reg))) (and (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295)))) (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)))))
(assert (forall ((regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 32))) (! (=> (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__ true true true)) (= (= (writereg32post regnew val__) true) (and (= (readreg32 regnew) val__) (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern ((writereg32post regnew val__))))))
(declare-const zeroflag Bool)
(declare-const carryflag Bool)
(declare-const signflag Bool)
(declare-const overflowflag Bool)
(declare-const xmm0 (_ BitVec 64))
(declare-const xmm1 (_ BitVec 64))
(declare-const xmm2 (_ BitVec 64))
(declare-const xmm3 (_ BitVec 64))
(declare-const rbx t__ref3)
(declare-const rsp t__ref3)
(declare-const rbp t__ref3)
(declare-const rsi t__ref3)
(declare-const rdi t__ref3)
(declare-const r12 t__ref3)
(declare-const r13 t__ref3)
(declare-const r14 t__ref3)
(declare-const r15 t__ref3)
(declare-const memory map__ref)
(declare-const savestackptr t__ref3)
(declare-const ra0 t__ref)
(declare-const ra1 t__ref)
(declare-const ra2 t__ref)
(declare-const ra3 t__ref)
(declare-const ra4 t__ref)
(declare-const ra5 t__ref)
(declare-const ra6 t__ref)
(declare-const ra7 t__ref)
(declare-const saverbx t__ref3)
(declare-const saverbp t__ref3)
(declare-const saver12 t__ref3)
(declare-const saver13 t__ref3)
(declare-const saver14 t__ref3)
(declare-const saver15 t__ref3)
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 8))
(declare-const o2 (_ BitVec 8))
(declare-const o3 (_ BitVec 8))
(declare-const o4 (_ BitVec 8))
(declare-const o5 (_ BitVec 8))
(declare-const o6 (_ BitVec 8))
(declare-const o7 (_ BitVec 8))
(declare-const o8 (_ BitVec 8))
(declare-const o9 (_ BitVec 8))
(declare-const o10 (_ BitVec 8))
(declare-const o11 (_ BitVec 8))
(declare-const o12 (_ BitVec 8))
(declare-const o13 (_ BitVec 8))
(declare-const o14 (_ BitVec 8))
(declare-const o15 (_ BitVec 8))
(declare-const o16 (_ BitVec 8))
(declare-const o17 (_ BitVec 64))
(declare-const o18 (_ BitVec 64))
(declare-const o19 (_ BitVec 64))
(declare-const o20 (_ BitVec 64))
(declare-const o21 (_ BitVec 64))
(declare-const o22 (_ BitVec 64))
(declare-const o23 (_ BitVec 64))
(declare-const o24 (_ BitVec 64))
(declare-const o25 (_ BitVec 64))
(declare-const o26 (_ BitVec 64))
(declare-const o27 (_ BitVec 32))
(declare-const o28 (_ BitVec 32))
(declare-const o29 (_ BitVec 64))
(declare-const o30 (_ BitVec 32))
(declare-const o31 (_ BitVec 32))
(declare-const o32 (_ BitVec 32))
(declare-const o33 (_ BitVec 32))
(declare-const o34 Bool)
(declare-const o35 (_ BitVec 32))
(declare-const o36 (_ BitVec 32))
(declare-const o37 (_ BitVec 32))
(declare-const o38 Bool)
(declare-const temp___393 (_ BitVec 64))
(declare-const temp___394 (_ BitVec 64))
(declare-const temp___392 (_ BitVec 64))
(declare-const temp___391 Bool)
(declare-const temp___390 Bool)
(declare-const temp___389 (_ BitVec 64))
(declare-const temp___387 Bool)
(declare-const temp___388 (_ BitVec 64))
(declare-const temp___386 (_ BitVec 64))
(declare-const temp___385 (_ BitVec 64))
(declare-const temp___384 Bool)
(declare-const o39 (_ BitVec 64))
(declare-const o40 (_ BitVec 32))
(declare-const o41 (_ BitVec 32))
(declare-const o42 (_ BitVec 32))
(declare-const o43 (_ BitVec 32))
(declare-const o44 (_ BitVec 32))
(declare-const o45 Bool)
(declare-const o46 (_ BitVec 32))
(declare-const o47 (_ BitVec 32))
(declare-const o48 (_ BitVec 32))
(declare-const o49 Bool)
(declare-const o50 (_ BitVec 32))
(declare-const o51 (_ BitVec 32))
(declare-const o52 Bool)
(declare-const o53 (_ BitVec 32))
(declare-const o54 (_ BitVec 32))
(declare-const o55 (_ BitVec 32))
(declare-const o56 (_ BitVec 32))
(declare-const o57 Bool)
(declare-const o58 Bool)
(declare-const o59 Bool)
(declare-const o60 (_ BitVec 64))
(declare-const o61 (_ BitVec 64))
(declare-const o62 (_ BitVec 64))
(declare-const o63 (_ BitVec 64))
(declare-const o64 (_ BitVec 32))
(declare-const o65 (_ BitVec 32))
(declare-const o66 (_ BitVec 64))
(declare-const o67 (_ BitVec 32))
(declare-const o68 (_ BitVec 32))
(declare-const o69 (_ BitVec 32))
(declare-const o70 (_ BitVec 32))
(declare-const o71 Bool)
(declare-const o72 (_ BitVec 32))
(declare-const o73 (_ BitVec 32))
(declare-const o74 (_ BitVec 32))
(declare-const o75 Bool)
(declare-const temp___404 (_ BitVec 64))
(declare-const temp___403 (_ BitVec 64))
(declare-const temp___402 Bool)
(declare-const temp___401 Bool)
(declare-const temp___400 (_ BitVec 64))
(declare-const temp___398 Bool)
(declare-const temp___399 (_ BitVec 64))
(declare-const temp___397 (_ BitVec 64))
(declare-const temp___396 (_ BitVec 64))
(declare-const temp___395 Bool)
(declare-const temp___405 (_ BitVec 64))
(declare-const o76 (_ BitVec 64))
(declare-const o77 (_ BitVec 32))
(declare-const o78 (_ BitVec 32))
(declare-const o79 (_ BitVec 32))
(declare-const o80 (_ BitVec 32))
(declare-const o81 (_ BitVec 32))
(declare-const o82 Bool)
(declare-const o83 (_ BitVec 32))
(declare-const o84 (_ BitVec 32))
(declare-const o85 (_ BitVec 32))
(declare-const o86 Bool)
(declare-const o87 (_ BitVec 32))
(declare-const o88 (_ BitVec 32))
(declare-const o89 Bool)
(declare-const o90 (_ BitVec 32))
(declare-const o91 (_ BitVec 32))
(declare-const o92 (_ BitVec 32))
(declare-const o93 (_ BitVec 32))
(declare-const o94 Bool)
(declare-const o95 Bool)
(declare-const o96 Bool)
(declare-const o97 (_ BitVec 64))
(declare-const o98 (_ BitVec 64))
(declare-const o99 (_ BitVec 64))
(declare-const o100 (_ BitVec 64))
(declare-const o101 (_ BitVec 32))
(declare-const o102 (_ BitVec 32))
(declare-const o103 (_ BitVec 64))
(declare-const o104 (_ BitVec 32))
(declare-const o105 (_ BitVec 32))
(declare-const o106 (_ BitVec 32))
(declare-const o107 (_ BitVec 32))
(declare-const o108 Bool)
(declare-const o109 (_ BitVec 32))
(declare-const o110 (_ BitVec 32))
(declare-const o111 (_ BitVec 32))
(declare-const o112 Bool)
(declare-const o113 (_ BitVec 64))
(declare-const o114 (_ BitVec 32))
(declare-const o115 (_ BitVec 32))
(declare-const o116 (_ BitVec 32))
(declare-const o117 (_ BitVec 32))
(declare-const o118 (_ BitVec 32))
(declare-const o119 Bool)
(declare-const o120 (_ BitVec 32))
(declare-const o121 (_ BitVec 32))
(declare-const o122 (_ BitVec 32))
(declare-const o123 Bool)
(declare-const o124 (_ BitVec 32))
(declare-const o125 (_ BitVec 32))
(declare-const o126 Bool)
(declare-const o127 (_ BitVec 32))
(declare-const o128 (_ BitVec 32))
(declare-const o129 (_ BitVec 32))
(declare-const o130 (_ BitVec 32))
(declare-const o131 Bool)
(declare-const o132 Bool)
(declare-const o133 Bool)
(declare-const result t__ref3)
(declare-const savestackptr1 (_ BitVec 64))
(declare-const result1 t__ref)
(declare-const ra01 (_ BitVec 8))
(declare-const result2 t__ref)
(declare-const ra11 (_ BitVec 8))
(declare-const result3 t__ref)
(declare-const ra21 (_ BitVec 8))
(declare-const result4 t__ref)
(declare-const ra31 (_ BitVec 8))
(declare-const result5 t__ref)
(declare-const ra41 (_ BitVec 8))
(declare-const result6 t__ref)
(declare-const ra51 (_ BitVec 8))
(declare-const result7 t__ref)
(declare-const ra61 (_ BitVec 8))
(declare-const result8 t__ref)
(declare-const ra71 (_ BitVec 8))
(declare-const result9 t__ref3)
(declare-const saverbx1 (_ BitVec 64))
(declare-const result10 t__ref3)
(declare-const saverbp1 (_ BitVec 64))
(declare-const result11 t__ref3)
(declare-const saver121 (_ BitVec 64))
(declare-const result12 t__ref3)
(declare-const saver131 (_ BitVec 64))
(declare-const result13 t__ref3)
(declare-const saver141 (_ BitVec 64))
(declare-const result14 t__ref3)
(declare-const saver151 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result15 t__ref3)
(declare-const rsp1 (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const result16 t__ref3)
(declare-const rsp2 (_ BitVec 64))
(declare-const rdi1 (_ BitVec 64))
(declare-const memory3 (Array (_ BitVec 64) unsigned8))
(declare-const result17 t__ref3)
(declare-const rsp3 (_ BitVec 64))
(declare-const memory4 (Array (_ BitVec 64) unsigned8))
(declare-const result18 t__ref3)
(declare-const rsp4 (_ BitVec 64))
(declare-const memory5 (Array (_ BitVec 64) unsigned8))
(declare-const result19 t__ref3)
(declare-const rsp5 (_ BitVec 64))
(declare-const memory6 (Array (_ BitVec 64) unsigned8))
(declare-const result20 t__ref3)
(declare-const rsp6 (_ BitVec 64))
(declare-const rbx1 (_ BitVec 64))
(declare-const result21 t__ref3)
(declare-const rsp7 (_ BitVec 64))
(declare-const result22 t__ref3)
(declare-const rsp8 (_ BitVec 64))
(declare-const rsp9 (_ BitVec 64))
(declare-const result23 t__ref3)
(declare-const rsi1 (_ BitVec 64))
(declare-const result24 t__ref3)
(declare-const rdi2 (_ BitVec 64))
(declare-const result25 t__ref3)
(declare-const rbp1 (_ BitVec 64))
(declare-const result26 t__ref3)
(declare-const xmm31 (_ BitVec 64))
(declare-const result27 t__ref3)
(declare-const xmm21 (_ BitVec 64))
(declare-const result28 t__ref3)
(declare-const xmm11 (_ BitVec 64))
(declare-const result29 t__ref3)
(declare-const xmm01 (_ BitVec 64))
(declare-const result30 t__ref3)
(declare-const rsp10 (_ BitVec 64))
(declare-const rsp11 (_ BitVec 64))
(declare-const rdi3 (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const result31 t__ref3)
(declare-const rsp12 (_ BitVec 64))
(declare-const rsp13 (_ BitVec 64))
(declare-const rdi4 (_ BitVec 64))
(declare-const result32 bool__ref)
(declare-const zeroflag1 Bool)
(declare-const result33 bool__ref)
(declare-const signflag1 Bool)
(declare-const result34 bool__ref)
(declare-const carryflag1 Bool)
(declare-const result35 bool__ref)
(declare-const overflowflag1 Bool)
(declare-const zeroflag2 Bool)
(declare-const carryflag2 Bool)
(declare-const signflag2 Bool)
(declare-const overflowflag2 Bool)
(declare-const xmm02 (_ BitVec 64))
(declare-const rbx2 (_ BitVec 64))
(declare-const rsp14 (_ BitVec 64))
(declare-const rbp2 (_ BitVec 64))
(declare-const result36 t__ref3)
(declare-const xmm03 (_ BitVec 64))
(declare-const rdi5 (_ BitVec 64))
(declare-const rax1 (_ BitVec 64))
(declare-const rbx3 (_ BitVec 64))
(declare-const result37 t__ref3)
(declare-const rbp3 (_ BitVec 64))
(declare-const result38 t__ref3)
(declare-const rsp15 (_ BitVec 64))
(declare-const rsp16 (_ BitVec 64))
(declare-const result39 bool__ref)
(declare-const zeroflag3 Bool)
(declare-const result40 bool__ref)
(declare-const signflag3 Bool)
(declare-const result41 bool__ref)
(declare-const carryflag3 Bool)
(declare-const result42 Bool)
(declare-const result43 Bool)
(declare-const result44 bool__ref)
(declare-const overflowflag3 Bool)
(declare-const zeroflag4 bool__ref)
(declare-const carryflag4 bool__ref)
(declare-const signflag4 bool__ref)
(declare-const overflowflag4 bool__ref)
(declare-const xmm04 t__ref3)
(declare-const rax2 t__ref3)
(declare-const rbx4 t__ref3)
(declare-const rsp17 t__ref3)
(declare-const rbp4 t__ref3)
(declare-const rdi6 t__ref3)
(declare-const zeroflag5 Bool)
(declare-const carryflag5 Bool)
(declare-const signflag5 Bool)
(declare-const overflowflag5 Bool)
(declare-const xmm05 (_ BitVec 64))
(declare-const rax3 (_ BitVec 64))
(declare-const rbx5 (_ BitVec 64))
(declare-const rsp18 (_ BitVec 64))
(declare-const rbp5 (_ BitVec 64))
(declare-const rdi7 (_ BitVec 64))
(declare-const zeroflag6 bool__ref)
(declare-const carryflag6 bool__ref)
(declare-const signflag6 bool__ref)
(declare-const overflowflag6 bool__ref)
(declare-const xmm06 t__ref3)
(declare-const rax4 t__ref3)
(declare-const rbx6 t__ref3)
(declare-const rsp19 t__ref3)
(declare-const rbp6 t__ref3)
(declare-const rdi8 t__ref3)
(declare-const zeroflag7 Bool)
(declare-const carryflag7 Bool)
(declare-const signflag7 Bool)
(declare-const overflowflag7 Bool)
(declare-const xmm07 (_ BitVec 64))
(declare-const rax5 (_ BitVec 64))
(declare-const rbx7 (_ BitVec 64))
(declare-const rsp20 (_ BitVec 64))
(declare-const rbp7 (_ BitVec 64))
(declare-const rdi9 (_ BitVec 64))
(declare-const rdi10 (_ BitVec 64))
(declare-const rbx8 (_ BitVec 64))
(declare-const result45 t__ref3)
(declare-const rbp8 (_ BitVec 64))
(declare-const result46 t__ref3)
(declare-const rsp21 (_ BitVec 64))
(declare-const rsp22 (_ BitVec 64))
(declare-const result47 t__ref3)
(declare-const rsi2 (_ BitVec 64))
(declare-const result48 t__ref3)
(declare-const rdi11 (_ BitVec 64))
(declare-const result49 t__ref3)
(declare-const xmm32 (_ BitVec 64))
(declare-const result50 t__ref3)
(declare-const xmm22 (_ BitVec 64))
(declare-const result51 t__ref3)
(declare-const xmm12 (_ BitVec 64))
(declare-const result52 t__ref3)
(declare-const xmm08 (_ BitVec 64))
(declare-const result53 t__ref3)
(declare-const rsp23 (_ BitVec 64))
(declare-const rsp24 (_ BitVec 64))
(declare-const rax6 (_ BitVec 64))
(declare-const rdi12 (_ BitVec 64))
(declare-const result54 t__ref3)
(declare-const rsp25 (_ BitVec 64))
(declare-const rsp26 (_ BitVec 64))
(declare-const rsi3 (_ BitVec 64))
(declare-const result55 bool__ref)
(declare-const zeroflag8 Bool)
(declare-const result56 bool__ref)
(declare-const signflag8 Bool)
(declare-const result57 bool__ref)
(declare-const carryflag8 Bool)
(declare-const result58 bool__ref)
(declare-const overflowflag8 Bool)
(declare-const zeroflag9 Bool)
(declare-const carryflag9 Bool)
(declare-const signflag9 Bool)
(declare-const overflowflag9 Bool)
(declare-const xmm09 (_ BitVec 64))
(declare-const rbx9 (_ BitVec 64))
(declare-const rsp27 (_ BitVec 64))
(declare-const rbp9 (_ BitVec 64))
(declare-const result59 t__ref3)
(declare-const xmm010 (_ BitVec 64))
(declare-const rdi13 (_ BitVec 64))
(declare-const rax7 (_ BitVec 64))
(declare-const rbx10 (_ BitVec 64))
(declare-const result60 t__ref3)
(declare-const rbp10 (_ BitVec 64))
(declare-const result61 t__ref3)
(declare-const rsp28 (_ BitVec 64))
(declare-const rsp29 (_ BitVec 64))
(declare-const result62 bool__ref)
(declare-const zeroflag10 Bool)
(declare-const result63 bool__ref)
(declare-const signflag10 Bool)
(declare-const result64 bool__ref)
(declare-const carryflag10 Bool)
(declare-const result65 Bool)
(declare-const result66 Bool)
(declare-const result67 bool__ref)
(declare-const overflowflag10 Bool)
(declare-const zeroflag11 bool__ref)
(declare-const carryflag11 bool__ref)
(declare-const signflag11 bool__ref)
(declare-const overflowflag11 bool__ref)
(declare-const xmm011 t__ref3)
(declare-const rax8 t__ref3)
(declare-const rbx11 t__ref3)
(declare-const rsp30 t__ref3)
(declare-const rbp11 t__ref3)
(declare-const rdi14 t__ref3)
(declare-const zeroflag12 Bool)
(declare-const carryflag12 Bool)
(declare-const signflag12 Bool)
(declare-const overflowflag12 Bool)
(declare-const xmm012 (_ BitVec 64))
(declare-const rax9 (_ BitVec 64))
(declare-const rbx12 (_ BitVec 64))
(declare-const rsp31 (_ BitVec 64))
(declare-const rbp12 (_ BitVec 64))
(declare-const rdi15 (_ BitVec 64))
(declare-const zeroflag13 bool__ref)
(declare-const carryflag13 bool__ref)
(declare-const signflag13 bool__ref)
(declare-const overflowflag13 bool__ref)
(declare-const xmm013 t__ref3)
(declare-const rax10 t__ref3)
(declare-const rbx13 t__ref3)
(declare-const rsp32 t__ref3)
(declare-const rbp13 t__ref3)
(declare-const rdi16 t__ref3)
(declare-const zeroflag14 Bool)
(declare-const carryflag14 Bool)
(declare-const signflag14 Bool)
(declare-const overflowflag14 Bool)
(declare-const xmm014 (_ BitVec 64))
(declare-const rax11 (_ BitVec 64))
(declare-const rbx14 (_ BitVec 64))
(declare-const rsp33 (_ BitVec 64))
(declare-const rbp14 (_ BitVec 64))
(declare-const rdi17 (_ BitVec 64))
(declare-const rdi18 (_ BitVec 64))
(declare-const rbx15 (_ BitVec 64))
(declare-const result68 t__ref3)
(declare-const rbp15 (_ BitVec 64))
(declare-const result69 t__ref3)
(declare-const rsp34 (_ BitVec 64))
(declare-const rsp35 (_ BitVec 64))
(declare-const result70 t__ref3)
(declare-const rsi4 (_ BitVec 64))
(declare-const result71 t__ref3)
(declare-const rdi19 (_ BitVec 64))
(declare-const result72 t__ref3)
(declare-const xmm33 (_ BitVec 64))
(declare-const result73 t__ref3)
(declare-const xmm23 (_ BitVec 64))
(declare-const result74 t__ref3)
(declare-const xmm13 (_ BitVec 64))
(declare-const result75 t__ref3)
(declare-const xmm015 (_ BitVec 64))
(declare-const result76 t__ref3)
(declare-const rsp36 (_ BitVec 64))
(declare-const rsp37 (_ BitVec 64))
(declare-const rax12 (_ BitVec 64))
(declare-const rdi20 (_ BitVec 64))
(declare-const result77 t__ref3)
(declare-const rsp38 (_ BitVec 64))
(declare-const rsp39 (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const result78 bool__ref)
(declare-const zeroflag15 Bool)
(declare-const result79 bool__ref)
(declare-const signflag15 Bool)
(declare-const result80 bool__ref)
(declare-const carryflag15 Bool)
(declare-const result81 bool__ref)
(declare-const overflowflag15 Bool)
(declare-const zeroflag16 Bool)
(declare-const carryflag16 Bool)
(declare-const signflag16 Bool)
(declare-const overflowflag16 Bool)
(declare-const xmm016 (_ BitVec 64))
(declare-const rbx16 (_ BitVec 64))
(declare-const rsp40 (_ BitVec 64))
(declare-const rbp16 (_ BitVec 64))
(declare-const result82 t__ref3)
(declare-const xmm017 (_ BitVec 64))
(declare-const rdi21 (_ BitVec 64))
(declare-const rax13 (_ BitVec 64))
(declare-const rbx17 (_ BitVec 64))
(declare-const result83 t__ref3)
(declare-const rbp17 (_ BitVec 64))
(declare-const result84 t__ref3)
(declare-const rsp41 (_ BitVec 64))
(declare-const rsp42 (_ BitVec 64))
(declare-const result85 bool__ref)
(declare-const zeroflag17 Bool)
(declare-const result86 bool__ref)
(declare-const signflag17 Bool)
(declare-const result87 bool__ref)
(declare-const carryflag17 Bool)
(declare-const result88 Bool)
(declare-const result89 Bool)
(declare-const result90 bool__ref)
(declare-const overflowflag17 Bool)
(declare-const zeroflag18 bool__ref)
(declare-const carryflag18 bool__ref)
(declare-const signflag18 bool__ref)
(declare-const overflowflag18 bool__ref)
(declare-const xmm018 t__ref3)
(declare-const rax14 t__ref3)
(declare-const rbx18 t__ref3)
(declare-const rsp43 t__ref3)
(declare-const rbp18 t__ref3)
(declare-const rdi22 t__ref3)
(declare-const zeroflag19 Bool)
(declare-const carryflag19 Bool)
(declare-const signflag19 Bool)
(declare-const overflowflag19 Bool)
(declare-const xmm019 (_ BitVec 64))
(declare-const rax15 (_ BitVec 64))
(declare-const rbx19 (_ BitVec 64))
(declare-const rsp44 (_ BitVec 64))
(declare-const rbp19 (_ BitVec 64))
(declare-const rdi23 (_ BitVec 64))
(assert (= o (t__content3 rsp)))
(assert (= result savestackptr))
(assert (= (let ((subject savestackptr)) savestackptr1) o))
(assert (and (= o1 (readmem8 (t__content3 rsp) (map__content memory))) (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))
(assert (= o2 o1))
(assert (= result1 ra0))
(assert (= (let ((subject ra0)) ra01) o2))
(assert (and (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1)) (map__content memory))) (= o3 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))
(assert (= o4 o3))
(assert (= result2 ra1))
(assert (= (let ((subject ra1)) ra11) o4))
(assert (and (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2)) (map__content memory))) (= o5 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))
(assert (= o6 o5))
(assert (= result3 ra2))
(assert (= (let ((subject ra2)) ra21) o6))
(assert (and (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3)) (map__content memory))) (= o7 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))
(assert (= o8 o7))
(assert (= result4 ra3))
(assert (= (let ((subject ra3)) ra31) o8))
(assert (and (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4)) (map__content memory))) (= o9 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))
(assert (= o10 o9))
(assert (= result5 ra4))
(assert (= (let ((subject ra4)) ra41) o10))
(assert (and (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5)) (map__content memory))) (= o11 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))
(assert (= o12 o11))
(assert (= result6 ra5))
(assert (= (let ((subject ra5)) ra51) o12))
(assert (and (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6)) (map__content memory))) (= o13 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))
(assert (= o14 o13))
(assert (= result7 ra6))
(assert (= (let ((subject ra6)) ra61) o14))
(assert (and (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7)) (map__content memory))) (= o15 (to_rep (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))
(assert (= o16 o15))
(assert (= result8 ra7))
(assert (= (let ((subject ra7)) ra71) o16))
(assert (= o17 (t__content3 rbx)))
(assert (= result9 saverbx))
(assert (= (let ((subject saverbx)) saverbx1) o17))
(assert (= o18 (t__content3 rbp)))
(assert (= result10 saverbp))
(assert (= (let ((subject saverbp)) saverbp1) o18))
(assert (= o19 (t__content3 r12)))
(assert (= result11 saver12))
(assert (= (let ((subject saver12)) saver121) o19))
(assert (= o20 (t__content3 r13)))
(assert (= result12 saver13))
(assert (= (let ((subject saver13)) saver131) o20))
(assert (= o21 (t__content3 r14)))
(assert (= result13 saver14))
(assert (= (let ((subject saver14)) saver141) o21))
(assert (= o22 (t__content3 r15)))
(assert (= result14 saver15))
(assert (= (let ((subject saver15)) saver151) o22))
(assert (= (t__content3 rsp) ((_ int2bv 64) 12105675798371893247)))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r15) ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8)))))) (= (bvand (t__content3 r15) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand (t__content3 r15) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand (t__content3 r15) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand (t__content3 r15) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand (t__content3 r15) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand (t__content3 r15) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand (t__content3 r15) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (t__content3 rsp) ((_ int2bv 64) 8)))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep (select (map__content memory) i))))))))
(assert (= result15 rsp))
(assert (= (let ((subject rsp)) rsp1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r14) ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)))))) (= (bvand (t__content3 r14) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand (t__content3 r14) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand (t__content3 r14) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand (t__content3 r14) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand (t__content3 r14) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand (t__content3 r14) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand (t__content3 r14) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep (select (let ((subject memory)) memory1) i))))))))
(assert (= result16 (let ((subject rsp)) (mk_t__ref3 rsp1))))
(assert (= (let ((subject rsp)) rsp2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))
(assert (= (writereg32post (let ((subject rdi)) rdi1) ((_ int2bv 32) 4198504)) true))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r13) ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)))))) (= (bvand (t__content3 r13) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand (t__content3 r13) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand (t__content3 r13) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand (t__content3 r13) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand (t__content3 r13) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand (t__content3 r13) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand (t__content3 r13) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep (select (let ((subject memory)) memory2) i))))))))
(assert (= result17 (let ((subject rsp)) (mk_t__ref3 rsp2))))
(assert (= (let ((subject rsp)) rsp3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 r12) ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)))))) (= (bvand (t__content3 r12) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand (t__content3 r12) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand (t__content3 r12) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand (t__content3 r12) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand (t__content3 r12) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand (t__content3 r12) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand (t__content3 r12) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep (select (let ((subject memory)) memory3) i))))))))
(assert (= result18 (let ((subject rsp)) (mk_t__ref3 rsp3))))
(assert (= (let ((subject rsp)) rsp4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 rbp) ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)))))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand (t__content3 rbp) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep (select (let ((subject memory)) memory4) i))))))))
(assert (= result19 (let ((subject rsp)) (mk_t__ref3 rsp4))))
(assert (= (let ((subject rsp)) rsp5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))
(assert (and (and (and (and (and (and (and (and (= (bvand (t__content3 rbx) ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)))))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand (t__content3 rbx) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep (select (let ((subject memory)) memory5) i))))))))
(assert (= result20 (let ((subject rsp)) (mk_t__ref3 rsp5))))
(assert (= (let ((subject rsp)) rsp6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))
(assert (= (writereg32post (let ((subject rbx)) rbx1) ((_ int2bv 32) 0)) true))
(assert (= result21 (let ((subject rsp)) (mk_t__ref3 rsp6))))
(assert (= (let ((subject rsp)) rsp7) (bvsub (let ((subject rsp)) rsp6) ((_ int2bv 64) 104))))
(assert (= result22 (let ((subject rsp)) (mk_t__ref3 rsp7))))
(assert (= (let ((subject rsp)) rsp8) (bvsub (let ((subject rsp)) rsp7) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp9) (bvadd (let ((subject rsp)) rsp8) ((_ int2bv 64) 8))))
(assert (= result23 rsi))
(assert (= (let ((subject rsi)) rsi1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))
(assert (= result24 (let ((subject rdi)) (mk_t__ref3 rdi1))))
(assert (= (let ((subject rdi)) rdi2) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 44))))
(assert (= result25 rbp))
(assert (= (let ((subject rbp)) rbp1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))
(assert (and (= o23 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o23 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198776))))) (= (bvand o23 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o23 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o23 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o23 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o23 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o23 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o23 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result26 (mk_t__ref3 xmm3)))
(assert (= xmm31 o23))
(assert (and (= o24 (readmem64 ((_ int2bv 64) 4198784) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o24 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198784))))) (= (bvand o24 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o24 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o24 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o24 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o24 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o24 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o24 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result27 (mk_t__ref3 xmm2)))
(assert (= xmm21 o24))
(assert (and (= o25 (readmem64 ((_ int2bv 64) 4198792) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o25 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198792))))) (= (bvand o25 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o25 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o25 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o25 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o25 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o25 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o25 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result28 (mk_t__ref3 xmm1)))
(assert (= xmm11 o25))
(assert (and (= o26 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o26 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198768))))) (= (bvand o26 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o26 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o26 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o26 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o26 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o26 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o26 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result29 (mk_t__ref3 xmm0)))
(assert (= xmm01 o26))
(assert (= result30 (let ((subject rsp)) (mk_t__ref3 rsp9))))
(assert (= (let ((subject rsp)) rsp10) (bvsub (let ((subject rsp)) rsp9) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp11) (bvadd (let ((subject rsp)) rsp10) ((_ int2bv 64) 8))))
(assert (= (writereg32post (let ((subject rdi)) rdi3) ((_ int2bv 32) 4198688)) true))
(assert (= (writereg32post rax ((_ int2bv 32) 0)) true))
(assert (= result31 (let ((subject rsp)) (mk_t__ref3 rsp11))))
(assert (= (let ((subject rsp)) rsp12) (bvsub (let ((subject rsp)) rsp11) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp13) (bvadd (let ((subject rsp)) rsp12) ((_ int2bv 64) 8))))
(assert (and (= o27 (esp (let ((subject rsp)) rsp13))) (= o27 (readreg32 (let ((subject rsp)) rsp13)))))
(assert (= o28 (bvadd o27 ((_ int2bv 32) 44))))
(assert (= o29 ((_ zero_extend 32) o28)))
(assert (and (= o30 (readmem32 o29 (let ((subject memory)) memory6))) (and (and (and (= (bvand o30 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o29)))) (= (bvand o30 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o30 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o30 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= (writereg32post (let ((subject rdi)) rdi4) o30) true))
(assert (and (= o31 (edi (let ((subject rdi)) rdi4))) (= o31 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (and (= o32 (edi (let ((subject rdi)) rdi4))) (= o32 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (= o33 (bvand o32 o31)))
(assert (= o34 (ite (= o33 ((_ int2bv 32) 0)) true false)))
(assert (= result32 (mk_bool__ref zeroflag)))
(assert (= zeroflag1 o34))
(assert (and (= o35 (edi (let ((subject rdi)) rdi4))) (= o35 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (and (= o36 (edi (let ((subject rdi)) rdi4))) (= o36 (readreg32 (let ((subject rdi)) rdi4)))))
(assert (= o37 (bvand o36 o35)))
(assert (= o38 (ite (bvugt o37 ((_ int2bv 32) 2147483647)) true false)))
(assert (= result33 (mk_bool__ref signflag)))
(assert (= signflag1 o38))
(assert (= result34 (mk_bool__ref carryflag)))
(assert (= carryflag1 (of_int 0)))
(assert (= result35 (mk_bool__ref overflowflag)))
(assert (= overflowflag1 (of_int 0)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___393 (let ((subject rbx)) rbx1))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___394 (let ((subject rsp)) rsp13))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___392 (let ((subject rsp)) rsp13))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___391 overflowflag1)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___390 signflag1)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___389 rax)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___387 carryflag1)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___388 xmm01)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___386 (let ((subject rbp)) rbp1))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___385 (let ((subject rdi)) rdi4))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___384 zeroflag1)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (let ((subject rsp)) rsp14) temp___394)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (not (= zeroflag2 true)) (= (= signflag2 true) (= overflowflag2 true)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o39 (readmem64 (let ((subject rbp)) rbp2) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o39 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (let ((subject rbp)) rbp2))))) (= (bvand o39 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o39 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o39 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o39 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o39 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o39 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o39 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result36 (mk_t__ref3 xmm02))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm03 o39)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (writereg32post (let ((subject rdi)) rdi5) ((_ int2bv 32) 4198699)) true)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (writereg32post rax1 ((_ int2bv 32) 1)) true)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o40 (ebx (let ((subject rbx)) rbx2))) (= o40 (readreg32 (let ((subject rbx)) rbx2))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o41 (bvadd o40 ((_ int2bv 32) 1)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (writereg32post (let ((subject rbx)) rbx3) o41) true)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result37 (let ((subject rbp)) (mk_t__ref3 rbp2)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (let ((subject rbp)) rbp3) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 8)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result38 (let ((subject rsp)) (mk_t__ref3 rsp14)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (let ((subject rsp)) rsp15) (bvsub (let ((subject rsp)) rsp14) ((_ int2bv 64) 8)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= (let ((subject rsp)) rsp16) (bvadd (let ((subject rsp)) rsp15) ((_ int2bv 64) 8)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o42 (ebx (let ((subject rbx)) rbx3))) (= o42 (readreg32 (let ((subject rbx)) rbx3))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o43 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o43 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o43 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o43 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o43 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o44 (bvsub o43 o42))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o45 (ite (= o44 ((_ int2bv 32) 0)) true false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result39 (mk_bool__ref zeroflag2))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag3 o45)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o46 (ebx (let ((subject rbx)) rbx3))) (= o46 (readreg32 (let ((subject rbx)) rbx3))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o47 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o47 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o47 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o47 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o47 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o48 (bvsub o47 o46))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o49 (ite (bvugt o48 ((_ int2bv 32) 2147483647)) true false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result40 (mk_bool__ref signflag2))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag3 o49)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o50 (ebx (let ((subject rbx)) rbx3))) (= o50 (readreg32 (let ((subject rbx)) rbx3))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (and (= o51 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o51 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o51 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o51 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o51 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o52 (ite (bvult o51 o50) true false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result41 (mk_bool__ref carryflag2))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag3 o52)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (not (= signflag3 true)) (and (= o56 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o56 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o56 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o56 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o56 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (not (= signflag3 true)) (= result42 (ite (bvugt o56 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (not (not (= signflag3 true))) (= result42 false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (= result42 true) (and (= o55 (ebx (let ((subject rbx)) rbx3))) (= o55 (readreg32 (let ((subject rbx)) rbx3)))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (= result42 true) (= o57 (ite (bvule o55 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (not (= result42 true)) (= o57 false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (= signflag3 true) (and (= o54 (ebx (let ((subject rbx)) rbx3))) (= o54 (readreg32 (let ((subject rbx)) rbx3)))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (= signflag3 true) (= result43 (ite (bvugt o54 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (not (= signflag3 true)) (= result43 false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (= result43 true) (and (= o53 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o53 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o53 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o53 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o53 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (= result43 true) (= o58 (ite (bvule o53 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (=> (not (= result43 true)) (= o58 false))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o59 (ite (= o58 false) o57 true))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= result44 (mk_bool__ref overflowflag2))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= overflowflag3 o59)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (not (and (not (= zeroflag3 true)) (= (to_int5 signflag3) (to_int5 overflowflag3))))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi6 (let ((subject rdi)) (mk_t__ref3 rdi5)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp4 (let ((subject rbp)) (mk_t__ref3 rbp3)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp17 (let ((subject rsp)) (mk_t__ref3 rsp16)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx4 (let ((subject rbx)) (mk_t__ref3 rbx3)))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax2 (mk_t__ref3 rax1))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm04 (mk_t__ref3 xmm03))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= overflowflag4 (mk_bool__ref overflowflag3))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag4 (mk_bool__ref signflag3))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag4 (mk_bool__ref carryflag3))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag4 (mk_bool__ref zeroflag3))))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi7 rdi5)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp5 rbp3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp18 rsp16)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx5 rbx3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax3 rax1)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm05 xmm03)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= overflowflag5 overflowflag3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag5 signflag3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag5 carryflag3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag5 zeroflag3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi8 rdi6)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp6 rbp4)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp19 rsp17)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx6 rbx4)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax4 rax2)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm06 xmm04)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= overflowflag6 overflowflag4)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag6 signflag4)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag6 carryflag4)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag6 zeroflag4)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi9 rdi7)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp7 rbp5)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp20 rsp18)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx7 rbx5)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax5 rax3)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm07 xmm05)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= overflowflag7 overflowflag5)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag7 signflag5)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag7 carryflag5)))
(assert (=> (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag7 zeroflag5)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rdi8 (let ((subject rdi)) (mk_t__ref3 rdi4)))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rbp6 (let ((subject rbp)) (mk_t__ref3 rbp1)))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rsp19 (let ((subject rsp)) (mk_t__ref3 rsp13)))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rbx6 (let ((subject rbx)) (mk_t__ref3 rbx1)))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rax4 (mk_t__ref3 rax))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= xmm06 (mk_t__ref3 xmm01))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= overflowflag6 (mk_bool__ref overflowflag1))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= signflag6 (mk_bool__ref signflag1))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= carryflag6 (mk_bool__ref carryflag1))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= zeroflag6 (mk_bool__ref zeroflag1))))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rdi9 rdi4)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rbp7 rbp1)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rsp20 rsp13)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rbx7 rbx1)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rax5 rax)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= xmm07 xmm01)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= overflowflag7 overflowflag1)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= signflag7 signflag1)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= carryflag7 carryflag1)))
(assert (=> (not (and (not (= zeroflag1 true)) (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= zeroflag7 zeroflag1)))
(assert (= (writereg32post (let ((subject rdi)) rdi10) ((_ int2bv 32) 10)) true))
(assert (= (writereg32post (let ((subject rbx)) rbx8) ((_ int2bv 32) 0)) true))
(assert (= result45 rbp6))
(assert (= (let ((subject rbp)) rbp8) (bvadd (t__content3 rsp19) ((_ int2bv 64) 64))))
(assert (= result46 rsp19))
(assert (= (let ((subject rsp)) rsp21) (bvsub (t__content3 rsp19) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp22) (bvadd (let ((subject rsp)) rsp21) ((_ int2bv 64) 8))))
(assert (= result47 (let ((subject rsi)) (mk_t__ref3 rsi1))))
(assert (= (let ((subject rsi)) rsi2) (bvadd (let ((subject rsp)) rsp22) ((_ int2bv 64) 64))))
(assert (= result48 (let ((subject rdi)) (mk_t__ref3 rdi10))))
(assert (= (let ((subject rdi)) rdi11) (bvadd (let ((subject rsp)) rsp22) ((_ int2bv 64) 44))))
(assert (and (= o60 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o60 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198776))))) (= (bvand o60 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o60 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o60 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o60 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o60 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o60 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o60 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result49 (mk_t__ref3 xmm31)))
(assert (= xmm32 o60))
(assert (and (= o61 (readmem64 ((_ int2bv 64) 4198800) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o61 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198800))))) (= (bvand o61 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o61 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o61 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o61 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o61 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o61 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o61 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result50 (mk_t__ref3 xmm21)))
(assert (= xmm22 o61))
(assert (and (= o62 (readmem64 ((_ int2bv 64) 4198808) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o62 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198808))))) (= (bvand o62 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o62 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o62 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o62 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o62 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o62 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o62 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result51 (mk_t__ref3 xmm11)))
(assert (= xmm12 o62))
(assert (and (= o63 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o63 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198768))))) (= (bvand o63 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o63 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o63 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o63 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o63 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o63 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o63 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result52 xmm06))
(assert (= xmm08 o63))
(assert (= result53 (let ((subject rsp)) (mk_t__ref3 rsp22))))
(assert (= (let ((subject rsp)) rsp23) (bvsub (let ((subject rsp)) rsp22) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp24) (bvadd (let ((subject rsp)) rsp23) ((_ int2bv 64) 8))))
(assert (= (writereg32post rax6 ((_ int2bv 32) 0)) true))
(assert (= (writereg32post (let ((subject rdi)) rdi12) ((_ int2bv 32) 4198688)) true))
(assert (= result54 (let ((subject rsp)) (mk_t__ref3 rsp24))))
(assert (= (let ((subject rsp)) rsp25) (bvsub (let ((subject rsp)) rsp24) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp26) (bvadd (let ((subject rsp)) rsp25) ((_ int2bv 64) 8))))
(assert (and (= o64 (esp (let ((subject rsp)) rsp26))) (= o64 (readreg32 (let ((subject rsp)) rsp26)))))
(assert (= o65 (bvadd o64 ((_ int2bv 32) 44))))
(assert (= o66 ((_ zero_extend 32) o65)))
(assert (and (= o67 (readmem32 o66 (let ((subject memory)) memory6))) (and (and (and (= (bvand o67 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o66)))) (= (bvand o67 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o66 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o67 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o66 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o67 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o66 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= (writereg32post (let ((subject rsi)) rsi3) o67) true))
(assert (and (= o68 (esi (let ((subject rsi)) rsi3))) (= o68 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (and (= o69 (esi (let ((subject rsi)) rsi3))) (= o69 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (= o70 (bvand o69 o68)))
(assert (= o71 (ite (= o70 ((_ int2bv 32) 0)) true false)))
(assert (= result55 zeroflag6))
(assert (= zeroflag8 o71))
(assert (and (= o72 (esi (let ((subject rsi)) rsi3))) (= o72 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (and (= o73 (esi (let ((subject rsi)) rsi3))) (= o73 (readreg32 (let ((subject rsi)) rsi3)))))
(assert (= o74 (bvand o73 o72)))
(assert (= o75 (ite (bvugt o74 ((_ int2bv 32) 2147483647)) true false)))
(assert (= result56 signflag6))
(assert (= signflag8 o75))
(assert (= result57 carryflag6))
(assert (= carryflag8 (of_int 0)))
(assert (= result58 overflowflag6))
(assert (= overflowflag8 (of_int 0)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___404 (let ((subject rbx)) rbx8))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___403 (let ((subject rsp)) rsp26))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___402 overflowflag8)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___401 signflag8)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___400 rax6)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___398 carryflag8)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___399 xmm08)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___397 (let ((subject rbp)) rbp8))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___396 (let ((subject rdi)) rdi12))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___395 zeroflag8)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___405 (let ((subject rsp)) rsp26))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (let ((subject rsp)) rsp27) temp___405)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (not (= zeroflag9 true)) (= (= signflag9 true) (= overflowflag9 true)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o76 (readmem64 (let ((subject rbp)) rbp9) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o76 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (let ((subject rbp)) rbp9))))) (= (bvand o76 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o76 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o76 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o76 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o76 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o76 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o76 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result59 (mk_t__ref3 xmm09))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm010 o76)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (writereg32post (let ((subject rdi)) rdi13) ((_ int2bv 32) 4198699)) true)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (writereg32post rax7 ((_ int2bv 32) 1)) true)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o77 (ebx (let ((subject rbx)) rbx9))) (= o77 (readreg32 (let ((subject rbx)) rbx9))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o78 (bvadd o77 ((_ int2bv 32) 1)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (writereg32post (let ((subject rbx)) rbx10) o78) true)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result60 (let ((subject rbp)) (mk_t__ref3 rbp9)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (let ((subject rbp)) rbp10) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 8)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result61 (let ((subject rsp)) (mk_t__ref3 rsp27)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (let ((subject rsp)) rsp28) (bvsub (let ((subject rsp)) rsp27) ((_ int2bv 64) 8)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= (let ((subject rsp)) rsp29) (bvadd (let ((subject rsp)) rsp28) ((_ int2bv 64) 8)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o79 (ebx (let ((subject rbx)) rbx10))) (= o79 (readreg32 (let ((subject rbx)) rbx10))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o80 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o80 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o80 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o80 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o80 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o81 (bvsub o80 o79))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o82 (ite (= o81 ((_ int2bv 32) 0)) true false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result62 (mk_bool__ref zeroflag9))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag10 o82)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o83 (ebx (let ((subject rbx)) rbx10))) (= o83 (readreg32 (let ((subject rbx)) rbx10))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o84 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o84 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o84 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o84 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o84 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o85 (bvsub o84 o83))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o86 (ite (bvugt o85 ((_ int2bv 32) 2147483647)) true false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result63 (mk_bool__ref signflag9))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag10 o86)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o87 (ebx (let ((subject rbx)) rbx10))) (= o87 (readreg32 (let ((subject rbx)) rbx10))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (and (= o88 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o88 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o88 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o88 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o88 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o89 (ite (bvult o88 o87) true false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result64 (mk_bool__ref carryflag9))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= carryflag10 o89)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (not (= signflag10 true)) (and (= o93 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o93 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o93 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o93 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o93 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (not (= signflag10 true)) (= result65 (ite (bvugt o93 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (not (not (= signflag10 true))) (= result65 false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (= result65 true) (and (= o92 (ebx (let ((subject rbx)) rbx10))) (= o92 (readreg32 (let ((subject rbx)) rbx10)))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (= result65 true) (= o94 (ite (bvule o92 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (not (= result65 true)) (= o94 false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (= signflag10 true) (and (= o91 (ebx (let ((subject rbx)) rbx10))) (= o91 (readreg32 (let ((subject rbx)) rbx10)))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (= signflag10 true) (= result66 (ite (bvugt o91 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (not (= signflag10 true)) (= result66 false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (= result66 true) (and (= o90 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o90 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o90 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o90 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o90 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (= result66 true) (= o95 (ite (bvule o90 ((_ int2bv 32) 2147483647)) true false)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (=> (not (= result66 true)) (= o95 false))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o96 (ite (= o95 false) o94 true))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= result67 (mk_bool__ref overflowflag9))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= overflowflag10 o96)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (not (and (not (= zeroflag10 true)) (= (to_int5 signflag10) (to_int5 overflowflag10))))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi14 (let ((subject rdi)) (mk_t__ref3 rdi13)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp11 (let ((subject rbp)) (mk_t__ref3 rbp10)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp30 (let ((subject rsp)) (mk_t__ref3 rsp29)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx11 (let ((subject rbx)) (mk_t__ref3 rbx10)))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax8 (mk_t__ref3 rax7))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm011 (mk_t__ref3 xmm010))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= overflowflag11 (mk_bool__ref overflowflag10))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag11 (mk_bool__ref signflag10))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= carryflag11 (mk_bool__ref carryflag10))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag11 (mk_bool__ref zeroflag10))))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi15 rdi13)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp12 rbp10)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp31 rsp29)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx12 rbx10)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax9 rax7)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm012 xmm010)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= overflowflag12 overflowflag10)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag12 signflag10)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= carryflag12 carryflag10)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag12 zeroflag10)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi16 rdi14)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp13 rbp11)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp32 rsp30)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx13 rbx11)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax10 rax8)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm013 xmm011)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= overflowflag13 overflowflag11)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag13 signflag11)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= carryflag13 carryflag11)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag13 zeroflag11)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi17 rdi15)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp14 rbp12)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp33 rsp31)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx14 rbx12)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax11 rax9)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm014 xmm012)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= overflowflag14 overflowflag12)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag14 signflag12)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= carryflag14 carryflag12)))
(assert (=> (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag14 zeroflag12)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rdi16 (let ((subject rdi)) (mk_t__ref3 rdi12)))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rbp13 (let ((subject rbp)) (mk_t__ref3 rbp8)))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rsp32 (let ((subject rsp)) (mk_t__ref3 rsp26)))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rbx13 (let ((subject rbx)) (mk_t__ref3 rbx8)))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rax10 (mk_t__ref3 rax6))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= xmm013 (mk_t__ref3 xmm08))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= overflowflag13 (mk_bool__ref overflowflag8))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= signflag13 (mk_bool__ref signflag8))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= carryflag13 (mk_bool__ref carryflag8))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= zeroflag13 (mk_bool__ref zeroflag8))))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rdi17 rdi12)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rbp14 rbp8)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rsp33 rsp26)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rbx14 rbx8)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rax11 rax6)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= xmm014 xmm08)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= overflowflag14 overflowflag8)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= signflag14 signflag8)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= carryflag14 carryflag8)))
(assert (=> (not (and (not (= zeroflag8 true)) (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= zeroflag14 zeroflag8)))
(assert (= (writereg32post (let ((subject rdi)) rdi18) ((_ int2bv 32) 10)) true))
(assert (= (writereg32post (let ((subject rbx)) rbx15) ((_ int2bv 32) 0)) true))
(assert (= result68 rbp13))
(assert (= (let ((subject rbp)) rbp15) (bvadd (t__content3 rsp32) ((_ int2bv 64) 64))))
(assert (= result69 rsp32))
(assert (= (let ((subject rsp)) rsp34) (bvsub (t__content3 rsp32) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp35) (bvadd (let ((subject rsp)) rsp34) ((_ int2bv 64) 8))))
(assert (= result70 (let ((subject rsi)) (mk_t__ref3 rsi3))))
(assert (= (let ((subject rsi)) rsi4) (bvadd (let ((subject rsp)) rsp35) ((_ int2bv 64) 64))))
(assert (= result71 (let ((subject rdi)) (mk_t__ref3 rdi18))))
(assert (= (let ((subject rdi)) rdi19) (bvadd (let ((subject rsp)) rsp35) ((_ int2bv 64) 44))))
(assert (and (= o97 (readmem64 ((_ int2bv 64) 4198816) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o97 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198816))))) (= (bvand o97 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o97 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o97 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o97 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o97 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o97 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o97 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result72 (mk_t__ref3 xmm32)))
(assert (= xmm33 o97))
(assert (and (= o98 (readmem64 ((_ int2bv 64) 4198824) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o98 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198824))))) (= (bvand o98 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o98 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o98 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o98 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o98 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o98 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o98 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result73 (mk_t__ref3 xmm22)))
(assert (= xmm23 o98))
(assert (and (= o99 (readmem64 ((_ int2bv 64) 4198832) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o99 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198832))))) (= (bvand o99 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o99 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o99 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o99 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o99 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o99 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o99 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result74 (mk_t__ref3 xmm12)))
(assert (= xmm13 o99))
(assert (and (= o100 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o100 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) ((_ int2bv 64) 4198768))))) (= (bvand o100 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o100 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o100 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o100 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o100 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o100 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o100 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result75 xmm013))
(assert (= xmm015 o100))
(assert (= result76 (let ((subject rsp)) (mk_t__ref3 rsp35))))
(assert (= (let ((subject rsp)) rsp36) (bvsub (let ((subject rsp)) rsp35) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp37) (bvadd (let ((subject rsp)) rsp36) ((_ int2bv 64) 8))))
(assert (= (writereg32post rax12 ((_ int2bv 32) 0)) true))
(assert (= (writereg32post (let ((subject rdi)) rdi20) ((_ int2bv 32) 4198688)) true))
(assert (= result77 (let ((subject rsp)) (mk_t__ref3 rsp37))))
(assert (= (let ((subject rsp)) rsp38) (bvsub (let ((subject rsp)) rsp37) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp39) (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 8))))
(assert (and (= o101 (esp (let ((subject rsp)) rsp39))) (= o101 (readreg32 (let ((subject rsp)) rsp39)))))
(assert (= o102 (bvadd o101 ((_ int2bv 32) 44))))
(assert (= o103 ((_ zero_extend 32) o102)))
(assert (and (= o104 (readmem32 o103 (let ((subject memory)) memory6))) (and (and (and (= (bvand o104 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) o103)))) (= (bvand o104 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o103 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o104 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o103 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o104 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd o103 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= (writereg32post rcx o104) true))
(assert (and (= o105 (ecx rcx)) (= o105 (readreg32 rcx))))
(assert (and (= o106 (ecx rcx)) (= o106 (readreg32 rcx))))
(assert (= o107 (bvand o106 o105)))
(assert (= o108 (ite (= o107 ((_ int2bv 32) 0)) true false)))
(assert (= result78 zeroflag13))
(assert (= zeroflag15 o108))
(assert (and (= o109 (ecx rcx)) (= o109 (readreg32 rcx))))
(assert (and (= o110 (ecx rcx)) (= o110 (readreg32 rcx))))
(assert (= o111 (bvand o110 o109)))
(assert (= o112 (ite (bvugt o111 ((_ int2bv 32) 2147483647)) true false)))
(assert (= result79 signflag13))
(assert (= signflag15 o112))
(assert (= result80 carryflag13))
(assert (= carryflag15 (of_int 0)))
(assert (= result81 overflowflag13))
(assert (= overflowflag15 (of_int 0)))
(assert (not (= zeroflag15 true)))
(assert (= (to_int5 signflag15) (to_int5 overflowflag15)))
(assert (= (let ((subject rsp)) rsp40) (let ((subject rsp)) rsp39)))
(assert (and (not (= zeroflag16 true)) (= (= signflag16 true) (= overflowflag16 true))))
(assert (and (= o113 (readmem64 (let ((subject rbp)) rbp16) (let ((subject memory)) memory6))) (and (and (and (and (and (and (and (= (bvand o113 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (let ((subject rbp)) rbp16))))) (= (bvand o113 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256)))) (= (bvand o113 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536)))) (= (bvand o113 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216)))) (= (bvand o113 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296)))) (= (bvand o113 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776)))) (= (bvand o113 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656)))) (= (bvand o113 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) (to_rep (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))
(assert (= result82 (mk_t__ref3 xmm016)))
(assert (= xmm017 o113))
(assert (= (writereg32post (let ((subject rdi)) rdi21) ((_ int2bv 32) 4198699)) true))
(assert (= (writereg32post rax13 ((_ int2bv 32) 1)) true))
(assert (and (= o114 (ebx (let ((subject rbx)) rbx16))) (= o114 (readreg32 (let ((subject rbx)) rbx16)))))
(assert (= o115 (bvadd o114 ((_ int2bv 32) 1))))
(assert (= (writereg32post (let ((subject rbx)) rbx17) o115) true))
(assert (= result83 (let ((subject rbp)) (mk_t__ref3 rbp16))))
(assert (= (let ((subject rbp)) rbp17) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 8))))
(assert (= result84 (let ((subject rsp)) (mk_t__ref3 rsp40))))
(assert (= (let ((subject rsp)) rsp41) (bvsub (let ((subject rsp)) rsp40) ((_ int2bv 64) 8))))
(assert (= (let ((subject rsp)) rsp42) (bvadd (let ((subject rsp)) rsp41) ((_ int2bv 64) 8))))
(assert (and (= o116 (ebx (let ((subject rbx)) rbx17))) (= o116 (readreg32 (let ((subject rbx)) rbx17)))))
(assert (and (= o117 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o117 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o117 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o117 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o117 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= o118 (bvsub o117 o116)))
(assert (= o119 (ite (= o118 ((_ int2bv 32) 0)) true false)))
(assert (= result85 (mk_bool__ref zeroflag16)))
(assert (= zeroflag17 o119))
(assert (and (= o120 (ebx (let ((subject rbx)) rbx17))) (= o120 (readreg32 (let ((subject rbx)) rbx17)))))
(assert (and (= o121 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o121 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o121 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o121 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o121 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= o122 (bvsub o121 o120)))
(assert (= o123 (ite (bvugt o122 ((_ int2bv 32) 2147483647)) true false)))
(assert (= result86 (mk_bool__ref signflag16)))
(assert (= signflag17 o123))
(assert (and (= o124 (ebx (let ((subject rbx)) rbx17))) (= o124 (readreg32 (let ((subject rbx)) rbx17)))))
(assert (and (= o125 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o125 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o125 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o125 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o125 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= o126 (ite (bvult o125 o124) true false)))
(assert (= result87 (mk_bool__ref carryflag16)))
(assert (= carryflag17 o126))
(assert (=> (not (= signflag17 true)) (and (= o130 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o130 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o130 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o130 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o130 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (not (= signflag17 true)) (= result88 (ite (bvugt o130 ((_ int2bv 32) 2147483647)) true false))))
(assert (=> (not (not (= signflag17 true))) (= result88 false)))
(assert (=> (= result88 true) (and (= o129 (ebx (let ((subject rbx)) rbx17))) (= o129 (readreg32 (let ((subject rbx)) rbx17))))))
(assert (=> (= result88 true) (= o131 (ite (bvule o129 ((_ int2bv 32) 2147483647)) true false))))
(assert (=> (not (= result88 true)) (= o131 false)))
(assert (=> (= signflag17 true) (and (= o128 (ebx (let ((subject rbx)) rbx17))) (= o128 (readreg32 (let ((subject rbx)) rbx17))))))
(assert (=> (= signflag17 true) (= result89 (ite (bvugt o128 ((_ int2bv 32) 2147483647)) true false))))
(assert (=> (not (= signflag17 true)) (= result89 false)))
(assert (=> (= result89 true) (and (= o127 (readmem32 (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) (let ((subject memory)) memory6))) (and (and (and (= (bvand o127 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)))))) (= (bvand o127 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o127 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o127 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))
(assert (=> (= result89 true) (= o132 (ite (bvule o127 ((_ int2bv 32) 2147483647)) true false))))
(assert (=> (not (= result89 true)) (= o132 false)))
(assert (= o133 (ite (= o132 false) o131 true)))
(assert (= result90 (mk_bool__ref overflowflag16)))
(assert (= overflowflag17 o133))
(assert (not (= zeroflag17 true)))
(assert (= (to_int5 signflag17) (to_int5 overflowflag17)))
(assert (= rdi22 (let ((subject rdi)) (mk_t__ref3 rdi21))))
(assert (= rbp18 (let ((subject rbp)) (mk_t__ref3 rbp17))))
(assert (= rsp43 (let ((subject rsp)) (mk_t__ref3 rsp42))))
(assert (= rbx18 (let ((subject rbx)) (mk_t__ref3 rbx17))))
(assert (= rax14 (mk_t__ref3 rax13)))
(assert (= xmm018 (mk_t__ref3 xmm017)))
(assert (= overflowflag18 (mk_bool__ref overflowflag17)))
(assert (= signflag18 (mk_bool__ref signflag17)))
(assert (= carryflag18 (mk_bool__ref carryflag17)))
(assert (= zeroflag18 (mk_bool__ref zeroflag17)))
(assert (= rdi23 rdi21))
(assert (= rbp19 rbp17))
(assert (= rsp44 rsp42))
(assert (= rbx19 rbx17))
(assert (= rax15 rax13))
(assert (= xmm019 xmm017))
(assert (= overflowflag19 overflowflag17))
(assert (= signflag19 signflag17))
(assert (= carryflag19 carryflag17))
(assert (= zeroflag19 zeroflag17))
(assert (not (= (t__content3 rsp43) (let ((subject rsp)) rsp39))))
(check-sat)
(exit)
