(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort character 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (character character) Bool)
(declare-const dummy character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-sort qname_ptr_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 16383)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (qname_ptr_range qname_ptr_range) Bool)
(declare-const dummy1 qname_ptr_range)
(declare-datatypes () ((qname_ptr_range__ref (mk_qname_ptr_range__ref (qname_ptr_range__content qname_ptr_range)))))
(define-fun qname_ptr_range__ref___projection ((a qname_ptr_range__ref)) qname_ptr_range (qname_ptr_range__content a))
(define-fun dynamic_invariant ((temp___expr_782 Int) (temp___is_init_778 Bool) (temp___skip_constant_779 Bool) (temp___do_toplevel_780 Bool) (temp___do_typ_inv_781 Bool)) Bool (=> (or (= temp___is_init_778 true) (<= 0 16383)) (in_range2 temp___expr_782)))
(declare-sort packet_length_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 8192)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (packet_length_range packet_length_range) Bool)
(declare-const dummy2 packet_length_range)
(declare-datatypes () ((packet_length_range__ref (mk_packet_length_range__ref (packet_length_range__content packet_length_range)))))
(define-fun packet_length_range__ref___projection ((a packet_length_range__ref)) packet_length_range (packet_length_range__content a))
(define-fun dynamic_invariant1 ((temp___expr_789 Int) (temp___is_init_785 Bool) (temp___skip_constant_786 Bool) (temp___do_toplevel_787 Bool) (temp___do_typ_inv_788 Bool)) Bool (=> (or (= temp___is_init_785 true) (<= 0 8192)) (in_range3 temp___expr_789)))
(declare-sort packet_bytes_range 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 8180)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (packet_bytes_range packet_bytes_range) Bool)
(declare-const dummy3 packet_bytes_range)
(declare-datatypes () ((packet_bytes_range__ref (mk_packet_bytes_range__ref (packet_bytes_range__content packet_bytes_range)))))
(define-fun packet_bytes_range__ref___projection ((a packet_bytes_range__ref)) packet_bytes_range (packet_bytes_range__content a))
(define-fun dynamic_invariant2 ((temp___expr_796 Int) (temp___is_init_792 Bool) (temp___skip_constant_793 Bool) (temp___do_toplevel_794 Bool) (temp___do_typ_inv_795 Bool)) Bool (=> (or (= temp___is_init_792 true) (<= 1 8180)) (in_range4 temp___expr_796)))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (byte byte) Bool)
(declare-const dummy4 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep1 (byte) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x byte)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort unsigned_short 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (unsigned_short unsigned_short) Bool)
(declare-const dummy5 unsigned_short)
(declare-datatypes () ((unsigned_short__ref (mk_unsigned_short__ref (unsigned_short__content unsigned_short)))))
(define-fun unsigned_short__ref___projection ((a unsigned_short__ref)) unsigned_short (unsigned_short__content a))
(declare-fun to_rep2 (unsigned_short) Int)
(declare-fun of_rep2 (Int) unsigned_short)
(assert (forall ((x unsigned_short)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x unsigned_short)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort opcode_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (opcode_type opcode_type) Bool)
(declare-const dummy6 opcode_type)
(declare-datatypes () ((opcode_type__ref (mk_opcode_type__ref (opcode_type__content opcode_type)))))
(define-fun opcode_type__ref___projection ((a opcode_type__ref)) opcode_type (opcode_type__content a))
(declare-fun to_rep3 (opcode_type) Int)
(declare-fun of_rep3 (Int) opcode_type)
(assert (forall ((x opcode_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x opcode_type)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort response_code 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq7 (response_code response_code) Bool)
(declare-const dummy7 response_code)
(declare-datatypes () ((response_code__ref (mk_response_code__ref (response_code__content response_code)))))
(define-fun response_code__ref___projection ((a response_code__ref)) response_code (response_code__content a))
(declare-fun to_rep4 (response_code) Int)
(declare-fun of_rep4 (Int) response_code)
(assert (forall ((x response_code)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x response_code)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dns_types__header_type__messageid unsigned_short) (rec__dns_types__header_type__qr Bool) (rec__dns_types__header_type__opcode opcode_type) (rec__dns_types__header_type__aa Bool) (rec__dns_types__header_type__tc Bool) (rec__dns_types__header_type__rd Bool) (rec__dns_types__header_type__ra Bool) (rec__dns_types__header_type__res1 Bool) (rec__dns_types__header_type__res2 Bool) (rec__dns_types__header_type__res3 Bool) (rec__dns_types__header_type__rcode response_code) (rec__dns_types__header_type__qdcount unsigned_short) (rec__dns_types__header_type__ancount unsigned_short) (rec__dns_types__header_type__nscount unsigned_short) (rec__dns_types__header_type__arcount unsigned_short)))))
(define-fun us_split_fields_MessageID__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__messageid a))
(define-fun us_split_fields_QR__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__qr a))
(define-fun us_split_fields_Opcode__projection ((a us_split_fields)) opcode_type (rec__dns_types__header_type__opcode a))
(define-fun us_split_fields_AA__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__aa a))
(define-fun us_split_fields_TC__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__tc a))
(define-fun us_split_fields_RD__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__rd a))
(define-fun us_split_fields_RA__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__ra a))
(define-fun us_split_fields_Res1__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__res1 a))
(define-fun us_split_fields_Res2__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__res2 a))
(define-fun us_split_fields_Res3__projection ((a us_split_fields)) Bool (rec__dns_types__header_type__res3 a))
(define-fun us_split_fields_RCode__projection ((a us_split_fields)) response_code (rec__dns_types__header_type__rcode a))
(define-fun us_split_fields_QDCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__qdcount a))
(define-fun us_split_fields_ANCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__ancount a))
(define-fun us_split_fields_NSCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__nscount a))
(define-fun us_split_fields_ARCount__projection ((a us_split_fields)) unsigned_short (rec__dns_types__header_type__arcount a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (rec__dns_types__header_type__messageid (us_split_fields1 a))) (to_rep2 (rec__dns_types__header_type__messageid (us_split_fields1 b)))) (= (rec__dns_types__header_type__qr (us_split_fields1 a)) (rec__dns_types__header_type__qr (us_split_fields1 b)))) (= (to_rep3 (rec__dns_types__header_type__opcode (us_split_fields1 a))) (to_rep3 (rec__dns_types__header_type__opcode (us_split_fields1 b))))) (= (rec__dns_types__header_type__aa (us_split_fields1 a)) (rec__dns_types__header_type__aa (us_split_fields1 b)))) (= (rec__dns_types__header_type__tc (us_split_fields1 a)) (rec__dns_types__header_type__tc (us_split_fields1 b)))) (= (rec__dns_types__header_type__rd (us_split_fields1 a)) (rec__dns_types__header_type__rd (us_split_fields1 b)))) (= (rec__dns_types__header_type__ra (us_split_fields1 a)) (rec__dns_types__header_type__ra (us_split_fields1 b)))) (= (rec__dns_types__header_type__res1 (us_split_fields1 a)) (rec__dns_types__header_type__res1 (us_split_fields1 b)))) (= (rec__dns_types__header_type__res2 (us_split_fields1 a)) (rec__dns_types__header_type__res2 (us_split_fields1 b)))) (= (rec__dns_types__header_type__res3 (us_split_fields1 a)) (rec__dns_types__header_type__res3 (us_split_fields1 b)))) (= (to_rep4 (rec__dns_types__header_type__rcode (us_split_fields1 a))) (to_rep4 (rec__dns_types__header_type__rcode (us_split_fields1 b))))) (= (to_rep2 (rec__dns_types__header_type__qdcount (us_split_fields1 a))) (to_rep2 (rec__dns_types__header_type__qdcount (us_split_fields1 b))))) (= (to_rep2 (rec__dns_types__header_type__ancount (us_split_fields1 a))) (to_rep2 (rec__dns_types__header_type__ancount (us_split_fields1 b))))) (= (to_rep2 (rec__dns_types__header_type__nscount (us_split_fields1 a))) (to_rep2 (rec__dns_types__header_type__nscount (us_split_fields1 b))))) (= (to_rep2 (rec__dns_types__header_type__arcount (us_split_fields1 a))) (to_rep2 (rec__dns_types__header_type__arcount (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dns_types__header_type__messageid__first__bit Int)
(declare-const dns_types__header_type__messageid__last__bit Int)
(declare-const dns_types__header_type__messageid__position Int)
(assert (<= 0 dns_types__header_type__messageid__first__bit))
(assert (< dns_types__header_type__messageid__first__bit dns_types__header_type__messageid__last__bit))
(assert (<= 0 dns_types__header_type__messageid__position))
(declare-const dns_types__header_type__qr__first__bit Int)
(declare-const dns_types__header_type__qr__last__bit Int)
(declare-const dns_types__header_type__qr__position Int)
(assert (<= 0 dns_types__header_type__qr__first__bit))
(assert (< dns_types__header_type__qr__first__bit dns_types__header_type__qr__last__bit))
(assert (<= 0 dns_types__header_type__qr__position))
(declare-const dns_types__header_type__opcode__first__bit Int)
(declare-const dns_types__header_type__opcode__last__bit Int)
(declare-const dns_types__header_type__opcode__position Int)
(assert (<= 0 dns_types__header_type__opcode__first__bit))
(assert (< dns_types__header_type__opcode__first__bit dns_types__header_type__opcode__last__bit))
(assert (<= 0 dns_types__header_type__opcode__position))
(declare-const dns_types__header_type__aa__first__bit Int)
(declare-const dns_types__header_type__aa__last__bit Int)
(declare-const dns_types__header_type__aa__position Int)
(assert (<= 0 dns_types__header_type__aa__first__bit))
(assert (< dns_types__header_type__aa__first__bit dns_types__header_type__aa__last__bit))
(assert (<= 0 dns_types__header_type__aa__position))
(declare-const dns_types__header_type__tc__first__bit Int)
(declare-const dns_types__header_type__tc__last__bit Int)
(declare-const dns_types__header_type__tc__position Int)
(assert (<= 0 dns_types__header_type__tc__first__bit))
(assert (< dns_types__header_type__tc__first__bit dns_types__header_type__tc__last__bit))
(assert (<= 0 dns_types__header_type__tc__position))
(declare-const dns_types__header_type__rd__first__bit Int)
(declare-const dns_types__header_type__rd__last__bit Int)
(declare-const dns_types__header_type__rd__position Int)
(assert (<= 0 dns_types__header_type__rd__first__bit))
(assert (< dns_types__header_type__rd__first__bit dns_types__header_type__rd__last__bit))
(assert (<= 0 dns_types__header_type__rd__position))
(declare-const dns_types__header_type__ra__first__bit Int)
(declare-const dns_types__header_type__ra__last__bit Int)
(declare-const dns_types__header_type__ra__position Int)
(assert (<= 0 dns_types__header_type__ra__first__bit))
(assert (< dns_types__header_type__ra__first__bit dns_types__header_type__ra__last__bit))
(assert (<= 0 dns_types__header_type__ra__position))
(declare-const dns_types__header_type__res1__first__bit Int)
(declare-const dns_types__header_type__res1__last__bit Int)
(declare-const dns_types__header_type__res1__position Int)
(assert (<= 0 dns_types__header_type__res1__first__bit))
(assert (< dns_types__header_type__res1__first__bit dns_types__header_type__res1__last__bit))
(assert (<= 0 dns_types__header_type__res1__position))
(declare-const dns_types__header_type__res2__first__bit Int)
(declare-const dns_types__header_type__res2__last__bit Int)
(declare-const dns_types__header_type__res2__position Int)
(assert (<= 0 dns_types__header_type__res2__first__bit))
(assert (< dns_types__header_type__res2__first__bit dns_types__header_type__res2__last__bit))
(assert (<= 0 dns_types__header_type__res2__position))
(declare-const dns_types__header_type__res3__first__bit Int)
(declare-const dns_types__header_type__res3__last__bit Int)
(declare-const dns_types__header_type__res3__position Int)
(assert (<= 0 dns_types__header_type__res3__first__bit))
(assert (< dns_types__header_type__res3__first__bit dns_types__header_type__res3__last__bit))
(assert (<= 0 dns_types__header_type__res3__position))
(declare-const dns_types__header_type__rcode__first__bit Int)
(declare-const dns_types__header_type__rcode__last__bit Int)
(declare-const dns_types__header_type__rcode__position Int)
(assert (<= 0 dns_types__header_type__rcode__first__bit))
(assert (< dns_types__header_type__rcode__first__bit dns_types__header_type__rcode__last__bit))
(assert (<= 0 dns_types__header_type__rcode__position))
(declare-const dns_types__header_type__qdcount__first__bit Int)
(declare-const dns_types__header_type__qdcount__last__bit Int)
(declare-const dns_types__header_type__qdcount__position Int)
(assert (<= 0 dns_types__header_type__qdcount__first__bit))
(assert (< dns_types__header_type__qdcount__first__bit dns_types__header_type__qdcount__last__bit))
(assert (<= 0 dns_types__header_type__qdcount__position))
(declare-const dns_types__header_type__ancount__first__bit Int)
(declare-const dns_types__header_type__ancount__last__bit Int)
(declare-const dns_types__header_type__ancount__position Int)
(assert (<= 0 dns_types__header_type__ancount__first__bit))
(assert (< dns_types__header_type__ancount__first__bit dns_types__header_type__ancount__last__bit))
(assert (<= 0 dns_types__header_type__ancount__position))
(declare-const dns_types__header_type__nscount__first__bit Int)
(declare-const dns_types__header_type__nscount__last__bit Int)
(declare-const dns_types__header_type__nscount__position Int)
(assert (<= 0 dns_types__header_type__nscount__first__bit))
(assert (< dns_types__header_type__nscount__first__bit dns_types__header_type__nscount__last__bit))
(assert (<= 0 dns_types__header_type__nscount__position))
(declare-const dns_types__header_type__arcount__first__bit Int)
(declare-const dns_types__header_type__arcount__last__bit Int)
(declare-const dns_types__header_type__arcount__position Int)
(assert (<= 0 dns_types__header_type__arcount__first__bit))
(assert (< dns_types__header_type__arcount__first__bit dns_types__header_type__arcount__last__bit))
(assert (<= 0 dns_types__header_type__arcount__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((header_type__ref (mk_header_type__ref (header_type__content us_rep)))))
(define-fun header_type__ref___projection ((a header_type__ref)) us_rep (header_type__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int byte))))))
(declare-fun slide1 ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-const dummy9 (Array Int byte))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int byte)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq9 ((Array Int byte) (Array Int byte)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dns_types__dns_packet__header us_rep) (rec__dns_types__dns_packet__bytes (Array Int byte))))))
(define-fun us_split_fields_Header__projection ((a us_split_fields2)) us_rep (rec__dns_types__dns_packet__header a))
(define-fun us_split_fields_Bytes__projection ((a us_split_fields2)) (Array Int byte) (rec__dns_types__dns_packet__bytes a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq1 (rec__dns_types__dns_packet__header (us_split_fields3 a)) (rec__dns_types__dns_packet__header (us_split_fields3 b))) true) (= (bool_eq2 (rec__dns_types__dns_packet__bytes (us_split_fields3 a)) 1 8180 (rec__dns_types__dns_packet__bytes (us_split_fields3 b)) 1 8180) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const dns_types__dns_packet__header__first__bit Int)
(declare-const dns_types__dns_packet__header__last__bit Int)
(declare-const dns_types__dns_packet__header__position Int)
(assert (<= 0 dns_types__dns_packet__header__first__bit))
(assert (< dns_types__dns_packet__header__first__bit dns_types__dns_packet__header__last__bit))
(assert (<= 0 dns_types__dns_packet__header__position))
(declare-const dns_types__dns_packet__bytes__first__bit Int)
(declare-const dns_types__dns_packet__bytes__last__bit Int)
(declare-const dns_types__dns_packet__bytes__position Int)
(assert (<= 0 dns_types__dns_packet__bytes__first__bit))
(assert (< dns_types__dns_packet__bytes__first__bit dns_types__dns_packet__bytes__last__bit))
(assert (<= 0 dns_types__dns_packet__bytes__position))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((dns_packet__ref (mk_dns_packet__ref (dns_packet__content us_rep1)))))
(define-fun dns_packet__ref___projection ((a dns_packet__ref)) us_rep1 (dns_packet__content a))
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 32))
(declare-fun user_eq11 (unsigned32 unsigned32) Bool)
(declare-const dummy11 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(declare-fun to_rep5 (unsigned32) (_ BitVec 32))
(declare-fun of_rep5 ((_ BitVec 32)) unsigned32)
(assert (forall ((x unsigned32)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))))))
(define-fun to_int5 ((x unsigned32)) Int (bv2nat (to_rep5 x)))
(assert (forall ((x unsigned32)) (! (uint_in_range2 (to_int5 x)) :pattern ((to_int5 x)))))
(declare-sort wirestringtypeindex 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 129)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq12 (wirestringtypeindex wirestringtypeindex) Bool)
(declare-const dummy12 wirestringtypeindex)
(declare-datatypes () ((wirestringtypeindex__ref (mk_wirestringtypeindex__ref (wirestringtypeindex__content wirestringtypeindex)))))
(define-fun wirestringtypeindex__ref___projection ((a wirestringtypeindex__ref)) wirestringtypeindex (wirestringtypeindex__content a))
(define-fun dynamic_invariant3 ((temp___expr_1018 Int) (temp___is_init_1014 Bool) (temp___skip_constant_1015 Bool) (temp___do_toplevel_1016 Bool) (temp___do_typ_inv_1017 Bool)) Bool (=> (or (= temp___is_init_1014 true) (<= 1 129)) (in_range8 temp___expr_1018)))
(declare-fun wirenamelength ((Array Int character)) Int)
(declare-fun wirenamelength__function_guard (Int (Array Int character)) Bool)
(declare-sort classtype 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq13 (classtype classtype) Bool)
(declare-const dummy13 classtype)
(declare-datatypes () ((classtype__ref (mk_classtype__ref (classtype__content classtype)))))
(define-fun classtype__ref___projection ((a classtype__ref)) classtype (classtype__content a))
(declare-fun to_rep6 (classtype) Int)
(declare-fun of_rep6 (Int) classtype)
(assert (forall ((x classtype)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x classtype)) (! (in_range9 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-const dummy14 (Array Int character))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int character)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq14 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__rr_type__resourcerecordtype__ttlinseconds unsigned32) (rec__rr_type__resourcerecordtype__class classtype) (rec__ext__ us_private)))))
(define-fun us_split_fields_TTLInSeconds__projection ((a us_split_fields4)) unsigned32 (rec__rr_type__resourcerecordtype__ttlinseconds a))
(define-fun us_split_fields_Class__projection ((a us_split_fields4)) classtype (rec__rr_type__resourcerecordtype__class a))
(define-fun us_split_fields___2__projection ((a us_split_fields4)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4) (attr__tag Int)))))
(define-fun us_rep___7__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___8__projection ((a us_rep2)) Int (attr__tag a))
(define-fun bool_eq4 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep5 (rec__rr_type__resourcerecordtype__ttlinseconds (us_split_fields5 a))) (to_rep5 (rec__rr_type__resourcerecordtype__ttlinseconds (us_split_fields5 b)))) (= (to_rep6 (rec__rr_type__resourcerecordtype__class (us_split_fields5 a))) (to_rep6 (rec__rr_type__resourcerecordtype__class (us_split_fields5 b))))) true false))
(declare-fun us_dispatch_eq (us_rep2 us_rep2) Bool)
(declare-const us_tag Int)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const rr_type__resourcerecordtype__ttlinseconds__first__bit Int)
(declare-const rr_type__resourcerecordtype__ttlinseconds__last__bit Int)
(declare-const rr_type__resourcerecordtype__ttlinseconds__position Int)
(assert (<= 0 rr_type__resourcerecordtype__ttlinseconds__first__bit))
(assert (< rr_type__resourcerecordtype__ttlinseconds__first__bit rr_type__resourcerecordtype__ttlinseconds__last__bit))
(assert (<= 0 rr_type__resourcerecordtype__ttlinseconds__position))
(declare-const rr_type__resourcerecordtype__class__first__bit Int)
(declare-const rr_type__resourcerecordtype__class__last__bit Int)
(declare-const rr_type__resourcerecordtype__class__position Int)
(assert (<= 0 rr_type__resourcerecordtype__class__first__bit))
(assert (< rr_type__resourcerecordtype__class__first__bit rr_type__resourcerecordtype__class__last__bit))
(assert (<= 0 rr_type__resourcerecordtype__class__position))
(declare-fun user_eq15 (us_rep2 us_rep2) Bool)
(declare-const dummy15 us_rep2)
(declare-datatypes () ((resourcerecordtype__ref (mk_resourcerecordtype__ref (resourcerecordtype__content us_rep2)))))
(define-fun resourcerecordtype__ref___projection ((a resourcerecordtype__ref)) us_rep2 (resourcerecordtype__content a))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (Array Int character)) (rec__rr_type__resourcerecordtype__ttlinseconds1 unsigned32) (rec__rr_type__resourcerecordtype__class1 classtype) (rec__ext__1 us_private)))))
(define-fun us_split_fields_CanonicalDomainName__projection ((a us_split_fields6)) (Array Int character) (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname a))
(define-fun us_split_fields_TTLInSeconds__4__projection ((a us_split_fields6)) unsigned32 (rec__rr_type__resourcerecordtype__ttlinseconds1 a))
(define-fun us_split_fields_Class__4__projection ((a us_split_fields6)) classtype (rec__rr_type__resourcerecordtype__class1 a))
(define-fun us_split_fields___5__projection ((a us_split_fields6)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6) (attr__tag1 Int)))))
(define-fun us_rep___13__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun us_rep___14__projection ((a us_rep3)) Int (attr__tag1 a))
(declare-fun hide_ext__ ((Array Int character) us_private) us_private)
(declare-fun extract__canonicaldomainname (us_private) (Array Int character))
(assert (forall ((canonicaldomainname (Array Int character))) (forall ((rec__ext__2 us_private)) (= (extract__canonicaldomainname (hide_ext__ canonicaldomainname rec__ext__2)) canonicaldomainname))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep3)) us_rep2 (mk___rep2 (mk___split_fields2 (rec__rr_type__resourcerecordtype__ttlinseconds1 (us_split_fields7 a)) (rec__rr_type__resourcerecordtype__class1 (us_split_fields7 a)) (hide_ext__ (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 a)) (rec__ext__1 (us_split_fields7 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep2)) us_rep3 (mk___rep3 (mk___split_fields3 (extract__canonicaldomainname (rec__ext__ (us_split_fields5 r))) (rec__rr_type__resourcerecordtype__ttlinseconds (us_split_fields5 r)) (rec__rr_type__resourcerecordtype__class (us_split_fields5 r)) (extract__ext__ (rec__ext__ (us_split_fields5 r)))) (attr__tag r)))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (= (bool_eq (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 a)) 1 129 (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 b)) 1 129) true) (= (to_rep5 (rec__rr_type__resourcerecordtype__ttlinseconds1 (us_split_fields7 a))) (to_rep5 (rec__rr_type__resourcerecordtype__ttlinseconds1 (us_split_fields7 b))))) (= (to_rep6 (rec__rr_type__resourcerecordtype__class1 (us_split_fields7 a))) (to_rep6 (rec__rr_type__resourcerecordtype__class1 (us_split_fields7 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep3) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep3) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))
(declare-const rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit Int)
(declare-const rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__last__bit Int)
(declare-const rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__position Int)
(assert (<= 0 rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit))
(assert (< rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__last__bit))
(assert (<= 0 rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__position))
(declare-const rr_type__resourcerecordtype__ttlinseconds__first__bit1 Int)
(declare-const rr_type__resourcerecordtype__ttlinseconds__last__bit1 Int)
(declare-const rr_type__resourcerecordtype__ttlinseconds__position1 Int)
(assert (<= 0 rr_type__resourcerecordtype__ttlinseconds__first__bit1))
(assert (< rr_type__resourcerecordtype__ttlinseconds__first__bit1 rr_type__resourcerecordtype__ttlinseconds__last__bit1))
(assert (<= 0 rr_type__resourcerecordtype__ttlinseconds__position1))
(declare-const rr_type__resourcerecordtype__class__first__bit1 Int)
(declare-const rr_type__resourcerecordtype__class__last__bit1 Int)
(declare-const rr_type__resourcerecordtype__class__position1 Int)
(assert (<= 0 rr_type__resourcerecordtype__class__first__bit1))
(assert (< rr_type__resourcerecordtype__class__first__bit1 rr_type__resourcerecordtype__class__last__bit1))
(assert (<= 0 rr_type__resourcerecordtype__class__position1))
(declare-fun user_eq16 (us_rep3 us_rep3) Bool)
(declare-const dummy16 us_rep3)
(declare-datatypes () ((cnamerecordtype__ref (mk_cnamerecordtype__ref (cnamerecordtype__content us_rep3)))))
(define-fun cnamerecordtype__ref___projection ((a cnamerecordtype__ref)) us_rep3 (cnamerecordtype__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep3))))))
(declare-fun slide2 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_201 Int)) (=> (and (<= a__first temp___idx_201) (<= temp___idx_201 a__last)) (= (bool_eq5 (select a temp___idx_201) (select b (+ (- b__first a__first) temp___idx_201))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_201 Int)) (=> (and (<= a__first temp___idx_201) (<= temp___idx_201 a__last)) (= (bool_eq5 (select a temp___idx_201) (select b (+ (- b__first a__first) temp___idx_201))) true))))))))
(declare-sort returnedrecordsindextype 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq17 (returnedrecordsindextype returnedrecordsindextype) Bool)
(declare-const dummy17 returnedrecordsindextype)
(declare-datatypes () ((returnedrecordsindextype__ref (mk_returnedrecordsindextype__ref (returnedrecordsindextype__content returnedrecordsindextype)))))
(define-fun returnedrecordsindextype__ref___projection ((a returnedrecordsindextype__ref)) returnedrecordsindextype (returnedrecordsindextype__content a))
(define-fun default_initial_assumption ((temp___expr_1227 (Array Int us_rep3)) (temp___skip_top_level_1228 Bool)) Bool (forall ((temp___1229 Int)) (=> (and (<= 1 temp___1229) (<= temp___1229 64)) (= (attr__tag1 (select temp___expr_1227 temp___1229)) us_tag1))))
(declare-const start_byte Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const cnames (Array Int us_rep3))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range1 temp___expr_74)))
(define-fun dynamic_invariant5 ((temp___expr_803 (_ BitVec 8)) (temp___is_init_799 Bool) (temp___skip_constant_800 Bool) (temp___do_toplevel_801 Bool) (temp___do_typ_inv_802 Bool)) Bool true)
(define-fun dynamic_invariant6 ((temp___expr_810 Int) (temp___is_init_806 Bool) (temp___skip_constant_807 Bool) (temp___do_toplevel_808 Bool) (temp___do_typ_inv_809 Bool)) Bool (=> (or (= temp___is_init_806 true) (<= 0 65535)) (in_range5 temp___expr_810)))
(define-fun dynamic_invariant7 ((temp___expr_817 Int) (temp___is_init_813 Bool) (temp___skip_constant_814 Bool) (temp___do_toplevel_815 Bool) (temp___do_typ_inv_816 Bool)) Bool (=> (or (= temp___is_init_813 true) (<= 0 2)) (in_range6 temp___expr_817)))
(define-fun dynamic_invariant8 ((temp___expr_824 Int) (temp___is_init_820 Bool) (temp___skip_constant_821 Bool) (temp___do_toplevel_822 Bool) (temp___do_typ_inv_823 Bool)) Bool (=> (or (= temp___is_init_820 true) (<= 0 5)) (in_range7 temp___expr_824)))
(define-fun dynamic_invariant9 ((temp___expr_963 (_ BitVec 32)) (temp___is_init_959 Bool) (temp___skip_constant_960 Bool) (temp___do_toplevel_961 Bool) (temp___do_typ_inv_962 Bool)) Bool true)
(define-fun dynamic_invariant10 ((temp___expr_970 Int) (temp___is_init_966 Bool) (temp___skip_constant_967 Bool) (temp___do_toplevel_968 Bool) (temp___do_typ_inv_969 Bool)) Bool (=> (or (= temp___is_init_966 true) (<= 0 3)) (in_range9 temp___expr_970)))
(define-fun default_initial_assumption1 ((temp___expr_1049 us_rep2) (temp___skip_top_level_1050 Bool)) Bool (= (attr__tag temp___expr_1049) us_tag))
(define-fun dynamic_invariant11 ((temp___expr_1057 Int) (temp___is_init_1053 Bool) (temp___skip_constant_1054 Bool) (temp___do_toplevel_1055 Bool) (temp___do_typ_inv_1056 Bool)) Bool (=> (or (= temp___is_init_1053 true) (<= 1 64)) (in_range10 temp___expr_1057)))
(define-fun default_initial_assumption2 ((temp___expr_1213 us_rep3) (temp___skip_top_level_1214 Bool)) Bool (= (attr__tag1 temp___expr_1213) us_tag1))
(declare-const domainname (Array Int character))
(declare-const qname_location Int)
(declare-const output_packet__split_fields unsigned_short)
(declare-const output_packet__split_fields1 Bool)
(declare-const output_packet__split_fields2 opcode_type)
(declare-const output_packet__split_fields3 Bool)
(declare-const output_packet__split_fields4 Bool)
(declare-const output_packet__split_fields5 Bool)
(declare-const output_packet__split_fields6 Bool)
(declare-const output_packet__split_fields7 Bool)
(declare-const output_packet__split_fields8 Bool)
(declare-const output_packet__split_fields9 Bool)
(declare-const output_packet__split_fields10 response_code)
(declare-const output_packet__split_fields11 unsigned_short)
(declare-const output_packet__split_fields12 unsigned_short)
(declare-const output_packet__split_fields13 unsigned_short)
(declare-const output_packet__split_fields14 unsigned_short)
(declare-const output_packet__split_fields15 (Array Int byte))
(declare-const output_bytes Int)
(declare-const current_byte Int)
(declare-const name_length Int)
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 byte)
(declare-const o3 Int)
(declare-const o4 (Array Int byte))
(declare-const o5 unsigned_short)
(declare-const o6 Bool)
(declare-const o7 opcode_type)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const o11 Bool)
(declare-const o12 Bool)
(declare-const o13 Bool)
(declare-const o14 Bool)
(declare-const o15 response_code)
(declare-const o16 unsigned_short)
(declare-const o17 unsigned_short)
(declare-const o18 unsigned_short)
(declare-const o19 unsigned_short)
(declare-const o20 (Array Int byte))
(declare-const temp___7115 unsigned_short)
(declare-const temp___71151 Bool)
(declare-const temp___71152 opcode_type)
(declare-const temp___71153 Bool)
(declare-const temp___71154 Bool)
(declare-const temp___71155 Bool)
(declare-const temp___71156 Bool)
(declare-const temp___71157 Bool)
(declare-const temp___71158 Bool)
(declare-const temp___71159 Bool)
(declare-const temp___711510 response_code)
(declare-const temp___711511 unsigned_short)
(declare-const temp___711512 unsigned_short)
(declare-const temp___711513 unsigned_short)
(declare-const temp___711514 unsigned_short)
(declare-const temp___711515 (Array Int byte))
(declare-const o21 byte)
(declare-const o22 Int)
(declare-const o23 (Array Int byte))
(declare-const o24 unsigned_short)
(declare-const o25 Bool)
(declare-const o26 opcode_type)
(declare-const o27 Bool)
(declare-const o28 Bool)
(declare-const o29 Bool)
(declare-const o30 Bool)
(declare-const o31 Bool)
(declare-const o32 Bool)
(declare-const o33 Bool)
(declare-const o34 response_code)
(declare-const o35 unsigned_short)
(declare-const o36 unsigned_short)
(declare-const o37 unsigned_short)
(declare-const o38 unsigned_short)
(declare-const o39 (Array Int byte))
(declare-const temp___7119 unsigned_short)
(declare-const temp___71191 Bool)
(declare-const temp___71192 opcode_type)
(declare-const temp___71193 Bool)
(declare-const temp___71194 Bool)
(declare-const temp___71195 Bool)
(declare-const temp___71196 Bool)
(declare-const temp___71197 Bool)
(declare-const temp___71198 Bool)
(declare-const temp___71199 Bool)
(declare-const temp___711910 response_code)
(declare-const temp___711911 unsigned_short)
(declare-const temp___711912 unsigned_short)
(declare-const temp___711913 unsigned_short)
(declare-const temp___711914 unsigned_short)
(declare-const temp___711915 (Array Int byte))
(declare-const o40 byte)
(declare-const o41 Int)
(declare-const o42 (Array Int byte))
(declare-const o43 us_split_fields2)
(declare-const temp___7123 us_rep1)
(declare-const o44 byte)
(declare-const o45 Int)
(declare-const o46 (Array Int byte))
(declare-const o47 us_split_fields2)
(declare-const temp___7127 us_rep1)
(declare-const o48 Int)
(declare-const o49 Int)
(declare-const o50 Int)
(declare-const output_packet__split_fields16 us_split_fields2)
(declare-const result int__ref)
(declare-const current_byte1 Int)
(declare-const result1 map__ref)
(declare-const domainname1 (Array Int character))
(declare-const result2 int__ref)
(declare-const name_length1 Int)
(declare-const process_dns_request__set_unsigned_16__bytes (Array Int byte))
(declare-const result3 us_split_fields__ref1)
(declare-const output_packet__split_fields17 us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const output_packet__split_fields18 us_split_fields2)
(declare-const result5 us_split_fields__ref1)
(declare-const output_packet__split_fields19 us_split_fields2)
(declare-const result6 us_split_fields__ref1)
(declare-const output_packet__split_fields20 us_split_fields2)
(declare-const result7 us_split_fields__ref1)
(declare-const output_packet__split_fields21 us_split_fields2)
(declare-const process_dns_request__set_unsigned_32__bytes (Array Int byte))
(declare-const result8 us_split_fields__ref1)
(declare-const output_packet__split_fields22 us_split_fields2)
(declare-const process_dns_request__set_unsigned_16__bytes1 (Array Int byte))
(declare-const result9 us_split_fields__ref1)
(declare-const output_packet__split_fields23 us_split_fields2)
(declare-const result10 int__ref)
(declare-const current_byte2 Int)
(assert (in_range4 start_byte))
(assert (in_range2 qname_location))
(assert (=> (<= 0 8192) (in_range3 output_bytes)))
(assert (and (<= start_byte 8192) (= (to_rep2 output_packet__split_fields12) 0)))
(assert (=> (<= 1 8180) (in_range4 current_byte)))
(assert (=> (<= 1 129) (in_range8 name_length)))
(assert (=> (<= 1 129) (in_range8 i)))
(assert (= result (mk_int__ref current_byte)))
(assert (= current_byte1 start_byte))
(assert (= result1 (mk_map__ref domainname)))
(assert (= domainname1 (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 (select cnames 1)))))
(assert (and (= o (wirenamelength (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 (select cnames 1))))) (and (in_range8 o) (or (= o 129) (and (= (to_rep (select (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 (select cnames 1))) o)) 0) (forall ((q Int)) (=> (and (<= 1 q) (<= q (- o 1))) (not (= (to_rep (select (rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname (us_split_fields7 (select cnames 1))) q)) 0)))))))))
(assert (= result2 (mk_int__ref name_length)))
(assert (= name_length1 o))
(assert (=> (< current_byte1 8168) (and (= o1 (+ current_byte1 1)) (in_range4 (+ current_byte1 1)))))
(assert (=> (< current_byte1 8168) (= result3 (mk___split_fields__ref1 (mk___split_fields1 (mk___rep (mk___split_fields output_packet__split_fields output_packet__split_fields1 output_packet__split_fields2 output_packet__split_fields3 output_packet__split_fields4 output_packet__split_fields5 output_packet__split_fields6 output_packet__split_fields7 output_packet__split_fields8 output_packet__split_fields9 output_packet__split_fields10 output_packet__split_fields11 output_packet__split_fields12 output_packet__split_fields13 output_packet__split_fields14)) output_packet__split_fields15)))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields17 (mk___split_fields1 (mk___rep (mk___split_fields output_packet__split_fields output_packet__split_fields1 output_packet__split_fields2 output_packet__split_fields3 output_packet__split_fields4 output_packet__split_fields5 output_packet__split_fields6 output_packet__split_fields7 output_packet__split_fields8 output_packet__split_fields9 output_packet__split_fields10 output_packet__split_fields11 output_packet__split_fields12 output_packet__split_fields13 output_packet__split_fields14)) process_dns_request__set_unsigned_16__bytes))))
(assert (=> (< current_byte1 8168) (= (to_rep1 o2) #x00)))
(assert (=> (< current_byte1 8168) (and (<= 1 (+ current_byte1 3)) (<= (+ current_byte1 3) 8180))))
(assert (=> (< current_byte1 8168) (= o3 (+ current_byte1 3))))
(assert (=> (< current_byte1 8168) (= o4 (store (rec__dns_types__dns_packet__bytes output_packet__split_fields17) o3 o2))))
(assert (=> (< current_byte1 8168) (= (rec__dns_types__dns_packet__header output_packet__split_fields17) (mk___rep (mk___split_fields o5 o6 o7 o8 o9 o10 o11 o12 o13 o14 o15 o16 o17 o18 o19)))))
(assert (=> (< current_byte1 8168) (= o4 o20)))
(assert (=> (< current_byte1 8168) (= temp___7115 o5)))
(assert (=> (< current_byte1 8168) (= temp___71151 o6)))
(assert (=> (< current_byte1 8168) (= temp___71152 o7)))
(assert (=> (< current_byte1 8168) (= temp___71153 o8)))
(assert (=> (< current_byte1 8168) (= temp___71154 o9)))
(assert (=> (< current_byte1 8168) (= temp___71155 o10)))
(assert (=> (< current_byte1 8168) (= temp___71156 o11)))
(assert (=> (< current_byte1 8168) (= temp___71157 o12)))
(assert (=> (< current_byte1 8168) (= temp___71158 o13)))
(assert (=> (< current_byte1 8168) (= temp___71159 o14)))
(assert (=> (< current_byte1 8168) (= temp___711510 o15)))
(assert (=> (< current_byte1 8168) (= temp___711511 o16)))
(assert (=> (< current_byte1 8168) (= temp___711512 o17)))
(assert (=> (< current_byte1 8168) (= temp___711513 o18)))
(assert (=> (< current_byte1 8168) (= temp___711514 o19)))
(assert (=> (< current_byte1 8168) (= temp___711515 o20)))
(assert (=> (< current_byte1 8168) (= result4 (mk___split_fields__ref1 output_packet__split_fields17))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields18 (mk___split_fields1 (mk___rep (mk___split_fields temp___7115 temp___71151 temp___71152 temp___71153 temp___71154 temp___71155 temp___71156 temp___71157 temp___71158 temp___71159 temp___711510 temp___711511 temp___711512 temp___711513 temp___711514)) temp___711515))))
(assert (=> (< current_byte1 8168) (= (to_rep1 o21) #x05)))
(assert (=> (< current_byte1 8168) (and (<= 1 (+ current_byte1 4)) (<= (+ current_byte1 4) 8180))))
(assert (=> (< current_byte1 8168) (= o22 (+ current_byte1 4))))
(assert (=> (< current_byte1 8168) (= o23 (store (rec__dns_types__dns_packet__bytes output_packet__split_fields18) o22 o21))))
(assert (=> (< current_byte1 8168) (= (rec__dns_types__dns_packet__header output_packet__split_fields18) (mk___rep (mk___split_fields o24 o25 o26 o27 o28 o29 o30 o31 o32 o33 o34 o35 o36 o37 o38)))))
(assert (=> (< current_byte1 8168) (= o23 o39)))
(assert (=> (< current_byte1 8168) (= temp___7119 o24)))
(assert (=> (< current_byte1 8168) (= temp___71191 o25)))
(assert (=> (< current_byte1 8168) (= temp___71192 o26)))
(assert (=> (< current_byte1 8168) (= temp___71193 o27)))
(assert (=> (< current_byte1 8168) (= temp___71194 o28)))
(assert (=> (< current_byte1 8168) (= temp___71195 o29)))
(assert (=> (< current_byte1 8168) (= temp___71196 o30)))
(assert (=> (< current_byte1 8168) (= temp___71197 o31)))
(assert (=> (< current_byte1 8168) (= temp___71198 o32)))
(assert (=> (< current_byte1 8168) (= temp___71199 o33)))
(assert (=> (< current_byte1 8168) (= temp___711910 o34)))
(assert (=> (< current_byte1 8168) (= temp___711911 o35)))
(assert (=> (< current_byte1 8168) (= temp___711912 o36)))
(assert (=> (< current_byte1 8168) (= temp___711913 o37)))
(assert (=> (< current_byte1 8168) (= temp___711914 o38)))
(assert (=> (< current_byte1 8168) (= temp___711915 o39)))
(assert (=> (< current_byte1 8168) (= result5 (mk___split_fields__ref1 output_packet__split_fields18))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields19 (mk___split_fields1 (mk___rep (mk___split_fields temp___7119 temp___71191 temp___71192 temp___71193 temp___71194 temp___71195 temp___71196 temp___71197 temp___71198 temp___71199 temp___711910 temp___711911 temp___711912 temp___711913 temp___711914)) temp___711915))))
(assert (=> (< current_byte1 8168) (= (to_rep1 o40) #x00)))
(assert (=> (< current_byte1 8168) (and (<= 1 (+ current_byte1 5)) (<= (+ current_byte1 5) 8180))))
(assert (=> (< current_byte1 8168) (= o41 (+ current_byte1 5))))
(assert (=> (< current_byte1 8168) (= o42 (store (rec__dns_types__dns_packet__bytes output_packet__split_fields19) o41 o40))))
(assert (=> (< current_byte1 8168) (= o43 (mk___split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields19) o42))))
(assert (=> (< current_byte1 8168) (= temp___7123 (mk___rep1 o43))))
(assert (=> (< current_byte1 8168) (= result6 (mk___split_fields__ref1 output_packet__split_fields19))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields20 (us_split_fields3 temp___7123))))
(assert (=> (< current_byte1 8168) (= (to_rep1 o44) #x01)))
(assert (=> (< current_byte1 8168) (and (<= 1 (+ current_byte1 6)) (<= (+ current_byte1 6) 8180))))
(assert (=> (< current_byte1 8168) (= o45 (+ current_byte1 6))))
(assert (=> (< current_byte1 8168) (= o46 (store (rec__dns_types__dns_packet__bytes output_packet__split_fields20) o45 o44))))
(assert (=> (< current_byte1 8168) (= o47 (mk___split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields20) o46))))
(assert (=> (< current_byte1 8168) (= temp___7127 (mk___rep1 o47))))
(assert (=> (< current_byte1 8168) (= result7 (mk___split_fields__ref1 output_packet__split_fields20))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields21 (us_split_fields3 temp___7127))))
(assert (=> (< current_byte1 8168) (and (= o48 (+ current_byte1 7)) (in_range4 (+ current_byte1 7)))))
(assert (=> (< current_byte1 8168) (= result8 (mk___split_fields__ref1 output_packet__split_fields21))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields22 (mk___split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields21) process_dns_request__set_unsigned_32__bytes))))
(assert (=> (< current_byte1 8168) (and (= o49 (+ current_byte1 11)) (in_range4 (+ current_byte1 11)))))
(assert (=> (< current_byte1 8168) (= result9 (mk___split_fields__ref1 output_packet__split_fields22))))
(assert (=> (< current_byte1 8168) (= output_packet__split_fields23 (mk___split_fields1 (rec__dns_types__dns_packet__header output_packet__split_fields22) process_dns_request__set_unsigned_16__bytes1))))
(assert (=> (< current_byte1 8168) (and (= o50 (+ current_byte1 12)) (in_range4 (+ current_byte1 12)))))
(assert (=> (< current_byte1 8168) (= result10 (mk_int__ref current_byte1))))
(assert (=> (< current_byte1 8168) (= current_byte2 o50)))
(assert (=> (not (< current_byte1 8168)) (= current_byte2 current_byte1)))
(assert (=> (not (< current_byte1 8168)) (= output_packet__split_fields23 (mk___split_fields1 (mk___rep (mk___split_fields output_packet__split_fields output_packet__split_fields1 output_packet__split_fields2 output_packet__split_fields3 output_packet__split_fields4 output_packet__split_fields5 output_packet__split_fields6 output_packet__split_fields7 output_packet__split_fields8 output_packet__split_fields9 output_packet__split_fields10 output_packet__split_fields11 output_packet__split_fields12 output_packet__split_fields13 output_packet__split_fields14)) output_packet__split_fields15))))
(assert (=> (not (< current_byte1 8168)) (= current_byte2 current_byte1)))
(assert (=> (not (< current_byte1 8168)) (= output_packet__split_fields23 output_packet__split_fields16)))
(assert (not (in_range2 (+ current_byte2 12))))
(check-sat)
(exit)
