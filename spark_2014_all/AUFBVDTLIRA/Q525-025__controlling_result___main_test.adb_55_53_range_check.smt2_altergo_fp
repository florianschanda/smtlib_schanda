(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type long_integer

predicate in_range3(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : long_integer, long_integer -> bool

logic dummy5 : long_integer

type long_integer__ref = { long_integer__content : long_integer
}

function long_integer__ref___projection(a: long_integer__ref) : long_integer =
  (a).long_integer__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : natural, natural -> bool

logic dummy6 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic concat_singleton_left : character, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_singleton_left_def :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a) and
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))]))))))))

logic concat_singleton_right : (int,character) farray, int, int,
  character -> (int,character) farray

axiom concat_singleton_right_def :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. (((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b) and
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i]))))))))

logic concat_singletons : character, int, character -> (int,character) farray

axiom concat_singletons_def :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  (((concat_singletons(a, a_first, b)[a_first]) = a) and
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

type tstream_element_offsetB

predicate in_range5(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : tstream_element_offsetB, tstream_element_offsetB -> bool

logic dummy7 : tstream_element_offsetB

type tstream_element_offsetB__ref = { tstream_element_offsetB__content :
tstream_element_offsetB
}

function tstream_element_offsetB__ref___projection(a: tstream_element_offsetB__ref) : tstream_element_offsetB =
  (a).tstream_element_offsetB__content

logic to_rep2 : tstream_element_offsetB -> int

logic of_rep2 : int -> tstream_element_offsetB

axiom inversion_axiom2 :
  (forall x:tstream_element_offsetB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tstream_element_offsetB [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type stream_element_offset

predicate in_range6(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : stream_element_offset, stream_element_offset -> bool

logic dummy8 : stream_element_offset

type stream_element_offset__ref = { stream_element_offset__content :
stream_element_offset
}

function stream_element_offset__ref___projection(a: stream_element_offset__ref) : stream_element_offset =
  (a).stream_element_offset__content

type t1

logic tqtint : t1 -> int

axiom tqtaxiom : (forall i:t1. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t1, int -> bool

axiom nth_out_of_bound :
  (forall x:t1. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t1

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t1

logic ones : t1

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t1, t1 -> t1

axiom Nth_bw_and :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t1, t1 -> t1

axiom Nth_bw_or :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t1, t1 -> t1

axiom Nth_bw_xor :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t1 -> t1

axiom Nth_bw_not :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t1, int -> t1

axiom Lsr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t1. (lsr(x, 0) = x))

logic asr : t1, int -> t1

axiom Asr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t1. (asr(x, 0) = x))

logic lsl : t1, int -> t1

axiom Lsl_nth_high :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t1. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t1, int -> t1

axiom Nth_rotate_right :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t1, int -> t1

axiom Nth_rotate_left :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t1 -> prop

logic of_int : int -> t1

logic to_int : t1 -> int

axiom to_int_def :
  (forall x:t1 [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t1. forall vqt:t1. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t1. forall vqt:t1. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t1. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t1

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t1, y: t1) = (tqtint(x) <  tqtint(y))

predicate ule(x: t1, y: t1) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t1, y: t1) = (tqtint(y) <  tqtint(x))

predicate uge(x: t1, y: t1) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t1, v2: t1) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t1, v2: t1) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t1, v2: t1) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t1, v2: t1) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t1. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t1, t1 -> t1

axiom to_uint_add_bounded :
  (forall v1:t1. forall v2:t1. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t1, t1 -> t1

axiom to_uint_sub_bounded :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t1 -> t1

axiom to_uint_neg : (forall v:t1. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t1, t1 -> t1

axiom to_uint_mul_bounded :
  (forall v1:t1. forall v2:t1. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t1, t1 -> t1

axiom to_uint_udiv :
  (forall v1:t1. forall v2:t1. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t1, t1 -> t1

axiom to_uint_urem :
  (forall v1:t1. forall v2:t1. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t1, t1 -> t1

axiom lsr_bv_is_lsr :
  (forall x:t1. forall n:t1. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t1. forall n:t1. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t1, t1 -> t1

axiom asr_bv_is_asr :
  (forall x:t1. forall n:t1. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t1, t1 -> t1

axiom lsl_bv_is_lsl :
  (forall x:t1. forall n:t1. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t1. forall n:t1. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t1, t1 -> t1

logic rotate_left_bv : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left :
  (forall v:t1. forall n:t1. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t1. forall n:t1. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t1, t1 -> bool

axiom Nth_bv_is_nth :
  (forall x:t1. forall i:t1. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t1, t1, t1, t1 -> prop

predicate eq_sub(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub(a, b,
  tqtint(i), tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t1. forall y:t1 [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t1
}

logic bool_eq10 : t1, t1 -> bool

axiom bool_eq_def8 :
  (forall x:t1. forall y:t1 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge1(x, y) = false))))

logic power : t1, int -> t1

axiom Power_01 : (forall x:t1. (power(x, 0) = one))

axiom Power_11 : (forall x:t1. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t1. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t1, t1 -> t1

axiom bv_min_def :
  (forall x:t1. forall y:t1 [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t1, t1 -> t1

axiom bv_max_def :
  (forall x:t1. forall y:t1 [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t1. forall y:t1. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t1. forall y:t1. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type stream_element

logic attr__ATTRIBUTE_MODULUS : t1

logic bool_eq11 : t1, t1 -> bool

axiom bool_eq_def9 :
  (forall x:t1. forall y:t1 [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t1

logic user_eq8 : stream_element, stream_element -> bool

logic dummy9 : stream_element

type stream_element__ref = { stream_element__content : stream_element
}

function stream_element__ref___projection(a: stream_element__ref) : stream_element =
  (a).stream_element__content

logic to_rep3 : stream_element -> t1

logic of_rep3 : t1 -> stream_element

axiom inversion_axiom3 :
  (forall x:stream_element [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : true

axiom coerce_axiom3 :
  (forall x:t1 [to_rep3(of_rep3(x))]. (to_rep3(of_rep3(x)) = x))

function to_int1(x: stream_element) : int = tqtint(to_rep3(x))

axiom range_int_axiom :
  (forall x:stream_element [to_int1(x)]. uint_in_range(to_int1(x)))

type map__ref1 = { map__content1 : (int,stream_element) farray
}

logic slide1 : (int,stream_element) farray, int,
  int -> (int,stream_element) farray

axiom slide_eq1 :
  (forall a:(int,stream_element) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,stream_element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq12 : (int,stream_element) farray, int, int,
  (int,stream_element) farray, int, int -> bool

axiom bool_eq_def10 :
  (forall a:(int,stream_element) farray. forall a__first:int.
  forall a__last:int. forall b:(int,stream_element) farray.
  forall b__first:int. forall b__last:int [bool_eq12(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,stream_element) farray.
  forall b:(int,stream_element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))))))

logic concat1 : (int,stream_element) farray, int, int,
  (int,stream_element) farray, int, int -> (int,stream_element) farray

axiom concat_def1 :
  (forall a:(int,stream_element) farray.
  forall b:(int,stream_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic concat_singleton_left1 : stream_element, int,
  (int,stream_element) farray, int, int -> (int,stream_element) farray

axiom concat_singleton_left_def1 :
  (forall a:stream_element.
  (forall b:(int,stream_element) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left1(a, a_first, b, b_first, b_last)].
  (((concat_singleton_left1(a, a_first, b, b_first,
  b_last)[a_first]) = a) and
  (forall i:int [(concat_singleton_left1(a, a_first, b, b_first,
  b_last)[i])]. ((a_first <  i) -> ((concat_singleton_left1(a, a_first, b,
  b_first, b_last)[i]) = (b[((i - a_first) + (b_first - 1))]))))))))

logic concat_singleton_right1 : (int,stream_element) farray, int, int,
  stream_element -> (int,stream_element) farray

axiom concat_singleton_right_def1 :
  (forall a:(int,stream_element) farray.
  (forall b:stream_element.
  (forall a_first:int. forall a_last:int [concat_singleton_right1(a, a_first,
  a_last, b)]. (((concat_singleton_right1(a, a_first, a_last,
  b)[(a_last + 1)]) = b) and
  (forall i:int [(concat_singleton_right1(a, a_first, a_last, b)[i])|
  (a[i])]. (((a_first <= i) and (i <= a_last)) ->
  ((concat_singleton_right1(a, a_first, a_last, b)[i]) = (a[i]))))))))

logic concat_singletons1 : stream_element, int,
  stream_element -> (int,stream_element) farray

axiom concat_singletons_def1 :
  (forall a:stream_element. forall b:stream_element.
  (forall a_first:int [concat_singletons1(a, a_first, b)].
  (((concat_singletons1(a, a_first, b)[a_first]) = a) and
  ((concat_singletons1(a, a_first, b)[(a_first + 1)]) = b))))

logic singleton1 : stream_element, int -> (int,stream_element) farray

axiom singleton_def1 :
  (forall v:stream_element.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

type t2

logic first2 : t2 -> tstream_element_offsetB

logic last2 : t2 -> tstream_element_offsetB

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range5(f) -> (in_range5(l) ->
  ((to_rep2(first2(mk1(f, l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range5(low) and (in_range5(high) and ((low <= high) ->
  (in_range6(low) and in_range6(high)))))

type us_t1 = { elts1 : (int,stream_element) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,stream_element) farray = (a).elts1

function of_array1(a: (int,stream_element) farray, f: int, l: int) : us_t1 =
  { elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,stream_element) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,stream_element) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,stream_element) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,stream_element) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,stream_element) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,stream_element) farray. (0 <= object__alignment1(a)))

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq12((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq9 : us_t1, us_t1 -> bool

logic dummy10 : (int,stream_element) farray

logic dummy11 : t2

type stream_element_array__ref = { stream_element_array__content : us_t1
}

function stream_element_array__ref___projection(a: stream_element_array__ref) : us_t1 =
  (a).stream_element_array__content

logic to_rep4 : natural -> int

logic of_rep4 : int -> natural

axiom inversion_axiom4 :
  (forall x:natural [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:natural [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy12 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq10 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__fixed_string__object__width : natural;
rec__fixed_string__object__name : (int,character) farray; rec__ext__ :
us_private
}

function us_split_fields_Width__projection(a: us_split_fields) : natural =
  (a).rec__fixed_string__object__width

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__fixed_string__object__name

function us_split_fields___2__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___4__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq14 : us_rep, us_rep -> bool

axiom bool_eq_def11 :
  (forall a:us_rep. forall b:us_rep [bool_eq14(a, b)].
  ((((to_rep4(((a).us_split_fields1).rec__fixed_string__object__width) = to_rep4(((b).us_split_fields1).rec__fixed_string__object__width)) and
  (bool_eq4(((a).us_split_fields1).rec__fixed_string__object__name, 1, 20,
  ((b).us_split_fields1).rec__fixed_string__object__name, 1, 20) = true)) ->
  (bool_eq14(a, b) = true)) and
  ((not ((to_rep4(((a).us_split_fields1).rec__fixed_string__object__width) = to_rep4(((b).us_split_fields1).rec__fixed_string__object__width)) and
  (bool_eq4(((a).us_split_fields1).rec__fixed_string__object__name, 1, 20,
  ((b).us_split_fields1).rec__fixed_string__object__name, 1, 20) = true))) ->
  (bool_eq14(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__size3({ us_split_fields1 = {
  rec__fixed_string__object__width = a; rec__fixed_string__object__name = a1;
  rec__ext__ = a2 }; attr__tag = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__alignment3({ us_split_fields1 = {
  rec__fixed_string__object__width = a; rec__fixed_string__object__name = a1;
  rec__ext__ = a2 }; attr__tag = a3 })))

logic fixed_string__object__width__first__bit : int

logic fixed_string__object__width__last__bit : int

logic fixed_string__object__width__position : int

axiom fixed_string__object__width__first__bit_axiom :
  (0 <= fixed_string__object__width__first__bit)

axiom fixed_string__object__width__last__bit_axiom :
  (fixed_string__object__width__first__bit <  fixed_string__object__width__last__bit)

axiom fixed_string__object__width__position_axiom :
  (0 <= fixed_string__object__width__position)

logic fixed_string__object__name__first__bit : int

logic fixed_string__object__name__last__bit : int

logic fixed_string__object__name__position : int

axiom fixed_string__object__name__first__bit_axiom :
  (0 <= fixed_string__object__name__first__bit)

axiom fixed_string__object__name__last__bit_axiom :
  (fixed_string__object__name__first__bit <  fixed_string__object__name__last__bit)

axiom fixed_string__object__name__position_axiom :
  (0 <= fixed_string__object__name__position)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy13 : natural

logic dummy14 : (int,character) farray

logic dummy15 : us_private

logic dummy16 : int

type object__ref = { object__content : us_rep
}

function object__ref___projection(a: object__ref) : us_rep =
  (a).object__content

logic temp___202 : int -> (int,character) farray

logic elements : us_rep -> int

logic elements__function_guard : int, us_rep -> prop

logic elements1 : int, us_rep -> int

logic elements__function_guard1 : int, int, us_rep -> prop

axiom elements__post_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })]. in_range4(elements({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })))

axiom elements__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements1(attr__tag1, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. in_range4(elements1(attr__tag1, { us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }))))

axiom fixed_string__object__compat_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. (elements({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }) = elements1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })))

logic create : int, us_t -> us_rep

logic create__function_guard : us_rep, int, us_t -> prop

logic create1 : int, int, us_t -> us_rep

logic create__function_guard1 : us_rep, int, int, us_t -> prop

axiom create__post_axiom :
  (forall elem_width:int.
  (forall name:(int,character) farray. forall name1:t [create(elem_width, {
  elts = name; rt = name1 })]. (in_range4(elem_width) ->
  ((elements(create(elem_width, { elts = name; rt = name1
  })) = elem_width) and ((create(elem_width, { elts = name; rt = name1
  })).attr__tag = us_tag)))))

axiom create__post__dispatch_axiom :
  (forall attr__tag1:int. forall elem_width:int.
  (forall name:(int,character) farray. forall name1:t [create1(attr__tag1,
  elem_width, { elts = name; rt = name1 })]. (in_range4(elem_width) ->
  ((create1(attr__tag1, elem_width, { elts = name; rt = name1
  })).attr__tag = attr__tag1))))

axiom fixed_string__object__compat_axiom1 :
  (forall elem_width:int.
  (forall name:(int,character) farray. forall name1:t [create1(us_tag,
  elem_width, { elts = name; rt = name1 })]. (create(elem_width, { elts =
  name; rt = name1 }) = create1(us_tag, elem_width, { elts = name; rt = name1
  }))))

logic null_string : us_rep -> us_t

logic null_string__function_guard : us_t, us_rep -> prop

logic null_string1 : int, us_rep -> us_t

logic null_string__function_guard1 : us_t, int, us_rep -> prop

axiom null_string__post_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [null_string({ us_split_fields1 =
  { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. ((length(null_string({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })) = elements({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })) and dynamic_property(1, 2147483647, to_rep1(first((null_string({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })).rt)), to_rep1(last((null_string({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })).rt)))))

axiom null_string__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [null_string1(attr__tag1, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. dynamic_property(1, 2147483647,
  to_rep1(first((null_string1(attr__tag1, { us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })).rt)),
  to_rep1(last((null_string1(attr__tag1, { us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })).rt)))))

axiom fixed_string__object__compat_axiom2 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [null_string1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. (null_string({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }) = null_string1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })))

logic convert : us_rep, us_t -> us_t

logic convert__function_guard : us_t, us_rep, us_t -> prop

logic convert1 : int, us_rep, us_t -> us_t

logic convert__function_guard1 : us_t, int, us_rep, us_t -> prop

axiom convert__post_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int.
  (forall in_string:(int,character) farray. forall in_string1:t [convert({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }, { elts = in_string; rt = in_string1 })]. ((length(convert({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }, { elts = in_string; rt = in_string1 })) = elements({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })) and dynamic_property(1, 2147483647, to_rep1(first((convert({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }, { elts = in_string; rt = in_string1 })).rt)),
  to_rep1(last((convert({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }, { elts = in_string; rt =
  in_string1 })).rt))))))

axiom convert__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int.
  (forall in_string:(int,character) farray. forall in_string1:t
  [convert1(attr__tag1, { us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }, { elts = in_string; rt =
  in_string1 })]. dynamic_property(1, 2147483647,
  to_rep1(first((convert1(attr__tag1, { us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }, { elts = in_string; rt =
  in_string1 })).rt)), to_rep1(last((convert1(attr__tag1, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }, { elts = in_string; rt = in_string1 })).rt))))))

axiom fixed_string__object__compat_axiom3 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int.
  (forall in_string:(int,character) farray. forall in_string1:t
  [convert1(us_tag, { us_split_fields1 = { rec__fixed_string__object__width =
  this; rec__fixed_string__object__name = this1; rec__ext__ = this2 };
  attr__tag = this3 }, { elts = in_string; rt = in_string1 })]. (convert({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }, { elts = in_string; rt = in_string1 }) = convert1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }, { elts = in_string; rt = in_string1 }))))

logic dummy17 : (int,character) farray

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

logic user_eq12 : (int,character) farray, (int,character) farray -> bool

type us_split_fields2 = { rec__fixed_stream__object__width : natural;
rec__fixed_stream__object__name : (int,character) farray; rec__ext__1 :
us_private
}

function us_split_fields_Width__2__projection(a: us_split_fields2) : natural =
  (a).rec__fixed_stream__object__width

function us_split_fields_Name__2__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__fixed_stream__object__name

function us_split_fields___3__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___6__projection(a: us_rep1) : int = (a).attr__tag1

logic bool_eq15 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq15(a, b)].
  ((((to_rep4(((a).us_split_fields3).rec__fixed_stream__object__width) = to_rep4(((b).us_split_fields3).rec__fixed_stream__object__width)) and
  (bool_eq4(((a).us_split_fields3).rec__fixed_stream__object__name, 1, 20,
  ((b).us_split_fields3).rec__fixed_stream__object__name, 1, 20) = true)) ->
  (bool_eq15(a, b) = true)) and
  ((not ((to_rep4(((a).us_split_fields3).rec__fixed_stream__object__width) = to_rep4(((b).us_split_fields3).rec__fixed_stream__object__width)) and
  (bool_eq4(((a).us_split_fields3).rec__fixed_stream__object__name, 1, 20,
  ((b).us_split_fields3).rec__fixed_stream__object__name, 1, 20) = true))) ->
  (bool_eq15(a, b) = false))))

logic us_dispatch_eq1 : us_rep1, us_rep1 -> bool

logic us_tag1 : int

logic value__size5 : int

logic object__size5 : us_rep1 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep1 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:natural. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__size5({ us_split_fields3 = {
  rec__fixed_stream__object__width = a; rec__fixed_stream__object__name = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:natural. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__alignment5({ us_split_fields3 = {
  rec__fixed_stream__object__width = a; rec__fixed_stream__object__name = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic fixed_stream__object__width__first__bit : int

logic fixed_stream__object__width__last__bit : int

logic fixed_stream__object__width__position : int

axiom fixed_stream__object__width__first__bit_axiom :
  (0 <= fixed_stream__object__width__first__bit)

axiom fixed_stream__object__width__last__bit_axiom :
  (fixed_stream__object__width__first__bit <  fixed_stream__object__width__last__bit)

axiom fixed_stream__object__width__position_axiom :
  (0 <= fixed_stream__object__width__position)

logic fixed_stream__object__name__first__bit : int

logic fixed_stream__object__name__last__bit : int

logic fixed_stream__object__name__position : int

axiom fixed_stream__object__name__first__bit_axiom :
  (0 <= fixed_stream__object__name__first__bit)

axiom fixed_stream__object__name__last__bit_axiom :
  (fixed_stream__object__name__first__bit <  fixed_stream__object__name__last__bit)

axiom fixed_stream__object__name__position_axiom :
  (0 <= fixed_stream__object__name__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy18 : natural

logic dummy19 : (int,character) farray

logic dummy20 : us_private

logic dummy21 : int

type object__ref1 = { object__content1 : us_rep1
}

function object__ref___2__projection(a: object__ref1) : us_rep1 =
  (a).object__content1

logic temp___231 : int -> (int,character) farray

logic elements2 : us_rep1 -> int

logic elements__function_guard2 : int, us_rep1 -> prop

logic elements3 : int, us_rep1 -> int

logic elements__function_guard3 : int, int, us_rep1 -> prop

axiom elements__post_axiom1 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 })]. in_range4(elements2({
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })))

axiom elements__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements3(attr__tag2, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })]. in_range4(elements3(attr__tag2, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 }))))

axiom fixed_stream__object__compat_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements3(us_tag1, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })]. (elements2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }) = elements3(us_tag1, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })))

logic create2 : int, us_t -> us_rep1

logic create__function_guard2 : us_rep1, int, us_t -> prop

logic create3 : int, int, us_t -> us_rep1

logic create__function_guard3 : us_rep1, int, int, us_t -> prop

axiom create__post_axiom1 :
  (forall elem_width:int.
  (forall name:(int,character) farray. forall name1:t [create2(elem_width, {
  elts = name; rt = name1 })]. (in_range4(elem_width) ->
  ((elements2(create2(elem_width, { elts = name; rt = name1
  })) = elem_width) and ((create2(elem_width, { elts = name; rt = name1
  })).attr__tag1 = us_tag1)))))

axiom create__post__dispatch_axiom1 :
  (forall attr__tag2:int. forall elem_width:int.
  (forall name:(int,character) farray. forall name1:t [create3(attr__tag2,
  elem_width, { elts = name; rt = name1 })]. (in_range4(elem_width) ->
  ((create3(attr__tag2, elem_width, { elts = name; rt = name1
  })).attr__tag1 = attr__tag2))))

axiom fixed_stream__object__compat_axiom1 :
  (forall elem_width:int.
  (forall name:(int,character) farray. forall name1:t [create3(us_tag1,
  elem_width, { elts = name; rt = name1 })]. (create2(elem_width, { elts =
  name; rt = name1 }) = create3(us_tag1, elem_width, { elts = name; rt =
  name1 }))))

logic null_string2 : us_rep1 -> us_t1

logic null_string__function_guard2 : us_t1, us_rep1 -> prop

logic null_string3 : int, us_rep1 -> us_t1

logic null_string__function_guard3 : us_t1, int, us_rep1 -> prop

axiom null_string__post_axiom1 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [null_string2({
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })]. ((length1(null_string2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 })) = elements2({
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })) and dynamic_property1((- 9223372036854775808),
  9223372036854775807, to_rep2(first2((null_string2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 })).rt1)),
  to_rep2(last2((null_string2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 })).rt1)))))

axiom null_string__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [null_string3(attr__tag2, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })]. dynamic_property1((- 9223372036854775808),
  9223372036854775807, to_rep2(first2((null_string3(attr__tag2, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })).rt1)), to_rep2(last2((null_string3(attr__tag2, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })).rt1)))))

axiom fixed_stream__object__compat_axiom2 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [null_string3(us_tag1, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })]. (null_string2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }) = null_string3(us_tag1,
  { us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 })))

logic convert2 : us_rep1, us_t -> us_t1

logic convert__function_guard2 : us_t1, us_rep1, us_t -> prop

logic convert3 : int, us_rep1, us_t -> us_t1

logic convert__function_guard3 : us_t1, int, us_rep1, us_t -> prop

axiom convert__post_axiom1 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int.
  (forall in_string:(int,character) farray. forall in_string1:t [convert2({
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 }, { elts = in_string; rt = in_string1 })].
  ((length1(convert2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 })) = elements2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 })) and
  dynamic_property1((- 9223372036854775808), 9223372036854775807,
  to_rep2(first2((convert2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 })).rt1)), to_rep2(last2((convert2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 })).rt1))))))

axiom convert__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int.
  (forall in_string:(int,character) farray. forall in_string1:t
  [convert3(attr__tag2, { us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 })]. dynamic_property1((- 9223372036854775808),
  9223372036854775807, to_rep2(first2((convert3(attr__tag2, {
  us_split_fields3 = { rec__fixed_stream__object__width = this;
  rec__fixed_stream__object__name = this1; rec__ext__1 = this2 };
  attr__tag1 = this3 }, { elts = in_string; rt = in_string1 })).rt1)),
  to_rep2(last2((convert3(attr__tag2, { us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 })).rt1))))))

axiom fixed_stream__object__compat_axiom3 :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int.
  (forall in_string:(int,character) farray. forall in_string1:t
  [convert3(us_tag1, { us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 })]. (convert2({ us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 }) = convert3(us_tag1, { us_split_fields3 = {
  rec__fixed_stream__object__width = this; rec__fixed_stream__object__name =
  this1; rec__ext__1 = this2 }; attr__tag1 = this3 }, { elts = in_string;
  rt = in_string1 }))))

logic field_10__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic field_06__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic stream_10__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic stream_06__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic ref_string__first : integer

logic ref_string__last : integer

logic attr__ATTRIBUTE_ADDRESS4 : int

logic short_string__first : integer

logic short_string__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic total_string__first : integer

logic total_string__last : integer

logic attr__ATTRIBUTE_ADDRESS10 : int

logic total_stream__first : tstream_element_offsetB

logic total_stream__last : tstream_element_offsetB

logic attr__ATTRIBUTE_ADDRESS11 : int

logic temp___String_Literal_296 : unit -> (int,character) farray

axiom temp___String_Literal_296__def_axiom :
  ((((to_rep((temp___String_Literal_296(void)[1])) = 76) and
  (to_rep((temp___String_Literal_296(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_296(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_296(void)[4])) = 103))

logic temp___String_Literal_297 : unit -> (int,character) farray

axiom temp___String_Literal_297__def_axiom :
  (((((to_rep((temp___String_Literal_297(void)[1])) = 83) and
  (to_rep((temp___String_Literal_297(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_297(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_297(void)[4])) = 114)) and
  (to_rep((temp___String_Literal_297(void)[5])) = 116))

logic temp___String_Literal_298 : unit -> (int,character) farray

axiom temp___String_Literal_298__def_axiom :
  ((((to_rep((temp___String_Literal_298(void)[1])) = 76) and
  (to_rep((temp___String_Literal_298(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_298(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_298(void)[4])) = 103))

logic temp___String_Literal_299 : unit -> (int,character) farray

axiom temp___String_Literal_299__def_axiom :
  (((((to_rep((temp___String_Literal_299(void)[1])) = 83) and
  (to_rep((temp___String_Literal_299(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_299(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_299(void)[4])) = 114)) and
  (to_rep((temp___String_Literal_299(void)[5])) = 116))

logic temp___String_Literal_300 : unit -> (int,character) farray

axiom temp___String_Literal_300__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_300(void)[1])) = 97) and
  (to_rep((temp___String_Literal_300(void)[2])) = 98)) and
  (to_rep((temp___String_Literal_300(void)[3])) = 99)) and
  (to_rep((temp___String_Literal_300(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_300(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_300(void)[6])) = 102)) and
  (to_rep((temp___String_Literal_300(void)[7])) = 103)) and
  (to_rep((temp___String_Literal_300(void)[8])) = 104)) and
  (to_rep((temp___String_Literal_300(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_300(void)[10])) = 106)) and
  (to_rep((temp___String_Literal_300(void)[11])) = 107)) and
  (to_rep((temp___String_Literal_300(void)[12])) = 108))

logic temp___String_Literal_302 : unit -> (int,character) farray

axiom temp___String_Literal_302__def_axiom :
  (((to_rep((temp___String_Literal_302(void)[1])) = 102) and
  (to_rep((temp___String_Literal_302(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_302(void)[3])) = 111))

axiom def_axiom :
  (forall temp___204:int. (in_range2(temp___204) ->
  (forall temp___205:int.
  (to_rep((temp___202(temp___204)[temp___205])) = temp___204))))

axiom def_axiom1 :
  (forall temp___233:int. (in_range2(temp___233) ->
  (forall temp___234:int.
  (to_rep((temp___231(temp___233)[temp___234])) = temp___233))))

 (* File "main_test.adb", line 8, characters 0-0 *)
goal WP_parameter_def :
  (forall field_10__split_fields:natural.
  forall field_10__split_fields1:(int,character) farray.
  forall field_10__split_fields2:us_private.
  forall field_06__split_fields:natural.
  forall field_06__split_fields1:(int,character) farray.
  forall field_06__split_fields2:us_private.
  forall stream_10__split_fields:natural.
  forall stream_10__split_fields1:(int,character) farray.
  forall stream_10__split_fields2:us_private.
  forall stream_06__split_fields:natural.
  forall stream_06__split_fields1:(int,character) farray.
  forall stream_06__split_fields2:us_private.
  forall ref_string:(int,character) farray.
  forall short_string:(int,character) farray. forall len_n:int.
  forall len_i:int. forall len_l:int. forall total_len:int.
  forall total_string:(int,character) farray.
  forall total_stream:(int,stream_element) farray.
  forall main_test__field_10__assume:natural.
  forall main_test__field_10__assume1:(int,character) farray.
  forall main_test__field_10__assume2:us_private.
  forall main_test__field_10__assume3:int.
  forall main_test__field_06__assume:natural.
  forall main_test__field_06__assume1:(int,character) farray.
  forall main_test__field_06__assume2:us_private.
  forall main_test__field_06__assume3:int.
  forall main_test__stream_10__assume:natural.
  forall main_test__stream_10__assume1:(int,character) farray.
  forall main_test__stream_10__assume2:us_private.
  forall main_test__stream_10__assume3:int.
  forall main_test__stream_06__assume:natural.
  forall main_test__stream_06__assume1:(int,character) farray.
  forall main_test__stream_06__assume2:us_private.
  forall main_test__stream_06__assume3:int.
  forall temp___305:(int,character) farray. forall temp___3051:t.
  forall temp___304:(int,character) farray. forall temp___3041:t.
  forall o:int. forall o1:int. forall o2:int. forall o3:int. forall o4:int.
  forall o5:int.
  forall main_test__total_string__assume:(int,character) farray.
  forall main_test__total_string__assume1:t.
  forall temp___308:(int,stream_element) farray. forall temp___3081:t2.
  forall temp___307:(int,stream_element) farray. forall temp___3071:t2.
  forall o6:int. forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int.
  forall main_test__total_stream__assume:(int,stream_element) farray.
  forall main_test__total_stream__assume1:t2. forall o12:int. forall o13:int.
  forall o14:int. forall o15:int. forall o16:int. forall o17:int.
  forall o18:int. forall o19:int. forall o20:int. forall o21:int.
  forall o22:int. forall o23:int. forall o24:int. forall o25:int.
  forall o26:int. forall temp___311:(int,character) farray.
  forall temp___3111:t. forall temp___310:(int,character) farray.
  forall temp___3101:t. forall o27:int. forall o28:int. forall o29:int.
  forall o30:int. forall o31:int. forall o32:int.
  forall temp___312:(int,character) farray. forall temp___3121:t.
  forall o33:(int,character) farray. forall o34:t.
  forall o35:(int,character) farray. forall o36:int. forall o37:int.
  forall o38:int. forall o39:int.
  forall temp___314:(int,stream_element) farray. forall temp___3141:t2.
  forall temp___313:(int,stream_element) farray. forall temp___3131:t2.
  forall o40:int. forall o41:int. forall o42:int. forall o43:int.
  forall o44:int. forall result:natural.
  forall result1:(int,character) farray. forall result2:us_private.
  forall field_10__split_fields3:natural.
  forall field_10__split_fields4:(int,character) farray.
  forall field_10__split_fields5:us_private. forall result3:natural.
  forall result4:(int,character) farray. forall result5:us_private.
  forall field_06__split_fields3:us_split_fields.
  forall result6:us_split_fields__ref1.
  forall stream_10__split_fields3:us_split_fields2.
  forall result7:us_split_fields__ref1.
  forall stream_06__split_fields3:us_split_fields2. forall result8:map__ref.
  forall ref_string1:(int,character) farray. forall result9:map__ref.
  forall short_string1:(int,character) farray. forall result10:map__ref.
  forall total_string1:(int,character) farray. forall result11:map__ref1.
  forall total_stream1:(int,stream_element) farray. forall result12:int__ref.
  forall len_n1:int. forall result13:int__ref. forall len_i1:int.
  forall result14:int__ref. forall len_l1:int. forall result15:int__ref.
  forall len_n2:int. forall result16:int__ref. forall len_i2:int.
  forall result17:int__ref. forall len_l2:int. forall result18:int__ref.
  forall total_len1:int. forall result19:map__ref.
  forall total_string2:(int,character) farray. forall result20:int__ref.
  forall total_len2:int. (((({ us_split_fields1 = {
  rec__fixed_string__object__width = main_test__field_10__assume;
  rec__fixed_string__object__name = main_test__field_10__assume1;
  rec__ext__ = main_test__field_10__assume2 }; attr__tag =
  main_test__field_10__assume3 } = create(10, { elts =
  temp___String_Literal_296(void); rt = mk(1, 4) })) and (elements({
  us_split_fields1 = { rec__fixed_string__object__width =
  main_test__field_10__assume; rec__fixed_string__object__name =
  main_test__field_10__assume1; rec__ext__ = main_test__field_10__assume2 };
  attr__tag = main_test__field_10__assume3 }) = 10)) and
  ((((result = field_10__split_fields) and
  ((result1 = field_10__split_fields1) and
  (result2 = field_10__split_fields2))) and
  ((main_test__field_10__assume = field_10__split_fields3) and
  ((main_test__field_10__assume1 = field_10__split_fields4) and
  (main_test__field_10__assume2 = field_10__split_fields5)))) and
  (field_10__attr__tag = us_tag))) -> (((({ us_split_fields1 = {
  rec__fixed_string__object__width = main_test__field_06__assume;
  rec__fixed_string__object__name = main_test__field_06__assume1;
  rec__ext__ = main_test__field_06__assume2 }; attr__tag =
  main_test__field_06__assume3 } = create(6, { elts =
  temp___String_Literal_297(void); rt = mk(1, 5) })) and (elements({
  us_split_fields1 = { rec__fixed_string__object__width =
  main_test__field_06__assume; rec__fixed_string__object__name =
  main_test__field_06__assume1; rec__ext__ = main_test__field_06__assume2 };
  attr__tag = main_test__field_06__assume3 }) = 6)) and
  ((((result3 = field_06__split_fields) and
  ((result4 = field_06__split_fields1) and
  (result5 = field_06__split_fields2))) and (field_06__split_fields3 = {
  rec__fixed_string__object__width = main_test__field_06__assume;
  rec__fixed_string__object__name = main_test__field_06__assume1;
  rec__ext__ = main_test__field_06__assume2 })) and
  (field_06__attr__tag = us_tag))) -> (((({ us_split_fields3 = {
  rec__fixed_stream__object__width = main_test__stream_10__assume;
  rec__fixed_stream__object__name = main_test__stream_10__assume1;
  rec__ext__1 = main_test__stream_10__assume2 }; attr__tag1 =
  main_test__stream_10__assume3 } = create2(10, { elts =
  temp___String_Literal_298(void); rt = mk(1, 4) })) and (elements2({
  us_split_fields3 = { rec__fixed_stream__object__width =
  main_test__stream_10__assume; rec__fixed_stream__object__name =
  main_test__stream_10__assume1; rec__ext__1 = main_test__stream_10__assume2
  }; attr__tag1 = main_test__stream_10__assume3 }) = 10)) and (((result6 = {
  us_split_fields__content1 = { rec__fixed_stream__object__width =
  stream_10__split_fields; rec__fixed_stream__object__name =
  stream_10__split_fields1; rec__ext__1 = stream_10__split_fields2 } }) and
  (stream_10__split_fields3 = { rec__fixed_stream__object__width =
  main_test__stream_10__assume; rec__fixed_stream__object__name =
  main_test__stream_10__assume1; rec__ext__1 = main_test__stream_10__assume2
  })) and (stream_10__attr__tag = us_tag1))) -> (((({ us_split_fields3 = {
  rec__fixed_stream__object__width = main_test__stream_06__assume;
  rec__fixed_stream__object__name = main_test__stream_06__assume1;
  rec__ext__1 = main_test__stream_06__assume2 }; attr__tag1 =
  main_test__stream_06__assume3 } = create2(6, { elts =
  temp___String_Literal_299(void); rt = mk(1, 5) })) and (elements2({
  us_split_fields3 = { rec__fixed_stream__object__width =
  main_test__stream_06__assume; rec__fixed_stream__object__name =
  main_test__stream_06__assume1; rec__ext__1 = main_test__stream_06__assume2
  }; attr__tag1 = main_test__stream_06__assume3 }) = 6)) and (((result7 = {
  us_split_fields__content1 = { rec__fixed_stream__object__width =
  stream_06__split_fields; rec__fixed_stream__object__name =
  stream_06__split_fields1; rec__ext__1 = stream_06__split_fields2 } }) and
  (stream_06__split_fields3 = { rec__fixed_stream__object__width =
  main_test__stream_06__assume; rec__fixed_stream__object__name =
  main_test__stream_06__assume1; rec__ext__1 = main_test__stream_06__assume2
  })) and (stream_06__attr__tag = us_tag1))) -> ((((result8 = {
  map__content = ref_string }) and
  (ref_string1 = temp___String_Literal_300(void))) and
  ((to_rep1(ref_string__first) = to_rep1(first(mk(1, 12)))) and
  (to_rep1(ref_string__last) = to_rep1(last(mk(1, 12)))))) ->
  (dynamic_property(1, 2147483647, to_rep1(ref_string__first),
  to_rep1(ref_string__last)) -> ((((result9 = { map__content = short_string
  }) and (short_string1 = temp___String_Literal_302(void))) and
  ((to_rep1(short_string__first) = to_rep1(first(mk(1, 3)))) and
  (to_rep1(short_string__last) = to_rep1(last(mk(1, 3)))))) ->
  (dynamic_property(1, 2147483647, to_rep1(short_string__first),
  to_rep1(short_string__last)) -> (((0 <= 2147483647) -> in_range4(len_n)) ->
  ((((- 2147483648) <= 2147483647) -> in_range(len_i)) ->
  ((((- 9223372036854775808) <= 9223372036854775807) -> in_range3(len_l)) ->
  (((0 <= 2147483647) -> in_range4(total_len)) -> ((((({ elts = temp___305;
  rt = temp___3051 } = null_string({ us_split_fields1 =
  field_06__split_fields3; attr__tag = field_06__attr__tag })) and
  (dynamic_property(1, 2147483647, to_rep1(first(temp___3051)),
  to_rep1(last(temp___3051))) and (length({ elts = temp___305; rt =
  temp___3051 }) = elements({ us_split_fields1 = field_06__split_fields3;
  attr__tag = field_06__attr__tag })))) and ((({ elts = temp___304; rt =
  temp___3041 } = null_string({ us_split_fields1 = {
  rec__fixed_string__object__width = field_10__split_fields3;
  rec__fixed_string__object__name = field_10__split_fields4; rec__ext__ =
  field_10__split_fields5 }; attr__tag = field_10__attr__tag })) and
  (dynamic_property(1, 2147483647, to_rep1(first(temp___3041)),
  to_rep1(last(temp___3041))) and (length({ elts = temp___304; rt =
  temp___3041 }) = elements({ us_split_fields1 = {
  rec__fixed_string__object__width = field_10__split_fields3;
  rec__fixed_string__object__name = field_10__split_fields4; rec__ext__ =
  field_10__split_fields5 }; attr__tag = field_10__attr__tag })))) and
  (((length({ elts = temp___304; rt = temp___3041 }) = 0) and
  ((temp___305 = main_test__total_string__assume) and
  (mk(to_rep1(first(temp___3051)),
  to_rep1(last(temp___3051))) = main_test__total_string__assume1))) or
  ((not (length({ elts = temp___304; rt = temp___3041 }) = 0)) and
  ((((((((to_rep1(first(temp___3051)) <= to_rep1(last(temp___3051))) and
  (o = ((to_rep1(last(temp___3051)) - to_rep1(first(temp___3051))) + 1))) or
  ((not (to_rep1(first(temp___3051)) <= to_rep1(last(temp___3051)))) and
  (o = 0))) and
  ((((to_rep1(first(temp___3041)) <= to_rep1(last(temp___3041))) and
  (o1 = ((to_rep1(last(temp___3041)) - to_rep1(first(temp___3041))) + 1))) or
  ((not (to_rep1(first(temp___3041)) <= to_rep1(last(temp___3041)))) and
  (o1 = 0))) and (o2 = (o1 + o)))) and
  (o3 = (to_rep1(first(temp___3041)) + o2))) and (o4 = (o3 - 1))) and
  ((o5 = o4) and in_range1(o4))) and ((concat(temp___304,
  to_rep1(first(temp___3041)), to_rep1(last(temp___3041)), temp___305,
  to_rep1(first(temp___3051)),
  to_rep1(last(temp___3051))) = main_test__total_string__assume) and
  (mk(to_rep1(first(temp___3041)),
  o5) = main_test__total_string__assume1))))))) and (((result10 = {
  map__content = total_string }) and
  (total_string1 = main_test__total_string__assume)) and
  ((to_rep1(total_string__first) = to_rep1(first(main_test__total_string__assume1))) and
  (to_rep1(total_string__last) = to_rep1(last(main_test__total_string__assume1)))))) ->
  (dynamic_property(1, 2147483647, to_rep1(total_string__first),
  to_rep1(total_string__last)) -> ((((({ elts1 = temp___308; rt1 =
  temp___3081 } = null_string2({ us_split_fields3 = stream_06__split_fields3;
  attr__tag1 = stream_06__attr__tag })) and
  (dynamic_property1((- 9223372036854775808), 9223372036854775807,
  to_rep2(first2(temp___3081)), to_rep2(last2(temp___3081))) and (length1({
  elts1 = temp___308; rt1 = temp___3081 }) = elements2({ us_split_fields3 =
  stream_06__split_fields3; attr__tag1 = stream_06__attr__tag })))) and ((({
  elts1 = temp___307; rt1 = temp___3071 } = null_string2({ us_split_fields3 =
  stream_10__split_fields3; attr__tag1 = stream_10__attr__tag })) and
  (dynamic_property1((- 9223372036854775808), 9223372036854775807,
  to_rep2(first2(temp___3071)), to_rep2(last2(temp___3071))) and (length1({
  elts1 = temp___307; rt1 = temp___3071 }) = elements2({ us_split_fields3 =
  stream_10__split_fields3; attr__tag1 = stream_10__attr__tag })))) and
  (((length1({ elts1 = temp___307; rt1 = temp___3071 }) = 0) and
  ((temp___308 = main_test__total_stream__assume) and
  (mk1(to_rep2(first2(temp___3081)),
  to_rep2(last2(temp___3081))) = main_test__total_stream__assume1))) or
  ((not (length1({ elts1 = temp___307; rt1 = temp___3071 }) = 0)) and
  ((((((((to_rep2(first2(temp___3081)) <= to_rep2(last2(temp___3081))) and
  (o6 = ((to_rep2(last2(temp___3081)) - to_rep2(first2(temp___3081))) + 1))) or
  ((not (to_rep2(first2(temp___3081)) <= to_rep2(last2(temp___3081)))) and
  (o6 = 0))) and
  ((((to_rep2(first2(temp___3071)) <= to_rep2(last2(temp___3071))) and
  (o7 = ((to_rep2(last2(temp___3071)) - to_rep2(first2(temp___3071))) + 1))) or
  ((not (to_rep2(first2(temp___3071)) <= to_rep2(last2(temp___3071)))) and
  (o7 = 0))) and (o8 = (o7 + o6)))) and
  (o9 = (to_rep2(first2(temp___3071)) + o8))) and (o10 = (o9 - 1))) and
  ((o11 = o10) and in_range6(o10))) and ((concat1(temp___307,
  to_rep2(first2(temp___3071)), to_rep2(last2(temp___3071)), temp___308,
  to_rep2(first2(temp___3081)),
  to_rep2(last2(temp___3081))) = main_test__total_stream__assume) and
  (mk1(to_rep2(first2(temp___3071)),
  o11) = main_test__total_stream__assume1))))))) and (((result11 = {
  map__content1 = total_stream }) and
  (total_stream1 = main_test__total_stream__assume)) and
  ((to_rep2(total_stream__first) = to_rep2(first2(main_test__total_stream__assume1))) and
  (to_rep2(total_stream__last) = to_rep2(last2(main_test__total_stream__assume1)))))) ->
  (dynamic_property1((- 9223372036854775808), 9223372036854775807,
  to_rep2(total_stream__first), to_rep2(total_stream__last)) -> ((elements({
  us_split_fields1 = { rec__fixed_string__object__width =
  field_10__split_fields3; rec__fixed_string__object__name =
  field_10__split_fields4; rec__ext__ = field_10__split_fields5 };
  attr__tag = field_10__attr__tag }) = 10) -> ((elements({ us_split_fields1 =
  field_06__split_fields3; attr__tag = field_06__attr__tag }) = 6) ->
  ((((((to_rep2(total_stream__first) <= to_rep2(total_stream__last)) and
  (o12 = ((to_rep2(total_stream__last) - to_rep2(total_stream__first)) + 1))) or
  ((not (to_rep2(total_stream__first) <= to_rep2(total_stream__last))) and
  (o12 = 0))) and ((o13 = o12) and in_range4(o12))) and ((result12 = {
  int__content = len_n }) and (len_n1 = o13))) ->
  ((((((to_rep2(total_stream__first) <= to_rep2(total_stream__last)) and
  (o14 = ((to_rep2(total_stream__last) - to_rep2(total_stream__first)) + 1))) or
  ((not (to_rep2(total_stream__first) <= to_rep2(total_stream__last))) and
  (o14 = 0))) and ((o15 = o14) and in_range(o14))) and ((result13 = {
  int__content = len_i }) and (len_i1 = o15))) ->
  ((((((to_rep2(total_stream__first) <= to_rep2(total_stream__last)) and
  (o16 = ((to_rep2(total_stream__last) - to_rep2(total_stream__first)) + 1))) or
  ((not (to_rep2(total_stream__first) <= to_rep2(total_stream__last))) and
  (o16 = 0))) and ((o17 = o16) and in_range3(o16))) and ((result14 = {
  int__content = len_l }) and (len_l1 = o17))) ->
  ((((((to_rep1(total_string__first) <= to_rep1(total_string__last)) and
  (o18 = ((to_rep1(total_string__last) - to_rep1(total_string__first)) + 1))) or
  ((not (to_rep1(total_string__first) <= to_rep1(total_string__last))) and
  (o18 = 0))) and ((o19 = o18) and in_range4(o18))) and ((result15 = {
  int__content = len_n1 }) and (len_n2 = o19))) ->
  ((((((to_rep1(total_string__first) <= to_rep1(total_string__last)) and
  (o20 = ((to_rep1(total_string__last) - to_rep1(total_string__first)) + 1))) or
  ((not (to_rep1(total_string__first) <= to_rep1(total_string__last))) and
  (o20 = 0))) and ((o21 = o20) and in_range(o20))) and ((result16 = {
  int__content = len_i1 }) and (len_i2 = o21))) ->
  (((((to_rep1(total_string__first) <= to_rep1(total_string__last)) and
  (o22 = ((to_rep1(total_string__last) - to_rep1(total_string__first)) + 1))) or
  ((not (to_rep1(total_string__first) <= to_rep1(total_string__last))) and
  (o22 = 0))) and ((result17 = { int__content = len_l1 }) and
  (len_l2 = o22))) -> ((((((o23 = elements({ us_split_fields1 =
  field_06__split_fields3; attr__tag = field_06__attr__tag })) and
  in_range4(o23)) and (((o24 = elements({ us_split_fields1 = {
  rec__fixed_string__object__width = field_10__split_fields3;
  rec__fixed_string__object__name = field_10__split_fields4; rec__ext__ =
  field_10__split_fields5 }; attr__tag = field_10__attr__tag })) and
  in_range4(o24)) and (o25 = (o24 + o23)))) and ((o26 = o25) and
  in_range(o25))) and ((result18 = { int__content = total_len }) and
  (total_len1 = o26))) -> ((((((({ elts = temp___311; rt = temp___3111
  } = convert({ us_split_fields1 = field_06__split_fields3; attr__tag =
  field_06__attr__tag }, { elts = short_string1; rt =
  mk(to_rep1(short_string__first), to_rep1(short_string__last)) })) and
  (dynamic_property(1, 2147483647, to_rep1(first(temp___3111)),
  to_rep1(last(temp___3111))) and (length({ elts = temp___311; rt =
  temp___3111 }) = elements({ us_split_fields1 = field_06__split_fields3;
  attr__tag = field_06__attr__tag })))) and ((({ elts = temp___310; rt =
  temp___3101 } = convert({ us_split_fields1 = {
  rec__fixed_string__object__width = field_10__split_fields3;
  rec__fixed_string__object__name = field_10__split_fields4; rec__ext__ =
  field_10__split_fields5 }; attr__tag = field_10__attr__tag }, { elts =
  ref_string1; rt = mk(to_rep1(ref_string__first), to_rep1(ref_string__last))
  })) and (dynamic_property(1, 2147483647, to_rep1(first(temp___3101)),
  to_rep1(last(temp___3101))) and (length({ elts = temp___310; rt =
  temp___3101 }) = elements({ us_split_fields1 = {
  rec__fixed_string__object__width = field_10__split_fields3;
  rec__fixed_string__object__name = field_10__split_fields4; rec__ext__ =
  field_10__split_fields5 }; attr__tag = field_10__attr__tag })))) and
  (((length({ elts = temp___310; rt = temp___3101 }) = 0) and
  ((temp___311 = temp___312) and (mk(to_rep1(first(temp___3111)),
  to_rep1(last(temp___3111))) = temp___3121))) or ((not (length({ elts =
  temp___310; rt = temp___3101 }) = 0)) and
  ((((((((to_rep1(first(temp___3111)) <= to_rep1(last(temp___3111))) and
  (o27 = ((to_rep1(last(temp___3111)) - to_rep1(first(temp___3111))) + 1))) or
  ((not (to_rep1(first(temp___3111)) <= to_rep1(last(temp___3111)))) and
  (o27 = 0))) and
  ((((to_rep1(first(temp___3101)) <= to_rep1(last(temp___3101))) and
  (o28 = ((to_rep1(last(temp___3101)) - to_rep1(first(temp___3101))) + 1))) or
  ((not (to_rep1(first(temp___3101)) <= to_rep1(last(temp___3101)))) and
  (o28 = 0))) and (o29 = (o28 + o27)))) and
  (o30 = (to_rep1(first(temp___3101)) + o29))) and (o31 = (o30 - 1))) and
  ((o32 = o31) and in_range1(o31))) and ((concat(temp___310,
  to_rep1(first(temp___3101)), to_rep1(last(temp___3101)), temp___311,
  to_rep1(first(temp___3111)), to_rep1(last(temp___3111))) = temp___312) and
  (mk(to_rep1(first(temp___3101)), o32) = temp___3121))))))) and
  ((((to_rep1(first(temp___3121)) <= to_rep1(last(temp___3121))) and
  (((to_rep1(total_string__first) <= to_rep1(total_string__last)) and
  (((to_rep1(last(temp___3121)) - to_rep1(first(temp___3121))) + 1) = ((to_rep1(total_string__last) - to_rep1(total_string__first)) + 1))) or
  ((not (to_rep1(total_string__first) <= to_rep1(total_string__last))) and
  (((to_rep1(last(temp___3121)) - to_rep1(first(temp___3121))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___3121)) <= to_rep1(last(temp___3121)))) and
  (((to_rep1(total_string__first) <= to_rep1(total_string__last)) and
  (0 = ((to_rep1(total_string__last) - to_rep1(total_string__first)) + 1))) or
  (not (to_rep1(total_string__first) <= to_rep1(total_string__last)))))) and
  ({ elts = o33; rt = o34 } = { elts = temp___312; rt = temp___3121 }))) and
  (o35 = o33)) and ((result19 = { map__content = total_string1 }) and
  (total_string2 = o35))) ->
  ((((to_rep1(total_string__first) <= to_rep1(total_string__last)) and
  (((to_rep1(total_string__last) - to_rep1(total_string__first)) + 1) = total_len1)) or
  ((not (to_rep1(total_string__first) <= to_rep1(total_string__last))) and
  (0 = total_len1))) -> ((((((o36 = elements2({ us_split_fields3 =
  stream_06__split_fields3; attr__tag1 = stream_06__attr__tag })) and
  in_range4(o36)) and (((o37 = elements2({ us_split_fields3 =
  stream_10__split_fields3; attr__tag1 = stream_10__attr__tag })) and
  in_range4(o37)) and (o38 = (o37 + o36)))) and ((o39 = o38) and
  in_range(o38))) and ((result20 = { int__content = total_len1 }) and
  (total_len2 = o39))) -> ((({ elts1 = temp___314; rt1 = temp___3141
  } = convert2({ us_split_fields3 = stream_06__split_fields3; attr__tag1 =
  stream_06__attr__tag }, { elts = short_string1; rt =
  mk(to_rep1(short_string__first), to_rep1(short_string__last)) })) and
  (dynamic_property1((- 9223372036854775808), 9223372036854775807,
  to_rep2(first2(temp___3141)), to_rep2(last2(temp___3141))) and (length1({
  elts1 = temp___314; rt1 = temp___3141 }) = elements2({ us_split_fields3 =
  stream_06__split_fields3; attr__tag1 = stream_06__attr__tag })))) -> ((({
  elts1 = temp___313; rt1 = temp___3131 } = convert2({ us_split_fields3 =
  stream_10__split_fields3; attr__tag1 = stream_10__attr__tag }, { elts =
  ref_string1; rt = mk(to_rep1(ref_string__first), to_rep1(ref_string__last))
  })) and (dynamic_property1((- 9223372036854775808), 9223372036854775807,
  to_rep2(first2(temp___3131)), to_rep2(last2(temp___3131))) and (length1({
  elts1 = temp___313; rt1 = temp___3131 }) = elements2({ us_split_fields3 =
  stream_10__split_fields3; attr__tag1 = stream_10__attr__tag })))) ->
  ((not (length1({ elts1 = temp___313; rt1 = temp___3131 }) = 0)) ->
  (((((((to_rep2(first2(temp___3141)) <= to_rep2(last2(temp___3141))) and
  (o40 = ((to_rep2(last2(temp___3141)) - to_rep2(first2(temp___3141))) + 1))) or
  ((not (to_rep2(first2(temp___3141)) <= to_rep2(last2(temp___3141)))) and
  (o40 = 0))) and
  ((((to_rep2(first2(temp___3131)) <= to_rep2(last2(temp___3131))) and
  (o41 = ((to_rep2(last2(temp___3131)) - to_rep2(first2(temp___3131))) + 1))) or
  ((not (to_rep2(first2(temp___3131)) <= to_rep2(last2(temp___3131)))) and
  (o41 = 0))) and (o42 = (o41 + o40)))) and
  (o43 = (to_rep2(first2(temp___3131)) + o42))) and (o44 = (o43 - 1))) ->
  in_range6(o44))))))))))))))))))))))))))))))))))
