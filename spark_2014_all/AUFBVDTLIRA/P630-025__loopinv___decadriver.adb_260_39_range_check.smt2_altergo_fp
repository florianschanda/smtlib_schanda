(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(65536 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  32)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (32 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 32))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 32))))))

logic is_signed_positive2 : t2 -> prop

logic of_int2 : int -> t2

logic to_int2 : t2 -> int

axiom to_int_def2 :
  (forall x:t2 [to_int2(x)]. ((is_signed_positive2(x) ->
  (to_int2(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int2(x) = (-(4294967296 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

predicate sle2(v1: t2, v2: t2) = (to_int2(v1) <= to_int2(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

predicate sge2(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) + tqtint2(v2)) <  4294967296) -> (tqtint2(add2(v1,
  v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  4294967296)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 4294967296)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) * tqtint2(v2)) <  4294967296) -> (tqtint2(mul2(v1,
  v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 4294967296)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int2(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 32)]. (eq_sub2(x, y, 0, 32) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq2 : t2, t2 -> bool

axiom bool_eq_def2 :
  (forall x:t2. forall y:t2 [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic bool_ne2 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne2(x, y)]. (((not (x = y)) -> (bool_ne2(x,
  y) = true)) and ((x = y) -> (bool_ne2(x, y) = false))))

logic bool_lt2 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt2(x, y)]. ((ult2(x, y) -> (bool_lt2(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt2(x, y) = false))))

logic bool_le2 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le2(x, y)]. ((ule2(x, y) -> (bool_le2(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le2(x, y) = false))))

logic bool_gt2 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt2(x, y)]. ((ugt2(x, y) -> (bool_gt2(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt2(x, y) = false))))

logic bool_ge2 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge2(x, y)]. ((uge2(x, y) -> (bool_ge2(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge2(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

logic toBig : t1 -> t2

logic toSmall : t2 -> t1

logic rliteral : t2

axiom rliteral_axiom : (tqtint2(rliteral) = 65535)

axiom toSmall_to_uint :
  (forall x:t2. (ule2(x, rliteral) -> (tqtint2(x) = tqtint1(toSmall(x)))))

axiom toBig_to_uint : (forall x:t1. (tqtint1(x) = tqtint2(toBig(x))))

logic toBig1 : t -> t2

logic toSmall1 : t2 -> t

logic rliteral1 : t2

axiom rliteral_axiom1 : (tqtint2(rliteral1) = 255)

axiom toSmall_to_uint1 :
  (forall x:t2. (ule2(x, rliteral1) -> (tqtint2(x) = tqtint(toSmall1(x)))))

axiom toBig_to_uint1 : (forall x:t. (tqtint(x) = tqtint2(toBig1(x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic to_int3 : bool -> int

axiom to_int_def3 :
  (forall b:bool [to_int3(b)]. (((b = true) -> (to_int3(b) = 1)) and
  ((not (b = true)) -> (to_int3(b) = 0))))

logic of_int3 : int -> bool

axiom of_int_def :
  (forall i:int [of_int3(i)]. (((i = 0) -> (of_int3(i) = false)) and
  ((not (i = 0)) -> (of_int3(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type bits_1

predicate in_range1(x: t) = (ule(of_int(0), x) and ule(x, of_int(1)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq4 : int, int -> bool

logic bool_ne3 : int, int -> bool

logic bool_lt3 : int, int -> bool

logic bool_le3 : int, int -> bool

logic bool_gt3 : int, int -> bool

logic bool_ge3 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne3(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt3(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le3(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt3(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge3(x, y) = true) <-> (y <= x))))

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : bits_1, bits_1 -> bool

logic dummy : bits_1

type bits_1__ref = { bits_1__content : bits_1
}

function bits_1__ref___projection(a: bits_1__ref) : bits_1 =
  (a).bits_1__content

logic to_rep : bits_1 -> t

logic of_rep : t -> bits_1

axiom inversion_axiom :
  (forall x:bits_1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:bits_1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (in_range1(urem(x, of_int(2))) ->
  (to_rep(of_rep(x)) = urem(x, of_int(2)))))

function to_int4(x: bits_1) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:bits_1 [to_int4(x)]. in_range_int(to_int4(x)))

type bits_5

predicate in_range2(x: t) = (ule(of_int(0), x) and ule(x, of_int(31)))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 31))

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : bits_5, bits_5 -> bool

logic dummy1 : bits_5

type bits_5__ref = { bits_5__content : bits_5
}

function bits_5__ref___projection(a: bits_5__ref) : bits_5 =
  (a).bits_5__content

logic to_rep1 : bits_5 -> t

logic of_rep1 : t -> bits_5

axiom inversion_axiom1 :
  (forall x:bits_5 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:bits_5 [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (in_range2(urem(x, of_int(32))) ->
  (to_rep1(of_rep1(x)) = urem(x, of_int(32)))))

function to_int5(x: bits_5) : int = tqtint(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:bits_5 [to_int5(x)]. in_range_int1(to_int5(x)))

type bits_11

predicate in_range3(x: t1) = (ule1(of_int1(0), x) and ule1(x, of_int1(2047)))

predicate in_range_int2(x: int) = ((0 <= x) and (x <= 2047))

logic bool_eq7 : t1, t1 -> bool

axiom bool_eq_def6 :
  (forall x:t1. forall y:t1 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t1

logic user_eq2 : bits_11, bits_11 -> bool

logic dummy2 : bits_11

type bits_11__ref = { bits_11__content : bits_11
}

function bits_11__ref___projection(a: bits_11__ref) : bits_11 =
  (a).bits_11__content

type bits_16

logic attr__ATTRIBUTE_MODULUS : t1

logic bool_eq8 : t1, t1 -> bool

axiom bool_eq_def7 :
  (forall x:t1. forall y:t1 [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq3 : bits_16, bits_16 -> bool

logic dummy3 : bits_16

type bits_16__ref = { bits_16__content : bits_16
}

function bits_16__ref___projection(a: bits_16__ref) : bits_16 =
  (a).bits_16__content

logic to_rep2 : bits_16 -> t1

logic of_rep2 : t1 -> bits_16

axiom inversion_axiom2 :
  (forall x:bits_16 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t1 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int6(x: bits_16) : int = tqtint1(to_rep2(x))

axiom range_int_axiom2 :
  (forall x:bits_16 [to_int6(x)]. uint_in_range1(to_int6(x)))

type bits_32

logic attr__ATTRIBUTE_MODULUS1 : t2

logic bool_eq9 : t2, t2 -> bool

axiom bool_eq_def8 :
  (forall x:t2. forall y:t2 [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t2

logic user_eq4 : bits_32, bits_32 -> bool

logic dummy4 : bits_32

type bits_32__ref = { bits_32__content : bits_32
}

function bits_32__ref___projection(a: bits_32__ref) : bits_32 =
  (a).bits_32__content

logic to_rep3 : bits_32 -> t2

logic of_rep3 : t2 -> bits_32

axiom inversion_axiom3 :
  (forall x:bits_32 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : true

axiom coerce_axiom3 :
  (forall x:t2 [to_rep3(of_rep3(x))]. (to_rep3(of_rep3(x)) = x))

function to_int7(x: bits_32) : int = tqtint2(to_rep3(x))

axiom range_int_axiom3 :
  (forall x:bits_32 [to_int7(x)]. uint_in_range2(to_int7(x)))

type bits_2

predicate in_range4(x: t) = (ule(of_int(0), x) and ule(x, of_int(3)))

predicate in_range_int3(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq10 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq5 : bits_2, bits_2 -> bool

logic dummy5 : bits_2

type bits_2__ref = { bits_2__content : bits_2
}

function bits_2__ref___projection(a: bits_2__ref) : bits_2 =
  (a).bits_2__content

logic to_rep4 : bits_2 -> t

logic of_rep4 : t -> bits_2

axiom inversion_axiom4 :
  (forall x:bits_2 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:bits_2 [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:t [to_rep4(of_rep4(x))]. (in_range4(urem(x, of_int(4))) ->
  (to_rep4(of_rep4(x)) = urem(x, of_int(4)))))

function to_int8(x: bits_2) : int = tqtint(to_rep4(x))

axiom range_int_axiom4 :
  (forall x:bits_2 [to_int8(x)]. in_range_int3(to_int8(x)))

type bits_3

predicate in_range5(x: t) = (ule(of_int(0), x) and ule(x, of_int(7)))

predicate in_range_int4(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq11 : t, t -> bool

axiom bool_eq_def10 :
  (forall x:t. forall y:t [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic user_eq6 : bits_3, bits_3 -> bool

logic dummy6 : bits_3

type bits_3__ref = { bits_3__content : bits_3
}

function bits_3__ref___projection(a: bits_3__ref) : bits_3 =
  (a).bits_3__content

logic to_rep5 : bits_3 -> t

logic of_rep5 : t -> bits_3

axiom inversion_axiom5 :
  (forall x:bits_3 [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:bits_3 [to_rep5(x)]. in_range5(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (in_range5(urem(x, of_int(8))) ->
  (to_rep5(of_rep5(x)) = urem(x, of_int(8)))))

function to_int9(x: bits_3) : int = tqtint(to_rep5(x))

axiom range_int_axiom5 :
  (forall x:bits_3 [to_int9(x)]. in_range_int4(to_int9(x)))

type us_split_fields = { rec__dw1000__register_types__sys_cfg_type__ffen :
bits_1; rec__dw1000__register_types__sys_cfg_type__ffbc : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffab : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffad : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffaa : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffam : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffar : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffa4 : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffa5 : bits_1;
rec__dw1000__register_types__sys_cfg_type__hirq_pol : bits_1;
rec__dw1000__register_types__sys_cfg_type__spi_edge : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_fce : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_drxb : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_phe : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_rsde : bits_1;
rec__dw1000__register_types__sys_cfg_type__fcs_int2f : bits_1;
rec__dw1000__register_types__sys_cfg_type__phr_mode : bits_2;
rec__dw1000__register_types__sys_cfg_type__dis_stxp : bits_1;
rec__dw1000__register_types__sys_cfg_type__rxm110k : bits_1;
rec__dw1000__register_types__sys_cfg_type__rxwtoe : bits_1;
rec__dw1000__register_types__sys_cfg_type__rxautr : bits_1;
rec__dw1000__register_types__sys_cfg_type__autoack : bits_1;
rec__dw1000__register_types__sys_cfg_type__aackpend : bits_1;
rec__dw1000__register_types__sys_cfg_type__reserved_1 : bits_3;
rec__dw1000__register_types__sys_cfg_type__reserved_2 : bits_5
}

function us_split_fields_FFEN__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffen

function us_split_fields_FFBC__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffbc

function us_split_fields_FFAB__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffab

function us_split_fields_FFAD__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffad

function us_split_fields_FFAA__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffaa

function us_split_fields_FFAM__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffam

function us_split_fields_FFAR__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffar

function us_split_fields_FFA4__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffa4

function us_split_fields_FFA5__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffa5

function us_split_fields_HIRQ_POL__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__hirq_pol

function us_split_fields_SPI_EDGE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__spi_edge

function us_split_fields_DIS_FCE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_fce

function us_split_fields_DIS_DRXB__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_drxb

function us_split_fields_DIS_PHE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_phe

function us_split_fields_DIS_RSDE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_rsde

function us_split_fields_FCS_INT2F__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__fcs_int2f

function us_split_fields_PHR_MODE__projection(a: us_split_fields) : bits_2 =
  (a).rec__dw1000__register_types__sys_cfg_type__phr_mode

function us_split_fields_DIS_STXP__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_stxp

function us_split_fields_RXM110K__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__rxm110k

function us_split_fields_RXWTOE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__rxwtoe

function us_split_fields_RXAUTR__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__rxautr

function us_split_fields_AUTOACK__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__autoack

function us_split_fields_AACKPEND__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__aackpend

function us_split_fields_Reserved_1__projection(a: us_split_fields) : bits_3 =
  (a).rec__dw1000__register_types__sys_cfg_type__reserved_1

function us_split_fields_Reserved_2__projection(a: us_split_fields) : bits_5 =
  (a).rec__dw1000__register_types__sys_cfg_type__reserved_2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def11 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  (((((((((((((((((((((((((((to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen)) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend))) and
  (to_rep5(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1) = to_rep5(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1))) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2))) ->
  (bool_eq12(a, b) = true)) and
  ((not (((((((((((((((((((((((((to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen)) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend))) and
  (to_rep5(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1) = to_rep5(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1))) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2)))) ->
  (bool_eq12(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic dw1000__register_types__sys_cfg_type__ffen__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffen__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffen__position : int

axiom dw1000__register_types__sys_cfg_type__ffen__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffen__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffen__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffen__first__bit <  dw1000__register_types__sys_cfg_type__ffen__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffen__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffen__position)

logic dw1000__register_types__sys_cfg_type__ffbc__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffbc__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffbc__position : int

axiom dw1000__register_types__sys_cfg_type__ffbc__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffbc__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffbc__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffbc__first__bit <  dw1000__register_types__sys_cfg_type__ffbc__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffbc__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffbc__position)

logic dw1000__register_types__sys_cfg_type__ffab__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffab__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffab__position : int

axiom dw1000__register_types__sys_cfg_type__ffab__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffab__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffab__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffab__first__bit <  dw1000__register_types__sys_cfg_type__ffab__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffab__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffab__position)

logic dw1000__register_types__sys_cfg_type__ffad__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffad__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffad__position : int

axiom dw1000__register_types__sys_cfg_type__ffad__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffad__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffad__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffad__first__bit <  dw1000__register_types__sys_cfg_type__ffad__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffad__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffad__position)

logic dw1000__register_types__sys_cfg_type__ffaa__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffaa__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffaa__position : int

axiom dw1000__register_types__sys_cfg_type__ffaa__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffaa__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffaa__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffaa__first__bit <  dw1000__register_types__sys_cfg_type__ffaa__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffaa__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffaa__position)

logic dw1000__register_types__sys_cfg_type__ffam__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffam__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffam__position : int

axiom dw1000__register_types__sys_cfg_type__ffam__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffam__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffam__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffam__first__bit <  dw1000__register_types__sys_cfg_type__ffam__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffam__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffam__position)

logic dw1000__register_types__sys_cfg_type__ffar__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffar__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffar__position : int

axiom dw1000__register_types__sys_cfg_type__ffar__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffar__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffar__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffar__first__bit <  dw1000__register_types__sys_cfg_type__ffar__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffar__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffar__position)

logic dw1000__register_types__sys_cfg_type__ffa4__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffa4__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffa4__position : int

axiom dw1000__register_types__sys_cfg_type__ffa4__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa4__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffa4__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffa4__first__bit <  dw1000__register_types__sys_cfg_type__ffa4__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffa4__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa4__position)

logic dw1000__register_types__sys_cfg_type__ffa5__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffa5__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffa5__position : int

axiom dw1000__register_types__sys_cfg_type__ffa5__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa5__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffa5__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffa5__first__bit <  dw1000__register_types__sys_cfg_type__ffa5__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffa5__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa5__position)

logic dw1000__register_types__sys_cfg_type__hirq_pol__first__bit : int

logic dw1000__register_types__sys_cfg_type__hirq_pol__last__bit : int

logic dw1000__register_types__sys_cfg_type__hirq_pol__position : int

axiom dw1000__register_types__sys_cfg_type__hirq_pol__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__hirq_pol__first__bit)

axiom dw1000__register_types__sys_cfg_type__hirq_pol__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__hirq_pol__first__bit <  dw1000__register_types__sys_cfg_type__hirq_pol__last__bit)

axiom dw1000__register_types__sys_cfg_type__hirq_pol__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__hirq_pol__position)

logic dw1000__register_types__sys_cfg_type__spi_edge__first__bit : int

logic dw1000__register_types__sys_cfg_type__spi_edge__last__bit : int

logic dw1000__register_types__sys_cfg_type__spi_edge__position : int

axiom dw1000__register_types__sys_cfg_type__spi_edge__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__spi_edge__first__bit)

axiom dw1000__register_types__sys_cfg_type__spi_edge__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__spi_edge__first__bit <  dw1000__register_types__sys_cfg_type__spi_edge__last__bit)

axiom dw1000__register_types__sys_cfg_type__spi_edge__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__spi_edge__position)

logic dw1000__register_types__sys_cfg_type__dis_fce__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_fce__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_fce__position : int

axiom dw1000__register_types__sys_cfg_type__dis_fce__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_fce__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_fce__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_fce__first__bit <  dw1000__register_types__sys_cfg_type__dis_fce__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_fce__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_fce__position)

logic dw1000__register_types__sys_cfg_type__dis_drxb__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_drxb__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_drxb__position : int

axiom dw1000__register_types__sys_cfg_type__dis_drxb__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_drxb__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_drxb__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_drxb__first__bit <  dw1000__register_types__sys_cfg_type__dis_drxb__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_drxb__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_drxb__position)

logic dw1000__register_types__sys_cfg_type__dis_phe__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_phe__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_phe__position : int

axiom dw1000__register_types__sys_cfg_type__dis_phe__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_phe__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_phe__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_phe__first__bit <  dw1000__register_types__sys_cfg_type__dis_phe__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_phe__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_phe__position)

logic dw1000__register_types__sys_cfg_type__dis_rsde__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_rsde__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_rsde__position : int

axiom dw1000__register_types__sys_cfg_type__dis_rsde__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_rsde__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_rsde__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_rsde__first__bit <  dw1000__register_types__sys_cfg_type__dis_rsde__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_rsde__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_rsde__position)

logic dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit : int

logic dw1000__register_types__sys_cfg_type__fcs_int2f__last__bit : int

logic dw1000__register_types__sys_cfg_type__fcs_int2f__position : int

axiom dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit)

axiom dw1000__register_types__sys_cfg_type__fcs_int2f__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit <  dw1000__register_types__sys_cfg_type__fcs_int2f__last__bit)

axiom dw1000__register_types__sys_cfg_type__fcs_int2f__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__fcs_int2f__position)

logic dw1000__register_types__sys_cfg_type__phr_mode__first__bit : int

logic dw1000__register_types__sys_cfg_type__phr_mode__last__bit : int

logic dw1000__register_types__sys_cfg_type__phr_mode__position : int

axiom dw1000__register_types__sys_cfg_type__phr_mode__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__phr_mode__first__bit)

axiom dw1000__register_types__sys_cfg_type__phr_mode__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__phr_mode__first__bit <  dw1000__register_types__sys_cfg_type__phr_mode__last__bit)

axiom dw1000__register_types__sys_cfg_type__phr_mode__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__phr_mode__position)

logic dw1000__register_types__sys_cfg_type__dis_stxp__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_stxp__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_stxp__position : int

axiom dw1000__register_types__sys_cfg_type__dis_stxp__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_stxp__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_stxp__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_stxp__first__bit <  dw1000__register_types__sys_cfg_type__dis_stxp__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_stxp__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_stxp__position)

logic dw1000__register_types__sys_cfg_type__rxm110k__first__bit : int

logic dw1000__register_types__sys_cfg_type__rxm110k__last__bit : int

logic dw1000__register_types__sys_cfg_type__rxm110k__position : int

axiom dw1000__register_types__sys_cfg_type__rxm110k__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxm110k__first__bit)

axiom dw1000__register_types__sys_cfg_type__rxm110k__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__rxm110k__first__bit <  dw1000__register_types__sys_cfg_type__rxm110k__last__bit)

axiom dw1000__register_types__sys_cfg_type__rxm110k__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxm110k__position)

logic dw1000__register_types__sys_cfg_type__rxwtoe__first__bit : int

logic dw1000__register_types__sys_cfg_type__rxwtoe__last__bit : int

logic dw1000__register_types__sys_cfg_type__rxwtoe__position : int

axiom dw1000__register_types__sys_cfg_type__rxwtoe__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxwtoe__first__bit)

axiom dw1000__register_types__sys_cfg_type__rxwtoe__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__rxwtoe__first__bit <  dw1000__register_types__sys_cfg_type__rxwtoe__last__bit)

axiom dw1000__register_types__sys_cfg_type__rxwtoe__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxwtoe__position)

logic dw1000__register_types__sys_cfg_type__rxautr__first__bit : int

logic dw1000__register_types__sys_cfg_type__rxautr__last__bit : int

logic dw1000__register_types__sys_cfg_type__rxautr__position : int

axiom dw1000__register_types__sys_cfg_type__rxautr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxautr__first__bit)

axiom dw1000__register_types__sys_cfg_type__rxautr__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__rxautr__first__bit <  dw1000__register_types__sys_cfg_type__rxautr__last__bit)

axiom dw1000__register_types__sys_cfg_type__rxautr__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxautr__position)

logic dw1000__register_types__sys_cfg_type__autoack__first__bit : int

logic dw1000__register_types__sys_cfg_type__autoack__last__bit : int

logic dw1000__register_types__sys_cfg_type__autoack__position : int

axiom dw1000__register_types__sys_cfg_type__autoack__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__autoack__first__bit)

axiom dw1000__register_types__sys_cfg_type__autoack__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__autoack__first__bit <  dw1000__register_types__sys_cfg_type__autoack__last__bit)

axiom dw1000__register_types__sys_cfg_type__autoack__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__autoack__position)

logic dw1000__register_types__sys_cfg_type__aackpend__first__bit : int

logic dw1000__register_types__sys_cfg_type__aackpend__last__bit : int

logic dw1000__register_types__sys_cfg_type__aackpend__position : int

axiom dw1000__register_types__sys_cfg_type__aackpend__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__aackpend__first__bit)

axiom dw1000__register_types__sys_cfg_type__aackpend__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__aackpend__first__bit <  dw1000__register_types__sys_cfg_type__aackpend__last__bit)

axiom dw1000__register_types__sys_cfg_type__aackpend__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__aackpend__position)

logic dw1000__register_types__sys_cfg_type__reserved_1__first__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_1__last__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_1__position : int

axiom dw1000__register_types__sys_cfg_type__reserved_1__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_1__first__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_1__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__reserved_1__first__bit <  dw1000__register_types__sys_cfg_type__reserved_1__last__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_1__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_1__position)

logic dw1000__register_types__sys_cfg_type__reserved_2__first__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_2__last__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_2__position : int

axiom dw1000__register_types__sys_cfg_type__reserved_2__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_2__first__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_2__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__reserved_2__first__bit <  dw1000__register_types__sys_cfg_type__reserved_2__last__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_2__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_2__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : bits_1

logic dummy8 : bits_1

logic dummy9 : bits_1

logic dummy10 : bits_1

logic dummy11 : bits_1

logic dummy12 : bits_1

logic dummy13 : bits_1

logic dummy14 : bits_1

logic dummy15 : bits_1

logic dummy16 : bits_1

logic dummy17 : bits_1

logic dummy18 : bits_1

logic dummy19 : bits_1

logic dummy20 : bits_1

logic dummy21 : bits_1

logic dummy22 : bits_1

logic dummy23 : bits_2

logic dummy24 : bits_1

logic dummy25 : bits_1

logic dummy26 : bits_1

logic dummy27 : bits_1

logic dummy28 : bits_1

logic dummy29 : bits_1

logic dummy30 : bits_3

logic dummy31 : bits_5

type sys_cfg_type__ref = { sys_cfg_type__content : us_rep
}

function sys_cfg_type__ref___projection(a: sys_cfg_type__ref) : us_rep =
  (a).sys_cfg_type__content

type us_split_fields2 = { rec__dw1000__register_types__sys_mask_type__mcplock
: bits_1; rec__dw1000__register_types__sys_mask_type__mesyncr : bits_1;
rec__dw1000__register_types__sys_mask_type__maat : bits_1;
rec__dw1000__register_types__sys_mask_type__mtxfrb : bits_1;
rec__dw1000__register_types__sys_mask_type__mtxprs : bits_1;
rec__dw1000__register_types__sys_mask_type__mtxphs : bits_1;
rec__dw1000__register_types__sys_mask_type__mtxfrs : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxprd : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxsfdd : bits_1;
rec__dw1000__register_types__sys_mask_type__mldedone : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxphd : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxphe : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxdfr : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxfcg : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxfce : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxrfsl : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxrfto : bits_1;
rec__dw1000__register_types__sys_mask_type__mldeerr : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxovrr : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxpto : bits_1;
rec__dw1000__register_types__sys_mask_type__mgpioirq : bits_1;
rec__dw1000__register_types__sys_mask_type__mslp2init : bits_1;
rec__dw1000__register_types__sys_mask_type__mrfpllll : bits_1;
rec__dw1000__register_types__sys_mask_type__mcpllll : bits_1;
rec__dw1000__register_types__sys_mask_type__mrxsfdto : bits_1;
rec__dw1000__register_types__sys_mask_type__mhpdwarn : bits_1;
rec__dw1000__register_types__sys_mask_type__mtxberr : bits_1;
rec__dw1000__register_types__sys_mask_type__maffrej : bits_1;
rec__dw1000__register_types__sys_mask_type__reserved_1 : bits_1;
rec__dw1000__register_types__sys_mask_type__reserved_2 : bits_1;
rec__dw1000__register_types__sys_mask_type__reserved_3 : bits_2
}

function us_split_fields_MCPLOCK__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mcplock

function us_split_fields_MESYNCR__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mesyncr

function us_split_fields_MAAT__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__maat

function us_split_fields_MTXFRB__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mtxfrb

function us_split_fields_MTXPRS__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mtxprs

function us_split_fields_MTXPHS__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mtxphs

function us_split_fields_MTXFRS__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mtxfrs

function us_split_fields_MRXPRD__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxprd

function us_split_fields_MRXSFDD__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxsfdd

function us_split_fields_MLDEDONE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mldedone

function us_split_fields_MRXPHD__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxphd

function us_split_fields_MRXPHE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxphe

function us_split_fields_MRXDFR__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxdfr

function us_split_fields_MRXFCG__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxfcg

function us_split_fields_MRXFCE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxfce

function us_split_fields_MRXRFSL__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxrfsl

function us_split_fields_MRXRFTO__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxrfto

function us_split_fields_MLDEERR__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mldeerr

function us_split_fields_MRXOVRR__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxovrr

function us_split_fields_MRXPTO__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxpto

function us_split_fields_MGPIOIRQ__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mgpioirq

function us_split_fields_MSLP2INIT__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mslp2init

function us_split_fields_MRFPLLLL__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrfpllll

function us_split_fields_MCPLLLL__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mcpllll

function us_split_fields_MRXSFDTO__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mrxsfdto

function us_split_fields_MHPDWARN__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mhpdwarn

function us_split_fields_MTXBERR__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__mtxberr

function us_split_fields_MAFFREJ__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__maffrej

function us_split_fields_Reserved_1__3__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__reserved_1

function us_split_fields_Reserved_2__3__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__sys_mask_type__reserved_2

function us_split_fields_Reserved_3__2__projection(a: us_split_fields2) : bits_2 =
  (a).rec__dw1000__register_types__sys_mask_type__reserved_3

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___11__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  (((((((((((((((((((((((((((((((((to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcplock) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcplock)) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mesyncr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mesyncr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maat) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maat))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrb) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrb))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxprs) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxprs))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxphs) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxphs))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrs) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrs))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxprd) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxprd))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdd) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdd))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldedone) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldedone))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphd) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphd))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphe) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphe))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxdfr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxdfr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfcg) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfcg))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfce) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfce))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfsl) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfsl))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfto) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfto))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldeerr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldeerr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxovrr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxovrr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxpto) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxpto))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mgpioirq) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mgpioirq))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mslp2init) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mslp2init))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrfpllll) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrfpllll))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcpllll) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcpllll))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdto) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdto))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mhpdwarn) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mhpdwarn))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxberr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxberr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maffrej) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maffrej))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_1) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_1))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_2) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_2))) and
  (to_rep4(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_3) = to_rep4(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_3))) ->
  (bool_eq13(a, b) = true)) and
  ((not (((((((((((((((((((((((((((((((to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcplock) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcplock)) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mesyncr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mesyncr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maat) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maat))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrb) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrb))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxprs) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxprs))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxphs) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxphs))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrs) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxfrs))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxprd) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxprd))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdd) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdd))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldedone) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldedone))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphd) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphd))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphe) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxphe))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxdfr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxdfr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfcg) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfcg))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfce) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxfce))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfsl) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfsl))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfto) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxrfto))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldeerr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mldeerr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxovrr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxovrr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxpto) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxpto))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mgpioirq) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mgpioirq))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mslp2init) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mslp2init))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrfpllll) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrfpllll))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcpllll) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mcpllll))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdto) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mrxsfdto))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mhpdwarn) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mhpdwarn))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxberr) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__mtxberr))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maffrej) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__maffrej))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_1) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_1))) and
  (to_rep(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_2) = to_rep(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_2))) and
  (to_rep4(((a).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_3) = to_rep4(((b).us_split_fields3).rec__dw1000__register_types__sys_mask_type__reserved_3)))) ->
  (bool_eq13(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic dw1000__register_types__sys_mask_type__mcplock__first__bit : int

logic dw1000__register_types__sys_mask_type__mcplock__last__bit : int

logic dw1000__register_types__sys_mask_type__mcplock__position : int

axiom dw1000__register_types__sys_mask_type__mcplock__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mcplock__first__bit)

axiom dw1000__register_types__sys_mask_type__mcplock__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mcplock__first__bit <  dw1000__register_types__sys_mask_type__mcplock__last__bit)

axiom dw1000__register_types__sys_mask_type__mcplock__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mcplock__position)

logic dw1000__register_types__sys_mask_type__mesyncr__first__bit : int

logic dw1000__register_types__sys_mask_type__mesyncr__last__bit : int

logic dw1000__register_types__sys_mask_type__mesyncr__position : int

axiom dw1000__register_types__sys_mask_type__mesyncr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mesyncr__first__bit)

axiom dw1000__register_types__sys_mask_type__mesyncr__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mesyncr__first__bit <  dw1000__register_types__sys_mask_type__mesyncr__last__bit)

axiom dw1000__register_types__sys_mask_type__mesyncr__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mesyncr__position)

logic dw1000__register_types__sys_mask_type__maat__first__bit : int

logic dw1000__register_types__sys_mask_type__maat__last__bit : int

logic dw1000__register_types__sys_mask_type__maat__position : int

axiom dw1000__register_types__sys_mask_type__maat__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__maat__first__bit)

axiom dw1000__register_types__sys_mask_type__maat__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__maat__first__bit <  dw1000__register_types__sys_mask_type__maat__last__bit)

axiom dw1000__register_types__sys_mask_type__maat__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__maat__position)

logic dw1000__register_types__sys_mask_type__mtxfrb__first__bit : int

logic dw1000__register_types__sys_mask_type__mtxfrb__last__bit : int

logic dw1000__register_types__sys_mask_type__mtxfrb__position : int

axiom dw1000__register_types__sys_mask_type__mtxfrb__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxfrb__first__bit)

axiom dw1000__register_types__sys_mask_type__mtxfrb__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mtxfrb__first__bit <  dw1000__register_types__sys_mask_type__mtxfrb__last__bit)

axiom dw1000__register_types__sys_mask_type__mtxfrb__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxfrb__position)

logic dw1000__register_types__sys_mask_type__mtxprs__first__bit : int

logic dw1000__register_types__sys_mask_type__mtxprs__last__bit : int

logic dw1000__register_types__sys_mask_type__mtxprs__position : int

axiom dw1000__register_types__sys_mask_type__mtxprs__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxprs__first__bit)

axiom dw1000__register_types__sys_mask_type__mtxprs__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mtxprs__first__bit <  dw1000__register_types__sys_mask_type__mtxprs__last__bit)

axiom dw1000__register_types__sys_mask_type__mtxprs__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxprs__position)

logic dw1000__register_types__sys_mask_type__mtxphs__first__bit : int

logic dw1000__register_types__sys_mask_type__mtxphs__last__bit : int

logic dw1000__register_types__sys_mask_type__mtxphs__position : int

axiom dw1000__register_types__sys_mask_type__mtxphs__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxphs__first__bit)

axiom dw1000__register_types__sys_mask_type__mtxphs__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mtxphs__first__bit <  dw1000__register_types__sys_mask_type__mtxphs__last__bit)

axiom dw1000__register_types__sys_mask_type__mtxphs__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxphs__position)

logic dw1000__register_types__sys_mask_type__mtxfrs__first__bit : int

logic dw1000__register_types__sys_mask_type__mtxfrs__last__bit : int

logic dw1000__register_types__sys_mask_type__mtxfrs__position : int

axiom dw1000__register_types__sys_mask_type__mtxfrs__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxfrs__first__bit)

axiom dw1000__register_types__sys_mask_type__mtxfrs__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mtxfrs__first__bit <  dw1000__register_types__sys_mask_type__mtxfrs__last__bit)

axiom dw1000__register_types__sys_mask_type__mtxfrs__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxfrs__position)

logic dw1000__register_types__sys_mask_type__mrxprd__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxprd__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxprd__position : int

axiom dw1000__register_types__sys_mask_type__mrxprd__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxprd__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxprd__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxprd__first__bit <  dw1000__register_types__sys_mask_type__mrxprd__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxprd__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxprd__position)

logic dw1000__register_types__sys_mask_type__mrxsfdd__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxsfdd__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxsfdd__position : int

axiom dw1000__register_types__sys_mask_type__mrxsfdd__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxsfdd__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxsfdd__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxsfdd__first__bit <  dw1000__register_types__sys_mask_type__mrxsfdd__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxsfdd__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxsfdd__position)

logic dw1000__register_types__sys_mask_type__mldedone__first__bit : int

logic dw1000__register_types__sys_mask_type__mldedone__last__bit : int

logic dw1000__register_types__sys_mask_type__mldedone__position : int

axiom dw1000__register_types__sys_mask_type__mldedone__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mldedone__first__bit)

axiom dw1000__register_types__sys_mask_type__mldedone__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mldedone__first__bit <  dw1000__register_types__sys_mask_type__mldedone__last__bit)

axiom dw1000__register_types__sys_mask_type__mldedone__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mldedone__position)

logic dw1000__register_types__sys_mask_type__mrxphd__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxphd__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxphd__position : int

axiom dw1000__register_types__sys_mask_type__mrxphd__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxphd__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxphd__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxphd__first__bit <  dw1000__register_types__sys_mask_type__mrxphd__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxphd__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxphd__position)

logic dw1000__register_types__sys_mask_type__mrxphe__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxphe__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxphe__position : int

axiom dw1000__register_types__sys_mask_type__mrxphe__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxphe__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxphe__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxphe__first__bit <  dw1000__register_types__sys_mask_type__mrxphe__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxphe__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxphe__position)

logic dw1000__register_types__sys_mask_type__mrxdfr__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxdfr__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxdfr__position : int

axiom dw1000__register_types__sys_mask_type__mrxdfr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxdfr__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxdfr__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxdfr__first__bit <  dw1000__register_types__sys_mask_type__mrxdfr__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxdfr__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxdfr__position)

logic dw1000__register_types__sys_mask_type__mrxfcg__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxfcg__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxfcg__position : int

axiom dw1000__register_types__sys_mask_type__mrxfcg__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxfcg__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxfcg__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxfcg__first__bit <  dw1000__register_types__sys_mask_type__mrxfcg__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxfcg__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxfcg__position)

logic dw1000__register_types__sys_mask_type__mrxfce__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxfce__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxfce__position : int

axiom dw1000__register_types__sys_mask_type__mrxfce__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxfce__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxfce__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxfce__first__bit <  dw1000__register_types__sys_mask_type__mrxfce__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxfce__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxfce__position)

logic dw1000__register_types__sys_mask_type__mrxrfsl__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxrfsl__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxrfsl__position : int

axiom dw1000__register_types__sys_mask_type__mrxrfsl__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxrfsl__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxrfsl__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxrfsl__first__bit <  dw1000__register_types__sys_mask_type__mrxrfsl__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxrfsl__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxrfsl__position)

logic dw1000__register_types__sys_mask_type__mrxrfto__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxrfto__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxrfto__position : int

axiom dw1000__register_types__sys_mask_type__mrxrfto__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxrfto__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxrfto__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxrfto__first__bit <  dw1000__register_types__sys_mask_type__mrxrfto__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxrfto__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxrfto__position)

logic dw1000__register_types__sys_mask_type__mldeerr__first__bit : int

logic dw1000__register_types__sys_mask_type__mldeerr__last__bit : int

logic dw1000__register_types__sys_mask_type__mldeerr__position : int

axiom dw1000__register_types__sys_mask_type__mldeerr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mldeerr__first__bit)

axiom dw1000__register_types__sys_mask_type__mldeerr__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mldeerr__first__bit <  dw1000__register_types__sys_mask_type__mldeerr__last__bit)

axiom dw1000__register_types__sys_mask_type__mldeerr__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mldeerr__position)

logic dw1000__register_types__sys_mask_type__mrxovrr__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxovrr__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxovrr__position : int

axiom dw1000__register_types__sys_mask_type__mrxovrr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxovrr__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxovrr__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxovrr__first__bit <  dw1000__register_types__sys_mask_type__mrxovrr__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxovrr__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxovrr__position)

logic dw1000__register_types__sys_mask_type__mrxpto__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxpto__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxpto__position : int

axiom dw1000__register_types__sys_mask_type__mrxpto__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxpto__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxpto__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxpto__first__bit <  dw1000__register_types__sys_mask_type__mrxpto__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxpto__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxpto__position)

logic dw1000__register_types__sys_mask_type__mgpioirq__first__bit : int

logic dw1000__register_types__sys_mask_type__mgpioirq__last__bit : int

logic dw1000__register_types__sys_mask_type__mgpioirq__position : int

axiom dw1000__register_types__sys_mask_type__mgpioirq__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mgpioirq__first__bit)

axiom dw1000__register_types__sys_mask_type__mgpioirq__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mgpioirq__first__bit <  dw1000__register_types__sys_mask_type__mgpioirq__last__bit)

axiom dw1000__register_types__sys_mask_type__mgpioirq__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mgpioirq__position)

logic dw1000__register_types__sys_mask_type__mslp2init__first__bit : int

logic dw1000__register_types__sys_mask_type__mslp2init__last__bit : int

logic dw1000__register_types__sys_mask_type__mslp2init__position : int

axiom dw1000__register_types__sys_mask_type__mslp2init__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mslp2init__first__bit)

axiom dw1000__register_types__sys_mask_type__mslp2init__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mslp2init__first__bit <  dw1000__register_types__sys_mask_type__mslp2init__last__bit)

axiom dw1000__register_types__sys_mask_type__mslp2init__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mslp2init__position)

logic dw1000__register_types__sys_mask_type__mrfpllll__first__bit : int

logic dw1000__register_types__sys_mask_type__mrfpllll__last__bit : int

logic dw1000__register_types__sys_mask_type__mrfpllll__position : int

axiom dw1000__register_types__sys_mask_type__mrfpllll__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrfpllll__first__bit)

axiom dw1000__register_types__sys_mask_type__mrfpllll__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrfpllll__first__bit <  dw1000__register_types__sys_mask_type__mrfpllll__last__bit)

axiom dw1000__register_types__sys_mask_type__mrfpllll__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrfpllll__position)

logic dw1000__register_types__sys_mask_type__mcpllll__first__bit : int

logic dw1000__register_types__sys_mask_type__mcpllll__last__bit : int

logic dw1000__register_types__sys_mask_type__mcpllll__position : int

axiom dw1000__register_types__sys_mask_type__mcpllll__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mcpllll__first__bit)

axiom dw1000__register_types__sys_mask_type__mcpllll__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mcpllll__first__bit <  dw1000__register_types__sys_mask_type__mcpllll__last__bit)

axiom dw1000__register_types__sys_mask_type__mcpllll__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mcpllll__position)

logic dw1000__register_types__sys_mask_type__mrxsfdto__first__bit : int

logic dw1000__register_types__sys_mask_type__mrxsfdto__last__bit : int

logic dw1000__register_types__sys_mask_type__mrxsfdto__position : int

axiom dw1000__register_types__sys_mask_type__mrxsfdto__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxsfdto__first__bit)

axiom dw1000__register_types__sys_mask_type__mrxsfdto__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mrxsfdto__first__bit <  dw1000__register_types__sys_mask_type__mrxsfdto__last__bit)

axiom dw1000__register_types__sys_mask_type__mrxsfdto__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mrxsfdto__position)

logic dw1000__register_types__sys_mask_type__mhpdwarn__first__bit : int

logic dw1000__register_types__sys_mask_type__mhpdwarn__last__bit : int

logic dw1000__register_types__sys_mask_type__mhpdwarn__position : int

axiom dw1000__register_types__sys_mask_type__mhpdwarn__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mhpdwarn__first__bit)

axiom dw1000__register_types__sys_mask_type__mhpdwarn__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mhpdwarn__first__bit <  dw1000__register_types__sys_mask_type__mhpdwarn__last__bit)

axiom dw1000__register_types__sys_mask_type__mhpdwarn__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mhpdwarn__position)

logic dw1000__register_types__sys_mask_type__mtxberr__first__bit : int

logic dw1000__register_types__sys_mask_type__mtxberr__last__bit : int

logic dw1000__register_types__sys_mask_type__mtxberr__position : int

axiom dw1000__register_types__sys_mask_type__mtxberr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxberr__first__bit)

axiom dw1000__register_types__sys_mask_type__mtxberr__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__mtxberr__first__bit <  dw1000__register_types__sys_mask_type__mtxberr__last__bit)

axiom dw1000__register_types__sys_mask_type__mtxberr__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__mtxberr__position)

logic dw1000__register_types__sys_mask_type__maffrej__first__bit : int

logic dw1000__register_types__sys_mask_type__maffrej__last__bit : int

logic dw1000__register_types__sys_mask_type__maffrej__position : int

axiom dw1000__register_types__sys_mask_type__maffrej__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__maffrej__first__bit)

axiom dw1000__register_types__sys_mask_type__maffrej__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__maffrej__first__bit <  dw1000__register_types__sys_mask_type__maffrej__last__bit)

axiom dw1000__register_types__sys_mask_type__maffrej__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__maffrej__position)

logic dw1000__register_types__sys_mask_type__reserved_1__first__bit : int

logic dw1000__register_types__sys_mask_type__reserved_1__last__bit : int

logic dw1000__register_types__sys_mask_type__reserved_1__position : int

axiom dw1000__register_types__sys_mask_type__reserved_1__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__reserved_1__first__bit)

axiom dw1000__register_types__sys_mask_type__reserved_1__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__reserved_1__first__bit <  dw1000__register_types__sys_mask_type__reserved_1__last__bit)

axiom dw1000__register_types__sys_mask_type__reserved_1__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__reserved_1__position)

logic dw1000__register_types__sys_mask_type__reserved_2__first__bit : int

logic dw1000__register_types__sys_mask_type__reserved_2__last__bit : int

logic dw1000__register_types__sys_mask_type__reserved_2__position : int

axiom dw1000__register_types__sys_mask_type__reserved_2__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__reserved_2__first__bit)

axiom dw1000__register_types__sys_mask_type__reserved_2__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__reserved_2__first__bit <  dw1000__register_types__sys_mask_type__reserved_2__last__bit)

axiom dw1000__register_types__sys_mask_type__reserved_2__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__reserved_2__position)

logic dw1000__register_types__sys_mask_type__reserved_3__first__bit : int

logic dw1000__register_types__sys_mask_type__reserved_3__last__bit : int

logic dw1000__register_types__sys_mask_type__reserved_3__position : int

axiom dw1000__register_types__sys_mask_type__reserved_3__first__bit_axiom :
  (0 <= dw1000__register_types__sys_mask_type__reserved_3__first__bit)

axiom dw1000__register_types__sys_mask_type__reserved_3__last__bit_axiom :
  (dw1000__register_types__sys_mask_type__reserved_3__first__bit <  dw1000__register_types__sys_mask_type__reserved_3__last__bit)

axiom dw1000__register_types__sys_mask_type__reserved_3__position_axiom :
  (0 <= dw1000__register_types__sys_mask_type__reserved_3__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy32 : bits_1

logic dummy33 : bits_1

logic dummy34 : bits_1

logic dummy35 : bits_1

logic dummy36 : bits_1

logic dummy37 : bits_1

logic dummy38 : bits_1

logic dummy39 : bits_1

logic dummy40 : bits_1

logic dummy41 : bits_1

logic dummy42 : bits_1

logic dummy43 : bits_1

logic dummy44 : bits_1

logic dummy45 : bits_1

logic dummy46 : bits_1

logic dummy47 : bits_1

logic dummy48 : bits_1

logic dummy49 : bits_1

logic dummy50 : bits_1

logic dummy51 : bits_1

logic dummy52 : bits_1

logic dummy53 : bits_1

logic dummy54 : bits_1

logic dummy55 : bits_1

logic dummy56 : bits_1

logic dummy57 : bits_1

logic dummy58 : bits_1

logic dummy59 : bits_1

logic dummy60 : bits_1

logic dummy61 : bits_1

logic dummy62 : bits_2

type sys_mask_type__ref = { sys_mask_type__content : us_rep1
}

function sys_mask_type__ref___projection(a: sys_mask_type__ref) : us_rep1 =
  (a).sys_mask_type__content

type bits_6

predicate in_range6(x: t) = (ule(of_int(0), x) and ule(x, of_int(63)))

predicate in_range_int5(x: int) = ((0 <= x) and (x <= 63))

logic bool_eq14 : t, t -> bool

axiom bool_eq_def13 :
  (forall x:t. forall y:t [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t

logic user_eq9 : bits_6, bits_6 -> bool

logic dummy63 : bits_6

type bits_6__ref = { bits_6__content : bits_6
}

function bits_6__ref___projection(a: bits_6__ref) : bits_6 =
  (a).bits_6__content

logic to_rep6 : bits_6 -> t

logic of_rep6 : t -> bits_6

axiom inversion_axiom6 :
  (forall x:bits_6 [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:bits_6 [to_rep6(x)]. in_range6(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:t [to_rep6(of_rep6(x))]. (in_range6(urem(x, of_int(64))) ->
  (to_rep6(of_rep6(x)) = urem(x, of_int(64)))))

function to_int10(x: bits_6) : int = tqtint(to_rep6(x))

axiom range_int_axiom6 :
  (forall x:bits_6 [to_int10(x)]. in_range_int5(to_int10(x)))

type bits_8

logic attr__ATTRIBUTE_MODULUS2 : t

logic bool_eq15 : t, t -> bool

axiom bool_eq_def14 :
  (forall x:t. forall y:t [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> t

logic user_eq10 : bits_8, bits_8 -> bool

logic dummy64 : bits_8

type bits_8__ref = { bits_8__content : bits_8
}

function bits_8__ref___projection(a: bits_8__ref) : bits_8 =
  (a).bits_8__content

logic to_rep7 : bits_8 -> t

logic of_rep7 : t -> bits_8

axiom inversion_axiom7 :
  (forall x:bits_8 [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : true

axiom coerce_axiom7 :
  (forall x:t [to_rep7(of_rep7(x))]. (to_rep7(of_rep7(x)) = x))

function to_int11(x: bits_8) : int = tqtint(to_rep7(x))

axiom range_int_axiom7 :
  (forall x:bits_8 [to_int11(x)]. uint_in_range(to_int11(x)))

type us_split_fields4 = {
rec__dw1000__register_types__pmsc_ctrl1_type__arx2init : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__pktseq : bits_8;
rec__dw1000__register_types__pmsc_ctrl1_type__atxslp : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__arxslp : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__snoze : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__snozr : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__lderune : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv : bits_6;
rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1 : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2 : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3 : bits_1;
rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4 : bits_8
}

function us_split_fields_ARX2INIT__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__arx2init

function us_split_fields_PKTSEQ__projection(a: us_split_fields4) : bits_8 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__pktseq

function us_split_fields_ATXSLP__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__atxslp

function us_split_fields_ARXSLP__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__arxslp

function us_split_fields_SNOZE__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__snoze

function us_split_fields_SNOZR__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__snozr

function us_split_fields_PLLSYN__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn

function us_split_fields_LDERUNE__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__lderune

function us_split_fields_KHZCLKDIV__projection(a: us_split_fields4) : bits_6 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv

function us_split_fields_Reserved_1__17__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1

function us_split_fields_Reserved_2__17__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2

function us_split_fields_Reserved_3__6__projection(a: us_split_fields4) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3

function us_split_fields_Reserved_4__3__projection(a: us_split_fields4) : bits_8 =
  (a).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___102__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___102__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq16 : us_rep2, us_rep2 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq16(a, b)].
  (((((((((((((((to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arx2init) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arx2init)) and
  (to_rep7(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pktseq) = to_rep7(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pktseq))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__atxslp) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__atxslp))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arxslp) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arxslp))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snoze) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snoze))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snozr) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snozr))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__lderune) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__lderune))) and
  (to_rep6(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv) = to_rep6(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3))) and
  (to_rep7(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4) = to_rep7(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4))) ->
  (bool_eq16(a, b) = true)) and
  ((not (((((((((((((to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arx2init) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arx2init)) and
  (to_rep7(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pktseq) = to_rep7(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pktseq))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__atxslp) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__atxslp))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arxslp) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__arxslp))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snoze) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snoze))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snozr) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__snozr))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__lderune) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__lderune))) and
  (to_rep6(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv) = to_rep6(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2))) and
  (to_rep(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3) = to_rep(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3))) and
  (to_rep7(((a).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4) = to_rep7(((b).us_split_fields5).rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4)))) ->
  (bool_eq16(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bits_1. forall a1:bits_8. forall a2:bits_1. forall a3:bits_1.
  forall a4:bits_1. forall a5:bits_1. forall a6:bits_1. forall a7:bits_1.
  forall a8:bits_6. forall a9:bits_1. forall a10:bits_1. forall a11:bits_1.
  forall a12:bits_8. (0 <= object__size2({ us_split_fields5 = {
  rec__dw1000__register_types__pmsc_ctrl1_type__arx2init = a;
  rec__dw1000__register_types__pmsc_ctrl1_type__pktseq = a1;
  rec__dw1000__register_types__pmsc_ctrl1_type__atxslp = a2;
  rec__dw1000__register_types__pmsc_ctrl1_type__arxslp = a3;
  rec__dw1000__register_types__pmsc_ctrl1_type__snoze = a4;
  rec__dw1000__register_types__pmsc_ctrl1_type__snozr = a5;
  rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn = a6;
  rec__dw1000__register_types__pmsc_ctrl1_type__lderune = a7;
  rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv = a8;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1 = a9;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2 = a10;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3 = a11;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4 = a12 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bits_1. forall a1:bits_8. forall a2:bits_1. forall a3:bits_1.
  forall a4:bits_1. forall a5:bits_1. forall a6:bits_1. forall a7:bits_1.
  forall a8:bits_6. forall a9:bits_1. forall a10:bits_1. forall a11:bits_1.
  forall a12:bits_8. (0 <= object__alignment2({ us_split_fields5 = {
  rec__dw1000__register_types__pmsc_ctrl1_type__arx2init = a;
  rec__dw1000__register_types__pmsc_ctrl1_type__pktseq = a1;
  rec__dw1000__register_types__pmsc_ctrl1_type__atxslp = a2;
  rec__dw1000__register_types__pmsc_ctrl1_type__arxslp = a3;
  rec__dw1000__register_types__pmsc_ctrl1_type__snoze = a4;
  rec__dw1000__register_types__pmsc_ctrl1_type__snozr = a5;
  rec__dw1000__register_types__pmsc_ctrl1_type__pllsyn = a6;
  rec__dw1000__register_types__pmsc_ctrl1_type__lderune = a7;
  rec__dw1000__register_types__pmsc_ctrl1_type__khzclkdiv = a8;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_1 = a9;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_2 = a10;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_3 = a11;
  rec__dw1000__register_types__pmsc_ctrl1_type__reserved_4 = a12 } })))

logic dw1000__register_types__pmsc_ctrl1_type__arx2init__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__arx2init__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__arx2init__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__arx2init__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__arx2init__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__arx2init__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__arx2init__first__bit <  dw1000__register_types__pmsc_ctrl1_type__arx2init__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__arx2init__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__arx2init__position)

logic dw1000__register_types__pmsc_ctrl1_type__pktseq__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__pktseq__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__pktseq__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__pktseq__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__pktseq__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__pktseq__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__pktseq__first__bit <  dw1000__register_types__pmsc_ctrl1_type__pktseq__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__pktseq__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__pktseq__position)

logic dw1000__register_types__pmsc_ctrl1_type__atxslp__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__atxslp__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__atxslp__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__atxslp__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__atxslp__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__atxslp__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__atxslp__first__bit <  dw1000__register_types__pmsc_ctrl1_type__atxslp__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__atxslp__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__atxslp__position)

logic dw1000__register_types__pmsc_ctrl1_type__arxslp__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__arxslp__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__arxslp__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__arxslp__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__arxslp__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__arxslp__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__arxslp__first__bit <  dw1000__register_types__pmsc_ctrl1_type__arxslp__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__arxslp__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__arxslp__position)

logic dw1000__register_types__pmsc_ctrl1_type__snoze__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__snoze__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__snoze__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__snoze__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__snoze__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__snoze__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__snoze__first__bit <  dw1000__register_types__pmsc_ctrl1_type__snoze__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__snoze__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__snoze__position)

logic dw1000__register_types__pmsc_ctrl1_type__snozr__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__snozr__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__snozr__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__snozr__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__snozr__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__snozr__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__snozr__first__bit <  dw1000__register_types__pmsc_ctrl1_type__snozr__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__snozr__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__snozr__position)

logic dw1000__register_types__pmsc_ctrl1_type__pllsyn__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__pllsyn__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__pllsyn__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__pllsyn__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__pllsyn__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__pllsyn__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__pllsyn__first__bit <  dw1000__register_types__pmsc_ctrl1_type__pllsyn__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__pllsyn__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__pllsyn__position)

logic dw1000__register_types__pmsc_ctrl1_type__lderune__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__lderune__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__lderune__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__lderune__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__lderune__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__lderune__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__lderune__first__bit <  dw1000__register_types__pmsc_ctrl1_type__lderune__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__lderune__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__lderune__position)

logic dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__first__bit <  dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__khzclkdiv__position)

logic dw1000__register_types__pmsc_ctrl1_type__reserved_1__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_1__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_1__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_1__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_1__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_1__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__reserved_1__first__bit <  dw1000__register_types__pmsc_ctrl1_type__reserved_1__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_1__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_1__position)

logic dw1000__register_types__pmsc_ctrl1_type__reserved_2__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_2__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_2__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_2__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_2__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_2__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__reserved_2__first__bit <  dw1000__register_types__pmsc_ctrl1_type__reserved_2__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_2__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_2__position)

logic dw1000__register_types__pmsc_ctrl1_type__reserved_3__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_3__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_3__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_3__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_3__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_3__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__reserved_3__first__bit <  dw1000__register_types__pmsc_ctrl1_type__reserved_3__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_3__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_3__position)

logic dw1000__register_types__pmsc_ctrl1_type__reserved_4__first__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_4__last__bit : int

logic dw1000__register_types__pmsc_ctrl1_type__reserved_4__position : int

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_4__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_4__first__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_4__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl1_type__reserved_4__first__bit <  dw1000__register_types__pmsc_ctrl1_type__reserved_4__last__bit)

axiom dw1000__register_types__pmsc_ctrl1_type__reserved_4__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl1_type__reserved_4__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy65 : bits_1

logic dummy66 : bits_8

logic dummy67 : bits_1

logic dummy68 : bits_1

logic dummy69 : bits_1

logic dummy70 : bits_1

logic dummy71 : bits_1

logic dummy72 : bits_1

logic dummy73 : bits_6

logic dummy74 : bits_1

logic dummy75 : bits_1

logic dummy76 : bits_1

logic dummy77 : bits_8

type pmsc_ctrl1_type__ref = { pmsc_ctrl1_type__content : us_rep2
}

function pmsc_ctrl1_type__ref___projection(a: pmsc_ctrl1_type__ref) : us_rep2 =
  (a).pmsc_ctrl1_type__content

type register_type__ref = { register_type__content : us_rep
}

function register_type__ref___4__projection(a: register_type__ref) : us_rep =
  (a).register_type__content

type register_type__ref1 = { register_type__content1 : us_rep1
}

function register_type__ref___11__projection(a: register_type__ref1) : us_rep1 =
  (a).register_type__content1

type register_type__ref2 = { register_type__content2 : us_rep2
}

function register_type__ref___101__projection(a: register_type__ref2) : us_rep2 =
  (a).register_type__content2

type map__ref = { map__content : (int,bits_32) farray
}

logic slide : (int,bits_32) farray, int, int -> (int,bits_32) farray

axiom slide_eq :
  (forall a:(int,bits_32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bits_32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bits_32) farray, int, int, (int,bits_32) farray, int,
  int -> (int,bits_32) farray

axiom concat_def :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bits_32, int -> (int,bits_32) farray

axiom singleton_def :
  (forall v:bits_32.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq17 : (int,bits_32) farray, int, int, (int,bits_32) farray, int,
  int -> bool

axiom bool_eq_def16 :
  (forall a:(int,bits_32) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bits_32) farray. forall b__first:int. forall b__last:int
  [bool_eq17(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_184:int. ((((a__first <= temp___idx_184) and
  (temp___idx_184 <= a__last)) and
  (to_rep3((a[temp___idx_184])) = to_rep3((b[((b__first - a__first) + temp___idx_184)])))) or
  (not ((a__first <= temp___idx_184) and (temp___idx_184 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_184:int. (((a__first <= temp___idx_184) and
  (temp___idx_184 <= a__last)) ->
  (to_rep3((a[temp___idx_184])) = to_rep3((b[((b__first - a__first) + temp___idx_184)]))))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_184:int. (((a__first <= temp___idx_184) and
  (temp___idx_184 <= a__last)) ->
  (to_rep3((a[temp___idx_184])) = to_rep3((b[((b__first - a__first) + temp___idx_184)])))))))))

logic compare : (int,bits_32) farray, int, int, (int,bits_32) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq17(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq17(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult2(to_rep3((a[(i + 1)])), to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq17(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt2(to_rep3((a[(j + 1)])), to_rep3((b[(i + 1)]))))))))))))

type us_split_fields6 = { rec__decadriver__driver_type__part_id : bits_32;
rec__decadriver__driver_type__lot_id : bits_32;
rec__decadriver__driver_type__antenna_delay_prf_64 : bits_16;
rec__decadriver__driver_type__antenna_delay_prf_16 : bits_16;
rec__decadriver__driver_type__xtal_trim : bits_5;
rec__decadriver__driver_type__otp_tx_power_levels : (int,bits_32) farray;
rec__decadriver__driver_type__long_frames : bool;
rec__decadriver__driver_type__sys_cfg_reg : us_rep;
rec__decadriver__driver_type__use_otp_xtal_trim : bool;
rec__decadriver__driver_type__use_otp_antenna_delay : bool;
rec__decadriver__driver_type__detect_frame_timeout : bool;
rec__decadriver__driver_type__detect_sfd_timeout : bool;
rec__decadriver__driver_type__detect_phr_error : bool;
rec__decadriver__driver_type__detect_rs_error : bool;
rec__decadriver__driver_type__detect_fcs_error : bool
}

function us_split_fields_Part_ID__projection(a: us_split_fields6) : bits_32 =
  (a).rec__decadriver__driver_type__part_id

function us_split_fields_Lot_ID__projection(a: us_split_fields6) : bits_32 =
  (a).rec__decadriver__driver_type__lot_id

function us_split_fields_Antenna_Delay_PRF_64__projection(a: us_split_fields6) : bits_16 =
  (a).rec__decadriver__driver_type__antenna_delay_prf_64

function us_split_fields_Antenna_Delay_PRF_16__projection(a: us_split_fields6) : bits_16 =
  (a).rec__decadriver__driver_type__antenna_delay_prf_16

function us_split_fields_XTAL_Trim__projection(a: us_split_fields6) : bits_5 =
  (a).rec__decadriver__driver_type__xtal_trim

function us_split_fields_OTP_Tx_Power_Levels__projection(a: us_split_fields6) : (int,bits_32) farray =
  (a).rec__decadriver__driver_type__otp_tx_power_levels

function us_split_fields_Long_Frames__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__long_frames

function us_split_fields_SYS_CFG_Reg__projection(a: us_split_fields6) : us_rep =
  (a).rec__decadriver__driver_type__sys_cfg_reg

function us_split_fields_Use_OTP_XTAL_Trim__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__use_otp_xtal_trim

function us_split_fields_Use_OTP_Antenna_Delay__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__use_otp_antenna_delay

function us_split_fields_Detect_Frame_Timeout__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__detect_frame_timeout

function us_split_fields_Detect_SFD_Timeout__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__detect_sfd_timeout

function us_split_fields_Detect_PHR_Error__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__detect_phr_error

function us_split_fields_Detect_RS_Error__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__detect_rs_error

function us_split_fields_Detect_FCS_Error__projection(a: us_split_fields6) : bool =
  (a).rec__decadriver__driver_type__detect_fcs_error

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___140__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___142__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic decadriver__driver_type__part_id__first__bit : int

logic decadriver__driver_type__part_id__last__bit : int

logic decadriver__driver_type__part_id__position : int

axiom decadriver__driver_type__part_id__first__bit_axiom :
  (0 <= decadriver__driver_type__part_id__first__bit)

axiom decadriver__driver_type__part_id__last__bit_axiom :
  (decadriver__driver_type__part_id__first__bit <  decadriver__driver_type__part_id__last__bit)

axiom decadriver__driver_type__part_id__position_axiom :
  (0 <= decadriver__driver_type__part_id__position)

logic decadriver__driver_type__lot_id__first__bit : int

logic decadriver__driver_type__lot_id__last__bit : int

logic decadriver__driver_type__lot_id__position : int

axiom decadriver__driver_type__lot_id__first__bit_axiom :
  (0 <= decadriver__driver_type__lot_id__first__bit)

axiom decadriver__driver_type__lot_id__last__bit_axiom :
  (decadriver__driver_type__lot_id__first__bit <  decadriver__driver_type__lot_id__last__bit)

axiom decadriver__driver_type__lot_id__position_axiom :
  (0 <= decadriver__driver_type__lot_id__position)

logic decadriver__driver_type__antenna_delay_prf_64__first__bit : int

logic decadriver__driver_type__antenna_delay_prf_64__last__bit : int

logic decadriver__driver_type__antenna_delay_prf_64__position : int

axiom decadriver__driver_type__antenna_delay_prf_64__first__bit_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_64__first__bit)

axiom decadriver__driver_type__antenna_delay_prf_64__last__bit_axiom :
  (decadriver__driver_type__antenna_delay_prf_64__first__bit <  decadriver__driver_type__antenna_delay_prf_64__last__bit)

axiom decadriver__driver_type__antenna_delay_prf_64__position_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_64__position)

logic decadriver__driver_type__antenna_delay_prf_16__first__bit : int

logic decadriver__driver_type__antenna_delay_prf_16__last__bit : int

logic decadriver__driver_type__antenna_delay_prf_16__position : int

axiom decadriver__driver_type__antenna_delay_prf_16__first__bit_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_16__first__bit)

axiom decadriver__driver_type__antenna_delay_prf_16__last__bit_axiom :
  (decadriver__driver_type__antenna_delay_prf_16__first__bit <  decadriver__driver_type__antenna_delay_prf_16__last__bit)

axiom decadriver__driver_type__antenna_delay_prf_16__position_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_16__position)

logic decadriver__driver_type__xtal_trim__first__bit : int

logic decadriver__driver_type__xtal_trim__last__bit : int

logic decadriver__driver_type__xtal_trim__position : int

axiom decadriver__driver_type__xtal_trim__first__bit_axiom :
  (0 <= decadriver__driver_type__xtal_trim__first__bit)

axiom decadriver__driver_type__xtal_trim__last__bit_axiom :
  (decadriver__driver_type__xtal_trim__first__bit <  decadriver__driver_type__xtal_trim__last__bit)

axiom decadriver__driver_type__xtal_trim__position_axiom :
  (0 <= decadriver__driver_type__xtal_trim__position)

logic decadriver__driver_type__otp_tx_power_levels__first__bit : int

logic decadriver__driver_type__otp_tx_power_levels__last__bit : int

logic decadriver__driver_type__otp_tx_power_levels__position : int

axiom decadriver__driver_type__otp_tx_power_levels__first__bit_axiom :
  (0 <= decadriver__driver_type__otp_tx_power_levels__first__bit)

axiom decadriver__driver_type__otp_tx_power_levels__last__bit_axiom :
  (decadriver__driver_type__otp_tx_power_levels__first__bit <  decadriver__driver_type__otp_tx_power_levels__last__bit)

axiom decadriver__driver_type__otp_tx_power_levels__position_axiom :
  (0 <= decadriver__driver_type__otp_tx_power_levels__position)

logic decadriver__driver_type__long_frames__first__bit : int

logic decadriver__driver_type__long_frames__last__bit : int

logic decadriver__driver_type__long_frames__position : int

axiom decadriver__driver_type__long_frames__first__bit_axiom :
  (0 <= decadriver__driver_type__long_frames__first__bit)

axiom decadriver__driver_type__long_frames__last__bit_axiom :
  (decadriver__driver_type__long_frames__first__bit <  decadriver__driver_type__long_frames__last__bit)

axiom decadriver__driver_type__long_frames__position_axiom :
  (0 <= decadriver__driver_type__long_frames__position)

logic decadriver__driver_type__sys_cfg_reg__first__bit : int

logic decadriver__driver_type__sys_cfg_reg__last__bit : int

logic decadriver__driver_type__sys_cfg_reg__position : int

axiom decadriver__driver_type__sys_cfg_reg__first__bit_axiom :
  (0 <= decadriver__driver_type__sys_cfg_reg__first__bit)

axiom decadriver__driver_type__sys_cfg_reg__last__bit_axiom :
  (decadriver__driver_type__sys_cfg_reg__first__bit <  decadriver__driver_type__sys_cfg_reg__last__bit)

axiom decadriver__driver_type__sys_cfg_reg__position_axiom :
  (0 <= decadriver__driver_type__sys_cfg_reg__position)

logic decadriver__driver_type__use_otp_xtal_trim__first__bit : int

logic decadriver__driver_type__use_otp_xtal_trim__last__bit : int

logic decadriver__driver_type__use_otp_xtal_trim__position : int

axiom decadriver__driver_type__use_otp_xtal_trim__first__bit_axiom :
  (0 <= decadriver__driver_type__use_otp_xtal_trim__first__bit)

axiom decadriver__driver_type__use_otp_xtal_trim__last__bit_axiom :
  (decadriver__driver_type__use_otp_xtal_trim__first__bit <  decadriver__driver_type__use_otp_xtal_trim__last__bit)

axiom decadriver__driver_type__use_otp_xtal_trim__position_axiom :
  (0 <= decadriver__driver_type__use_otp_xtal_trim__position)

logic decadriver__driver_type__use_otp_antenna_delay__first__bit : int

logic decadriver__driver_type__use_otp_antenna_delay__last__bit : int

logic decadriver__driver_type__use_otp_antenna_delay__position : int

axiom decadriver__driver_type__use_otp_antenna_delay__first__bit_axiom :
  (0 <= decadriver__driver_type__use_otp_antenna_delay__first__bit)

axiom decadriver__driver_type__use_otp_antenna_delay__last__bit_axiom :
  (decadriver__driver_type__use_otp_antenna_delay__first__bit <  decadriver__driver_type__use_otp_antenna_delay__last__bit)

axiom decadriver__driver_type__use_otp_antenna_delay__position_axiom :
  (0 <= decadriver__driver_type__use_otp_antenna_delay__position)

logic decadriver__driver_type__detect_frame_timeout__first__bit : int

logic decadriver__driver_type__detect_frame_timeout__last__bit : int

logic decadriver__driver_type__detect_frame_timeout__position : int

axiom decadriver__driver_type__detect_frame_timeout__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_frame_timeout__first__bit)

axiom decadriver__driver_type__detect_frame_timeout__last__bit_axiom :
  (decadriver__driver_type__detect_frame_timeout__first__bit <  decadriver__driver_type__detect_frame_timeout__last__bit)

axiom decadriver__driver_type__detect_frame_timeout__position_axiom :
  (0 <= decadriver__driver_type__detect_frame_timeout__position)

logic decadriver__driver_type__detect_sfd_timeout__first__bit : int

logic decadriver__driver_type__detect_sfd_timeout__last__bit : int

logic decadriver__driver_type__detect_sfd_timeout__position : int

axiom decadriver__driver_type__detect_sfd_timeout__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_sfd_timeout__first__bit)

axiom decadriver__driver_type__detect_sfd_timeout__last__bit_axiom :
  (decadriver__driver_type__detect_sfd_timeout__first__bit <  decadriver__driver_type__detect_sfd_timeout__last__bit)

axiom decadriver__driver_type__detect_sfd_timeout__position_axiom :
  (0 <= decadriver__driver_type__detect_sfd_timeout__position)

logic decadriver__driver_type__detect_phr_error__first__bit : int

logic decadriver__driver_type__detect_phr_error__last__bit : int

logic decadriver__driver_type__detect_phr_error__position : int

axiom decadriver__driver_type__detect_phr_error__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_phr_error__first__bit)

axiom decadriver__driver_type__detect_phr_error__last__bit_axiom :
  (decadriver__driver_type__detect_phr_error__first__bit <  decadriver__driver_type__detect_phr_error__last__bit)

axiom decadriver__driver_type__detect_phr_error__position_axiom :
  (0 <= decadriver__driver_type__detect_phr_error__position)

logic decadriver__driver_type__detect_rs_error__first__bit : int

logic decadriver__driver_type__detect_rs_error__last__bit : int

logic decadriver__driver_type__detect_rs_error__position : int

axiom decadriver__driver_type__detect_rs_error__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_rs_error__first__bit)

axiom decadriver__driver_type__detect_rs_error__last__bit_axiom :
  (decadriver__driver_type__detect_rs_error__first__bit <  decadriver__driver_type__detect_rs_error__last__bit)

axiom decadriver__driver_type__detect_rs_error__position_axiom :
  (0 <= decadriver__driver_type__detect_rs_error__position)

logic decadriver__driver_type__detect_fcs_error__first__bit : int

logic decadriver__driver_type__detect_fcs_error__last__bit : int

logic decadriver__driver_type__detect_fcs_error__position : int

axiom decadriver__driver_type__detect_fcs_error__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_fcs_error__first__bit)

axiom decadriver__driver_type__detect_fcs_error__last__bit_axiom :
  (decadriver__driver_type__detect_fcs_error__first__bit <  decadriver__driver_type__detect_fcs_error__last__bit)

axiom decadriver__driver_type__detect_fcs_error__position_axiom :
  (0 <= decadriver__driver_type__detect_fcs_error__position)

logic user_eq12 : us_rep3, us_rep3 -> bool

type driver_type__ref = { driver_type__content : us_rep3
}

function driver_type__ref___projection(a: driver_type__ref) : us_rep3 =
  (a).driver_type__content

logic temp___4490 : t2 -> (int,bits_32) farray

axiom def_axiom :
  (forall temp___4492:t2.
  (forall temp___4493:int.
  ((temp___4490(temp___4492)[temp___4493]) = of_rep3(temp___4492))))

logic load_antenna_delay : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic load_xtal_trim : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic load_tx_power_levels : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic load_ucode_from_rom : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic temp___4616 : t2 -> (int,bits_32) farray

axiom def_axiom1 :
  (forall temp___4618:t2.
  (forall temp___4619:int.
  ((temp___4616(temp___4618)[temp___4619]) = of_rep3(temp___4618))))

logic word : t2

logic i : int

logic self__ : bits_32

logic self__1 : bits_32

logic self__2 : bits_16

logic self__3 : bits_16

logic self__4 : bits_5

logic self__5 : (int,bits_32) farray

logic self__6 : bool

logic self__7 : bits_1

logic self__8 : bits_1

logic self__9 : bits_1

logic self__10 : bits_1

logic self__11 : bits_1

logic self__12 : bits_1

logic self__13 : bits_1

logic self__14 : bits_1

logic self__15 : bits_1

logic self__16 : bits_1

logic self__17 : bits_1

logic self__18 : bits_1

logic self__19 : bits_1

logic self__20 : bits_1

logic self__21 : bits_1

logic self__22 : bits_1

logic self__23 : bits_2

logic self__24 : bits_1

logic self__25 : bits_1

logic self__26 : bits_1

logic self__27 : bits_1

logic self__28 : bits_1

logic self__29 : bits_1

logic self__30 : bits_3

logic self__31 : bits_5

logic self__32 : bool

logic self__33 : bool

logic self__34 : bool

logic self__35 : bool

logic self__36 : bool

logic self__37 : bool

logic self__38 : bool

logic o : bits_32

logic o1 : bits_32

logic o2 : bits_32

logic o3 : bits_16

logic o4 : bits_16

logic o5 : bits_5

logic o6 : (int,bits_32) farray

logic o7 : bool

logic o8 : bits_1

logic o9 : bits_1

logic o10 : bits_1

logic o11 : bits_1

logic o12 : bits_1

logic o13 : bits_1

logic o14 : bits_1

logic o15 : bits_1

logic o16 : bits_1

logic o17 : bits_1

logic o18 : bits_1

logic o19 : bits_1

logic o20 : bits_1

logic o21 : bits_1

logic o22 : bits_1

logic o23 : bits_1

logic o24 : bits_2

logic o25 : bits_1

logic o26 : bits_1

logic o27 : bits_1

logic o28 : bits_1

logic o29 : bits_1

logic o30 : bits_1

logic o31 : bits_3

logic o32 : bits_5

logic o33 : bool

logic o34 : bool

logic o35 : bool

logic o36 : bool

logic o37 : bool

logic o38 : bool

logic o39 : bool

logic o40 : bits_32

logic o41 : bits_32

logic o42 : bits_16

logic o43 : bits_16

logic o44 : bits_5

logic o45 : (int,bits_32) farray

logic o46 : bool

logic o47 : bits_1

logic o48 : bits_1

logic o49 : bits_1

logic o50 : bits_1

logic o51 : bits_1

logic o52 : bits_1

logic o53 : bits_1

logic o54 : bits_1

logic o55 : bits_1

logic o56 : bits_1

logic o57 : bits_1

logic o58 : bits_1

logic o59 : bits_1

logic o60 : bits_1

logic o61 : bits_1

logic o62 : bits_1

logic o63 : bits_2

logic o64 : bits_1

logic o65 : bits_1

logic o66 : bits_1

logic o67 : bits_1

logic o68 : bits_1

logic o69 : bits_1

logic o70 : bits_3

logic o71 : bits_5

logic o72 : bool

logic o73 : bool

logic o74 : bool

logic o75 : bool

logic o76 : bool

logic o77 : bool

logic o78 : bool

logic o79 : bits_32

logic o80 : bits_32

logic o81 : bits_32

logic o82 : bits_16

logic o83 : bits_16

logic o84 : bits_5

logic o85 : (int,bits_32) farray

logic o86 : bool

logic o87 : bits_1

logic o88 : bits_1

logic o89 : bits_1

logic o90 : bits_1

logic o91 : bits_1

logic o92 : bits_1

logic o93 : bits_1

logic o94 : bits_1

logic o95 : bits_1

logic o96 : bits_1

logic o97 : bits_1

logic o98 : bits_1

logic o99 : bits_1

logic o100 : bits_1

logic o101 : bits_1

logic o102 : bits_1

logic o103 : bits_2

logic o104 : bits_1

logic o105 : bits_1

logic o106 : bits_1

logic o107 : bits_1

logic o108 : bits_1

logic o109 : bits_1

logic o110 : bits_3

logic o111 : bits_5

logic o112 : bool

logic o113 : bool

logic o114 : bool

logic o115 : bool

logic o116 : bool

logic o117 : bool

logic o118 : bool

logic o119 : bits_32

logic o120 : bits_32

logic o121 : bits_16

logic o122 : bits_16

logic o123 : bits_5

logic o124 : (int,bits_32) farray

logic o125 : bool

logic o126 : bits_1

logic o127 : bits_1

logic o128 : bits_1

logic o129 : bits_1

logic o130 : bits_1

logic o131 : bits_1

logic o132 : bits_1

logic o133 : bits_1

logic o134 : bits_1

logic o135 : bits_1

logic o136 : bits_1

logic o137 : bits_1

logic o138 : bits_1

logic o139 : bits_1

logic o140 : bits_1

logic o141 : bits_1

logic o142 : bits_2

logic o143 : bits_1

logic o144 : bits_1

logic o145 : bits_1

logic o146 : bits_1

logic o147 : bits_1

logic o148 : bits_1

logic o149 : bits_3

logic o150 : bits_5

logic o151 : bool

logic o152 : bool

logic o153 : bool

logic o154 : bool

logic o155 : bool

logic o156 : bool

logic o157 : bool

logic o158 : bits_16

logic o159 : bits_32

logic o160 : bits_32

logic o161 : bits_16

logic o162 : bits_16

logic o163 : bits_5

logic o164 : (int,bits_32) farray

logic o165 : bool

logic o166 : bits_1

logic o167 : bits_1

logic o168 : bits_1

logic o169 : bits_1

logic o170 : bits_1

logic o171 : bits_1

logic o172 : bits_1

logic o173 : bits_1

logic o174 : bits_1

logic o175 : bits_1

logic o176 : bits_1

logic o177 : bits_1

logic o178 : bits_1

logic o179 : bits_1

logic o180 : bits_1

logic o181 : bits_1

logic o182 : bits_2

logic o183 : bits_1

logic o184 : bits_1

logic o185 : bits_1

logic o186 : bits_1

logic o187 : bits_1

logic o188 : bits_1

logic o189 : bits_3

logic o190 : bits_5

logic o191 : bool

logic o192 : bool

logic o193 : bool

logic o194 : bool

logic o195 : bool

logic o196 : bool

logic o197 : bool

logic o198 : bits_32

logic o199 : bits_32

logic o200 : bits_16

logic o201 : bits_16

logic o202 : bits_5

logic o203 : (int,bits_32) farray

logic o204 : bool

logic o205 : bits_1

logic o206 : bits_1

logic o207 : bits_1

logic o208 : bits_1

logic o209 : bits_1

logic o210 : bits_1

logic o211 : bits_1

logic o212 : bits_1

logic o213 : bits_1

logic o214 : bits_1

logic o215 : bits_1

logic o216 : bits_1

logic o217 : bits_1

logic o218 : bits_1

logic o219 : bits_1

logic o220 : bits_1

logic o221 : bits_2

logic o222 : bits_1

logic o223 : bits_1

logic o224 : bits_1

logic o225 : bits_1

logic o226 : bits_1

logic o227 : bits_1

logic o228 : bits_3

logic o229 : bits_5

logic o230 : bool

logic o231 : bool

logic o232 : bool

logic o233 : bool

logic o234 : bool

logic o235 : bool

logic o236 : bool

logic o237 : bits_16

logic o238 : bits_32

logic o239 : bits_32

logic o240 : bits_16

logic o241 : bits_16

logic o242 : bits_5

logic o243 : (int,bits_32) farray

logic o244 : bool

logic o245 : bits_1

logic o246 : bits_1

logic o247 : bits_1

logic o248 : bits_1

logic o249 : bits_1

logic o250 : bits_1

logic o251 : bits_1

logic o252 : bits_1

logic o253 : bits_1

logic o254 : bits_1

logic o255 : bits_1

logic o256 : bits_1

logic o257 : bits_1

logic o258 : bits_1

logic o259 : bits_1

logic o260 : bits_1

logic o261 : bits_2

logic o262 : bits_1

logic o263 : bits_1

logic o264 : bits_1

logic o265 : bits_1

logic o266 : bits_1

logic o267 : bits_1

logic o268 : bits_3

logic o269 : bits_5

logic o270 : bool

logic o271 : bool

logic o272 : bool

logic o273 : bool

logic o274 : bool

logic o275 : bool

logic o276 : bool

logic o277 : bits_32

logic o278 : bits_32

logic o279 : bits_16

logic o280 : bits_16

logic o281 : bits_5

logic o282 : (int,bits_32) farray

logic o283 : bool

logic o284 : bits_1

logic o285 : bits_1

logic o286 : bits_1

logic o287 : bits_1

logic o288 : bits_1

logic o289 : bits_1

logic o290 : bits_1

logic o291 : bits_1

logic o292 : bits_1

logic o293 : bits_1

logic o294 : bits_1

logic o295 : bits_1

logic o296 : bits_1

logic o297 : bits_1

logic o298 : bits_1

logic o299 : bits_1

logic o300 : bits_2

logic o301 : bits_1

logic o302 : bits_1

logic o303 : bits_1

logic o304 : bits_1

logic o305 : bits_1

logic o306 : bits_1

logic o307 : bits_3

logic o308 : bits_5

logic o309 : bool

logic o310 : bool

logic o311 : bool

logic o312 : bool

logic o313 : bool

logic o314 : bool

logic o315 : bool

logic o316 : bits_16

logic o317 : bits_32

logic o318 : bits_32

logic o319 : bits_16

logic o320 : bits_16

logic o321 : bits_5

logic o322 : (int,bits_32) farray

logic o323 : bool

logic o324 : bits_1

logic o325 : bits_1

logic o326 : bits_1

logic o327 : bits_1

logic o328 : bits_1

logic o329 : bits_1

logic o330 : bits_1

logic o331 : bits_1

logic o332 : bits_1

logic o333 : bits_1

logic o334 : bits_1

logic o335 : bits_1

logic o336 : bits_1

logic o337 : bits_1

logic o338 : bits_1

logic o339 : bits_1

logic o340 : bits_2

logic o341 : bits_1

logic o342 : bits_1

logic o343 : bits_1

logic o344 : bits_1

logic o345 : bits_1

logic o346 : bits_1

logic o347 : bits_3

logic o348 : bits_5

logic o349 : bool

logic o350 : bool

logic o351 : bool

logic o352 : bool

logic o353 : bool

logic o354 : bool

logic o355 : bool

logic o356 : bits_32

logic o357 : bits_32

logic o358 : bits_16

logic o359 : bits_16

logic o360 : bits_5

logic o361 : (int,bits_32) farray

logic o362 : bool

logic o363 : bits_1

logic o364 : bits_1

logic o365 : bits_1

logic o366 : bits_1

logic o367 : bits_1

logic o368 : bits_1

logic o369 : bits_1

logic o370 : bits_1

logic o371 : bits_1

logic o372 : bits_1

logic o373 : bits_1

logic o374 : bits_1

logic o375 : bits_1

logic o376 : bits_1

logic o377 : bits_1

logic o378 : bits_1

logic o379 : bits_2

logic o380 : bits_1

logic o381 : bits_1

logic o382 : bits_1

logic o383 : bits_1

logic o384 : bits_1

logic o385 : bits_1

logic o386 : bits_3

logic o387 : bits_5

logic o388 : bool

logic o389 : bool

logic o390 : bool

logic o391 : bool

logic o392 : bool

logic o393 : bool

logic o394 : bool

logic o395 : bits_16

logic o396 : bits_32

logic o397 : bits_32

logic o398 : bits_16

logic o399 : bits_16

logic o400 : bits_5

logic o401 : (int,bits_32) farray

logic o402 : bool

logic o403 : bits_1

logic o404 : bits_1

logic o405 : bits_1

logic o406 : bits_1

logic o407 : bits_1

logic o408 : bits_1

logic o409 : bits_1

logic o410 : bits_1

logic o411 : bits_1

logic o412 : bits_1

logic o413 : bits_1

logic o414 : bits_1

logic o415 : bits_1

logic o416 : bits_1

logic o417 : bits_1

logic o418 : bits_1

logic o419 : bits_2

logic o420 : bits_1

logic o421 : bits_1

logic o422 : bits_1

logic o423 : bits_1

logic o424 : bits_1

logic o425 : bits_1

logic o426 : bits_3

logic o427 : bits_5

logic o428 : bool

logic o429 : bool

logic o430 : bool

logic o431 : bool

logic o432 : bool

logic o433 : bool

logic o434 : bool

logic o435 : bits_32

logic o436 : bits_32

logic o437 : bits_16

logic o438 : bits_16

logic o439 : bits_5

logic o440 : (int,bits_32) farray

logic o441 : bool

logic o442 : bits_1

logic o443 : bits_1

logic o444 : bits_1

logic o445 : bits_1

logic o446 : bits_1

logic o447 : bits_1

logic o448 : bits_1

logic o449 : bits_1

logic o450 : bits_1

logic o451 : bits_1

logic o452 : bits_1

logic o453 : bits_1

logic o454 : bits_1

logic o455 : bits_1

logic o456 : bits_1

logic o457 : bits_1

logic o458 : bits_2

logic o459 : bits_1

logic o460 : bits_1

logic o461 : bits_1

logic o462 : bits_1

logic o463 : bits_1

logic o464 : bits_1

logic o465 : bits_3

logic o466 : bits_5

logic o467 : bool

logic o468 : bool

logic o469 : bool

logic o470 : bool

logic o471 : bool

logic o472 : bool

logic o473 : bool

logic o474 : bits_5

logic o475 : bits_32

logic o476 : bits_32

logic o477 : bits_16

logic o478 : bits_16

logic o479 : bits_5

logic o480 : (int,bits_32) farray

logic o481 : bool

logic o482 : bits_1

logic o483 : bits_1

logic o484 : bits_1

logic o485 : bits_1

logic o486 : bits_1

logic o487 : bits_1

logic o488 : bits_1

logic o489 : bits_1

logic o490 : bits_1

logic o491 : bits_1

logic o492 : bits_1

logic o493 : bits_1

logic o494 : bits_1

logic o495 : bits_1

logic o496 : bits_1

logic o497 : bits_1

logic o498 : bits_2

logic o499 : bits_1

logic o500 : bits_1

logic o501 : bits_1

logic o502 : bits_1

logic o503 : bits_1

logic o504 : bits_1

logic o505 : bits_3

logic o506 : bits_5

logic o507 : bool

logic o508 : bool

logic o509 : bool

logic o510 : bool

logic o511 : bool

logic o512 : bool

logic o513 : bool

logic o514 : bits_32

logic o515 : bits_32

logic o516 : bits_16

logic o517 : bits_16

logic o518 : bits_5

logic o519 : (int,bits_32) farray

logic o520 : bool

logic o521 : bits_1

logic o522 : bits_1

logic o523 : bits_1

logic o524 : bits_1

logic o525 : bits_1

logic o526 : bits_1

logic o527 : bits_1

logic o528 : bits_1

logic o529 : bits_1

logic o530 : bits_1

logic o531 : bits_1

logic o532 : bits_1

logic o533 : bits_1

logic o534 : bits_1

logic o535 : bits_1

logic o536 : bits_1

logic o537 : bits_2

logic o538 : bits_1

logic o539 : bits_1

logic o540 : bits_1

logic o541 : bits_1

logic o542 : bits_1

logic o543 : bits_1

logic o544 : bits_3

logic o545 : bits_5

logic o546 : bool

logic o547 : bool

logic o548 : bool

logic o549 : bool

logic o550 : bool

logic o551 : bool

logic o552 : bool

logic o553 : bits_5

logic o554 : bits_32

logic o555 : bits_32

logic o556 : bits_16

logic o557 : bits_16

logic o558 : bits_5

logic o559 : (int,bits_32) farray

logic o560 : bool

logic o561 : bits_1

logic o562 : bits_1

logic o563 : bits_1

logic o564 : bits_1

logic o565 : bits_1

logic o566 : bits_1

logic o567 : bits_1

logic o568 : bits_1

logic o569 : bits_1

logic o570 : bits_1

logic o571 : bits_1

logic o572 : bits_1

logic o573 : bits_1

logic o574 : bits_1

logic o575 : bits_1

logic o576 : bits_1

logic o577 : bits_2

logic o578 : bits_1

logic o579 : bits_1

logic o580 : bits_1

logic o581 : bits_1

logic o582 : bits_1

logic o583 : bits_1

logic o584 : bits_3

logic o585 : bits_5

logic o586 : bool

logic o587 : bool

logic o588 : bool

logic o589 : bool

logic o590 : bool

logic o591 : bool

logic o592 : bool

logic o593 : bits_32

logic o594 : bits_32

logic o595 : bits_16

logic o596 : bits_16

logic o597 : bits_5

logic o598 : (int,bits_32) farray

logic o599 : bool

logic o600 : bits_1

logic o601 : bits_1

logic o602 : bits_1

logic o603 : bits_1

logic o604 : bits_1

logic o605 : bits_1

logic o606 : bits_1

logic o607 : bits_1

logic o608 : bits_1

logic o609 : bits_1

logic o610 : bits_1

logic o611 : bits_1

logic o612 : bits_1

logic o613 : bits_1

logic o614 : bits_1

logic o615 : bits_1

logic o616 : bits_2

logic o617 : bits_1

logic o618 : bits_1

logic o619 : bits_1

logic o620 : bits_1

logic o621 : bits_1

logic o622 : bits_1

logic o623 : bits_3

logic o624 : bits_5

logic o625 : bool

logic o626 : bool

logic o627 : bool

logic o628 : bool

logic o629 : bool

logic o630 : bool

logic o631 : bool

logic o632 : int

logic o633 : t1

logic o634 : bits_32

logic o635 : (int,bits_32) farray

logic o636 : bits_32

logic o637 : bits_32

logic o638 : bits_16

logic o639 : bits_16

logic o640 : bits_5

logic o641 : (int,bits_32) farray

logic o642 : bool

logic o643 : bits_1

logic o644 : bits_1

logic o645 : bits_1

logic o646 : bits_1

logic o647 : bits_1

logic o648 : bits_1

logic o649 : bits_1

logic o650 : bits_1

logic o651 : bits_1

logic o652 : bits_1

logic o653 : bits_1

logic o654 : bits_1

logic o655 : bits_1

logic o656 : bits_1

logic o657 : bits_1

logic o658 : bits_1

logic o659 : bits_2

logic o660 : bits_1

logic o661 : bits_1

logic o662 : bits_1

logic o663 : bits_1

logic o664 : bits_1

logic o665 : bits_1

logic o666 : bits_3

logic o667 : bits_5

logic o668 : bool

logic o669 : bool

logic o670 : bool

logic o671 : bool

logic o672 : bool

logic o673 : bool

logic o674 : bool

logic o675 : bits_32

logic o676 : bits_32

logic o677 : bits_16

logic o678 : bits_16

logic o679 : bits_5

logic o680 : (int,bits_32) farray

logic o681 : bool

logic o682 : bits_1

logic o683 : bits_1

logic o684 : bits_1

logic o685 : bits_1

logic o686 : bits_1

logic o687 : bits_1

logic o688 : bits_1

logic o689 : bits_1

logic o690 : bits_1

logic o691 : bits_1

logic o692 : bits_1

logic o693 : bits_1

logic o694 : bits_1

logic o695 : bits_1

logic o696 : bits_1

logic o697 : bits_1

logic o698 : bits_2

logic o699 : bits_1

logic o700 : bits_1

logic o701 : bits_1

logic o702 : bits_1

logic o703 : bits_1

logic o704 : bits_1

logic o705 : bits_3

logic o706 : bits_5

logic o707 : bool

logic o708 : bool

logic o709 : bool

logic o710 : bool

logic o711 : bool

logic o712 : bool

logic o713 : bool

logic o714 : int

logic o715 : t1

logic o716 : bits_32

logic o717 : (int,bits_32) farray

logic o718 : bits_32

logic o719 : bits_32

logic o720 : bits_16

logic o721 : bits_16

logic o722 : bits_5

logic o723 : (int,bits_32) farray

logic o724 : bool

logic o725 : bits_1

logic o726 : bits_1

logic o727 : bits_1

logic o728 : bits_1

logic o729 : bits_1

logic o730 : bits_1

logic o731 : bits_1

logic o732 : bits_1

logic o733 : bits_1

logic o734 : bits_1

logic o735 : bits_1

logic o736 : bits_1

logic o737 : bits_1

logic o738 : bits_1

logic o739 : bits_1

logic o740 : bits_1

logic o741 : bits_2

logic o742 : bits_1

logic o743 : bits_1

logic o744 : bits_1

logic o745 : bits_1

logic o746 : bits_1

logic o747 : bits_1

logic o748 : bits_3

logic o749 : bits_5

logic o750 : bool

logic o751 : bool

logic o752 : bool

logic o753 : bool

logic o754 : bool

logic o755 : bool

logic o756 : bool

logic o757 : bits_32

logic o758 : bits_32

logic o759 : bits_16

logic o760 : bits_16

logic o761 : bits_5

logic o762 : (int,bits_32) farray

logic o763 : bool

logic o764 : bits_1

logic o765 : bits_1

logic o766 : bits_1

logic o767 : bits_1

logic o768 : bits_1

logic o769 : bits_1

logic o770 : bits_1

logic o771 : bits_1

logic o772 : bits_1

logic o773 : bits_1

logic o774 : bits_1

logic o775 : bits_1

logic o776 : bits_1

logic o777 : bits_1

logic o778 : bits_1

logic o779 : bits_1

logic o780 : bits_2

logic o781 : bits_1

logic o782 : bits_1

logic o783 : bits_1

logic o784 : bits_1

logic o785 : bits_1

logic o786 : bits_1

logic o787 : bits_3

logic o788 : bits_5

logic o789 : bool

logic o790 : bool

logic o791 : bool

logic o792 : bool

logic o793 : bool

logic o794 : bool

logic o795 : bool

logic o796 : int

logic o797 : t1

logic o798 : bits_32

logic o799 : (int,bits_32) farray

logic o800 : bits_32

logic o801 : bits_32

logic o802 : bits_16

logic o803 : bits_16

logic o804 : bits_5

logic o805 : (int,bits_32) farray

logic o806 : bool

logic o807 : bits_1

logic o808 : bits_1

logic o809 : bits_1

logic o810 : bits_1

logic o811 : bits_1

logic o812 : bits_1

logic o813 : bits_1

logic o814 : bits_1

logic o815 : bits_1

logic o816 : bits_1

logic o817 : bits_1

logic o818 : bits_1

logic o819 : bits_1

logic o820 : bits_1

logic o821 : bits_1

logic o822 : bits_1

logic o823 : bits_2

logic o824 : bits_1

logic o825 : bits_1

logic o826 : bits_1

logic o827 : bits_1

logic o828 : bits_1

logic o829 : bits_1

logic o830 : bits_3

logic o831 : bits_5

logic o832 : bool

logic o833 : bool

logic o834 : bool

logic o835 : bool

logic o836 : bool

logic o837 : bool

logic o838 : bool

logic o839 : bits_32

logic o840 : bits_32

logic o841 : bits_16

logic o842 : bits_16

logic o843 : bits_5

logic o844 : (int,bits_32) farray

logic o845 : bool

logic o846 : bits_1

logic o847 : bits_1

logic o848 : bits_1

logic o849 : bits_1

logic o850 : bits_1

logic o851 : bits_1

logic o852 : bits_1

logic o853 : bits_1

logic o854 : bits_1

logic o855 : bits_1

logic o856 : bits_1

logic o857 : bits_1

logic o858 : bits_1

logic o859 : bits_1

logic o860 : bits_1

logic o861 : bits_1

logic o862 : bits_2

logic o863 : bits_1

logic o864 : bits_1

logic o865 : bits_1

logic o866 : bits_1

logic o867 : bits_1

logic o868 : bits_1

logic o869 : bits_3

logic o870 : bits_5

logic o871 : bool

logic o872 : bool

logic o873 : bool

logic o874 : bool

logic o875 : bool

logic o876 : bool

logic o877 : bool

logic o878 : int

logic o879 : t1

logic o880 : bits_32

logic o881 : (int,bits_32) farray

logic o882 : bits_32

logic o883 : bits_32

logic o884 : bits_16

logic o885 : bits_16

logic o886 : bits_5

logic o887 : (int,bits_32) farray

logic o888 : bool

logic o889 : bits_1

logic o890 : bits_1

logic o891 : bits_1

logic o892 : bits_1

logic o893 : bits_1

logic o894 : bits_1

logic o895 : bits_1

logic o896 : bits_1

logic o897 : bits_1

logic o898 : bits_1

logic o899 : bits_1

logic o900 : bits_1

logic o901 : bits_1

logic o902 : bits_1

logic o903 : bits_1

logic o904 : bits_1

logic o905 : bits_2

logic o906 : bits_1

logic o907 : bits_1

logic o908 : bits_1

logic o909 : bits_1

logic o910 : bits_1

logic o911 : bits_1

logic o912 : bits_3

logic o913 : bits_5

logic o914 : bool

logic o915 : bool

logic o916 : bool

logic o917 : bool

logic o918 : bool

logic o919 : bool

logic o920 : bool

logic o921 : bits_32

logic o922 : bits_32

logic o923 : bits_16

logic o924 : bits_16

logic o925 : bits_5

logic o926 : (int,bits_32) farray

logic o927 : bool

logic o928 : bits_1

logic o929 : bits_1

logic o930 : bits_1

logic o931 : bits_1

logic o932 : bits_1

logic o933 : bits_1

logic o934 : bits_1

logic o935 : bits_1

logic o936 : bits_1

logic o937 : bits_1

logic o938 : bits_1

logic o939 : bits_1

logic o940 : bits_1

logic o941 : bits_1

logic o942 : bits_1

logic o943 : bits_1

logic o944 : bits_2

logic o945 : bits_1

logic o946 : bits_1

logic o947 : bits_1

logic o948 : bits_1

logic o949 : bits_1

logic o950 : bits_1

logic o951 : bits_3

logic o952 : bits_5

logic o953 : bool

logic o954 : bool

logic o955 : bool

logic o956 : bool

logic o957 : bool

logic o958 : bool

logic o959 : bool

logic o960 : int

logic o961 : t1

logic o962 : bits_32

logic o963 : (int,bits_32) farray

logic o964 : bits_32

logic o965 : bits_32

logic o966 : bits_16

logic o967 : bits_16

logic o968 : bits_5

logic o969 : (int,bits_32) farray

logic o970 : bool

logic o971 : bits_1

logic o972 : bits_1

logic o973 : bits_1

logic o974 : bits_1

logic o975 : bits_1

logic o976 : bits_1

logic o977 : bits_1

logic o978 : bits_1

logic o979 : bits_1

logic o980 : bits_1

logic o981 : bits_1

logic o982 : bits_1

logic o983 : bits_1

logic o984 : bits_1

logic o985 : bits_1

logic o986 : bits_1

logic o987 : bits_2

logic o988 : bits_1

logic o989 : bits_1

logic o990 : bits_1

logic o991 : bits_1

logic o992 : bits_1

logic o993 : bits_1

logic o994 : bits_3

logic o995 : bits_5

logic o996 : bool

logic o997 : bool

logic o998 : bool

logic o999 : bool

logic o1000 : bool

logic o1001 : bool

logic o1002 : bool

logic o1003 : bits_32

logic o1004 : bits_32

logic o1005 : bits_16

logic o1006 : bits_16

logic o1007 : bits_5

logic o1008 : (int,bits_32) farray

logic o1009 : bool

logic o1010 : bits_1

logic o1011 : bits_1

logic o1012 : bits_1

logic o1013 : bits_1

logic o1014 : bits_1

logic o1015 : bits_1

logic o1016 : bits_1

logic o1017 : bits_1

logic o1018 : bits_1

logic o1019 : bits_1

logic o1020 : bits_1

logic o1021 : bits_1

logic o1022 : bits_1

logic o1023 : bits_1

logic o1024 : bits_1

logic o1025 : bits_1

logic o1026 : bits_2

logic o1027 : bits_1

logic o1028 : bits_1

logic o1029 : bits_1

logic o1030 : bits_1

logic o1031 : bits_1

logic o1032 : bits_1

logic o1033 : bits_3

logic o1034 : bits_5

logic o1035 : bool

logic o1036 : bool

logic o1037 : bool

logic o1038 : bool

logic o1039 : bool

logic o1040 : bool

logic o1041 : bool

logic o1042 : int

logic o1043 : t1

logic o1044 : bits_32

logic o1045 : (int,bits_32) farray

logic o1046 : bits_32

logic o1047 : bits_32

logic o1048 : bits_16

logic o1049 : bits_16

logic o1050 : bits_5

logic o1051 : (int,bits_32) farray

logic o1052 : bool

logic o1053 : bits_1

logic o1054 : bits_1

logic o1055 : bits_1

logic o1056 : bits_1

logic o1057 : bits_1

logic o1058 : bits_1

logic o1059 : bits_1

logic o1060 : bits_1

logic o1061 : bits_1

logic o1062 : bits_1

logic o1063 : bits_1

logic o1064 : bits_1

logic o1065 : bits_1

logic o1066 : bits_1

logic o1067 : bits_1

logic o1068 : bits_1

logic o1069 : bits_2

logic o1070 : bits_1

logic o1071 : bits_1

logic o1072 : bits_1

logic o1073 : bits_1

logic o1074 : bits_1

logic o1075 : bits_1

logic o1076 : bits_3

logic o1077 : bits_5

logic o1078 : bool

logic o1079 : bool

logic o1080 : bool

logic o1081 : bool

logic o1082 : bool

logic o1083 : bool

logic o1084 : bool

logic o1085 : bits_32

logic o1086 : bits_32

logic o1087 : bits_16

logic o1088 : bits_16

logic o1089 : bits_5

logic o1090 : (int,bits_32) farray

logic o1091 : bool

logic o1092 : bits_1

logic o1093 : bits_1

logic o1094 : bits_1

logic o1095 : bits_1

logic o1096 : bits_1

logic o1097 : bits_1

logic o1098 : bits_1

logic o1099 : bits_1

logic o1100 : bits_1

logic o1101 : bits_1

logic o1102 : bits_1

logic o1103 : bits_1

logic o1104 : bits_1

logic o1105 : bits_1

logic o1106 : bits_1

logic o1107 : bits_1

logic o1108 : bits_2

logic o1109 : bits_1

logic o1110 : bits_1

logic o1111 : bits_1

logic o1112 : bits_1

logic o1113 : bits_1

logic o1114 : bits_1

logic o1115 : bits_3

logic o1116 : bits_5

logic o1117 : bool

logic o1118 : bool

logic o1119 : bool

logic o1120 : bool

logic o1121 : bool

logic o1122 : bool

logic o1123 : bool

logic o1124 : int

logic o1125 : t1

logic o1126 : bits_32

logic o1127 : (int,bits_32) farray

logic o1128 : bits_32

logic o1129 : bits_32

logic o1130 : bits_16

logic o1131 : bits_16

logic o1132 : bits_5

logic o1133 : (int,bits_32) farray

logic o1134 : bool

logic o1135 : bits_1

logic o1136 : bits_1

logic o1137 : bits_1

logic o1138 : bits_1

logic o1139 : bits_1

logic o1140 : bits_1

logic o1141 : bits_1

logic o1142 : bits_1

logic o1143 : bits_1

logic o1144 : bits_1

logic o1145 : bits_1

logic o1146 : bits_1

logic o1147 : bits_1

logic o1148 : bits_1

logic o1149 : bits_1

logic o1150 : bits_1

logic o1151 : bits_2

logic o1152 : bits_1

logic o1153 : bits_1

logic o1154 : bits_1

logic o1155 : bits_1

logic o1156 : bits_1

logic o1157 : bits_1

logic o1158 : bits_3

logic o1159 : bits_5

logic o1160 : bool

logic o1161 : bool

logic o1162 : bool

logic o1163 : bool

logic o1164 : bool

logic o1165 : bool

logic o1166 : bool

logic o1167 : bits_32

logic o1168 : bits_32

logic o1169 : bits_16

logic o1170 : bits_16

logic o1171 : bits_5

logic o1172 : (int,bits_32) farray

logic o1173 : bool

logic o1174 : bits_1

logic o1175 : bits_1

logic o1176 : bits_1

logic o1177 : bits_1

logic o1178 : bits_1

logic o1179 : bits_1

logic o1180 : bits_1

logic o1181 : bits_1

logic o1182 : bits_1

logic o1183 : bits_1

logic o1184 : bits_1

logic o1185 : bits_1

logic o1186 : bits_1

logic o1187 : bits_1

logic o1188 : bits_1

logic o1189 : bits_1

logic o1190 : bits_2

logic o1191 : bits_1

logic o1192 : bits_1

logic o1193 : bits_1

logic o1194 : bits_1

logic o1195 : bits_1

logic o1196 : bits_1

logic o1197 : bits_3

logic o1198 : bits_5

logic o1199 : bool

logic o1200 : bool

logic o1201 : bool

logic o1202 : bool

logic o1203 : bool

logic o1204 : bool

logic o1205 : bool

logic o1206 : int

logic o1207 : t1

logic o1208 : bits_32

logic o1209 : (int,bits_32) farray

logic o1210 : bits_32

logic o1211 : bits_32

logic o1212 : bits_16

logic o1213 : bits_16

logic o1214 : bits_5

logic o1215 : (int,bits_32) farray

logic o1216 : bool

logic o1217 : bits_1

logic o1218 : bits_1

logic o1219 : bits_1

logic o1220 : bits_1

logic o1221 : bits_1

logic o1222 : bits_1

logic o1223 : bits_1

logic o1224 : bits_1

logic o1225 : bits_1

logic o1226 : bits_1

logic o1227 : bits_1

logic o1228 : bits_1

logic o1229 : bits_1

logic o1230 : bits_1

logic o1231 : bits_1

logic o1232 : bits_1

logic o1233 : bits_2

logic o1234 : bits_1

logic o1235 : bits_1

logic o1236 : bits_1

logic o1237 : bits_1

logic o1238 : bits_1

logic o1239 : bits_1

logic o1240 : bits_3

logic o1241 : bits_5

logic o1242 : bool

logic o1243 : bool

logic o1244 : bool

logic o1245 : bool

logic o1246 : bool

logic o1247 : bool

logic o1248 : bool

logic o1249 : bits_32

logic o1250 : bits_32

logic o1251 : bits_16

logic o1252 : bits_16

logic o1253 : bits_5

logic o1254 : (int,bits_32) farray

logic o1255 : bool

logic o1256 : bits_1

logic o1257 : bits_1

logic o1258 : bits_1

logic o1259 : bits_1

logic o1260 : bits_1

logic o1261 : bits_1

logic o1262 : bits_1

logic o1263 : bits_1

logic o1264 : bits_1

logic o1265 : bits_1

logic o1266 : bits_1

logic o1267 : bits_1

logic o1268 : bits_1

logic o1269 : bits_1

logic o1270 : bits_1

logic o1271 : bits_1

logic o1272 : bits_2

logic o1273 : bits_1

logic o1274 : bits_1

logic o1275 : bits_1

logic o1276 : bits_1

logic o1277 : bits_1

logic o1278 : bits_1

logic o1279 : bits_3

logic o1280 : bits_5

logic o1281 : bool

logic o1282 : bool

logic o1283 : bool

logic o1284 : bool

logic o1285 : bool

logic o1286 : bool

logic o1287 : bool

logic o1288 : int

logic o1289 : t1

logic o1290 : bits_32

logic o1291 : (int,bits_32) farray

logic o1292 : bits_32

logic o1293 : bits_32

logic o1294 : bits_16

logic o1295 : bits_16

logic o1296 : bits_5

logic o1297 : (int,bits_32) farray

logic o1298 : bool

logic o1299 : bits_1

logic o1300 : bits_1

logic o1301 : bits_1

logic o1302 : bits_1

logic o1303 : bits_1

logic o1304 : bits_1

logic o1305 : bits_1

logic o1306 : bits_1

logic o1307 : bits_1

logic o1308 : bits_1

logic o1309 : bits_1

logic o1310 : bits_1

logic o1311 : bits_1

logic o1312 : bits_1

logic o1313 : bits_1

logic o1314 : bits_1

logic o1315 : bits_2

logic o1316 : bits_1

logic o1317 : bits_1

logic o1318 : bits_1

logic o1319 : bits_1

logic o1320 : bits_1

logic o1321 : bits_1

logic o1322 : bits_3

logic o1323 : bits_5

logic o1324 : bool

logic o1325 : bool

logic o1326 : bool

logic o1327 : bool

logic o1328 : bool

logic o1329 : bool

logic o1330 : bool

logic o1331 : bits_32

logic o1332 : bits_32

logic o1333 : bits_16

logic o1334 : bits_16

logic o1335 : bits_5

logic o1336 : (int,bits_32) farray

logic o1337 : bool

logic o1338 : bits_1

logic o1339 : bits_1

logic o1340 : bits_1

logic o1341 : bits_1

logic o1342 : bits_1

logic o1343 : bits_1

logic o1344 : bits_1

logic o1345 : bits_1

logic o1346 : bits_1

logic o1347 : bits_1

logic o1348 : bits_1

logic o1349 : bits_1

logic o1350 : bits_1

logic o1351 : bits_1

logic o1352 : bits_1

logic o1353 : bits_1

logic o1354 : bits_2

logic o1355 : bits_1

logic o1356 : bits_1

logic o1357 : bits_1

logic o1358 : bits_1

logic o1359 : bits_1

logic o1360 : bits_1

logic o1361 : bits_3

logic o1362 : bits_5

logic o1363 : bool

logic o1364 : bool

logic o1365 : bool

logic o1366 : bool

logic o1367 : bool

logic o1368 : bool

logic o1369 : bool

logic o1370 : int

logic o1371 : t1

logic o1372 : bits_32

logic o1373 : (int,bits_32) farray

logic o1374 : bits_32

logic o1375 : bits_32

logic o1376 : bits_16

logic o1377 : bits_16

logic o1378 : bits_5

logic o1379 : (int,bits_32) farray

logic o1380 : bool

logic o1381 : bits_1

logic o1382 : bits_1

logic o1383 : bits_1

logic o1384 : bits_1

logic o1385 : bits_1

logic o1386 : bits_1

logic o1387 : bits_1

logic o1388 : bits_1

logic o1389 : bits_1

logic o1390 : bits_1

logic o1391 : bits_1

logic o1392 : bits_1

logic o1393 : bits_1

logic o1394 : bits_1

logic o1395 : bits_1

logic o1396 : bits_1

logic o1397 : bits_2

logic o1398 : bits_1

logic o1399 : bits_1

logic o1400 : bits_1

logic o1401 : bits_1

logic o1402 : bits_1

logic o1403 : bits_1

logic o1404 : bits_3

logic o1405 : bits_5

logic o1406 : bool

logic o1407 : bool

logic o1408 : bool

logic o1409 : bool

logic o1410 : bool

logic o1411 : bool

logic o1412 : bool

logic o1413 : bits_32

logic o1414 : bits_32

logic o1415 : bits_16

logic o1416 : bits_16

logic o1417 : bits_5

logic o1418 : (int,bits_32) farray

logic o1419 : bool

logic o1420 : bits_1

logic o1421 : bits_1

logic o1422 : bits_1

logic o1423 : bits_1

logic o1424 : bits_1

logic o1425 : bits_1

logic o1426 : bits_1

logic o1427 : bits_1

logic o1428 : bits_1

logic o1429 : bits_1

logic o1430 : bits_1

logic o1431 : bits_1

logic o1432 : bits_1

logic o1433 : bits_1

logic o1434 : bits_1

logic o1435 : bits_1

logic o1436 : bits_2

logic o1437 : bits_1

logic o1438 : bits_1

logic o1439 : bits_1

logic o1440 : bits_1

logic o1441 : bits_1

logic o1442 : bits_1

logic o1443 : bits_3

logic o1444 : bits_5

logic o1445 : bool

logic o1446 : bool

logic o1447 : bool

logic o1448 : bool

logic o1449 : bool

logic o1450 : bool

logic o1451 : bool

logic o1452 : int

logic o1453 : t1

logic o1454 : bits_32

logic o1455 : (int,bits_32) farray

logic o1456 : bits_32

logic o1457 : bits_32

logic o1458 : bits_16

logic o1459 : bits_16

logic o1460 : bits_5

logic o1461 : (int,bits_32) farray

logic o1462 : bool

logic o1463 : bits_1

logic o1464 : bits_1

logic o1465 : bits_1

logic o1466 : bits_1

logic o1467 : bits_1

logic o1468 : bits_1

logic o1469 : bits_1

logic o1470 : bits_1

logic o1471 : bits_1

logic o1472 : bits_1

logic o1473 : bits_1

logic o1474 : bits_1

logic o1475 : bits_1

logic o1476 : bits_1

logic o1477 : bits_1

logic o1478 : bits_1

logic o1479 : bits_2

logic o1480 : bits_1

logic o1481 : bits_1

logic o1482 : bits_1

logic o1483 : bits_1

logic o1484 : bits_1

logic o1485 : bits_1

logic o1486 : bits_3

logic o1487 : bits_5

logic o1488 : bool

logic o1489 : bool

logic o1490 : bool

logic o1491 : bool

logic o1492 : bool

logic o1493 : bool

logic o1494 : bool

logic o1495 : bits_32

logic o1496 : bits_32

logic o1497 : bits_16

logic o1498 : bits_16

logic o1499 : bits_5

logic o1500 : (int,bits_32) farray

logic o1501 : bool

logic o1502 : bits_1

logic o1503 : bits_1

logic o1504 : bits_1

logic o1505 : bits_1

logic o1506 : bits_1

logic o1507 : bits_1

logic o1508 : bits_1

logic o1509 : bits_1

logic o1510 : bits_1

logic o1511 : bits_1

logic o1512 : bits_1

logic o1513 : bits_1

logic o1514 : bits_1

logic o1515 : bits_1

logic o1516 : bits_1

logic o1517 : bits_1

logic o1518 : bits_2

logic o1519 : bits_1

logic o1520 : bits_1

logic o1521 : bits_1

logic o1522 : bits_1

logic o1523 : bits_1

logic o1524 : bits_1

logic o1525 : bits_3

logic o1526 : bits_5

logic o1527 : bool

logic o1528 : bool

logic o1529 : bool

logic o1530 : bool

logic o1531 : bool

logic o1532 : bool

logic o1533 : bool

logic o1534 : int

logic word1 : t2

logic dw1000__driver__read_otp__word : t2

logic result : bits_32

logic result1 : bits_32

logic result2 : bits_16

logic result3 : bits_16

logic result4 : bits_5

logic result5 : (int,bits_32) farray

logic result6 : bool

logic result7 : bits_1

logic result8 : bits_1

logic result9 : bits_1

logic result10 : bits_1

logic result11 : bits_1

logic result12 : bits_1

logic result13 : bits_1

logic result14 : bits_1

logic result15 : bits_1

logic result16 : bits_1

logic result17 : bits_1

logic result18 : bits_1

logic result19 : bits_1

logic result20 : bits_1

logic result21 : bits_1

logic result22 : bits_1

logic result23 : bits_2

logic result24 : bits_1

logic result25 : bits_1

logic result26 : bits_1

logic result27 : bits_1

logic result28 : bits_1

logic result29 : bits_1

logic result30 : bits_3

logic result31 : bits_5

logic result32 : bool

logic result33 : bool

logic result34 : bool

logic result35 : bool

logic result36 : bool

logic result37 : bool

logic result38 : bool

logic self__39 : bits_32

logic self__40 : bits_32

logic self__41 : bits_16

logic self__42 : bits_16

logic self__43 : bits_5

logic self__44 : (int,bits_32) farray

logic self__45 : bool

logic self__46 : bits_1

logic self__47 : bits_1

logic self__48 : bits_1

logic self__49 : bits_1

logic self__50 : bits_1

logic self__51 : bits_1

logic self__52 : bits_1

logic self__53 : bits_1

logic self__54 : bits_1

logic self__55 : bits_1

logic self__56 : bits_1

logic self__57 : bits_1

logic self__58 : bits_1

logic self__59 : bits_1

logic self__60 : bits_1

logic self__61 : bits_1

logic self__62 : bits_2

logic self__63 : bits_1

logic self__64 : bits_1

logic self__65 : bits_1

logic self__66 : bits_1

logic self__67 : bits_1

logic self__68 : bits_1

logic self__69 : bits_3

logic self__70 : bits_5

logic self__71 : bool

logic self__72 : bool

logic self__73 : bool

logic self__74 : bool

logic self__75 : bool

logic self__76 : bool

logic self__77 : bool

logic device_state : us_private

logic dw1000__driver__read_otp__word1 : t2

logic result39 : bits_32

logic result40 : bits_32

logic result41 : bits_16

logic result42 : bits_16

logic result43 : bits_5

logic result44 : (int,bits_32) farray

logic result45 : bool

logic result46 : bits_1

logic result47 : bits_1

logic result48 : bits_1

logic result49 : bits_1

logic result50 : bits_1

logic result51 : bits_1

logic result52 : bits_1

logic result53 : bits_1

logic result54 : bits_1

logic result55 : bits_1

logic result56 : bits_1

logic result57 : bits_1

logic result58 : bits_1

logic result59 : bits_1

logic result60 : bits_1

logic result61 : bits_1

logic result62 : bits_2

logic result63 : bits_1

logic result64 : bits_1

logic result65 : bits_1

logic result66 : bits_1

logic result67 : bits_1

logic result68 : bits_1

logic result69 : bits_3

logic result70 : bits_5

logic result71 : bool

logic result72 : bool

logic result73 : bool

logic result74 : bool

logic result75 : bool

logic result76 : bool

logic result77 : bool

logic self__78 : bits_32

logic self__79 : bits_32

logic self__80 : bits_16

logic self__81 : bits_16

logic self__82 : bits_5

logic self__83 : (int,bits_32) farray

logic self__84 : bool

logic self__85 : bits_1

logic self__86 : bits_1

logic self__87 : bits_1

logic self__88 : bits_1

logic self__89 : bits_1

logic self__90 : bits_1

logic self__91 : bits_1

logic self__92 : bits_1

logic self__93 : bits_1

logic self__94 : bits_1

logic self__95 : bits_1

logic self__96 : bits_1

logic self__97 : bits_1

logic self__98 : bits_1

logic self__99 : bits_1

logic self__100 : bits_1

logic self__101 : bits_2

logic self__102 : bits_1

logic self__103 : bits_1

logic self__104 : bits_1

logic self__105 : bits_1

logic self__106 : bits_1

logic self__107 : bits_1

logic self__108 : bits_3

logic self__109 : bits_5

logic self__110 : bool

logic self__111 : bool

logic self__112 : bool

logic self__113 : bool

logic self__114 : bool

logic self__115 : bool

logic self__116 : bool

logic word2 : t2

logic device_state1 : us_private

logic result78 : bits_32

logic result79 : bits_32

logic result80 : bits_16

logic result81 : bits_16

logic result82 : bits_5

logic result83 : (int,bits_32) farray

logic result84 : bool

logic result85 : bits_1

logic result86 : bits_1

logic result87 : bits_1

logic result88 : bits_1

logic result89 : bits_1

logic result90 : bits_1

logic result91 : bits_1

logic result92 : bits_1

logic result93 : bits_1

logic result94 : bits_1

logic result95 : bits_1

logic result96 : bits_1

logic result97 : bits_1

logic result98 : bits_1

logic result99 : bits_1

logic result100 : bits_1

logic result101 : bits_2

logic result102 : bits_1

logic result103 : bits_1

logic result104 : bits_1

logic result105 : bits_1

logic result106 : bits_1

logic result107 : bits_1

logic result108 : bits_3

logic result109 : bits_5

logic result110 : bool

logic result111 : bool

logic result112 : bool

logic result113 : bool

logic result114 : bool

logic result115 : bool

logic result116 : bool

logic self__117 : bits_32

logic self__118 : bits_32

logic self__119 : bits_16

logic self__120 : bits_16

logic self__121 : bits_5

logic self__122 : (int,bits_32) farray

logic self__123 : bool

logic self__124 : bits_1

logic self__125 : bits_1

logic self__126 : bits_1

logic self__127 : bits_1

logic self__128 : bits_1

logic self__129 : bits_1

logic self__130 : bits_1

logic self__131 : bits_1

logic self__132 : bits_1

logic self__133 : bits_1

logic self__134 : bits_1

logic self__135 : bits_1

logic self__136 : bits_1

logic self__137 : bits_1

logic self__138 : bits_1

logic self__139 : bits_1

logic self__140 : bits_2

logic self__141 : bits_1

logic self__142 : bits_1

logic self__143 : bits_1

logic self__144 : bits_1

logic self__145 : bits_1

logic self__146 : bits_1

logic self__147 : bits_3

logic self__148 : bits_5

logic self__149 : bool

logic self__150 : bool

logic self__151 : bool

logic self__152 : bool

logic self__153 : bool

logic self__154 : bool

logic self__155 : bool

logic result117 : t2

logic word3 : t2

logic result118 : bits_32

logic result119 : bits_32

logic result120 : bits_16

logic result121 : bits_16

logic result122 : bits_5

logic result123 : (int,bits_32) farray

logic result124 : bool

logic result125 : bits_1

logic result126 : bits_1

logic result127 : bits_1

logic result128 : bits_1

logic result129 : bits_1

logic result130 : bits_1

logic result131 : bits_1

logic result132 : bits_1

logic result133 : bits_1

logic result134 : bits_1

logic result135 : bits_1

logic result136 : bits_1

logic result137 : bits_1

logic result138 : bits_1

logic result139 : bits_1

logic result140 : bits_1

logic result141 : bits_2

logic result142 : bits_1

logic result143 : bits_1

logic result144 : bits_1

logic result145 : bits_1

logic result146 : bits_1

logic result147 : bits_1

logic result148 : bits_3

logic result149 : bits_5

logic result150 : bool

logic result151 : bool

logic result152 : bool

logic result153 : bool

logic result154 : bool

logic result155 : bool

logic result156 : bool

logic self__156 : bits_32

logic self__157 : bits_32

logic self__158 : bits_16

logic self__159 : bits_16

logic self__160 : bits_5

logic self__161 : (int,bits_32) farray

logic self__162 : bool

logic self__163 : bits_1

logic self__164 : bits_1

logic self__165 : bits_1

logic self__166 : bits_1

logic self__167 : bits_1

logic self__168 : bits_1

logic self__169 : bits_1

logic self__170 : bits_1

logic self__171 : bits_1

logic self__172 : bits_1

logic self__173 : bits_1

logic self__174 : bits_1

logic self__175 : bits_1

logic self__176 : bits_1

logic self__177 : bits_1

logic self__178 : bits_1

logic self__179 : bits_2

logic self__180 : bits_1

logic self__181 : bits_1

logic self__182 : bits_1

logic self__183 : bits_1

logic self__184 : bits_1

logic self__185 : bits_1

logic self__186 : bits_3

logic self__187 : bits_5

logic self__188 : bool

logic self__189 : bool

logic self__190 : bool

logic self__191 : bool

logic self__192 : bool

logic self__193 : bool

logic self__194 : bool

logic result157 : bits_32

logic result158 : bits_32

logic result159 : bits_16

logic result160 : bits_16

logic result161 : bits_5

logic result162 : (int,bits_32) farray

logic result163 : bool

logic result164 : bits_1

logic result165 : bits_1

logic result166 : bits_1

logic result167 : bits_1

logic result168 : bits_1

logic result169 : bits_1

logic result170 : bits_1

logic result171 : bits_1

logic result172 : bits_1

logic result173 : bits_1

logic result174 : bits_1

logic result175 : bits_1

logic result176 : bits_1

logic result177 : bits_1

logic result178 : bits_1

logic result179 : bits_1

logic result180 : bits_2

logic result181 : bits_1

logic result182 : bits_1

logic result183 : bits_1

logic result184 : bits_1

logic result185 : bits_1

logic result186 : bits_1

logic result187 : bits_3

logic result188 : bits_5

logic result189 : bool

logic result190 : bool

logic result191 : bool

logic result192 : bool

logic result193 : bool

logic result194 : bool

logic result195 : bool

logic self__195 : bits_32

logic self__196 : bits_32

logic self__197 : bits_16

logic self__198 : bits_16

logic self__199 : bits_5

logic self__200 : (int,bits_32) farray

logic self__201 : bool

logic self__202 : bits_1

logic self__203 : bits_1

logic self__204 : bits_1

logic self__205 : bits_1

logic self__206 : bits_1

logic self__207 : bits_1

logic self__208 : bits_1

logic self__209 : bits_1

logic self__210 : bits_1

logic self__211 : bits_1

logic self__212 : bits_1

logic self__213 : bits_1

logic self__214 : bits_1

logic self__215 : bits_1

logic self__216 : bits_1

logic self__217 : bits_1

logic self__218 : bits_2

logic self__219 : bits_1

logic self__220 : bits_1

logic self__221 : bits_1

logic self__222 : bits_1

logic self__223 : bits_1

logic self__224 : bits_1

logic self__225 : bits_3

logic self__226 : bits_5

logic self__227 : bool

logic self__228 : bool

logic self__229 : bool

logic self__230 : bool

logic self__231 : bool

logic self__232 : bool

logic self__233 : bool

logic result196 : bits_32

logic result197 : bits_32

logic result198 : bits_16

logic result199 : bits_16

logic result200 : bits_5

logic result201 : (int,bits_32) farray

logic result202 : bool

logic result203 : bits_1

logic result204 : bits_1

logic result205 : bits_1

logic result206 : bits_1

logic result207 : bits_1

logic result208 : bits_1

logic result209 : bits_1

logic result210 : bits_1

logic result211 : bits_1

logic result212 : bits_1

logic result213 : bits_1

logic result214 : bits_1

logic result215 : bits_1

logic result216 : bits_1

logic result217 : bits_1

logic result218 : bits_1

logic result219 : bits_2

logic result220 : bits_1

logic result221 : bits_1

logic result222 : bits_1

logic result223 : bits_1

logic result224 : bits_1

logic result225 : bits_1

logic result226 : bits_3

logic result227 : bits_5

logic result228 : bool

logic result229 : bool

logic result230 : bool

logic result231 : bool

logic result232 : bool

logic result233 : bool

logic result234 : bool

logic self__234 : bits_32

logic self__235 : bits_32

logic self__236 : bits_16

logic self__237 : bits_16

logic self__238 : bits_5

logic self__239 : (int,bits_32) farray

logic self__240 : bool

logic self__241 : bits_1

logic self__242 : bits_1

logic self__243 : bits_1

logic self__244 : bits_1

logic self__245 : bits_1

logic self__246 : bits_1

logic self__247 : bits_1

logic self__248 : bits_1

logic self__249 : bits_1

logic self__250 : bits_1

logic self__251 : bits_1

logic self__252 : bits_1

logic self__253 : bits_1

logic self__254 : bits_1

logic self__255 : bits_1

logic self__256 : bits_1

logic self__257 : bits_2

logic self__258 : bits_1

logic self__259 : bits_1

logic self__260 : bits_1

logic self__261 : bits_1

logic self__262 : bits_1

logic self__263 : bits_1

logic self__264 : bits_3

logic self__265 : bits_5

logic self__266 : bool

logic self__267 : bool

logic self__268 : bool

logic self__269 : bool

logic self__270 : bool

logic self__271 : bool

logic self__272 : bool

logic word4 : t2

logic device_state2 : us_private

logic result235 : bits_32

logic result236 : bits_32

logic result237 : bits_16

logic result238 : bits_16

logic result239 : bits_5

logic result240 : (int,bits_32) farray

logic result241 : bool

logic result242 : bits_1

logic result243 : bits_1

logic result244 : bits_1

logic result245 : bits_1

logic result246 : bits_1

logic result247 : bits_1

logic result248 : bits_1

logic result249 : bits_1

logic result250 : bits_1

logic result251 : bits_1

logic result252 : bits_1

logic result253 : bits_1

logic result254 : bits_1

logic result255 : bits_1

logic result256 : bits_1

logic result257 : bits_1

logic result258 : bits_2

logic result259 : bits_1

logic result260 : bits_1

logic result261 : bits_1

logic result262 : bits_1

logic result263 : bits_1

logic result264 : bits_1

logic result265 : bits_3

logic result266 : bits_5

logic result267 : bool

logic result268 : bool

logic result269 : bool

logic result270 : bool

logic result271 : bool

logic result272 : bool

logic result273 : bool

logic self__273 : bits_32

logic self__274 : bits_32

logic self__275 : bits_16

logic self__276 : bits_16

logic self__277 : bits_5

logic self__278 : (int,bits_32) farray

logic self__279 : bool

logic self__280 : bits_1

logic self__281 : bits_1

logic self__282 : bits_1

logic self__283 : bits_1

logic self__284 : bits_1

logic self__285 : bits_1

logic self__286 : bits_1

logic self__287 : bits_1

logic self__288 : bits_1

logic self__289 : bits_1

logic self__290 : bits_1

logic self__291 : bits_1

logic self__292 : bits_1

logic self__293 : bits_1

logic self__294 : bits_1

logic self__295 : bits_1

logic self__296 : bits_2

logic self__297 : bits_1

logic self__298 : bits_1

logic self__299 : bits_1

logic self__300 : bits_1

logic self__301 : bits_1

logic self__302 : bits_1

logic self__303 : bits_3

logic self__304 : bits_5

logic self__305 : bool

logic self__306 : bool

logic self__307 : bool

logic self__308 : bool

logic self__309 : bool

logic self__310 : bool

logic self__311 : bool

logic result274 : bits_32

logic result275 : bits_32

logic result276 : bits_16

logic result277 : bits_16

logic result278 : bits_5

logic result279 : (int,bits_32) farray

logic result280 : bool

logic result281 : bits_1

logic result282 : bits_1

logic result283 : bits_1

logic result284 : bits_1

logic result285 : bits_1

logic result286 : bits_1

logic result287 : bits_1

logic result288 : bits_1

logic result289 : bits_1

logic result290 : bits_1

logic result291 : bits_1

logic result292 : bits_1

logic result293 : bits_1

logic result294 : bits_1

logic result295 : bits_1

logic result296 : bits_1

logic result297 : bits_2

logic result298 : bits_1

logic result299 : bits_1

logic result300 : bits_1

logic result301 : bits_1

logic result302 : bits_1

logic result303 : bits_1

logic result304 : bits_3

logic result305 : bits_5

logic result306 : bool

logic result307 : bool

logic result308 : bool

logic result309 : bool

logic result310 : bool

logic result311 : bool

logic result312 : bool

logic self__312 : bits_32

logic self__313 : bits_32

logic self__314 : bits_16

logic self__315 : bits_16

logic self__316 : bits_5

logic self__317 : (int,bits_32) farray

logic self__318 : bool

logic self__319 : bits_1

logic self__320 : bits_1

logic self__321 : bits_1

logic self__322 : bits_1

logic self__323 : bits_1

logic self__324 : bits_1

logic self__325 : bits_1

logic self__326 : bits_1

logic self__327 : bits_1

logic self__328 : bits_1

logic self__329 : bits_1

logic self__330 : bits_1

logic self__331 : bits_1

logic self__332 : bits_1

logic self__333 : bits_1

logic self__334 : bits_1

logic self__335 : bits_2

logic self__336 : bits_1

logic self__337 : bits_1

logic self__338 : bits_1

logic self__339 : bits_1

logic self__340 : bits_1

logic self__341 : bits_1

logic self__342 : bits_3

logic self__343 : bits_5

logic self__344 : bool

logic self__345 : bool

logic self__346 : bool

logic self__347 : bool

logic self__348 : bool

logic self__349 : bool

logic self__350 : bool

logic result313 : int

logic i1 : int

logic dw1000__driver__read_otp__word2 : t2

logic result314 : bits_32

logic result315 : bits_32

logic result316 : bits_16

logic result317 : bits_16

logic result318 : bits_5

logic result319 : (int,bits_32) farray

logic result320 : bool

logic result321 : bits_1

logic result322 : bits_1

logic result323 : bits_1

logic result324 : bits_1

logic result325 : bits_1

logic result326 : bits_1

logic result327 : bits_1

logic result328 : bits_1

logic result329 : bits_1

logic result330 : bits_1

logic result331 : bits_1

logic result332 : bits_1

logic result333 : bits_1

logic result334 : bits_1

logic result335 : bits_1

logic result336 : bits_1

logic result337 : bits_2

logic result338 : bits_1

logic result339 : bits_1

logic result340 : bits_1

logic result341 : bits_1

logic result342 : bits_1

logic result343 : bits_1

logic result344 : bits_3

logic result345 : bits_5

logic result346 : bool

logic result347 : bool

logic result348 : bool

logic result349 : bool

logic result350 : bool

logic result351 : bool

logic result352 : bool

logic self__351 : bits_32

logic self__352 : bits_32

logic self__353 : bits_16

logic self__354 : bits_16

logic self__355 : bits_5

logic self__356 : (int,bits_32) farray

logic self__357 : bool

logic self__358 : bits_1

logic self__359 : bits_1

logic self__360 : bits_1

logic self__361 : bits_1

logic self__362 : bits_1

logic self__363 : bits_1

logic self__364 : bits_1

logic self__365 : bits_1

logic self__366 : bits_1

logic self__367 : bits_1

logic self__368 : bits_1

logic self__369 : bits_1

logic self__370 : bits_1

logic self__371 : bits_1

logic self__372 : bits_1

logic self__373 : bits_1

logic self__374 : bits_2

logic self__375 : bits_1

logic self__376 : bits_1

logic self__377 : bits_1

logic self__378 : bits_1

logic self__379 : bits_1

logic self__380 : bits_1

logic self__381 : bits_3

logic self__382 : bits_5

logic self__383 : bool

logic self__384 : bool

logic self__385 : bool

logic self__386 : bool

logic self__387 : bool

logic self__388 : bool

logic self__389 : bool

logic result353 : int

logic i2 : int

logic dw1000__driver__read_otp__word3 : t2

logic result354 : bits_32

logic result355 : bits_32

logic result356 : bits_16

logic result357 : bits_16

logic result358 : bits_5

logic result359 : (int,bits_32) farray

logic result360 : bool

logic result361 : bits_1

logic result362 : bits_1

logic result363 : bits_1

logic result364 : bits_1

logic result365 : bits_1

logic result366 : bits_1

logic result367 : bits_1

logic result368 : bits_1

logic result369 : bits_1

logic result370 : bits_1

logic result371 : bits_1

logic result372 : bits_1

logic result373 : bits_1

logic result374 : bits_1

logic result375 : bits_1

logic result376 : bits_1

logic result377 : bits_2

logic result378 : bits_1

logic result379 : bits_1

logic result380 : bits_1

logic result381 : bits_1

logic result382 : bits_1

logic result383 : bits_1

logic result384 : bits_3

logic result385 : bits_5

logic result386 : bool

logic result387 : bool

logic result388 : bool

logic result389 : bool

logic result390 : bool

logic result391 : bool

logic result392 : bool

logic self__390 : bits_32

logic self__391 : bits_32

logic self__392 : bits_16

logic self__393 : bits_16

logic self__394 : bits_5

logic self__395 : (int,bits_32) farray

logic self__396 : bool

logic self__397 : bits_1

logic self__398 : bits_1

logic self__399 : bits_1

logic self__400 : bits_1

logic self__401 : bits_1

logic self__402 : bits_1

logic self__403 : bits_1

logic self__404 : bits_1

logic self__405 : bits_1

logic self__406 : bits_1

logic self__407 : bits_1

logic self__408 : bits_1

logic self__409 : bits_1

logic self__410 : bits_1

logic self__411 : bits_1

logic self__412 : bits_1

logic self__413 : bits_2

logic self__414 : bits_1

logic self__415 : bits_1

logic self__416 : bits_1

logic self__417 : bits_1

logic self__418 : bits_1

logic self__419 : bits_1

logic self__420 : bits_3

logic self__421 : bits_5

logic self__422 : bool

logic self__423 : bool

logic self__424 : bool

logic self__425 : bool

logic self__426 : bool

logic self__427 : bool

logic self__428 : bool

logic result393 : int

logic i3 : int

logic dw1000__driver__read_otp__word4 : t2

logic result394 : bits_32

logic result395 : bits_32

logic result396 : bits_16

logic result397 : bits_16

logic result398 : bits_5

logic result399 : (int,bits_32) farray

logic result400 : bool

logic result401 : bits_1

logic result402 : bits_1

logic result403 : bits_1

logic result404 : bits_1

logic result405 : bits_1

logic result406 : bits_1

logic result407 : bits_1

logic result408 : bits_1

logic result409 : bits_1

logic result410 : bits_1

logic result411 : bits_1

logic result412 : bits_1

logic result413 : bits_1

logic result414 : bits_1

logic result415 : bits_1

logic result416 : bits_1

logic result417 : bits_2

logic result418 : bits_1

logic result419 : bits_1

logic result420 : bits_1

logic result421 : bits_1

logic result422 : bits_1

logic result423 : bits_1

logic result424 : bits_3

logic result425 : bits_5

logic result426 : bool

logic result427 : bool

logic result428 : bool

logic result429 : bool

logic result430 : bool

logic result431 : bool

logic result432 : bool

logic self__429 : bits_32

logic self__430 : bits_32

logic self__431 : bits_16

logic self__432 : bits_16

logic self__433 : bits_5

logic self__434 : (int,bits_32) farray

logic self__435 : bool

logic self__436 : bits_1

logic self__437 : bits_1

logic self__438 : bits_1

logic self__439 : bits_1

logic self__440 : bits_1

logic self__441 : bits_1

logic self__442 : bits_1

logic self__443 : bits_1

logic self__444 : bits_1

logic self__445 : bits_1

logic self__446 : bits_1

logic self__447 : bits_1

logic self__448 : bits_1

logic self__449 : bits_1

logic self__450 : bits_1

logic self__451 : bits_1

logic self__452 : bits_2

logic self__453 : bits_1

logic self__454 : bits_1

logic self__455 : bits_1

logic self__456 : bits_1

logic self__457 : bits_1

logic self__458 : bits_1

logic self__459 : bits_3

logic self__460 : bits_5

logic self__461 : bool

logic self__462 : bool

logic self__463 : bool

logic self__464 : bool

logic self__465 : bool

logic self__466 : bool

logic self__467 : bool

logic result433 : int

logic i4 : int

logic dw1000__driver__read_otp__word5 : t2

logic result434 : bits_32

logic result435 : bits_32

logic result436 : bits_16

logic result437 : bits_16

logic result438 : bits_5

logic result439 : (int,bits_32) farray

logic result440 : bool

logic result441 : bits_1

logic result442 : bits_1

logic result443 : bits_1

logic result444 : bits_1

logic result445 : bits_1

logic result446 : bits_1

logic result447 : bits_1

logic result448 : bits_1

logic result449 : bits_1

logic result450 : bits_1

logic result451 : bits_1

logic result452 : bits_1

logic result453 : bits_1

logic result454 : bits_1

logic result455 : bits_1

logic result456 : bits_1

logic result457 : bits_2

logic result458 : bits_1

logic result459 : bits_1

logic result460 : bits_1

logic result461 : bits_1

logic result462 : bits_1

logic result463 : bits_1

logic result464 : bits_3

logic result465 : bits_5

logic result466 : bool

logic result467 : bool

logic result468 : bool

logic result469 : bool

logic result470 : bool

logic result471 : bool

logic result472 : bool

logic self__468 : bits_32

logic self__469 : bits_32

logic self__470 : bits_16

logic self__471 : bits_16

logic self__472 : bits_5

logic self__473 : (int,bits_32) farray

logic self__474 : bool

logic self__475 : bits_1

logic self__476 : bits_1

logic self__477 : bits_1

logic self__478 : bits_1

logic self__479 : bits_1

logic self__480 : bits_1

logic self__481 : bits_1

logic self__482 : bits_1

logic self__483 : bits_1

logic self__484 : bits_1

logic self__485 : bits_1

logic self__486 : bits_1

logic self__487 : bits_1

logic self__488 : bits_1

logic self__489 : bits_1

logic self__490 : bits_1

logic self__491 : bits_2

logic self__492 : bits_1

logic self__493 : bits_1

logic self__494 : bits_1

logic self__495 : bits_1

logic self__496 : bits_1

logic self__497 : bits_1

logic self__498 : bits_3

logic self__499 : bits_5

logic self__500 : bool

logic self__501 : bool

logic self__502 : bool

logic self__503 : bool

logic self__504 : bool

logic self__505 : bool

logic self__506 : bool

logic result473 : int

logic i5 : int

logic dw1000__driver__read_otp__word6 : t2

logic result474 : bits_32

logic result475 : bits_32

logic result476 : bits_16

logic result477 : bits_16

logic result478 : bits_5

logic result479 : (int,bits_32) farray

logic result480 : bool

logic result481 : bits_1

logic result482 : bits_1

logic result483 : bits_1

logic result484 : bits_1

logic result485 : bits_1

logic result486 : bits_1

logic result487 : bits_1

logic result488 : bits_1

logic result489 : bits_1

logic result490 : bits_1

logic result491 : bits_1

logic result492 : bits_1

logic result493 : bits_1

logic result494 : bits_1

logic result495 : bits_1

logic result496 : bits_1

logic result497 : bits_2

logic result498 : bits_1

logic result499 : bits_1

logic result500 : bits_1

logic result501 : bits_1

logic result502 : bits_1

logic result503 : bits_1

logic result504 : bits_3

logic result505 : bits_5

logic result506 : bool

logic result507 : bool

logic result508 : bool

logic result509 : bool

logic result510 : bool

logic result511 : bool

logic result512 : bool

logic self__507 : bits_32

logic self__508 : bits_32

logic self__509 : bits_16

logic self__510 : bits_16

logic self__511 : bits_5

logic self__512 : (int,bits_32) farray

logic self__513 : bool

logic self__514 : bits_1

logic self__515 : bits_1

logic self__516 : bits_1

logic self__517 : bits_1

logic self__518 : bits_1

logic self__519 : bits_1

logic self__520 : bits_1

logic self__521 : bits_1

logic self__522 : bits_1

logic self__523 : bits_1

logic self__524 : bits_1

logic self__525 : bits_1

logic self__526 : bits_1

logic self__527 : bits_1

logic self__528 : bits_1

logic self__529 : bits_1

logic self__530 : bits_2

logic self__531 : bits_1

logic self__532 : bits_1

logic self__533 : bits_1

logic self__534 : bits_1

logic self__535 : bits_1

logic self__536 : bits_1

logic self__537 : bits_3

logic self__538 : bits_5

logic self__539 : bool

logic self__540 : bool

logic self__541 : bool

logic self__542 : bool

logic self__543 : bool

logic self__544 : bool

logic self__545 : bool

logic result513 : int

logic i6 : int

logic dw1000__driver__read_otp__word7 : t2

logic result514 : bits_32

logic result515 : bits_32

logic result516 : bits_16

logic result517 : bits_16

logic result518 : bits_5

logic result519 : (int,bits_32) farray

logic result520 : bool

logic result521 : bits_1

logic result522 : bits_1

logic result523 : bits_1

logic result524 : bits_1

logic result525 : bits_1

logic result526 : bits_1

logic result527 : bits_1

logic result528 : bits_1

logic result529 : bits_1

logic result530 : bits_1

logic result531 : bits_1

logic result532 : bits_1

logic result533 : bits_1

logic result534 : bits_1

logic result535 : bits_1

logic result536 : bits_1

logic result537 : bits_2

logic result538 : bits_1

logic result539 : bits_1

logic result540 : bits_1

logic result541 : bits_1

logic result542 : bits_1

logic result543 : bits_1

logic result544 : bits_3

logic result545 : bits_5

logic result546 : bool

logic result547 : bool

logic result548 : bool

logic result549 : bool

logic result550 : bool

logic result551 : bool

logic result552 : bool

logic self__546 : bits_32

logic self__547 : bits_32

logic self__548 : bits_16

logic self__549 : bits_16

logic self__550 : bits_5

logic self__551 : (int,bits_32) farray

logic self__552 : bool

logic self__553 : bits_1

logic self__554 : bits_1

logic self__555 : bits_1

logic self__556 : bits_1

logic self__557 : bits_1

logic self__558 : bits_1

logic self__559 : bits_1

logic self__560 : bits_1

logic self__561 : bits_1

logic self__562 : bits_1

logic self__563 : bits_1

logic self__564 : bits_1

logic self__565 : bits_1

logic self__566 : bits_1

logic self__567 : bits_1

logic self__568 : bits_1

logic self__569 : bits_2

logic self__570 : bits_1

logic self__571 : bits_1

logic self__572 : bits_1

logic self__573 : bits_1

logic self__574 : bits_1

logic self__575 : bits_1

logic self__576 : bits_3

logic self__577 : bits_5

logic self__578 : bool

logic self__579 : bool

logic self__580 : bool

logic self__581 : bool

logic self__582 : bool

logic self__583 : bool

logic self__584 : bool

logic result553 : int

logic i7 : int

logic dw1000__driver__read_otp__word8 : t2

logic result554 : bits_32

logic result555 : bits_32

logic result556 : bits_16

logic result557 : bits_16

logic result558 : bits_5

logic result559 : (int,bits_32) farray

logic result560 : bool

logic result561 : bits_1

logic result562 : bits_1

logic result563 : bits_1

logic result564 : bits_1

logic result565 : bits_1

logic result566 : bits_1

logic result567 : bits_1

logic result568 : bits_1

logic result569 : bits_1

logic result570 : bits_1

logic result571 : bits_1

logic result572 : bits_1

logic result573 : bits_1

logic result574 : bits_1

logic result575 : bits_1

logic result576 : bits_1

logic result577 : bits_2

logic result578 : bits_1

logic result579 : bits_1

logic result580 : bits_1

logic result581 : bits_1

logic result582 : bits_1

logic result583 : bits_1

logic result584 : bits_3

logic result585 : bits_5

logic result586 : bool

logic result587 : bool

logic result588 : bool

logic result589 : bool

logic result590 : bool

logic result591 : bool

logic result592 : bool

logic self__585 : bits_32

logic self__586 : bits_32

logic self__587 : bits_16

logic self__588 : bits_16

logic self__589 : bits_5

logic self__590 : (int,bits_32) farray

logic self__591 : bool

logic self__592 : bits_1

logic self__593 : bits_1

logic self__594 : bits_1

logic self__595 : bits_1

logic self__596 : bits_1

logic self__597 : bits_1

logic self__598 : bits_1

logic self__599 : bits_1

logic self__600 : bits_1

logic self__601 : bits_1

logic self__602 : bits_1

logic self__603 : bits_1

logic self__604 : bits_1

logic self__605 : bits_1

logic self__606 : bits_1

logic self__607 : bits_1

logic self__608 : bits_2

logic self__609 : bits_1

logic self__610 : bits_1

logic self__611 : bits_1

logic self__612 : bits_1

logic self__613 : bits_1

logic self__614 : bits_1

logic self__615 : bits_3

logic self__616 : bits_5

logic self__617 : bool

logic self__618 : bool

logic self__619 : bool

logic self__620 : bool

logic self__621 : bool

logic self__622 : bool

logic self__623 : bool

logic result593 : int

logic i8 : int

logic dw1000__driver__read_otp__word9 : t2

logic result594 : bits_32

logic result595 : bits_32

logic result596 : bits_16

logic result597 : bits_16

logic result598 : bits_5

logic result599 : (int,bits_32) farray

logic result600 : bool

logic result601 : bits_1

logic result602 : bits_1

logic result603 : bits_1

logic result604 : bits_1

logic result605 : bits_1

logic result606 : bits_1

logic result607 : bits_1

logic result608 : bits_1

logic result609 : bits_1

logic result610 : bits_1

logic result611 : bits_1

logic result612 : bits_1

logic result613 : bits_1

logic result614 : bits_1

logic result615 : bits_1

logic result616 : bits_1

logic result617 : bits_2

logic result618 : bits_1

logic result619 : bits_1

logic result620 : bits_1

logic result621 : bits_1

logic result622 : bits_1

logic result623 : bits_1

logic result624 : bits_3

logic result625 : bits_5

logic result626 : bool

logic result627 : bool

logic result628 : bool

logic result629 : bool

logic result630 : bool

logic result631 : bool

logic result632 : bool

logic self__624 : bits_32

logic self__625 : bits_32

logic self__626 : bits_16

logic self__627 : bits_16

logic self__628 : bits_5

logic self__629 : (int,bits_32) farray

logic self__630 : bool

logic self__631 : bits_1

logic self__632 : bits_1

logic self__633 : bits_1

logic self__634 : bits_1

logic self__635 : bits_1

logic self__636 : bits_1

logic self__637 : bits_1

logic self__638 : bits_1

logic self__639 : bits_1

logic self__640 : bits_1

logic self__641 : bits_1

logic self__642 : bits_1

logic self__643 : bits_1

logic self__644 : bits_1

logic self__645 : bits_1

logic self__646 : bits_1

logic self__647 : bits_2

logic self__648 : bits_1

logic self__649 : bits_1

logic self__650 : bits_1

logic self__651 : bits_1

logic self__652 : bits_1

logic self__653 : bits_1

logic self__654 : bits_3

logic self__655 : bits_5

logic self__656 : bool

logic self__657 : bool

logic self__658 : bool

logic self__659 : bool

logic self__660 : bool

logic self__661 : bool

logic self__662 : bool

logic result633 : int

logic i9 : int

logic dw1000__driver__read_otp__word10 : t2

logic result634 : bits_32

logic result635 : bits_32

logic result636 : bits_16

logic result637 : bits_16

logic result638 : bits_5

logic result639 : (int,bits_32) farray

logic result640 : bool

logic result641 : bits_1

logic result642 : bits_1

logic result643 : bits_1

logic result644 : bits_1

logic result645 : bits_1

logic result646 : bits_1

logic result647 : bits_1

logic result648 : bits_1

logic result649 : bits_1

logic result650 : bits_1

logic result651 : bits_1

logic result652 : bits_1

logic result653 : bits_1

logic result654 : bits_1

logic result655 : bits_1

logic result656 : bits_1

logic result657 : bits_2

logic result658 : bits_1

logic result659 : bits_1

logic result660 : bits_1

logic result661 : bits_1

logic result662 : bits_1

logic result663 : bits_1

logic result664 : bits_3

logic result665 : bits_5

logic result666 : bool

logic result667 : bool

logic result668 : bool

logic result669 : bool

logic result670 : bool

logic result671 : bool

logic result672 : bool

logic self__663 : bits_32

logic self__664 : bits_32

logic self__665 : bits_16

logic self__666 : bits_16

logic self__667 : bits_5

logic self__668 : (int,bits_32) farray

logic self__669 : bool

logic self__670 : bits_1

logic self__671 : bits_1

logic self__672 : bits_1

logic self__673 : bits_1

logic self__674 : bits_1

logic self__675 : bits_1

logic self__676 : bits_1

logic self__677 : bits_1

logic self__678 : bits_1

logic self__679 : bits_1

logic self__680 : bits_1

logic self__681 : bits_1

logic self__682 : bits_1

logic self__683 : bits_1

logic self__684 : bits_1

logic self__685 : bits_1

logic self__686 : bits_2

logic self__687 : bits_1

logic self__688 : bits_1

logic self__689 : bits_1

logic self__690 : bits_1

logic self__691 : bits_1

logic self__692 : bits_1

logic self__693 : bits_3

logic self__694 : bits_5

logic self__695 : bool

logic self__696 : bool

logic self__697 : bool

logic self__698 : bool

logic self__699 : bool

logic self__700 : bool

logic self__701 : bool

logic result673 : int

logic i10 : int

logic dw1000__driver__read_otp__word11 : t2

logic result674 : bits_32

logic result675 : bits_32

logic result676 : bits_16

logic result677 : bits_16

logic result678 : bits_5

logic result679 : (int,bits_32) farray

logic result680 : bool

logic result681 : bits_1

logic result682 : bits_1

logic result683 : bits_1

logic result684 : bits_1

logic result685 : bits_1

logic result686 : bits_1

logic result687 : bits_1

logic result688 : bits_1

logic result689 : bits_1

logic result690 : bits_1

logic result691 : bits_1

logic result692 : bits_1

logic result693 : bits_1

logic result694 : bits_1

logic result695 : bits_1

logic result696 : bits_1

logic result697 : bits_2

logic result698 : bits_1

logic result699 : bits_1

logic result700 : bits_1

logic result701 : bits_1

logic result702 : bits_1

logic result703 : bits_1

logic result704 : bits_3

logic result705 : bits_5

logic result706 : bool

logic result707 : bool

logic result708 : bool

logic result709 : bool

logic result710 : bool

logic result711 : bool

logic result712 : bool

logic self__702 : bits_32

logic self__703 : bits_32

logic self__704 : bits_16

logic self__705 : bits_16

logic self__706 : bits_5

logic self__707 : (int,bits_32) farray

logic self__708 : bool

logic self__709 : bits_1

logic self__710 : bits_1

logic self__711 : bits_1

logic self__712 : bits_1

logic self__713 : bits_1

logic self__714 : bits_1

logic self__715 : bits_1

logic self__716 : bits_1

logic self__717 : bits_1

logic self__718 : bits_1

logic self__719 : bits_1

logic self__720 : bits_1

logic self__721 : bits_1

logic self__722 : bits_1

logic self__723 : bits_1

logic self__724 : bits_1

logic self__725 : bits_2

logic self__726 : bits_1

logic self__727 : bits_1

logic self__728 : bits_1

logic self__729 : bits_1

logic self__730 : bits_1

logic self__731 : bits_1

logic self__732 : bits_3

logic self__733 : bits_5

logic self__734 : bool

logic self__735 : bool

logic self__736 : bool

logic self__737 : bool

logic self__738 : bool

logic self__739 : bool

logic self__740 : bool

logic result713 : int

logic i11 : int

logic dw1000__driver__read_otp__word12 : t2

logic result714 : bits_32

logic result715 : bits_32

logic result716 : bits_16

logic result717 : bits_16

logic result718 : bits_5

logic result719 : (int,bits_32) farray

logic result720 : bool

logic result721 : bits_1

logic result722 : bits_1

logic result723 : bits_1

logic result724 : bits_1

logic result725 : bits_1

logic result726 : bits_1

logic result727 : bits_1

logic result728 : bits_1

logic result729 : bits_1

logic result730 : bits_1

logic result731 : bits_1

logic result732 : bits_1

logic result733 : bits_1

logic result734 : bits_1

logic result735 : bits_1

logic result736 : bits_1

logic result737 : bits_2

logic result738 : bits_1

logic result739 : bits_1

logic result740 : bits_1

logic result741 : bits_1

logic result742 : bits_1

logic result743 : bits_1

logic result744 : bits_3

logic result745 : bits_5

logic result746 : bool

logic result747 : bool

logic result748 : bool

logic result749 : bool

logic result750 : bool

logic result751 : bool

logic result752 : bool

logic self__741 : bits_32

logic self__742 : bits_32

logic self__743 : bits_16

logic self__744 : bits_16

logic self__745 : bits_5

logic self__746 : (int,bits_32) farray

logic self__747 : bool

logic self__748 : bits_1

logic self__749 : bits_1

logic self__750 : bits_1

logic self__751 : bits_1

logic self__752 : bits_1

logic self__753 : bits_1

logic self__754 : bits_1

logic self__755 : bits_1

logic self__756 : bits_1

logic self__757 : bits_1

logic self__758 : bits_1

logic self__759 : bits_1

logic self__760 : bits_1

logic self__761 : bits_1

logic self__762 : bits_1

logic self__763 : bits_1

logic self__764 : bits_2

logic self__765 : bits_1

logic self__766 : bits_1

logic self__767 : bits_1

logic self__768 : bits_1

logic self__769 : bits_1

logic self__770 : bits_1

logic self__771 : bits_3

logic self__772 : bits_5

logic self__773 : bool

logic self__774 : bool

logic self__775 : bool

logic self__776 : bool

logic self__777 : bool

logic self__778 : bool

logic self__779 : bool

logic result753 : int

logic i12 : int

axiom H : true

axiom H1 : true

axiom H2 : (to_rep3(o) = dw1000__driver__read_otp__word)

axiom H3 : ((o1 = o) and ((o2 = self__1) and ((o3 = self__2) and
  ((o4 = self__3) and ((o5 = self__4) and ((o6 = self__5) and
  ((o7 = self__6) and (((o8 = self__7) and ((o9 = self__8) and
  ((o10 = self__9) and ((o11 = self__10) and ((o12 = self__11) and
  ((o13 = self__12) and ((o14 = self__13) and ((o15 = self__14) and
  ((o16 = self__15) and ((o17 = self__16) and ((o18 = self__17) and
  ((o19 = self__18) and ((o20 = self__19) and ((o21 = self__20) and
  ((o22 = self__21) and ((o23 = self__22) and ((o24 = self__23) and
  ((o25 = self__24) and ((o26 = self__25) and ((o27 = self__26) and
  ((o28 = self__27) and ((o29 = self__28) and ((o30 = self__29) and
  ((o31 = self__30) and (o32 = self__31))))))))))))))))))))))))) and
  ((o33 = self__32) and ((o34 = self__33) and ((o35 = self__34) and
  ((o36 = self__35) and ((o37 = self__36) and ((o38 = self__37) and
  (o39 = self__38)))))))))))))))

axiom H4 : ((o40 = o1) and ((o41 = o2) and ((o42 = o3) and ((o43 = o4) and
  ((o44 = o5) and ((o45 = o6) and ((o46 = o7) and (((o47 = o8) and
  ((o48 = o9) and ((o49 = o10) and ((o50 = o11) and ((o51 = o12) and
  ((o52 = o13) and ((o53 = o14) and ((o54 = o15) and ((o55 = o16) and
  ((o56 = o17) and ((o57 = o18) and ((o58 = o19) and ((o59 = o20) and
  ((o60 = o21) and ((o61 = o22) and ((o62 = o23) and ((o63 = o24) and
  ((o64 = o25) and ((o65 = o26) and ((o66 = o27) and ((o67 = o28) and
  ((o68 = o29) and ((o69 = o30) and ((o70 = o31) and
  (o71 = o32))))))))))))))))))))))))) and ((o72 = o33) and ((o73 = o34) and
  ((o74 = o35) and ((o75 = o36) and ((o76 = o37) and ((o77 = o38) and
  (o78 = o39)))))))))))))))

axiom H5 : ((result = self__) and ((result1 = self__1) and
  ((result2 = self__2) and ((result3 = self__3) and ((result4 = self__4) and
  ((result5 = self__5) and ((result6 = self__6) and (((result7 = self__7) and
  ((result8 = self__8) and ((result9 = self__9) and
  ((result10 = self__10) and ((result11 = self__11) and
  ((result12 = self__12) and ((result13 = self__13) and
  ((result14 = self__14) and ((result15 = self__15) and
  ((result16 = self__16) and ((result17 = self__17) and
  ((result18 = self__18) and ((result19 = self__19) and
  ((result20 = self__20) and ((result21 = self__21) and
  ((result22 = self__22) and ((result23 = self__23) and
  ((result24 = self__24) and ((result25 = self__25) and
  ((result26 = self__26) and ((result27 = self__27) and
  ((result28 = self__28) and ((result29 = self__29) and
  ((result30 = self__30) and
  (result31 = self__31))))))))))))))))))))))))) and
  ((result32 = self__32) and ((result33 = self__33) and
  ((result34 = self__34) and ((result35 = self__35) and
  ((result36 = self__36) and ((result37 = self__37) and
  (result38 = self__38)))))))))))))))

axiom H6 : ((self__39 = o40) and ((self__40 = o41) and ((self__41 = o42) and
  ((self__42 = o43) and ((self__43 = o44) and ((self__44 = o45) and
  ((self__45 = o46) and (((self__46 = o47) and ((self__47 = o48) and
  ((self__48 = o49) and ((self__49 = o50) and ((self__50 = o51) and
  ((self__51 = o52) and ((self__52 = o53) and ((self__53 = o54) and
  ((self__54 = o55) and ((self__55 = o56) and ((self__56 = o57) and
  ((self__57 = o58) and ((self__58 = o59) and ((self__59 = o60) and
  ((self__60 = o61) and ((self__61 = o62) and ((self__62 = o63) and
  ((self__63 = o64) and ((self__64 = o65) and ((self__65 = o66) and
  ((self__66 = o67) and ((self__67 = o68) and ((self__68 = o69) and
  ((self__69 = o70) and (self__70 = o71))))))))))))))))))))))))) and
  ((self__71 = o72) and ((self__72 = o73) and ((self__73 = o74) and
  ((self__74 = o75) and ((self__75 = o76) and ((self__76 = o77) and
  (self__77 = o78)))))))))))))))

axiom H7 : true

axiom H8 : (to_rep3(o79) = dw1000__driver__read_otp__word1)

axiom H9 : ((o80 = self__39) and ((o81 = o79) and ((o82 = self__41) and
  ((o83 = self__42) and ((o84 = self__43) and ((o85 = self__44) and
  ((o86 = self__45) and (((o87 = self__46) and ((o88 = self__47) and
  ((o89 = self__48) and ((o90 = self__49) and ((o91 = self__50) and
  ((o92 = self__51) and ((o93 = self__52) and ((o94 = self__53) and
  ((o95 = self__54) and ((o96 = self__55) and ((o97 = self__56) and
  ((o98 = self__57) and ((o99 = self__58) and ((o100 = self__59) and
  ((o101 = self__60) and ((o102 = self__61) and ((o103 = self__62) and
  ((o104 = self__63) and ((o105 = self__64) and ((o106 = self__65) and
  ((o107 = self__66) and ((o108 = self__67) and ((o109 = self__68) and
  ((o110 = self__69) and (o111 = self__70))))))))))))))))))))))))) and
  ((o112 = self__71) and ((o113 = self__72) and ((o114 = self__73) and
  ((o115 = self__74) and ((o116 = self__75) and ((o117 = self__76) and
  (o118 = self__77)))))))))))))))

axiom H10 : ((o119 = o80) and ((o120 = o81) and ((o121 = o82) and
  ((o122 = o83) and ((o123 = o84) and ((o124 = o85) and ((o125 = o86) and
  (((o126 = o87) and ((o127 = o88) and ((o128 = o89) and ((o129 = o90) and
  ((o130 = o91) and ((o131 = o92) and ((o132 = o93) and ((o133 = o94) and
  ((o134 = o95) and ((o135 = o96) and ((o136 = o97) and ((o137 = o98) and
  ((o138 = o99) and ((o139 = o100) and ((o140 = o101) and ((o141 = o102) and
  ((o142 = o103) and ((o143 = o104) and ((o144 = o105) and ((o145 = o106) and
  ((o146 = o107) and ((o147 = o108) and ((o148 = o109) and ((o149 = o110) and
  (o150 = o111))))))))))))))))))))))))) and ((o151 = o112) and
  ((o152 = o113) and ((o153 = o114) and ((o154 = o115) and ((o155 = o116) and
  ((o156 = o117) and (o157 = o118)))))))))))))))

axiom H11 : ((result39 = self__39) and ((result40 = self__40) and
  ((result41 = self__41) and ((result42 = self__42) and
  ((result43 = self__43) and ((result44 = self__44) and
  ((result45 = self__45) and (((result46 = self__46) and
  ((result47 = self__47) and ((result48 = self__48) and
  ((result49 = self__49) and ((result50 = self__50) and
  ((result51 = self__51) and ((result52 = self__52) and
  ((result53 = self__53) and ((result54 = self__54) and
  ((result55 = self__55) and ((result56 = self__56) and
  ((result57 = self__57) and ((result58 = self__58) and
  ((result59 = self__59) and ((result60 = self__60) and
  ((result61 = self__61) and ((result62 = self__62) and
  ((result63 = self__63) and ((result64 = self__64) and
  ((result65 = self__65) and ((result66 = self__66) and
  ((result67 = self__67) and ((result68 = self__68) and
  ((result69 = self__69) and
  (result70 = self__70))))))))))))))))))))))))) and
  ((result71 = self__71) and ((result72 = self__72) and
  ((result73 = self__73) and ((result74 = self__74) and
  ((result75 = self__75) and ((result76 = self__76) and
  (result77 = self__77)))))))))))))))

axiom H12 : ((self__78 = o119) and ((self__79 = o120) and
  ((self__80 = o121) and ((self__81 = o122) and ((self__82 = o123) and
  ((self__83 = o124) and ((self__84 = o125) and (((self__85 = o126) and
  ((self__86 = o127) and ((self__87 = o128) and ((self__88 = o129) and
  ((self__89 = o130) and ((self__90 = o131) and ((self__91 = o132) and
  ((self__92 = o133) and ((self__93 = o134) and ((self__94 = o135) and
  ((self__95 = o136) and ((self__96 = o137) and ((self__97 = o138) and
  ((self__98 = o139) and ((self__99 = o140) and ((self__100 = o141) and
  ((self__101 = o142) and ((self__102 = o143) and ((self__103 = o144) and
  ((self__104 = o145) and ((self__105 = o146) and ((self__106 = o147) and
  ((self__107 = o148) and ((self__108 = o149) and
  (self__109 = o150))))))))))))))))))))))))) and ((self__110 = o151) and
  ((self__111 = o152) and ((self__112 = o153) and ((self__113 = o154) and
  ((self__114 = o155) and ((self__115 = o156) and
  (self__116 = o157)))))))))))))))

axiom H13 : true

axiom H14 : ((load_antenna_delay = true) ->
  (to_rep2(o158) = toSmall(bw_and2(word2, of_int2(65535)))))

axiom H15 : ((load_antenna_delay = true) -> ((o159 = self__78) and
  ((o160 = self__79) and ((o161 = self__80) and ((o162 = o158) and
  ((o163 = self__82) and ((o164 = self__83) and ((o165 = self__84) and
  (((o166 = self__85) and ((o167 = self__86) and ((o168 = self__87) and
  ((o169 = self__88) and ((o170 = self__89) and ((o171 = self__90) and
  ((o172 = self__91) and ((o173 = self__92) and ((o174 = self__93) and
  ((o175 = self__94) and ((o176 = self__95) and ((o177 = self__96) and
  ((o178 = self__97) and ((o179 = self__98) and ((o180 = self__99) and
  ((o181 = self__100) and ((o182 = self__101) and ((o183 = self__102) and
  ((o184 = self__103) and ((o185 = self__104) and ((o186 = self__105) and
  ((o187 = self__106) and ((o188 = self__107) and ((o189 = self__108) and
  (o190 = self__109))))))))))))))))))))))))) and ((o191 = self__110) and
  ((o192 = self__111) and ((o193 = self__112) and ((o194 = self__113) and
  ((o195 = self__114) and ((o196 = self__115) and
  (o197 = self__116))))))))))))))))

axiom H16 : ((load_antenna_delay = true) -> ((o198 = o159) and
  ((o199 = o160) and ((o200 = o161) and ((o201 = o162) and ((o202 = o163) and
  ((o203 = o164) and ((o204 = o165) and (((o205 = o166) and
  ((o206 = o167) and ((o207 = o168) and ((o208 = o169) and ((o209 = o170) and
  ((o210 = o171) and ((o211 = o172) and ((o212 = o173) and ((o213 = o174) and
  ((o214 = o175) and ((o215 = o176) and ((o216 = o177) and ((o217 = o178) and
  ((o218 = o179) and ((o219 = o180) and ((o220 = o181) and ((o221 = o182) and
  ((o222 = o183) and ((o223 = o184) and ((o224 = o185) and ((o225 = o186) and
  ((o226 = o187) and ((o227 = o188) and ((o228 = o189) and
  (o229 = o190))))))))))))))))))))))))) and ((o230 = o191) and
  ((o231 = o192) and ((o232 = o193) and ((o233 = o194) and ((o234 = o195) and
  ((o235 = o196) and (o236 = o197))))))))))))))))

axiom H17 : ((load_antenna_delay = true) -> ((result78 = self__78) and
  ((result79 = self__79) and ((result80 = self__80) and
  ((result81 = self__81) and ((result82 = self__82) and
  ((result83 = self__83) and ((result84 = self__84) and
  (((result85 = self__85) and ((result86 = self__86) and
  ((result87 = self__87) and ((result88 = self__88) and
  ((result89 = self__89) and ((result90 = self__90) and
  ((result91 = self__91) and ((result92 = self__92) and
  ((result93 = self__93) and ((result94 = self__94) and
  ((result95 = self__95) and ((result96 = self__96) and
  ((result97 = self__97) and ((result98 = self__98) and
  ((result99 = self__99) and ((result100 = self__100) and
  ((result101 = self__101) and ((result102 = self__102) and
  ((result103 = self__103) and ((result104 = self__104) and
  ((result105 = self__105) and ((result106 = self__106) and
  ((result107 = self__107) and ((result108 = self__108) and
  (result109 = self__109))))))))))))))))))))))))) and
  ((result110 = self__110) and ((result111 = self__111) and
  ((result112 = self__112) and ((result113 = self__113) and
  ((result114 = self__114) and ((result115 = self__115) and
  (result116 = self__116))))))))))))))))

axiom H18 : ((load_antenna_delay = true) -> ((self__117 = o198) and
  ((self__118 = o199) and ((self__119 = o200) and ((self__120 = o201) and
  ((self__121 = o202) and ((self__122 = o203) and ((self__123 = o204) and
  (((self__124 = o205) and ((self__125 = o206) and ((self__126 = o207) and
  ((self__127 = o208) and ((self__128 = o209) and ((self__129 = o210) and
  ((self__130 = o211) and ((self__131 = o212) and ((self__132 = o213) and
  ((self__133 = o214) and ((self__134 = o215) and ((self__135 = o216) and
  ((self__136 = o217) and ((self__137 = o218) and ((self__138 = o219) and
  ((self__139 = o220) and ((self__140 = o221) and ((self__141 = o222) and
  ((self__142 = o223) and ((self__143 = o224) and ((self__144 = o225) and
  ((self__145 = o226) and ((self__146 = o227) and ((self__147 = o228) and
  (self__148 = o229))))))))))))))))))))))))) and ((self__149 = o230) and
  ((self__150 = o231) and ((self__151 = o232) and ((self__152 = o233) and
  ((self__153 = o234) and ((self__154 = o235) and
  (self__155 = o236))))))))))))))))

axiom H19 : ((load_antenna_delay = true) -> (word2 = result117))

axiom H20 : ((load_antenna_delay = true) -> (word3 = lsr_bv2(word2,
  of_int2(16))))

axiom H21 : ((load_antenna_delay = true) ->
  (to_rep2(o237) = toSmall(bw_and2(word3, of_int2(65535)))))

axiom H22 : ((load_antenna_delay = true) -> ((o238 = self__117) and
  ((o239 = self__118) and ((o240 = o237) and ((o241 = self__120) and
  ((o242 = self__121) and ((o243 = self__122) and ((o244 = self__123) and
  (((o245 = self__124) and ((o246 = self__125) and ((o247 = self__126) and
  ((o248 = self__127) and ((o249 = self__128) and ((o250 = self__129) and
  ((o251 = self__130) and ((o252 = self__131) and ((o253 = self__132) and
  ((o254 = self__133) and ((o255 = self__134) and ((o256 = self__135) and
  ((o257 = self__136) and ((o258 = self__137) and ((o259 = self__138) and
  ((o260 = self__139) and ((o261 = self__140) and ((o262 = self__141) and
  ((o263 = self__142) and ((o264 = self__143) and ((o265 = self__144) and
  ((o266 = self__145) and ((o267 = self__146) and ((o268 = self__147) and
  (o269 = self__148))))))))))))))))))))))))) and ((o270 = self__149) and
  ((o271 = self__150) and ((o272 = self__151) and ((o273 = self__152) and
  ((o274 = self__153) and ((o275 = self__154) and
  (o276 = self__155))))))))))))))))

axiom H23 : ((load_antenna_delay = true) -> ((o277 = o238) and
  ((o278 = o239) and ((o279 = o240) and ((o280 = o241) and ((o281 = o242) and
  ((o282 = o243) and ((o283 = o244) and (((o284 = o245) and
  ((o285 = o246) and ((o286 = o247) and ((o287 = o248) and ((o288 = o249) and
  ((o289 = o250) and ((o290 = o251) and ((o291 = o252) and ((o292 = o253) and
  ((o293 = o254) and ((o294 = o255) and ((o295 = o256) and ((o296 = o257) and
  ((o297 = o258) and ((o298 = o259) and ((o299 = o260) and ((o300 = o261) and
  ((o301 = o262) and ((o302 = o263) and ((o303 = o264) and ((o304 = o265) and
  ((o305 = o266) and ((o306 = o267) and ((o307 = o268) and
  (o308 = o269))))))))))))))))))))))))) and ((o309 = o270) and
  ((o310 = o271) and ((o311 = o272) and ((o312 = o273) and ((o313 = o274) and
  ((o314 = o275) and (o315 = o276))))))))))))))))

axiom H24 : ((load_antenna_delay = true) -> ((result118 = self__117) and
  ((result119 = self__118) and ((result120 = self__119) and
  ((result121 = self__120) and ((result122 = self__121) and
  ((result123 = self__122) and ((result124 = self__123) and
  (((result125 = self__124) and ((result126 = self__125) and
  ((result127 = self__126) and ((result128 = self__127) and
  ((result129 = self__128) and ((result130 = self__129) and
  ((result131 = self__130) and ((result132 = self__131) and
  ((result133 = self__132) and ((result134 = self__133) and
  ((result135 = self__134) and ((result136 = self__135) and
  ((result137 = self__136) and ((result138 = self__137) and
  ((result139 = self__138) and ((result140 = self__139) and
  ((result141 = self__140) and ((result142 = self__141) and
  ((result143 = self__142) and ((result144 = self__143) and
  ((result145 = self__144) and ((result146 = self__145) and
  ((result147 = self__146) and ((result148 = self__147) and
  (result149 = self__148))))))))))))))))))))))))) and
  ((result150 = self__149) and ((result151 = self__150) and
  ((result152 = self__151) and ((result153 = self__152) and
  ((result154 = self__153) and ((result155 = self__154) and
  (result156 = self__155))))))))))))))))

axiom H25 : ((load_antenna_delay = true) -> ((self__156 = o277) and
  ((self__157 = o278) and ((self__158 = o279) and ((self__159 = o280) and
  ((self__160 = o281) and ((self__161 = o282) and ((self__162 = o283) and
  (((self__163 = o284) and ((self__164 = o285) and ((self__165 = o286) and
  ((self__166 = o287) and ((self__167 = o288) and ((self__168 = o289) and
  ((self__169 = o290) and ((self__170 = o291) and ((self__171 = o292) and
  ((self__172 = o293) and ((self__173 = o294) and ((self__174 = o295) and
  ((self__175 = o296) and ((self__176 = o297) and ((self__177 = o298) and
  ((self__178 = o299) and ((self__179 = o300) and ((self__180 = o301) and
  ((self__181 = o302) and ((self__182 = o303) and ((self__183 = o304) and
  ((self__184 = o305) and ((self__185 = o306) and ((self__186 = o307) and
  (self__187 = o308))))))))))))))))))))))))) and ((self__188 = o309) and
  ((self__189 = o310) and ((self__190 = o311) and ((self__191 = o312) and
  ((self__192 = o313) and ((self__193 = o314) and
  (self__194 = o315))))))))))))))))

axiom H26 : ((not (load_antenna_delay = true)) ->
  (to_rep2(o316) = of_int1(0)))

axiom H27 : ((not (load_antenna_delay = true)) -> ((o317 = self__78) and
  ((o318 = self__79) and ((o319 = self__80) and ((o320 = o316) and
  ((o321 = self__82) and ((o322 = self__83) and ((o323 = self__84) and
  (((o324 = self__85) and ((o325 = self__86) and ((o326 = self__87) and
  ((o327 = self__88) and ((o328 = self__89) and ((o329 = self__90) and
  ((o330 = self__91) and ((o331 = self__92) and ((o332 = self__93) and
  ((o333 = self__94) and ((o334 = self__95) and ((o335 = self__96) and
  ((o336 = self__97) and ((o337 = self__98) and ((o338 = self__99) and
  ((o339 = self__100) and ((o340 = self__101) and ((o341 = self__102) and
  ((o342 = self__103) and ((o343 = self__104) and ((o344 = self__105) and
  ((o345 = self__106) and ((o346 = self__107) and ((o347 = self__108) and
  (o348 = self__109))))))))))))))))))))))))) and ((o349 = self__110) and
  ((o350 = self__111) and ((o351 = self__112) and ((o352 = self__113) and
  ((o353 = self__114) and ((o354 = self__115) and
  (o355 = self__116))))))))))))))))

axiom H28 : ((not (load_antenna_delay = true)) -> ((o356 = o317) and
  ((o357 = o318) and ((o358 = o319) and ((o359 = o320) and ((o360 = o321) and
  ((o361 = o322) and ((o362 = o323) and (((o363 = o324) and
  ((o364 = o325) and ((o365 = o326) and ((o366 = o327) and ((o367 = o328) and
  ((o368 = o329) and ((o369 = o330) and ((o370 = o331) and ((o371 = o332) and
  ((o372 = o333) and ((o373 = o334) and ((o374 = o335) and ((o375 = o336) and
  ((o376 = o337) and ((o377 = o338) and ((o378 = o339) and ((o379 = o340) and
  ((o380 = o341) and ((o381 = o342) and ((o382 = o343) and ((o383 = o344) and
  ((o384 = o345) and ((o385 = o346) and ((o386 = o347) and
  (o387 = o348))))))))))))))))))))))))) and ((o388 = o349) and
  ((o389 = o350) and ((o390 = o351) and ((o391 = o352) and ((o392 = o353) and
  ((o393 = o354) and (o394 = o355))))))))))))))))

axiom H29 : ((not (load_antenna_delay = true)) -> ((result157 = self__78) and
  ((result158 = self__79) and ((result159 = self__80) and
  ((result160 = self__81) and ((result161 = self__82) and
  ((result162 = self__83) and ((result163 = self__84) and
  (((result164 = self__85) and ((result165 = self__86) and
  ((result166 = self__87) and ((result167 = self__88) and
  ((result168 = self__89) and ((result169 = self__90) and
  ((result170 = self__91) and ((result171 = self__92) and
  ((result172 = self__93) and ((result173 = self__94) and
  ((result174 = self__95) and ((result175 = self__96) and
  ((result176 = self__97) and ((result177 = self__98) and
  ((result178 = self__99) and ((result179 = self__100) and
  ((result180 = self__101) and ((result181 = self__102) and
  ((result182 = self__103) and ((result183 = self__104) and
  ((result184 = self__105) and ((result185 = self__106) and
  ((result186 = self__107) and ((result187 = self__108) and
  (result188 = self__109))))))))))))))))))))))))) and
  ((result189 = self__110) and ((result190 = self__111) and
  ((result191 = self__112) and ((result192 = self__113) and
  ((result193 = self__114) and ((result194 = self__115) and
  (result195 = self__116))))))))))))))))

axiom H30 : ((not (load_antenna_delay = true)) -> ((self__195 = o356) and
  ((self__196 = o357) and ((self__197 = o358) and ((self__198 = o359) and
  ((self__199 = o360) and ((self__200 = o361) and ((self__201 = o362) and
  (((self__202 = o363) and ((self__203 = o364) and ((self__204 = o365) and
  ((self__205 = o366) and ((self__206 = o367) and ((self__207 = o368) and
  ((self__208 = o369) and ((self__209 = o370) and ((self__210 = o371) and
  ((self__211 = o372) and ((self__212 = o373) and ((self__213 = o374) and
  ((self__214 = o375) and ((self__215 = o376) and ((self__216 = o377) and
  ((self__217 = o378) and ((self__218 = o379) and ((self__219 = o380) and
  ((self__220 = o381) and ((self__221 = o382) and ((self__222 = o383) and
  ((self__223 = o384) and ((self__224 = o385) and ((self__225 = o386) and
  (self__226 = o387))))))))))))))))))))))))) and ((self__227 = o388) and
  ((self__228 = o389) and ((self__229 = o390) and ((self__230 = o391) and
  ((self__231 = o392) and ((self__232 = o393) and
  (self__233 = o394))))))))))))))))

axiom H31 : ((not (load_antenna_delay = true)) ->
  (to_rep2(o395) = of_int1(0)))

axiom H32 : ((not (load_antenna_delay = true)) -> ((o396 = self__195) and
  ((o397 = self__196) and ((o398 = o395) and ((o399 = self__198) and
  ((o400 = self__199) and ((o401 = self__200) and ((o402 = self__201) and
  (((o403 = self__202) and ((o404 = self__203) and ((o405 = self__204) and
  ((o406 = self__205) and ((o407 = self__206) and ((o408 = self__207) and
  ((o409 = self__208) and ((o410 = self__209) and ((o411 = self__210) and
  ((o412 = self__211) and ((o413 = self__212) and ((o414 = self__213) and
  ((o415 = self__214) and ((o416 = self__215) and ((o417 = self__216) and
  ((o418 = self__217) and ((o419 = self__218) and ((o420 = self__219) and
  ((o421 = self__220) and ((o422 = self__221) and ((o423 = self__222) and
  ((o424 = self__223) and ((o425 = self__224) and ((o426 = self__225) and
  (o427 = self__226))))))))))))))))))))))))) and ((o428 = self__227) and
  ((o429 = self__228) and ((o430 = self__229) and ((o431 = self__230) and
  ((o432 = self__231) and ((o433 = self__232) and
  (o434 = self__233))))))))))))))))

axiom H33 : ((not (load_antenna_delay = true)) -> ((o435 = o396) and
  ((o436 = o397) and ((o437 = o398) and ((o438 = o399) and ((o439 = o400) and
  ((o440 = o401) and ((o441 = o402) and (((o442 = o403) and
  ((o443 = o404) and ((o444 = o405) and ((o445 = o406) and ((o446 = o407) and
  ((o447 = o408) and ((o448 = o409) and ((o449 = o410) and ((o450 = o411) and
  ((o451 = o412) and ((o452 = o413) and ((o453 = o414) and ((o454 = o415) and
  ((o455 = o416) and ((o456 = o417) and ((o457 = o418) and ((o458 = o419) and
  ((o459 = o420) and ((o460 = o421) and ((o461 = o422) and ((o462 = o423) and
  ((o463 = o424) and ((o464 = o425) and ((o465 = o426) and
  (o466 = o427))))))))))))))))))))))))) and ((o467 = o428) and
  ((o468 = o429) and ((o469 = o430) and ((o470 = o431) and ((o471 = o432) and
  ((o472 = o433) and (o473 = o434))))))))))))))))

axiom H34 : ((not (load_antenna_delay = true)) ->
  ((result196 = self__195) and ((result197 = self__196) and
  ((result198 = self__197) and ((result199 = self__198) and
  ((result200 = self__199) and ((result201 = self__200) and
  ((result202 = self__201) and (((result203 = self__202) and
  ((result204 = self__203) and ((result205 = self__204) and
  ((result206 = self__205) and ((result207 = self__206) and
  ((result208 = self__207) and ((result209 = self__208) and
  ((result210 = self__209) and ((result211 = self__210) and
  ((result212 = self__211) and ((result213 = self__212) and
  ((result214 = self__213) and ((result215 = self__214) and
  ((result216 = self__215) and ((result217 = self__216) and
  ((result218 = self__217) and ((result219 = self__218) and
  ((result220 = self__219) and ((result221 = self__220) and
  ((result222 = self__221) and ((result223 = self__222) and
  ((result224 = self__223) and ((result225 = self__224) and
  ((result226 = self__225) and
  (result227 = self__226))))))))))))))))))))))))) and
  ((result228 = self__227) and ((result229 = self__228) and
  ((result230 = self__229) and ((result231 = self__230) and
  ((result232 = self__231) and ((result233 = self__232) and
  (result234 = self__233))))))))))))))))

axiom H35 : ((not (load_antenna_delay = true)) -> ((self__234 = o435) and
  ((self__235 = o436) and ((self__236 = o437) and ((self__237 = o438) and
  ((self__238 = o439) and ((self__239 = o440) and ((self__240 = o441) and
  (((self__241 = o442) and ((self__242 = o443) and ((self__243 = o444) and
  ((self__244 = o445) and ((self__245 = o446) and ((self__246 = o447) and
  ((self__247 = o448) and ((self__248 = o449) and ((self__249 = o450) and
  ((self__250 = o451) and ((self__251 = o452) and ((self__252 = o453) and
  ((self__253 = o454) and ((self__254 = o455) and ((self__255 = o456) and
  ((self__256 = o457) and ((self__257 = o458) and ((self__258 = o459) and
  ((self__259 = o460) and ((self__260 = o461) and ((self__261 = o462) and
  ((self__262 = o463) and ((self__263 = o464) and ((self__264 = o465) and
  (self__265 = o466))))))))))))))))))))))))) and ((self__266 = o467) and
  ((self__267 = o468) and ((self__268 = o469) and ((self__269 = o470) and
  ((self__270 = o471) and ((self__271 = o472) and
  (self__272 = o473))))))))))))))))

axiom H36 : ((not (load_antenna_delay = true)) ->
  ((self__156 = self__234) and ((self__157 = self__235) and
  ((self__158 = self__236) and ((self__159 = self__237) and
  ((self__160 = self__238) and ((self__161 = self__239) and
  ((self__162 = self__240) and (((self__163 = self__241) and
  ((self__164 = self__242) and ((self__165 = self__243) and
  ((self__166 = self__244) and ((self__167 = self__245) and
  ((self__168 = self__246) and ((self__169 = self__247) and
  ((self__170 = self__248) and ((self__171 = self__249) and
  ((self__172 = self__250) and ((self__173 = self__251) and
  ((self__174 = self__252) and ((self__175 = self__253) and
  ((self__176 = self__254) and ((self__177 = self__255) and
  ((self__178 = self__256) and ((self__179 = self__257) and
  ((self__180 = self__258) and ((self__181 = self__259) and
  ((self__182 = self__260) and ((self__183 = self__261) and
  ((self__184 = self__262) and ((self__185 = self__263) and
  ((self__186 = self__264) and
  (self__187 = self__265))))))))))))))))))))))))) and
  ((self__188 = self__266) and ((self__189 = self__267) and
  ((self__190 = self__268) and ((self__191 = self__269) and
  ((self__192 = self__270) and ((self__193 = self__271) and
  (self__194 = self__272))))))))))))))))

axiom H37 : ((not (load_antenna_delay = true)) ->
  (device_state1 = device_state))

axiom H38 : ((not (load_antenna_delay = true)) -> (word3 = word))

axiom H39 : ((not (load_antenna_delay = true)) ->
  ((self__156 = self__234) and ((self__157 = self__235) and
  ((self__158 = self__236) and ((self__159 = self__237) and
  ((self__160 = self__238) and ((self__161 = self__239) and
  ((self__162 = self__240) and (((self__163 = self__241) and
  ((self__164 = self__242) and ((self__165 = self__243) and
  ((self__166 = self__244) and ((self__167 = self__245) and
  ((self__168 = self__246) and ((self__169 = self__247) and
  ((self__170 = self__248) and ((self__171 = self__249) and
  ((self__172 = self__250) and ((self__173 = self__251) and
  ((self__174 = self__252) and ((self__175 = self__253) and
  ((self__176 = self__254) and ((self__177 = self__255) and
  ((self__178 = self__256) and ((self__179 = self__257) and
  ((self__180 = self__258) and ((self__181 = self__259) and
  ((self__182 = self__260) and ((self__183 = self__261) and
  ((self__184 = self__262) and ((self__185 = self__263) and
  ((self__186 = self__264) and
  (self__187 = self__265))))))))))))))))))))))))) and
  ((self__188 = self__266) and ((self__189 = self__267) and
  ((self__190 = self__268) and ((self__191 = self__269) and
  ((self__192 = self__270) and ((self__193 = self__271) and
  (self__194 = self__272))))))))))))))))

axiom H40 : ((not (load_antenna_delay = true)) ->
  (device_state1 = device_state))

axiom H41 : ((not (load_antenna_delay = true)) -> (word3 = word1))

axiom H42 : (load_xtal_trim = true)

axiom H43 : true

 (* File "decadriver.ads", line 242, characters 0-0 *)
goal WP_parameter_def : ule2(toBig1(of_int(0)), bw_and2(word4, of_int2(31)))
