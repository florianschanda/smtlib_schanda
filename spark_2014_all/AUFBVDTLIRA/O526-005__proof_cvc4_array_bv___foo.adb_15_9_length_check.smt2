(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(declare-sort index_t 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 64))
(declare-fun user_eq (index_t index_t) Bool)
(declare-const dummy index_t)
(declare-datatypes () ((index_t__ref (mk_index_t__ref (index_t__content index_t)))))
(define-fun index_t__ref___projection ((a index_t__ref)) index_t (index_t__content a))
(declare-fun to_rep (index_t) (_ BitVec 64))
(declare-fun of_rep ((_ BitVec 64)) index_t)
(assert (forall ((x index_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x index_t)) Int (bv2nat (to_rep x)))
(assert (forall ((x index_t)) (! (uint_in_range1 (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort byte_t 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (byte_t byte_t) Bool)
(declare-const dummy1 byte_t)
(declare-datatypes () ((byte_t__ref (mk_byte_t__ref (byte_t__content byte_t)))))
(define-fun byte_t__ref___projection ((a byte_t__ref)) byte_t (byte_t__content a))
(declare-fun to_rep1 (byte_t) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) byte_t)
(assert (forall ((x byte_t)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x byte_t)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x byte_t)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) byte_t))))))
(declare-fun slide ((Array (_ BitVec 64) byte_t) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) byte_t))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) byte_t)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte_t)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) byte_t)) (b (Array (_ BitVec 64) byte_t))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) index_t)
(declare-fun last (t) index_t)
(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)
(assert (forall ((f (_ BitVec 64)) (l (_ BitVec 64))) (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool true)
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 64) byte_t)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte_t) (elts a))
(define-fun of_array ((a (Array (_ BitVec 64) byte_t)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 64) byte_t)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 64) byte_t)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 64) byte_t)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((array_t__ref (mk_array_t__ref (array_t__content us_t)))))
(define-fun array_t__ref___projection ((a array_t__ref)) us_t (array_t__content a))
(declare-const x__first index_t)
(declare-const x__last index_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))
(define-fun dynamic_property1 ((first_int (_ BitVec 64)) (last_int (_ BitVec 64)) (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))
(declare-fun user_eq3 (index_t index_t) Bool)
(declare-const dummy3 index_t)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content index_t)))))
(define-fun t4b__ref___projection ((a t4b__ref)) index_t (t4b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) index_t)
(declare-fun last2 (t1) index_t)
(declare-fun mk1 ((_ BitVec 64) (_ BitVec 64)) t1)
(assert (forall ((f (_ BitVec 64)) (l (_ BitVec 64))) (! (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool (=> (bvule low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array (_ BitVec 64) byte_t)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 64) byte_t) (elts1 a))
(define-fun of_array1 ((a (Array (_ BitVec 64) byte_t)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) (_ BitVec 64) (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) (_ BitVec 64) (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a)) (+ (- (bv2nat (last3 a)) (bv2nat (first3 a))) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array (_ BitVec 64) byte_t)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array (_ BitVec 64) byte_t)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array (_ BitVec 64) byte_t)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array (_ BitVec 64) byte_t))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq4 (us_t1 us_t1) Bool)
(declare-const dummy4 us_t1)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content us_t1)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_t1 (t5b__content a))
(declare-fun temp___186 ((_ BitVec 8) (_ BitVec 64) (_ BitVec 64)) us_t1)
(define-fun dynamic_invariant ((temp___expr_159 (_ BitVec 64)) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)
(define-fun dynamic_invariant1 ((temp___expr_166 (_ BitVec 8)) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool true)
(define-fun dynamic_invariant2 ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFF (first1 temp___expr_173) (last1 temp___expr_173))))
(assert (forall ((temp___188 (_ BitVec 8))) (forall ((temp___189 (_ BitVec 64)) (temp___190 (_ BitVec 64))) (let ((temp___187 (temp___186 temp___188 temp___189 temp___190))) (=> (dynamic_invariant1 temp___188 true true true true) (and (=> (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFF temp___189 temp___190) (and (= (first3 temp___187) temp___189) (= (last3 temp___187) temp___190))) (forall ((temp___191 (_ BitVec 64))) (= (to_rep1 (select (to_array1 temp___187) temp___191)) temp___188))))))))
(declare-const temp___193 (Array (_ BitVec 64) byte_t))
(declare-const temp___1931 t1)
(declare-const temp___194 (Array (_ BitVec 64) byte_t))
(declare-const temp___1941 t)
(assert (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFF (to_rep x__first) (to_rep x__last)))
(assert (= (to_rep (first2 (rt1 (temp___186 #x00 (to_rep x__first) (to_rep x__last))))) (to_rep x__first)))
(assert (= (to_rep (last2 (rt1 (temp___186 #x00 (to_rep x__first) (to_rep x__last))))) (to_rep x__last)))
(assert (= (mk___t1 temp___193 temp___1931) (temp___186 #x00 (to_rep x__first) (to_rep x__last))))
(assert (= temp___193 temp___194))
(assert (= (mk (to_rep (first2 temp___1931)) (to_rep (last2 temp___1931))) temp___1941))
(assert (not (= (ite (<= (bv2nat (to_rep (first temp___1941))) (bv2nat (to_rep (last temp___1941)))) (+ (- (bv2nat (to_rep (last temp___1941))) (bv2nat (to_rep (first temp___1941)))) 1) 0) (ite (<= (bv2nat (to_rep x__first)) (bv2nat (to_rep x__last))) (+ (- (bv2nat (to_rep x__last)) (bv2nat (to_rep x__first))) 1) 0))))
(check-sat)
(exit)
