(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 32) Int) Bool)
(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min1 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 64) Int) Bool)
(declare-fun lsr2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left3 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int3 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv2 x ((_ int2bv 64) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min2 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun safedivision64 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun safedivision64__function_guard ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_236 (_ BitVec 64)) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool true)
(assert (forall ((dividend (_ BitVec 64)) (divisor (_ BitVec 64))) (! (=> (and (dynamic_invariant dividend true true true true) (dynamic_invariant divisor true true true true)) (let ((result (safedivision64 dividend divisor))) (and (= result (bvudiv dividend divisor)) (dynamic_invariant result true false true true)))) :pattern ((safedivision64 dividend divisor)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)
(declare-fun writereg32post__function_guard (Bool (_ BitVec 64) (_ BitVec 32)) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned32 unsigned32) Bool)
(declare-const dummy1 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant1 ((temp___expr_243 (_ BitVec 32)) (temp___is_init_239 Bool) (temp___skip_constant_240 Bool) (temp___do_toplevel_241 Bool) (temp___do_typ_inv_242 Bool)) Bool true)
(assert (forall ((x86__rbx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rbx true true true true) (let ((result (ebx x86__rbx))) (and (= result (readreg32 x86__rbx)) (dynamic_invariant1 result true false true true)))) :pattern ((ebx x86__rbx)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (unsigned8 unsigned8) Bool)
(declare-const dummy2 unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int4 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun readmem64 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem64 addr x86__memory))) (and (and (and (and (and (and (and (and (= (bvand result #x00000000000000FF) ((_ zero_extend 56) (to_rep (select x86__memory addr)))) (= (bvand result #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0000000000000100))) (= (bvand result #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x0000000000010000))) (= (bvand result #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x0000000001000000))) (= (bvand result #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000004)))) #x0000000100000000))) (= (bvand result #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000005)))) #x0000010000000000))) (= (bvand result #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000006)))) #x0001000000000000))) (= (bvand result #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000007)))) #x0100000000000000))) (dynamic_invariant result true false true true)))) :pattern ((readmem64 addr x86__memory))))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant2 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true true) (let ((result (readreg32 reg))) (and (= result ((_ extract 31 0) (bvand reg #x00000000FFFFFFFF))) (dynamic_invariant1 result true false true true)))) :pattern ((readreg32 reg)))))
(assert (forall ((regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 32))) (! (=> (and (dynamic_invariant regnew true true true true) (dynamic_invariant1 val__ true true true true)) (= (= (writereg32post regnew val__) true) (and (= (readreg32 regnew) val__) (= (bvand regnew #xFFFFFFFF00000000) #x0000000000000000)))) :pattern ((writereg32post regnew val__))))))
(declare-const rsp (_ BitVec 64))
(declare-const memory (Array (_ BitVec 64) unsigned8))
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 64))
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const o4 (_ BitVec 32))
(declare-const o5 (_ BitVec 32))
(declare-const o6 (_ BitVec 32))
(declare-const o7 Bool)
(declare-const o8 (_ BitVec 64))
(declare-const o9 (_ BitVec 64))
(declare-const zeroflag Bool)
(declare-const xmm0 (_ BitVec 64))
(declare-const xmm1 (_ BitVec 64))
(declare-const xmm2 (_ BitVec 64))
(declare-const rbx (_ BitVec 64))
(declare-const rsp1 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result (_ BitVec 64))
(declare-const xmm11 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const xmm01 (_ BitVec 64))
(declare-const rdi (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const result2 (_ BitVec 64))
(declare-const xmm12 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const xmm13 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const rsp2 (_ BitVec 64))
(declare-const rsp3 (_ BitVec 64))
(declare-const result5 (_ BitVec 64))
(declare-const xmm21 (_ BitVec 64))
(declare-const rbx1 (_ BitVec 64))
(declare-const result6 Bool)
(declare-const zeroflag1 Bool)
(declare-const result7 (_ BitVec 64))
(declare-const xmm22 (_ BitVec 64))
(assert (= rsp1 rsp))
(assert (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 #x0000000000000001)))) (not (= i (bvadd rsp1 #x0000000000000002)))) (not (= i (bvadd rsp1 #x0000000000000003)))) (not (= i (bvadd rsp1 #x0000000000000004)))) (not (= i (bvadd rsp1 #x0000000000000005)))) (not (= i (bvadd rsp1 #x0000000000000006)))) (not (= i (bvadd rsp1 #x0000000000000007)))) (= (to_rep (select memory1 i)) (to_rep (select memory i)))))))
(assert (and (= o (readmem64 #x00000000004011D0 memory1)) (and (and (and (and (and (and (and (= (bvand o #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory1 #x00000000004011D0)))) (= (bvand o #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000001)))) #x0000000000000100))) (= (bvand o #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000002)))) #x0000000000010000))) (= (bvand o #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000003)))) #x0000000001000000))) (= (bvand o #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000004)))) #x0000000100000000))) (= (bvand o #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000005)))) #x0000010000000000))) (= (bvand o #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000006)))) #x0001000000000000))) (= (bvand o #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x00000000004011D0 #x0000000000000007)))) #x0100000000000000)))))
(assert (= xmm1 result))
(assert (= xmm11 o))
(assert (= xmm0 result1))
(assert (= xmm01 xmm2))
(assert (= (writereg32post rdi #x004010E0) true))
(assert (= (writereg32post rax #x00000002) true))
(assert (and (and (and (and (and (and (and (and (= (bvand xmm2 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 rsp1)))) (= (bvand xmm2 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000001)))) #x0000000000000100))) (= (bvand xmm2 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000002)))) #x0000000000010000))) (= (bvand xmm2 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000003)))) #x0000000001000000))) (= (bvand xmm2 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000004)))) #x0000000100000000))) (= (bvand xmm2 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000005)))) #x0000010000000000))) (= (bvand xmm2 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000006)))) #x0001000000000000))) (= (bvand xmm2 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 #x0000000000000001)))) (not (= i (bvadd rsp1 #x0000000000000002)))) (not (= i (bvadd rsp1 #x0000000000000003)))) (not (= i (bvadd rsp1 #x0000000000000004)))) (not (= i (bvadd rsp1 #x0000000000000005)))) (not (= i (bvadd rsp1 #x0000000000000006)))) (not (= i (bvadd rsp1 #x0000000000000007)))) (= (to_rep (select memory2 i)) (to_rep (select memory1 i))))))))
(assert (= xmm11 result2))
(assert (= xmm12 (bvmul xmm11 xmm2)))
(assert (and (= o1 (readmem64 #x00000000004011D8 memory2)) (and (and (and (and (and (and (and (= (bvand o1 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 #x00000000004011D8)))) (= (bvand o1 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000001)))) #x0000000000000100))) (= (bvand o1 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000002)))) #x0000000000010000))) (= (bvand o1 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000003)))) #x0000000001000000))) (= (bvand o1 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000004)))) #x0000000100000000))) (= (bvand o1 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000005)))) #x0000010000000000))) (= (bvand o1 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000006)))) #x0001000000000000))) (= (bvand o1 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x00000000004011D8 #x0000000000000007)))) #x0100000000000000)))))
(assert (and (= o2 (safedivision64 xmm12 o1)) (= o2 (bvudiv xmm12 o1))))
(assert (= xmm12 result3))
(assert (= xmm13 o2))
(assert (= rsp1 result4))
(assert (= rsp2 (bvsub rsp1 #x0000000000000008)))
(assert (= rsp3 (bvadd rsp2 #x0000000000000008)))
(assert (and (= o3 (readmem64 rsp3 memory2)) (and (and (and (and (and (and (and (= (bvand o3 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 rsp3)))) (= (bvand o3 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000001)))) #x0000000000000100))) (= (bvand o3 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000002)))) #x0000000000010000))) (= (bvand o3 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000003)))) #x0000000001000000))) (= (bvand o3 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000004)))) #x0000000100000000))) (= (bvand o3 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000005)))) #x0000010000000000))) (= (bvand o3 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000006)))) #x0001000000000000))) (= (bvand o3 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp3 #x0000000000000007)))) #x0100000000000000)))))
(assert (= xmm2 result5))
(assert (= xmm21 o3))
(assert (and (= o4 (ebx rbx)) (= o4 (readreg32 rbx))))
(assert (= o5 (bvsub o4 #x00000001)))
(assert (= (writereg32post rbx1 o5) true))
(assert (and (= o6 (ebx rbx1)) (= o6 (readreg32 rbx1))))
(assert (= o7 (ite (= o6 #x00000000) true false)))
(assert (= zeroflag result6))
(assert (= zeroflag1 o7))
(assert (and (= o8 (readmem64 #x0000000000401170 memory2)) (and (and (and (and (and (and (and (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 #x0000000000401170)))) (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000001)))) #x0000000000000100))) (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000002)))) #x0000000000010000))) (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000003)))) #x0000000001000000))) (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000004)))) #x0000000100000000))) (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000005)))) #x0000010000000000))) (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000006)))) #x0001000000000000))) (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd #x0000000000401170 #x0000000000000007)))) #x0100000000000000)))))
(assert (= o9 (bvadd xmm21 o8)))
(assert (= xmm21 result7))
(assert (= xmm22 o9))
(assert (not (= zeroflag1 true)))
(declare-const i (_ BitVec 64))
(assert (bvule #x0000000000000000 i))
(assert (bvule i #xFFFFFFFFFFFFFFFF))
(assert (not (= i rsp3)))
(assert (not (= i (bvadd rsp3 #x0000000000000001))))
(assert (not (= i (bvadd rsp3 #x0000000000000002))))
(assert (not (= i (bvadd rsp3 #x0000000000000003))))
(assert (not (= i (bvadd rsp3 #x0000000000000004))))
(assert (not (= i (bvadd rsp3 #x0000000000000005))))
(assert (not (= i (bvadd rsp3 #x0000000000000006))))
(assert (not (= i (bvadd rsp3 #x0000000000000007))))
(assert (not (= (to_rep (select memory2 i)) (to_rep (select memory i)))))
(check-sat)
(exit)
