(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(18446744073709551616 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned64

logic attr__ATTRIBUTE_MODULUS : t1

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : t1, t1 -> bool

axiom bool_eq_def3 :
  (forall x:t1. forall y:t1 [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t1

logic user_eq : unsigned64, unsigned64 -> bool

logic dummy : unsigned64

type unsigned64__ref = { unsigned64__content : unsigned64
}

function unsigned64__ref___projection(a: unsigned64__ref) : unsigned64 =
  (a).unsigned64__content

type unsigned8

logic attr__ATTRIBUTE_MODULUS1 : t

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : unsigned8, unsigned8 -> bool

logic dummy1 : unsigned8

type unsigned8__ref = { unsigned8__content : unsigned8
}

function unsigned8__ref___projection(a: unsigned8__ref) : unsigned8 =
  (a).unsigned8__content

logic to_rep : unsigned8 -> t

logic of_rep : t -> unsigned8

axiom inversion_axiom :
  (forall x:unsigned8 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int3(x: unsigned8) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned8 [to_int3(x)]. uint_in_range(to_int3(x)))

type map__ref = { map__content : (t1,unsigned8) farray
}

logic slide : (t1,unsigned8) farray, t1, t1 -> (t1,unsigned8) farray

axiom slide_eq :
  (forall a:(t1,unsigned8) farray.
  (forall first:t1 [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t1,unsigned8) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub1(i, sub1(new_first, old_first))]))))))

logic concat : (t1,unsigned8) farray, t1, t1, (t1,unsigned8) farray, t1,
  t1 -> (t1,unsigned8) farray

axiom concat_def :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1.
  (forall i:t1 [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((ule1(a_first, i) and ule1(i, a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and (ugt1(i, a_last) -> ((concat(a,
  a_first, a_last, b, b_first, b_last)[i]) = (b[add1(sub1(i, a_last),
  sub1(b_first, one1))])))))))

logic singleton : unsigned8, t1 -> (t1,unsigned8) farray

axiom singleton_def :
  (forall v:unsigned8.
  (forall i:t1 [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (t1,unsigned8) farray, t1, t1, (t1,unsigned8) farray, t1,
  t1 -> bool

axiom bool_eq_def5 :
  (forall a:(t1,unsigned8) farray. forall a__first:t1. forall a__last:t1.
  forall b:(t1,unsigned8) farray. forall b__first:t1. forall b__last:t1
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)]. (((((ule1(a__first,
  a__last) and (ule1(b__first, b__last) and (sub1(a__last,
  a__first) = sub1(b__last, b__first)))) or ((not ule1(a__first,
  a__last)) and ugt1(b__first, b__last))) and
  (forall temp___idx_132:t1. (((ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_132)])))) or (not (ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)))))) -> (bool_eq6(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule1(a__first, a__last) ->
  (ule1(b__first, b__last) and (sub1(a__last, a__first) = sub1(b__last,
  b__first)))) and ((not ule1(a__first, a__last)) -> ugt1(b__first,
  b__last))) and
  (forall temp___idx_132:t1. ((ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_132)]))))))) -> (bool_eq6(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> (((ule1(a__first, a__last) -> (ule1(b__first,
  b__last) and (sub1(a__last, a__first) = sub1(b__last, b__first)))) and
  ((not ule1(a__first, a__last)) -> ugt1(b__first, b__last))) and
  (forall temp___idx_132:t1. ((ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_132)])))))))))

logic compare : (t1,unsigned8) farray, t1, t1, (t1,unsigned8) farray, t1,
  t1 -> int

axiom compare_def_eq :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a, a_first, a_last, b,
  b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) <  0) <->
  (exists i:t1. exists j:t1. (ule1(i, a_last) and (ult1(j, b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  (ult1(i, a_last) and ult(to_rep((a[add1(i, one1)])), to_rep((b[add1(j,
  one1)]))))))))))))

axiom compare_def_gt :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((0 <  compare(a,
  a_first, a_last, b, b_first, b_last)) <->
  (exists i:t1. exists j:t1. (ule1(i, b_last) and (ult1(j, a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  (ult1(i, b_last) and ugt(to_rep((a[add1(j, one1)])), to_rep((b[add1(i,
  one1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic inrange64 : t1, t1, t1 -> bool

logic inrange64__function_guard : bool, t1, t1, t1 -> prop

axiom inrange64__post_axiom :
  (forall var:t1. forall bottom:t1. forall range_size:t1 [inrange64(var,
  bottom, range_size)]. (((inrange64(var, bottom, range_size) = true) ->
  ((ule1(bottom, add1(sub1(of_int1(18446744073709551615), range_size),
  of_int1(1))) -> (ule1(bottom, var) and ule1(var, add1(bottom,
  sub1(range_size, of_int1(1)))))) and ((not ule1(bottom,
  add1(sub1(of_int1(18446744073709551615), range_size), of_int1(1)))) ->
  ((ule1(bottom, var) and ule1(var, of_int1(18446744073709551615))) or
  ule1(var, sub1(sub1(range_size, sub1(of_int1(18446744073709551615),
  bottom)), of_int1(2))))))) and (((ule1(bottom,
  add1(sub1(of_int1(18446744073709551615), range_size), of_int1(1))) and
  (ule1(bottom, var) and ule1(var, add1(bottom, sub1(range_size,
  of_int1(1)))))) or ((not ule1(bottom,
  add1(sub1(of_int1(18446744073709551615), range_size), of_int1(1)))) and
  ((ule1(bottom, var) and ule1(var, of_int1(18446744073709551615))) or
  ule1(var, sub1(sub1(range_size, sub1(of_int1(18446744073709551615),
  bottom)), of_int1(2)))))) -> (inrange64(var, bottom, range_size) = true))))

logic insaferegion64 : t1, t1 -> bool

logic insaferegion64__function_guard : bool, t1, t1 -> prop

axiom insaferegion64__post_axiom :
  (forall var:t1. forall rsp:t1 [insaferegion64(var, rsp)].
  ((insaferegion64(var, rsp) = true) <-> ((ule1(var,
  of_int1(14987979559889010687)) and uge1(var, add1(rsp, of_int1(8)))) or
  (ule1(var, of_int1(4611686018427387903)) and uge1(var, of_int1(0))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic readmem64 : t1, (t1,unsigned8) farray -> t1

logic readmem64__function_guard : t1, t1, (t1,unsigned8) farray -> prop

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

axiom readmem64__post_axiom :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem64(addr, x86__memory)].
  ((((((((bw_and1(readmem64(addr, x86__memory),
  of_int1(255)) = toBig(to_rep((x86__memory[addr])))) and
  (bw_and1(readmem64(addr, x86__memory),
  of_int1(65280)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(1))]))), of_int1(256)))) and (bw_and1(readmem64(addr, x86__memory),
  of_int1(16711680)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(2))]))), of_int1(65536)))) and (bw_and1(readmem64(addr,
  x86__memory),
  of_int1(4278190080)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(3))]))), of_int1(16777216)))) and (bw_and1(readmem64(addr,
  x86__memory),
  of_int1(1095216660480)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(readmem64(addr,
  x86__memory),
  of_int1(280375465082880)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(readmem64(addr,
  x86__memory),
  of_int1(71776119061217280)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(readmem64(addr,
  x86__memory),
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((x86__memory[add1(addr,
  of_int1(7))]))), of_int1(72057594037927936))))))

logic readmem64ghost : (t1,unsigned8) farray, t1, (t1,unsigned8) farray -> t1

logic readmem64ghost__function_guard : t1, (t1,unsigned8) farray, t1,
  (t1,unsigned8) farray -> prop

axiom readmem64ghost__post_axiom :
  (forall mem:(t1,unsigned8) farray.
  forall x86__memory:(t1,unsigned8) farray.
  (forall addr:t1 [readmem64ghost(mem, addr, x86__memory)].
  (readmem64ghost(mem, addr,
  x86__memory) = bw_or1(bw_or1(bw_or1(bw_or1(bw_or1(bw_or1(bw_or1(toBig(to_rep((mem[addr]))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(1))]))), of_int1(8))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(2))]))), of_int1(16))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(3))]))), of_int1(24))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(4))]))), of_int1(32))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(5))]))), of_int1(40))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(6))]))), of_int1(48))),
  lsl_bv1(toBig(to_rep((mem[add1(addr, of_int1(7))]))), of_int1(56))))))

type unsigned641

logic attr__ATTRIBUTE_MODULUS2 : t1

logic bool_eq7 : t1, t1 -> bool

axiom bool_eq_def6 :
  (forall x:t1. forall y:t1 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t1

logic user_eq2 : unsigned641, unsigned641 -> bool

logic dummy2 : unsigned641

type unsigned64__ref1 = { unsigned64__content1 : unsigned641
}

function unsigned64__ref___2__projection(a: unsigned64__ref1) : unsigned641 =
  (a).unsigned64__content1

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic zeroflag : bool

logic carryflag : bool

logic signflag : bool

logic overflowflag : bool

logic rax : t1

logic rcx : t1

logic rdx : t1

logic rsp : t1

logic rbp : t1

logic memory : (t1,unsigned8) farray

logic saved_rbp_16 : t1

logic saved_rbp_72 : t1

logic tmp_register : t1

logic saved_rbp : t1

logic saved_ra : t1

logic saved_mem : (t1,unsigned8) farray

logic o : t1

logic o1 : t1

logic o2 : t1

logic o3 : t1

logic o4 : t1

logic o5 : t1

logic o6 : t1

logic o7 : t1

logic o8 : t1

logic o9 : t1

logic temp___429 : (t1,unsigned8) farray

logic temp___438 : (t1,unsigned8) farray

logic temp___437 : bool

logic temp___436 : bool

logic temp___435 : t1

logic temp___434 : bool

logic temp___439 : (t1,unsigned8) farray

logic temp___433 : t1

logic temp___432 : t1

logic temp___430 : t1

logic temp___431 : bool

logic o10 : t1

logic o11 : t1

logic o12 : t1

logic o13 : t1

logic o14 : t1

logic o15 : t1

logic o16 : t1

logic o17 : t1

logic o18 : t1

logic rcx1 : t1

logic rdx1 : t1

logic memory1 : (t1,unsigned8) farray

logic result : t1

logic saved_rbp_161 : t1

logic result1 : t1

logic saved_rbp_721 : t1

logic result2 : t1

logic tmp_register1 : t1

logic result3 : t1

logic saved_rbp1 : t1

logic result4 : t1

logic saved_ra1 : t1

logic result5 : (t1,unsigned8) farray

logic saved_mem1 : (t1,unsigned8) farray

logic result6 : t1

logic rax1 : t1

logic result7 : t1

logic rax2 : t1

logic result8 : bool

logic zeroflag1 : bool

logic result9 : bool

logic signflag1 : bool

logic result10 : bool

logic carryflag1 : bool

logic result11 : bool

logic overflowflag1 : bool

logic zeroflag2 : bool

logic carryflag2 : bool

logic signflag2 : bool

logic overflowflag2 : bool

logic rax3 : t1

logic rcx2 : t1

logic rdx2 : t1

logic memory2 : (t1,unsigned8) farray

logic tmp_register2 : t1

logic result12 : t1

logic rax4 : t1

logic result13 : t1

logic rdx3 : t1

logic result14 : t1

logic rax5 : t1

logic result15 : bool

logic zeroflag3 : bool

logic result16 : bool

logic signflag3 : bool

logic result17 : t1

logic rdx4 : t1

logic result18 : t1

logic rax6 : t1

logic result19 : t1

logic rcx3 : t1

logic result20 : t1

logic rax7 : t1

logic result21 : bool

logic zeroflag4 : bool

logic result22 : bool

logic signflag4 : bool

logic result23 : t1

logic rax8 : t1

logic result24 : t1

logic rax9 : t1

logic memory3 : (t1,unsigned8) farray

logic result25 : t1

logic tmp_register3 : t1

logic result26 : t1

logic rax10 : t1

logic result27 : t1

logic rax11 : t1

logic result28 : bool

logic zeroflag5 : bool

logic result29 : bool

logic signflag5 : bool

logic result30 : bool

logic carryflag3 : bool

logic result31 : bool

logic overflowflag3 : bool

logic zeroflag6 : bool

logic carryflag4 : bool

logic signflag6 : bool

logic overflowflag4 : bool

logic rax12 : t1

logic zeroflag7 : bool

logic carryflag5 : bool

logic signflag7 : bool

logic overflowflag5 : bool

logic rax13 : t1

logic zeroflag8 : bool

logic carryflag6 : bool

logic signflag8 : bool

logic overflowflag6 : bool

logic rax14 : t1

logic rcx4 : t1

logic rdx5 : t1

logic memory4 : (t1,unsigned8) farray

logic tmp_register4 : t1

logic zeroflag9 : bool

logic carryflag7 : bool

logic signflag9 : bool

logic overflowflag7 : bool

logic rax15 : t1

logic rcx5 : t1

logic rdx6 : t1

logic memory5 : (t1,unsigned8) farray

logic tmp_register5 : t1

logic zeroflag10 : bool

logic carryflag8 : bool

logic signflag10 : bool

logic overflowflag8 : bool

logic rax16 : t1

logic rcx6 : t1

logic rdx7 : t1

logic memory6 : (t1,unsigned8) farray

logic tmp_register6 : t1

logic zeroflag11 : bool

logic carryflag9 : bool

logic signflag11 : bool

logic overflowflag9 : bool

logic rax17 : t1

logic rcx7 : t1

logic rdx8 : t1

logic memory7 : (t1,unsigned8) farray

logic tmp_register7 : t1

logic zeroflag12 : bool

logic carryflag10 : bool

logic signflag12 : bool

logic overflowflag10 : bool

logic rax18 : t1

logic rcx8 : t1

logic rdx9 : t1

logic memory8 : (t1,unsigned8) farray

logic tmp_register8 : t1

logic zeroflag13 : bool

logic carryflag11 : bool

logic signflag13 : bool

logic overflowflag11 : bool

logic rax19 : t1

logic rcx9 : t1

logic rdx10 : t1

logic memory9 : (t1,unsigned8) farray

logic tmp_register9 : t1

logic memory10 : (t1,unsigned8) farray

logic zeroflag14 : bool

logic carryflag12 : bool

logic signflag14 : bool

logic overflowflag12 : bool

logic rax20 : t1

logic rcx10 : t1

logic rdx11 : t1

logic memory11 : (t1,unsigned8) farray

logic saved_rbp_162 : t1

logic saved_rbp_722 : t1

logic tmp_register10 : t1

logic saved_rbp2 : t1

logic saved_ra2 : t1

logic saved_mem2 : (t1,unsigned8) farray

logic zeroflag15 : bool

logic carryflag13 : bool

logic signflag15 : bool

logic overflowflag13 : bool

logic rax21 : t1

logic rcx11 : t1

logic rdx12 : t1

logic memory12 : (t1,unsigned8) farray

logic saved_rbp_163 : t1

logic saved_rbp_723 : t1

logic tmp_register11 : t1

logic saved_rbp3 : t1

logic saved_ra3 : t1

logic saved_mem3 : (t1,unsigned8) farray

axiom H : true

axiom H1 : true

axiom H2 : true

axiom H3 : true

axiom H4 : true

axiom H5 : (((rbp = rsp) and (readmem64(sub1(rbp, of_int1(8)),
  memory) = of_int1(0))) and
  (forall i:t1. ((ule1(of_int1(0), i) and ule1(i,
  of_int1(18446744073709551615))) -> ((inrange64(i, readmem64(sub1(rbp,
  of_int1(16)), memory), readmem64(sub1(rbp, of_int1(72)),
  memory)) = true) -> (insaferegion64(i, add1(rsp, of_int1(8))) = true)))))

axiom H6 : ((o = readmem64(sub1(rbp, of_int1(16)), memory)) and
  ((((((((bw_and1(o, of_int1(255)) = toBig(to_rep((memory[sub1(rbp,
  of_int1(16))])))) and (bw_and1(o,
  of_int1(65280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(16)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o,
  of_int1(16711680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(16)),
  of_int1(2))]))), of_int1(65536)))) and (bw_and1(o,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(16)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(16)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(16)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(16)), of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(o,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(16)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H7 : (o1 = o)

axiom H8 : (result = saved_rbp_16)

axiom H9 : (saved_rbp_161 = o1)

axiom H10 : true

axiom H11 : ((o2 = readmem64(sub1(rbp, of_int1(72)), memory)) and
  ((((((((bw_and1(o2, of_int1(255)) = toBig(to_rep((memory[sub1(rbp,
  of_int1(72))])))) and (bw_and1(o2,
  of_int1(65280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(72)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o2,
  of_int1(16711680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(72)),
  of_int1(2))]))), of_int1(65536)))) and (bw_and1(o2,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o2,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o2,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o2,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(o2,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H12 : (o3 = o2)

axiom H13 : (result1 = saved_rbp_72)

axiom H14 : (saved_rbp_721 = o3)

axiom H15 : true

axiom H16 : ((o4 = readmem64(sub1(rbp, of_int1(8)), memory)) and
  ((((((((bw_and1(o4, of_int1(255)) = toBig(to_rep((memory[sub1(rbp,
  of_int1(8))])))) and (bw_and1(o4,
  of_int1(65280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(8)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o4,
  of_int1(16711680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(8)),
  of_int1(2))]))), of_int1(65536)))) and (bw_and1(o4,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(8)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o4,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(8)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o4,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(8)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o4,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(8)), of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(o4,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(8)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H17 : (o5 = o4)

axiom H18 : (result2 = tmp_register)

axiom H19 : (tmp_register1 = o5)

axiom H20 : true

axiom H21 : ((o6 = readmem64(rbp, memory)) and ((((((((bw_and1(o6,
  of_int1(255)) = toBig(to_rep((memory[rbp])))) and (bw_and1(o6,
  of_int1(65280)) = mul1(toBig(to_rep((memory[add1(rbp, of_int1(1))]))),
  of_int1(256)))) and (bw_and1(o6,
  of_int1(16711680)) = mul1(toBig(to_rep((memory[add1(rbp, of_int1(2))]))),
  of_int1(65536)))) and (bw_and1(o6,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory[add1(rbp, of_int1(3))]))),
  of_int1(16777216)))) and (bw_and1(o6,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory[add1(rbp,
  of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o6,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory[add1(rbp,
  of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o6,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory[add1(rbp,
  of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(o6,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory[add1(rbp,
  of_int1(7))]))), of_int1(72057594037927936)))))

axiom H22 : (o7 = o6)

axiom H23 : (result3 = saved_rbp)

axiom H24 : (saved_rbp1 = o7)

axiom H25 : true

axiom H26 : ((o8 = readmem64(add1(rsp, of_int1(8)), memory)) and
  ((((((((bw_and1(o8, of_int1(255)) = toBig(to_rep((memory[add1(rsp,
  of_int1(8))])))) and (bw_and1(o8,
  of_int1(65280)) = mul1(toBig(to_rep((memory[add1(add1(rsp, of_int1(8)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o8,
  of_int1(16711680)) = mul1(toBig(to_rep((memory[add1(add1(rsp, of_int1(8)),
  of_int1(2))]))), of_int1(65536)))) and (bw_and1(o8,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory[add1(add1(rsp,
  of_int1(8)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o8,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory[add1(add1(rsp,
  of_int1(8)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o8,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory[add1(add1(rsp,
  of_int1(8)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o8,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory[add1(add1(rsp,
  of_int1(8)), of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(o8,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory[add1(add1(rsp,
  of_int1(8)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H27 : (o9 = o8)

axiom H28 : (result4 = saved_ra)

axiom H29 : (saved_ra1 = o9)

axiom H30 : true

axiom H31 : (result5 = saved_mem)

axiom H32 : (saved_mem1 = memory)

axiom H33 : (rsp = of_int1(12105675798371893255))

axiom H34 : ((o10 = readmem64(sub1(rbp, of_int1(72)), memory)) and
  ((((((((bw_and1(o10, of_int1(255)) = toBig(to_rep((memory[sub1(rbp,
  of_int1(72))])))) and (bw_and1(o10,
  of_int1(65280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(72)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o10,
  of_int1(16711680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp, of_int1(72)),
  of_int1(2))]))), of_int1(65536)))) and (bw_and1(o10,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o10,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o10,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o10,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(6))]))), of_int1(281474976710656)))) and
  (bw_and1(o10,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory[add1(sub1(rbp,
  of_int1(72)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H35 : (result6 = rax)

axiom H36 : (rax1 = o10)

axiom H37 : (result7 = rax1)

axiom H38 : (rax2 = udiv1(rax1, of_int1(8)))

axiom H39 : (result8 = zeroflag)

axiom H40 : (((sub1(rax2, tmp_register1) = of_int1(0)) ->
  (zeroflag1 = true)) and ((not (sub1(rax2, tmp_register1) = of_int1(0))) ->
  (zeroflag1 = false)))

axiom H41 : (result9 = signflag)

axiom H42 : ((ugt1(sub1(rax2, tmp_register1),
  of_int1(9223372036854775807)) -> (signflag1 = true)) and
  ((not ugt1(sub1(rax2, tmp_register1), of_int1(9223372036854775807))) ->
  (signflag1 = false)))

axiom H43 : (result10 = carryflag)

axiom H44 : ((ult1(rax2, tmp_register1) -> (carryflag1 = true)) and
  ((not ult1(rax2, tmp_register1)) -> (carryflag1 = false)))

axiom H45 : (result11 = overflowflag)

axiom H46 : (((((signflag1 = true) and ugt1(tmp_register1,
  of_int1(9223372036854775807))) and ule1(rax2,
  of_int1(9223372036854775807))) -> (overflowflag1 = true)) and
  ((not (((signflag1 = true) and ugt1(tmp_register1,
  of_int1(9223372036854775807))) and ule1(rax2,
  of_int1(9223372036854775807)))) -> (((((not (signflag1 = true)) and
  ugt1(rax2, of_int1(9223372036854775807))) and ule1(tmp_register1,
  of_int1(9223372036854775807))) -> (overflowflag1 = true)) and
  ((not (((not (signflag1 = true)) and ugt1(rax2,
  of_int1(9223372036854775807))) and ule1(tmp_register1,
  of_int1(9223372036854775807)))) -> (overflowflag1 = false)))))

axiom H47 : (not (match_bool(carryflag1, true, zeroflag1) = true))

axiom H48 :
  (forall i:t1. ((ule1(saved_rbp_161, i) and ule1(i, sub1(add1(saved_rbp_161,
  saved_rbp_721), of_int1(1)))) -> (insaferegion64(i, add1(rsp,
  of_int1(8))) = true)))

axiom H49 :
  (forall i:t1. ((ule1(of_int1(0), i) and ule1(i,
  of_int1(18446744073709551615))) -> (((not (inrange64(i, saved_rbp_161,
  saved_rbp_721) = true)) and (not (inrange64(i, sub1(rbp, of_int1(8)),
  of_int1(8)) = true))) -> (to_rep((memory2[i])) = to_rep((memory[i]))))))

axiom H50 : (saved_rbp_161 = readmem64(sub1(rbp, of_int1(16)), memory2))

axiom H51 : (saved_rbp_721 = readmem64(sub1(rbp, of_int1(72)), memory2))

axiom H52 : ult1(tmp_register2, udiv1(saved_rbp_721, of_int1(8)))

axiom H53 : (readmem64(rbp, memory2) = saved_rbp1)

axiom H54 : (readmem64(add1(rsp, of_int1(8)), memory2) = saved_ra1)

axiom H55 : true

axiom H56 : (result12 = rax3)

axiom H57 : (rax4 = tmp_register2)

axiom H58 : (result13 = rdx2)

axiom H59 : (rdx3 = mul1(rax4, of_int1(8)))

axiom H60 : ((o11 = readmem64(sub1(rbp, of_int1(16)), memory2)) and
  ((((((((bw_and1(o11, of_int1(255)) = toBig(to_rep((memory2[sub1(rbp,
  of_int1(16))])))) and (bw_and1(o11,
  of_int1(65280)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp, of_int1(16)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o11,
  of_int1(16711680)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(16)), of_int1(2))]))), of_int1(65536)))) and (bw_and1(o11,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(16)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o11,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(16)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o11,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(16)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o11,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(16)), of_int1(6))]))), of_int1(281474976710656)))) and
  (bw_and1(o11,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(16)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H61 : (result14 = rax4)

axiom H62 : (rax5 = o11)

axiom H63 : (result15 = zeroflag2)

axiom H64 : (((add1(rdx3, rax5) = of_int1(0)) -> (zeroflag3 = true)) and
  ((not (add1(rdx3, rax5) = of_int1(0))) -> (zeroflag3 = false)))

axiom H65 : (result16 = signflag2)

axiom H66 : ((ugt1(add1(rdx3, rax5), of_int1(9223372036854775807)) ->
  (signflag3 = true)) and ((not ugt1(add1(rdx3, rax5),
  of_int1(9223372036854775807))) -> (signflag3 = false)))

axiom H67 : (result17 = rdx3)

axiom H68 : (rdx4 = add1(rdx3, rax5))

axiom H69 : (result18 = rax5)

axiom H70 : (rax6 = tmp_register2)

axiom H71 : (result19 = rcx2)

axiom H72 : (rcx3 = mul1(rax6, of_int1(8)))

axiom H73 : ((o12 = readmem64(sub1(rbp, of_int1(24)), memory2)) and
  ((((((((bw_and1(o12, of_int1(255)) = toBig(to_rep((memory2[sub1(rbp,
  of_int1(24))])))) and (bw_and1(o12,
  of_int1(65280)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp, of_int1(24)),
  of_int1(1))]))), of_int1(256)))) and (bw_and1(o12,
  of_int1(16711680)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(24)), of_int1(2))]))), of_int1(65536)))) and (bw_and1(o12,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(24)), of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o12,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(24)), of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o12,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(24)), of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o12,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(24)), of_int1(6))]))), of_int1(281474976710656)))) and
  (bw_and1(o12,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory2[add1(sub1(rbp,
  of_int1(24)), of_int1(7))]))), of_int1(72057594037927936)))))

axiom H74 : (result20 = rax6)

axiom H75 : (rax7 = o12)

axiom H76 : (result21 = zeroflag3)

axiom H77 : (((add1(rax7, rcx3) = of_int1(0)) -> (zeroflag4 = true)) and
  ((not (add1(rax7, rcx3) = of_int1(0))) -> (zeroflag4 = false)))

axiom H78 : (result22 = signflag3)

axiom H79 : ((ugt1(add1(rax7, rcx3), of_int1(9223372036854775807)) ->
  (signflag4 = true)) and ((not ugt1(add1(rax7, rcx3),
  of_int1(9223372036854775807))) -> (signflag4 = false)))

axiom H80 : (result23 = rax7)

axiom H81 : (rax8 = add1(rax7, rcx3))

axiom H82 : ((o13 = readmem64(rax8, memory2)) and ((((((((bw_and1(o13,
  of_int1(255)) = toBig(to_rep((memory2[rax8])))) and (bw_and1(o13,
  of_int1(65280)) = mul1(toBig(to_rep((memory2[add1(rax8, of_int1(1))]))),
  of_int1(256)))) and (bw_and1(o13,
  of_int1(16711680)) = mul1(toBig(to_rep((memory2[add1(rax8, of_int1(2))]))),
  of_int1(65536)))) and (bw_and1(o13,
  of_int1(4278190080)) = mul1(toBig(to_rep((memory2[add1(rax8,
  of_int1(3))]))), of_int1(16777216)))) and (bw_and1(o13,
  of_int1(1095216660480)) = mul1(toBig(to_rep((memory2[add1(rax8,
  of_int1(4))]))), of_int1(4294967296)))) and (bw_and1(o13,
  of_int1(280375465082880)) = mul1(toBig(to_rep((memory2[add1(rax8,
  of_int1(5))]))), of_int1(1099511627776)))) and (bw_and1(o13,
  of_int1(71776119061217280)) = mul1(toBig(to_rep((memory2[add1(rax8,
  of_int1(6))]))), of_int1(281474976710656)))) and (bw_and1(o13,
  of_int1(18374686479671623680)) = mul1(toBig(to_rep((memory2[add1(rax8,
  of_int1(7))]))), of_int1(72057594037927936)))))

axiom H83 : (result24 = rax8)

axiom H84 : (rax9 = o13)

axiom H85 :
  (forall i:t1. ((ule1(saved_rbp_161, i) and ule1(i, sub1(add1(saved_rbp_161,
  saved_rbp_721), of_int1(1)))) -> (insaferegion64(i, add1(rsp,
  of_int1(8))) = true)))

axiom H86 :
  (forall i:t1. ((ule1(of_int1(0), i) and ule1(i,
  of_int1(18446744073709551615))) -> (((not (inrange64(i, saved_rbp_161,
  saved_rbp_721) = true)) and (not (inrange64(i, sub1(rbp, of_int1(8)),
  of_int1(8)) = true))) -> (to_rep((memory2[i])) = to_rep((memory[i]))))))

axiom H87 : (saved_rbp_161 = readmem64(sub1(rbp, of_int1(16)), memory2))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (saved_rbp_721 = readmem64(sub1(rbp, of_int1(72)),
  memory2))
