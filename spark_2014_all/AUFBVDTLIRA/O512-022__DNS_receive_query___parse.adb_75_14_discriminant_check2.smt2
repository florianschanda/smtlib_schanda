(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq (unsigned_8 unsigned_8) Bool)
(declare-const dummy unsigned_8)
(declare-datatypes () ((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8 (unsigned_8__content a))
(declare-fun to_rep (unsigned_8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned_8)
(assert (forall ((x unsigned_8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x unsigned_8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned_8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__types__octet__data unsigned_8)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields)) unsigned_8 (rec__types__octet__data a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__types__octet__data (us_split_fields1 a))) (to_rep (rec__types__octet__data (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const types__octet__data__first__bit Int)
(declare-const types__octet__data__last__bit Int)
(declare-const types__octet__data__position Int)
(assert (<= 0 types__octet__data__first__bit))
(assert (< types__octet__data__first__bit types__octet__data__last__bit))
(assert (<= 0 types__octet__data__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content us_rep)))))
(define-fun octet__ref___projection ((a octet__ref)) us_rep (octet__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-fun extract_unsigned_16 ((Array Int us_rep) Int) (_ BitVec 16))
(declare-fun extract_unsigned_16__function_guard ((_ BitVec 16) (Array Int us_rep) Int) Bool)
(declare-sort unsigned_16 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq2 (unsigned_16 unsigned_16) Bool)
(declare-const dummy2 unsigned_16)
(declare-datatypes () ((unsigned_16__ref (mk_unsigned_16__ref (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref___projection ((a unsigned_16__ref)) unsigned_16 (unsigned_16__content a))
(define-fun dynamic_invariant ((temp___expr_194 (_ BitVec 16)) (temp___is_init_190 Bool) (temp___skip_constant_191 Bool) (temp___do_toplevel_192 Bool) (temp___do_typ_inv_193 Bool)) Bool true)
(declare-sort network_dns_query_range 0)
(declare-fun network_dns_query_rangeqtint (network_dns_query_range) Int)
(assert (forall ((i network_dns_query_range)) (and (<= 0 (network_dns_query_rangeqtint i)) (<= (network_dns_query_rangeqtint i) 512))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 512)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (network_dns_query_range network_dns_query_range) Bool)
(declare-const dummy3 network_dns_query_range)
(declare-datatypes () ((network_dns_query_range__ref (mk_network_dns_query_range__ref (network_dns_query_range__content network_dns_query_range)))))
(define-fun network_dns_query_range__ref___projection ((a network_dns_query_range__ref)) network_dns_query_range (network_dns_query_range__content a))
(define-fun dynamic_invariant1 ((temp___expr_300 Int) (temp___is_init_296 Bool) (temp___skip_constant_297 Bool) (temp___do_toplevel_298 Bool) (temp___do_typ_inv_299 Bool)) Bool (=> (or (= temp___is_init_296 true) (<= 0 512)) (in_range1 temp___expr_300)))
(assert (forall ((query (Array Int us_rep))) (forall ((offset Int)) (! (=> (and (dynamic_invariant1 offset true true true true) (<= offset 511)) (dynamic_invariant (extract_unsigned_16 query offset) true false true true)) :pattern ((extract_unsigned_16 query offset))))))
(declare-fun extract_bits_of_octet ((Array Int us_rep) Int Int (_ BitVec 8)) (_ BitVec 8))
(declare-fun extract_bits_of_octet__function_guard ((_ BitVec 8) (Array Int us_rep) Int Int (_ BitVec 8)) Bool)
(define-fun dynamic_invariant2 ((temp___expr_187 (_ BitVec 8)) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool true)
(declare-sort bit_range 0)
(declare-fun bit_rangeqtint (bit_range) Int)
(assert (forall ((i bit_range)) (and (<= 0 (bit_rangeqtint i)) (<= (bit_rangeqtint i) 7))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (bit_range bit_range) Bool)
(declare-const dummy4 bit_range)
(declare-datatypes () ((bit_range__ref (mk_bit_range__ref (bit_range__content bit_range)))))
(define-fun bit_range__ref___projection ((a bit_range__ref)) bit_range (bit_range__content a))
(define-fun dynamic_invariant3 ((temp___expr_293 Int) (temp___is_init_289 Bool) (temp___skip_constant_290 Bool) (temp___do_toplevel_291 Bool) (temp___do_typ_inv_292 Bool)) Bool (=> (or (= temp___is_init_289 true) (<= 0 7)) (in_range2 temp___expr_293)))
(assert (forall ((query (Array Int us_rep))) (forall ((offset Int) (bit_shift_right Int)) (forall ((bit_mask (_ BitVec 8))) (! (=> (and (and (dynamic_invariant1 offset true true true true) (dynamic_invariant3 bit_shift_right true true true true)) (dynamic_invariant2 bit_mask true true true true)) (dynamic_invariant2 (extract_bits_of_octet query offset bit_shift_right bit_mask) true false true true)) :pattern ((extract_bits_of_octet query offset bit_shift_right bit_mask)))))))
(declare-fun to_rep1 (unsigned_16) (_ BitVec 16))
(declare-fun of_rep1 ((_ BitVec 16)) unsigned_16)
(assert (forall ((x unsigned_16)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 16))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x unsigned_16)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x unsigned_16)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort return_code_t 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (return_code_t return_code_t) Bool)
(declare-const dummy5 return_code_t)
(declare-datatypes () ((return_code_t__ref (mk_return_code_t__ref (return_code_t__content return_code_t)))))
(define-fun return_code_t__ref___projection ((a return_code_t__ref)) return_code_t (return_code_t__content a))
(define-fun dynamic_invariant4 ((temp___expr_278 Int) (temp___is_init_274 Bool) (temp___skip_constant_275 Bool) (temp___do_toplevel_276 Bool) (temp___do_typ_inv_277 Bool)) Bool (=> (or (= temp___is_init_274 true) (<= 0 1)) (in_range3 temp___expr_278)))
(declare-fun to_rep2 (return_code_t) Int)
(declare-fun of_rep2 (Int) return_code_t)
(assert (forall ((x return_code_t)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x return_code_t)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort query_opcode 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (query_opcode query_opcode) Bool)
(declare-const dummy6 query_opcode)
(declare-datatypes () ((query_opcode__ref (mk_query_opcode__ref (query_opcode__content query_opcode)))))
(define-fun query_opcode__ref___projection ((a query_opcode__ref)) query_opcode (query_opcode__content a))
(declare-fun to_rep3 (query_opcode) Int)
(declare-fun of_rep3 (Int) query_opcode)
(assert (forall ((x query_opcode)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x query_opcode)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort qdcount_range 0)
(declare-fun qdcount_rangeqtint (qdcount_range) Int)
(assert (forall ((i qdcount_range)) (and (<= 1 (qdcount_rangeqtint i)) (<= (qdcount_rangeqtint i) 16))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (qdcount_range qdcount_range) Bool)
(declare-const dummy7 qdcount_range)
(declare-datatypes () ((qdcount_range__ref (mk_qdcount_range__ref (qdcount_range__content qdcount_range)))))
(define-fun qdcount_range__ref___projection ((a qdcount_range__ref)) qdcount_range (qdcount_range__content a))
(define-fun to_rep4 ((x qdcount_range)) Int (qdcount_rangeqtint x))
(declare-fun of_rep4 (Int) qdcount_range)
(assert (forall ((x qdcount_range)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x qdcount_range)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__types__query_header__id unsigned_16) (rec__types__query_header__opcode query_opcode) (rec__types__query_header__qdcount qdcount_range)))))
(define-fun us_split_fields_ID__projection ((a us_split_fields2)) unsigned_16 (rec__types__query_header__id a))
(define-fun us_split_fields_OPCODE__projection ((a us_split_fields2)) query_opcode (rec__types__query_header__opcode a))
(define-fun us_split_fields_QDCOUNT__projection ((a us_split_fields2)) qdcount_range (rec__types__query_header__qdcount a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep1 (rec__types__query_header__id (us_split_fields3 a))) (to_rep1 (rec__types__query_header__id (us_split_fields3 b)))) (= (to_rep3 (rec__types__query_header__opcode (us_split_fields3 a))) (to_rep3 (rec__types__query_header__opcode (us_split_fields3 b))))) (= (to_rep4 (rec__types__query_header__qdcount (us_split_fields3 a))) (to_rep4 (rec__types__query_header__qdcount (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const types__query_header__id__first__bit Int)
(declare-const types__query_header__id__last__bit Int)
(declare-const types__query_header__id__position Int)
(assert (<= 0 types__query_header__id__first__bit))
(assert (< types__query_header__id__first__bit types__query_header__id__last__bit))
(assert (<= 0 types__query_header__id__position))
(declare-const types__query_header__opcode__first__bit Int)
(declare-const types__query_header__opcode__last__bit Int)
(declare-const types__query_header__opcode__position Int)
(assert (<= 0 types__query_header__opcode__first__bit))
(assert (< types__query_header__opcode__first__bit types__query_header__opcode__last__bit))
(assert (<= 0 types__query_header__opcode__position))
(declare-const types__query_header__qdcount__first__bit Int)
(declare-const types__query_header__qdcount__last__bit Int)
(declare-const types__query_header__qdcount__position Int)
(assert (<= 0 types__query_header__qdcount__first__bit))
(assert (< types__query_header__qdcount__first__bit types__query_header__qdcount__last__bit))
(assert (<= 0 types__query_header__qdcount__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((query_header__ref (mk_query_header__ref (query_header__content us_rep1)))))
(define-fun query_header__ref___projection ((a query_header__ref)) us_rep1 (query_header__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__parse__parse_result_t__return_code return_code_t)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) return_code_t (rec__parse__parse_result_t__return_code a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__parse__parse_result_t__header us_rep1)))))
(define-fun us_split_fields_Header__projection ((a us_split_fields4)) us_rep1 (rec__parse__parse_result_t__header a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs1 us_split_discrs) (us_split_fields5 us_split_fields4) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___5__projection ((a us_rep2)) Bool (attr__constrained a))
(define-fun parse__parse_result_t__header__pred ((a us_rep2)) Bool (= (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a))) 0))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a))) (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 b)))) (=> (parse__parse_result_t__header__pred a) (= (bool_eq2 (rec__parse__parse_result_t__header (us_split_fields5 a)) (rec__parse__parse_result_t__header (us_split_fields5 b))) true))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const parse__parse_result_t__return_code__first__bit Int)
(declare-const parse__parse_result_t__return_code__last__bit Int)
(declare-const parse__parse_result_t__return_code__position Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit))
(assert (< parse__parse_result_t__return_code__first__bit parse__parse_result_t__return_code__last__bit))
(assert (<= 0 parse__parse_result_t__return_code__position))
(declare-const parse__parse_result_t__header__first__bit Int)
(declare-const parse__parse_result_t__header__last__bit Int)
(declare-const parse__parse_result_t__header__position Int)
(assert (<= 0 parse__parse_result_t__header__first__bit))
(assert (< parse__parse_result_t__header__first__bit parse__parse_result_t__header__last__bit))
(assert (<= 0 parse__parse_result_t__header__position))
(declare-fun user_eq9 (us_rep2 us_rep2) Bool)
(declare-const dummy9 us_rep2)
(declare-datatypes () ((parse_result_t__ref (mk_parse_result_t__ref (parse_result_t__content us_rep2)))))
(define-fun parse_result_t__ref___projection ((a parse_result_t__ref)) us_rep2 (parse_result_t__content a))
(define-fun default_initial_assumption ((temp___expr_348 us_rep2) (temp___skip_top_level_349 Bool)) Bool (and (= (attr__constrained temp___expr_348) false) (= (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 temp___expr_348))) 1)))
(declare-const query (Array Int us_rep))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const result____attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const r2b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun in_range6 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const parse__parse_result_t__return_code__first__bit1 Int)
(declare-const parse__parse_result_t__return_code__last__bit1 Int)
(declare-const parse__parse_result_t__return_code__position1 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit1))
(assert (< parse__parse_result_t__return_code__first__bit1 parse__parse_result_t__return_code__last__bit1))
(assert (<= 0 parse__parse_result_t__return_code__position1))
(declare-const parse__parse_result_t__header__first__bit1 Int)
(declare-const parse__parse_result_t__header__last__bit1 Int)
(declare-const parse__parse_result_t__header__position1 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit1))
(assert (< parse__parse_result_t__header__first__bit1 parse__parse_result_t__header__last__bit1))
(assert (<= 0 parse__parse_result_t__header__position1))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_rep2)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep2 (t3b__content a))
(declare-const r6b Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun in_range7 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const parse__parse_result_t__return_code__first__bit2 Int)
(declare-const parse__parse_result_t__return_code__last__bit2 Int)
(declare-const parse__parse_result_t__return_code__position2 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit2))
(assert (< parse__parse_result_t__return_code__first__bit2 parse__parse_result_t__return_code__last__bit2))
(assert (<= 0 parse__parse_result_t__return_code__position2))
(declare-const parse__parse_result_t__header__first__bit2 Int)
(declare-const parse__parse_result_t__header__last__bit2 Int)
(declare-const parse__parse_result_t__header__position2 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit2))
(assert (< parse__parse_result_t__header__first__bit2 parse__parse_result_t__header__last__bit2))
(assert (<= 0 parse__parse_result_t__header__position2))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content us_rep2)))))
(define-fun t7b__ref___projection ((a t7b__ref)) us_rep2 (t7b__content a))
(declare-const r10b Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(define-fun in_range8 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-const parse__parse_result_t__return_code__first__bit3 Int)
(declare-const parse__parse_result_t__return_code__last__bit3 Int)
(declare-const parse__parse_result_t__return_code__position3 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit3))
(assert (< parse__parse_result_t__return_code__first__bit3 parse__parse_result_t__return_code__last__bit3))
(assert (<= 0 parse__parse_result_t__return_code__position3))
(declare-const parse__parse_result_t__header__first__bit3 Int)
(declare-const parse__parse_result_t__header__last__bit3 Int)
(declare-const parse__parse_result_t__header__position3 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit3))
(assert (< parse__parse_result_t__header__first__bit3 parse__parse_result_t__header__last__bit3))
(assert (<= 0 parse__parse_result_t__header__position3))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content us_rep2)))))
(define-fun t11b__ref___projection ((a t11b__ref)) us_rep2 (t11b__content a))
(declare-const r14b Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun in_range9 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))
(declare-const parse__parse_result_t__return_code__first__bit4 Int)
(declare-const parse__parse_result_t__return_code__last__bit4 Int)
(declare-const parse__parse_result_t__return_code__position4 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit4))
(assert (< parse__parse_result_t__return_code__first__bit4 parse__parse_result_t__return_code__last__bit4))
(assert (<= 0 parse__parse_result_t__return_code__position4))
(declare-const parse__parse_result_t__header__first__bit4 Int)
(declare-const parse__parse_result_t__header__last__bit4 Int)
(declare-const parse__parse_result_t__header__position4 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit4))
(assert (< parse__parse_result_t__header__first__bit4 parse__parse_result_t__header__last__bit4))
(assert (<= 0 parse__parse_result_t__header__position4))
(declare-fun user_eq13 (us_rep2 us_rep2) Bool)
(declare-const dummy13 us_rep2)
(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_rep2)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_rep2 (t15b__content a))
(declare-const r18b Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun in_range10 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep2) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep2) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep2)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment7 a))))
(declare-const parse__parse_result_t__return_code__first__bit5 Int)
(declare-const parse__parse_result_t__return_code__last__bit5 Int)
(declare-const parse__parse_result_t__return_code__position5 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit5))
(assert (< parse__parse_result_t__return_code__first__bit5 parse__parse_result_t__return_code__last__bit5))
(assert (<= 0 parse__parse_result_t__return_code__position5))
(declare-const parse__parse_result_t__header__first__bit5 Int)
(declare-const parse__parse_result_t__header__last__bit5 Int)
(declare-const parse__parse_result_t__header__position5 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit5))
(assert (< parse__parse_result_t__header__first__bit5 parse__parse_result_t__header__last__bit5))
(assert (<= 0 parse__parse_result_t__header__position5))
(declare-fun user_eq14 (us_rep2 us_rep2) Bool)
(declare-const dummy14 us_rep2)
(declare-datatypes () ((t19b__ref (mk_t19b__ref (t19b__content us_rep2)))))
(define-fun t19b__ref___projection ((a t19b__ref)) us_rep2 (t19b__content a))
(declare-const r22b Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(define-fun in_range11 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep2) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep2) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep2)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment8 a))))
(declare-const parse__parse_result_t__return_code__first__bit6 Int)
(declare-const parse__parse_result_t__return_code__last__bit6 Int)
(declare-const parse__parse_result_t__return_code__position6 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit6))
(assert (< parse__parse_result_t__return_code__first__bit6 parse__parse_result_t__return_code__last__bit6))
(assert (<= 0 parse__parse_result_t__return_code__position6))
(declare-const parse__parse_result_t__header__first__bit6 Int)
(declare-const parse__parse_result_t__header__last__bit6 Int)
(declare-const parse__parse_result_t__header__position6 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit6))
(assert (< parse__parse_result_t__header__first__bit6 parse__parse_result_t__header__last__bit6))
(assert (<= 0 parse__parse_result_t__header__position6))
(declare-fun user_eq15 (us_rep2 us_rep2) Bool)
(declare-const dummy15 us_rep2)
(declare-datatypes () ((t23b__ref (mk_t23b__ref (t23b__content us_rep2)))))
(define-fun t23b__ref___projection ((a t23b__ref)) us_rep2 (t23b__content a))
(declare-const r26b Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(define-fun in_range12 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep2) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep2) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep2)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment9 a))))
(declare-const parse__parse_result_t__return_code__first__bit7 Int)
(declare-const parse__parse_result_t__return_code__last__bit7 Int)
(declare-const parse__parse_result_t__return_code__position7 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit7))
(assert (< parse__parse_result_t__return_code__first__bit7 parse__parse_result_t__return_code__last__bit7))
(assert (<= 0 parse__parse_result_t__return_code__position7))
(declare-const parse__parse_result_t__header__first__bit7 Int)
(declare-const parse__parse_result_t__header__last__bit7 Int)
(declare-const parse__parse_result_t__header__position7 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit7))
(assert (< parse__parse_result_t__header__first__bit7 parse__parse_result_t__header__last__bit7))
(assert (<= 0 parse__parse_result_t__header__position7))
(declare-fun user_eq16 (us_rep2 us_rep2) Bool)
(declare-const dummy16 us_rep2)
(declare-datatypes () ((t27b__ref (mk_t27b__ref (t27b__content us_rep2)))))
(define-fun t27b__ref___projection ((a t27b__ref)) us_rep2 (t27b__content a))
(declare-const r30b Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(define-fun in_range13 ((rec__parse__parse_result_t__return_code1 Int) (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a)))))
(declare-const value__size10 Int)
(declare-fun object__size10 (us_rep2) Int)
(declare-const value__alignment10 Int)
(declare-fun object__alignment10 (us_rep2) Int)
(assert (<= 0 value__size10))
(assert (forall ((a us_rep2)) (<= 0 (object__size10 a))))
(assert (<= 0 value__alignment10))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment10 a))))
(declare-const parse__parse_result_t__return_code__first__bit8 Int)
(declare-const parse__parse_result_t__return_code__last__bit8 Int)
(declare-const parse__parse_result_t__return_code__position8 Int)
(assert (<= 0 parse__parse_result_t__return_code__first__bit8))
(assert (< parse__parse_result_t__return_code__first__bit8 parse__parse_result_t__return_code__last__bit8))
(assert (<= 0 parse__parse_result_t__return_code__position8))
(declare-const parse__parse_result_t__header__first__bit8 Int)
(declare-const parse__parse_result_t__header__last__bit8 Int)
(declare-const parse__parse_result_t__header__position8 Int)
(assert (<= 0 parse__parse_result_t__header__first__bit8))
(assert (< parse__parse_result_t__header__first__bit8 parse__parse_result_t__header__last__bit8))
(assert (<= 0 parse__parse_result_t__header__position8))
(declare-fun user_eq17 (us_rep2 us_rep2) Bool)
(declare-const dummy17 us_rep2)
(declare-datatypes () ((t31b__ref (mk_t31b__ref (t31b__content us_rep2)))))
(define-fun t31b__ref___projection ((a t31b__ref)) us_rep2 (t31b__content a))
(define-fun dynamic_invariant5 ((temp___expr_318 Int) (temp___is_init_314 Bool) (temp___skip_constant_315 Bool) (temp___do_toplevel_316 Bool) (temp___do_typ_inv_317 Bool)) Bool (=> (or (= temp___is_init_314 true) (<= 0 1)) (in_range4 temp___expr_318)))
(define-fun dynamic_invariant6 ((temp___expr_325 Int) (temp___is_init_321 Bool) (temp___skip_constant_322 Bool) (temp___do_toplevel_323 Bool) (temp___do_typ_inv_324 Bool)) Bool (=> (or (= temp___is_init_321 true) (<= 1 16)) (in_range5 temp___expr_325)))
(declare-const result____split_fields unsigned_16)
(declare-const result____split_fields1 query_opcode)
(declare-const result____split_fields2 qdcount_range)
(declare-const result____split_discrs return_code_t)
(declare-const opcode (_ BitVec 8))
(declare-const qdcount (_ BitVec 16))
(declare-const count (_ BitVec 16))
(declare-const header__split_fields unsigned_16)
(declare-const header__split_fields1 query_opcode)
(declare-const header__split_fields2 qdcount_range)
(declare-const o (_ BitVec 16))
(declare-const o1 unsigned_16)
(declare-const o2 unsigned_16)
(declare-const o3 query_opcode)
(declare-const o4 qdcount_range)
(declare-const temp___361 unsigned_16)
(declare-const temp___3611 query_opcode)
(declare-const temp___3612 qdcount_range)
(declare-const o5 (_ BitVec 8))
(declare-const o6 Bool)
(declare-const o7 (_ BitVec 8))
(declare-const o8 query_opcode)
(declare-const o9 unsigned_16)
(declare-const o10 query_opcode)
(declare-const o11 qdcount_range)
(declare-const temp___366 us_rep1)
(declare-const o12 query_opcode)
(declare-const o13 us_split_fields2)
(declare-const temp___368 us_rep1)
(declare-const o14 (_ BitVec 8))
(declare-const o15 Bool)
(declare-const o16 Bool)
(declare-const o17 (_ BitVec 16))
(declare-const o18 Int)
(declare-const o19 qdcount_range)
(declare-const o20 us_split_fields2)
(declare-const temp___379 us_rep1)
(declare-const o21 (_ BitVec 16))
(declare-const o22 (_ BitVec 16))
(declare-const o23 (_ BitVec 16))
(declare-const o24 return_code_t)
(declare-const o25 us_split_discrs)
(declare-const temp___389 us_rep2)
(declare-const result____split_fields3 us_split_fields4)
(declare-const result____split_discrs1 us_split_discrs)
(declare-const result us_split_fields__ref1)
(declare-const header__split_fields3 us_split_fields2)
(declare-const result1 Bool)
(declare-const result____split_fields4 us_split_fields4)
(declare-const result____split_discrs2 us_split_discrs)
(declare-const result2 t__ref)
(declare-const opcode1 (_ BitVec 8))
(declare-const result3 us_split_fields__ref1)
(declare-const header__split_fields4 us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const header__split_fields5 us_split_fields2)
(declare-const result____split_fields5 us_split_fields4)
(declare-const result____split_discrs3 us_split_discrs)
(declare-const result5 Bool)
(declare-const result____split_fields6 us_split_fields4)
(declare-const result____split_discrs4 us_split_discrs)
(declare-const result6 t__ref1)
(declare-const qdcount1 (_ BitVec 16))
(declare-const result7 us_split_fields__ref1)
(declare-const header__split_fields6 us_split_fields2)
(declare-const result____split_fields7 us_split_fields4)
(declare-const result____split_discrs5 us_split_discrs)
(declare-const result8 t__ref1)
(declare-const count1 (_ BitVec 16))
(declare-const result____split_fields8 us_split_fields4)
(declare-const result____split_discrs6 us_split_discrs)
(declare-const result9 t__ref1)
(declare-const count2 (_ BitVec 16))
(declare-const result____split_fields9 us_split_fields4)
(declare-const result____split_discrs7 us_split_discrs)
(declare-const result10 t__ref1)
(declare-const count3 (_ BitVec 16))
(declare-const result____split_fields10 us_split_fields4)
(declare-const result____split_discrs8 us_split_discrs)
(assert (= o (extract_unsigned_16 query 0)))
(assert (= (to_rep1 o1) o))
(assert (= o1 o2))
(assert (= header__split_fields1 o3))
(assert (= header__split_fields2 o4))
(assert (= temp___361 o2))
(assert (= temp___3611 o3))
(assert (= temp___3612 o4))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 header__split_fields header__split_fields1 header__split_fields2))))
(assert (= header__split_fields3 (mk___split_fields1 temp___361 temp___3611 temp___3612)))
(assert (= o5 (extract_bits_of_octet query 2 7 #x01)))
(assert (= o6 (ite (= o5 #x00) true false)))
(assert (= result1 (ite (not (= o6 true)) true false)))
(assert (not (= result1 true)))
(assert (= result____split_discrs2 (mk___split_discrs result____split_discrs)))
(assert (= result____split_fields4 (mk___split_fields2 (mk___rep1 (mk___split_fields1 result____split_fields result____split_fields1 result____split_fields2)))))
(assert (= result____split_discrs2 result____split_discrs1))
(assert (= result____split_fields4 result____split_fields3))
(assert (= o7 (extract_bits_of_octet query 2 3 #x0F)))
(assert (= result2 (mk_t__ref opcode)))
(assert (= opcode1 o7))
(assert (=> (= opcode1 #x00) (= (to_rep3 o8) 0)))
(assert (=> (= opcode1 #x00) (= (rec__types__query_header__id header__split_fields3) o9)))
(assert (=> (= opcode1 #x00) (= o8 o10)))
(assert (=> (= opcode1 #x00) (= (rec__types__query_header__qdcount header__split_fields3) o11)))
(assert (=> (= opcode1 #x00) (= temp___366 (mk___rep1 (mk___split_fields1 o9 o10 o11)))))
(assert (=> (= opcode1 #x00) (= result3 (mk___split_fields__ref1 header__split_fields3))))
(assert (=> (= opcode1 #x00) (= header__split_fields4 (us_split_fields3 temp___366))))
(assert (=> (= opcode1 #x00) (= result____split_discrs3 result____split_discrs2)))
(assert (=> (= opcode1 #x00) (= result____split_fields5 result____split_fields4)))
(assert (=> (not (= opcode1 #x00)) (= opcode1 #x01)))
(assert (=> (not (= opcode1 #x00)) (= (to_rep3 o12) 1)))
(assert (=> (not (= opcode1 #x00)) (= o13 (mk___split_fields1 (rec__types__query_header__id header__split_fields3) o12 (rec__types__query_header__qdcount header__split_fields3)))))
(assert (=> (not (= opcode1 #x00)) (= temp___368 (mk___rep1 o13))))
(assert (=> (not (= opcode1 #x00)) (= result4 (mk___split_fields__ref1 header__split_fields3))))
(assert (=> (not (= opcode1 #x00)) (= header__split_fields5 (us_split_fields3 temp___368))))
(assert (=> (not (= opcode1 #x00)) (= result____split_discrs3 result____split_discrs2)))
(assert (=> (not (= opcode1 #x00)) (= result____split_fields5 result____split_fields4)))
(assert (=> (not (= opcode1 #x00)) (= header__split_fields4 header__split_fields5)))
(assert (= o14 (extract_bits_of_octet query 2 0 #x06)))
(assert (= o15 (ite (= o14 #x00) true false)))
(assert (= o16 (ite (not (= o15 true)) true false)))
(assert (= result5 (ite (= o16 false) (ite (not (= (to_rep (rec__types__octet__data (us_split_fields1 (select query 3)))) #x00)) true false) true)))
(assert (not (= result5 true)))
(assert (= result____split_discrs4 result____split_discrs3))
(assert (= result____split_fields6 result____split_fields5))
(assert (= o17 (extract_unsigned_16 query 4)))
(assert (= result6 (mk_t__ref1 qdcount)))
(assert (= qdcount1 o17))
(assert (bvuge qdcount1 #x0001))
(assert (bvule qdcount1 #x0010))
(assert (and (= o18 (bv2nat qdcount1)) (in_range5 (bv2nat qdcount1))))
(assert (= (to_rep4 o19) o18))
(assert (= o20 (mk___split_fields1 (rec__types__query_header__id header__split_fields4) (rec__types__query_header__opcode header__split_fields4) o19)))
(assert (= temp___379 (mk___rep1 o20)))
(assert (= result7 (mk___split_fields__ref1 header__split_fields4)))
(assert (= header__split_fields6 (us_split_fields3 temp___379)))
(assert (= result____split_discrs5 result____split_discrs4))
(assert (= result____split_fields7 result____split_fields6))
(assert (= o21 (extract_unsigned_16 query 6)))
(assert (= result8 (mk_t__ref1 count)))
(assert (= count1 o21))
(assert (= count1 #x0000))
(assert (= result____split_discrs6 result____split_discrs5))
(assert (= result____split_fields8 result____split_fields7))
(assert (= o22 (extract_unsigned_16 query 8)))
(assert (= result9 (mk_t__ref1 count1)))
(assert (= count2 o22))
(assert (= count2 #x0000))
(assert (= result____split_discrs7 result____split_discrs6))
(assert (= result____split_fields9 result____split_fields8))
(assert (= o23 (extract_unsigned_16 query 10)))
(assert (= result10 (mk_t__ref1 count2)))
(assert (= count3 o23))
(assert (= count3 #x0000))
(assert (= result____split_discrs8 result____split_discrs7))
(assert (= result____split_fields10 result____split_fields9))
(assert (= (to_rep2 (rec__parse__parse_result_t__return_code result____split_discrs8)) r30b))
(assert (in_range3 r30b))
(assert (= (to_rep2 o24) 0))
(assert (= o25 (mk___split_discrs o24)))
(assert (= temp___389 (mk___rep2 o25 (mk___split_fields2 (mk___rep1 header__split_fields6)) true)))
(assert (= result____attr__constrained true))
(assert (not (= (rec__parse__parse_result_t__return_code (us_split_discrs1 temp___389)) (rec__parse__parse_result_t__return_code result____split_discrs8))))
(check-sat)
(exit)
