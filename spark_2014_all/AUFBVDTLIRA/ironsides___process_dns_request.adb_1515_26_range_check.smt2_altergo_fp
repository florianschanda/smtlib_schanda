(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(65536 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  32)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (32 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 32))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 32))))))

logic is_signed_positive2 : t2 -> prop

logic of_int2 : int -> t2

logic to_int2 : t2 -> int

axiom to_int_def2 :
  (forall x:t2 [to_int2(x)]. ((is_signed_positive2(x) ->
  (to_int2(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int2(x) = (-(4294967296 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

predicate sle2(v1: t2, v2: t2) = (to_int2(v1) <= to_int2(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

predicate sge2(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) + tqtint2(v2)) <  4294967296) -> (tqtint2(add2(v1,
  v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  4294967296)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 4294967296)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) * tqtint2(v2)) <  4294967296) -> (tqtint2(mul2(v1,
  v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 4294967296)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int2(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 32)]. (eq_sub2(x, y, 0, 32) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq2 : t2, t2 -> bool

axiom bool_eq_def2 :
  (forall x:t2. forall y:t2 [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic bool_ne2 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne2(x, y)]. (((not (x = y)) -> (bool_ne2(x,
  y) = true)) and ((x = y) -> (bool_ne2(x, y) = false))))

logic bool_lt2 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt2(x, y)]. ((ult2(x, y) -> (bool_lt2(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt2(x, y) = false))))

logic bool_le2 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le2(x, y)]. ((ule2(x, y) -> (bool_le2(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le2(x, y) = false))))

logic bool_gt2 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt2(x, y)]. ((ugt2(x, y) -> (bool_gt2(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt2(x, y) = false))))

logic bool_ge2 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge2(x, y)]. ((uge2(x, y) -> (bool_ge2(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge2(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int3 : bool -> int

axiom to_int_def3 :
  (forall b:bool [to_int3(b)]. (((b = true) -> (to_int3(b) = 1)) and
  ((not (b = true)) -> (to_int3(b) = 0))))

logic of_int3 : int -> bool

axiom of_int_def :
  (forall i:int [of_int3(i)]. (((i = 0) -> (of_int3(i) = false)) and
  ((not (i = 0)) -> (of_int3(i) = true))))

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

logic bool_ne3 : int, int -> bool

logic bool_lt3 : int, int -> bool

logic bool_le3 : int, int -> bool

logic bool_gt3 : int, int -> bool

logic bool_ge3 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne3(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt3(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le3(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt3(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge3(x, y) = true) <-> (y <= x))))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type qname_ptr_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 16383))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : qname_ptr_range, qname_ptr_range -> bool

logic dummy1 : qname_ptr_range

type qname_ptr_range__ref = { qname_ptr_range__content : qname_ptr_range
}

function qname_ptr_range__ref___projection(a: qname_ptr_range__ref) : qname_ptr_range =
  (a).qname_ptr_range__content

type packet_length_range

predicate in_range3(x: int) = ((0 <= x) and (x <= 8192))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : packet_length_range, packet_length_range -> bool

logic dummy2 : packet_length_range

type packet_length_range__ref = { packet_length_range__content :
packet_length_range
}

function packet_length_range__ref___projection(a: packet_length_range__ref) : packet_length_range =
  (a).packet_length_range__content

type packet_bytes_range

predicate in_range4(x: int) = ((1 <= x) and (x <= 8180))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : packet_bytes_range, packet_bytes_range -> bool

logic dummy3 : packet_bytes_range

type packet_bytes_range__ref = { packet_bytes_range__content :
packet_bytes_range
}

function packet_bytes_range__ref___projection(a: packet_bytes_range__ref) : packet_bytes_range =
  (a).packet_bytes_range__content

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq10 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic user_eq4 : byte, byte -> bool

logic dummy4 : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

logic to_rep1 : byte -> t

logic of_rep1 : t -> byte

axiom inversion_axiom1 :
  (forall x:byte [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int4(x: byte) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:byte [to_int4(x)]. uint_in_range(to_int4(x)))

type unsigned_short

predicate in_range5(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : unsigned_short, unsigned_short -> bool

logic dummy5 : unsigned_short

type unsigned_short__ref = { unsigned_short__content : unsigned_short
}

function unsigned_short__ref___projection(a: unsigned_short__ref) : unsigned_short =
  (a).unsigned_short__content

logic to_rep2 : unsigned_short -> int

logic of_rep2 : int -> unsigned_short

axiom inversion_axiom2 :
  (forall x:unsigned_short [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned_short [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type opcode_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : opcode_type, opcode_type -> bool

logic dummy6 : opcode_type

type opcode_type__ref = { opcode_type__content : opcode_type
}

function opcode_type__ref___projection(a: opcode_type__ref) : opcode_type =
  (a).opcode_type__content

logic to_rep3 : opcode_type -> int

logic of_rep3 : int -> opcode_type

axiom inversion_axiom3 :
  (forall x:opcode_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:opcode_type [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type response_code

predicate in_range7(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : response_code, response_code -> bool

logic dummy7 : response_code

type response_code__ref = { response_code__content : response_code
}

function response_code__ref___projection(a: response_code__ref) : response_code =
  (a).response_code__content

logic to_rep4 : response_code -> int

logic of_rep4 : int -> response_code

axiom inversion_axiom4 :
  (forall x:response_code [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:response_code [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__dns_types__header_type__messageid :
unsigned_short; rec__dns_types__header_type__qr : bool;
rec__dns_types__header_type__opcode : opcode_type;
rec__dns_types__header_type__aa : bool; rec__dns_types__header_type__tc :
bool; rec__dns_types__header_type__rd : bool; rec__dns_types__header_type__ra
: bool; rec__dns_types__header_type__res1 : bool;
rec__dns_types__header_type__res2 : bool; rec__dns_types__header_type__res3 :
bool; rec__dns_types__header_type__rcode : response_code;
rec__dns_types__header_type__qdcount : unsigned_short;
rec__dns_types__header_type__ancount : unsigned_short;
rec__dns_types__header_type__nscount : unsigned_short;
rec__dns_types__header_type__arcount : unsigned_short
}

function us_split_fields_MessageID__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__messageid

function us_split_fields_QR__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__qr

function us_split_fields_Opcode__projection(a: us_split_fields) : opcode_type =
  (a).rec__dns_types__header_type__opcode

function us_split_fields_AA__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__aa

function us_split_fields_TC__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__tc

function us_split_fields_RD__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__rd

function us_split_fields_RA__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__ra

function us_split_fields_Res1__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__res1

function us_split_fields_Res2__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__res2

function us_split_fields_Res3__projection(a: us_split_fields) : bool =
  (a).rec__dns_types__header_type__res3

function us_split_fields_RCode__projection(a: us_split_fields) : response_code =
  (a).rec__dns_types__header_type__rcode

function us_split_fields_QDCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__qdcount

function us_split_fields_ANCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__ancount

function us_split_fields_NSCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__nscount

function us_split_fields_ARCount__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__header_type__arcount

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq14 : us_rep, us_rep -> bool

axiom bool_eq_def13 :
  (forall a:us_rep. forall b:us_rep [bool_eq14(a, b)].
  (((((((((((((((((to_rep2(((a).us_split_fields1).rec__dns_types__header_type__messageid) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__messageid)) and
  (((a).us_split_fields1).rec__dns_types__header_type__qr = ((b).us_split_fields1).rec__dns_types__header_type__qr)) and
  (to_rep3(((a).us_split_fields1).rec__dns_types__header_type__opcode) = to_rep3(((b).us_split_fields1).rec__dns_types__header_type__opcode))) and
  (((a).us_split_fields1).rec__dns_types__header_type__aa = ((b).us_split_fields1).rec__dns_types__header_type__aa)) and
  (((a).us_split_fields1).rec__dns_types__header_type__tc = ((b).us_split_fields1).rec__dns_types__header_type__tc)) and
  (((a).us_split_fields1).rec__dns_types__header_type__rd = ((b).us_split_fields1).rec__dns_types__header_type__rd)) and
  (((a).us_split_fields1).rec__dns_types__header_type__ra = ((b).us_split_fields1).rec__dns_types__header_type__ra)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res1 = ((b).us_split_fields1).rec__dns_types__header_type__res1)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res2 = ((b).us_split_fields1).rec__dns_types__header_type__res2)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res3 = ((b).us_split_fields1).rec__dns_types__header_type__res3)) and
  (to_rep4(((a).us_split_fields1).rec__dns_types__header_type__rcode) = to_rep4(((b).us_split_fields1).rec__dns_types__header_type__rcode))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__qdcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__qdcount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__ancount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__ancount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__nscount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__nscount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__arcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__arcount))) ->
  (bool_eq14(a, b) = true)) and
  ((not (((((((((((((((to_rep2(((a).us_split_fields1).rec__dns_types__header_type__messageid) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__messageid)) and
  (((a).us_split_fields1).rec__dns_types__header_type__qr = ((b).us_split_fields1).rec__dns_types__header_type__qr)) and
  (to_rep3(((a).us_split_fields1).rec__dns_types__header_type__opcode) = to_rep3(((b).us_split_fields1).rec__dns_types__header_type__opcode))) and
  (((a).us_split_fields1).rec__dns_types__header_type__aa = ((b).us_split_fields1).rec__dns_types__header_type__aa)) and
  (((a).us_split_fields1).rec__dns_types__header_type__tc = ((b).us_split_fields1).rec__dns_types__header_type__tc)) and
  (((a).us_split_fields1).rec__dns_types__header_type__rd = ((b).us_split_fields1).rec__dns_types__header_type__rd)) and
  (((a).us_split_fields1).rec__dns_types__header_type__ra = ((b).us_split_fields1).rec__dns_types__header_type__ra)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res1 = ((b).us_split_fields1).rec__dns_types__header_type__res1)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res2 = ((b).us_split_fields1).rec__dns_types__header_type__res2)) and
  (((a).us_split_fields1).rec__dns_types__header_type__res3 = ((b).us_split_fields1).rec__dns_types__header_type__res3)) and
  (to_rep4(((a).us_split_fields1).rec__dns_types__header_type__rcode) = to_rep4(((b).us_split_fields1).rec__dns_types__header_type__rcode))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__qdcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__qdcount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__ancount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__ancount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__nscount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__nscount))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__header_type__arcount) = to_rep2(((b).us_split_fields1).rec__dns_types__header_type__arcount)))) ->
  (bool_eq14(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short. (0 <= object__size({
  us_split_fields1 = { rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } })))

logic dns_types__header_type__messageid__first__bit : int

logic dns_types__header_type__messageid__last__bit : int

logic dns_types__header_type__messageid__position : int

axiom dns_types__header_type__messageid__first__bit_axiom :
  (0 <= dns_types__header_type__messageid__first__bit)

axiom dns_types__header_type__messageid__last__bit_axiom :
  (dns_types__header_type__messageid__first__bit <  dns_types__header_type__messageid__last__bit)

axiom dns_types__header_type__messageid__position_axiom :
  (0 <= dns_types__header_type__messageid__position)

logic dns_types__header_type__qr__first__bit : int

logic dns_types__header_type__qr__last__bit : int

logic dns_types__header_type__qr__position : int

axiom dns_types__header_type__qr__first__bit_axiom :
  (0 <= dns_types__header_type__qr__first__bit)

axiom dns_types__header_type__qr__last__bit_axiom :
  (dns_types__header_type__qr__first__bit <  dns_types__header_type__qr__last__bit)

axiom dns_types__header_type__qr__position_axiom :
  (0 <= dns_types__header_type__qr__position)

logic dns_types__header_type__opcode__first__bit : int

logic dns_types__header_type__opcode__last__bit : int

logic dns_types__header_type__opcode__position : int

axiom dns_types__header_type__opcode__first__bit_axiom :
  (0 <= dns_types__header_type__opcode__first__bit)

axiom dns_types__header_type__opcode__last__bit_axiom :
  (dns_types__header_type__opcode__first__bit <  dns_types__header_type__opcode__last__bit)

axiom dns_types__header_type__opcode__position_axiom :
  (0 <= dns_types__header_type__opcode__position)

logic dns_types__header_type__aa__first__bit : int

logic dns_types__header_type__aa__last__bit : int

logic dns_types__header_type__aa__position : int

axiom dns_types__header_type__aa__first__bit_axiom :
  (0 <= dns_types__header_type__aa__first__bit)

axiom dns_types__header_type__aa__last__bit_axiom :
  (dns_types__header_type__aa__first__bit <  dns_types__header_type__aa__last__bit)

axiom dns_types__header_type__aa__position_axiom :
  (0 <= dns_types__header_type__aa__position)

logic dns_types__header_type__tc__first__bit : int

logic dns_types__header_type__tc__last__bit : int

logic dns_types__header_type__tc__position : int

axiom dns_types__header_type__tc__first__bit_axiom :
  (0 <= dns_types__header_type__tc__first__bit)

axiom dns_types__header_type__tc__last__bit_axiom :
  (dns_types__header_type__tc__first__bit <  dns_types__header_type__tc__last__bit)

axiom dns_types__header_type__tc__position_axiom :
  (0 <= dns_types__header_type__tc__position)

logic dns_types__header_type__rd__first__bit : int

logic dns_types__header_type__rd__last__bit : int

logic dns_types__header_type__rd__position : int

axiom dns_types__header_type__rd__first__bit_axiom :
  (0 <= dns_types__header_type__rd__first__bit)

axiom dns_types__header_type__rd__last__bit_axiom :
  (dns_types__header_type__rd__first__bit <  dns_types__header_type__rd__last__bit)

axiom dns_types__header_type__rd__position_axiom :
  (0 <= dns_types__header_type__rd__position)

logic dns_types__header_type__ra__first__bit : int

logic dns_types__header_type__ra__last__bit : int

logic dns_types__header_type__ra__position : int

axiom dns_types__header_type__ra__first__bit_axiom :
  (0 <= dns_types__header_type__ra__first__bit)

axiom dns_types__header_type__ra__last__bit_axiom :
  (dns_types__header_type__ra__first__bit <  dns_types__header_type__ra__last__bit)

axiom dns_types__header_type__ra__position_axiom :
  (0 <= dns_types__header_type__ra__position)

logic dns_types__header_type__res1__first__bit : int

logic dns_types__header_type__res1__last__bit : int

logic dns_types__header_type__res1__position : int

axiom dns_types__header_type__res1__first__bit_axiom :
  (0 <= dns_types__header_type__res1__first__bit)

axiom dns_types__header_type__res1__last__bit_axiom :
  (dns_types__header_type__res1__first__bit <  dns_types__header_type__res1__last__bit)

axiom dns_types__header_type__res1__position_axiom :
  (0 <= dns_types__header_type__res1__position)

logic dns_types__header_type__res2__first__bit : int

logic dns_types__header_type__res2__last__bit : int

logic dns_types__header_type__res2__position : int

axiom dns_types__header_type__res2__first__bit_axiom :
  (0 <= dns_types__header_type__res2__first__bit)

axiom dns_types__header_type__res2__last__bit_axiom :
  (dns_types__header_type__res2__first__bit <  dns_types__header_type__res2__last__bit)

axiom dns_types__header_type__res2__position_axiom :
  (0 <= dns_types__header_type__res2__position)

logic dns_types__header_type__res3__first__bit : int

logic dns_types__header_type__res3__last__bit : int

logic dns_types__header_type__res3__position : int

axiom dns_types__header_type__res3__first__bit_axiom :
  (0 <= dns_types__header_type__res3__first__bit)

axiom dns_types__header_type__res3__last__bit_axiom :
  (dns_types__header_type__res3__first__bit <  dns_types__header_type__res3__last__bit)

axiom dns_types__header_type__res3__position_axiom :
  (0 <= dns_types__header_type__res3__position)

logic dns_types__header_type__rcode__first__bit : int

logic dns_types__header_type__rcode__last__bit : int

logic dns_types__header_type__rcode__position : int

axiom dns_types__header_type__rcode__first__bit_axiom :
  (0 <= dns_types__header_type__rcode__first__bit)

axiom dns_types__header_type__rcode__last__bit_axiom :
  (dns_types__header_type__rcode__first__bit <  dns_types__header_type__rcode__last__bit)

axiom dns_types__header_type__rcode__position_axiom :
  (0 <= dns_types__header_type__rcode__position)

logic dns_types__header_type__qdcount__first__bit : int

logic dns_types__header_type__qdcount__last__bit : int

logic dns_types__header_type__qdcount__position : int

axiom dns_types__header_type__qdcount__first__bit_axiom :
  (0 <= dns_types__header_type__qdcount__first__bit)

axiom dns_types__header_type__qdcount__last__bit_axiom :
  (dns_types__header_type__qdcount__first__bit <  dns_types__header_type__qdcount__last__bit)

axiom dns_types__header_type__qdcount__position_axiom :
  (0 <= dns_types__header_type__qdcount__position)

logic dns_types__header_type__ancount__first__bit : int

logic dns_types__header_type__ancount__last__bit : int

logic dns_types__header_type__ancount__position : int

axiom dns_types__header_type__ancount__first__bit_axiom :
  (0 <= dns_types__header_type__ancount__first__bit)

axiom dns_types__header_type__ancount__last__bit_axiom :
  (dns_types__header_type__ancount__first__bit <  dns_types__header_type__ancount__last__bit)

axiom dns_types__header_type__ancount__position_axiom :
  (0 <= dns_types__header_type__ancount__position)

logic dns_types__header_type__nscount__first__bit : int

logic dns_types__header_type__nscount__last__bit : int

logic dns_types__header_type__nscount__position : int

axiom dns_types__header_type__nscount__first__bit_axiom :
  (0 <= dns_types__header_type__nscount__first__bit)

axiom dns_types__header_type__nscount__last__bit_axiom :
  (dns_types__header_type__nscount__first__bit <  dns_types__header_type__nscount__last__bit)

axiom dns_types__header_type__nscount__position_axiom :
  (0 <= dns_types__header_type__nscount__position)

logic dns_types__header_type__arcount__first__bit : int

logic dns_types__header_type__arcount__last__bit : int

logic dns_types__header_type__arcount__position : int

axiom dns_types__header_type__arcount__first__bit_axiom :
  (0 <= dns_types__header_type__arcount__first__bit)

axiom dns_types__header_type__arcount__last__bit_axiom :
  (dns_types__header_type__arcount__first__bit <  dns_types__header_type__arcount__last__bit)

axiom dns_types__header_type__arcount__position_axiom :
  (0 <= dns_types__header_type__arcount__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : unsigned_short

logic dummy9 : bool

logic dummy10 : opcode_type

logic dummy11 : bool

logic dummy12 : bool

logic dummy13 : bool

logic dummy14 : bool

logic dummy15 : bool

logic dummy16 : bool

logic dummy17 : bool

logic dummy18 : response_code

logic dummy19 : unsigned_short

logic dummy20 : unsigned_short

logic dummy21 : unsigned_short

logic dummy22 : unsigned_short

type header_type__ref = { header_type__content : us_rep
}

function header_type__ref___projection(a: header_type__ref) : us_rep =
  (a).header_type__content

type map__ref1 = { map__content1 : (int,byte) farray
}

logic slide1 : (int,byte) farray, int, int -> (int,byte) farray

axiom slide_eq1 :
  (forall a:(int,byte) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq15 : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,byte) farray. forall a__first:int. forall a__last:int.
  forall b:(int,byte) farray. forall b__first:int. forall b__last:int
  [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))))))))

logic dummy23 : (int,byte) farray

logic value__size1 : int

logic object__size1 : (int,byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,byte) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,byte) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,byte) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,byte) farray. (0 <= object__alignment1(a)))

logic user_eq9 : (int,byte) farray, (int,byte) farray -> bool

type us_split_fields2 = { rec__dns_types__dns_packet__header : us_rep;
rec__dns_types__dns_packet__bytes : (int,byte) farray
}

function us_split_fields_Header__projection(a: us_split_fields2) : us_rep =
  (a).rec__dns_types__dns_packet__header

function us_split_fields_Bytes__projection(a: us_split_fields2) : (int,byte) farray =
  (a).rec__dns_types__dns_packet__bytes

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq16 : us_rep1, us_rep1 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq16(a, b)].
  ((((bool_eq14(((a).us_split_fields3).rec__dns_types__dns_packet__header,
  ((b).us_split_fields3).rec__dns_types__dns_packet__header) = true) and
  (bool_eq15(((a).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180, ((b).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180) = true)) -> (bool_eq16(a, b) = true)) and
  ((not ((bool_eq14(((a).us_split_fields3).rec__dns_types__dns_packet__header,
  ((b).us_split_fields3).rec__dns_types__dns_packet__header) = true) and
  (bool_eq15(((a).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180, ((b).us_split_fields3).rec__dns_types__dns_packet__bytes, 1,
  8180) = true))) -> (bool_eq16(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  forall a15:(int,byte) farray. (0 <= object__size2({ us_split_fields3 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } };
  rec__dns_types__dns_packet__bytes = a15 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  forall a15:(int,byte) farray. (0 <= object__alignment2({ us_split_fields3 =
  { rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } };
  rec__dns_types__dns_packet__bytes = a15 } })))

logic dns_types__dns_packet__header__first__bit : int

logic dns_types__dns_packet__header__last__bit : int

logic dns_types__dns_packet__header__position : int

axiom dns_types__dns_packet__header__first__bit_axiom :
  (0 <= dns_types__dns_packet__header__first__bit)

axiom dns_types__dns_packet__header__last__bit_axiom :
  (dns_types__dns_packet__header__first__bit <  dns_types__dns_packet__header__last__bit)

axiom dns_types__dns_packet__header__position_axiom :
  (0 <= dns_types__dns_packet__header__position)

logic dns_types__dns_packet__bytes__first__bit : int

logic dns_types__dns_packet__bytes__last__bit : int

logic dns_types__dns_packet__bytes__position : int

axiom dns_types__dns_packet__bytes__first__bit_axiom :
  (0 <= dns_types__dns_packet__bytes__first__bit)

axiom dns_types__dns_packet__bytes__last__bit_axiom :
  (dns_types__dns_packet__bytes__first__bit <  dns_types__dns_packet__bytes__last__bit)

axiom dns_types__dns_packet__bytes__position_axiom :
  (0 <= dns_types__dns_packet__bytes__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy24 : unsigned_short

logic dummy25 : bool

logic dummy26 : opcode_type

logic dummy27 : bool

logic dummy28 : bool

logic dummy29 : bool

logic dummy30 : bool

logic dummy31 : bool

logic dummy32 : bool

logic dummy33 : bool

logic dummy34 : response_code

logic dummy35 : unsigned_short

logic dummy36 : unsigned_short

logic dummy37 : unsigned_short

logic dummy38 : unsigned_short

logic dummy39 : (int,byte) farray

type dns_packet__ref = { dns_packet__content : us_rep1
}

function dns_packet__ref___projection(a: dns_packet__ref) : us_rep1 =
  (a).dns_packet__content

type unsigned32

logic attr__ATTRIBUTE_MODULUS1 : t2

logic bool_eq17 : t2, t2 -> bool

axiom bool_eq_def16 :
  (forall x:t2. forall y:t2 [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> t2

logic user_eq11 : unsigned32, unsigned32 -> bool

logic dummy40 : unsigned32

type unsigned32__ref = { unsigned32__content : unsigned32
}

function unsigned32__ref___projection(a: unsigned32__ref) : unsigned32 =
  (a).unsigned32__content

logic to_rep5 : unsigned32 -> t2

logic of_rep5 : t2 -> unsigned32

axiom inversion_axiom5 :
  (forall x:unsigned32 [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : true

axiom coerce_axiom5 :
  (forall x:t2 [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int5(x: unsigned32) : int = tqtint2(to_rep5(x))

axiom range_int_axiom1 :
  (forall x:unsigned32 [to_int5(x)]. uint_in_range2(to_int5(x)))

type wirestringtypeindex

predicate in_range8(x: int) = ((1 <= x) and (x <= 129))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : wirestringtypeindex, wirestringtypeindex -> bool

logic dummy41 : wirestringtypeindex

type wirestringtypeindex__ref = { wirestringtypeindex__content :
wirestringtypeindex
}

function wirestringtypeindex__ref___projection(a: wirestringtypeindex__ref) : wirestringtypeindex =
  (a).wirestringtypeindex__content

logic wirenamelength : (int,character) farray -> int

logic wirenamelength__function_guard : int, (int,character) farray -> prop

type classtype

predicate in_range9(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq13 : classtype, classtype -> bool

logic dummy42 : classtype

type classtype__ref = { classtype__content : classtype
}

function classtype__ref___projection(a: classtype__ref) : classtype =
  (a).classtype__content

logic to_rep6 : classtype -> int

logic of_rep6 : int -> classtype

axiom inversion_axiom6 :
  (forall x:classtype [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:classtype [to_rep6(x)]. in_range9(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range9(x) ->
  (to_rep6(of_rep6(x)) = x)))

logic dummy43 : (int,character) farray

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

logic user_eq14 : (int,character) farray, (int,character) farray -> bool

type us_split_fields4 = { rec__rr_type__resourcerecordtype__ttlinseconds :
unsigned32; rec__rr_type__resourcerecordtype__class : classtype; rec__ext__ :
us_private
}

function us_split_fields_TTLInSeconds__projection(a: us_split_fields4) : unsigned32 =
  (a).rec__rr_type__resourcerecordtype__ttlinseconds

function us_split_fields_Class__projection(a: us_split_fields4) : classtype =
  (a).rec__rr_type__resourcerecordtype__class

function us_split_fields___2__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag : int
}

function us_rep___7__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___8__projection(a: us_rep2) : int = (a).attr__tag

logic bool_eq20 : us_rep2, us_rep2 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq20(a, b)].
  ((((to_rep5(((a).us_split_fields5).rec__rr_type__resourcerecordtype__ttlinseconds) = to_rep5(((b).us_split_fields5).rec__rr_type__resourcerecordtype__ttlinseconds)) and
  (to_rep6(((a).us_split_fields5).rec__rr_type__resourcerecordtype__class) = to_rep6(((b).us_split_fields5).rec__rr_type__resourcerecordtype__class))) ->
  (bool_eq20(a, b) = true)) and
  ((not ((to_rep5(((a).us_split_fields5).rec__rr_type__resourcerecordtype__ttlinseconds) = to_rep5(((b).us_split_fields5).rec__rr_type__resourcerecordtype__ttlinseconds)) and
  (to_rep6(((a).us_split_fields5).rec__rr_type__resourcerecordtype__class) = to_rep6(((b).us_split_fields5).rec__rr_type__resourcerecordtype__class)))) ->
  (bool_eq20(a, b) = false))))

logic us_dispatch_eq : us_rep2, us_rep2 -> bool

logic us_tag : int

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:unsigned32. forall a1:classtype. forall a2:us_private.
  forall a3:int. (0 <= object__size4({ us_split_fields5 = {
  rec__rr_type__resourcerecordtype__ttlinseconds = a;
  rec__rr_type__resourcerecordtype__class = a1; rec__ext__ = a2 };
  attr__tag = a3 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:unsigned32. forall a1:classtype. forall a2:us_private.
  forall a3:int. (0 <= object__alignment4({ us_split_fields5 = {
  rec__rr_type__resourcerecordtype__ttlinseconds = a;
  rec__rr_type__resourcerecordtype__class = a1; rec__ext__ = a2 };
  attr__tag = a3 })))

logic rr_type__resourcerecordtype__ttlinseconds__first__bit : int

logic rr_type__resourcerecordtype__ttlinseconds__last__bit : int

logic rr_type__resourcerecordtype__ttlinseconds__position : int

axiom rr_type__resourcerecordtype__ttlinseconds__first__bit_axiom :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__first__bit)

axiom rr_type__resourcerecordtype__ttlinseconds__last__bit_axiom :
  (rr_type__resourcerecordtype__ttlinseconds__first__bit <  rr_type__resourcerecordtype__ttlinseconds__last__bit)

axiom rr_type__resourcerecordtype__ttlinseconds__position_axiom :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__position)

logic rr_type__resourcerecordtype__class__first__bit : int

logic rr_type__resourcerecordtype__class__last__bit : int

logic rr_type__resourcerecordtype__class__position : int

axiom rr_type__resourcerecordtype__class__first__bit_axiom :
  (0 <= rr_type__resourcerecordtype__class__first__bit)

axiom rr_type__resourcerecordtype__class__last__bit_axiom :
  (rr_type__resourcerecordtype__class__first__bit <  rr_type__resourcerecordtype__class__last__bit)

axiom rr_type__resourcerecordtype__class__position_axiom :
  (0 <= rr_type__resourcerecordtype__class__position)

logic user_eq15 : us_rep2, us_rep2 -> bool

logic dummy44 : unsigned32

logic dummy45 : classtype

logic dummy46 : us_private

logic dummy47 : int

type resourcerecordtype__ref = { resourcerecordtype__content : us_rep2
}

function resourcerecordtype__ref___projection(a: resourcerecordtype__ref) : us_rep2 =
  (a).resourcerecordtype__content

type us_split_fields6 = {
rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname :
(int,character) farray; rec__rr_type__resourcerecordtype__ttlinseconds1 :
unsigned32; rec__rr_type__resourcerecordtype__class1 : classtype; rec__ext__1
: us_private
}

function us_split_fields_CanonicalDomainName__projection(a: us_split_fields6) : (int,character) farray =
  (a).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname

function us_split_fields_TTLInSeconds__4__projection(a: us_split_fields6) : unsigned32 =
  (a).rec__rr_type__resourcerecordtype__ttlinseconds1

function us_split_fields_Class__4__projection(a: us_split_fields6) : classtype =
  (a).rec__rr_type__resourcerecordtype__class1

function us_split_fields___5__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__1

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6; attr__tag1 : int
}

function us_rep___13__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep___14__projection(a: us_rep3) : int = (a).attr__tag1

logic hide_ext__ : (int,character) farray, us_private -> us_private

logic extract__canonicaldomainname : us_private -> (int,character) farray

axiom extract__canonicaldomainname__conv :
  (forall canonicaldomainname:(int,character) farray.
  (forall rec__ext__2:us_private.
  (extract__canonicaldomainname(hide_ext__(canonicaldomainname,
  rec__ext__2)) = canonicaldomainname)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep3) : us_rep2 = { us_split_fields5 = {
  rec__rr_type__resourcerecordtype__ttlinseconds =
  ((a).us_split_fields7).rec__rr_type__resourcerecordtype__ttlinseconds1;
  rec__rr_type__resourcerecordtype__class =
  ((a).us_split_fields7).rec__rr_type__resourcerecordtype__class1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname,
  ((a).us_split_fields7).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep2) : us_rep3 = { us_split_fields7 = {
  rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname =
  extract__canonicaldomainname(((r).us_split_fields5).rec__ext__);
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  ((r).us_split_fields5).rec__rr_type__resourcerecordtype__ttlinseconds;
  rec__rr_type__resourcerecordtype__class1 =
  ((r).us_split_fields5).rec__rr_type__resourcerecordtype__class;
  rec__ext__1 = extract__ext__(((r).us_split_fields5).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq21 : us_rep3, us_rep3 -> bool

axiom bool_eq_def20 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq21(a, b)].
  (((((bool_eq6(((a).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname,
  1, 129,
  ((b).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname,
  1, 129) = true) and
  (to_rep5(((a).us_split_fields7).rec__rr_type__resourcerecordtype__ttlinseconds1) = to_rep5(((b).us_split_fields7).rec__rr_type__resourcerecordtype__ttlinseconds1))) and
  (to_rep6(((a).us_split_fields7).rec__rr_type__resourcerecordtype__class1) = to_rep6(((b).us_split_fields7).rec__rr_type__resourcerecordtype__class1))) ->
  (bool_eq21(a, b) = true)) and
  ((not (((bool_eq6(((a).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname,
  1, 129,
  ((b).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname,
  1, 129) = true) and
  (to_rep5(((a).us_split_fields7).rec__rr_type__resourcerecordtype__ttlinseconds1) = to_rep5(((b).us_split_fields7).rec__rr_type__resourcerecordtype__ttlinseconds1))) and
  (to_rep6(((a).us_split_fields7).rec__rr_type__resourcerecordtype__class1) = to_rep6(((b).us_split_fields7).rec__rr_type__resourcerecordtype__class1)))) ->
  (bool_eq21(a, b) = false))))

logic us_tag1 : int

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. forall a1:unsigned32.
  forall a2:classtype. forall a3:us_private. forall a4:int.
  (0 <= object__size5({ us_split_fields7 = {
  rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname = a;
  rec__rr_type__resourcerecordtype__ttlinseconds1 = a1;
  rec__rr_type__resourcerecordtype__class1 = a2; rec__ext__1 = a3 };
  attr__tag1 = a4 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. forall a1:unsigned32.
  forall a2:classtype. forall a3:us_private. forall a4:int.
  (0 <= object__alignment5({ us_split_fields7 = {
  rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname = a;
  rec__rr_type__resourcerecordtype__ttlinseconds1 = a1;
  rec__rr_type__resourcerecordtype__class1 = a2; rec__ext__1 = a3 };
  attr__tag1 = a4 })))

logic rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit : int

logic rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__last__bit : int

logic rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__position : int

axiom rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit_axiom :
  (0 <= rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit)

axiom rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__last__bit_axiom :
  (rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__first__bit <  rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__last__bit)

axiom rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__position_axiom :
  (0 <= rr_type__cname_record_type__cnamerecordtype__canonicaldomainname__position)

logic rr_type__resourcerecordtype__ttlinseconds__first__bit1 : int

logic rr_type__resourcerecordtype__ttlinseconds__last__bit1 : int

logic rr_type__resourcerecordtype__ttlinseconds__position1 : int

axiom rr_type__resourcerecordtype__ttlinseconds__first__bit_axiom1 :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__first__bit1)

axiom rr_type__resourcerecordtype__ttlinseconds__last__bit_axiom1 :
  (rr_type__resourcerecordtype__ttlinseconds__first__bit1 <  rr_type__resourcerecordtype__ttlinseconds__last__bit1)

axiom rr_type__resourcerecordtype__ttlinseconds__position_axiom1 :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__position1)

logic rr_type__resourcerecordtype__class__first__bit1 : int

logic rr_type__resourcerecordtype__class__last__bit1 : int

logic rr_type__resourcerecordtype__class__position1 : int

axiom rr_type__resourcerecordtype__class__first__bit_axiom1 :
  (0 <= rr_type__resourcerecordtype__class__first__bit1)

axiom rr_type__resourcerecordtype__class__last__bit_axiom1 :
  (rr_type__resourcerecordtype__class__first__bit1 <  rr_type__resourcerecordtype__class__last__bit1)

axiom rr_type__resourcerecordtype__class__position_axiom1 :
  (0 <= rr_type__resourcerecordtype__class__position1)

logic user_eq16 : us_rep3, us_rep3 -> bool

logic dummy48 : (int,character) farray

logic dummy49 : unsigned32

logic dummy50 : classtype

logic dummy51 : us_private

logic dummy52 : int

type cnamerecordtype__ref = { cnamerecordtype__content : us_rep3
}

function cnamerecordtype__ref___projection(a: cnamerecordtype__ref) : us_rep3 =
  (a).cnamerecordtype__content

type map__ref2 = { map__content2 : (int,us_rep3) farray
}

logic slide2 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq2 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq22 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def21 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq22(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_201:int. ((((a__first <= temp___idx_201) and
  (temp___idx_201 <= a__last)) and (bool_eq21((a[temp___idx_201]),
  (b[((b__first - a__first) + temp___idx_201)])) = true)) or
  (not ((a__first <= temp___idx_201) and (temp___idx_201 <= a__last)))))) ->
  (bool_eq22(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_201:int. (((a__first <= temp___idx_201) and
  (temp___idx_201 <= a__last)) -> (bool_eq21((a[temp___idx_201]),
  (b[((b__first - a__first) + temp___idx_201)])) = true))))) -> (bool_eq22(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq22(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_201:int. (((a__first <= temp___idx_201) and
  (temp___idx_201 <= a__last)) -> (bool_eq21((a[temp___idx_201]),
  (b[((b__first - a__first) + temp___idx_201)])) = true)))))))

type returnedrecordsindextype

predicate in_range10(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq17 : returnedrecordsindextype, returnedrecordsindextype -> bool

logic dummy53 : returnedrecordsindextype

type returnedrecordsindextype__ref = { returnedrecordsindextype__content :
returnedrecordsindextype
}

function returnedrecordsindextype__ref___projection(a: returnedrecordsindextype__ref) : returnedrecordsindextype =
  (a).returnedrecordsindextype__content

logic start_byte : int

logic attr__ATTRIBUTE_ADDRESS : int

logic cnames : (int,us_rep3) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 5)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 1)

 (* File "process_dns_request.ads", line 404, characters 0-0 *)
goal WP_parameter_def :
  (forall domainname:(int,character) farray. forall qname_location:int.
  forall output_packet__split_fields:unsigned_short.
  forall output_packet__split_fields1:bool.
  forall output_packet__split_fields2:opcode_type.
  forall output_packet__split_fields3:bool.
  forall output_packet__split_fields4:bool.
  forall output_packet__split_fields5:bool.
  forall output_packet__split_fields6:bool.
  forall output_packet__split_fields7:bool.
  forall output_packet__split_fields8:bool.
  forall output_packet__split_fields9:bool.
  forall output_packet__split_fields10:response_code.
  forall output_packet__split_fields11:unsigned_short.
  forall output_packet__split_fields12:unsigned_short.
  forall output_packet__split_fields13:unsigned_short.
  forall output_packet__split_fields14:unsigned_short.
  forall output_packet__split_fields15:(int,byte) farray.
  forall output_bytes:int. forall current_byte:int. forall name_length:int.
  forall i:int. forall o:int. forall o1:int. forall o2:byte. forall o3:int.
  forall o4:(int,byte) farray. forall o5:unsigned_short. forall o6:bool.
  forall o7:opcode_type. forall o8:bool. forall o9:bool. forall o10:bool.
  forall o11:bool. forall o12:bool. forall o13:bool. forall o14:bool.
  forall o15:response_code. forall o16:unsigned_short.
  forall o17:unsigned_short. forall o18:unsigned_short.
  forall o19:unsigned_short. forall o20:(int,byte) farray.
  forall temp___7115:unsigned_short. forall temp___71151:bool.
  forall temp___71152:opcode_type. forall temp___71153:bool.
  forall temp___71154:bool. forall temp___71155:bool.
  forall temp___71156:bool. forall temp___71157:bool.
  forall temp___71158:bool. forall temp___71159:bool.
  forall temp___711510:response_code. forall temp___711511:unsigned_short.
  forall temp___711512:unsigned_short. forall temp___711513:unsigned_short.
  forall temp___711514:unsigned_short.
  forall temp___711515:(int,byte) farray. forall o21:byte. forall o22:int.
  forall o23:(int,byte) farray. forall o24:unsigned_short. forall o25:bool.
  forall o26:opcode_type. forall o27:bool. forall o28:bool. forall o29:bool.
  forall o30:bool. forall o31:bool. forall o32:bool. forall o33:bool.
  forall o34:response_code. forall o35:unsigned_short.
  forall o36:unsigned_short. forall o37:unsigned_short.
  forall o38:unsigned_short. forall o39:(int,byte) farray.
  forall temp___7119:unsigned_short. forall temp___71191:bool.
  forall temp___71192:opcode_type. forall temp___71193:bool.
  forall temp___71194:bool. forall temp___71195:bool.
  forall temp___71196:bool. forall temp___71197:bool.
  forall temp___71198:bool. forall temp___71199:bool.
  forall temp___711910:response_code. forall temp___711911:unsigned_short.
  forall temp___711912:unsigned_short. forall temp___711913:unsigned_short.
  forall temp___711914:unsigned_short.
  forall temp___711915:(int,byte) farray. forall o40:byte. forall o41:int.
  forall o42:(int,byte) farray. forall o43:unsigned_short. forall o44:bool.
  forall o45:opcode_type. forall o46:bool. forall o47:bool. forall o48:bool.
  forall o49:bool. forall o50:bool. forall o51:bool. forall o52:bool.
  forall o53:response_code. forall o54:unsigned_short.
  forall o55:unsigned_short. forall o56:unsigned_short.
  forall o57:unsigned_short. forall o58:(int,byte) farray.
  forall temp___7123:unsigned_short. forall temp___71231:bool.
  forall temp___71232:opcode_type. forall temp___71233:bool.
  forall temp___71234:bool. forall temp___71235:bool.
  forall temp___71236:bool. forall temp___71237:bool.
  forall temp___71238:bool. forall temp___71239:bool.
  forall temp___712310:response_code. forall temp___712311:unsigned_short.
  forall temp___712312:unsigned_short. forall temp___712313:unsigned_short.
  forall temp___712314:unsigned_short.
  forall temp___712315:(int,byte) farray. forall o59:byte. forall o60:int.
  forall o61:(int,byte) farray. forall o62:unsigned_short. forall o63:bool.
  forall o64:opcode_type. forall o65:bool. forall o66:bool. forall o67:bool.
  forall o68:bool. forall o69:bool. forall o70:bool. forall o71:bool.
  forall o72:response_code. forall o73:unsigned_short.
  forall o74:unsigned_short. forall o75:unsigned_short.
  forall o76:unsigned_short. forall o77:(int,byte) farray.
  forall temp___7127:unsigned_short. forall temp___71271:bool.
  forall temp___71272:opcode_type. forall temp___71273:bool.
  forall temp___71274:bool. forall temp___71275:bool.
  forall temp___71276:bool. forall temp___71277:bool.
  forall temp___71278:bool. forall temp___71279:bool.
  forall temp___712710:response_code. forall temp___712711:unsigned_short.
  forall temp___712712:unsigned_short. forall temp___712713:unsigned_short.
  forall temp___712714:unsigned_short.
  forall temp___712715:(int,byte) farray. forall result:int__ref.
  forall current_byte1:int. forall result1:map__ref.
  forall domainname1:(int,character) farray. forall result2:int__ref.
  forall name_length1:int.
  forall process_dns_request__set_unsigned_16__bytes:(int,byte) farray.
  forall result3:us_split_fields__ref1.
  forall output_packet__split_fields16:us_split_fields2.
  forall result4:us_split_fields__ref1.
  forall output_packet__split_fields17:us_split_fields2.
  forall result5:us_split_fields__ref1.
  forall output_packet__split_fields18:us_split_fields2.
  forall result6:us_split_fields__ref1.
  forall output_packet__split_fields19:us_split_fields2.
  forall result7:us_split_fields__ref1.
  forall output_packet__split_fields20:us_split_fields2.
  (in_range4(start_byte) -> (in_range2(qname_location) -> (((0 <= 8192) ->
  in_range3(output_bytes)) -> (((start_byte <= 8192) and
  (to_rep2(output_packet__split_fields12) = 0)) -> (((1 <= 8180) ->
  in_range4(current_byte)) -> (((1 <= 129) -> in_range8(name_length)) ->
  (((1 <= 129) -> in_range8(i)) -> (((result = { int__content = current_byte
  }) and (current_byte1 = start_byte)) -> (((result1 = { map__content =
  domainname }) and
  (domainname1 = (((cnames[1])).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname)) ->
  ((((o = wirenamelength((((cnames[1])).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname)) and
  (in_range8(o) and ((o = 129) or
  ((to_rep(((((cnames[1])).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname[o])) = 0) and
  (forall q:int. (((1 <= q) and (q <= (o - 1))) ->
  (not (to_rep(((((cnames[1])).us_split_fields7).rec__rr_type__cname_record_type__cnamerecordtype__canonicaldomainname[q])) = 0)))))))) and
  ((result2 = { int__content = name_length }) and (name_length1 = o))) ->
  ((current_byte1 <  8168) -> ((((o1 = (current_byte1 + 1)) and
  in_range4((current_byte1 + 1))) and ((result3 = {
  us_split_fields__content1 = { rec__dns_types__dns_packet__header = {
  us_split_fields1 = { rec__dns_types__header_type__messageid =
  output_packet__split_fields; rec__dns_types__header_type__qr =
  output_packet__split_fields1; rec__dns_types__header_type__opcode =
  output_packet__split_fields2; rec__dns_types__header_type__aa =
  output_packet__split_fields3; rec__dns_types__header_type__tc =
  output_packet__split_fields4; rec__dns_types__header_type__rd =
  output_packet__split_fields5; rec__dns_types__header_type__ra =
  output_packet__split_fields6; rec__dns_types__header_type__res1 =
  output_packet__split_fields7; rec__dns_types__header_type__res2 =
  output_packet__split_fields8; rec__dns_types__header_type__res3 =
  output_packet__split_fields9; rec__dns_types__header_type__rcode =
  output_packet__split_fields10; rec__dns_types__header_type__qdcount =
  output_packet__split_fields11; rec__dns_types__header_type__ancount =
  output_packet__split_fields12; rec__dns_types__header_type__nscount =
  output_packet__split_fields13; rec__dns_types__header_type__arcount =
  output_packet__split_fields14 } }; rec__dns_types__dns_packet__bytes =
  output_packet__split_fields15 } }) and (output_packet__split_fields16 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = output_packet__split_fields;
  rec__dns_types__header_type__qr = output_packet__split_fields1;
  rec__dns_types__header_type__opcode = output_packet__split_fields2;
  rec__dns_types__header_type__aa = output_packet__split_fields3;
  rec__dns_types__header_type__tc = output_packet__split_fields4;
  rec__dns_types__header_type__rd = output_packet__split_fields5;
  rec__dns_types__header_type__ra = output_packet__split_fields6;
  rec__dns_types__header_type__res1 = output_packet__split_fields7;
  rec__dns_types__header_type__res2 = output_packet__split_fields8;
  rec__dns_types__header_type__res3 = output_packet__split_fields9;
  rec__dns_types__header_type__rcode = output_packet__split_fields10;
  rec__dns_types__header_type__qdcount = output_packet__split_fields11;
  rec__dns_types__header_type__ancount = output_packet__split_fields12;
  rec__dns_types__header_type__nscount = output_packet__split_fields13;
  rec__dns_types__header_type__arcount = output_packet__split_fields14 } };
  rec__dns_types__dns_packet__bytes =
  process_dns_request__set_unsigned_16__bytes }))) ->
  ((((((to_rep1(o2) = rliteral) and ((((1 <= (current_byte1 + 3)) and
  ((current_byte1 + 3) <= 8180)) and (o3 = (current_byte1 + 3))) and
  (o4 = ((output_packet__split_fields16).rec__dns_types__dns_packet__bytes[o3 <- o2])))) and
  (((output_packet__split_fields16).rec__dns_types__dns_packet__header = {
  us_split_fields1 = { rec__dns_types__header_type__messageid = o5;
  rec__dns_types__header_type__qr = o6; rec__dns_types__header_type__opcode =
  o7; rec__dns_types__header_type__aa = o8; rec__dns_types__header_type__tc =
  o9; rec__dns_types__header_type__rd = o10;
  rec__dns_types__header_type__ra = o11; rec__dns_types__header_type__res1 =
  o12; rec__dns_types__header_type__res2 = o13;
  rec__dns_types__header_type__res3 = o14;
  rec__dns_types__header_type__rcode = o15;
  rec__dns_types__header_type__qdcount = o16;
  rec__dns_types__header_type__ancount = o17;
  rec__dns_types__header_type__nscount = o18;
  rec__dns_types__header_type__arcount = o19 } }) and (o4 = o20))) and
  (((temp___7115 = o5) and ((temp___71151 = o6) and ((temp___71152 = o7) and
  ((temp___71153 = o8) and ((temp___71154 = o9) and ((temp___71155 = o10) and
  ((temp___71156 = o11) and ((temp___71157 = o12) and
  ((temp___71158 = o13) and ((temp___71159 = o14) and
  ((temp___711510 = o15) and ((temp___711511 = o16) and
  ((temp___711512 = o17) and ((temp___711513 = o18) and
  (temp___711514 = o19))))))))))))))) and (temp___711515 = o20))) and
  ((result4 = { us_split_fields__content1 = output_packet__split_fields16
  }) and (output_packet__split_fields17 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = temp___7115;
  rec__dns_types__header_type__qr = temp___71151;
  rec__dns_types__header_type__opcode = temp___71152;
  rec__dns_types__header_type__aa = temp___71153;
  rec__dns_types__header_type__tc = temp___71154;
  rec__dns_types__header_type__rd = temp___71155;
  rec__dns_types__header_type__ra = temp___71156;
  rec__dns_types__header_type__res1 = temp___71157;
  rec__dns_types__header_type__res2 = temp___71158;
  rec__dns_types__header_type__res3 = temp___71159;
  rec__dns_types__header_type__rcode = temp___711510;
  rec__dns_types__header_type__qdcount = temp___711511;
  rec__dns_types__header_type__ancount = temp___711512;
  rec__dns_types__header_type__nscount = temp___711513;
  rec__dns_types__header_type__arcount = temp___711514 } };
  rec__dns_types__dns_packet__bytes = temp___711515 }))) ->
  ((((((to_rep1(o21) = rliteral1) and ((((1 <= (current_byte1 + 4)) and
  ((current_byte1 + 4) <= 8180)) and (o22 = (current_byte1 + 4))) and
  (o23 = ((output_packet__split_fields17).rec__dns_types__dns_packet__bytes[o22 <- o21])))) and
  (((output_packet__split_fields17).rec__dns_types__dns_packet__header = {
  us_split_fields1 = { rec__dns_types__header_type__messageid = o24;
  rec__dns_types__header_type__qr = o25;
  rec__dns_types__header_type__opcode = o26;
  rec__dns_types__header_type__aa = o27; rec__dns_types__header_type__tc =
  o28; rec__dns_types__header_type__rd = o29;
  rec__dns_types__header_type__ra = o30; rec__dns_types__header_type__res1 =
  o31; rec__dns_types__header_type__res2 = o32;
  rec__dns_types__header_type__res3 = o33;
  rec__dns_types__header_type__rcode = o34;
  rec__dns_types__header_type__qdcount = o35;
  rec__dns_types__header_type__ancount = o36;
  rec__dns_types__header_type__nscount = o37;
  rec__dns_types__header_type__arcount = o38 } }) and (o23 = o39))) and
  (((temp___7119 = o24) and ((temp___71191 = o25) and
  ((temp___71192 = o26) and ((temp___71193 = o27) and
  ((temp___71194 = o28) and ((temp___71195 = o29) and
  ((temp___71196 = o30) and ((temp___71197 = o31) and
  ((temp___71198 = o32) and ((temp___71199 = o33) and
  ((temp___711910 = o34) and ((temp___711911 = o35) and
  ((temp___711912 = o36) and ((temp___711913 = o37) and
  (temp___711914 = o38))))))))))))))) and (temp___711915 = o39))) and
  ((result5 = { us_split_fields__content1 = output_packet__split_fields17
  }) and (output_packet__split_fields18 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = temp___7119;
  rec__dns_types__header_type__qr = temp___71191;
  rec__dns_types__header_type__opcode = temp___71192;
  rec__dns_types__header_type__aa = temp___71193;
  rec__dns_types__header_type__tc = temp___71194;
  rec__dns_types__header_type__rd = temp___71195;
  rec__dns_types__header_type__ra = temp___71196;
  rec__dns_types__header_type__res1 = temp___71197;
  rec__dns_types__header_type__res2 = temp___71198;
  rec__dns_types__header_type__res3 = temp___71199;
  rec__dns_types__header_type__rcode = temp___711910;
  rec__dns_types__header_type__qdcount = temp___711911;
  rec__dns_types__header_type__ancount = temp___711912;
  rec__dns_types__header_type__nscount = temp___711913;
  rec__dns_types__header_type__arcount = temp___711914 } };
  rec__dns_types__dns_packet__bytes = temp___711915 }))) ->
  ((((((to_rep1(o40) = rliteral) and ((((1 <= (current_byte1 + 5)) and
  ((current_byte1 + 5) <= 8180)) and (o41 = (current_byte1 + 5))) and
  (o42 = ((output_packet__split_fields18).rec__dns_types__dns_packet__bytes[o41 <- o40])))) and
  (((output_packet__split_fields18).rec__dns_types__dns_packet__header = {
  us_split_fields1 = { rec__dns_types__header_type__messageid = o43;
  rec__dns_types__header_type__qr = o44;
  rec__dns_types__header_type__opcode = o45;
  rec__dns_types__header_type__aa = o46; rec__dns_types__header_type__tc =
  o47; rec__dns_types__header_type__rd = o48;
  rec__dns_types__header_type__ra = o49; rec__dns_types__header_type__res1 =
  o50; rec__dns_types__header_type__res2 = o51;
  rec__dns_types__header_type__res3 = o52;
  rec__dns_types__header_type__rcode = o53;
  rec__dns_types__header_type__qdcount = o54;
  rec__dns_types__header_type__ancount = o55;
  rec__dns_types__header_type__nscount = o56;
  rec__dns_types__header_type__arcount = o57 } }) and (o42 = o58))) and
  (((temp___7123 = o43) and ((temp___71231 = o44) and
  ((temp___71232 = o45) and ((temp___71233 = o46) and
  ((temp___71234 = o47) and ((temp___71235 = o48) and
  ((temp___71236 = o49) and ((temp___71237 = o50) and
  ((temp___71238 = o51) and ((temp___71239 = o52) and
  ((temp___712310 = o53) and ((temp___712311 = o54) and
  ((temp___712312 = o55) and ((temp___712313 = o56) and
  (temp___712314 = o57))))))))))))))) and (temp___712315 = o58))) and
  ((result6 = { us_split_fields__content1 = output_packet__split_fields18
  }) and (output_packet__split_fields19 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = temp___7123;
  rec__dns_types__header_type__qr = temp___71231;
  rec__dns_types__header_type__opcode = temp___71232;
  rec__dns_types__header_type__aa = temp___71233;
  rec__dns_types__header_type__tc = temp___71234;
  rec__dns_types__header_type__rd = temp___71235;
  rec__dns_types__header_type__ra = temp___71236;
  rec__dns_types__header_type__res1 = temp___71237;
  rec__dns_types__header_type__res2 = temp___71238;
  rec__dns_types__header_type__res3 = temp___71239;
  rec__dns_types__header_type__rcode = temp___712310;
  rec__dns_types__header_type__qdcount = temp___712311;
  rec__dns_types__header_type__ancount = temp___712312;
  rec__dns_types__header_type__nscount = temp___712313;
  rec__dns_types__header_type__arcount = temp___712314 } };
  rec__dns_types__dns_packet__bytes = temp___712315 }))) ->
  ((((((to_rep1(o59) = rliteral2) and ((((1 <= (current_byte1 + 6)) and
  ((current_byte1 + 6) <= 8180)) and (o60 = (current_byte1 + 6))) and
  (o61 = ((output_packet__split_fields19).rec__dns_types__dns_packet__bytes[o60 <- o59])))) and
  (((output_packet__split_fields19).rec__dns_types__dns_packet__header = {
  us_split_fields1 = { rec__dns_types__header_type__messageid = o62;
  rec__dns_types__header_type__qr = o63;
  rec__dns_types__header_type__opcode = o64;
  rec__dns_types__header_type__aa = o65; rec__dns_types__header_type__tc =
  o66; rec__dns_types__header_type__rd = o67;
  rec__dns_types__header_type__ra = o68; rec__dns_types__header_type__res1 =
  o69; rec__dns_types__header_type__res2 = o70;
  rec__dns_types__header_type__res3 = o71;
  rec__dns_types__header_type__rcode = o72;
  rec__dns_types__header_type__qdcount = o73;
  rec__dns_types__header_type__ancount = o74;
  rec__dns_types__header_type__nscount = o75;
  rec__dns_types__header_type__arcount = o76 } }) and (o61 = o77))) and
  (((temp___7127 = o62) and ((temp___71271 = o63) and
  ((temp___71272 = o64) and ((temp___71273 = o65) and
  ((temp___71274 = o66) and ((temp___71275 = o67) and
  ((temp___71276 = o68) and ((temp___71277 = o69) and
  ((temp___71278 = o70) and ((temp___71279 = o71) and
  ((temp___712710 = o72) and ((temp___712711 = o73) and
  ((temp___712712 = o74) and ((temp___712713 = o75) and
  (temp___712714 = o76))))))))))))))) and (temp___712715 = o77))) and
  ((result7 = { us_split_fields__content1 = output_packet__split_fields19
  }) and (output_packet__split_fields20 = {
  rec__dns_types__dns_packet__header = { us_split_fields1 = {
  rec__dns_types__header_type__messageid = temp___7127;
  rec__dns_types__header_type__qr = temp___71271;
  rec__dns_types__header_type__opcode = temp___71272;
  rec__dns_types__header_type__aa = temp___71273;
  rec__dns_types__header_type__tc = temp___71274;
  rec__dns_types__header_type__rd = temp___71275;
  rec__dns_types__header_type__ra = temp___71276;
  rec__dns_types__header_type__res1 = temp___71277;
  rec__dns_types__header_type__res2 = temp___71278;
  rec__dns_types__header_type__res3 = temp___71279;
  rec__dns_types__header_type__rcode = temp___712710;
  rec__dns_types__header_type__qdcount = temp___712711;
  rec__dns_types__header_type__ancount = temp___712712;
  rec__dns_types__header_type__nscount = temp___712713;
  rec__dns_types__header_type__arcount = temp___712714 } };
  rec__dns_types__dns_packet__bytes = temp___712715 }))) ->
  in_range4((current_byte1 + 7)))))))))))))))))))
