(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(declare-sort unsigned_64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned_64 unsigned_64) Bool)
(declare-const dummy unsigned_64)
(declare-datatypes () ((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 (unsigned_64__content a))
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq1 (u64 u64) Bool)
(declare-const dummy1 u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant ((temp___expr_308 (_ BitVec 64)) (temp___is_init_305 Bool) (temp___skip_constant_306 Bool) (temp___do_toplevel_307 Bool)) Bool true)
(declare-fun to_rep (unsigned_64) (_ BitVec 64))
(declare-fun of_rep ((_ BitVec 64)) unsigned_64)
(assert (forall ((x unsigned_64)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int2 ((x unsigned_64)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned_64)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort word_count_t 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))
(define-fun in_range ((x (_ BitVec 64))) Bool (and (bvule ((_ int2bv 64) 0) x) (bvule x ((_ int2bv 64) 2305843009213693951))))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 2305843009213693951)))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))
(declare-fun user_eq2 (word_count_t word_count_t) Bool)
(declare-const dummy2 word_count_t)
(declare-datatypes () ((word_count_t__ref (mk_word_count_t__ref (word_count_t__content word_count_t)))))
(define-fun word_count_t__ref___projection ((a word_count_t__ref)) word_count_t (word_count_t__content a))
(declare-fun to_rep1 (u64) (_ BitVec 64))
(declare-fun of_rep1 ((_ BitVec 64)) u64)
(assert (forall ((x u64)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x u64)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x u64)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) u64))))))
(declare-fun slide ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) u64))
(assert (forall ((a (Array (_ BitVec 64) u64))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) u64))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) u64))
(assert (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (u64 (_ BitVec 64)) (Array (_ BitVec 64) u64))
(assert (forall ((v u64)) (forall ((i (_ BitVec 64))) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_133 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_133 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Int)
(assert (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 64)) (j (_ BitVec 64))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (bvult (to_rep1 (select a (bvadd i #x0000000000000001))) (to_rep1 (select b (bvadd j #x0000000000000001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 64)) (j (_ BitVec 64))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (bvugt (to_rep1 (select a (bvadd j #x0000000000000001))) (to_rep1 (select b (bvadd i #x0000000000000001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) unsigned_64)
(declare-fun last (t) unsigned_64)
(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)
(assert (forall ((f (_ BitVec 64)) (l (_ BitVec 64))) (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool (=> (bvule low high) (and (in_range low) (in_range high))))
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 64) u64)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) u64) (elts a))
(define-fun of_array ((a (Array (_ BitVec 64) u64)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 64) u64)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 64) u64)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 64) u64)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((u64_seq__ref (mk_u64_seq__ref (u64_seq__content us_t)))))
(define-fun u64_seq__ref___projection ((a u64_seq__ref)) us_t (u64_seq__content a))
(define-fun dynamic_invariant1 ((temp___expr_470 us_t) (temp___is_init_467 Bool) (temp___skip_constant_468 Bool) (temp___do_toplevel_469 Bool)) Bool (=> (not (= temp___skip_constant_468 true)) (dynamic_property ((_ int2bv 64) 0) ((_ int2bv 64) 2305843009213693951) (first1 temp___expr_470) (last1 temp___expr_470))))
(declare-const s us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const count (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_458 (_ BitVec 64)) (temp___is_init_455 Bool) (temp___skip_constant_456 Bool) (temp___do_toplevel_457 Bool)) Bool (=> (or (= temp___is_init_455 true) (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 2305843009213693951))) (in_range temp___expr_458)))
(define-fun dynamic_invariant3 ((temp___expr_266 (_ BitVec 64)) (temp___is_init_263 Bool) (temp___skip_constant_264 Bool) (temp___do_toplevel_265 Bool)) Bool true)
(declare-const o Int)
(assert (dynamic_invariant1 s true false true))
(assert true)
(assert (not (uint_in_range (length s))))
(check-sat)
(exit)
