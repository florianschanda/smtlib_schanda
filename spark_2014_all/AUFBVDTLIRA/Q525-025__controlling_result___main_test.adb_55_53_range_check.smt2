(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-sort long_integer 0)
(declare-fun long_integerqtint (long_integer) Int)
(assert (forall ((i long_integer)) (and (<= (- 9223372036854775808) (long_integerqtint i)) (<= (long_integerqtint i) 9223372036854775807))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (long_integer long_integer) Bool)
(declare-const dummy4 long_integer)
(declare-datatypes () ((long_integer__ref (mk_long_integer__ref (long_integer__content long_integer)))))
(define-fun long_integer__ref___projection ((a long_integer__ref)) long_integer (long_integer__content a))
(define-fun dynamic_invariant1 ((temp___expr_25 Int) (temp___is_init_21 Bool) (temp___skip_constant_22 Bool) (temp___do_toplevel_23 Bool) (temp___do_typ_inv_24 Bool)) Bool (=> (or (= temp___is_init_21 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range3 temp___expr_25)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (natural natural) Bool)
(declare-const dummy5 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (character Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a character)) (forall ((b (Array Int character))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int character) Int Int character) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((b character)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (character Int character) (Array Int character))
(assert (forall ((a character) (b character)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-const dummy6 (Array Int character))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int character)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq6 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__fixed_string__object__width natural) (rec__fixed_string__object__name (Array Int character)) (rec__ext__ us_private)))))
(define-fun us_split_fields_Width__projection ((a us_split_fields)) natural (rec__fixed_string__object__width a))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) (rec__fixed_string__object__name a))
(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__fixed_string__object__width (us_split_fields1 a))) (to_rep2 (rec__fixed_string__object__width (us_split_fields1 b)))) (= (bool_eq (rec__fixed_string__object__name (us_split_fields1 a)) 1 20 (rec__fixed_string__object__name (us_split_fields1 b)) 1 20) true)) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const fixed_string__object__width__first__bit Int)
(declare-const fixed_string__object__width__last__bit Int)
(declare-const fixed_string__object__width__position Int)
(assert (<= 0 fixed_string__object__width__first__bit))
(assert (< fixed_string__object__width__first__bit fixed_string__object__width__last__bit))
(assert (<= 0 fixed_string__object__width__position))
(declare-const fixed_string__object__name__first__bit Int)
(declare-const fixed_string__object__name__last__bit Int)
(declare-const fixed_string__object__name__position Int)
(assert (<= 0 fixed_string__object__name__first__bit))
(assert (< fixed_string__object__name__first__bit fixed_string__object__name__last__bit))
(assert (<= 0 fixed_string__object__name__position))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((object__ref (mk_object__ref (object__content us_rep)))))
(define-fun object__ref___projection ((a object__ref)) us_rep (object__content a))
(declare-fun elements (us_rep) Int)
(declare-fun elements__function_guard (Int us_rep) Bool)
(declare-fun elements1 (Int us_rep) Int)
(declare-fun elements__function_guard1 (Int Int us_rep) Bool)
(declare-fun temp_____aggregate_def_202 (Int) (Array Int character))
(define-fun default_initial_assumption ((temp___expr_200 us_rep) (temp___skip_top_level_201 Bool)) Bool (and (= (attr__tag temp___expr_200) us_tag) (and (= (to_rep2 (rec__fixed_string__object__width (us_split_fields1 temp___expr_200))) 0) (= (rec__fixed_string__object__name (us_split_fields1 temp___expr_200)) (temp_____aggregate_def_202 0)))))
(assert (forall ((this us_rep)) (! (dynamic_invariant2 (elements this) true false true true) :pattern ((elements this)))))
(assert (forall ((attr__tag1 Int)) (forall ((this us_rep)) (! (dynamic_invariant2 (elements1 attr__tag1 this) true false true true) :pattern ((elements1 attr__tag1 this))))))
(assert (forall ((this us_rep)) (! (= (elements this) (elements1 us_tag this)) :pattern ((elements1 us_tag this)))))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun create (Int us_t) us_rep)
(declare-fun create__function_guard (us_rep Int us_t) Bool)
(declare-fun create1 (Int Int us_t) us_rep)
(declare-fun create__function_guard1 (us_rep Int Int us_t) Bool)
(assert (forall ((elem_width Int)) (forall ((name us_t)) (! (=> (and (dynamic_invariant2 elem_width true true true true) (dynamic_invariant3 name true true true true)) (let ((result (create elem_width name))) (and (= (elements result) elem_width) (= (attr__tag result) us_tag)))) :pattern ((create elem_width name))))))
(assert (forall ((attr__tag1 Int) (elem_width Int)) (forall ((name us_t)) (! (=> (and (dynamic_invariant2 elem_width true true true true) (dynamic_invariant3 name true true true true)) (= (attr__tag (create1 attr__tag1 elem_width name)) attr__tag1)) :pattern ((create1 attr__tag1 elem_width name))))))
(assert (forall ((elem_width Int)) (forall ((name us_t)) (! (= (create elem_width name) (create1 us_tag elem_width name)) :pattern ((create1 us_tag elem_width name))))))
(declare-fun null_string (us_rep) us_t)
(declare-fun null_string__function_guard (us_t us_rep) Bool)
(declare-fun null_string1 (Int us_rep) us_t)
(declare-fun null_string__function_guard1 (us_t Int us_rep) Bool)
(assert (forall ((this us_rep)) (! (let ((result (null_string this))) (and (= (length result) (elements this)) (dynamic_invariant3 result true false true true))) :pattern ((null_string this)))))
(assert (forall ((attr__tag1 Int)) (forall ((this us_rep)) (! (dynamic_invariant3 (null_string1 attr__tag1 this) true false true true) :pattern ((null_string1 attr__tag1 this))))))
(assert (forall ((this us_rep)) (! (= (null_string this) (null_string1 us_tag this)) :pattern ((null_string1 us_tag this)))))
(declare-fun convert (us_rep us_t) us_t)
(declare-fun convert__function_guard (us_t us_rep us_t) Bool)
(declare-fun convert1 (Int us_rep us_t) us_t)
(declare-fun convert__function_guard1 (us_t Int us_rep us_t) Bool)
(assert (forall ((this us_rep)) (forall ((in_string us_t)) (! (=> (dynamic_invariant3 in_string true true true true) (let ((result (convert this in_string))) (and (= (length result) (elements this)) (dynamic_invariant3 result true false true true)))) :pattern ((convert this in_string))))))
(assert (forall ((attr__tag1 Int)) (forall ((this us_rep)) (forall ((in_string us_t)) (! (=> (dynamic_invariant3 in_string true true true true) (dynamic_invariant3 (convert1 attr__tag1 this in_string) true false true true)) :pattern ((convert1 attr__tag1 this in_string)))))))
(assert (forall ((this us_rep)) (forall ((in_string us_t)) (! (= (convert this in_string) (convert1 us_tag this in_string)) :pattern ((convert1 us_tag this in_string))))))
(declare-const dummy8 (Array Int character))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int character)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int character)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int character)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__fixed_stream__object__width natural) (rec__fixed_stream__object__name (Array Int character)) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Width__2__projection ((a us_split_fields2)) natural (rec__fixed_stream__object__width a))
(define-fun us_split_fields_Name__2__projection ((a us_split_fields2)) (Array Int character) (rec__fixed_stream__object__name a))
(define-fun us_split_fields___3__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep2 (rec__fixed_stream__object__width (us_split_fields3 a))) (to_rep2 (rec__fixed_stream__object__width (us_split_fields3 b)))) (= (bool_eq (rec__fixed_stream__object__name (us_split_fields3 a)) 1 20 (rec__fixed_stream__object__name (us_split_fields3 b)) 1 20) true)) true false))
(declare-fun us_dispatch_eq1 (us_rep1 us_rep1) Bool)
(declare-const us_tag1 Int)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const fixed_stream__object__width__first__bit Int)
(declare-const fixed_stream__object__width__last__bit Int)
(declare-const fixed_stream__object__width__position Int)
(assert (<= 0 fixed_stream__object__width__first__bit))
(assert (< fixed_stream__object__width__first__bit fixed_stream__object__width__last__bit))
(assert (<= 0 fixed_stream__object__width__position))
(declare-const fixed_stream__object__name__first__bit Int)
(declare-const fixed_stream__object__name__last__bit Int)
(declare-const fixed_stream__object__name__position Int)
(assert (<= 0 fixed_stream__object__name__first__bit))
(assert (< fixed_stream__object__name__first__bit fixed_stream__object__name__last__bit))
(assert (<= 0 fixed_stream__object__name__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((object__ref1 (mk_object__ref1 (object__content1 us_rep1)))))
(define-fun object__ref___2__projection ((a object__ref1)) us_rep1 (object__content1 a))
(declare-fun elements2 (us_rep1) Int)
(declare-fun elements__function_guard2 (Int us_rep1) Bool)
(declare-fun elements3 (Int us_rep1) Int)
(declare-fun elements__function_guard3 (Int Int us_rep1) Bool)
(declare-fun temp_____aggregate_def_231 (Int) (Array Int character))
(define-fun default_initial_assumption1 ((temp___expr_229 us_rep1) (temp___skip_top_level_230 Bool)) Bool (and (= (attr__tag1 temp___expr_229) us_tag1) (and (= (to_rep2 (rec__fixed_stream__object__width (us_split_fields3 temp___expr_229))) 0) (= (rec__fixed_stream__object__name (us_split_fields3 temp___expr_229)) (temp_____aggregate_def_231 0)))))
(assert (forall ((this us_rep1)) (! (dynamic_invariant2 (elements2 this) true false true true) :pattern ((elements2 this)))))
(assert (forall ((attr__tag2 Int)) (forall ((this us_rep1)) (! (dynamic_invariant2 (elements3 attr__tag2 this) true false true true) :pattern ((elements3 attr__tag2 this))))))
(assert (forall ((this us_rep1)) (! (= (elements2 this) (elements3 us_tag1 this)) :pattern ((elements3 us_tag1 this)))))
(declare-fun create2 (Int us_t) us_rep1)
(declare-fun create__function_guard2 (us_rep1 Int us_t) Bool)
(declare-fun create3 (Int Int us_t) us_rep1)
(declare-fun create__function_guard3 (us_rep1 Int Int us_t) Bool)
(assert (forall ((elem_width Int)) (forall ((name us_t)) (! (=> (and (dynamic_invariant2 elem_width true true true true) (dynamic_invariant3 name true true true true)) (let ((result (create2 elem_width name))) (and (= (elements2 result) elem_width) (= (attr__tag1 result) us_tag1)))) :pattern ((create2 elem_width name))))))
(assert (forall ((attr__tag2 Int) (elem_width Int)) (forall ((name us_t)) (! (=> (and (dynamic_invariant2 elem_width true true true true) (dynamic_invariant3 name true true true true)) (= (attr__tag1 (create3 attr__tag2 elem_width name)) attr__tag2)) :pattern ((create3 attr__tag2 elem_width name))))))
(assert (forall ((elem_width Int)) (forall ((name us_t)) (! (= (create2 elem_width name) (create3 us_tag1 elem_width name)) :pattern ((create3 us_tag1 elem_width name))))))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort stream_element 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq10 (stream_element stream_element) Bool)
(declare-const dummy10 stream_element)
(declare-datatypes () ((stream_element__ref (mk_stream_element__ref (stream_element__content stream_element)))))
(define-fun stream_element__ref___projection ((a stream_element__ref)) stream_element (stream_element__content a))
(declare-sort tstream_element_offsetB 0)
(declare-fun tstream_element_offsetBqtint (tstream_element_offsetB) Int)
(assert (forall ((i tstream_element_offsetB)) (and (<= (- 9223372036854775808) (tstream_element_offsetBqtint i)) (<= (tstream_element_offsetBqtint i) 9223372036854775807))))
(define-fun in_range5 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq11 (tstream_element_offsetB tstream_element_offsetB) Bool)
(declare-const dummy11 tstream_element_offsetB)
(declare-datatypes () ((tstream_element_offsetB__ref (mk_tstream_element_offsetB__ref (tstream_element_offsetB__content tstream_element_offsetB)))))
(define-fun tstream_element_offsetB__ref___projection ((a tstream_element_offsetB__ref)) tstream_element_offsetB (tstream_element_offsetB__content a))
(define-fun to_rep3 ((x tstream_element_offsetB)) Int (tstream_element_offsetBqtint x))
(declare-fun of_rep3 (Int) tstream_element_offsetB)
(assert (forall ((x tstream_element_offsetB)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x tstream_element_offsetB)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort stream_element_offset 0)
(declare-fun stream_element_offsetqtint (stream_element_offset) Int)
(assert (forall ((i stream_element_offset)) (and (<= (- 9223372036854775808) (stream_element_offsetqtint i)) (<= (stream_element_offsetqtint i) 9223372036854775807))))
(define-fun in_range6 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq12 (stream_element_offset stream_element_offset) Bool)
(declare-const dummy12 stream_element_offset)
(declare-datatypes () ((stream_element_offset__ref (mk_stream_element_offset__ref (stream_element_offset__content stream_element_offset)))))
(define-fun stream_element_offset__ref___projection ((a stream_element_offset__ref)) stream_element_offset (stream_element_offset__content a))
(declare-fun to_rep4 (stream_element) (_ BitVec 8))
(declare-fun of_rep4 ((_ BitVec 8)) stream_element)
(assert (forall ((x stream_element)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int2 ((x stream_element)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x stream_element)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int stream_element))))))
(declare-fun slide1 ((Array Int stream_element) Int Int) (Array Int stream_element))
(assert (forall ((a (Array Int stream_element))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int stream_element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int stream_element)) (a__first Int) (a__last Int) (b (Array Int stream_element)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep4 (select a temp___idx_154)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int stream_element)) (b (Array Int stream_element))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep4 (select a temp___idx_154)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t1 0)
(declare-fun first2 (t1) tstream_element_offsetB)
(declare-fun last2 (t1) tstream_element_offsetB)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range5 f) (=> (in_range5 l) (and (= (to_rep3 (first2 (mk1 f l))) f) (= (to_rep3 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range5 low) (and (in_range5 high) (=> (<= low high) (and (in_range6 low) (in_range6 high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int stream_element)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int stream_element) (elts1 a))
(define-fun of_array1 ((a (Array Int stream_element)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep3 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep3 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array Int stream_element)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int stream_element)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array Int stream_element)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array Int stream_element))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int stream_element))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array Int stream_element))) (<= 0 (object__alignment5 a))))
(define-fun bool_eq5 ((x us_t1) (y us_t1)) Bool (bool_eq4 (elts1 x) (to_rep3 (first2 (rt1 x))) (to_rep3 (last2 (rt1 x))) (elts1 y) (to_rep3 (first2 (rt1 y))) (to_rep3 (last2 (rt1 y)))))
(declare-fun user_eq13 (us_t1 us_t1) Bool)
(declare-const dummy13 us_t1)
(declare-datatypes () ((stream_element_array__ref (mk_stream_element_array__ref (stream_element_array__content us_t1)))))
(define-fun stream_element_array__ref___projection ((a stream_element_array__ref)) us_t1 (stream_element_array__content a))
(declare-fun null_string2 (us_rep1) us_t1)
(declare-fun null_string__function_guard2 (us_t1 us_rep1) Bool)
(declare-fun null_string3 (Int us_rep1) us_t1)
(declare-fun null_string__function_guard3 (us_t1 Int us_rep1) Bool)
(define-fun dynamic_invariant4 ((temp___expr_187 us_t1) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool (=> (not (= temp___skip_constant_184 true)) (dynamic_property1 (- 9223372036854775808) 9223372036854775807 (first3 temp___expr_187) (last3 temp___expr_187))))
(assert (forall ((this us_rep1)) (! (let ((result (null_string2 this))) (and (= (length1 result) (elements2 this)) (dynamic_invariant4 result true false true true))) :pattern ((null_string2 this)))))
(assert (forall ((attr__tag2 Int)) (forall ((this us_rep1)) (! (dynamic_invariant4 (null_string3 attr__tag2 this) true false true true) :pattern ((null_string3 attr__tag2 this))))))
(assert (forall ((this us_rep1)) (! (= (null_string2 this) (null_string3 us_tag1 this)) :pattern ((null_string3 us_tag1 this)))))
(declare-fun convert2 (us_rep1 us_t) us_t1)
(declare-fun convert__function_guard2 (us_t1 us_rep1 us_t) Bool)
(declare-fun convert3 (Int us_rep1 us_t) us_t1)
(declare-fun convert__function_guard3 (us_t1 Int us_rep1 us_t) Bool)
(assert (forall ((this us_rep1)) (forall ((in_string us_t)) (! (=> (dynamic_invariant3 in_string true true true true) (let ((result (convert2 this in_string))) (and (= (length1 result) (elements2 this)) (dynamic_invariant4 result true false true true)))) :pattern ((convert2 this in_string))))))
(assert (forall ((attr__tag2 Int)) (forall ((this us_rep1)) (forall ((in_string us_t)) (! (=> (dynamic_invariant3 in_string true true true true) (dynamic_invariant4 (convert3 attr__tag2 this in_string) true false true true)) :pattern ((convert3 attr__tag2 this in_string)))))))
(assert (forall ((this us_rep1)) (forall ((in_string us_t)) (! (= (convert2 this in_string) (convert3 us_tag1 this in_string)) :pattern ((convert3 us_tag1 this in_string))))))
(declare-fun concat2 ((Array Int stream_element) Int Int (Array Int stream_element) Int Int) (Array Int stream_element))
(assert (forall ((a (Array Int stream_element)) (b (Array Int stream_element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left1 (stream_element Int (Array Int stream_element) Int Int) (Array Int stream_element))
(assert (forall ((a stream_element)) (forall ((b (Array Int stream_element))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left1 a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left1 a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left1 a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left1 a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right1 ((Array Int stream_element) Int Int stream_element) (Array Int stream_element))
(assert (forall ((a (Array Int stream_element))) (forall ((b stream_element)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right1 a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right1 a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right1 a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right1 a a_first a_last b)))))))
(declare-fun concat_singletons1 (stream_element Int stream_element) (Array Int stream_element))
(assert (forall ((a stream_element) (b stream_element)) (forall ((a_first Int)) (! (and (= (select (concat_singletons1 a a_first b) a_first) a) (= (select (concat_singletons1 a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons1 a a_first b))))))
(declare-fun singleton2 (stream_element Int) (Array Int stream_element))
(assert (forall ((v stream_element)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(declare-const field_10__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const field_06__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const stream_10__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const stream_06__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const ref_string__first integer)
(declare-const ref_string__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const short_string__first integer)
(declare-const short_string__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const total_string__first integer)
(declare-const total_string__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const total_stream__first tstream_element_offsetB)
(declare-const total_stream__last tstream_element_offsetB)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-fun temp___String_Literal_296 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (= (to_rep (select (temp___String_Literal_296 us_void_param) 1)) 76) (= (to_rep (select (temp___String_Literal_296 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_296 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_296 us_void_param) 4)) 103)) :pattern ((temp___String_Literal_296 us_void_param)))))
(declare-fun temp___String_Literal_297 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_297 us_void_param) 1)) 83) (= (to_rep (select (temp___String_Literal_297 us_void_param) 2)) 104)) (= (to_rep (select (temp___String_Literal_297 us_void_param) 3)) 111)) (= (to_rep (select (temp___String_Literal_297 us_void_param) 4)) 114)) (= (to_rep (select (temp___String_Literal_297 us_void_param) 5)) 116)) :pattern ((temp___String_Literal_297 us_void_param)))))
(declare-fun temp___String_Literal_298 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (= (to_rep (select (temp___String_Literal_298 us_void_param) 1)) 76) (= (to_rep (select (temp___String_Literal_298 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_298 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_298 us_void_param) 4)) 103)) :pattern ((temp___String_Literal_298 us_void_param)))))
(declare-fun temp___String_Literal_299 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_299 us_void_param) 1)) 83) (= (to_rep (select (temp___String_Literal_299 us_void_param) 2)) 104)) (= (to_rep (select (temp___String_Literal_299 us_void_param) 3)) 111)) (= (to_rep (select (temp___String_Literal_299 us_void_param) 4)) 114)) (= (to_rep (select (temp___String_Literal_299 us_void_param) 5)) 116)) :pattern ((temp___String_Literal_299 us_void_param)))))
(declare-fun temp___String_Literal_300 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_300 us_void_param) 1)) 97) (= (to_rep (select (temp___String_Literal_300 us_void_param) 2)) 98)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 3)) 99)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 4)) 100)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 6)) 102)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 7)) 103)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 8)) 104)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 9)) 105)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 10)) 106)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 11)) 107)) (= (to_rep (select (temp___String_Literal_300 us_void_param) 12)) 108)) :pattern ((temp___String_Literal_300 us_void_param)))))
(declare-fun temp___String_Literal_302 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (= (to_rep (select (temp___String_Literal_302 us_void_param) 1)) 102) (= (to_rep (select (temp___String_Literal_302 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_302 us_void_param) 3)) 111)) :pattern ((temp___String_Literal_302 us_void_param)))))
(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant7 ((temp___expr_166 (_ BitVec 8)) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool true)
(define-fun dynamic_invariant8 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range6 temp___expr_173)))
(assert (forall ((temp___204 Int)) (=> (dynamic_invariant6 temp___204 true true true true) (forall ((temp___205 Int)) (= (to_rep (select (temp_____aggregate_def_202 temp___204) temp___205)) temp___204)))))
(assert (forall ((temp___233 Int)) (=> (dynamic_invariant6 temp___233 true true true true) (forall ((temp___234 Int)) (= (to_rep (select (temp_____aggregate_def_231 temp___233) temp___234)) temp___233)))))
(declare-const field_10__split_fields natural)
(declare-const field_10__split_fields1 (Array Int character))
(declare-const field_10__split_fields2 us_private)
(declare-const field_06__split_fields natural)
(declare-const field_06__split_fields1 (Array Int character))
(declare-const field_06__split_fields2 us_private)
(declare-const stream_10__split_fields natural)
(declare-const stream_10__split_fields1 (Array Int character))
(declare-const stream_10__split_fields2 us_private)
(declare-const stream_06__split_fields natural)
(declare-const stream_06__split_fields1 (Array Int character))
(declare-const stream_06__split_fields2 us_private)
(declare-const ref_string (Array Int character))
(declare-const short_string (Array Int character))
(declare-const len_n Int)
(declare-const len_i Int)
(declare-const len_l Int)
(declare-const total_len Int)
(declare-const total_string (Array Int character))
(declare-const total_stream (Array Int stream_element))
(declare-const main_test__field_10__assume natural)
(declare-const main_test__field_10__assume1 (Array Int character))
(declare-const main_test__field_10__assume2 us_private)
(declare-const main_test__field_10__assume3 Int)
(declare-const main_test__field_06__assume natural)
(declare-const main_test__field_06__assume1 (Array Int character))
(declare-const main_test__field_06__assume2 us_private)
(declare-const main_test__field_06__assume3 Int)
(declare-const main_test__stream_10__assume natural)
(declare-const main_test__stream_10__assume1 (Array Int character))
(declare-const main_test__stream_10__assume2 us_private)
(declare-const main_test__stream_10__assume3 Int)
(declare-const main_test__stream_06__assume us_rep1)
(declare-const temp___305 us_t)
(declare-const temp___304 us_t)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const main_test__total_string__assume us_t)
(declare-const temp___308 us_t1)
(declare-const temp___307 us_t1)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const main_test__total_stream__assume us_t1)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const temp___311 us_t)
(declare-const temp___310 us_t)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 Int)
(declare-const o32 Int)
(declare-const temp___312 us_t)
(declare-const o33 us_t)
(declare-const o34 (Array Int character))
(declare-const o35 Int)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const o38 Int)
(declare-const temp___314 us_t1)
(declare-const temp___313 us_t1)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 Int)
(declare-const result us_split_fields__ref)
(declare-const field_10__split_fields3 us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const field_06__split_fields3 us_split_fields)
(declare-const result2 us_split_fields__ref1)
(declare-const stream_10__split_fields3 us_split_fields2)
(declare-const result3 us_split_fields__ref1)
(declare-const stream_06__split_fields3 us_split_fields2)
(declare-const result4 map__ref)
(declare-const ref_string1 (Array Int character))
(declare-const result5 map__ref)
(declare-const short_string1 (Array Int character))
(declare-const result6 map__ref)
(declare-const total_string1 (Array Int character))
(declare-const result7 map__ref1)
(declare-const total_stream1 (Array Int stream_element))
(declare-const result8 int__ref)
(declare-const len_n1 Int)
(declare-const result9 int__ref)
(declare-const len_i1 Int)
(declare-const result10 int__ref)
(declare-const len_l1 Int)
(declare-const result11 int__ref)
(declare-const len_n2 Int)
(declare-const result12 int__ref)
(declare-const len_i2 Int)
(declare-const result13 int__ref)
(declare-const len_l2 Int)
(declare-const result14 int__ref)
(declare-const total_len1 Int)
(declare-const result15 map__ref)
(declare-const total_string2 (Array Int character))
(declare-const result16 int__ref)
(declare-const total_len2 Int)
(define-fun main_test__stream_10__assume4 () us_rep1 (mk___rep1 (mk___split_fields1 main_test__stream_10__assume main_test__stream_10__assume1 main_test__stream_10__assume2) main_test__stream_10__assume3))
(define-fun main_test__field_06__assume4 () us_rep (mk___rep (mk___split_fields main_test__field_06__assume main_test__field_06__assume1 main_test__field_06__assume2) main_test__field_06__assume3))
(define-fun main_test__field_10__assume4 () us_rep (mk___rep (mk___split_fields main_test__field_10__assume main_test__field_10__assume1 main_test__field_10__assume2) main_test__field_10__assume3))
(assert (and (= main_test__field_10__assume4 (create 10 (mk___t (temp___String_Literal_296 Tuple0) (mk 1 4)))) (= (elements main_test__field_10__assume4) 10)))
(assert (= result (mk___split_fields__ref (mk___split_fields field_10__split_fields field_10__split_fields1 field_10__split_fields2))))
(assert (= field_10__split_fields3 (mk___split_fields main_test__field_10__assume main_test__field_10__assume1 main_test__field_10__assume2)))
(assert (= field_10__attr__tag us_tag))
(assert (and (= main_test__field_06__assume4 (create 6 (mk___t (temp___String_Literal_297 Tuple0) (mk 1 5)))) (= (elements main_test__field_06__assume4) 6)))
(assert (= result1 (mk___split_fields__ref (mk___split_fields field_06__split_fields field_06__split_fields1 field_06__split_fields2))))
(assert (= field_06__split_fields3 (mk___split_fields main_test__field_06__assume main_test__field_06__assume1 main_test__field_06__assume2)))
(assert (= field_06__attr__tag us_tag))
(assert (and (= main_test__stream_10__assume4 (create2 10 (mk___t (temp___String_Literal_298 Tuple0) (mk 1 4)))) (= (elements2 main_test__stream_10__assume4) 10)))
(assert (= result2 (mk___split_fields__ref1 (mk___split_fields1 stream_10__split_fields stream_10__split_fields1 stream_10__split_fields2))))
(assert (= stream_10__split_fields3 (mk___split_fields1 main_test__stream_10__assume main_test__stream_10__assume1 main_test__stream_10__assume2)))
(assert (= stream_10__attr__tag us_tag1))
(assert (and (= main_test__stream_06__assume (create2 6 (mk___t (temp___String_Literal_299 Tuple0) (mk 1 5)))) (= (elements2 main_test__stream_06__assume) 6)))
(assert (= result3 (mk___split_fields__ref1 (mk___split_fields1 stream_06__split_fields stream_06__split_fields1 stream_06__split_fields2))))
(assert (= stream_06__split_fields3 (us_split_fields3 main_test__stream_06__assume)))
(assert (= stream_06__attr__tag us_tag1))
(assert (= result4 (mk_map__ref ref_string)))
(assert (= ref_string1 (temp___String_Literal_300 Tuple0)))
(assert (= (to_rep1 ref_string__first) (to_rep1 (first (mk 1 12)))))
(assert (= (to_rep1 ref_string__last) (to_rep1 (last (mk 1 12)))))
(assert (dynamic_property 1 2147483647 (to_rep1 ref_string__first) (to_rep1 ref_string__last)))
(assert (= result5 (mk_map__ref short_string)))
(assert (= short_string1 (temp___String_Literal_302 Tuple0)))
(assert (= (to_rep1 short_string__first) (to_rep1 (first (mk 1 3)))))
(assert (= (to_rep1 short_string__last) (to_rep1 (last (mk 1 3)))))
(assert (dynamic_property 1 2147483647 (to_rep1 short_string__first) (to_rep1 short_string__last)))
(assert (=> (<= 0 2147483647) (in_range4 len_n)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range len_i)))
(assert (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range3 len_l)))
(assert (=> (<= 0 2147483647) (in_range4 total_len)))
(assert (and (= temp___305 (null_string (mk___rep field_06__split_fields3 field_06__attr__tag))) (and (dynamic_invariant3 temp___305 true false true true) (= (length temp___305) (elements (mk___rep field_06__split_fields3 field_06__attr__tag))))))
(assert (and (= temp___304 (null_string (mk___rep field_10__split_fields3 field_10__attr__tag))) (and (dynamic_invariant3 temp___304 true false true true) (= (length temp___304) (elements (mk___rep field_10__split_fields3 field_10__attr__tag))))))
(assert (=> (= (length temp___304) 0) (= main_test__total_string__assume (mk___t (elts temp___305) (mk (to_rep1 (first (rt temp___305))) (to_rep1 (last (rt temp___305))))))))
(assert (=> (not (= (length temp___304) 0)) (=> (<= (to_rep1 (first (rt temp___305))) (to_rep1 (last (rt temp___305)))) (= o (+ (- (to_rep1 (last (rt temp___305))) (to_rep1 (first (rt temp___305)))) 1)))))
(assert (=> (not (= (length temp___304) 0)) (=> (not (<= (to_rep1 (first (rt temp___305))) (to_rep1 (last (rt temp___305))))) (= o 0))))
(assert (=> (not (= (length temp___304) 0)) (=> (<= (to_rep1 (first (rt temp___304))) (to_rep1 (last (rt temp___304)))) (= o1 (+ (- (to_rep1 (last (rt temp___304))) (to_rep1 (first (rt temp___304)))) 1)))))
(assert (=> (not (= (length temp___304) 0)) (=> (not (<= (to_rep1 (first (rt temp___304))) (to_rep1 (last (rt temp___304))))) (= o1 0))))
(assert (=> (not (= (length temp___304) 0)) (= o2 (+ o1 o))))
(assert (=> (not (= (length temp___304) 0)) (= o3 (+ (to_rep1 (first (rt temp___304))) o2))))
(assert (=> (not (= (length temp___304) 0)) (= o4 (- o3 1))))
(assert (=> (not (= (length temp___304) 0)) (and (= o5 o4) (in_range1 o4))))
(assert (=> (not (= (length temp___304) 0)) (= main_test__total_string__assume (mk___t (concat1 (elts temp___304) (to_rep1 (first (rt temp___304))) (to_rep1 (last (rt temp___304))) (elts temp___305) (to_rep1 (first (rt temp___305))) (to_rep1 (last (rt temp___305)))) (mk (to_rep1 (first (rt temp___304))) o5)))))
(assert (= result6 (mk_map__ref total_string)))
(assert (= total_string1 (elts main_test__total_string__assume)))
(assert (= (to_rep1 total_string__first) (to_rep1 (first (rt main_test__total_string__assume)))))
(assert (= (to_rep1 total_string__last) (to_rep1 (last (rt main_test__total_string__assume)))))
(assert (dynamic_property 1 2147483647 (to_rep1 total_string__first) (to_rep1 total_string__last)))
(assert (and (= temp___308 (null_string2 (mk___rep1 stream_06__split_fields3 stream_06__attr__tag))) (and (dynamic_invariant4 temp___308 true false true true) (= (length1 temp___308) (elements2 (mk___rep1 stream_06__split_fields3 stream_06__attr__tag))))))
(assert (and (= temp___307 (null_string2 (mk___rep1 stream_10__split_fields3 stream_10__attr__tag))) (and (dynamic_invariant4 temp___307 true false true true) (= (length1 temp___307) (elements2 (mk___rep1 stream_10__split_fields3 stream_10__attr__tag))))))
(assert (=> (= (length1 temp___307) 0) (= main_test__total_stream__assume (mk___t1 (elts1 temp___308) (mk1 (to_rep3 (first2 (rt1 temp___308))) (to_rep3 (last2 (rt1 temp___308))))))))
(assert (=> (not (= (length1 temp___307) 0)) (=> (<= (to_rep3 (first2 (rt1 temp___308))) (to_rep3 (last2 (rt1 temp___308)))) (= o6 (+ (- (to_rep3 (last2 (rt1 temp___308))) (to_rep3 (first2 (rt1 temp___308)))) 1)))))
(assert (=> (not (= (length1 temp___307) 0)) (=> (not (<= (to_rep3 (first2 (rt1 temp___308))) (to_rep3 (last2 (rt1 temp___308))))) (= o6 0))))
(assert (=> (not (= (length1 temp___307) 0)) (=> (<= (to_rep3 (first2 (rt1 temp___307))) (to_rep3 (last2 (rt1 temp___307)))) (= o7 (+ (- (to_rep3 (last2 (rt1 temp___307))) (to_rep3 (first2 (rt1 temp___307)))) 1)))))
(assert (=> (not (= (length1 temp___307) 0)) (=> (not (<= (to_rep3 (first2 (rt1 temp___307))) (to_rep3 (last2 (rt1 temp___307))))) (= o7 0))))
(assert (=> (not (= (length1 temp___307) 0)) (= o8 (+ o7 o6))))
(assert (=> (not (= (length1 temp___307) 0)) (= o9 (+ (to_rep3 (first2 (rt1 temp___307))) o8))))
(assert (=> (not (= (length1 temp___307) 0)) (= o10 (- o9 1))))
(assert (=> (not (= (length1 temp___307) 0)) (and (= o11 o10) (in_range6 o10))))
(assert (=> (not (= (length1 temp___307) 0)) (= main_test__total_stream__assume (mk___t1 (concat2 (elts1 temp___307) (to_rep3 (first2 (rt1 temp___307))) (to_rep3 (last2 (rt1 temp___307))) (elts1 temp___308) (to_rep3 (first2 (rt1 temp___308))) (to_rep3 (last2 (rt1 temp___308)))) (mk1 (to_rep3 (first2 (rt1 temp___307))) o11)))))
(assert (= result7 (mk_map__ref1 total_stream)))
(assert (= total_stream1 (elts1 main_test__total_stream__assume)))
(assert (= (to_rep3 total_stream__first) (to_rep3 (first2 (rt1 main_test__total_stream__assume)))))
(assert (= (to_rep3 total_stream__last) (to_rep3 (last2 (rt1 main_test__total_stream__assume)))))
(assert (dynamic_property1 (- 9223372036854775808) 9223372036854775807 (to_rep3 total_stream__first) (to_rep3 total_stream__last)))
(assert (= (elements (mk___rep field_10__split_fields3 field_10__attr__tag)) 10))
(assert (= (elements (mk___rep field_06__split_fields3 field_06__attr__tag)) 6))
(assert (=> (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last)) (= o12 (+ (- (to_rep3 total_stream__last) (to_rep3 total_stream__first)) 1))))
(assert (=> (not (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last))) (= o12 0)))
(assert (and (= o13 o12) (in_range4 o12)))
(assert (= result8 (mk_int__ref len_n)))
(assert (= len_n1 o13))
(assert (=> (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last)) (= o14 (+ (- (to_rep3 total_stream__last) (to_rep3 total_stream__first)) 1))))
(assert (=> (not (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last))) (= o14 0)))
(assert (and (= o15 o14) (in_range o14)))
(assert (= result9 (mk_int__ref len_i)))
(assert (= len_i1 o15))
(assert (=> (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last)) (= o16 (+ (- (to_rep3 total_stream__last) (to_rep3 total_stream__first)) 1))))
(assert (=> (not (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last))) (= o16 0)))
(assert (and (= o17 o16) (in_range3 o16)))
(assert (= result10 (mk_int__ref len_l)))
(assert (= len_l1 o17))
(assert (=> (<= (to_rep1 total_string__first) (to_rep1 total_string__last)) (= o18 (+ (- (to_rep1 total_string__last) (to_rep1 total_string__first)) 1))))
(assert (=> (not (<= (to_rep1 total_string__first) (to_rep1 total_string__last))) (= o18 0)))
(assert (and (= o19 o18) (in_range4 o18)))
(assert (= result11 (mk_int__ref len_n1)))
(assert (= len_n2 o19))
(assert (=> (<= (to_rep1 total_string__first) (to_rep1 total_string__last)) (= o20 (+ (- (to_rep1 total_string__last) (to_rep1 total_string__first)) 1))))
(assert (=> (not (<= (to_rep1 total_string__first) (to_rep1 total_string__last))) (= o20 0)))
(assert (and (= o21 o20) (in_range o20)))
(assert (= result12 (mk_int__ref len_i1)))
(assert (= len_i2 o21))
(assert (=> (<= (to_rep1 total_string__first) (to_rep1 total_string__last)) (= o22 (+ (- (to_rep1 total_string__last) (to_rep1 total_string__first)) 1))))
(assert (=> (not (<= (to_rep1 total_string__first) (to_rep1 total_string__last))) (= o22 0)))
(assert (= result13 (mk_int__ref len_l1)))
(assert (= len_l2 o22))
(assert (and (= o23 (elements (mk___rep field_06__split_fields3 field_06__attr__tag))) (in_range4 o23)))
(assert (and (= o24 (elements (mk___rep field_10__split_fields3 field_10__attr__tag))) (in_range4 o24)))
(assert (= o25 (+ o24 o23)))
(assert (and (= o26 o25) (in_range o25)))
(assert (= result14 (mk_int__ref total_len)))
(assert (= total_len1 o26))
(assert (and (= temp___311 (convert (mk___rep field_06__split_fields3 field_06__attr__tag) (mk___t short_string1 (mk (to_rep1 short_string__first) (to_rep1 short_string__last))))) (and (dynamic_invariant3 temp___311 true false true true) (= (length temp___311) (elements (mk___rep field_06__split_fields3 field_06__attr__tag))))))
(assert (and (= temp___310 (convert (mk___rep field_10__split_fields3 field_10__attr__tag) (mk___t ref_string1 (mk (to_rep1 ref_string__first) (to_rep1 ref_string__last))))) (and (dynamic_invariant3 temp___310 true false true true) (= (length temp___310) (elements (mk___rep field_10__split_fields3 field_10__attr__tag))))))
(assert (=> (= (length temp___310) 0) (= temp___312 (mk___t (elts temp___311) (mk (to_rep1 (first (rt temp___311))) (to_rep1 (last (rt temp___311))))))))
(assert (=> (not (= (length temp___310) 0)) (=> (<= (to_rep1 (first (rt temp___311))) (to_rep1 (last (rt temp___311)))) (= o27 (+ (- (to_rep1 (last (rt temp___311))) (to_rep1 (first (rt temp___311)))) 1)))))
(assert (=> (not (= (length temp___310) 0)) (=> (not (<= (to_rep1 (first (rt temp___311))) (to_rep1 (last (rt temp___311))))) (= o27 0))))
(assert (=> (not (= (length temp___310) 0)) (=> (<= (to_rep1 (first (rt temp___310))) (to_rep1 (last (rt temp___310)))) (= o28 (+ (- (to_rep1 (last (rt temp___310))) (to_rep1 (first (rt temp___310)))) 1)))))
(assert (=> (not (= (length temp___310) 0)) (=> (not (<= (to_rep1 (first (rt temp___310))) (to_rep1 (last (rt temp___310))))) (= o28 0))))
(assert (=> (not (= (length temp___310) 0)) (= o29 (+ o28 o27))))
(assert (=> (not (= (length temp___310) 0)) (= o30 (+ (to_rep1 (first (rt temp___310))) o29))))
(assert (=> (not (= (length temp___310) 0)) (= o31 (- o30 1))))
(assert (=> (not (= (length temp___310) 0)) (and (= o32 o31) (in_range1 o31))))
(assert (=> (not (= (length temp___310) 0)) (= temp___312 (mk___t (concat1 (elts temp___310) (to_rep1 (first (rt temp___310))) (to_rep1 (last (rt temp___310))) (elts temp___311) (to_rep1 (first (rt temp___311))) (to_rep1 (last (rt temp___311)))) (mk (to_rep1 (first (rt temp___310))) o32)))))
(assert (= (ite (<= (to_rep1 (first (rt temp___312))) (to_rep1 (last (rt temp___312)))) (+ (- (to_rep1 (last (rt temp___312))) (to_rep1 (first (rt temp___312)))) 1) 0) (ite (<= (to_rep1 total_string__first) (to_rep1 total_string__last)) (+ (- (to_rep1 total_string__last) (to_rep1 total_string__first)) 1) 0)))
(assert (= o33 temp___312))
(assert (= o34 (elts o33)))
(assert (= result15 (mk_map__ref total_string1)))
(assert (= total_string2 o34))
(assert (= (ite (<= (to_rep1 total_string__first) (to_rep1 total_string__last)) (+ (- (to_rep1 total_string__last) (to_rep1 total_string__first)) 1) 0) total_len1))
(assert (and (= o35 (elements2 (mk___rep1 stream_06__split_fields3 stream_06__attr__tag))) (in_range4 o35)))
(assert (and (= o36 (elements2 (mk___rep1 stream_10__split_fields3 stream_10__attr__tag))) (in_range4 o36)))
(assert (= o37 (+ o36 o35)))
(assert (and (= o38 o37) (in_range o37)))
(assert (= result16 (mk_int__ref total_len1)))
(assert (= total_len2 o38))
(assert (and (= temp___314 (convert2 (mk___rep1 stream_06__split_fields3 stream_06__attr__tag) (mk___t short_string1 (mk (to_rep1 short_string__first) (to_rep1 short_string__last))))) (and (dynamic_invariant4 temp___314 true false true true) (= (length1 temp___314) (elements2 (mk___rep1 stream_06__split_fields3 stream_06__attr__tag))))))
(assert (and (= temp___313 (convert2 (mk___rep1 stream_10__split_fields3 stream_10__attr__tag) (mk___t ref_string1 (mk (to_rep1 ref_string__first) (to_rep1 ref_string__last))))) (and (dynamic_invariant4 temp___313 true false true true) (= (length1 temp___313) (elements2 (mk___rep1 stream_10__split_fields3 stream_10__attr__tag))))))
(assert (not (= (length1 temp___313) 0)))
(assert (=> (<= (to_rep3 (first2 (rt1 temp___314))) (to_rep3 (last2 (rt1 temp___314)))) (= o39 (+ (- (to_rep3 (last2 (rt1 temp___314))) (to_rep3 (first2 (rt1 temp___314)))) 1))))
(assert (=> (not (<= (to_rep3 (first2 (rt1 temp___314))) (to_rep3 (last2 (rt1 temp___314))))) (= o39 0)))
(assert (=> (<= (to_rep3 (first2 (rt1 temp___313))) (to_rep3 (last2 (rt1 temp___313)))) (= o40 (+ (- (to_rep3 (last2 (rt1 temp___313))) (to_rep3 (first2 (rt1 temp___313)))) 1))))
(assert (=> (not (<= (to_rep3 (first2 (rt1 temp___313))) (to_rep3 (last2 (rt1 temp___313))))) (= o40 0)))
(assert (= o41 (+ o40 o39)))
(assert (= o42 (+ (to_rep3 (first2 (rt1 temp___313))) o41)))
(assert (= o43 (- o42 1)))
(assert (not (in_range6 o43)))
(check-sat)
(exit)
