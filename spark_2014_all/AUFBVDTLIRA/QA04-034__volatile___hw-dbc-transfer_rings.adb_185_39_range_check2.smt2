(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-sort word64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))
(declare-fun user_eq1 (word64 word64) Bool)
(declare-const dummy1 word64)
(declare-datatypes () ((word64__ref (mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content a))
(define-fun dynamic_invariant1 ((temp___expr_414 (_ BitVec 64)) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool true)
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort word32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (word32 word32) Bool)
(declare-const dummy2 word32)
(declare-datatypes () ((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content a))
(declare-fun to_rep (word32) (_ BitVec 32))
(declare-fun of_rep ((_ BitVec 32)) word32)
(assert (forall ((x word32)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int4 ((x word32)) Int (bv2nat (to_rep x)))
(assert (forall ((x word32)) (! (uint_in_range2 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-fun to_rep1 (word64) (_ BitVec 64))
(declare-fun of_rep1 ((_ BitVec 64)) word64)
(assert (forall ((x word64)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int5 ((x word64)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x word64)) (! (uint_in_range1 (to_int5 x)) :pattern ((to_int5 x)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__hw__dbc__trbs__t__parameter word64) (rec__hw__dbc__trbs__t__status word32) (rec__hw__dbc__trbs__t__control word32)))))
(define-fun us_split_fields_Parameter__projection ((a us_split_fields)) word64 (rec__hw__dbc__trbs__t__parameter a))
(define-fun us_split_fields_Status__projection ((a us_split_fields)) word32 (rec__hw__dbc__trbs__t__status a))
(define-fun us_split_fields_Control__projection ((a us_split_fields)) word32 (rec__hw__dbc__trbs__t__control a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___6__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__hw__dbc__trbs__t__parameter (us_split_fields1 a))) (to_rep1 (rec__hw__dbc__trbs__t__parameter (us_split_fields1 b)))) (= (to_rep (rec__hw__dbc__trbs__t__status (us_split_fields1 a))) (to_rep (rec__hw__dbc__trbs__t__status (us_split_fields1 b))))) (= (to_rep (rec__hw__dbc__trbs__t__control (us_split_fields1 a))) (to_rep (rec__hw__dbc__trbs__t__control (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const hw__dbc__trbs__t__parameter__first__bit Int)
(declare-const hw__dbc__trbs__t__parameter__last__bit Int)
(declare-const hw__dbc__trbs__t__parameter__position Int)
(assert (<= 0 hw__dbc__trbs__t__parameter__first__bit))
(assert (< hw__dbc__trbs__t__parameter__first__bit hw__dbc__trbs__t__parameter__last__bit))
(assert (<= 0 hw__dbc__trbs__t__parameter__position))
(declare-const hw__dbc__trbs__t__status__first__bit Int)
(declare-const hw__dbc__trbs__t__status__last__bit Int)
(declare-const hw__dbc__trbs__t__status__position Int)
(assert (<= 0 hw__dbc__trbs__t__status__first__bit))
(assert (< hw__dbc__trbs__t__status__first__bit hw__dbc__trbs__t__status__last__bit))
(assert (<= 0 hw__dbc__trbs__t__status__position))
(declare-const hw__dbc__trbs__t__control__first__bit Int)
(declare-const hw__dbc__trbs__t__control__last__bit Int)
(declare-const hw__dbc__trbs__t__control__position Int)
(assert (<= 0 hw__dbc__trbs__t__control__first__bit))
(assert (< hw__dbc__trbs__t__control__first__bit hw__dbc__trbs__t__control__last__bit))
(assert (<= 0 hw__dbc__trbs__t__control__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 us_rep)))))
(define-fun t__ref___6__projection ((a t__ref3)) us_rep (t__content3 a))
(declare-fun physical (Int) (_ BitVec 64))
(declare-fun physical__function_guard ((_ BitVec 64) Int) Bool)
(declare-sort endpoint_range 0)
(declare-fun endpoint_rangeqtint (endpoint_range) Int)
(assert (forall ((i endpoint_range)) (and (<= 2 (endpoint_rangeqtint i)) (<= (endpoint_rangeqtint i) 3))))
(define-fun in_range2 ((x Int)) Bool (and (<= 2 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (endpoint_range endpoint_range) Bool)
(declare-const dummy4 endpoint_range)
(declare-datatypes () ((endpoint_range__ref (mk_endpoint_range__ref (endpoint_range__content endpoint_range)))))
(define-fun endpoint_range__ref___projection ((a endpoint_range__ref)) endpoint_range (endpoint_range__content a))
(define-fun dynamic_invariant2 ((temp___expr_586 Int) (temp___is_init_582 Bool) (temp___skip_constant_583 Bool) (temp___do_toplevel_584 Bool) (temp___do_typ_inv_585 Bool)) Bool (=> (or (= temp___is_init_582 true) (<= 2 3)) (in_range2 temp___expr_586)))
(assert (forall ((ep Int)) (! (=> (dynamic_invariant2 ep true true true true) (dynamic_invariant1 (physical ep) true false true true)) :pattern ((physical ep)))))
(declare-sort error 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 19)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (error error) Bool)
(declare-const dummy5 error)
(declare-datatypes () ((error__ref (mk_error__ref (error__content error)))))
(define-fun error__ref___projection ((a error__ref)) error (error__content a))
(define-fun dynamic_invariant3 ((temp___expr_579 Int) (temp___is_init_575 Bool) (temp___skip_constant_576 Bool) (temp___do_toplevel_577 Bool) (temp___do_typ_inv_578 Bool)) Bool (=> (or (= temp___is_init_575 true) (<= 0 19)) (in_range3 temp___expr_579)))
(declare-sort ring_range 0)
(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x3F)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 63)))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (ring_range ring_range) Bool)
(declare-const dummy6 ring_range)
(declare-datatypes () ((ring_range__ref (mk_ring_range__ref (ring_range__content ring_range)))))
(define-fun ring_range__ref___projection ((a ring_range__ref)) ring_range (ring_range__content a))
(define-fun dynamic_invariant4 ((temp___expr_863 (_ BitVec 8)) (temp___is_init_859 Bool) (temp___skip_constant_860 Bool) (temp___do_toplevel_861 Bool) (temp___do_typ_inv_862 Bool)) Bool (=> (or (= temp___is_init_859 true) (bvule #x00 #x3F)) (in_range4 temp___expr_863)))
(declare-fun to_rep2 (ring_range) (_ BitVec 8))
(declare-fun of_rep2 ((_ BitVec 8)) ring_range)
(assert (forall ((x ring_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x ring_range)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x40))) (=> (in_range4 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int6 ((x ring_range)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x ring_range)) (! (in_range_int (to_int6 x)) :pattern ((to_int6 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) us_rep))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (forall ((first (_ BitVec 8))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_218 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_218) (bvule temp___idx_218 a__last)) (= (bool_eq (select a temp___idx_218) (select b (bvadd (bvsub b__first a__first) temp___idx_218))) true)))) true false))
(assert (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_218 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_218) (bvule temp___idx_218 a__last)) (= (bool_eq (select a temp___idx_218) (select b (bvadd (bvsub b__first a__first) temp___idx_218))) true))))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__hw__dbc__transfer_rings__transfer_pointers__enqueue ring_range) (rec__hw__dbc__transfer_rings__transfer_pointers__dequeue ring_range) (rec__hw__dbc__transfer_rings__transfer_pointers__full Bool) (rec__hw__dbc__transfer_rings__transfer_pointers__toggle ring_range) (rec__hw__dbc__transfer_rings__transfer_pointers__overrun Bool)))))
(define-fun us_split_fields_Enqueue__projection ((a us_split_fields2)) ring_range (rec__hw__dbc__transfer_rings__transfer_pointers__enqueue a))
(define-fun us_split_fields_Dequeue__projection ((a us_split_fields2)) ring_range (rec__hw__dbc__transfer_rings__transfer_pointers__dequeue a))
(define-fun us_split_fields_Full__projection ((a us_split_fields2)) Bool (rec__hw__dbc__transfer_rings__transfer_pointers__full a))
(define-fun us_split_fields_Toggle__projection ((a us_split_fields2)) ring_range (rec__hw__dbc__transfer_rings__transfer_pointers__toggle a))
(define-fun us_split_fields_Overrun__projection ((a us_split_fields2)) Bool (rec__hw__dbc__transfer_rings__transfer_pointers__overrun a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (= (to_rep2 (rec__hw__dbc__transfer_rings__transfer_pointers__enqueue (us_split_fields3 a))) (to_rep2 (rec__hw__dbc__transfer_rings__transfer_pointers__enqueue (us_split_fields3 b)))) (= (to_rep2 (rec__hw__dbc__transfer_rings__transfer_pointers__dequeue (us_split_fields3 a))) (to_rep2 (rec__hw__dbc__transfer_rings__transfer_pointers__dequeue (us_split_fields3 b))))) (= (rec__hw__dbc__transfer_rings__transfer_pointers__full (us_split_fields3 a)) (rec__hw__dbc__transfer_rings__transfer_pointers__full (us_split_fields3 b)))) (= (to_rep2 (rec__hw__dbc__transfer_rings__transfer_pointers__toggle (us_split_fields3 a))) (to_rep2 (rec__hw__dbc__transfer_rings__transfer_pointers__toggle (us_split_fields3 b))))) (= (rec__hw__dbc__transfer_rings__transfer_pointers__overrun (us_split_fields3 a)) (rec__hw__dbc__transfer_rings__transfer_pointers__overrun (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__enqueue__last__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__enqueue__position Int)
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit))
(assert (< hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit hw__dbc__transfer_rings__transfer_pointers__enqueue__last__bit))
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__enqueue__position))
(declare-const hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__dequeue__last__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__dequeue__position Int)
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit))
(assert (< hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit hw__dbc__transfer_rings__transfer_pointers__dequeue__last__bit))
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__dequeue__position))
(declare-const hw__dbc__transfer_rings__transfer_pointers__full__first__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__full__last__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__full__position Int)
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__full__first__bit))
(assert (< hw__dbc__transfer_rings__transfer_pointers__full__first__bit hw__dbc__transfer_rings__transfer_pointers__full__last__bit))
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__full__position))
(declare-const hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__toggle__last__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__toggle__position Int)
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit))
(assert (< hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit hw__dbc__transfer_rings__transfer_pointers__toggle__last__bit))
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__toggle__position))
(declare-const hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__overrun__last__bit Int)
(declare-const hw__dbc__transfer_rings__transfer_pointers__overrun__position Int)
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit))
(assert (< hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit hw__dbc__transfer_rings__transfer_pointers__overrun__last__bit))
(assert (<= 0 hw__dbc__transfer_rings__transfer_pointers__overrun__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((transfer_pointers__ref (mk_transfer_pointers__ref (transfer_pointers__content us_rep1)))))
(define-fun transfer_pointers__ref___projection ((a transfer_pointers__ref)) us_rep1 (transfer_pointers__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_221 Int)) (=> (and (<= a__first temp___idx_221) (<= temp___idx_221 a__last)) (= (bool_eq2 (select a temp___idx_221) (select b (+ (- b__first a__first) temp___idx_221))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_221 Int)) (=> (and (<= a__first temp___idx_221) (<= temp___idx_221 a__last)) (= (bool_eq2 (select a temp___idx_221) (select b (+ (- b__first a__first) temp___idx_221))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const dummy8 (Array (_ BitVec 8) us_rep))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array (_ BitVec 8) us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 8) us_rep)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array (_ BitVec 8) us_rep)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq8 ((Array (_ BitVec 8) us_rep) (Array (_ BitVec 8) us_rep)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array (_ BitVec 8) us_rep)))))))
(declare-fun slide2 ((Array Int (Array (_ BitVec 8) us_rep)) Int Int) (Array Int (Array (_ BitVec 8) us_rep)))
(assert (forall ((a (Array Int (Array (_ BitVec 8) us_rep)))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array (_ BitVec 8) us_rep)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int (Array (_ BitVec 8) us_rep))) (a__first Int) (a__last Int) (b (Array Int (Array (_ BitVec 8) us_rep))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_219 Int)) (=> (and (<= a__first temp___idx_219) (<= temp___idx_219 a__last)) (= (bool_eq1 (select a temp___idx_219) #x00 #x3F (select b (+ (- b__first a__first) temp___idx_219)) #x00 #x3F) true)))) true false))
(assert (forall ((a (Array Int (Array (_ BitVec 8) us_rep))) (b (Array Int (Array (_ BitVec 8) us_rep)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_219 Int)) (=> (and (<= a__first temp___idx_219) (<= temp___idx_219 a__last)) (= (bool_eq1 (select a temp___idx_219) #x00 #x3F (select b (+ (- b__first a__first) temp___idx_219)) #x00 #x3F) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ep Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const pointer (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const status Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const remaining_length Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const cur_address (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const c33b Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const c35b (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const cur_address1 (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const c39b Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const c41b (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(define-fun dynamic_invariant5 ((temp___expr_407 (_ BitVec 32)) (temp___is_init_403 Bool) (temp___skip_constant_404 Bool) (temp___do_toplevel_405 Bool) (temp___do_typ_inv_406 Bool)) Bool true)
(declare-const current (_ BitVec 8))
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 64))
(declare-const o2 (_ BitVec 64))
(declare-const o3 Bool)
(declare-const o4 Bool)
(declare-const o5 (_ BitVec 64))
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const result Bool)
(assert (in_range2 ep))
(assert (in_range3 status))
(assert (in_range1 remaining_length))
(assert (=> (bvule #x00 #x3F) (in_range4 current)))
(assert (= o5 (physical ep)))
(assert (= o6 (bvsub pointer o5)))
(assert (= o7 (bvurem o6 #x0000000000000010)))
(assert (= o8 (ite (= o7 #x0000000000000000) true false)))
(assert (= o1 (physical ep)))
(assert (= o2 (bvsub pointer o1)))
(assert (= o3 (ite (bvult o2 #x0000000000000400) true false)))
(assert (= o (physical ep)))
(assert (= o4 (ite (bvule o pointer) true false)))
(assert (= o9 (ite (= o4 true) o3 false)))
(assert (= result (ite (= o9 true) o8 false)))
(assert (= result true))
(assert (= o10 (physical ep)))
(assert (= o11 (bvsub pointer o10)))
(assert (= o12 (bvudiv o11 #x0000000000000010)))
(assert (not (bvule ((_ zero_extend 56) #x00) o12)))
(check-sat)
(exit)
