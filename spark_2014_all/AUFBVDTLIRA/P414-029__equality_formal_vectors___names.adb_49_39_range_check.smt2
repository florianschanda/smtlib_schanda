(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort capacity_range 0)
(declare-fun capacity_rangeqtint (capacity_range) Int)
(assert (forall ((i capacity_range)) (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (capacity_range capacity_range) Bool)
(declare-const dummy capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___2__projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__names__entry_tables__vector__capacity capacity_range)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) capacity_range (rec__names__entry_tables__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__names__entry_tables__vector us_main_type)))))
(define-fun us_split_fields_Vector__2__projection ((a us_split_fields)) us_main_type (rec__names__entry_tables__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___5__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const names__entry_tables__vector__capacity__first__bit Int)
(declare-const names__entry_tables__vector__capacity__last__bit Int)
(declare-const names__entry_tables__vector__capacity__position Int)
(assert (<= 0 names__entry_tables__vector__capacity__first__bit))
(assert (< names__entry_tables__vector__capacity__first__bit names__entry_tables__vector__capacity__last__bit))
(assert (<= 0 names__entry_tables__vector__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___2__projection ((a vector__ref)) us_rep (vector__content a))
(define-fun to_rep ((x capacity_range)) Int (capacity_rangeqtint x))
(declare-fun of_rep (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x capacity_range)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun in_range1 ((rec__names__entry_tables__vector__capacity1 Int) (a us_rep)) Bool (= rec__names__entry_tables__vector__capacity1 (to_rep (rec__names__entry_tables__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const names__entry_tables__vector__capacity__first__bit1 Int)
(declare-const names__entry_tables__vector__capacity__last__bit1 Int)
(declare-const names__entry_tables__vector__capacity__position1 Int)
(assert (<= 0 names__entry_tables__vector__capacity__first__bit1))
(assert (< names__entry_tables__vector__capacity__first__bit1 names__entry_tables__vector__capacity__last__bit1))
(assert (<= 0 names__entry_tables__vector__capacity__position1))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((tentry_tableS__ref (mk_tentry_tableS__ref (tentry_tableS__content us_rep)))))
(define-fun tentry_tableS__ref___projection ((a tentry_tableS__ref)) us_rep (tentry_tableS__content a))
(declare-const entry_table__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_631 us_rep) (temp___is_init_627 Bool) (temp___skip_constant_628 Bool) (temp___do_toplevel_629 Bool) (temp___do_typ_inv_630 Bool)) Bool (=> (not (= temp___skip_constant_628 true)) (in_range1 128 temp___expr_631)))
(define-fun default_initial_assumption ((temp___expr_633 us_rep) (temp___skip_top_level_634 Bool)) Bool (and (= (to_rep (rec__names__entry_tables__vector__capacity (us_split_discrs1 temp___expr_633))) 128) (=> (not (= temp___skip_top_level_634 true)) (= (is_empty temp___expr_633) true))))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort name_id 0)
(declare-fun name_idqtint (name_id) Int)
(assert (forall ((i name_id)) (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq3 (name_id name_id) Bool)
(declare-const dummy3 name_id)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content a))
(define-fun to_rep1 ((x name_id)) Int (name_idqtint x))
(declare-fun of_rep1 (Int) name_id)
(assert (forall ((x name_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x name_id)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 32) name_id))))))
(declare-fun slide ((Array (_ BitVec 32) name_id) (_ BitVec 32) (_ BitVec 32)) (Array (_ BitVec 32) name_id))
(assert (forall ((a (Array (_ BitVec 32) name_id))) (forall ((first (_ BitVec 32))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 32) name_id))) (forall ((old_first (_ BitVec 32))) (forall ((new_first (_ BitVec 32))) (forall ((i (_ BitVec 32))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 32) name_id)) (a__first (_ BitVec 32)) (a__last (_ BitVec 32)) (b (Array (_ BitVec 32) name_id)) (b__first (_ BitVec 32)) (b__last (_ BitVec 32))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 32))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 32) name_id)) (b (Array (_ BitVec 32) name_id))) (forall ((a__first (_ BitVec 32)) (a__last (_ BitVec 32)) (b__first (_ BitVec 32)) (b__last (_ BitVec 32))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 32))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort capacity_range1 0)
(declare-fun capacity_rangeqtint1 (capacity_range1) Int)
(assert (forall ((i capacity_range1)) (and (<= 0 (capacity_rangeqtint1 i)) (<= (capacity_rangeqtint1 i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq4 (capacity_range1 capacity_range1) Bool)
(declare-const dummy4 capacity_range1)
(declare-datatypes () ((capacity_range__ref1 (mk_capacity_range__ref1 (capacity_range__content1 capacity_range1)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref1)) capacity_range1 (capacity_range__content1 a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__names__char_tables__vector__capacity capacity_range1)))))
(define-fun us_split_discrs___projection ((a us_split_discrs2)) capacity_range1 (rec__names__char_tables__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__names__char_tables__vector us_main_type1)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type1 (rec__names__char_tables__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs3 us_split_discrs2) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const names__char_tables__vector__capacity__first__bit Int)
(declare-const names__char_tables__vector__capacity__last__bit Int)
(declare-const names__char_tables__vector__capacity__position Int)
(assert (<= 0 names__char_tables__vector__capacity__first__bit))
(assert (< names__char_tables__vector__capacity__first__bit names__char_tables__vector__capacity__last__bit))
(assert (<= 0 names__char_tables__vector__capacity__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((vector__ref1 (mk_vector__ref1 (vector__content1 us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref1)) us_rep1 (vector__content1 a))
(define-fun to_rep2 ((x capacity_range1)) Int (capacity_rangeqtint1 x))
(declare-fun of_rep2 (Int) capacity_range1)
(assert (forall ((x capacity_range1)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x capacity_range1)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun in_range4 ((rec__names__char_tables__vector__capacity1 Int) (a us_rep1)) Bool (= rec__names__char_tables__vector__capacity1 (to_rep2 (rec__names__char_tables__vector__capacity (us_split_discrs3 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const names__char_tables__vector__capacity__first__bit1 Int)
(declare-const names__char_tables__vector__capacity__last__bit1 Int)
(declare-const names__char_tables__vector__capacity__position1 Int)
(assert (<= 0 names__char_tables__vector__capacity__first__bit1))
(assert (< names__char_tables__vector__capacity__first__bit1 names__char_tables__vector__capacity__last__bit1))
(assert (<= 0 names__char_tables__vector__capacity__position1))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((tchar_tableS__ref (mk_tchar_tableS__ref (tchar_tableS__content us_rep1)))))
(define-fun tchar_tableS__ref___projection ((a tchar_tableS__ref)) us_rep1 (tchar_tableS__content a))
(declare-const char_table__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun is_empty1 (us_rep1) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)
(define-fun dynamic_invariant1 ((temp___expr_454 us_rep1) (temp___is_init_450 Bool) (temp___skip_constant_451 Bool) (temp___do_toplevel_452 Bool) (temp___do_typ_inv_453 Bool)) Bool (=> (not (= temp___skip_constant_451 true)) (in_range4 1024 temp___expr_454)))
(define-fun default_initial_assumption1 ((temp___expr_456 us_rep1) (temp___skip_top_level_457 Bool)) Bool (and (= (to_rep2 (rec__names__char_tables__vector__capacity (us_split_discrs3 temp___expr_456))) 1024) (=> (not (= temp___skip_top_level_457 true)) (= (is_empty1 temp___expr_456) true))))
(declare-fun names__hash_table__aggregate_def (Int) (Array (_ BitVec 32) name_id))
(define-fun dynamic_invariant2 ((temp___expr_210 Int) (temp___is_init_206 Bool) (temp___skip_constant_207 Bool) (temp___do_toplevel_208 Bool) (temp___do_typ_inv_209 Bool)) Bool (=> (or (= temp___is_init_206 true) (<= 0 2147483647)) (in_range2 temp___expr_210)))
(declare-const rliteral name_id)
(assert (= (name_idqtint rliteral) 0))
(assert (forall ((temp___664 Int)) (=> (dynamic_invariant2 temp___664 true true true true) (forall ((temp___665 (_ BitVec 32))) (= (select (names__hash_table__aggregate_def temp___664) temp___665) rliteral)))))
(define-fun dynamic_invariant3 ((temp___expr_324 Int) (temp___is_init_320 Bool) (temp___skip_constant_321 Bool) (temp___do_toplevel_322 Bool) (temp___do_typ_inv_323 Bool)) Bool (=> (or (= temp___is_init_320 true) (<= 0 2147483647)) (in_range3 temp___expr_324)))
(define-fun in_range5 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)
(define-fun capacity ((container us_rep1)) Int (ite (= (distinct 0 0) true) (to_rep2 (rec__names__char_tables__vector__capacity (us_split_discrs3 container))) 2147483647))
(declare-fun capacity__function_guard (Int us_rep1) Bool)
(declare-fun length (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (let ((result (length container))) (and (<= result (capacity container)) (dynamic_invariant3 result true false true true))) :pattern ((length container)))))
(assert (forall ((container us_rep1)) (! (= (= (is_empty1 container) true) (= (length container) 0)) :pattern ((is_empty1 container)))))
(define-fun dynamic_invariant4 ((temp___expr_498 Int) (temp___is_init_494 Bool) (temp___skip_constant_495 Bool) (temp___do_toplevel_496 Bool) (temp___do_typ_inv_497 Bool)) Bool (=> (or (= temp___is_init_494 true) (<= 0 2147483647)) (in_range temp___expr_498)))
(define-fun capacity1 ((container us_rep)) Int (ite (= (distinct 0 0) true) (to_rep (rec__names__entry_tables__vector__capacity (us_split_discrs1 container))) 2147483647))
(declare-fun capacity__function_guard1 (Int us_rep) Bool)
(declare-fun length1 (us_rep) Int)
(declare-fun length__function_guard1 (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length1 container))) (and (<= result (capacity1 container)) (dynamic_invariant4 result true false true true))) :pattern ((length1 container)))))
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern ((is_empty container)))))
(declare-const hash_table (Array (_ BitVec 32) name_id))
(declare-const char_table__split_fields us_main_type1)
(declare-const us Int)
(declare-const result (Array (_ BitVec 32) name_id))
(declare-const hash_table1 (Array (_ BitVec 32) name_id))
(assert (= result hash_table))
(assert (= hash_table1 (names__hash_table__aggregate_def 0)))
(assert (and (= us 1024) (in_range3 1024)))
(assert (default_initial_assumption1 (mk___rep1 char_table__split_discrs (mk___split_fields1 char_table__split_fields)) false))
(assert (= 1024 (to_rep2 (rec__names__char_tables__vector__capacity char_table__split_discrs))))
(assert (not (in_range 128)))
(check-sat)
(exit)
