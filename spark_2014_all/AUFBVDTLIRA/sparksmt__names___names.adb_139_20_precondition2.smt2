(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun hash (us_t) (_ BitVec 32))
(declare-fun hash__function_guard ((_ BitVec 32) us_t) Bool)
(declare-sort hash_type 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))
(declare-fun user_eq4 (hash_type hash_type) Bool)
(declare-const dummy4 hash_type)
(declare-datatypes () ((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type (hash_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_159 (_ BitVec 32)) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)
(assert (forall ((key us_t)) (! (=> (dynamic_invariant key true true true true) (dynamic_invariant1 (hash key) true false true true)) :pattern ((hash key)))))
(declare-sort capacity_range 0)
(declare-fun capacity_rangeqtint (capacity_range) Int)
(assert (forall ((i capacity_range)) (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (capacity_range capacity_range) Bool)
(declare-const dummy5 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__names__data__char_tables__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__names__data__char_tables__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__names__data__char_tables__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type (rec__names__data__char_tables__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const names__data__char_tables__vector__capacity__first__bit Int)
(declare-const names__data__char_tables__vector__capacity__last__bit Int)
(declare-const names__data__char_tables__vector__capacity__position Int)
(assert (<= 0 names__data__char_tables__vector__capacity__first__bit))
(assert (< names__data__char_tables__vector__capacity__first__bit names__data__char_tables__vector__capacity__last__bit))
(assert (<= 0 names__data__char_tables__vector__capacity__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content a))
(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))
(declare-fun of_rep2 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x capacity_range)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun in_range5 ((rec__names__data__char_tables__vector__capacity1 Int) (a us_rep)) Bool (= rec__names__data__char_tables__vector__capacity1 (to_rep2 (rec__names__data__char_tables__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const names__data__char_tables__vector__capacity__first__bit1 Int)
(declare-const names__data__char_tables__vector__capacity__last__bit1 Int)
(declare-const names__data__char_tables__vector__capacity__position1 Int)
(assert (<= 0 names__data__char_tables__vector__capacity__first__bit1))
(assert (< names__data__char_tables__vector__capacity__first__bit1 names__data__char_tables__vector__capacity__last__bit1))
(assert (<= 0 names__data__char_tables__vector__capacity__position1))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((tchar_tableS__ref (mk_tchar_tableS__ref (tchar_tableS__content us_rep)))))
(define-fun tchar_tableS__ref___projection ((a tchar_tableS__ref)) us_rep (tchar_tableS__content a))
(declare-const char_table__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort capacity_range1 0)
(declare-fun capacity_rangeqtint1 (capacity_range1) Int)
(assert (forall ((i capacity_range1)) (and (<= 0 (capacity_rangeqtint1 i)) (<= (capacity_rangeqtint1 i) 2147483647))))
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (capacity_range1 capacity_range1) Bool)
(declare-const dummy8 capacity_range1)
(declare-datatypes () ((capacity_range__ref1 (mk_capacity_range__ref1 (capacity_range__content1 capacity_range1)))))
(define-fun capacity_range__ref___2__projection ((a capacity_range__ref1)) capacity_range1 (capacity_range__content1 a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__names__data__entry_tables__vector__capacity capacity_range1)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs2)) capacity_range1 (rec__names__data__entry_tables__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__names__data__entry_tables__vector us_main_type1)))))
(define-fun us_split_fields_Vector__2__projection ((a us_split_fields2)) us_main_type1 (rec__names__data__entry_tables__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs3 us_split_discrs2) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const names__data__entry_tables__vector__capacity__first__bit Int)
(declare-const names__data__entry_tables__vector__capacity__last__bit Int)
(declare-const names__data__entry_tables__vector__capacity__position Int)
(assert (<= 0 names__data__entry_tables__vector__capacity__first__bit))
(assert (< names__data__entry_tables__vector__capacity__first__bit names__data__entry_tables__vector__capacity__last__bit))
(assert (<= 0 names__data__entry_tables__vector__capacity__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((vector__ref1 (mk_vector__ref1 (vector__content1 us_rep1)))))
(define-fun vector__ref___2__projection ((a vector__ref1)) us_rep1 (vector__content1 a))
(define-fun to_rep3 ((x capacity_range1)) Int (capacity_rangeqtint1 x))
(declare-fun of_rep3 (Int) capacity_range1)
(assert (forall ((x capacity_range1)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x capacity_range1)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun in_range7 ((rec__names__data__entry_tables__vector__capacity1 Int) (a us_rep1)) Bool (= rec__names__data__entry_tables__vector__capacity1 (to_rep3 (rec__names__data__entry_tables__vector__capacity (us_split_discrs3 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const names__data__entry_tables__vector__capacity__first__bit1 Int)
(declare-const names__data__entry_tables__vector__capacity__last__bit1 Int)
(declare-const names__data__entry_tables__vector__capacity__position1 Int)
(assert (<= 0 names__data__entry_tables__vector__capacity__first__bit1))
(assert (< names__data__entry_tables__vector__capacity__first__bit1 names__data__entry_tables__vector__capacity__last__bit1))
(assert (<= 0 names__data__entry_tables__vector__capacity__position1))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((tentry_tableS__ref (mk_tentry_tableS__ref (tentry_tableS__content us_rep1)))))
(define-fun tentry_tableS__ref___projection ((a tentry_tableS__ref)) us_rep1 (tentry_tableS__content a))
(declare-const entry_table__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort name_id 0)
(declare-fun name_idqtint (name_id) Int)
(assert (forall ((i name_id)) (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (name_id name_id) Bool)
(declare-const dummy11 name_id)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content a))
(define-fun to_rep4 ((x name_id)) Int (name_idqtint x))
(declare-fun of_rep4 (Int) name_id)
(assert (forall ((x name_id)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x name_id)) (! (in_range8 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 32) name_id))))))
(declare-fun slide1 ((Array (_ BitVec 32) name_id) (_ BitVec 32) (_ BitVec 32)) (Array (_ BitVec 32) name_id))
(assert (forall ((a (Array (_ BitVec 32) name_id))) (forall ((first2 (_ BitVec 32))) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array (_ BitVec 32) name_id))) (forall ((old_first (_ BitVec 32))) (forall ((new_first (_ BitVec 32))) (forall ((i (_ BitVec 32))) (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array (_ BitVec 32) name_id)) (a__first (_ BitVec 32)) (a__last (_ BitVec 32)) (b (Array (_ BitVec 32) name_id)) (b__first (_ BitVec 32)) (b__last (_ BitVec 32))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 32))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep4 (select a temp___idx_154)) (to_rep4 (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 32) name_id)) (b (Array (_ BitVec 32) name_id))) (forall ((a__first (_ BitVec 32)) (a__last (_ BitVec 32)) (b__first (_ BitVec 32)) (b__last (_ BitVec 32))) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 32))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep4 (select a temp___idx_154)) (to_rep4 (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun invariant__ ((Array (_ BitVec 32) name_id) us_split_fields us_split_fields2) Bool)
(declare-fun invariant____function_guard (Bool (Array (_ BitVec 32) name_id) us_split_fields us_split_fields2) Bool)
(declare-fun valid_tables (us_split_fields us_split_fields2) Bool)
(declare-fun valid_tables__function_guard (Bool us_split_fields us_split_fields2) Bool)
(declare-fun valid_hashes ((Array (_ BitVec 32) name_id) us_split_fields2) Bool)
(declare-fun valid_hashes__function_guard (Bool (Array (_ BitVec 32) name_id) us_split_fields2) Bool)
(declare-fun valid_name_table (us_split_fields us_split_fields2) Bool)
(declare-fun valid_name_table__function_guard (Bool us_split_fields us_split_fields2) Bool)
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(define-fun dynamic_invariant2 ((temp___expr_629 us_rep) (temp___is_init_625 Bool) (temp___skip_constant_626 Bool) (temp___do_toplevel_627 Bool) (temp___do_typ_inv_628 Bool)) Bool (=> (not (= temp___skip_constant_626 true)) (in_range5 1024 temp___expr_629)))
(define-fun default_initial_assumption ((temp___expr_631 us_rep) (temp___skip_top_level_632 Bool)) Bool (and (= (to_rep2 (rec__names__data__char_tables__vector__capacity (us_split_discrs1 temp___expr_631))) 1024) (=> (not (= temp___skip_top_level_632 true)) (= (is_empty temp___expr_631) true))))
(declare-fun is_empty1 (us_rep1) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)
(define-fun dynamic_invariant3 ((temp___expr_639 us_rep1) (temp___is_init_635 Bool) (temp___skip_constant_636 Bool) (temp___do_toplevel_637 Bool) (temp___do_typ_inv_638 Bool)) Bool (=> (not (= temp___skip_constant_636 true)) (in_range7 256 temp___expr_639)))
(define-fun default_initial_assumption1 ((temp___expr_641 us_rep1) (temp___skip_top_level_642 Bool)) Bool (and (= (to_rep3 (rec__names__data__entry_tables__vector__capacity (us_split_discrs3 temp___expr_641))) 256) (=> (not (= temp___skip_top_level_642 true)) (= (is_empty1 temp___expr_641) true))))
(assert true)
(assert (forall ((names__hash_table (Array (_ BitVec 32) name_id))) (forall ((names__char_table__fields us_split_fields)) (forall ((names__entry_table__fields us_split_fields2)) (! (= (= (invariant__ names__hash_table names__char_table__fields names__entry_table__fields) true) (and (and (= (valid_tables names__char_table__fields names__entry_table__fields) true) (= (valid_name_table names__char_table__fields names__entry_table__fields) true)) (= (valid_hashes names__hash_table names__entry_table__fields) true))) :pattern ((invariant__ names__hash_table names__char_table__fields names__entry_table__fields)))))))
(declare-fun to_string1 (Int (Array (_ BitVec 32) name_id) us_split_fields us_split_fields2) us_t)
(declare-fun to_string__function_guard (us_t Int (Array (_ BitVec 32) name_id) us_split_fields us_split_fields2) Bool)
(define-fun dynamic_invariant4 ((temp___expr_210 Int) (temp___is_init_206 Bool) (temp___skip_constant_207 Bool) (temp___do_toplevel_208 Bool) (temp___do_typ_inv_209 Bool)) Bool (=> (or (= temp___is_init_206 true) (<= 0 2147483647)) (in_range8 temp___expr_210)))
(assert (forall ((n Int)) (forall ((names__hash_table (Array (_ BitVec 32) name_id))) (forall ((names__char_table__fields us_split_fields)) (forall ((names__entry_table__fields us_split_fields2)) (! (=> (and (and (and (dynamic_invariant4 n true true true true) (dynamic_invariant2 (mk___rep char_table__split_discrs names__char_table__fields) true true true true)) (dynamic_invariant3 (mk___rep1 entry_table__split_discrs names__entry_table__fields) true true true true)) (= (invariant__ names__hash_table names__char_table__fields names__entry_table__fields) true)) (dynamic_invariant (to_string1 n names__hash_table names__char_table__fields names__entry_table__fields) true false true true)) :pattern ((to_string1 n names__hash_table names__char_table__fields names__entry_table__fields))))))))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(define-fun last2 ((container us_rep2)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(declare-fun model__ (us_rep1) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep1) Bool)
(define-fun last_index ((container us_rep1)) Int (last2 (model__ container)))
(declare-fun last_index__function_guard (Int us_rep1) Bool)
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq13 (extended_index extended_index) Bool)
(declare-const dummy13 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___3__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant5 ((temp___expr_489 Int) (temp___is_init_485 Bool) (temp___skip_constant_486 Bool) (temp___do_toplevel_487 Bool) (temp___do_typ_inv_488 Bool)) Bool (=> (or (= temp___is_init_485 true) (<= 0 2147483647)) (in_range9 temp___expr_489)))
(define-fun to_rep5 ((x positive)) Int (positiveqtint x))
(declare-fun of_rep5 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x positive)) (! (in_range2 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-sort char_table_index 0)
(declare-fun char_table_indexqtint (char_table_index) Int)
(assert (forall ((i char_table_index)) (and (<= 0 (char_table_indexqtint i)) (<= (char_table_indexqtint i) 2147483646))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq14 (char_table_index char_table_index) Bool)
(declare-const dummy14 char_table_index)
(declare-datatypes () ((char_table_index__ref (mk_char_table_index__ref (char_table_index__content char_table_index)))))
(define-fun char_table_index__ref___projection ((a char_table_index__ref)) char_table_index (char_table_index__content a))
(define-fun to_rep6 ((x char_table_index)) Int (char_table_indexqtint x))
(declare-fun of_rep6 (Int) char_table_index)
(assert (forall ((x char_table_index)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x char_table_index)) (! (in_range10 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__names__data__name_entry__table_index char_table_index) (rec__names__data__name_entry__length positive) (rec__names__data__name_entry__next_hash name_id)))))
(define-fun us_split_fields_Table_Index__projection ((a us_split_fields4)) char_table_index (rec__names__data__name_entry__table_index a))
(define-fun us_split_fields_Length__projection ((a us_split_fields4)) positive (rec__names__data__name_entry__length a))
(define-fun us_split_fields_Next_Hash__projection ((a us_split_fields4)) name_id (rec__names__data__name_entry__next_hash a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (= (to_rep6 (rec__names__data__name_entry__table_index (us_split_fields5 a))) (to_rep6 (rec__names__data__name_entry__table_index (us_split_fields5 b)))) (= (to_rep5 (rec__names__data__name_entry__length (us_split_fields5 a))) (to_rep5 (rec__names__data__name_entry__length (us_split_fields5 b))))) (= (to_rep4 (rec__names__data__name_entry__next_hash (us_split_fields5 a))) (to_rep4 (rec__names__data__name_entry__next_hash (us_split_fields5 b))))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep3) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep3) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))
(declare-const names__data__name_entry__table_index__first__bit Int)
(declare-const names__data__name_entry__table_index__last__bit Int)
(declare-const names__data__name_entry__table_index__position Int)
(assert (<= 0 names__data__name_entry__table_index__first__bit))
(assert (< names__data__name_entry__table_index__first__bit names__data__name_entry__table_index__last__bit))
(assert (<= 0 names__data__name_entry__table_index__position))
(declare-const names__data__name_entry__length__first__bit Int)
(declare-const names__data__name_entry__length__last__bit Int)
(declare-const names__data__name_entry__length__position Int)
(assert (<= 0 names__data__name_entry__length__first__bit))
(assert (< names__data__name_entry__length__first__bit names__data__name_entry__length__last__bit))
(assert (<= 0 names__data__name_entry__length__position))
(declare-const names__data__name_entry__next_hash__first__bit Int)
(declare-const names__data__name_entry__next_hash__last__bit Int)
(declare-const names__data__name_entry__next_hash__position Int)
(assert (<= 0 names__data__name_entry__next_hash__first__bit))
(assert (< names__data__name_entry__next_hash__first__bit names__data__name_entry__next_hash__last__bit))
(assert (<= 0 names__data__name_entry__next_hash__position))
(declare-fun user_eq15 (us_rep3 us_rep3) Bool)
(declare-const dummy15 us_rep3)
(declare-datatypes () ((name_entry__ref (mk_name_entry__ref (name_entry__content us_rep3)))))
(define-fun name_entry__ref___projection ((a name_entry__ref)) us_rep3 (name_entry__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep3)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) us_rep3 (element_type__content a))
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep3)))))
(define-fun element_type__ref___4__projection ((a element_type__ref1)) us_rep3 (element_type__content1 a))
(declare-fun get (us_rep2 Int) us_rep3)
(declare-fun get__function_guard (us_rep3 us_rep2 Int) Bool)
(declare-fun first_index__function_guard (Int us_rep1) Bool)
(define-fun element ((container us_rep1) (index Int)) us_rep3 (get (model__ container) index))
(declare-fun element__function_guard (us_rep3 us_rep1 Int) Bool)
(declare-fun length2 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last2 left))) (=> (not (= i position)) (= (bool_eq4 (get left i) (get right i)) true)))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun length3 (us_rep) Int)
(declare-fun length__function_guard2 (Int us_rep) Bool)
(declare-const s us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort valid_name_id 0)
(declare-fun valid_name_idqtint (valid_name_id) Int)
(assert (forall ((i valid_name_id)) (and (<= 1 (valid_name_idqtint i)) (<= (valid_name_idqtint i) 2147483647))))
(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq16 (valid_name_id valid_name_id) Bool)
(declare-const dummy16 valid_name_id)
(declare-datatypes () ((valid_name_id__ref (mk_valid_name_id__ref (valid_name_id__content valid_name_id)))))
(define-fun valid_name_id__ref___projection ((a valid_name_id__ref)) valid_name_id (valid_name_id__content a))
(declare-sort hash_table_index_t 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(define-fun in_range12 ((x (_ BitVec 32))) Bool (and (bvule #x00000000 x) (bvule x #x000000FF)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 32))
(declare-fun user_eq17 (hash_table_index_t hash_table_index_t) Bool)
(declare-const dummy17 hash_table_index_t)
(declare-datatypes () ((hash_table_index_t__ref (mk_hash_table_index_t__ref (hash_table_index_t__content hash_table_index_t)))))
(define-fun hash_table_index_t__ref___projection ((a hash_table_index_t__ref)) hash_table_index_t (hash_table_index_t__content a))
(define-fun dynamic_invariant6 ((temp___expr_287 (_ BitVec 32)) (temp___is_init_283 Bool) (temp___skip_constant_284 Bool) (temp___do_toplevel_285 Bool) (temp___do_typ_inv_286 Bool)) Bool (=> (or (= temp___is_init_283 true) (bvule #x00000000 #x000000FF)) (in_range12 temp___expr_287)))
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 2147483647))))
(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq18 (index_type index_type) Bool)
(declare-const dummy18 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___3__projection ((a index_type__ref)) index_type (index_type__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const h (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant7 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant8 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant9 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq5 (us_rep4 us_rep4) Bool)
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep4) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep4) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep4)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment7 a))))
(declare-fun user_eq19 (us_rep4 us_rep4) Bool)
(declare-const dummy19 us_rep4)
(declare-datatypes () ((sequence__ref1 (mk_sequence__ref1 (sequence__content1 us_rep4)))))
(define-fun sequence__ref___projection ((a sequence__ref1)) us_rep4 (sequence__content1 a))
(declare-fun length4 (us_rep4) Int)
(declare-fun length__function_guard3 (Int us_rep4) Bool)
(define-fun last3 ((container us_rep4)) Int (+ (- 1) (length4 container)))
(declare-fun last__function_guard1 (Int us_rep4) Bool)
(declare-fun model__1 (us_rep) us_rep4)
(declare-fun model____function_guard1 (us_rep4 us_rep) Bool)
(define-fun last_index1 ((container us_rep)) Int (last3 (model__1 container)))
(declare-fun last_index__function_guard1 (Int us_rep) Bool)
(assert true)
(assert (forall ((names__char_table__fields us_split_fields)) (forall ((names__entry_table__fields us_split_fields2)) (! (= (= (valid_tables names__char_table__fields names__entry_table__fields) true) (and (<= (last_index (mk___rep1 entry_table__split_discrs names__entry_table__fields)) 2147483647) (<= (last_index1 (mk___rep char_table__split_discrs names__char_table__fields)) 2147483646))) :pattern ((valid_tables names__char_table__fields names__entry_table__fields))))))
(assert true)
(assert (forall ((names__hash_table (Array (_ BitVec 32) name_id))) (forall ((names__entry_table__fields us_split_fields2)) (! (= (= (valid_hashes names__hash_table names__entry_table__fields) true) (forall ((h1 (_ BitVec 32))) (=> (and (bvule #x00000000 h1) (bvule h1 #x000000FF)) (<= (to_rep4 (select names__hash_table h1)) (last_index (mk___rep1 entry_table__split_discrs names__entry_table__fields)))))) :pattern ((valid_hashes names__hash_table names__entry_table__fields))))))
(declare-fun valid_entry (us_rep3 us_split_fields us_split_fields2) Bool)
(declare-fun valid_entry__function_guard (Bool us_rep3 us_split_fields us_split_fields2) Bool)
(assert true)
(assert (forall ((e us_rep3)) (forall ((names__char_table__fields us_split_fields)) (forall ((names__entry_table__fields us_split_fields2)) (! (= (= (valid_entry e names__char_table__fields names__entry_table__fields) true) (and (<= (to_rep4 (rec__names__data__name_entry__next_hash (us_split_fields5 e))) (last_index (mk___rep1 entry_table__split_discrs names__entry_table__fields))) (<= (- (to_rep5 (rec__names__data__name_entry__length (us_split_fields5 e))) 1) (- (last_index1 (mk___rep char_table__split_discrs names__char_table__fields)) (to_rep6 (rec__names__data__name_entry__table_index (us_split_fields5 e))))))) :pattern ((valid_entry e names__char_table__fields names__entry_table__fields)))))))
(assert true)
(assert (forall ((names__char_table__fields us_split_fields)) (forall ((names__entry_table__fields us_split_fields2)) (! (= (= (valid_name_table names__char_table__fields names__entry_table__fields) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i (last_index (mk___rep1 entry_table__split_discrs names__entry_table__fields)))) (= (valid_entry (element (mk___rep1 entry_table__split_discrs names__entry_table__fields) i) names__char_table__fields names__entry_table__fields) true)))) :pattern ((valid_name_table names__char_table__fields names__entry_table__fields))))))
(assert (= h (bvurem (hash s) #x00000100)))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq20 (count_type count_type) Bool)
(declare-const dummy20 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant10 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range14 temp___expr_166)))
(define-fun dynamic_invariant11 ((temp___expr_280 Int) (temp___is_init_276 Bool) (temp___skip_constant_277 Bool) (temp___do_toplevel_278 Bool) (temp___do_typ_inv_279 Bool)) Bool (=> (or (= temp___is_init_276 true) (<= 1 2147483647)) (in_range11 temp___expr_280)))
(define-fun dynamic_invariant12 ((temp___expr_304 Int) (temp___is_init_300 Bool) (temp___skip_constant_301 Bool) (temp___do_toplevel_302 Bool) (temp___do_typ_inv_303 Bool)) Bool (=> (or (= temp___is_init_300 true) (<= 0 2147483646)) (in_range10 temp___expr_304)))
(declare-sort extended_index1 0)
(declare-fun extended_indexqtint1 (extended_index1) Int)
(assert (forall ((i extended_index1)) (and (<= (- 1) (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 2147483647))))
(define-fun in_range15 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq21 (extended_index1 extended_index1) Bool)
(declare-const dummy21 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant13 ((temp___expr_325 Int) (temp___is_init_321 Bool) (temp___skip_constant_322 Bool) (temp___do_toplevel_323 Bool) (temp___do_typ_inv_324 Bool)) Bool (=> (or (= temp___is_init_321 true) (<= (- 1) 2147483647)) (in_range15 temp___expr_325)))
(define-fun dynamic_invariant14 ((temp___expr_332 Int) (temp___is_init_328 Bool) (temp___skip_constant_329 Bool) (temp___do_toplevel_330 Bool) (temp___do_typ_inv_331 Bool)) Bool (=> (or (= temp___is_init_328 true) (<= 0 2147483647)) (in_range4 temp___expr_332)))
(define-fun capacity ((container us_rep)) Int (ite (= (distinct 0 0) true) (to_rep2 (rec__names__data__char_tables__vector__capacity (us_split_discrs1 container))) 2147483647))
(declare-fun capacity__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length3 container))) (and (<= result (capacity container)) (dynamic_invariant14 result true false true true))) :pattern ((length3 container)))))
(declare-fun get1 (us_rep4 Int) Int)
(declare-fun get__function_guard1 (Int us_rep4 Int) Bool)
(define-fun oeq ((left us_rep4) (right us_rep4)) Bool (and (= (length4 left) (length4 right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last3 left))) (= (get1 left n) (get1 right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep4 us_rep4) Bool)
(assert (forall ((a us_rep4) (b us_rep4)) (! (= (user_eq19 a b) (oeq a b)) :pattern ((user_eq19 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_371 us_rep4) (temp___skip_top_level_372 Bool)) Bool (=> (not (= temp___skip_top_level_372 true)) (= (length4 temp___expr_371) 0)))
(assert (forall ((container us_rep)) (! (= (length4 (model__1 container)) (length3 container)) :pattern ((model__1 container)))))
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length3 container) 0)) :pattern ((is_empty container)))))
(declare-sort extended_index2 0)
(declare-fun extended_indexqtint2 (extended_index2) Int)
(assert (forall ((i extended_index2)) (and (<= (- 1) (extended_indexqtint2 i)) (<= (extended_indexqtint2 i) 2147483646))))
(define-fun in_range16 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)
(declare-fun user_eq22 (extended_index2 extended_index2) Bool)
(declare-const dummy22 extended_index2)
(declare-datatypes () ((extended_index__ref2 (mk_extended_index__ref2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref2)) extended_index2 (extended_index__content2 a))
(define-fun dynamic_invariant15 ((temp___expr_363 Int) (temp___is_init_359 Bool) (temp___skip_constant_360 Bool) (temp___do_toplevel_361 Bool) (temp___do_typ_inv_362 Bool)) Bool (=> (or (= temp___is_init_359 true) (<= (- 1) 2147483646)) (in_range16 temp___expr_363)))
(assert (forall ((container us_rep4)) (! (let ((result (length4 container))) (and (<= (+ (- 1) result) 2147483646) (dynamic_invariant10 result true false true true))) :pattern ((length4 container)))))
(declare-sort element_type 0)
(define-fun in_range17 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)
(declare-fun user_eq23 (element_type element_type) Bool)
(declare-const dummy23 element_type)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type (element_type__content2 a))
(define-fun dynamic_invariant16 ((temp___expr_356 Int) (temp___is_init_352 Bool) (temp___skip_constant_353 Bool) (temp___do_toplevel_354 Bool) (temp___do_typ_inv_355 Bool)) Bool (=> (or (= temp___is_init_352 true) (<= 0 255)) (in_range17 temp___expr_356)))
(assert (forall ((container us_rep4)) (forall ((position Int)) (! (=> (and (dynamic_invariant15 position true true true true) (and (<= 0 position) (<= position (last3 container)))) (dynamic_invariant16 (get1 container position) true false true true)) :pattern ((get1 container position))))))
(define-fun dynamic_invariant17 ((temp___expr_496 Int) (temp___is_init_492 Bool) (temp___skip_constant_493 Bool) (temp___do_toplevel_494 Bool) (temp___do_typ_inv_495 Bool)) Bool (=> (or (= temp___is_init_492 true) (<= 0 2147483647)) (in_range6 temp___expr_496)))
(define-fun capacity1 ((container us_rep1)) Int (ite (= (distinct 0 0) true) (to_rep3 (rec__names__data__entry_tables__vector__capacity (us_split_discrs3 container))) 2147483647))
(declare-fun capacity__function_guard1 (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (let ((result (length2 container))) (and (<= result (capacity1 container)) (dynamic_invariant17 result true false true true))) :pattern ((length2 container)))))
(define-fun oeq1 ((left us_rep2) (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last2 left))) (= (bool_eq4 (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq12 a b) (oeq1 a b)) :pattern ((user_eq12 a b)))))
(define-fun default_initial_assumption3 ((temp___expr_538 us_rep2) (temp___skip_top_level_539 Bool)) Bool (=> (not (= temp___skip_top_level_539 true)) (= (length1 temp___expr_538) 0)))
(assert (forall ((container us_rep1)) (! (= (length1 (model__ container)) (length2 container)) :pattern ((model__ container)))))
(assert (forall ((container us_rep1)) (! (= (= (is_empty1 container) true) (= (length2 container) 0)) :pattern ((is_empty1 container)))))
(define-fun dynamic_invariant18 ((temp___expr_472 Int) (temp___is_init_468 Bool) (temp___skip_constant_469 Bool) (temp___do_toplevel_470 Bool) (temp___do_typ_inv_471 Bool)) Bool (=> (or (= temp___is_init_468 true) (<= 1 2147483647)) (in_range13 temp___expr_472)))
(declare-sort extended_index3 0)
(declare-fun extended_indexqtint3 (extended_index3) Int)
(assert (forall ((i extended_index3)) (and (<= 0 (extended_indexqtint3 i)) (<= (extended_indexqtint3 i) 2147483647))))
(define-fun in_range18 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)
(declare-fun user_eq24 (extended_index3 extended_index3) Bool)
(declare-const dummy24 extended_index3)
(declare-datatypes () ((extended_index__ref3 (mk_extended_index__ref3 (extended_index__content3 extended_index3)))))
(define-fun extended_index__ref___4__projection ((a extended_index__ref3)) extended_index3 (extended_index__content3 a))
(define-fun dynamic_invariant19 ((temp___expr_530 Int) (temp___is_init_526 Bool) (temp___skip_constant_527 Bool) (temp___do_toplevel_528 Bool) (temp___do_typ_inv_529 Bool)) Bool (=> (or (= temp___is_init_526 true) (<= 0 2147483647)) (in_range18 temp___expr_530)))
(assert (forall ((container us_rep2)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant10 result true false true true))) :pattern ((length1 container)))))
(assert true)
(declare-const n Int)
(declare-const hash_table (Array (_ BitVec 32) name_id))
(declare-const char_table__split_fields us_main_type)
(declare-const entry_table__split_fields us_main_type1)
(declare-const ptr Int)
(declare-const o (_ BitVec 32))
(declare-const o1 (_ BitVec 32))
(declare-const names__lookup__h__assume (_ BitVec 32))
(declare-const temp___711 (Array Int character))
(declare-const temp___7111 t)
(declare-const o2 Int)
(declare-const o3 char_table_index)
(declare-const o4 positive)
(declare-const o5 name_id)
(declare-const o6 char_table_index)
(declare-const o7 positive)
(declare-const o8 name_id)
(declare-const o9 name_id)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const n1 Int)
(declare-const result int__ref)
(declare-const ptr1 Int)
(declare-const n2 Int)
(declare-const result1 int__ref)
(declare-const n3 Int)
(declare-const result2 int__ref)
(declare-const ptr2 Int)
(declare-const result3 Bool)
(declare-const n4 Int)
(declare-const n5 Int)
(declare-const ptr3 Int)
(declare-const result4 Bool)
(define-fun o12 () us_rep3 (mk___rep2 (mk___split_fields2 o3 o4 o5)))
(define-fun temp___7112 () us_t (mk___t temp___711 temp___7111))
(assert (= 1024 (to_rep2 (rec__names__data__char_tables__vector__capacity char_table__split_discrs))))
(assert (= 256 (to_rep3 (rec__names__data__entry_tables__vector__capacity entry_table__split_discrs))))
(assert (dynamic_invariant s true false true true))
(assert (=> (<= 0 2147483647) (in_range8 n)))
(assert (= (invariant__ hash_table (mk___split_fields char_table__split_fields) (mk___split_fields1 entry_table__split_fields)) true))
(assert (= result (mk_int__ref ptr)))
(assert (= ptr1 0))
(assert (in_range8 ptr1))
(assert (= o (hash s)))
(assert (= o1 (bvurem o #x00000100)))
(assert (and (= names__lookup__h__assume o1) (in_range12 o1)))
(assert (= names__lookup__h__assume h))
(assert (in_range12 h))
(assert (not (= (length s) 0)))
(assert (= n2 n))
(assert (= n2 n1))
(assert (= result1 (mk_int__ref n2)))
(assert (= n3 (to_rep4 (select hash_table h))))
(assert (in_range11 n3))
(assert (= result2 (mk_int__ref ptr1)))
(assert (= ptr2 n3))
(assert (and (= temp___7112 (to_string1 ptr2 hash_table (mk___split_fields char_table__split_fields) (mk___split_fields1 entry_table__split_fields))) (dynamic_invariant temp___7112 true false true true)))
(assert (= result3 (bool_eq temp___711 (to_rep1 (first temp___7111)) (to_rep1 (last temp___7111)) (elts s) (to_rep1 (first (rt s))) (to_rep1 (last (rt s))))))
(assert (not (= result3 true)))
(assert (= n4 n3))
(assert (and (and (in_range11 ptr3) (<= ptr3 (last2 (model__ (mk___rep1 entry_table__split_discrs (mk___split_fields1 entry_table__split_fields)))))) (= (invariant__ hash_table (mk___split_fields char_table__split_fields) (mk___split_fields1 entry_table__split_fields)) true)))
(assert (and (=> (<= 0 2147483647) (in_range8 ptr3)) (=> (<= 0 2147483647) (in_range8 n5))))
(assert (and (= o2 ptr3) (in_range13 ptr3)))
(assert (and (= o12 (get (model__ (mk___rep1 entry_table__split_discrs (mk___split_fields1 entry_table__split_fields))) o2)) (= (bool_eq4 o12 (get (model__ (mk___rep1 entry_table__split_discrs (mk___split_fields1 entry_table__split_fields))) o2)) true)))
(assert (= o3 o6))
(assert (= o4 o7))
(assert (= o5 o8))
(assert (= o9 o8))
(assert (= o10 (to_rep4 o9)))
(assert (= result4 (ite (= o10 0) true false)))
(assert (not (= result4 true)))
(assert (and (= o11 ptr3) (in_range13 ptr3)))
(assert (not (<= 1 o11)))
(check-sat)
(exit)
