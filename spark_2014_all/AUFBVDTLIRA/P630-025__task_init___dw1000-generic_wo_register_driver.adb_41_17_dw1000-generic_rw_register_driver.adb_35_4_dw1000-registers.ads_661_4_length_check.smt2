(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort bits_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (bits_8 bits_8) Bool)
(declare-const dummy2 bits_8)
(declare-datatypes () ((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content a))
(declare-fun to_rep1 (bits_8) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) bits_8)
(assert (forall ((x bits_8)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x bits_8)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x bits_8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int bits_8))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))
(assert (forall ((v bits_8)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int) (b (Array Int bits_8)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int Int) Int)
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int bits_8)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))
(define-fun of_array ((a (Array Int bits_8)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int bits_8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int bits_8)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int bits_8)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content a))
(declare-sort bits_1 0)
(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 1))))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (bits_1 bits_1) Bool)
(declare-const dummy4 bits_1)
(declare-datatypes () ((bits_1__ref (mk_bits_1__ref (bits_1__content bits_1)))))
(define-fun bits_1__ref___projection ((a bits_1__ref)) bits_1 (bits_1__content a))
(declare-fun to_rep2 (bits_1) (_ BitVec 8))
(declare-fun of_rep2 ((_ BitVec 8)) bits_1)
(assert (forall ((x bits_1)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x bits_1)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 2)))) (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int4 ((x bits_1)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x bits_1)) (! (in_range_int (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort bits_2 0)
(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 3))))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (bits_2 bits_2) Bool)
(declare-const dummy5 bits_2)
(declare-datatypes () ((bits_2__ref (mk_bits_2__ref (bits_2__content bits_2)))))
(define-fun bits_2__ref___projection ((a bits_2__ref)) bits_2 (bits_2__content a))
(declare-fun to_rep3 (bits_2) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) bits_2)
(assert (forall ((x bits_2)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x bits_2)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 4)))) (=> (in_range3 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int5 ((x bits_2)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x bits_2)) (! (in_range_int1 (to_int5 x)) :pattern ((to_int5 x)))))
(declare-sort bits_3 0)
(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 7))))
(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (bits_3 bits_3) Bool)
(declare-const dummy6 bits_3)
(declare-datatypes () ((bits_3__ref (mk_bits_3__ref (bits_3__content bits_3)))))
(define-fun bits_3__ref___projection ((a bits_3__ref)) bits_3 (bits_3__content a))
(declare-fun to_rep4 (bits_3) (_ BitVec 8))
(declare-fun of_rep4 ((_ BitVec 8)) bits_3)
(assert (forall ((x bits_3)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x bits_3)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 8)))) (=> (in_range4 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int6 ((x bits_3)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x bits_3)) (! (in_range_int2 (to_int6 x)) :pattern ((to_int6 x)))))
(declare-sort bits_4 0)
(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 15))))
(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq7 (bits_4 bits_4) Bool)
(declare-const dummy7 bits_4)
(declare-datatypes () ((bits_4__ref (mk_bits_4__ref (bits_4__content bits_4)))))
(define-fun bits_4__ref___projection ((a bits_4__ref)) bits_4 (bits_4__content a))
(declare-fun to_rep5 (bits_4) (_ BitVec 8))
(declare-fun of_rep5 ((_ BitVec 8)) bits_4)
(assert (forall ((x bits_4)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x bits_4)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 16)))) (=> (in_range5 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5 (of_rep5 x))))))
(define-fun to_int7 ((x bits_4)) Int (bv2nat (to_rep5 x)))
(assert (forall ((x bits_4)) (! (in_range_int3 (to_int7 x)) :pattern ((to_int7 x)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks bits_2) (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks bits_2) (rec__dw1000__register_types__pmsc_ctrl0_type__txclks bits_2) (rec__dw1000__register_types__pmsc_ctrl0_type__face bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__adcce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__amce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gpce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gprn bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken bits_1) (rec__dw1000__register_types__pmsc_ctrl0_type__softreset bits_4) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 bits_3) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 bits_4) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 bits_3) (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 bits_4)))))
(define-fun us_split_fields_SYSCLKS__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks a))
(define-fun us_split_fields_RXCLKS__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks a))
(define-fun us_split_fields_TXCLKS__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__pmsc_ctrl0_type__txclks a))
(define-fun us_split_fields_FACE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__face a))
(define-fun us_split_fields_ADCCE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__adcce a))
(define-fun us_split_fields_AMCE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__amce a))
(define-fun us_split_fields_GPCE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpce a))
(define-fun us_split_fields_GPRN__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gprn a))
(define-fun us_split_fields_GPDCE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce a))
(define-fun us_split_fields_GPDRN__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn a))
(define-fun us_split_fields_KHZCLKEN__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken a))
(define-fun us_split_fields_SOFTRESET__projection ((a us_split_fields)) bits_4 (rec__dw1000__register_types__pmsc_ctrl0_type__softreset a))
(define-fun us_split_fields_Reserved_1__16__projection ((a us_split_fields)) bits_3 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 a))
(define-fun us_split_fields_Reserved_2__16__projection ((a us_split_fields)) bits_4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 a))
(define-fun us_split_fields_Reserved_3__5__projection ((a us_split_fields)) bits_3 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 a))
(define-fun us_split_fields_Reserved_4__2__projection ((a us_split_fields)) bits_4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___101__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___101__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks (us_split_fields1 a))) (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks (us_split_fields1 b)))) (= (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks (us_split_fields1 a))) (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks (us_split_fields1 b))))) (= (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__txclks (us_split_fields1 a))) (to_rep3 (rec__dw1000__register_types__pmsc_ctrl0_type__txclks (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__face (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__face (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__adcce (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__adcce (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__amce (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__amce (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gpce (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gpce (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gprn (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gprn (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken (us_split_fields1 b))))) (= (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__softreset (us_split_fields1 a))) (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__softreset (us_split_fields1 b))))) (= (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 (us_split_fields1 a))) (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 (us_split_fields1 b))))) (= (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 (us_split_fields1 a))) (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 (us_split_fields1 b))))) (= (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 (us_split_fields1 a))) (to_rep4 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 (us_split_fields1 b))))) (= (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 (us_split_fields1 a))) (to_rep5 (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__sysclks__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__sysclks__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__rxclks__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__rxclks__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__txclks__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__txclks__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__face__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__face__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__face__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__face__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__face__first__bit dw1000__register_types__pmsc_ctrl0_type__face__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__face__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__adcce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__adcce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__amce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__amce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__amce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__amce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__amce__first__bit dw1000__register_types__pmsc_ctrl0_type__amce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__amce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gprn__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gprn__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdce__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdce__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__gpdrn__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdrn__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__khzclken__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__khzclken__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__softreset__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__softreset__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_1__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_1__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_2__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_2__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_3__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_3__position))
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit Int)
(declare-const dw1000__register_types__pmsc_ctrl0_type__reserved_4__position Int)
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit))
(assert (< dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit))
(assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_4__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((pmsc_ctrl0_type__ref (mk_pmsc_ctrl0_type__ref (pmsc_ctrl0_type__content us_rep)))))
(define-fun pmsc_ctrl0_type__ref___projection ((a pmsc_ctrl0_type__ref)) us_rep (pmsc_ctrl0_type__content a))
(declare-datatypes () ((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___230__projection ((a register_type__ref)) us_rep (register_type__content a))
(declare-const reg us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (integer integer) Bool)
(declare-const dummy9 integer)
(declare-datatypes () ((tregister_byte_arrayP1__ref (mk_tregister_byte_arrayP1__ref (tregister_byte_arrayP1__content integer)))))
(define-fun tregister_byte_arrayP1__ref___165__projection ((a tregister_byte_arrayP1__ref)) integer (tregister_byte_arrayP1__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int bits_8)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int bits_8) (elts1 a))
(define-fun of_array1 ((a (Array Int bits_8)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int bits_8)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int bits_8)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int bits_8)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq10 (us_t1 us_t1) Bool)
(declare-const dummy10 us_t1)
(declare-datatypes () ((register_byte_array__ref (mk_register_byte_array__ref (register_byte_array__content us_t1)))))
(define-fun register_byte_array__ref___165__projection ((a register_byte_array__ref)) us_t1 (register_byte_array__content a))
(define-fun dynamic_invariant ((temp___expr_7355 us_t1) (temp___is_init_7352 Bool) (temp___skip_constant_7353 Bool) (temp___do_toplevel_7354 Bool)) Bool (=> (not (= temp___skip_constant_7353 true)) (and (dynamic_property2 1 4 (first3 temp___expr_7355) (last3 temp___expr_7355)) (and (= (first3 temp___expr_7355) 1) (= (last3 temp___expr_7355) 4)))))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int bits_8)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int bits_8) (elts2 a))
(define-fun of_array2 ((a (Array Int bits_8)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a)) (+ (- (last5 a) (first5 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int bits_8)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int bits_8)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int bits_8)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq4 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x))) (to_rep (last4 (rt2 x))) (elts2 y) (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))
(declare-fun user_eq11 (us_t2 us_t2) Bool)
(declare-const dummy11 us_t2)
(declare-datatypes () ((target__ref (mk_target__ref (target__content us_t2)))))
(define-fun target__ref___66__projection ((a target__ref)) us_t2 (target__content a))
(declare-datatypes () ((source__ref (mk_source__ref (source__content us_rep)))))
(define-fun source__ref___66__projection ((a source__ref)) us_rep (source__content a))
(define-fun dynamic_invariant1 ((temp___expr_7386 us_t2) (temp___is_init_7383 Bool) (temp___skip_constant_7384 Bool) (temp___do_toplevel_7385 Bool)) Bool (=> (not (= temp___skip_constant_7384 true)) (and (dynamic_property3 1 4 (first5 temp___expr_7386) (last5 temp___expr_7386)) (and (= (first5 temp___expr_7386) 1) (= (last5 temp___expr_7386) 4)))))
(declare-fun register_to_bytes (us_rep) us_t2)
(declare-fun register_to_bytes__function_guard (us_t2 us_rep) Bool)
(assert (forall ((s us_rep)) (! (dynamic_invariant1 (register_to_bytes s) true false true) :pattern ((register_to_bytes s)))))
(declare-const reg_bytes__first integer)
(declare-const reg_bytes__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant4 ((temp___expr_245 (_ BitVec 8)) (temp___is_init_242 Bool) (temp___skip_constant_243 Bool) (temp___do_toplevel_244 Bool)) Bool true)
(define-fun dynamic_invariant5 ((temp___expr_587 us_t) (temp___is_init_584 Bool) (temp___skip_constant_585 Bool) (temp___do_toplevel_586 Bool)) Bool (=> (not (= temp___skip_constant_585 true)) (dynamic_property 0 2147483647 (first1 temp___expr_587) (last1 temp___expr_587))))
(declare-const reg_bytes (Array Int bits_8))
(declare-const temp___8220 (Array Int bits_8))
(declare-const temp___82201 t2)
(declare-const temp___8221 (Array Int bits_8))
(declare-const temp___82211 t1)
(declare-const o (Array Int bits_8))
(declare-const o1 t1)
(declare-const o2 (Array Int bits_8))
(declare-const result (Array Int bits_8))
(declare-const reg_bytes1 (Array Int bits_8))
(assert (and (dynamic_property2 1 4 (to_rep reg_bytes__first) (to_rep reg_bytes__last)) (and (= (to_rep reg_bytes__first) 1) (= (to_rep reg_bytes__last) 4))))
(assert (and (= (mk___t2 temp___8220 temp___82201) (register_to_bytes reg)) (dynamic_invariant1 (mk___t2 temp___8220 temp___82201) true false true)))
(assert (= (ite (<= (to_rep (first4 temp___82201)) (to_rep (last4 temp___82201))) (+ (- (to_rep (last4 temp___82201)) (to_rep (first4 temp___82201))) 1) 0) (ite (<= 1 4) (+ (- 4 1) 1) 0)))
(assert (= temp___8220 temp___8221))
(assert (= (mk1 (to_rep (first4 temp___82201)) (to_rep (last4 temp___82201))) temp___82211))
(assert (not (= (ite (<= (to_rep (first2 temp___82211)) (to_rep (last2 temp___82211))) (+ (- (to_rep (last2 temp___82211)) (to_rep (first2 temp___82211))) 1) 0) (ite (<= (to_rep reg_bytes__first) (to_rep reg_bytes__last)) (+ (- (to_rep reg_bytes__last) (to_rep reg_bytes__first)) 1) 0))))
(check-sat)
(exit)
