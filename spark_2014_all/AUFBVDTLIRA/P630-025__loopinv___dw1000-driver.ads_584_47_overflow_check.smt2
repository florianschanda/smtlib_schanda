(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort bits_1 0)
(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 1))))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (bits_1 bits_1) Bool)
(declare-const dummy2 bits_1)
(declare-datatypes () ((bits_1__ref (mk_bits_1__ref (bits_1__content bits_1)))))
(define-fun bits_1__ref___projection ((a bits_1__ref)) bits_1 (bits_1__content a))
(declare-fun to_rep1 (bits_1) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) bits_1)
(assert (forall ((x bits_1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x bits_1)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 2)))) (=> (in_range3 y) (= (to_rep1 (of_rep1 x)) y))) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x bits_1)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x bits_1)) (! (in_range_int (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort bits_3 0)
(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 7))))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))
(declare-fun user_eq3 (bits_3 bits_3) Bool)
(declare-const dummy3 bits_3)
(declare-datatypes () ((bits_3__ref (mk_bits_3__ref (bits_3__content bits_3)))))
(define-fun bits_3__ref___projection ((a bits_3__ref)) bits_3 (bits_3__content a))
(declare-fun to_rep2 (bits_3) (_ BitVec 8))
(declare-fun of_rep2 ((_ BitVec 8)) bits_3)
(assert (forall ((x bits_3)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x bits_3)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 8)))) (=> (in_range4 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int4 ((x bits_3)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x bits_3)) (! (in_range_int1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort bits_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (bits_8 bits_8) Bool)
(declare-const dummy4 bits_8)
(declare-datatypes () ((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content a))
(define-fun dynamic_invariant ((temp___expr_316 (_ BitVec 8)) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool)) Bool true)
(declare-fun to_rep3 (bits_8) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) bits_8)
(assert (forall ((x bits_8)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int5 ((x bits_8)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x bits_8)) (! (uint_in_range (to_int5 x)) :pattern ((to_int5 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int bits_8))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int Int) (Array Int bits_8))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))
(assert (forall ((v bits_8)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int) (b (Array Int bits_8)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep3 (select a temp___idx_132)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep3 (select a temp___idx_132)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int Int) Int)
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int bits_8)) (b (Array Int bits_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep3 (select a (+ j 1))) (to_rep3 (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int bits_8)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))
(define-fun of_array ((a (Array Int bits_8)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int bits_8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int bits_8)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int bits_8)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dw1000__register_types__aon_ctrl_type__restore bits_1) (rec__dw1000__register_types__aon_ctrl_type__save bits_1) (rec__dw1000__register_types__aon_ctrl_type__upl_cfg bits_1) (rec__dw1000__register_types__aon_ctrl_type__dca_read bits_1) (rec__dw1000__register_types__aon_ctrl_type__dca_enab bits_1) (rec__dw1000__register_types__aon_ctrl_type__reserved bits_3)))))
(define-fun us_split_fields_RESTORE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_ctrl_type__restore a))
(define-fun us_split_fields_SAVE__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_ctrl_type__save a))
(define-fun us_split_fields_UPL_CFG__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_ctrl_type__upl_cfg a))
(define-fun us_split_fields_DCA_READ__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_ctrl_type__dca_read a))
(define-fun us_split_fields_DCA_ENAB__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__aon_ctrl_type__dca_enab a))
(define-fun us_split_fields_Reserved__18__projection ((a us_split_fields)) bits_3 (rec__dw1000__register_types__aon_ctrl_type__reserved a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___68__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___68__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (= (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__restore (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__restore (us_split_fields1 b)))) (= (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__save (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__save (us_split_fields1 b))))) (= (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__upl_cfg (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__upl_cfg (us_split_fields1 b))))) (= (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__dca_read (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__dca_read (us_split_fields1 b))))) (= (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__dca_enab (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__aon_ctrl_type__dca_enab (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__aon_ctrl_type__reserved (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__aon_ctrl_type__reserved (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const dw1000__register_types__aon_ctrl_type__restore__first__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__restore__last__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__restore__position Int)
(assert (<= 0 dw1000__register_types__aon_ctrl_type__restore__first__bit))
(assert (< dw1000__register_types__aon_ctrl_type__restore__first__bit dw1000__register_types__aon_ctrl_type__restore__last__bit))
(assert (<= 0 dw1000__register_types__aon_ctrl_type__restore__position))
(declare-const dw1000__register_types__aon_ctrl_type__save__first__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__save__last__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__save__position Int)
(assert (<= 0 dw1000__register_types__aon_ctrl_type__save__first__bit))
(assert (< dw1000__register_types__aon_ctrl_type__save__first__bit dw1000__register_types__aon_ctrl_type__save__last__bit))
(assert (<= 0 dw1000__register_types__aon_ctrl_type__save__position))
(declare-const dw1000__register_types__aon_ctrl_type__upl_cfg__first__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__upl_cfg__last__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__upl_cfg__position Int)
(assert (<= 0 dw1000__register_types__aon_ctrl_type__upl_cfg__first__bit))
(assert (< dw1000__register_types__aon_ctrl_type__upl_cfg__first__bit dw1000__register_types__aon_ctrl_type__upl_cfg__last__bit))
(assert (<= 0 dw1000__register_types__aon_ctrl_type__upl_cfg__position))
(declare-const dw1000__register_types__aon_ctrl_type__dca_read__first__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__dca_read__last__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__dca_read__position Int)
(assert (<= 0 dw1000__register_types__aon_ctrl_type__dca_read__first__bit))
(assert (< dw1000__register_types__aon_ctrl_type__dca_read__first__bit dw1000__register_types__aon_ctrl_type__dca_read__last__bit))
(assert (<= 0 dw1000__register_types__aon_ctrl_type__dca_read__position))
(declare-const dw1000__register_types__aon_ctrl_type__dca_enab__first__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__dca_enab__last__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__dca_enab__position Int)
(assert (<= 0 dw1000__register_types__aon_ctrl_type__dca_enab__first__bit))
(assert (< dw1000__register_types__aon_ctrl_type__dca_enab__first__bit dw1000__register_types__aon_ctrl_type__dca_enab__last__bit))
(assert (<= 0 dw1000__register_types__aon_ctrl_type__dca_enab__position))
(declare-const dw1000__register_types__aon_ctrl_type__reserved__first__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__reserved__last__bit Int)
(declare-const dw1000__register_types__aon_ctrl_type__reserved__position Int)
(assert (<= 0 dw1000__register_types__aon_ctrl_type__reserved__first__bit))
(assert (< dw1000__register_types__aon_ctrl_type__reserved__first__bit dw1000__register_types__aon_ctrl_type__reserved__last__bit))
(assert (<= 0 dw1000__register_types__aon_ctrl_type__reserved__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((aon_ctrl_type__ref (mk_aon_ctrl_type__ref (aon_ctrl_type__content us_rep)))))
(define-fun aon_ctrl_type__ref___projection ((a aon_ctrl_type__ref)) us_rep (aon_ctrl_type__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dw1000__register_types__aon_rdat_type__aon_rdat bits_8)))))
(define-fun us_split_fields_AON_RDAT__projection ((a us_split_fields2)) bits_8 (rec__dw1000__register_types__aon_rdat_type__aon_rdat a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___69__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___69__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep3 (rec__dw1000__register_types__aon_rdat_type__aon_rdat (us_split_fields3 a))) (to_rep3 (rec__dw1000__register_types__aon_rdat_type__aon_rdat (us_split_fields3 b)))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const dw1000__register_types__aon_rdat_type__aon_rdat__first__bit Int)
(declare-const dw1000__register_types__aon_rdat_type__aon_rdat__last__bit Int)
(declare-const dw1000__register_types__aon_rdat_type__aon_rdat__position Int)
(assert (<= 0 dw1000__register_types__aon_rdat_type__aon_rdat__first__bit))
(assert (< dw1000__register_types__aon_rdat_type__aon_rdat__first__bit dw1000__register_types__aon_rdat_type__aon_rdat__last__bit))
(assert (<= 0 dw1000__register_types__aon_rdat_type__aon_rdat__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((aon_rdat_type__ref (mk_aon_rdat_type__ref (aon_rdat_type__content us_rep1)))))
(define-fun aon_rdat_type__ref___projection ((a aon_rdat_type__ref)) us_rep1 (aon_rdat_type__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__dw1000__register_types__aon_addr_type__aon_addr bits_8)))))
(define-fun us_split_fields_AON_ADDR__projection ((a us_split_fields4)) bits_8 (rec__dw1000__register_types__aon_addr_type__aon_addr a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___70__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___70__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq4 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep3 (rec__dw1000__register_types__aon_addr_type__aon_addr (us_split_fields5 a))) (to_rep3 (rec__dw1000__register_types__aon_addr_type__aon_addr (us_split_fields5 b)))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const dw1000__register_types__aon_addr_type__aon_addr__first__bit Int)
(declare-const dw1000__register_types__aon_addr_type__aon_addr__last__bit Int)
(declare-const dw1000__register_types__aon_addr_type__aon_addr__position Int)
(assert (<= 0 dw1000__register_types__aon_addr_type__aon_addr__first__bit))
(assert (< dw1000__register_types__aon_addr_type__aon_addr__first__bit dw1000__register_types__aon_addr_type__aon_addr__last__bit))
(assert (<= 0 dw1000__register_types__aon_addr_type__aon_addr__position))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((aon_addr_type__ref (mk_aon_addr_type__ref (aon_addr_type__content us_rep2)))))
(define-fun aon_addr_type__ref___projection ((a aon_addr_type__ref)) us_rep2 (aon_addr_type__content a))
(declare-datatypes () ((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___67__projection ((a register_type__ref)) us_rep (register_type__content a))
(declare-datatypes () ((register_type__ref1 (mk_register_type__ref1 (register_type__content1 us_rep1)))))
(define-fun register_type__ref___68__projection ((a register_type__ref1)) us_rep1 (register_type__content1 a))
(declare-datatypes () ((register_type__ref2 (mk_register_type__ref2 (register_type__content2 us_rep2)))))
(define-fun register_type__ref___69__projection ((a register_type__ref2)) us_rep2 (register_type__content2 a))
(declare-const start_address (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const data__first integer)
(declare-const data__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (integer integer) Bool)
(declare-const dummy9 integer)
(declare-datatypes () ((t42b__ref (mk_t42b__ref (t42b__content integer)))))
(define-fun t42b__ref___projection ((a t42b__ref)) integer (t42b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int bits_8)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int bits_8) (elts1 a))
(define-fun of_array1 ((a (Array Int bits_8)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int bits_8)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int bits_8)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int bits_8)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment4 a))))
(define-fun bool_eq5 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq10 (us_t1 us_t1) Bool)
(declare-const dummy10 us_t1)
(declare-datatypes () ((t43b__ref (mk_t43b__ref (t43b__content us_t1)))))
(define-fun t43b__ref___projection ((a t43b__ref)) us_t1 (t43b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___3353 ((_ BitVec 8) Int Int) us_t1)
(assert (forall ((temp___3355 (_ BitVec 8))) (forall ((temp___3356 Int) (temp___3357 Int)) (let ((temp___3354 (temp___3353 temp___3355 temp___3356 temp___3357))) (and (=> (dynamic_property 0 2147483647 temp___3356 temp___3357) (and (= (first3 temp___3354) temp___3356) (= (last3 temp___3354) temp___3357))) (forall ((temp___3358 Int)) (= (select (to_array1 temp___3354) temp___3358) (of_rep3 temp___3355))))))))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant3 ((temp___expr_274 (_ BitVec 8)) (temp___is_init_271 Bool) (temp___skip_constant_272 Bool) (temp___do_toplevel_273 Bool)) Bool (=> (or (= temp___is_init_271 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1))) (in_range3 temp___expr_274)))
(define-fun dynamic_invariant4 ((temp___expr_286 (_ BitVec 8)) (temp___is_init_283 Bool) (temp___skip_constant_284 Bool) (temp___do_toplevel_285 Bool)) Bool (=> (or (= temp___is_init_283 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 7))) (in_range4 temp___expr_286)))
(define-fun dynamic_invariant5 ((temp___expr_658 us_t) (temp___is_init_655 Bool) (temp___skip_constant_656 Bool) (temp___do_toplevel_657 Bool)) Bool (=> (not (= temp___skip_constant_656 true)) (dynamic_property 0 2147483647 (first1 temp___expr_658) (last1 temp___expr_658))))
(declare-const address (_ BitVec 8))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___3360 (Array Int bits_8))
(declare-const temp___33601 t1)
(declare-const temp___3361 (Array Int bits_8))
(declare-const temp___33611 t)
(declare-const result Bool)
(declare-const result1 (_ BitVec 8))
(declare-const address1 (_ BitVec 8))
(assert true)
(assert (dynamic_property 0 2147483647 (to_rep data__first) (to_rep data__last)))
(assert (=> (<= (to_rep data__first) (to_rep data__last)) (= o4 (+ (- (to_rep data__last) (to_rep data__first)) 1))))
(assert (=> (not (<= (to_rep data__first) (to_rep data__last))) (= o4 0)))
(assert (= result (ite (<= o4 256) true false)))
(assert (= result true))
(assert (=> (<= (to_rep data__first) (to_rep data__last)) (= o (+ (- (to_rep data__last) (to_rep data__first)) 1))))
(assert (=> (not (<= (to_rep data__first) (to_rep data__last))) (= o 0)))
(assert (and (= o1 o) (in_range1 o)))
(assert (= o2 (+ (bv2nat start_address) o1)))
(assert (not (in_range1 o2)))
(check-sat)
(exit)
