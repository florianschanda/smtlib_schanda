(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 32) Int) Bool)
(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min1 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 64) Int) Bool)
(declare-fun lsr2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left3 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int3 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv2 x ((_ int2bv 64) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min2 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int4 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64)) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool)) Bool true)
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (unsigned8 unsigned8) Bool)
(declare-const dummy1 unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int5 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int5 x)) :pattern ((to_int5 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (unsigned8 (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((v unsigned8)) (forall ((i (_ BitVec 64))) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) Int)
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 64)) (j (_ BitVec 64))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep (select b (bvadd j #x0000000000000001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)) (b_first (_ BitVec 64)) (b_last (_ BitVec 64))) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 64)) (j (_ BitVec 64))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep (select b (bvadd i #x0000000000000001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)
(declare-fun writereg32post__function_guard (Bool (_ BitVec 64) (_ BitVec 32)) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (unsigned32 unsigned32) Bool)
(declare-const dummy2 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant1 ((temp___expr_208 (_ BitVec 32)) (temp___is_init_205 Bool) (temp___skip_constant_206 Bool) (temp___do_toplevel_207 Bool)) Bool true)
(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))
(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)
(assert (forall ((x86__rbx (_ BitVec 64))) (! (=> (dynamic_invariant x86__rbx true true true) (let ((result (ebx x86__rbx))) (and (= result (readreg32 x86__rbx)) (dynamic_invariant1 result true false true)))) :pattern ((ebx x86__rbx)))))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-fun readmem32 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))
(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true) (let ((result (readmem32 addr x86__memory))) (and (and (and (and (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select x86__memory addr)))) (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))) (dynamic_invariant1 result true false true)))) :pattern ((readmem32 addr x86__memory))))))
(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(define-fun dynamic_invariant2 ((temp___expr_220 (_ BitVec 8)) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool)) Bool true)
(assert (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64)) (range_size (_ BitVec 64))) (! (=> (and (and (dynamic_invariant var true true true) (dynamic_invariant bottom true true true)) (dynamic_invariant range_size true true true)) (= (= (inrange64 var bottom range_size) true) (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1))) (and (bvule bottom var) (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1))))) (or (and (bvule bottom var) (bvule var ((_ int2bv 64) 18446744073709551615))) (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern ((inrange64 var bottom range_size)))))
(assert (forall ((reg (_ BitVec 64))) (! (=> (dynamic_invariant reg true true true) (let ((result (readreg32 reg))) (and (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295)))) (dynamic_invariant1 result true false true)))) :pattern ((readreg32 reg)))))
(assert (forall ((regnew (_ BitVec 64))) (forall ((val__ (_ BitVec 32))) (! (=> (and (dynamic_invariant regnew true true true) (dynamic_invariant1 val__ true true true)) (= (= (writereg32post regnew val__) true) (and (= (readreg32 regnew) val__) (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern ((writereg32post regnew val__))))))
(declare-const exit_called Bool)
(declare-const zeroflag Bool)
(declare-const carryflag Bool)
(declare-const signflag Bool)
(declare-const overflowflag Bool)
(declare-const rax (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const rbx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rbp (_ BitVec 64))
(declare-const rsi (_ BitVec 64))
(declare-const rdi (_ BitVec 64))
(declare-const r8 (_ BitVec 64))
(declare-const memory (Array (_ BitVec 64) unsigned8))
(declare-const temp___536 (_ BitVec 64))
(declare-const temp___535 Bool)
(declare-const temp___534 (_ BitVec 64))
(declare-const temp___532 (Array (_ BitVec 64) unsigned8))
(declare-const temp___533 (_ BitVec 64))
(declare-const temp___531 (_ BitVec 64))
(declare-const temp___530 Bool)
(declare-const temp___529 Bool)
(declare-const temp___528 (_ BitVec 64))
(declare-const temp___538 (Array (_ BitVec 64) unsigned8))
(declare-const temp___527 Bool)
(declare-const temp___526 (_ BitVec 64))
(declare-const temp___525 (_ BitVec 64))
(declare-const temp___537 (_ BitVec 64))
(declare-const temp___523 (_ BitVec 64))
(declare-const temp___524 Bool)
(declare-const o (_ BitVec 32))
(declare-const o1 (_ BitVec 32))
(declare-const rax1 (_ BitVec 64))
(declare-const rcx1 (_ BitVec 64))
(declare-const rdx1 (_ BitVec 64))
(declare-const rbx1 (_ BitVec 64))
(declare-const rsp1 (_ BitVec 64))
(declare-const rsi1 (_ BitVec 64))
(declare-const rdi1 (_ BitVec 64))
(declare-const r81 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result (_ BitVec 64))
(declare-const rsi2 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const rdi2 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const rsp2 (_ BitVec 64))
(declare-const exit_called1 Bool)
(declare-const zeroflag1 Bool)
(declare-const carryflag1 Bool)
(declare-const signflag1 Bool)
(declare-const overflowflag1 Bool)
(declare-const rax2 (_ BitVec 64))
(declare-const rcx2 (_ BitVec 64))
(declare-const rdx2 (_ BitVec 64))
(declare-const rsp3 (_ BitVec 64))
(declare-const rdi3 (_ BitVec 64))
(declare-const r82 (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const rdx3 (_ BitVec 64))
(declare-const rsi3 (_ BitVec 64))
(declare-const rax3 (_ BitVec 64))
(declare-const rdi4 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const rbx2 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const rsp4 (_ BitVec 64))
(declare-const rsp5 (_ BitVec 64))
(declare-const result5 Bool)
(declare-const zeroflag2 Bool)
(declare-const result6 bool__ref)
(declare-const signflag2 Bool)
(declare-const result7 bool__ref)
(declare-const carryflag2 Bool)
(declare-const result8 bool__ref)
(declare-const overflowflag2 Bool)
(declare-const exit_called2 bool__ref)
(declare-const zeroflag3 bool__ref)
(declare-const carryflag3 bool__ref)
(declare-const signflag3 bool__ref)
(declare-const overflowflag3 bool__ref)
(declare-const rax4 t__ref2)
(declare-const rcx3 t__ref2)
(declare-const rdx4 t__ref2)
(declare-const rbx3 t__ref2)
(declare-const rsp6 t__ref2)
(declare-const rsi4 t__ref2)
(declare-const rdi5 t__ref2)
(declare-const r83 t__ref2)
(declare-const memory3 map__ref)
(declare-const exit_called3 Bool)
(declare-const zeroflag4 Bool)
(declare-const carryflag4 Bool)
(declare-const signflag4 Bool)
(declare-const overflowflag4 Bool)
(declare-const rax5 (_ BitVec 64))
(declare-const rcx4 (_ BitVec 64))
(declare-const rdx5 (_ BitVec 64))
(declare-const rbx4 (_ BitVec 64))
(declare-const rsp7 (_ BitVec 64))
(declare-const rsi5 (_ BitVec 64))
(declare-const rdi6 (_ BitVec 64))
(declare-const r84 (_ BitVec 64))
(declare-const memory4 (Array (_ BitVec 64) unsigned8))
(declare-const exit_called4 bool__ref)
(declare-const zeroflag5 bool__ref)
(declare-const carryflag5 bool__ref)
(declare-const signflag5 bool__ref)
(declare-const overflowflag5 bool__ref)
(declare-const rax6 t__ref2)
(declare-const rcx5 t__ref2)
(declare-const rdx6 t__ref2)
(declare-const rbx5 t__ref2)
(declare-const rsp8 t__ref2)
(declare-const rsi6 t__ref2)
(declare-const rdi7 t__ref2)
(declare-const r85 t__ref2)
(declare-const memory5 map__ref)
(declare-const exit_called5 Bool)
(declare-const zeroflag6 Bool)
(declare-const carryflag6 Bool)
(declare-const signflag6 Bool)
(declare-const overflowflag6 Bool)
(declare-const rax7 (_ BitVec 64))
(declare-const rcx6 (_ BitVec 64))
(declare-const rdx7 (_ BitVec 64))
(declare-const rbx6 (_ BitVec 64))
(declare-const rsp9 (_ BitVec 64))
(declare-const rsi7 (_ BitVec 64))
(declare-const rdi8 (_ BitVec 64))
(declare-const r86 (_ BitVec 64))
(declare-const memory6 (Array (_ BitVec 64) unsigned8))
(declare-const exit_called6 bool__ref)
(declare-const zeroflag7 bool__ref)
(declare-const carryflag7 bool__ref)
(declare-const signflag7 bool__ref)
(declare-const overflowflag7 bool__ref)
(declare-const rax8 t__ref2)
(declare-const rcx7 t__ref2)
(declare-const rdx8 t__ref2)
(declare-const rbx7 t__ref2)
(declare-const rsp10 t__ref2)
(declare-const rsi8 t__ref2)
(declare-const rdi9 t__ref2)
(declare-const r87 t__ref2)
(declare-const memory7 map__ref)
(declare-const exit_called7 Bool)
(declare-const zeroflag8 Bool)
(declare-const carryflag8 Bool)
(declare-const signflag8 Bool)
(declare-const overflowflag8 Bool)
(declare-const rax9 (_ BitVec 64))
(declare-const rcx8 (_ BitVec 64))
(declare-const rdx9 (_ BitVec 64))
(declare-const rbx8 (_ BitVec 64))
(declare-const rsp11 (_ BitVec 64))
(declare-const rsi9 (_ BitVec 64))
(declare-const rdi10 (_ BitVec 64))
(declare-const r88 (_ BitVec 64))
(declare-const memory8 (Array (_ BitVec 64) unsigned8))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (= rsp1 rsp))
(assert (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (and (and (and (and (and (and (and (not (= i (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 1))))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 2))))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 3))))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 4))))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 5))))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 6))))) (not (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 7))))) (= (to_rep (select memory1 i)) (to_rep (select memory i)))))))
(assert true)
(assert (= rsi1 result))
(assert (= rsi2 (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 104))))
(assert (= rdi1 result1))
(assert (= rdi2 rbx1))
(assert (= rsp1 result2))
(assert (= rsp2 (bvsub rsp1 ((_ int2bv 64) 8))))
(assert (and (and (and (and (and (and (and (and (and (= rsp3 (bvadd rsp2 ((_ int2bv 64) 8))) (= (to_rep (select memory2 rsp2)) (to_rep (select memory1 rsp2)))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 1)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 1)))))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 2)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 2)))))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 3)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 3)))))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 4)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 4)))))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 5)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 5)))))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 6)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 6)))))) (= (to_rep (select memory2 (bvadd rsp2 ((_ int2bv 64) 7)))) (to_rep (select memory1 (bvadd rsp2 ((_ int2bv 64) 7)))))) (forall ((i (_ BitVec 64))) (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i ((_ int2bv 64) 18446744073709551615))) (=> (not (= (inrange64 i rsi2 ((_ int2bv 64) 8)) true)) (= (to_rep (select memory2 i)) (to_rep (select memory1 i))))))))
(assert (and (= o (readmem32 (bvsub (bvadd rsp3 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) memory2)) (and (and (and (= (bvand o ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep (select memory2 (bvsub (bvadd rsp3 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)))))) (= (bvand o ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep (select memory2 (bvadd (bvsub (bvadd rsp3 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256)))) (= (bvand o ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep (select memory2 (bvadd (bvsub (bvadd rsp3 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536)))) (= (bvand o ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) (to_rep (select memory2 (bvadd (bvsub (bvadd rsp3 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))
(assert (= (writereg32post rdx3 o) true))
(assert (and (= o1 (ebx rbx1)) (= o1 (readreg32 rbx1))))
(assert (= (writereg32post rsi3 o1) true))
(assert (= (writereg32post rax3 ((_ int2bv 32) 0)) true))
(assert (= (writereg32post rdi4 ((_ int2bv 32) 4198703)) true))
(assert (= rbx1 result3))
(assert (= rbx2 (bvadd rbx1 ((_ int2bv 64) 1))))
(assert (= rsp3 result4))
(assert (= rsp4 (bvsub rsp3 ((_ int2bv 64) 8))))
(assert (= rsp5 (bvadd rsp4 ((_ int2bv 64) 8))))
(assert (= zeroflag1 result5))
(assert (= zeroflag2 (ite (= (bvsub rbx2 ((_ int2bv 64) 1001)) ((_ int2bv 64) 0)) true false)))
(assert (= result6 (mk_bool__ref signflag1)))
(assert (= signflag2 (ite (bvugt (bvsub rbx2 ((_ int2bv 64) 1001)) ((_ int2bv 64) 9223372036854775807)) true false)))
(assert (= result7 (mk_bool__ref carryflag1)))
(assert (= carryflag2 (ite (bvult rbx2 ((_ int2bv 64) 1001)) true false)))
(assert (= result8 (mk_bool__ref overflowflag1)))
(assert (= overflowflag2 (ite (and (and (= signflag2 true) (= (of_int 0) true)) (bvule rbx2 ((_ int2bv 64) 9223372036854775807))) true (ite (and (and (not (= signflag2 true)) (bvugt rbx2 ((_ int2bv 64) 9223372036854775807))) (= (of_int 1) true)) true false))))
(assert (not (= zeroflag2 true)))
(declare-const i (_ BitVec 64))
(assert (bvule ((_ int2bv 64) 0) i))
(assert (bvule i ((_ int2bv 64) 18446744073709551615)))
(assert (not (= i (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 1)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 2)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 3)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 4)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 5)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 6)))))
(assert (not (= i (bvadd (bvsub (bvadd rsp5 ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 7)))))
(assert (not (= (to_rep (select memory2 i)) (to_rep (select memory i)))))
(check-sat)
(exit)
