(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 16) Int) Bool)
(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort short_short_integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (short_short_integer short_short_integer) Bool)
(declare-const dummy short_short_integer)
(declare-datatypes () ((short_short_integer__ref (mk_short_short_integer__ref (short_short_integer__content short_short_integer)))))
(define-fun short_short_integer__ref___projection ((a short_short_integer__ref)) short_short_integer (short_short_integer__content a))
(define-fun dynamic_invariant ((temp___expr_3 Int) (temp___is_init_0 Bool) (temp___skip_constant_1 Bool) (temp___do_toplevel_2 Bool)) Bool (=> (or (= temp___is_init_0 true) (<= (- 128) 127)) (in_range1 temp___expr_3)))
(declare-sort mod_16 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq1 (mod_16 mod_16) Bool)
(declare-const dummy1 mod_16)
(declare-datatypes () ((mod_16__ref (mk_mod_16__ref (mod_16__content mod_16)))))
(define-fun mod_16__ref___projection ((a mod_16__ref)) mod_16 (mod_16__content a))
(declare-fun to_rep (mod_16) (_ BitVec 16))
(declare-fun of_rep ((_ BitVec 16)) mod_16)
(assert (forall ((x mod_16)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 16))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x mod_16)) Int (bv2nat (to_rep x)))
(assert (forall ((x mod_16)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep1 (natural) Int)
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 16) natural))))))
(declare-fun slide ((Array (_ BitVec 16) natural) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) natural))
(assert (forall ((a (Array (_ BitVec 16) natural))) (forall ((first (_ BitVec 16))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 16) natural))) (forall ((old_first (_ BitVec 16))) (forall ((new_first (_ BitVec 16))) (forall ((i (_ BitVec 16))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array (_ BitVec 16) natural) (_ BitVec 16) (_ BitVec 16) (Array (_ BitVec 16) natural) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) natural))
(assert (forall ((a (Array (_ BitVec 16) natural)) (b (Array (_ BitVec 16) natural))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (forall ((i (_ BitVec 16))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural (_ BitVec 16)) (Array (_ BitVec 16) natural))
(assert (forall ((v natural)) (forall ((i (_ BitVec 16))) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array (_ BitVec 16) natural)) (a__first (_ BitVec 16)) (a__last (_ BitVec 16)) (b (Array (_ BitVec 16) natural)) (b__first (_ BitVec 16)) (b__last (_ BitVec 16))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 16))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array (_ BitVec 16) natural)) (b (Array (_ BitVec 16) natural))) (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16)) (b__first (_ BitVec 16)) (b__last (_ BitVec 16))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 16))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array (_ BitVec 16) natural) (_ BitVec 16) (_ BitVec 16) (Array (_ BitVec 16) natural) (_ BitVec 16) (_ BitVec 16)) Int)
(assert (forall ((a (Array (_ BitVec 16) natural)) (b (Array (_ BitVec 16) natural))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 16) natural)) (b (Array (_ BitVec 16) natural))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 16)) (j (_ BitVec 16))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (< (to_rep1 (select a (bvadd i #x0001))) (to_rep1 (select b (bvadd j #x0001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 16) natural)) (b (Array (_ BitVec 16) natural))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 16)) (j (_ BitVec 16))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (< (to_rep1 (select b (bvadd i #x0001))) (to_rep1 (select a (bvadd j #x0001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) mod_16)
(declare-fun last (t) mod_16)
(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)
(assert (forall ((f (_ BitVec 16)) (l (_ BitVec 16))) (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 16)) (range_last (_ BitVec 16)) (low (_ BitVec 16)) (high (_ BitVec 16))) Bool true)
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 16) natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) natural) (elts a))
(define-fun of_array ((a (Array (_ BitVec 16) natural)) (f (_ BitVec 16)) (l (_ BitVec 16))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 16) natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 16) natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 16) natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((my_array__ref (mk_my_array__ref (my_array__content us_t)))))
(define-fun my_array__ref___projection ((a my_array__ref)) us_t (my_array__content a))
(define-fun dynamic_invariant1 ((temp___expr_142 (_ BitVec 16)) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool true)
(define-fun dynamic_invariant2 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property ((_ int2bv 16) 0) ((_ int2bv 16) 65535) (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun create ((_ BitVec 16)) us_t)
(declare-fun create__function_guard (us_t (_ BitVec 16)) Bool)
(assert (forall ((c (_ BitVec 16))) (! (=> (dynamic_invariant1 c true true true) (let ((result (create c))) (and (and (= (first1 result) ((_ int2bv 16) 0)) (= (last1 result) c)) (dynamic_invariant2 result true false true)))) :pattern ((create c)))))
(declare-const a__first mod_16)
(declare-const a__last mod_16)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-const a (Array (_ BitVec 16) natural))
(declare-const test_length__p1__a__assume (Array (_ BitVec 16) natural))
(declare-const test_length__p1__a__assume1 t)
(declare-const o Int)
(declare-const result (Array (_ BitVec 16) natural))
(declare-const a1 (Array (_ BitVec 16) natural))
(define-fun test_length__p1__a__assume2 () us_t (mk___t test_length__p1__a__assume test_length__p1__a__assume1))
(assert (and (= test_length__p1__a__assume2 (create ((_ int2bv 16) 65535))) (and (dynamic_invariant2 test_length__p1__a__assume2 true false true) (and (= (to_rep (first test_length__p1__a__assume1)) ((_ int2bv 16) 0)) (= (to_rep (last test_length__p1__a__assume1)) ((_ int2bv 16) 65535))))))
(assert (= result a))
(assert (= a1 test_length__p1__a__assume))
(assert (= (to_rep a__first) (to_rep (first test_length__p1__a__assume1))))
(assert (= (to_rep a__last) (to_rep (last test_length__p1__a__assume1))))
(assert (dynamic_property ((_ int2bv 16) 0) ((_ int2bv 16) 65535) (to_rep a__first) (to_rep a__last)))
(assert (=> (<= (bv2nat (to_rep a__first)) (bv2nat (to_rep a__last))) (= o (+ (- (bv2nat (to_rep a__last)) (bv2nat (to_rep a__first))) 1))))
(assert (=> (not (<= (bv2nat (to_rep a__first)) (bv2nat (to_rep a__last)))) (= o 0)))
(assert (not (in_range1 o)))
(check-sat)
(exit)
