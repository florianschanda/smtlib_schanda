(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort message_index 0)
(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x0F)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (message_index message_index) Bool)
(declare-const dummy2 message_index)
(declare-datatypes () ((message_index__ref (mk_message_index__ref (message_index__content message_index)))))
(define-fun message_index__ref___projection ((a message_index__ref)) message_index (message_index__content a))
(declare-sort message_count 0)
(declare-fun message_countqtint (message_count) Int)
(assert (forall ((i message_count)) (and (<= 0 (message_countqtint i)) (<= (message_countqtint i) 16))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (message_count message_count) Bool)
(declare-const dummy3 message_count)
(declare-datatypes () ((message_count__ref (mk_message_count__ref (message_count__content message_count)))))
(define-fun message_count__ref___projection ((a message_count__ref)) message_count (message_count__content a))
(define-fun to_rep1 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__core__message_record__value integer) (rec__core__message_record__size natural)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) integer (rec__core__message_record__value a))
(define-fun us_split_fields_Size__projection ((a us_split_fields)) natural (rec__core__message_record__size a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__core__message_record__value (us_split_fields1 a))) (to_rep (rec__core__message_record__value (us_split_fields1 b)))) (= (to_rep1 (rec__core__message_record__size (us_split_fields1 a))) (to_rep1 (rec__core__message_record__size (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const core__message_record__value__first__bit Int)
(declare-const core__message_record__value__last__bit Int)
(declare-const core__message_record__value__position Int)
(assert (<= 0 core__message_record__value__first__bit))
(assert (< core__message_record__value__first__bit core__message_record__value__last__bit))
(assert (<= 0 core__message_record__value__position))
(declare-const core__message_record__size__first__bit Int)
(declare-const core__message_record__size__last__bit Int)
(declare-const core__message_record__size__position Int)
(assert (<= 0 core__message_record__size__first__bit))
(assert (< core__message_record__size__first__bit core__message_record__size__last__bit))
(assert (<= 0 core__message_record__size__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((message_record__ref (mk_message_record__ref (message_record__content us_rep)))))
(define-fun message_record__ref___projection ((a message_record__ref)) us_rep (message_record__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) us_rep))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (forall ((first (_ BitVec 8))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 8) us_rep))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__core__mailboxT__messages (Array (_ BitVec 8) us_rep)) (rec__core__mailboxT__next_in message_index) (rec__core__mailboxT__next_out message_index) (rec__core__mailboxT__count message_count)))))
(define-fun us_split_fields_Messages__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep) (rec__core__mailboxT__messages a))
(define-fun us_split_fields_Next_In__projection ((a us_split_fields2)) message_index (rec__core__mailboxT__next_in a))
(define-fun us_split_fields_Next_Out__projection ((a us_split_fields2)) message_index (rec__core__mailboxT__next_out a))
(define-fun us_split_fields_Count__projection ((a us_split_fields2)) message_count (rec__core__mailboxT__count a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const core__mailboxT__messages__first__bit Int)
(declare-const core__mailboxT__messages__last__bit Int)
(declare-const core__mailboxT__messages__position Int)
(assert (<= 0 core__mailboxT__messages__first__bit))
(assert (< core__mailboxT__messages__first__bit core__mailboxT__messages__last__bit))
(assert (<= 0 core__mailboxT__messages__position))
(declare-const core__mailboxT__next_in__first__bit Int)
(declare-const core__mailboxT__next_in__last__bit Int)
(declare-const core__mailboxT__next_in__position Int)
(assert (<= 0 core__mailboxT__next_in__first__bit))
(assert (< core__mailboxT__next_in__first__bit core__mailboxT__next_in__last__bit))
(assert (<= 0 core__mailboxT__next_in__position))
(declare-const core__mailboxT__next_out__first__bit Int)
(declare-const core__mailboxT__next_out__last__bit Int)
(declare-const core__mailboxT__next_out__position Int)
(assert (<= 0 core__mailboxT__next_out__first__bit))
(assert (< core__mailboxT__next_out__first__bit core__mailboxT__next_out__last__bit))
(assert (<= 0 core__mailboxT__next_out__position))
(declare-const core__mailboxT__count__first__bit Int)
(declare-const core__mailboxT__count__last__bit Int)
(declare-const core__mailboxT__count__position Int)
(assert (<= 0 core__mailboxT__count__first__bit))
(assert (< core__mailboxT__count__first__bit core__mailboxT__count__last__bit))
(assert (<= 0 core__mailboxT__count__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-datatypes () ((mailboxT__ref (mk_mailboxT__ref (mailboxT__content us_rep1)))))
(define-fun mailboxT__ref___projection ((a mailboxT__ref)) us_rep1 (mailboxT__content a))
(declare-fun item_count (us_rep1) Int)
(declare-fun item_count__function_guard (Int us_rep1) Bool)
(define-fun dynamic_invariant1 ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 16)) (in_range3 temp___expr_208)))
(define-fun to_rep2 ((x message_count)) Int (message_countqtint x))
(declare-fun of_rep2 (Int) message_count)
(assert (forall ((x message_count)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x message_count)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-fun to_rep3 (message_index) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) message_index)
(assert (forall ((x message_index)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x message_index)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x #x10))) (=> (in_range2 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int2 ((x message_index)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x message_index)) (! (in_range_int (to_int2 x)) :pattern ((to_int2 x)))))
(declare-fun temp_____aggregate_def_240 (us_rep) (Array (_ BitVec 8) us_rep))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 0))
(define-fun default_initial_assumption ((temp___expr_238 us_rep1) (temp___skip_top_level_239 Bool)) Bool (and (and (and (= (rec__core__mailboxT__messages (us_split_fields3 temp___expr_238)) (temp_____aggregate_def_240 (mk___rep (mk___split_fields rliteral rliteral1)))) (= (to_rep3 (rec__core__mailboxT__next_in (us_split_fields3 temp___expr_238))) #x00)) (= (to_rep3 (rec__core__mailboxT__next_out (us_split_fields3 temp___expr_238))) #x00)) (= (to_rep2 (rec__core__mailboxT__count (us_split_fields3 temp___expr_238))) 0)))
(assert (forall ((self__ us_rep1)) (! (dynamic_invariant1 (item_count self__) true false true true) :pattern ((item_count self__)))))
(assert (forall ((self__ us_rep1)) (! (= (item_count self__) (to_rep2 (rec__core__mailboxT__count (us_split_fields3 self__)))) :pattern ((item_count self__)))))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_201 (_ BitVec 8)) (temp___is_init_197 Bool) (temp___skip_constant_198 Bool) (temp___do_toplevel_199 Bool) (temp___do_typ_inv_200 Bool)) Bool (=> (or (= temp___is_init_197 true) (bvule #x00 #x0F)) (in_range2 temp___expr_201)))
(assert (forall ((temp___242 us_rep)) (forall ((temp___243 (_ BitVec 8))) (= (select (temp_____aggregate_def_240 temp___242) temp___243) temp___242))))
(declare-const self__ (Array (_ BitVec 8) us_rep))
(declare-const self__1 message_index)
(declare-const self__2 message_index)
(declare-const self__3 message_count)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 natural)
(declare-const o3 integer)
(declare-const o4 natural)
(declare-const o5 (Array (_ BitVec 8) us_rep))
(declare-const o6 (Array (_ BitVec 8) us_rep))
(declare-const o7 message_index)
(declare-const o8 message_index)
(declare-const o9 message_count)
(declare-const o10 (Array (_ BitVec 8) us_rep))
(declare-const o11 message_index)
(declare-const o12 message_index)
(declare-const o13 message_count)
(declare-const o14 message_index)
(declare-const o15 (Array (_ BitVec 8) us_rep))
(declare-const o16 message_index)
(declare-const o17 message_index)
(declare-const o18 message_count)
(declare-const o19 (Array (_ BitVec 8) us_rep))
(declare-const o20 message_index)
(declare-const o21 message_index)
(declare-const o22 message_count)
(declare-const result (Array (_ BitVec 8) us_rep))
(declare-const result1 message_index)
(declare-const result2 message_index)
(declare-const result3 message_count)
(declare-const self__4 (Array (_ BitVec 8) us_rep))
(declare-const self__5 message_index)
(declare-const self__6 message_index)
(declare-const self__7 message_count)
(declare-const result4 mailboxT__ref)
(declare-const self__8 us_rep1)
(declare-const result5 mailboxT__ref)
(declare-const self__9 us_rep1)
(define-fun self__10 () us_rep1 (mk___rep1 (mk___split_fields1 self__4 self__5 self__6 self__7)))
(assert (in_range n))
(assert (< (to_rep2 self__3) 16))
(assert (= (to_rep o) n))
(assert (= o o1))
(assert (= (rec__core__message_record__size (us_split_fields1 (select self__ (to_rep3 self__1)))) o2))
(assert (= o3 o1))
(assert (= o4 o2))
(assert (= o5 (store self__ (to_rep3 self__1) (mk___rep (mk___split_fields o3 o4)))))
(assert (= o5 o6))
(assert (= self__1 o7))
(assert (= self__2 o8))
(assert (= self__3 o9))
(assert (= o10 o6))
(assert (= o11 o7))
(assert (= o12 o8))
(assert (= o13 o9))
(assert (= (mk_mailboxT__ref (mk___rep1 (mk___split_fields1 result result1 result2 result3))) (mk_mailboxT__ref (mk___rep1 (mk___split_fields1 self__ self__1 self__2 self__3)))))
(assert (= self__10 (mk___rep1 (mk___split_fields1 o10 o11 o12 o13))))
(assert (= result4 (mk_mailboxT__ref self__10)))
(assert (= self__8 (mk___rep1 (mk___split_fields1 (store self__4 (to_rep3 self__5) (mk___rep (mk___split_fields (rec__core__message_record__value (us_split_fields1 (select self__4 (to_rep3 self__5)))) rliteral1))) self__5 self__6 self__7))))
(assert (= (to_rep3 o14) (bvurem (bvadd (to_rep3 (rec__core__mailboxT__next_in (us_split_fields3 self__8))) #x01) #x10)))
(assert (= (rec__core__mailboxT__messages (us_split_fields3 self__8)) o15))
(assert (= o14 o16))
(assert (= (rec__core__mailboxT__next_out (us_split_fields3 self__8)) o17))
(assert (= (rec__core__mailboxT__count (us_split_fields3 self__8)) o18))
(assert (= o19 o15))
(assert (= o20 o16))
(assert (= o21 o17))
(assert (= o22 o18))
(assert (= result5 (mk_mailboxT__ref self__8)))
(assert (= self__9 (mk___rep1 (mk___split_fields1 o19 o20 o21 o22))))
(assert (not (in_range3 (+ (to_rep2 (rec__core__mailboxT__count (us_split_fields3 self__9))) 1))))
(check-sat)
(exit)
