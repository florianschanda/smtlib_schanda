(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun olt (us_rep us_rep) Bool)
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort word32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq3 (word32 word32) Bool)
(declare-const dummy3 word32)
(declare-datatypes () ((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content a))
(declare-fun to_rep1 (word32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) word32)
(assert (forall ((x word32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int2 ((x word32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x word32)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))
(assert (forall ((a (Array Int word32))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int word32))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int word32)) (a__first Int) (a__last Int) (b (Array Int word32)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-sort big_int_range 0)
(declare-fun big_int_rangeqtint (big_int_range) Int)
(assert (forall ((i big_int_range)) (and (<= 0 (big_int_rangeqtint i)) (<= (big_int_rangeqtint i) 2147483646))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (big_int_range big_int_range) Bool)
(declare-const dummy4 big_int_range)
(declare-datatypes () ((big_int_range__ref (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range (big_int_range__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int word32)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))
(define-fun of_array ((a (Array Int word32)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int word32)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int word32)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int word32)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content a))
(declare-fun num_of_big_int (us_t Int Int) us_rep)
(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_335 us_t) (temp___is_init_331 Bool) (temp___skip_constant_332 Bool) (temp___do_toplevel_333 Bool) (temp___do_typ_inv_334 Bool)) Bool (=> (not (= temp___skip_constant_332 true)) (dynamic_property 0 2147483646 (first1 temp___expr_335) (last1 temp___expr_335))))
(assert true)
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const a_last Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const b_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t41b__ref (mk_t41b__ref (t41b__content integer)))))
(define-fun t41b__ref___projection ((a1 t41b__ref)) integer (t41b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_328 Int) (temp___is_init_324 Bool) (temp___skip_constant_325 Bool) (temp___do_toplevel_326 Bool) (temp___do_typ_inv_327 Bool)) Bool (=> (or (= temp___is_init_324 true) (<= 0 2147483646)) (in_range3 temp___expr_328)))
(define-fun dynamic_invariant4 ((temp___expr_253 (_ BitVec 32)) (temp___is_init_249 Bool) (temp___skip_constant_250 Bool) (temp___do_toplevel_251 Bool) (temp___do_typ_inv_252 Bool)) Bool true)
(declare-const j Int)
(declare-const result__ Bool)
(declare-const i Int)
(declare-const lsc__bignum__less__result Bool)
(declare-const temp___670 Int)
(declare-const temp___669 Bool)
(declare-const temp___668 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 word32)
(declare-const o6 Int)
(declare-const o7 word32)
(declare-const o8 (_ BitVec 32))
(declare-const o9 (_ BitVec 32))
(declare-const o10 Int)
(declare-const o11 word32)
(declare-const o12 Int)
(declare-const o13 word32)
(declare-const o14 (_ BitVec 32))
(declare-const o15 (_ BitVec 32))
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 us_rep)
(declare-const j1 Int)
(declare-const result Bool)
(declare-const result__1 Bool)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const j2 Int)
(declare-const result__2 Bool)
(declare-const i2 Int)
(declare-const result2 Int)
(declare-const j3 Int)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result__3 Bool)
(declare-const result5 Bool)
(declare-const result__4 Bool)
(declare-const result__5 Bool)
(declare-const j4 Int)
(declare-const result__6 Bool)
(declare-const i3 Int)
(declare-const j5 Int)
(declare-const result__7 Bool)
(declare-const i4 Int)
(declare-const j6 Int)
(declare-const result__8 Bool)
(declare-const i5 Int)
(declare-const j7 Int)
(declare-const result__9 Bool)
(declare-const i6 Int)
(declare-const result6 Bool)
(declare-const lsc__bignum__less__result1 Bool)
(declare-const lsc__bignum__less__result2 Bool)
(declare-const lsc__bignum__less__result3 Bool)
(declare-const j8 int__ref)
(declare-const result__10 bool__ref)
(declare-const i7 int__ref)
(declare-const lsc__bignum__less__result4 bool__ref)
(declare-const j9 Int)
(declare-const result__11 Bool)
(declare-const i8 Int)
(declare-const lsc__bignum__less__result5 Bool)
(define-fun i9 () int__ref (mk_int__ref i5))
(define-fun result__12 () bool__ref (mk_bool__ref result__8))
(define-fun j10 () int__ref (mk_int__ref j6))
(define-fun result__13 () bool__ref (mk_bool__ref result__6))
(assert (dynamic_invariant1 a true false true true))
(assert (in_range2 a_first))
(assert (in_range2 a_last))
(assert (dynamic_invariant1 b true false true true))
(assert (in_range2 b_first))
(assert (and (and (and (and (and (<= (to_rep (first (rt a))) a_first) (<= a_first (to_rep (last (rt a))))) (and (<= (to_rep (first (rt a))) a_last) (<= a_last (to_rep (last (rt a)))))) (and (<= (to_rep (first (rt b))) b_first) (<= b_first (to_rep (last (rt b)))))) (and (<= (to_rep (first (rt b))) (+ b_first (- a_last a_first))) (<= (+ b_first (- a_last a_first)) (to_rep (last (rt b)))))) (<= a_first a_last)))
(assert (=> (<= 0 2147483647) (in_range2 j)))
(assert (= (mk_bool__ref result) (mk_bool__ref result__)))
(assert (= result__1 (distinct 0 0)))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 a_last))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= temp___670 i1)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= temp___669 result__1)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= temp___668 j)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (and (= (oeq (num_of_big_int a (+ i2 1) (- a_last i2)) (num_of_big_int b (+ (+ b_first (- i2 a_first)) 1) (- a_last i2))) true) (not (= result__2 true)))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (and (and (=> (<= 0 2147483647) (in_range2 j2)) (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2))) (and (<= a_first i2) (<= i2 a_last)))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (and (= o (- i2 a_first)) (in_range1 (- i2 a_first)))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= o1 (+ b_first o))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (and (= o2 o1) (in_range1 o1))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (and (= o3 o2) (in_range2 o2))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j2 result2)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j3 o3)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (or (and (and (= result__3 result__4) (= result__5 result__3)) (and (and (and (and (and (and (<= (to_rep (first (rt b))) j3) (<= j3 (to_rep (last (rt b))))) (= o6 j3)) (= o7 (select (elts b) o6))) (= o8 (to_rep1 o7))) (and (and (and (and (and (<= (to_rep (first (rt a))) i2) (<= i2 (to_rep (last (rt a))))) (= o4 i2)) (= o5 (select (elts a) o4))) (= o9 (to_rep1 o5))) (= result3 (ite (bvult o9 o8) true false)))) (and (= result3 true) (and (= result__2 result4) (= result__3 (distinct 1 0)))))) (and (and (and (and (and (and (and (<= (to_rep (first (rt b))) j3) (<= j3 (to_rep (last (rt b))))) (= o6 j3)) (= o7 (select (elts b) o6))) (= o8 (to_rep1 o7))) (and (and (and (and (and (<= (to_rep (first (rt a))) i2) (<= i2 (to_rep (last (rt a))))) (= o4 i2)) (= o5 (select (elts a) o4))) (= o9 (to_rep1 o5))) (= result3 (ite (bvult o9 o8) true false)))) (and (not (= result3 true)) (= result__3 result__2))) (and (and (= result__3 result__4) (= result__5 result__3)) (or (and (and (and (and (and (and (<= (to_rep (first (rt b))) j3) (<= j3 (to_rep (last (rt b))))) (= o12 j3)) (= o13 (select (elts b) o12))) (= o14 (to_rep1 o13))) (and (and (and (and (and (<= (to_rep (first (rt a))) i2) (<= i2 (to_rep (last (rt a))))) (= o10 i2)) (= o11 (select (elts a) o10))) (= o15 (to_rep1 o11))) (= result5 (ite (bvugt o15 o14) true false)))) (= result5 true)) (and (and (and (and (and (and (and (<= (to_rep (first (rt b))) j3) (<= j3 (to_rep (last (rt b))))) (= o12 j3)) (= o13 (select (elts b) o12))) (= o14 (to_rep1 o13))) (and (and (and (and (and (<= (to_rep (first (rt a))) i2) (<= i2 (to_rep (last (rt a))))) (= o10 i2)) (= o11 (select (elts a) o10))) (= o15 (to_rep1 o11))) (= result5 (ite (bvugt o15 o14) true false)))) (not (= result5 true))) (= i2 a_first))))))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= i2 i3)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= result__13 (mk_bool__ref result__4))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j3 j4)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= i4 i2)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= result__7 result__5)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j5 j3)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= i9 (mk_int__ref i3))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= result__12 result__13)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j10 (mk_int__ref j4))))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= i6 i4)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= result__9 result__7)))
(assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j7 j5)))
(assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= i1 i5)))
(assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= result__1 result__8)))
(assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= j10 (mk_int__ref j))))
(assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= i6 i1)))
(assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= result__9 result__1)))
(assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= j7 j1)))
(assert (= lsc__bignum__less__result1 lsc__bignum__less__result2))
(assert (= lsc__bignum__less__result3 lsc__bignum__less__result1))
(assert (= (mk_bool__ref result6) (mk_bool__ref lsc__bignum__less__result)))
(assert (= lsc__bignum__less__result1 result__8))
(assert (= lsc__bignum__less__result4 (mk_bool__ref lsc__bignum__less__result2)))
(assert (= i7 i9))
(assert (= result__10 result__12))
(assert (= j8 j10))
(assert (= lsc__bignum__less__result5 lsc__bignum__less__result3))
(assert (= i8 i6))
(assert (= result__11 result__9))
(assert (= j9 j7))
(assert (and (= o18 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o19 (+ o18 1)))
(assert (and (= o20 o19) (in_range1 o19)))
(assert (and (= o21 o20) (in_range2 o20)))
(assert (= o22 (num_of_big_int b b_first o21)))
(assert (and (= o16 (- a_last a_first)) (in_range1 (- a_last a_first))))
(assert (= o17 (+ o16 1)))
(assert (not (in_range1 o17)))
(check-sat)
(exit)
