(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort state_range 0)
(declare-fun state_rangeqtint (state_range) Int)
(assert (forall ((i state_range)) (and (<= 0 (state_rangeqtint i)) (<= (state_rangeqtint i) 623))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 623)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (state_range state_range) Bool)
(declare-const dummy1 state_range)
(declare-datatypes () ((state_range__ref (mk_state_range__ref (state_range__content state_range)))))
(define-fun state_range__ref___projection ((a state_range__ref)) state_range (state_range__content a))
(define-fun to_rep ((x state_range)) Int (state_rangeqtint x))
(declare-fun of_rep (Int) state_range)
(assert (forall ((x state_range)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x state_range)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort unsigned_32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (unsigned_32 unsigned_32) Bool)
(declare-const dummy2 unsigned_32)
(declare-datatypes () ((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32 (unsigned_32__content a))
(declare-fun to_rep1 (unsigned_32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) unsigned_32)
(assert (forall ((x unsigned_32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int2 ((x unsigned_32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x unsigned_32)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int unsigned_32))))))
(declare-fun slide ((Array Int unsigned_32) Int Int) (Array Int unsigned_32))
(assert (forall ((a (Array Int unsigned_32))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int unsigned_32))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int unsigned_32)) (a__first Int) (a__last Int) (b (Array Int unsigned_32)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int unsigned_32))
(declare-const value__size Int)
(declare-fun object__size ((Array Int unsigned_32)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int unsigned_32)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int unsigned_32)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int unsigned_32) (Array Int unsigned_32)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__random__generator__state (Array Int unsigned_32)) (rec__random__generator__index state_range)))))
(define-fun us_split_fields_State__projection ((a us_split_fields)) (Array Int unsigned_32) (rec__random__generator__state a))
(define-fun us_split_fields_Index__projection ((a us_split_fields)) state_range (rec__random__generator__index a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__random__generator__state (us_split_fields1 a)) 0 623 (rec__random__generator__state (us_split_fields1 b)) 0 623) true) (= (to_rep (rec__random__generator__index (us_split_fields1 a))) (to_rep (rec__random__generator__index (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const random__generator__state__first__bit Int)
(declare-const random__generator__state__last__bit Int)
(declare-const random__generator__state__position Int)
(assert (<= 0 random__generator__state__first__bit))
(assert (< random__generator__state__first__bit random__generator__state__last__bit))
(assert (<= 0 random__generator__state__position))
(declare-const random__generator__index__first__bit Int)
(declare-const random__generator__index__last__bit Int)
(declare-const random__generator__index__position Int)
(assert (<= 0 random__generator__index__first__bit))
(assert (< random__generator__index__first__bit random__generator__index__last__bit))
(assert (<= 0 random__generator__index__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((generator__ref (mk_generator__ref (generator__content us_rep)))))
(define-fun generator__ref___projection ((a generator__ref)) us_rep (generator__content a))
(define-fun dynamic_invariant1 ((temp___expr_213 (_ BitVec 32)) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool) (temp___do_typ_inv_212 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const min Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const max Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const n (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const slop (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(assert (= n ((_ int2bv 32) (+ (- max min) 1))))
(assert (= slop (bvadd (bvurem #xFFFFFFFF n) #x00000001)))
(define-fun dynamic_invariant2 ((temp___expr_241 Int) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool (=> (or (= temp___is_init_237 true) (<= 0 623)) (in_range2 temp___expr_241)))
(declare-const g__split_fields (Array Int unsigned_32))
(declare-const g__split_fields1 state_range)
(declare-const value Int)
(declare-const x (_ BitVec 32))
(declare-const o Int)
(declare-const random__random_integer__B_4__n__assume (_ BitVec 32))
(declare-const temp___367 (Array Int unsigned_32))
(declare-const temp___3671 state_range)
(declare-const temp___366 (_ BitVec 32))
(declare-const o1 Int)
(declare-const g__split_fields2 (Array Int unsigned_32))
(declare-const g__split_fields3 state_range)
(declare-const x1 (_ BitVec 32))
(declare-const g__split_fields4 (Array Int unsigned_32))
(declare-const g__split_fields5 state_range)
(declare-const x2 (_ BitVec 32))
(declare-const g__split_fields6 (Array Int unsigned_32))
(declare-const g__split_fields7 state_range)
(declare-const x3 (_ BitVec 32))
(declare-const g__split_fields8 (Array Int unsigned_32))
(declare-const g__split_fields9 state_range)
(declare-const x4 (_ BitVec 32))
(declare-const g__split_fields10 (Array Int unsigned_32))
(declare-const g__split_fields11 state_range)
(declare-const x5 (_ BitVec 32))
(declare-const g__split_fields12 us_split_fields)
(declare-const x6 (_ BitVec 32))
(declare-const result t__ref)
(declare-const x7 (_ BitVec 32))
(declare-const g__split_fields13 us_split_fields__ref)
(declare-const x8 t__ref)
(declare-const g__split_fields14 us_split_fields)
(declare-const x9 (_ BitVec 32))
(declare-const result1 int__ref)
(declare-const value1 Int)
(declare-const g__split_fields15 us_split_fields__ref)
(declare-const value2 int__ref)
(declare-const x10 t__ref)
(declare-const g__split_fields16 us_split_fields)
(declare-const value3 Int)
(declare-const x11 (_ BitVec 32))
(define-fun x12 () t__ref (mk_t__ref x5))
(define-fun g__split_fields17 () us_split_fields__ref (mk___split_fields__ref (mk___split_fields g__split_fields10 g__split_fields11)))
(define-fun g__split_fields18 () us_split_fields (mk___split_fields g__split_fields8 g__split_fields9))
(define-fun g__split_fields19 () us_split_fields (mk___split_fields g__split_fields2 g__split_fields3))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 value)))
(assert (in_range1 min))
(assert (in_range1 max))
(assert (<= min max))
(assert (=> (and (= min (- 2147483648)) (= max 2147483647)) (= x8 (mk_t__ref x1))))
(assert (=> (and (= min (- 2147483648)) (= max 2147483647)) (= g__split_fields13 (mk___split_fields__ref g__split_fields19))))
(assert (=> (and (= min (- 2147483648)) (= max 2147483647)) (= x9 x1)))
(assert (=> (and (= min (- 2147483648)) (= max 2147483647)) (= g__split_fields14 g__split_fields19)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (and (= o (+ (- max min) 1)) (uint_in_range (+ (- max min) 1)))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= random__random_integer__B_4__n__assume ((_ int2bv 32) o))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= random__random_integer__B_4__n__assume n)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= (bvadd (bvurem #xFFFFFFFF n) #x00000001) slop)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (and (= g__split_fields temp___367) (= g__split_fields1 temp___3671))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= temp___366 x)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (or (= slop n) (bvule x2 (bvsub #xFFFFFFFF slop)))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x2 x3)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields6 g__split_fields4)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields7 g__split_fields5)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x4 x2)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields18 (mk___split_fields g__split_fields4 g__split_fields5))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x12 (mk_t__ref x3))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields17 (mk___split_fields__ref (mk___split_fields g__split_fields6 g__split_fields7)))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x6 x4)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields12 g__split_fields18)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= result x12)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x7 (bvurem x5 n))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (and (bvule #x00000000 x7) (bvule x7 (bvsub n #x00000001)))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x8 (mk_t__ref x7))))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields13 g__split_fields17)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= x9 x7)))
(assert (=> (not (and (= min (- 2147483648)) (= max 2147483647))) (= g__split_fields14 g__split_fields12)))
(assert (and (= o1 (+ min (bv2nat (t__content x8)))) (in_range1 (+ min (bv2nat (t__content x8))))))
(assert (= result1 (mk_int__ref value)))
(assert (= value1 o1))
(assert (= x10 x8))
(assert (= value2 (mk_int__ref value1)))
(assert (= g__split_fields15 g__split_fields13))
(assert (= x11 x9))
(assert (= value3 value1))
(assert (= g__split_fields16 g__split_fields14))
(assert (not (<= min (int__content value2))))
(check-sat)
(exit)
