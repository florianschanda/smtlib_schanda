(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 65535)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (16 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  16)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (16 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 16))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 16))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(65536 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  65536)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 16)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 65535)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  65536) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  65536)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 65536)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  65536) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 65536)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 16)]. (eq_sub(x, y, 0, 16) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type ar_index

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : ar_index, ar_index -> bool

logic dummy : ar_index

type ar_index__ref = { ar_index__content : ar_index
}

function ar_index__ref___projection(a: ar_index__ref) : ar_index =
  (a).ar_index__content

logic to_rep : ar_index -> t

logic of_rep : t -> ar_index

axiom inversion_axiom :
  (forall x:ar_index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: ar_index) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:ar_index [to_int2(x)]. uint_in_range(to_int2(x)))

type length_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 65536))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : length_type, length_type -> bool

logic dummy1 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref___projection(a: length_type__ref) : length_type =
  (a).length_type__content

logic to_rep1 : length_type -> int

logic of_rep1 : int -> length_type

axiom inversion_axiom1 :
  (forall x:length_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:length_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (t,integer) farray
}

logic slide : (t,integer) farray, t, t -> (t,integer) farray

axiom slide_eq :
  (forall a:(t,integer) farray.
  (forall first:t [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t,integer) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

logic concat : (t,integer) farray, t, t, (t,integer) farray, t,
  t -> (t,integer) farray

axiom concat_def :
  (forall a:(t,integer) farray. forall b:(t,integer) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t.
  (forall i:t [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((ule(a_first, i) and ule(i, a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and (ugt(i, a_last) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[add(sub(i, a_last), sub(b_first,
  one))])))))))

logic singleton : integer, t -> (t,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:t [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (t,integer) farray, t, t, (t,integer) farray, t, t -> bool

axiom bool_eq_def5 :
  (forall a:(t,integer) farray. forall a__first:t. forall a__last:t.
  forall b:(t,integer) farray. forall b__first:t. forall b__last:t
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)]. (((((ule(a__first,
  a__last) and (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) or ((not ule(a__first, a__last)) and
  ugt(b__first, b__last))) and
  (forall temp___idx_132:t. (((ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)) and
  (to_rep2((a[temp___idx_132])) = to_rep2((b[add(sub(b__first, a__first),
  temp___idx_132)])))) or (not (ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)))))) -> (bool_eq6(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule(a__first, a__last) ->
  (ule(b__first, b__last) and (sub(a__last, a__first) = sub(b__last,
  b__first)))) and ((not ule(a__first, a__last)) -> ugt(b__first,
  b__last))) and
  (forall temp___idx_132:t. ((ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[add(sub(b__first, a__first),
  temp___idx_132)]))))))) -> (bool_eq6(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev :
  (forall a:(t,integer) farray. forall b:(t,integer) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq6(b, b__first, b__last, a, a__first, a__last) = true) ->
  (((ule(a__first, a__last) -> (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) and ((not ule(a__first, a__last)) ->
  ugt(b__first, b__last))) and
  (forall temp___idx_132:t. ((ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[add(sub(b__first, a__first),
  temp___idx_132)])))))))))

logic compare : (t,integer) farray, t, t, (t,integer) farray, t, t -> int

axiom compare_def_eq :
  (forall a:(t,integer) farray. forall b:(t,integer) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a, a_first, a_last, b,
  b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(t,integer) farray. forall b:(t,integer) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) <  0) <->
  (exists i:t. exists j:t. (ule(i, a_last) and (ult(j, b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  (ult(i, a_last) and (to_rep2((a[add(i, one)])) <  to_rep2((b[add(j,
  one)]))))))))))))

axiom compare_def_gt :
  (forall a:(t,integer) farray. forall b:(t,integer) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((0 <  compare(a,
  a_first, a_last, b, b_first, b_last)) <->
  (exists i:t. exists j:t. (ule(i, b_last) and (ult(j, a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  (ult(i, b_last) and (to_rep2((b[add(i, one)])) <  to_rep2((a[add(j,
  one)]))))))))))))

type t1

logic first : t1 -> ar_index

logic last : t1 -> ar_index

logic mk : t, t -> t1

axiom mk_def :
  (forall f:t. forall l:t [mk(f, l)]. ((to_rep(first(mk(f, l))) = f) and
  (to_rep(last(mk(f, l))) = l)))

predicate dynamic_property(range_first: t, range_last: t, low: t, high: t) =
  true

type us_t = { elts : (t,integer) farray; rt : t1
}

function to_array(a: us_t) : (t,integer) farray = (a).elts

function of_array(a: (t,integer) farray, f: t, l: t) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : t = to_rep(first((a).rt))

function last1(a: us_t) : t = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. ((ule(first1(a), last1(a)) ->
  (length(a) = ((tqtint(last1(a)) - tqtint(first1(a))) + 1))) and
  ((not ule(first1(a), last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (t,integer) farray -> int

logic value__component__size : int

logic object__component__size : (t,integer) farray -> int

logic value__alignment : int

logic object__alignment : (t,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(t,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(t,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(t,integer) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (t,integer) farray

logic dummy4 : t1

type model____ref = { model____content : us_t
}

function model____ref___projection(a: model____ref) : us_t =
  (a).model____content

logic dummy5 : (t,integer) farray

logic value__size1 : int

logic object__size1 : (t,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (t,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (t,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(t,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(t,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(t,integer) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (t,integer) farray, (t,integer) farray -> bool

type us_split_fields = { rec__ring_buf__ring_buffer__data :
(t,integer) farray; rec__ring_buf__ring_buffer__first : ar_index;
rec__ring_buf__ring_buffer__length : length_type
}

function us_split_fields_Data__projection(a: us_split_fields) : (t,integer) farray =
  (a).rec__ring_buf__ring_buffer__data

function us_split_fields_First__projection(a: us_split_fields) : ar_index =
  (a).rec__ring_buf__ring_buffer__first

function us_split_fields_Length__projection(a: us_split_fields) : length_type =
  (a).rec__ring_buf__ring_buffer__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  (((((bool_eq6(((a).us_split_fields1).rec__ring_buf__ring_buffer__data,
  of_int(0), of_int(65535),
  ((b).us_split_fields1).rec__ring_buf__ring_buffer__data, of_int(0),
  of_int(65535)) = true) and
  (to_rep(((a).us_split_fields1).rec__ring_buf__ring_buffer__first) = to_rep(((b).us_split_fields1).rec__ring_buf__ring_buffer__first))) and
  (to_rep1(((a).us_split_fields1).rec__ring_buf__ring_buffer__length) = to_rep1(((b).us_split_fields1).rec__ring_buf__ring_buffer__length))) ->
  (bool_eq8(a, b) = true)) and
  ((not (((bool_eq6(((a).us_split_fields1).rec__ring_buf__ring_buffer__data,
  of_int(0), of_int(65535),
  ((b).us_split_fields1).rec__ring_buf__ring_buffer__data, of_int(0),
  of_int(65535)) = true) and
  (to_rep(((a).us_split_fields1).rec__ring_buf__ring_buffer__first) = to_rep(((b).us_split_fields1).rec__ring_buf__ring_buffer__first))) and
  (to_rep1(((a).us_split_fields1).rec__ring_buf__ring_buffer__length) = to_rep1(((b).us_split_fields1).rec__ring_buf__ring_buffer__length)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(t,integer) farray. forall a1:ar_index. forall a2:length_type.
  (0 <= object__size2({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = a; rec__ring_buf__ring_buffer__first =
  a1; rec__ring_buf__ring_buffer__length = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(t,integer) farray. forall a1:ar_index. forall a2:length_type.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = a; rec__ring_buf__ring_buffer__first =
  a1; rec__ring_buf__ring_buffer__length = a2 } })))

logic ring_buf__ring_buffer__data__first__bit : int

logic ring_buf__ring_buffer__data__last__bit : int

logic ring_buf__ring_buffer__data__position : int

axiom ring_buf__ring_buffer__data__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__data__first__bit)

axiom ring_buf__ring_buffer__data__last__bit_axiom :
  (ring_buf__ring_buffer__data__first__bit <  ring_buf__ring_buffer__data__last__bit)

axiom ring_buf__ring_buffer__data__position_axiom :
  (0 <= ring_buf__ring_buffer__data__position)

logic ring_buf__ring_buffer__first__first__bit : int

logic ring_buf__ring_buffer__first__last__bit : int

logic ring_buf__ring_buffer__first__position : int

axiom ring_buf__ring_buffer__first__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__first__first__bit)

axiom ring_buf__ring_buffer__first__last__bit_axiom :
  (ring_buf__ring_buffer__first__first__bit <  ring_buf__ring_buffer__first__last__bit)

axiom ring_buf__ring_buffer__first__position_axiom :
  (0 <= ring_buf__ring_buffer__first__position)

logic ring_buf__ring_buffer__length__first__bit : int

logic ring_buf__ring_buffer__length__last__bit : int

logic ring_buf__ring_buffer__length__position : int

axiom ring_buf__ring_buffer__length__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__length__first__bit)

axiom ring_buf__ring_buffer__length__last__bit_axiom :
  (ring_buf__ring_buffer__length__first__bit <  ring_buf__ring_buffer__length__last__bit)

axiom ring_buf__ring_buffer__length__position_axiom :
  (0 <= ring_buf__ring_buffer__length__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : (t,integer) farray

logic dummy7 : ar_index

logic dummy8 : length_type

type ring_buffer__ref = { ring_buffer__content : us_rep
}

function ring_buffer__ref___projection(a: ring_buffer__ref) : us_rep =
  (a).ring_buffer__content

logic to_model : us_rep -> us_t

logic to_model__function_guard : us_t, us_rep -> prop

logic attr__ATTRIBUTE_MODULUS1 : t

predicate dynamic_property1(first_int: t, last_int: t, x: t) =
  (ule(first_int, x) and ule(x, last_int))

predicate dynamic_property_int(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : t, t -> bool

axiom bool_eq_def7 :
  (forall x:t. forall y:t [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq6 : ar_index, ar_index -> bool

logic dummy9 : ar_index

type t21s__ref = { t21s__content : ar_index
}

function t21s__ref___projection(a: t21s__ref) : ar_index = (a).t21s__content

type t2

logic first2 : t2 -> ar_index

logic last2 : t2 -> ar_index

logic mk1 : t, t -> t2

axiom mk_def1 :
  (forall f:t. forall l:t [mk1(f, l)]. ((to_rep(first2(mk1(f, l))) = f) and
  (to_rep(last2(mk1(f, l))) = l)))

predicate dynamic_property2(range_first: t, range_last: t, low: t, high: t) =
  (ule(low, high) -> (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))

type us_t1 = { elts1 : (t,integer) farray; rt1 : t2
}

function to_array1(a: us_t1) : (t,integer) farray = (a).elts1

function of_array1(a: (t,integer) farray, f: t, l: t) : us_t1 = { elts1 = a;
  rt1 = mk1(f, l) }

function first3(a: us_t1) : t = to_rep(first2((a).rt1))

function last3(a: us_t1) : t = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. ((ule(first3(a), last3(a)) ->
  (length1(a) = ((tqtint(last3(a)) - tqtint(first3(a))) + 1))) and
  ((not ule(first3(a), last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (t,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (t,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (t,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(t,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(t,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(t,integer) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy10 : (t,integer) farray

logic dummy11 : t2

type t22s__ref = { t22s__content : us_t1
}

function t22s__ref___projection(a: t22s__ref) : us_t1 = (a).t22s__content

logic attr__ATTRIBUTE_MODULUS2 : t

predicate dynamic_property3(first_int: t, last_int: t, x: t) =
  (ule(first_int, x) and ule(x, last_int))

predicate dynamic_property_int1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : t, t -> bool

axiom bool_eq_def8 :
  (forall x:t. forall y:t [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic user_eq8 : ar_index, ar_index -> bool

logic dummy12 : ar_index

type t23s__ref = { t23s__content : ar_index
}

function t23s__ref___projection(a: t23s__ref) : ar_index = (a).t23s__content

type t3

logic first4 : t3 -> ar_index

logic last4 : t3 -> ar_index

logic mk2 : t, t -> t3

axiom mk_def2 :
  (forall f:t. forall l:t [mk2(f, l)]. ((to_rep(first4(mk2(f, l))) = f) and
  (to_rep(last4(mk2(f, l))) = l)))

predicate dynamic_property4(range_first: t, range_last: t, low: t, high: t) =
  (ule(low, high) -> (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))

type us_t2 = { elts2 : (t,integer) farray; rt2 : t3
}

function to_array2(a: us_t2) : (t,integer) farray = (a).elts2

function of_array2(a: (t,integer) farray, f: t, l: t) : us_t2 = { elts2 = a;
  rt2 = mk2(f, l) }

function first5(a: us_t2) : t = to_rep(first4((a).rt2))

function last5(a: us_t2) : t = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. ((ule(first5(a), last5(a)) ->
  (length2(a) = ((tqtint(last5(a)) - tqtint(first5(a))) + 1))) and
  ((not ule(first5(a), last5(a))) -> (length2(a) = 0))))

logic value__size4 : int

logic object__size4 : (t,integer) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (t,integer) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (t,integer) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(t,integer) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(t,integer) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(t,integer) farray. (0 <= object__alignment4(a)))

function bool_eq12(x: us_t2, y: us_t2) : bool = bool_eq6((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq9 : us_t2, us_t2 -> bool

logic dummy13 : (t,integer) farray

logic dummy14 : t3

type t24s__ref = { t24s__content : us_t2
}

function t24s__ref___projection(a: t24s__ref) : us_t2 = (a).t24s__content

logic attr__ATTRIBUTE_MODULUS3 : t

predicate dynamic_property5(first_int: t, last_int: t, x: t) =
  (ule(first_int, x) and ule(x, last_int))

predicate dynamic_property_int2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq10 : ar_index, ar_index -> bool

logic dummy15 : ar_index

type t25s__ref = { t25s__content : ar_index
}

function t25s__ref___projection(a: t25s__ref) : ar_index = (a).t25s__content

type t4

logic first6 : t4 -> ar_index

logic last6 : t4 -> ar_index

logic mk3 : t, t -> t4

axiom mk_def3 :
  (forall f:t. forall l:t [mk3(f, l)]. ((to_rep(first6(mk3(f, l))) = f) and
  (to_rep(last6(mk3(f, l))) = l)))

predicate dynamic_property6(range_first: t, range_last: t, low: t, high: t) =
  (ule(low, high) -> (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))

type us_t3 = { elts3 : (t,integer) farray; rt3 : t4
}

function to_array3(a: us_t3) : (t,integer) farray = (a).elts3

function of_array3(a: (t,integer) farray, f: t, l: t) : us_t3 = { elts3 = a;
  rt3 = mk3(f, l) }

function first7(a: us_t3) : t = to_rep(first6((a).rt3))

function last7(a: us_t3) : t = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. ((ule(first7(a), last7(a)) ->
  (length3(a) = ((tqtint(last7(a)) - tqtint(first7(a))) + 1))) and
  ((not ule(first7(a), last7(a))) -> (length3(a) = 0))))

logic value__size5 : int

logic object__size5 : (t,integer) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (t,integer) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (t,integer) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(t,integer) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(t,integer) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(t,integer) farray. (0 <= object__alignment5(a)))

function bool_eq14(x: us_t3, y: us_t3) : bool = bool_eq6((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq11 : us_t3, us_t3 -> bool

logic dummy16 : (t,integer) farray

logic dummy17 : t4

type t26s__ref = { t26s__content : us_t3
}

function t26s__ref___projection(a: t26s__ref) : us_t3 = (a).t26s__content

axiom to_model__post_axiom :
  (forall r:(t,integer) farray. forall r1:ar_index. forall r2:length_type
  [to_model({ us_split_fields1 = { rec__ring_buf__ring_buffer__data = r;
  rec__ring_buf__ring_buffer__first = r1;
  rec__ring_buf__ring_buffer__length = r2 } })]. dynamic_property(of_int(0),
  of_int(65535), to_rep(first((to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r; rec__ring_buf__ring_buffer__first =
  r1; rec__ring_buf__ring_buffer__length = r2 } })).rt)),
  to_rep(last((to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r; rec__ring_buf__ring_buffer__first =
  r1; rec__ring_buf__ring_buffer__length = r2 } })).rt))))

axiom to_model__def_axiom :
  (forall r:(t,integer) farray. forall r1:ar_index. forall r2:length_type
  [to_model({ us_split_fields1 = { rec__ring_buf__ring_buffer__data = r;
  rec__ring_buf__ring_buffer__first = r1;
  rec__ring_buf__ring_buffer__length = r2 } })].
  (((65535 <  ((tqtint(to_rep(r1)) + to_rep1(r2)) - 1)) -> (((length1({
  elts1 = r; rt1 = mk1(to_rep(r1), of_int(65535)) }) = 0) -> (to_model({
  us_split_fields1 = { rec__ring_buf__ring_buffer__data = r;
  rec__ring_buf__ring_buffer__first = r1;
  rec__ring_buf__ring_buffer__length = r2 } }) = { elts = r; rt =
  mk(to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0),
  of_int(to_rep1(r2))), sub(of_int(65535), to_rep(r1))), of_int(1))))),
  to_rep(last4(mk2(of_int(0), sub(sub(add(of_int(0), of_int(to_rep1(r2))),
  sub(of_int(65535), to_rep(r1))), of_int(1)))))) })) and ((not (length1({
  elts1 = r; rt1 = mk1(to_rep(r1), of_int(65535)) }) = 0)) ->
  (((tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535))))) <= tqtint(to_rep(last2(mk1(to_rep(r1),
  of_int(65535)))))) -> (((tqtint(to_rep(first4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))) <= tqtint(to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1))))))) -> (to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r; rec__ring_buf__ring_buffer__first =
  r1; rec__ring_buf__ring_buffer__length = r2 } }) = { elts = concat(r,
  to_rep(first2(mk1(to_rep(r1), of_int(65535)))),
  to_rep(last2(mk1(to_rep(r1), of_int(65535)))), r,
  to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0), of_int(to_rep1(r2))),
  sub(of_int(65535), to_rep(r1))), of_int(1))))), to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))); rt = mk(to_rep(first2(mk1(to_rep(r1),
  of_int(65535)))), of_int(((tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535))))) + (((tqtint(to_rep(last2(mk1(to_rep(r1),
  of_int(65535))))) - tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535)))))) + 1) + ((tqtint(to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))) - tqtint(to_rep(first4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1))))))) + 1))) - 1))) })) and
  ((not (tqtint(to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0),
  of_int(to_rep1(r2))), sub(of_int(65535), to_rep(r1))),
  of_int(1)))))) <= tqtint(to_rep(last4(mk2(of_int(0), sub(sub(add(of_int(0),
  of_int(to_rep1(r2))), sub(of_int(65535), to_rep(r1))), of_int(1)))))))) ->
  (to_model({ us_split_fields1 = { rec__ring_buf__ring_buffer__data = r;
  rec__ring_buf__ring_buffer__first = r1;
  rec__ring_buf__ring_buffer__length = r2 } }) = { elts = concat(r,
  to_rep(first2(mk1(to_rep(r1), of_int(65535)))),
  to_rep(last2(mk1(to_rep(r1), of_int(65535)))), r,
  to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0), of_int(to_rep1(r2))),
  sub(of_int(65535), to_rep(r1))), of_int(1))))), to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))); rt = mk(to_rep(first2(mk1(to_rep(r1),
  of_int(65535)))), of_int(((tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535))))) + (((tqtint(to_rep(last2(mk1(to_rep(r1),
  of_int(65535))))) - tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535)))))) + 1) + 0)) - 1))) })))) and
  ((not (tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535))))) <= tqtint(to_rep(last2(mk1(to_rep(r1),
  of_int(65535))))))) -> (((tqtint(to_rep(first4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))) <= tqtint(to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1))))))) -> (to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r; rec__ring_buf__ring_buffer__first =
  r1; rec__ring_buf__ring_buffer__length = r2 } }) = { elts = concat(r,
  to_rep(first2(mk1(to_rep(r1), of_int(65535)))),
  to_rep(last2(mk1(to_rep(r1), of_int(65535)))), r,
  to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0), of_int(to_rep1(r2))),
  sub(of_int(65535), to_rep(r1))), of_int(1))))), to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))); rt = mk(to_rep(first2(mk1(to_rep(r1),
  of_int(65535)))), of_int(((tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535))))) + (0 + ((tqtint(to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))) - tqtint(to_rep(first4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1))))))) + 1))) - 1))) })) and
  ((not (tqtint(to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0),
  of_int(to_rep1(r2))), sub(of_int(65535), to_rep(r1))),
  of_int(1)))))) <= tqtint(to_rep(last4(mk2(of_int(0), sub(sub(add(of_int(0),
  of_int(to_rep1(r2))), sub(of_int(65535), to_rep(r1))), of_int(1)))))))) ->
  (to_model({ us_split_fields1 = { rec__ring_buf__ring_buffer__data = r;
  rec__ring_buf__ring_buffer__first = r1;
  rec__ring_buf__ring_buffer__length = r2 } }) = { elts = concat(r,
  to_rep(first2(mk1(to_rep(r1), of_int(65535)))),
  to_rep(last2(mk1(to_rep(r1), of_int(65535)))), r,
  to_rep(first4(mk2(of_int(0), sub(sub(add(of_int(0), of_int(to_rep1(r2))),
  sub(of_int(65535), to_rep(r1))), of_int(1))))), to_rep(last4(mk2(of_int(0),
  sub(sub(add(of_int(0), of_int(to_rep1(r2))), sub(of_int(65535),
  to_rep(r1))), of_int(1)))))); rt = mk(to_rep(first2(mk1(to_rep(r1),
  of_int(65535)))), of_int(((tqtint(to_rep(first2(mk1(to_rep(r1),
  of_int(65535))))) + (0 + 0)) - 1))) })))))))) and
  ((not (65535 <  ((tqtint(to_rep(r1)) + to_rep1(r2)) - 1))) -> (to_model({
  us_split_fields1 = { rec__ring_buf__ring_buffer__data = r;
  rec__ring_buf__ring_buffer__first = r1;
  rec__ring_buf__ring_buffer__length = r2 } }) = { elts = r; rt =
  mk(to_rep(first6(mk3(to_rep(r1), sub(add(to_rep(r1), of_int(to_rep1(r2))),
  of_int(1))))), to_rep(last6(mk3(to_rep(r1), sub(add(to_rep(r1),
  of_int(to_rep1(r2))), of_int(1)))))) }))))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___219 : int -> (t,integer) farray

axiom def_axiom :
  (forall temp___221:int.
  (forall temp___222:t.
  ((temp___219(temp___221)[temp___222]) = of_rep2(temp___221))))

logic temp___267 : int -> (t,integer) farray

axiom def_axiom1 :
  (forall temp___269:int.
  (forall temp___270:t.
  ((temp___267(temp___269)[temp___270]) = of_rep2(temp___269))))

logic r__split_fields : (t,integer) farray

logic r__split_fields1 : ar_index

logic r__split_fields2 : length_type

logic o : length_type

logic o1 : (t,integer) farray

logic o2 : ar_index

logic o3 : length_type

logic temp___264 : (t,integer) farray

logic temp___2641 : ar_index

logic temp___2642 : length_type

logic o4 : ar_index

logic o5 : (t,integer) farray

logic o6 : ar_index

logic o7 : length_type

logic temp___266 : (t,integer) farray

logic temp___2661 : ar_index

logic temp___2662 : length_type

logic result : (t,integer) farray

logic result1 : ar_index

logic result2 : length_type

logic r__split_fields3 : (t,integer) farray

logic r__split_fields4 : ar_index

logic r__split_fields5 : length_type

logic result3 : (t,integer) farray

logic result4 : ar_index

logic result5 : length_type

logic r__split_fields6 : (t,integer) farray

logic r__split_fields7 : ar_index

logic r__split_fields8 : length_type

logic result6 : (t,integer) farray

logic result7 : ar_index

logic result8 : length_type

logic r__split_fields9 : (t,integer) farray

logic r__split_fields10 : ar_index

logic r__split_fields11 : length_type

logic r__split_fields12 : (t,integer) farray

logic r__split_fields13 : ar_index

logic r__split_fields14 : length_type

logic r__split_fields15 : (t,integer) farray

logic r__split_fields16 : ar_index

logic r__split_fields17 : length_type

axiom H : (to_rep1(o) = 0)

axiom H1 : (r__split_fields = o1)

axiom H2 : (r__split_fields1 = o2)

axiom H3 : (o = o3)

axiom H4 : (temp___264 = o1)

axiom H5 : (temp___2641 = o2)

axiom H6 : (temp___2642 = o3)

axiom H7 : (result = r__split_fields)

axiom H8 : (result1 = r__split_fields1)

axiom H9 : (result2 = r__split_fields2)

axiom H10 : (temp___264 = r__split_fields3)

axiom H11 : (temp___2641 = r__split_fields4)

axiom H12 : (temp___2642 = r__split_fields5)

axiom H13 : (to_rep(o4) = of_int(0))

axiom H14 : (r__split_fields3 = o5)

axiom H15 : (o4 = o6)

axiom H16 : (r__split_fields5 = o7)

axiom H17 : (temp___266 = o5)

axiom H18 : (temp___2661 = o6)

axiom H19 : (temp___2662 = o7)

axiom H20 : (result3 = r__split_fields3)

axiom H21 : (result4 = r__split_fields4)

axiom H22 : (result5 = r__split_fields5)

axiom H23 : (temp___266 = r__split_fields6)

axiom H24 : (temp___2661 = r__split_fields7)

axiom H25 : (temp___2662 = r__split_fields8)

axiom H26 : (result6 = r__split_fields6)

axiom H27 : (result7 = r__split_fields7)

axiom H28 : (result8 = r__split_fields8)

axiom H29 : (temp___267(0) = r__split_fields9)

axiom H30 : (r__split_fields7 = r__split_fields10)

axiom H31 : (r__split_fields8 = r__split_fields11)

axiom H32 : (r__split_fields12 = r__split_fields9)

axiom H33 : (r__split_fields13 = r__split_fields10)

axiom H34 : (r__split_fields14 = r__split_fields11)

axiom H35 : (r__split_fields15 = r__split_fields9)

axiom H36 : (r__split_fields16 = r__split_fields10)

axiom H37 : (r__split_fields17 = r__split_fields11)

 (* File "ring_buf.ads", line 56, characters 0-0 *)
goal WP_parameter_def : (bool_eq6((to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r__split_fields12;
  rec__ring_buf__ring_buffer__first = r__split_fields13;
  rec__ring_buf__ring_buffer__length = r__split_fields14 } })).elts,
  to_rep(first((to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r__split_fields12;
  rec__ring_buf__ring_buffer__first = r__split_fields13;
  rec__ring_buf__ring_buffer__length = r__split_fields14 } })).rt)),
  to_rep(last((to_model({ us_split_fields1 = {
  rec__ring_buf__ring_buffer__data = r__split_fields12;
  rec__ring_buf__ring_buffer__first = r__split_fields13;
  rec__ring_buf__ring_buffer__length = r__split_fields14 } })).rt)),
  temp___219(0), of_int(1), of_int(0)) = true)
