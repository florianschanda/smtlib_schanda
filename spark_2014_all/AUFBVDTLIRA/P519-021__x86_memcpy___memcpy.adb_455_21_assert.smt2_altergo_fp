(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 4294967295)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (32 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 32))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 32))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(4294967296 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  4294967296)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  4294967296) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  4294967296)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 4294967296)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  4294967296) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 4294967296)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 32)]. (eq_sub1(x, y, 0, 32) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 18446744073709551615)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (64 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  64)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (64 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 64))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 64))))))

logic is_signed_positive2 : t2 -> prop

logic of_int2 : int -> t2

logic to_int2 : t2 -> int

axiom to_int_def2 :
  (forall x:t2 [to_int2(x)]. ((is_signed_positive2(x) ->
  (to_int2(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int2(x) = (-(18446744073709551616 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  18446744073709551616)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 64)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 18446744073709551615)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

predicate sle2(v1: t2, v2: t2) = (to_int2(v1) <= to_int2(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

predicate sge2(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) + tqtint2(v2)) <  18446744073709551616) -> (tqtint2(add2(v1,
  v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  18446744073709551616)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 18446744073709551616)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) * tqtint2(v2)) <  18446744073709551616) -> (tqtint2(mul2(v1,
  v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 18446744073709551616)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv2(x, of_int2(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 64)]. (eq_sub2(x, y, 0, 64) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq2 : t2, t2 -> bool

axiom bool_eq_def2 :
  (forall x:t2. forall y:t2 [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic bool_ne2 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne2(x, y)]. (((not (x = y)) -> (bool_ne2(x,
  y) = true)) and ((x = y) -> (bool_ne2(x, y) = false))))

logic bool_lt2 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt2(x, y)]. ((ult2(x, y) -> (bool_lt2(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt2(x, y) = false))))

logic bool_le2 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le2(x, y)]. ((ule2(x, y) -> (bool_le2(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le2(x, y) = false))))

logic bool_gt2 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt2(x, y)]. ((ugt2(x, y) -> (bool_gt2(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt2(x, y) = false))))

logic bool_ge2 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge2(x, y)]. ((uge2(x, y) -> (bool_ge2(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge2(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int3 : bool -> int

axiom to_int_def3 :
  (forall b:bool [to_int3(b)]. (((b = true) -> (to_int3(b) = 1)) and
  ((not (b = true)) -> (to_int3(b) = 0))))

logic of_int3 : int -> bool

axiom of_int_def :
  (forall i:int [of_int3(i)]. (((i = 0) -> (of_int3(i) = false)) and
  ((not (i = 0)) -> (of_int3(i) = true))))

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned64

logic attr__ATTRIBUTE_MODULUS : t2

logic bool_eq4 : int, int -> bool

logic bool_ne3 : int, int -> bool

logic bool_lt3 : int, int -> bool

logic bool_le3 : int, int -> bool

logic bool_gt3 : int, int -> bool

logic bool_ge3 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne3(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt3(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le3(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt3(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge3(x, y) = true) <-> (y <= x))))

logic bool_eq5 : t2, t2 -> bool

axiom bool_eq_def4 :
  (forall x:t2. forall y:t2 [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t2

logic user_eq : unsigned64, unsigned64 -> bool

logic dummy : unsigned64

type unsigned64__ref = { unsigned64__content : unsigned64
}

function unsigned64__ref___projection(a: unsigned64__ref) : unsigned64 =
  (a).unsigned64__content

type unsigned8

logic attr__ATTRIBUTE_MODULUS1 : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : unsigned8, unsigned8 -> bool

logic dummy1 : unsigned8

type unsigned8__ref = { unsigned8__content : unsigned8
}

function unsigned8__ref___projection(a: unsigned8__ref) : unsigned8 =
  (a).unsigned8__content

logic to_rep : unsigned8 -> t

logic of_rep : t -> unsigned8

axiom inversion_axiom :
  (forall x:unsigned8 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int4(x: unsigned8) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned8 [to_int4(x)]. uint_in_range(to_int4(x)))

type map__ref = { map__content : (t2,unsigned8) farray
}

logic slide : (t2,unsigned8) farray, t2, t2 -> (t2,unsigned8) farray

axiom slide_eq :
  (forall a:(t2,unsigned8) farray.
  (forall first:t2 [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t2,unsigned8) farray.
  (forall old_first:t2.
  (forall new_first:t2.
  (forall i:t2 [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub2(i, sub2(new_first, old_first))]))))))

logic bool_eq7 : (t2,unsigned8) farray, t2, t2, (t2,unsigned8) farray, t2,
  t2 -> bool

axiom bool_eq_def6 :
  (forall a:(t2,unsigned8) farray. forall a__first:t2. forall a__last:t2.
  forall b:(t2,unsigned8) farray. forall b__first:t2. forall b__last:t2
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)]. (((((ule2(a__first,
  a__last) and (ule2(b__first, b__last) and (sub2(a__last,
  a__first) = sub2(b__last, b__first)))) or ((not ule2(a__first,
  a__last)) and ugt2(b__first, b__last))) and
  (forall temp___idx_154:t2. (((ule2(a__first, temp___idx_154) and
  ule2(temp___idx_154, a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[add2(sub2(b__first, a__first),
  temp___idx_154)])))) or (not (ule2(a__first, temp___idx_154) and
  ule2(temp___idx_154, a__last)))))) -> (bool_eq7(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule2(a__first, a__last) ->
  (ule2(b__first, b__last) and (sub2(a__last, a__first) = sub2(b__last,
  b__first)))) and ((not ule2(a__first, a__last)) -> ugt2(b__first,
  b__last))) and
  (forall temp___idx_154:t2. ((ule2(a__first, temp___idx_154) and
  ule2(temp___idx_154, a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[add2(sub2(b__first, a__first),
  temp___idx_154)]))))))) -> (bool_eq7(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev :
  (forall a:(t2,unsigned8) farray. forall b:(t2,unsigned8) farray.
  (forall a__first:t2. forall a__last:t2. forall b__first:t2.
  forall b__last:t2. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> (((ule2(a__first, a__last) -> (ule2(b__first,
  b__last) and (sub2(a__last, a__first) = sub2(b__last, b__first)))) and
  ((not ule2(a__first, a__last)) -> ugt2(b__first, b__last))) and
  (forall temp___idx_154:t2. ((ule2(a__first, temp___idx_154) and
  ule2(temp___idx_154, a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[add2(sub2(b__first, a__first),
  temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic inrange64 : t2, t2, t2 -> bool

logic inrange64__function_guard : bool, t2, t2, t2 -> prop

logic rliteral1 : t2

axiom rliteral_axiom1 : (tqtint2(rliteral1) = 18446744073709551615)

logic rliteral2 : t2

axiom rliteral_axiom2 : (tqtint2(rliteral2) = 1)

logic rliteral3 : t2

axiom rliteral_axiom3 : (tqtint2(rliteral3) = 2)

axiom inrange64__post_axiom :
  (forall var:t2. forall bottom:t2. forall range_size:t2 [inrange64(var,
  bottom, range_size)]. (((inrange64(var, bottom, range_size) = true) ->
  ((ule2(bottom, add2(sub2(rliteral1, range_size), rliteral2)) ->
  (ule2(bottom, var) and ule2(var, add2(bottom, sub2(range_size,
  rliteral2))))) and ((not ule2(bottom, add2(sub2(rliteral1, range_size),
  rliteral2))) -> ((ule2(bottom, var) and ule2(var, rliteral1)) or ule2(var,
  sub2(sub2(range_size, sub2(rliteral1, bottom)), rliteral3)))))) and
  (((ule2(bottom, add2(sub2(rliteral1, range_size), rliteral2)) and
  (ule2(bottom, var) and ule2(var, add2(bottom, sub2(range_size,
  rliteral2))))) or ((not ule2(bottom, add2(sub2(rliteral1, range_size),
  rliteral2))) and ((ule2(bottom, var) and ule2(var, rliteral1)) or ule2(var,
  sub2(sub2(range_size, sub2(rliteral1, bottom)), rliteral3))))) ->
  (inrange64(var, bottom, range_size) = true))))

logic insaferegion64 : t2, t2 -> bool

logic insaferegion64__function_guard : bool, t2, t2 -> prop

logic rliteral4 : t2

axiom rliteral_axiom4 : (tqtint2(rliteral4) = 14987979559889010687)

logic rliteral5 : t2

axiom rliteral_axiom5 : (tqtint2(rliteral5) = 8)

logic rliteral6 : t2

axiom rliteral_axiom6 : (tqtint2(rliteral6) = 4611686018427387903)

logic rliteral7 : t2

axiom rliteral_axiom7 : (tqtint2(rliteral7) = 0)

axiom insaferegion64__post_axiom :
  (forall var:t2. forall rsp:t2 [insaferegion64(var, rsp)].
  ((insaferegion64(var, rsp) = true) <-> ((ule2(var, rliteral4) and uge2(var,
  add2(rsp, rliteral5))) or (ule2(var, rliteral6) and uge2(var,
  rliteral7)))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic readreglow8 : t2 -> t

logic readreglow8__function_guard : t, t2 -> prop

logic al : t2 -> t

logic al__function_guard : t, t2 -> prop

axiom al__post_axiom :
  (forall x86__rax:t2 [al(x86__rax)]. (al(x86__rax) = readreglow8(x86__rax)))

logic writereg32post : t2, t1 -> bool

logic writereg32post__function_guard : bool, t2, t1 -> prop

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic readmem8 : t2, (t2,unsigned8) farray -> t

logic readmem8__function_guard : t, t2, (t2,unsigned8) farray -> prop

axiom readmem8__post_axiom :
  (forall addr:t2.
  (forall x86__memory:(t2,unsigned8) farray [readmem8(addr, x86__memory)].
  (readmem8(addr, x86__memory) = to_rep((x86__memory[addr])))))

logic readmem64 : t2, (t2,unsigned8) farray -> t2

logic readmem64__function_guard : t2, t2, (t2,unsigned8) farray -> prop

logic toBig1 : t -> t2

logic toSmall1 : t2 -> t

logic rliteral8 : t2

axiom rliteral_axiom8 : (tqtint2(rliteral8) = 255)

axiom toSmall_to_uint1 :
  (forall x:t2. (ule2(x, rliteral8) -> (tqtint2(x) = tqtint(toSmall1(x)))))

axiom toBig_to_uint1 : (forall x:t. (tqtint(x) = tqtint2(toBig1(x))))

logic rliteral9 : t2

axiom rliteral_axiom9 : (tqtint2(rliteral9) = 255)

logic rliteral10 : t2

axiom rliteral_axiom10 : (tqtint2(rliteral10) = 65280)

logic rliteral11 : t2

axiom rliteral_axiom11 : (tqtint2(rliteral11) = 256)

logic rliteral12 : t2

axiom rliteral_axiom12 : (tqtint2(rliteral12) = 16711680)

logic rliteral13 : t2

axiom rliteral_axiom13 : (tqtint2(rliteral13) = 65536)

logic rliteral14 : t2

axiom rliteral_axiom14 : (tqtint2(rliteral14) = 4278190080)

logic rliteral15 : t2

axiom rliteral_axiom15 : (tqtint2(rliteral15) = 3)

logic rliteral16 : t2

axiom rliteral_axiom16 : (tqtint2(rliteral16) = 16777216)

logic rliteral17 : t2

axiom rliteral_axiom17 : (tqtint2(rliteral17) = 1095216660480)

logic rliteral18 : t2

axiom rliteral_axiom18 : (tqtint2(rliteral18) = 4)

logic rliteral19 : t2

axiom rliteral_axiom19 : (tqtint2(rliteral19) = 4294967296)

logic rliteral20 : t2

axiom rliteral_axiom20 : (tqtint2(rliteral20) = 280375465082880)

logic rliteral21 : t2

axiom rliteral_axiom21 : (tqtint2(rliteral21) = 5)

logic rliteral22 : t2

axiom rliteral_axiom22 : (tqtint2(rliteral22) = 1099511627776)

logic rliteral23 : t2

axiom rliteral_axiom23 : (tqtint2(rliteral23) = 71776119061217280)

logic rliteral24 : t2

axiom rliteral_axiom24 : (tqtint2(rliteral24) = 6)

logic rliteral25 : t2

axiom rliteral_axiom25 : (tqtint2(rliteral25) = 281474976710656)

logic rliteral26 : t2

axiom rliteral_axiom26 : (tqtint2(rliteral26) = 18374686479671623680)

logic rliteral27 : t2

axiom rliteral_axiom27 : (tqtint2(rliteral27) = 7)

logic rliteral28 : t2

axiom rliteral_axiom28 : (tqtint2(rliteral28) = 72057594037927936)

axiom readmem64__post_axiom :
  (forall addr:t2.
  (forall x86__memory:(t2,unsigned8) farray [readmem64(addr, x86__memory)].
  ((((((((bw_and2(readmem64(addr, x86__memory),
  rliteral9) = toBig1(to_rep((x86__memory[addr])))) and
  (bw_and2(readmem64(addr, x86__memory),
  rliteral10) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral2)]))),
  rliteral11))) and (bw_and2(readmem64(addr, x86__memory),
  rliteral12) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral3)]))),
  rliteral13))) and (bw_and2(readmem64(addr, x86__memory),
  rliteral14) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral15)]))),
  rliteral16))) and (bw_and2(readmem64(addr, x86__memory),
  rliteral17) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral18)]))),
  rliteral19))) and (bw_and2(readmem64(addr, x86__memory),
  rliteral20) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral21)]))),
  rliteral22))) and (bw_and2(readmem64(addr, x86__memory),
  rliteral23) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral24)]))),
  rliteral25))) and (bw_and2(readmem64(addr, x86__memory),
  rliteral26) = mul2(toBig1(to_rep((x86__memory[add2(addr, rliteral27)]))),
  rliteral28)))))

logic readmem64ghost : (t2,unsigned8) farray, t2, (t2,unsigned8) farray -> t2

logic readmem64ghost__function_guard : t2, (t2,unsigned8) farray, t2,
  (t2,unsigned8) farray -> prop

axiom readmem64ghost__post_axiom :
  (forall mem:(t2,unsigned8) farray.
  forall x86__memory:(t2,unsigned8) farray.
  (forall addr:t2 [readmem64ghost(mem, addr, x86__memory)].
  (readmem64ghost(mem, addr,
  x86__memory) = bw_or2(bw_or2(bw_or2(bw_or2(bw_or2(bw_or2(bw_or2(toBig1(to_rep((mem[addr]))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral2)]))), of_int2(8))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral3)]))), of_int2(16))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral15)]))), of_int2(24))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral18)]))), of_int2(32))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral21)]))), of_int2(40))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral24)]))), of_int2(48))),
  lsl_bv2(toBig1(to_rep((mem[add2(addr, rliteral27)]))), of_int2(56))))))

type unsigned641

logic attr__ATTRIBUTE_MODULUS2 : t2

logic bool_eq8 : t2, t2 -> bool

axiom bool_eq_def7 :
  (forall x:t2. forall y:t2 [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t2

logic user_eq2 : unsigned641, unsigned641 -> bool

logic dummy2 : unsigned641

type unsigned64__ref1 = { unsigned64__content1 : unsigned641
}

function unsigned64__ref___2__projection(a: unsigned64__ref1) : unsigned641 =
  (a).unsigned64__content1

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

type unsigned32

logic attr__ATTRIBUTE_MODULUS3 : t1

logic bool_eq9 : t1, t1 -> bool

axiom bool_eq_def8 :
  (forall x:t1. forall y:t1 [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq3 : unsigned32, unsigned32 -> bool

logic dummy3 : unsigned32

type unsigned32__ref = { unsigned32__content : unsigned32
}

function unsigned32__ref___projection(a: unsigned32__ref) : unsigned32 =
  (a).unsigned32__content

axiom readreglow8__post_axiom :
  (forall reg:t2 [readreglow8(reg)].
  (readreglow8(reg) = toSmall1(bw_and2(reg, rliteral9))))

logic toBig2 : t1 -> t2

logic toSmall2 : t2 -> t1

logic rliteral29 : t2

axiom rliteral_axiom29 : (tqtint2(rliteral29) = 4294967295)

axiom toSmall_to_uint2 :
  (forall x:t2. (ule2(x, rliteral29) -> (tqtint2(x) = tqtint1(toSmall2(x)))))

axiom toBig_to_uint2 : (forall x:t1. (tqtint1(x) = tqtint2(toBig2(x))))

logic readreg32 : t2 -> t1

logic readreg32__function_guard : t1, t2 -> prop

logic rliteral30 : t2

axiom rliteral_axiom30 : (tqtint2(rliteral30) = 4294967295)

axiom readreg32__post_axiom :
  (forall reg:t2 [readreg32(reg)]. (readreg32(reg) = toSmall2(bw_and2(reg,
  rliteral30))))

logic rliteral31 : t2

axiom rliteral_axiom31 : (tqtint2(rliteral31) = 18446744069414584320)

axiom writereg32post__post_axiom :
  (forall regnew:t2.
  (forall val__:t1 [writereg32post(regnew, val__)]. ((writereg32post(regnew,
  val__) = true) <-> ((readreg32(regnew) = val__) and (bw_and2(regnew,
  rliteral31) = rliteral7)))))

logic rliteral32 : t2

axiom rliteral_axiom32 : (tqtint2(rliteral32) = 32)

logic rliteral33 : t2

axiom rliteral_axiom33 : (tqtint2(rliteral33) = 72)

logic rliteral34 : t2

axiom rliteral_axiom34 : (tqtint2(rliteral34) = 12105675798371893255)

logic rliteral35 : t2

axiom rliteral_axiom35 : (tqtint2(rliteral35) = 9223372036854775807)

logic rliteral36 : t2

axiom rliteral_axiom36 : (tqtint2(rliteral36) = 40)

 (* File "x86.ads", line 334, characters 0-0 *)
goal WP_parameter_def :
  (forall zeroflag:bool. forall carryflag:bool. forall signflag:bool.
  forall overflowflag:bool. forall rax:t2. forall rcx:t2. forall rdx:t2.
  forall rsp:t2. forall rbp:t2. forall memory:(t2,unsigned8) farray.
  forall saved_32:t2. forall saved_72:t2. forall tmp_register:t2.
  forall saved_rbp:t2. forall saved_ra:t2.
  forall saved_mem:(t2,unsigned8) farray. forall o:t2. forall o1:t2.
  forall o2:t2. forall o3:t2. forall o4:t2. forall o5:t2. forall o6:t2.
  forall o7:t2. forall o8:t2. forall o9:t2. forall temp___624:t2.
  forall temp___623:(t2,unsigned8) farray. forall temp___622:bool.
  forall temp___621:bool. forall temp___615:(t2,unsigned8) farray.
  forall temp___620:t2. forall temp___619:bool. forall temp___618:t2.
  forall temp___625:(t2,unsigned8) farray. forall temp___616:t2.
  forall temp___617:bool. forall o10:t2. forall o11:t2. forall o12:bool.
  forall o13:t2. forall o14:t2. forall o15:bool. forall o16:t2.
  forall o17:bool. forall o18:t2. forall o19:bool. forall o20:t2.
  forall o21:bool. forall o22:bool. forall o23:bool. forall o24:t2.
  forall o25:t2. forall o26:t. forall o27:t1. forall o28:t. forall o29:t2.
  forall o30:t2. forall o31:bool. forall o32:t2. forall o33:t2.
  forall o34:bool. forall o35:t2. forall o36:bool. forall o37:t2.
  forall o38:bool. forall o39:t2. forall o40:bool. forall o41:bool.
  forall o42:bool. forall rcx1:t2. forall rdx1:t2.
  forall memory1:(t2,unsigned8) farray. forall result:t2.
  forall saved_321:t2. forall result1:t2. forall saved_721:t2.
  forall result2:t2. forall tmp_register1:t2. forall result3:t2.
  forall saved_rbp1:t2. forall result4:t2. forall saved_ra1:t2.
  forall result5:(t2,unsigned8) farray.
  forall saved_mem1:(t2,unsigned8) farray. forall result6:t2. forall rax1:t2.
  forall result7:bool. forall zeroflag1:bool. forall result8:bool.
  forall signflag1:bool. forall result9:bool. forall carryflag1:bool.
  forall result10:bool. forall overflowflag1:bool. forall zeroflag2:bool.
  forall carryflag2:bool. forall signflag2:bool. forall overflowflag2:bool.
  forall rax2:t2. forall rcx2:t2. forall rdx2:t2.
  forall memory2:(t2,unsigned8) farray. forall tmp_register2:t2.
  forall result11:t2. forall rdx3:t2. forall result12:t2. forall rax3:t2.
  forall result13:bool. forall zeroflag3:bool. forall result14:bool.
  forall signflag3:bool. forall result15:t2. forall rdx4:t2.
  forall result16:t2. forall rcx3:t2. forall result17:t2. forall rax4:t2.
  forall result18:bool. forall zeroflag4:bool. forall result19:bool.
  forall signflag4:bool. forall result20:t2. forall rax5:t2. forall rax6:t2.
  forall memory3:(t2,unsigned8) farray. forall result21:t2.
  forall tmp_register3:t2. forall result22:t2. forall rax7:t2.
  forall result23:bool. forall zeroflag5:bool. forall result24:bool.
  forall signflag5:bool. forall result25:bool. forall carryflag3:bool.
  forall result26:bool__ref. forall overflowflag3:bool.
  forall zeroflag6:bool__ref. forall carryflag4:bool__ref.
  forall signflag6:bool__ref. forall overflowflag4:bool__ref.
  forall rax8:t__ref2. forall zeroflag7:bool. forall carryflag5:bool.
  forall signflag7:bool. forall overflowflag5:bool. forall rax9:t2.
  forall zeroflag8:bool__ref. forall carryflag6:bool__ref.
  forall signflag8:bool__ref. forall overflowflag6:bool__ref.
  forall rax10:t__ref2. forall rcx4:t__ref2. forall rdx5:t__ref2.
  forall memory4:map__ref. forall tmp_register4:t__ref2.
  forall zeroflag9:bool. forall carryflag7:bool. forall signflag9:bool.
  forall overflowflag7:bool. forall rax11:t2. forall rcx5:t2. forall rdx6:t2.
  forall memory5:(t2,unsigned8) farray. forall tmp_register5:t2.
  forall zeroflag10:bool__ref. forall carryflag8:bool__ref.
  forall signflag10:bool__ref. forall overflowflag8:bool__ref.
  forall rax12:t__ref2. forall rcx6:t__ref2. forall rdx7:t__ref2.
  forall memory6:map__ref. forall tmp_register6:t__ref2.
  forall zeroflag11:bool. forall carryflag9:bool. forall signflag11:bool.
  forall overflowflag9:bool. forall rax13:t2. forall rcx7:t2. forall rdx8:t2.
  forall memory7:(t2,unsigned8) farray. forall tmp_register7:t2.
  forall zeroflag12:bool__ref. forall carryflag10:bool__ref.
  forall signflag12:bool__ref. forall overflowflag10:bool__ref.
  forall rax14:t__ref2. forall rcx8:t__ref2. forall rdx9:t__ref2.
  forall memory8:map__ref. forall tmp_register8:t__ref2.
  forall zeroflag13:bool. forall carryflag11:bool. forall signflag13:bool.
  forall overflowflag11:bool. forall rax15:t2. forall rcx9:t2.
  forall rdx10:t2. forall memory9:(t2,unsigned8) farray.
  forall tmp_register9:t2. forall memory10:(t2,unsigned8) farray.
  ((((rbp = rsp) and (readmem64(sub2(rbp, rliteral5),
  memory) = rliteral7)) and
  (forall i:t2. ((ule2(rliteral7, i) and ule2(i, rliteral1)) ->
  ((inrange64(i, readmem64(sub2(rbp, rliteral32), memory),
  readmem64(sub2(rbp, rliteral33), memory)) = true) -> (insaferegion64(i,
  add2(rsp, rliteral5)) = true))))) -> (((((o = readmem64(sub2(rbp,
  rliteral32), memory)) and ((((((((bw_and2(o,
  rliteral9) = toBig1(to_rep((memory[sub2(rbp, rliteral32)])))) and
  (bw_and2(o, rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp,
  rliteral32), rliteral2)]))), rliteral11))) and (bw_and2(o,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral32),
  rliteral3)]))), rliteral13))) and (bw_and2(o,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral32),
  rliteral15)]))), rliteral16))) and (bw_and2(o,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral32),
  rliteral18)]))), rliteral19))) and (bw_and2(o,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral32),
  rliteral21)]))), rliteral22))) and (bw_and2(o,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral32),
  rliteral24)]))), rliteral25))) and (bw_and2(o,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral32),
  rliteral27)]))), rliteral28)))) and (o1 = o)) and (({ t__content2 = result
  } = { t__content2 = saved_32 }) and (saved_321 = o1))) ->
  (((((o2 = readmem64(sub2(rbp, rliteral33), memory)) and ((((((((bw_and2(o2,
  rliteral9) = toBig1(to_rep((memory[sub2(rbp, rliteral33)])))) and
  (bw_and2(o2, rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp,
  rliteral33), rliteral2)]))), rliteral11))) and (bw_and2(o2,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o2,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o2,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o2,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o2,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o2,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and (o3 = o2)) and (({ t__content2 =
  result1 } = { t__content2 = saved_72 }) and (saved_721 = o3))) ->
  (((((o4 = readmem64(sub2(rbp, rliteral5), memory)) and ((((((((bw_and2(o4,
  rliteral9) = toBig1(to_rep((memory[sub2(rbp, rliteral5)])))) and
  (bw_and2(o4, rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp,
  rliteral5), rliteral2)]))), rliteral11))) and (bw_and2(o4,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral5),
  rliteral3)]))), rliteral13))) and (bw_and2(o4,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral5),
  rliteral15)]))), rliteral16))) and (bw_and2(o4,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral5),
  rliteral18)]))), rliteral19))) and (bw_and2(o4,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral5),
  rliteral21)]))), rliteral22))) and (bw_and2(o4,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral5),
  rliteral24)]))), rliteral25))) and (bw_and2(o4,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral5),
  rliteral27)]))), rliteral28)))) and (o5 = o4)) and (({ t__content2 =
  result2 } = { t__content2 = tmp_register }) and (tmp_register1 = o5))) ->
  (((((o6 = readmem64(rbp, memory)) and ((((((((bw_and2(o6,
  rliteral9) = toBig1(to_rep((memory[rbp])))) and (bw_and2(o6,
  rliteral10) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral2)]))),
  rliteral11))) and (bw_and2(o6,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral3)]))),
  rliteral13))) and (bw_and2(o6,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral15)]))),
  rliteral16))) and (bw_and2(o6,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral18)]))),
  rliteral19))) and (bw_and2(o6,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral21)]))),
  rliteral22))) and (bw_and2(o6,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral24)]))),
  rliteral25))) and (bw_and2(o6,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(rbp, rliteral27)]))),
  rliteral28)))) and (o7 = o6)) and (({ t__content2 = result3 } = {
  t__content2 = saved_rbp }) and (saved_rbp1 = o7))) ->
  (((((o8 = readmem64(add2(rsp, rliteral5), memory)) and ((((((((bw_and2(o8,
  rliteral9) = toBig1(to_rep((memory[add2(rsp, rliteral5)])))) and
  (bw_and2(o8, rliteral10) = mul2(toBig1(to_rep((memory[add2(add2(rsp,
  rliteral5), rliteral2)]))), rliteral11))) and (bw_and2(o8,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(add2(rsp, rliteral5),
  rliteral3)]))), rliteral13))) and (bw_and2(o8,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(add2(rsp, rliteral5),
  rliteral15)]))), rliteral16))) and (bw_and2(o8,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(add2(rsp, rliteral5),
  rliteral18)]))), rliteral19))) and (bw_and2(o8,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(add2(rsp, rliteral5),
  rliteral21)]))), rliteral22))) and (bw_and2(o8,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(add2(rsp, rliteral5),
  rliteral24)]))), rliteral25))) and (bw_and2(o8,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(add2(rsp, rliteral5),
  rliteral27)]))), rliteral28)))) and (o9 = o8)) and (({ t__content2 =
  result4 } = { t__content2 = saved_ra }) and (saved_ra1 = o9))) ->
  (((result5 = saved_mem) and (saved_mem1 = memory)) ->
  ((rsp = rliteral34) -> (((((temp___624 = tmp_register1) and
  ((temp___623 = memory) and ((temp___622 = overflowflag) and
  ((temp___621 = signflag) and ((temp___615 = memory) and
  ((temp___620 = rax) and ((temp___619 = carryflag) and
  ((temp___618 = rcx) and ((temp___625 = memory) and ((temp___616 = rdx) and
  ((temp___617 = zeroflag) and (((result6 = rax) and
  (rax1 = tmp_register1)) and ((((((o10 = readmem64(sub2(rbp, rliteral33),
  memory)) and ((((((((bw_and2(o10,
  rliteral9) = toBig1(to_rep((memory[sub2(rbp, rliteral33)])))) and
  (bw_and2(o10, rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp,
  rliteral33), rliteral2)]))), rliteral11))) and (bw_and2(o10,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o10,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o10,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o10,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o10,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o10,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and (o11 = sub2(rax1, o10))) and
  (((o11 = rliteral7) and (o12 = true)) or ((not (o11 = rliteral7)) and
  (o12 = false)))) and ((result7 = zeroflag) and (zeroflag1 = o12))) and
  ((((((o13 = readmem64(sub2(rbp, rliteral33), memory)) and
  ((((((((bw_and2(o13, rliteral9) = toBig1(to_rep((memory[sub2(rbp,
  rliteral33)])))) and (bw_and2(o13,
  rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral2)]))), rliteral11))) and (bw_and2(o13,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o13,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o13,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o13,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o13,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o13,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and (o14 = sub2(rax1, o13))) and
  ((ugt2(o14, rliteral35) and (o15 = true)) or ((not ugt2(o14,
  rliteral35)) and (o15 = false)))) and ((result8 = signflag) and
  (signflag1 = o15))) and (((((o16 = readmem64(sub2(rbp, rliteral33),
  memory)) and ((((((((bw_and2(o16,
  rliteral9) = toBig1(to_rep((memory[sub2(rbp, rliteral33)])))) and
  (bw_and2(o16, rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp,
  rliteral33), rliteral2)]))), rliteral11))) and (bw_and2(o16,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o16,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o16,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o16,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o16,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o16,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and ((ult2(rax1, o16) and (o17 = true)) or
  ((not ult2(rax1, o16)) and (o17 = false)))) and ((result9 = carryflag) and
  (carryflag1 = o17))) and (((((((not (signflag1 = true)) and ugt2(rax1,
  rliteral35)) and (((o20 = readmem64(sub2(rbp, rliteral33), memory)) and
  ((((((((bw_and2(o20, rliteral9) = toBig1(to_rep((memory[sub2(rbp,
  rliteral33)])))) and (bw_and2(o20,
  rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral2)]))), rliteral11))) and (bw_and2(o20,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o20,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o20,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o20,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o20,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o20,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and ((ule2(o20, rliteral35) and
  (o21 = true)) or ((not ule2(o20, rliteral35)) and (o21 = false))))) or
  ((not ((not (signflag1 = true)) and ugt2(rax1, rliteral35))) and
  (o21 = false))) and (((((signflag1 = true) and (((o18 = readmem64(sub2(rbp,
  rliteral33), memory)) and ((((((((bw_and2(o18,
  rliteral9) = toBig1(to_rep((memory[sub2(rbp, rliteral33)])))) and
  (bw_and2(o18, rliteral10) = mul2(toBig1(to_rep((memory[add2(sub2(rbp,
  rliteral33), rliteral2)]))), rliteral11))) and (bw_and2(o18,
  rliteral12) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o18,
  rliteral14) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o18,
  rliteral17) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o18,
  rliteral20) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o18,
  rliteral23) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o18,
  rliteral26) = mul2(toBig1(to_rep((memory[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and ((ugt2(o18, rliteral35) and
  (o19 = true)) or ((not ugt2(o18, rliteral35)) and (o19 = false))))) or
  ((not (signflag1 = true)) and (o19 = false))) and ((((o19 = true) and
  ule2(rax1, rliteral35)) and (o22 = true)) or ((not ((o19 = true) and
  ule2(rax1, rliteral35))) and (o22 = false)))) and (o23 = match_bool(o22,
  true, o21)))) and ((result10 = overflowflag) and
  (overflowflag1 = o23))) and (((((tmp_register4 = { t__content2 =
  tmp_register1 }) and ((memory4 = { map__content = memory }) and ((rdx5 = {
  t__content2 = rdx }) and ((rcx4 = { t__content2 = rcx }) and ((rax10 = {
  t__content2 = rax1 }) and ((overflowflag6 = { bool__content = overflowflag1
  }) and ((signflag8 = { bool__content = signflag1 }) and ((carryflag6 = {
  bool__content = carryflag1 }) and (zeroflag8 = { bool__content = zeroflag1
  }))))))))) and ((tmp_register5 = tmp_register1) and
  ((memory5 = memory1) and ((rdx6 = rdx1) and ((rcx5 = rcx1) and
  ((rax11 = rax1) and ((overflowflag7 = overflowflag1) and
  ((signflag9 = signflag1) and ((carryflag7 = carryflag1) and
  (zeroflag9 = zeroflag1)))))))))) and (not (carryflag1 = true))) or
  ((carryflag1 = true) and ((((tmp_register4 = { t__content2 = tmp_register3
  }) and ((memory4 = { map__content = memory3 }) and ((rdx5 = { t__content2 =
  rdx4 }) and ((rcx4 = { t__content2 = rcx3 }) and ((rax10 = rax8) and
  ((overflowflag6 = overflowflag4) and ((signflag8 = signflag6) and
  ((carryflag6 = carryflag4) and (zeroflag8 = zeroflag6))))))))) and
  ((tmp_register5 = tmp_register3) and ((memory5 = memory3) and
  ((rdx6 = rdx4) and ((rcx5 = rcx3) and ((rax11 = rax9) and
  ((overflowflag7 = overflowflag5) and ((signflag9 = signflag7) and
  ((carryflag7 = carryflag5) and (zeroflag9 = zeroflag7)))))))))) and
  (((forall i:t2. ((ule2(saved_321, i) and ule2(i, sub2(add2(saved_321,
    saved_721), rliteral2))) -> (insaferegion64(i, add2(rsp,
    rliteral5)) = true))) and
  ((forall i:t2. ((ule2(rliteral7, i) and ule2(i, rliteral1)) ->
   (((not (inrange64(i, saved_321, saved_721) = true)) and (not (inrange64(i,
   sub2(rbp, rliteral5), rliteral5) = true))) ->
   (to_rep((memory2[i])) = to_rep((temp___625[i])))))) and
  ((saved_321 = readmem64(sub2(rbp, rliteral32), memory2)) and
  ((saved_721 = readmem64(sub2(rbp, rliteral33), memory2)) and
  (ult2(tmp_register2, saved_721) and ((readmem64(rbp,
  memory2) = saved_rbp1) and (readmem64(add2(rsp, rliteral5),
  memory2) = saved_ra1))))))) and ((((o24 = readmem64(sub2(rbp, rliteral32),
  memory2)) and ((((((((bw_and2(o24,
  rliteral9) = toBig1(to_rep((memory2[sub2(rbp, rliteral32)])))) and
  (bw_and2(o24, rliteral10) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp,
  rliteral32), rliteral2)]))), rliteral11))) and (bw_and2(o24,
  rliteral12) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral32),
  rliteral3)]))), rliteral13))) and (bw_and2(o24,
  rliteral14) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral32),
  rliteral15)]))), rliteral16))) and (bw_and2(o24,
  rliteral17) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral32),
  rliteral18)]))), rliteral19))) and (bw_and2(o24,
  rliteral20) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral32),
  rliteral21)]))), rliteral22))) and (bw_and2(o24,
  rliteral23) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral32),
  rliteral24)]))), rliteral25))) and (bw_and2(o24,
  rliteral26) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral32),
  rliteral27)]))), rliteral28)))) and ((result11 = rdx2) and
  (rdx3 = o24))) and (((result12 = rax2) and (rax3 = tmp_register2)) and
  (((result13 = zeroflag2) and (((add2(rdx3, rax3) = rliteral7) and
  (zeroflag3 = true)) or ((not (add2(rdx3, rax3) = rliteral7)) and
  (zeroflag3 = false)))) and (((result14 = signflag2) and ((ugt2(add2(rdx3,
  rax3), rliteral35) and (signflag3 = true)) or ((not ugt2(add2(rdx3, rax3),
  rliteral35)) and (signflag3 = false)))) and (((result15 = rdx3) and
  (rdx4 = add2(rdx3, rax3))) and ((((o25 = readmem64(sub2(rbp, rliteral36),
  memory2)) and ((((((((bw_and2(o25,
  rliteral9) = toBig1(to_rep((memory2[sub2(rbp, rliteral36)])))) and
  (bw_and2(o25, rliteral10) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp,
  rliteral36), rliteral2)]))), rliteral11))) and (bw_and2(o25,
  rliteral12) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral36),
  rliteral3)]))), rliteral13))) and (bw_and2(o25,
  rliteral14) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral36),
  rliteral15)]))), rliteral16))) and (bw_and2(o25,
  rliteral17) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral36),
  rliteral18)]))), rliteral19))) and (bw_and2(o25,
  rliteral20) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral36),
  rliteral21)]))), rliteral22))) and (bw_and2(o25,
  rliteral23) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral36),
  rliteral24)]))), rliteral25))) and (bw_and2(o25,
  rliteral26) = mul2(toBig1(to_rep((memory2[add2(sub2(rbp, rliteral36),
  rliteral27)]))), rliteral28)))) and ((result16 = rcx2) and
  (rcx3 = o25))) and (((result17 = rax3) and (rax4 = tmp_register2)) and
  (((result18 = zeroflag3) and (((add2(rax4, rcx3) = rliteral7) and
  (zeroflag4 = true)) or ((not (add2(rax4, rcx3) = rliteral7)) and
  (zeroflag4 = false)))) and (((result19 = signflag3) and ((ugt2(add2(rax4,
  rcx3), rliteral35) and (signflag4 = true)) or ((not ugt2(add2(rax4, rcx3),
  rliteral35)) and (signflag4 = false)))) and (((result20 = rax4) and
  (rax5 = add2(rax4, rcx3))) and (((((o26 = readmem8(rax5, memory2)) and
  (o26 = to_rep((memory2[rax5])))) and (o27 = toBig(o26))) and
  (writereg32post(rax6, o27) = true)) and
  ((forall i:t2. ((ule2(saved_321, i) and ule2(i, sub2(add2(saved_321,
   saved_721), rliteral2))) -> (insaferegion64(i, add2(rsp,
   rliteral5)) = true))) and
  ((forall i:t2. ((ule2(rliteral7, i) and ule2(i, rliteral1)) ->
   (((not (inrange64(i, saved_321, saved_721) = true)) and (not (inrange64(i,
   sub2(rbp, rliteral5), rliteral5) = true))) ->
   (to_rep((memory2[i])) = to_rep((temp___615[i])))))) and
  ((saved_321 = readmem64(sub2(rbp, rliteral32), memory2)) and
  ((saved_721 = readmem64(sub2(rbp, rliteral33), memory2)) and
  (ult2(tmp_register2, saved_721) and ((inrange64(rdx4, saved_321,
  saved_721) = true) and ((((o28 = al(rax6)) and
  (o28 = readreglow8(rax6))) and ((to_rep((memory3[rdx4])) = o28) and
  (forall i:t2. ((ule2(rliteral7, i) and ule2(i, rliteral1)) ->
  ((not (i = rdx4)) -> (to_rep((memory3[i])) = to_rep((memory2[i])))))))) and
  (((result21 = tmp_register2) and (tmp_register3 = add2(tmp_register2,
  rliteral2))) and ((((rax8 = { t__content2 = rax7 }) and ((overflowflag4 = {
  bool__content = overflowflag3 }) and ((signflag6 = { bool__content =
  signflag5 }) and ((carryflag4 = { bool__content = carryflag3 }) and
  (zeroflag6 = { bool__content = zeroflag5 }))))) and ((rax9 = rax7) and
  ((overflowflag5 = overflowflag3) and ((signflag7 = signflag5) and
  ((carryflag5 = carryflag3) and (zeroflag7 = zeroflag5)))))) and
  (((result22 = rax6) and (rax7 = tmp_register3)) and
  ((((((o29 = readmem64(sub2(rbp, rliteral33), memory3)) and
  ((((((((bw_and2(o29, rliteral9) = toBig1(to_rep((memory3[sub2(rbp,
  rliteral33)])))) and (bw_and2(o29,
  rliteral10) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral2)]))), rliteral11))) and (bw_and2(o29,
  rliteral12) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o29,
  rliteral14) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o29,
  rliteral17) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o29,
  rliteral20) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o29,
  rliteral23) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o29,
  rliteral26) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and (o30 = sub2(rax7, o29))) and
  (((o30 = rliteral7) and (o31 = true)) or ((not (o30 = rliteral7)) and
  (o31 = false)))) and ((result23 = zeroflag4) and (zeroflag5 = o31))) and
  ((((((o32 = readmem64(sub2(rbp, rliteral33), memory3)) and
  ((((((((bw_and2(o32, rliteral9) = toBig1(to_rep((memory3[sub2(rbp,
  rliteral33)])))) and (bw_and2(o32,
  rliteral10) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral2)]))), rliteral11))) and (bw_and2(o32,
  rliteral12) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o32,
  rliteral14) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o32,
  rliteral17) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o32,
  rliteral20) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o32,
  rliteral23) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o32,
  rliteral26) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and (o33 = sub2(rax7, o32))) and
  ((ugt2(o33, rliteral35) and (o34 = true)) or ((not ugt2(o33,
  rliteral35)) and (o34 = false)))) and ((result24 = signflag4) and
  (signflag5 = o34))) and (((((o35 = readmem64(sub2(rbp, rliteral33),
  memory3)) and ((((((((bw_and2(o35,
  rliteral9) = toBig1(to_rep((memory3[sub2(rbp, rliteral33)])))) and
  (bw_and2(o35, rliteral10) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp,
  rliteral33), rliteral2)]))), rliteral11))) and (bw_and2(o35,
  rliteral12) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o35,
  rliteral14) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o35,
  rliteral17) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o35,
  rliteral20) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o35,
  rliteral23) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o35,
  rliteral26) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and ((ult2(rax7, o35) and (o36 = true)) or
  ((not ult2(rax7, o35)) and (o36 = false)))) and
  ((result25 = carryflag2) and (carryflag3 = o36))) and
  (((((((not (signflag5 = true)) and ugt2(rax7, rliteral35)) and
  (((o39 = readmem64(sub2(rbp, rliteral33), memory3)) and
  ((((((((bw_and2(o39, rliteral9) = toBig1(to_rep((memory3[sub2(rbp,
  rliteral33)])))) and (bw_and2(o39,
  rliteral10) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral2)]))), rliteral11))) and (bw_and2(o39,
  rliteral12) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o39,
  rliteral14) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o39,
  rliteral17) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o39,
  rliteral20) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o39,
  rliteral23) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o39,
  rliteral26) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and ((ule2(o39, rliteral35) and
  (o40 = true)) or ((not ule2(o39, rliteral35)) and (o40 = false))))) or
  ((not ((not (signflag5 = true)) and ugt2(rax7, rliteral35))) and
  (o40 = false))) and (((((signflag5 = true) and (((o37 = readmem64(sub2(rbp,
  rliteral33), memory3)) and ((((((((bw_and2(o37,
  rliteral9) = toBig1(to_rep((memory3[sub2(rbp, rliteral33)])))) and
  (bw_and2(o37, rliteral10) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp,
  rliteral33), rliteral2)]))), rliteral11))) and (bw_and2(o37,
  rliteral12) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral3)]))), rliteral13))) and (bw_and2(o37,
  rliteral14) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral15)]))), rliteral16))) and (bw_and2(o37,
  rliteral17) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral18)]))), rliteral19))) and (bw_and2(o37,
  rliteral20) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral21)]))), rliteral22))) and (bw_and2(o37,
  rliteral23) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral24)]))), rliteral25))) and (bw_and2(o37,
  rliteral26) = mul2(toBig1(to_rep((memory3[add2(sub2(rbp, rliteral33),
  rliteral27)]))), rliteral28)))) and ((ugt2(o37, rliteral35) and
  (o38 = true)) or ((not ugt2(o37, rliteral35)) and (o38 = false))))) or
  ((not (signflag5 = true)) and (o38 = false))) and ((((o38 = true) and
  ule2(rax7, rliteral35)) and (o41 = true)) or ((not ((o38 = true) and
  ule2(rax7, rliteral35))) and (o41 = false)))) and (o42 = match_bool(o41,
  true, o40)))) and ((result26 = { bool__content = overflowflag2 }) and
  (overflowflag3 = o42))) and
  (not (carryflag3 = true))))))))))))))))))))))))))))))))))))))))))))))) and
  (((tmp_register6 = tmp_register4) and ((memory6 = memory4) and
  ((rdx7 = rdx5) and ((rcx6 = rcx4) and ((rax12 = rax10) and
  ((overflowflag8 = overflowflag6) and ((signflag10 = signflag8) and
  ((carryflag8 = carryflag6) and (zeroflag10 = zeroflag8))))))))) and
  ((tmp_register7 = tmp_register5) and ((memory7 = memory5) and
  ((rdx8 = rdx6) and ((rcx7 = rcx5) and ((rax13 = rax11) and
  ((overflowflag9 = overflowflag7) and ((signflag11 = signflag9) and
  ((carryflag9 = carryflag7) and (zeroflag11 = zeroflag9))))))))))) and
  (((tmp_register8 = tmp_register6) and ((memory8 = memory6) and
  ((rdx9 = rdx7) and ((rcx8 = rcx6) and ((rax14 = rax12) and
  ((overflowflag10 = overflowflag8) and ((signflag12 = signflag10) and
  ((carryflag10 = carryflag8) and (zeroflag12 = zeroflag10))))))))) and
  ((tmp_register9 = tmp_register7) and ((memory9 = memory7) and
  ((rdx10 = rdx8) and ((rcx9 = rcx7) and ((rax15 = rax13) and
  ((overflowflag11 = overflowflag9) and ((signflag13 = signflag11) and
  ((carryflag11 = carryflag9) and (zeroflag13 = zeroflag11))))))))))) ->
  ((((((((((bw_and2((tmp_register8).t__content2,
  rliteral9) = toBig1(to_rep((memory10[sub2(rbp, rliteral5)])))) and
  (bw_and2((tmp_register8).t__content2,
  rliteral10) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral2)]))), rliteral11))) and (bw_and2((tmp_register8).t__content2,
  rliteral12) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral3)]))), rliteral13))) and (bw_and2((tmp_register8).t__content2,
  rliteral14) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral15)]))), rliteral16))) and (bw_and2((tmp_register8).t__content2,
  rliteral17) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral18)]))), rliteral19))) and (bw_and2((tmp_register8).t__content2,
  rliteral20) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral21)]))), rliteral22))) and (bw_and2((tmp_register8).t__content2,
  rliteral23) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral24)]))), rliteral25))) and (bw_and2((tmp_register8).t__content2,
  rliteral26) = mul2(toBig1(to_rep((memory10[add2(sub2(rbp, rliteral5),
  rliteral27)]))), rliteral28))) and
  (forall i:t2. ((ule2(rliteral7, i) and ule2(i, rliteral1)) ->
  (((((((((not (i = sub2(rbp, rliteral5))) and (not (i = add2(sub2(rbp,
  rliteral5), rliteral2)))) and (not (i = add2(sub2(rbp, rliteral5),
  rliteral3)))) and (not (i = add2(sub2(rbp, rliteral5), rliteral15)))) and
  (not (i = add2(sub2(rbp, rliteral5), rliteral18)))) and
  (not (i = add2(sub2(rbp, rliteral5), rliteral21)))) and
  (not (i = add2(sub2(rbp, rliteral5), rliteral24)))) and
  (not (i = add2(sub2(rbp, rliteral5), rliteral27)))) ->
  (to_rep((memory10[i])) = to_rep(((memory8).map__content[i]))))))) ->
  ((forall i:t2. ((ule2(rliteral7, i) and ule2(i, rliteral1)) ->
   (((not (inrange64(i, saved_321, saved_721) = true)) and (not (inrange64(i,
   sub2(rbp, rliteral5), rliteral5) = true))) ->
   (to_rep((memory10[i])) = to_rep((saved_mem1[i])))))) ->
  ((saved_321 = readmem64(sub2(rbp, rliteral32), memory10)) ->
  ((saved_721 = readmem64(sub2(rbp, rliteral33), memory10)) ->
  (uge2(readmem64(sub2(rbp, rliteral5), memory10), udiv2(readmem64(sub2(rbp,
  rliteral33), memory10), rliteral5)) -> ((readmem64(rbp,
  memory10) = saved_rbp1) -> (readmem64(add2(rsp, rliteral5),
  memory10) = saved_ra1)))))))))))))))))
