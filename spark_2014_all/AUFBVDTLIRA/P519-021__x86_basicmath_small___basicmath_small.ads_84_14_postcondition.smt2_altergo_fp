(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(18446744073709551616 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned64

logic attr__ATTRIBUTE_MODULUS : t1

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : t1, t1 -> bool

axiom bool_eq_def3 :
  (forall x:t1. forall y:t1 [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t1

logic user_eq : unsigned64, unsigned64 -> bool

logic dummy : unsigned64

type unsigned64__ref = { unsigned64__content : unsigned64
}

function unsigned64__ref___projection(a: unsigned64__ref) : unsigned64 =
  (a).unsigned64__content

type unsigned8

logic attr__ATTRIBUTE_MODULUS1 : t

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : unsigned8, unsigned8 -> bool

logic dummy1 : unsigned8

type unsigned8__ref = { unsigned8__content : unsigned8
}

function unsigned8__ref___projection(a: unsigned8__ref) : unsigned8 =
  (a).unsigned8__content

logic to_rep : unsigned8 -> t

logic of_rep : t -> unsigned8

axiom inversion_axiom :
  (forall x:unsigned8 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int3(x: unsigned8) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned8 [to_int3(x)]. uint_in_range(to_int3(x)))

type map__ref = { map__content : (t1,unsigned8) farray
}

logic slide : (t1,unsigned8) farray, t1, t1 -> (t1,unsigned8) farray

axiom slide_eq :
  (forall a:(t1,unsigned8) farray.
  (forall first:t1 [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t1,unsigned8) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub1(i, sub1(new_first, old_first))]))))))

logic bool_eq6 : (t1,unsigned8) farray, t1, t1, (t1,unsigned8) farray, t1,
  t1 -> bool

axiom bool_eq_def5 :
  (forall a:(t1,unsigned8) farray. forall a__first:t1. forall a__last:t1.
  forall b:(t1,unsigned8) farray. forall b__first:t1. forall b__last:t1
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)]. (((((ule1(a__first,
  a__last) and (ule1(b__first, b__last) and (sub1(a__last,
  a__first) = sub1(b__last, b__first)))) or ((not ule1(a__first,
  a__last)) and ugt1(b__first, b__last))) and
  (forall temp___idx_154:t1. (((ule1(a__first, temp___idx_154) and
  ule1(temp___idx_154, a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_154)])))) or (not (ule1(a__first, temp___idx_154) and
  ule1(temp___idx_154, a__last)))))) -> (bool_eq6(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule1(a__first, a__last) ->
  (ule1(b__first, b__last) and (sub1(a__last, a__first) = sub1(b__last,
  b__first)))) and ((not ule1(a__first, a__last)) -> ugt1(b__first,
  b__last))) and
  (forall temp___idx_154:t1. ((ule1(a__first, temp___idx_154) and
  ule1(temp___idx_154, a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_154)]))))))) -> (bool_eq6(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> (((ule1(a__first, a__last) -> (ule1(b__first,
  b__last) and (sub1(a__last, a__first) = sub1(b__last, b__first)))) and
  ((not ule1(a__first, a__last)) -> ugt1(b__first, b__last))) and
  (forall temp___idx_154:t1. ((ule1(a__first, temp___idx_154) and
  ule1(temp___idx_154, a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

logic readmem64 : t1, (t1,unsigned8) farray -> t1

logic readmem64__function_guard : t1, t1, (t1,unsigned8) farray -> prop

logic rliteral1 : t1

axiom rliteral_axiom1 : (tqtint1(rliteral1) = 255)

logic rliteral2 : t1

axiom rliteral_axiom2 : (tqtint1(rliteral2) = 65280)

logic rliteral3 : t1

axiom rliteral_axiom3 : (tqtint1(rliteral3) = 1)

logic rliteral4 : t1

axiom rliteral_axiom4 : (tqtint1(rliteral4) = 256)

logic rliteral5 : t1

axiom rliteral_axiom5 : (tqtint1(rliteral5) = 16711680)

logic rliteral6 : t1

axiom rliteral_axiom6 : (tqtint1(rliteral6) = 2)

logic rliteral7 : t1

axiom rliteral_axiom7 : (tqtint1(rliteral7) = 65536)

logic rliteral8 : t1

axiom rliteral_axiom8 : (tqtint1(rliteral8) = 4278190080)

logic rliteral9 : t1

axiom rliteral_axiom9 : (tqtint1(rliteral9) = 3)

logic rliteral10 : t1

axiom rliteral_axiom10 : (tqtint1(rliteral10) = 16777216)

logic rliteral11 : t1

axiom rliteral_axiom11 : (tqtint1(rliteral11) = 1095216660480)

logic rliteral12 : t1

axiom rliteral_axiom12 : (tqtint1(rliteral12) = 4)

logic rliteral13 : t1

axiom rliteral_axiom13 : (tqtint1(rliteral13) = 4294967296)

logic rliteral14 : t1

axiom rliteral_axiom14 : (tqtint1(rliteral14) = 280375465082880)

logic rliteral15 : t1

axiom rliteral_axiom15 : (tqtint1(rliteral15) = 5)

logic rliteral16 : t1

axiom rliteral_axiom16 : (tqtint1(rliteral16) = 1099511627776)

logic rliteral17 : t1

axiom rliteral_axiom17 : (tqtint1(rliteral17) = 71776119061217280)

logic rliteral18 : t1

axiom rliteral_axiom18 : (tqtint1(rliteral18) = 6)

logic rliteral19 : t1

axiom rliteral_axiom19 : (tqtint1(rliteral19) = 281474976710656)

logic rliteral20 : t1

axiom rliteral_axiom20 : (tqtint1(rliteral20) = 18374686479671623680)

logic rliteral21 : t1

axiom rliteral_axiom21 : (tqtint1(rliteral21) = 7)

logic rliteral22 : t1

axiom rliteral_axiom22 : (tqtint1(rliteral22) = 72057594037927936)

axiom readmem64__post_axiom :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem64(addr, x86__memory)].
  ((((((((bw_and1(readmem64(addr, x86__memory),
  rliteral1) = toBig(to_rep((x86__memory[addr])))) and
  (bw_and1(readmem64(addr, x86__memory),
  rliteral2) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral3)]))),
  rliteral4))) and (bw_and1(readmem64(addr, x86__memory),
  rliteral5) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral6)]))),
  rliteral7))) and (bw_and1(readmem64(addr, x86__memory),
  rliteral8) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral9)]))),
  rliteral10))) and (bw_and1(readmem64(addr, x86__memory),
  rliteral11) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral12)]))),
  rliteral13))) and (bw_and1(readmem64(addr, x86__memory),
  rliteral14) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral15)]))),
  rliteral16))) and (bw_and1(readmem64(addr, x86__memory),
  rliteral17) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral18)]))),
  rliteral19))) and (bw_and1(readmem64(addr, x86__memory),
  rliteral20) = mul1(toBig(to_rep((x86__memory[add1(addr, rliteral21)]))),
  rliteral22)))))

logic rliteral23 : t1

axiom rliteral_axiom23 : (tqtint1(rliteral23) = 0)

logic rliteral24 : t1

axiom rliteral_axiom24 : (tqtint1(rliteral24) = 18446744073709551615)

logic rliteral25 : t1

axiom rliteral_axiom25 : (tqtint1(rliteral25) = 8)

logic rliteral26 : t1

axiom rliteral_axiom26 : (tqtint1(rliteral26) = 9)

logic rliteral27 : t1

axiom rliteral_axiom27 : (tqtint1(rliteral27) = 10)

logic rliteral28 : t1

axiom rliteral_axiom28 : (tqtint1(rliteral28) = 11)

logic rliteral29 : t1

axiom rliteral_axiom29 : (tqtint1(rliteral29) = 12)

logic rliteral30 : t1

axiom rliteral_axiom30 : (tqtint1(rliteral30) = 13)

logic rliteral31 : t1

axiom rliteral_axiom31 : (tqtint1(rliteral31) = 14)

logic rliteral32 : t1

axiom rliteral_axiom32 : (tqtint1(rliteral32) = 15)

logic rliteral33 : t1

axiom rliteral_axiom33 : (tqtint1(rliteral33) = 4198744)

logic rliteral34 : t1

axiom rliteral_axiom34 : (tqtint1(rliteral34) = 4198856)

logic rliteral35 : t1

axiom rliteral_axiom35 : (tqtint1(rliteral35) = 152)

logic rliteral36 : t1

axiom rliteral_axiom36 : (tqtint1(rliteral36) = 144)

 (* File "x86.ads", line 334, characters 0-0 *)
goal WP_parameter_def :
  (forall zeroflag:bool. forall carryflag:bool. forall signflag:bool.
  forall overflowflag:bool. forall xmm0:t1. forall xmm1:t1. forall xmm2:t1.
  forall xmm3:t1. forall xmm4:t1. forall xmm5:t1. forall xmm7:t1.
  forall rax:t1. forall rbx:t1. forall rsp:t1. forall rbp:t1. forall rsi:t1.
  forall rdi:t1. forall r12:t1. forall r13:t1.
  forall memory:(t1,unsigned8) farray. forall temp___499:t1.
  forall temp___500:t1. forall temp___498:t1. forall temp___497:t1.
  forall temp___501:(t1,unsigned8) farray. forall temp___495:t1.
  forall temp___496:(t1,unsigned8) farray. forall temp___493:t1.
  forall temp___494:bool. forall temp___491:t1. forall temp___492:t1.
  forall temp___489:t1. forall temp___490:bool. forall temp___488:t1.
  forall temp___486:t1. forall temp___487:bool. forall temp___485:t1.
  forall temp___482:t1. forall temp___483:t1. forall temp___484:t1.
  forall temp___481:bool. forall temp___480:t1. forall o:t1. forall o1:t1.
  forall o2:t1. forall o3:t1. forall xmm51:t1. forall xmm71:t1.
  forall rsp1:t1. forall r121:t1. forall r131:t1.
  forall memory1:(t1,unsigned8) farray. forall result:t1. forall xmm72:t1.
  forall result1:t1. forall r122:t1. forall memory2:(t1,unsigned8) farray.
  forall zeroflag1:bool. forall carryflag1:bool. forall signflag1:bool.
  forall overflowflag1:bool. forall xmm01:t1. forall xmm11:t1.
  forall xmm21:t1. forall xmm31:t1. forall xmm41:t1. forall rax1:t1.
  forall rbx1:t1. forall rsp2:t1. forall rbp1:t1. forall rsi1:t1.
  forall rdi1:t1. forall r123:t1. forall memory3:(t1,unsigned8) farray.
  forall result2:t1. forall xmm52:t1. forall result3:t1. forall r132:t1.
  forall result4:bool. forall zeroflag2:bool. forall result5:t1.
  forall xmm53:t1. forall memory4:(t1,unsigned8) farray.
  forall zeroflag3:bool. forall carryflag2:bool. forall signflag2:bool.
  forall overflowflag2:bool. forall xmm02:t1. forall xmm12:t1.
  forall xmm22:t1. forall xmm32:t1. forall xmm42:t1. forall xmm54:t1.
  forall xmm73:t1. forall rax2:t1. forall rbx2:t1. forall rsp3:t1.
  forall rbp2:t1. forall rsi2:t1. forall rdi2:t__ref1. forall r124:t__ref1.
  forall r133:t__ref1. forall memory5:map__ref. forall zeroflag4:bool.
  forall carryflag3:bool. forall signflag3:bool. forall overflowflag3:bool.
  forall xmm03:t1. forall xmm13:t1. forall xmm23:t1. forall xmm33:t1.
  forall xmm43:t1. forall xmm55:t1. forall xmm74:t1. forall rax3:t1.
  forall rbx3:t1. forall rsp4:t1. forall rbp3:t1. forall rsi3:t1.
  forall rdi3:t1. forall r125:t1. forall r134:t1.
  forall memory6:(t1,unsigned8) farray. forall zeroflag5:bool__ref.
  forall carryflag4:bool__ref. forall signflag4:bool__ref.
  forall overflowflag4:bool__ref. forall xmm04:t__ref1. forall xmm14:t__ref1.
  forall xmm24:t__ref1. forall xmm34:t__ref1. forall xmm44:t__ref1.
  forall xmm56:t__ref1. forall xmm75:t__ref1. forall rax4:t__ref1.
  forall rbx4:t__ref1. forall rsp5:t__ref1. forall rbp4:t__ref1.
  forall rsi4:t__ref1. forall rdi4:t__ref1. forall r126:t__ref1.
  forall r135:t__ref1. forall memory7:map__ref. forall zeroflag6:bool.
  forall carryflag5:bool. forall signflag5:bool. forall overflowflag5:bool.
  forall xmm05:t1. forall xmm15:t1. forall xmm25:t1. forall xmm35:t1.
  forall xmm45:t1. forall xmm57:t1. forall xmm76:t1. forall rax5:t1.
  forall rbx5:t1. forall rsp6:t1. forall rbp5:t1. forall rsi5:t1.
  forall rdi5:t1. forall r127:t1. forall r136:t1.
  forall memory8:(t1,unsigned8) farray. forall zeroflag7:bool__ref.
  forall carryflag6:bool__ref. forall signflag6:bool__ref.
  forall overflowflag6:bool__ref. forall xmm06:t__ref1. forall xmm16:t__ref1.
  forall xmm26:t__ref1. forall xmm36:t__ref1. forall xmm46:t__ref1.
  forall xmm58:t__ref1. forall xmm77:t__ref1. forall rax6:t__ref1.
  forall rbx6:t__ref1. forall rsp7:t__ref1. forall rbp6:t__ref1.
  forall rsi6:t__ref1. forall rdi6:t__ref1. forall r128:t__ref1.
  forall r137:t__ref1. forall memory9:map__ref. forall zeroflag8:bool.
  forall carryflag7:bool. forall signflag7:bool. forall overflowflag7:bool.
  forall xmm07:t1. forall xmm17:t1. forall xmm27:t1. forall xmm37:t1.
  forall xmm47:t1. forall xmm59:t1. forall xmm78:t1. forall rax7:t1.
  forall rbx7:t1. forall rsp8:t1. forall rbp7:t1. forall rsi7:t1.
  forall rdi7:t1. forall r129:t1. forall r138:t1.
  forall memory10:(t1,unsigned8) farray. ((((((temp___499 = rbx) and
  ((temp___500 = rsp) and ((temp___498 = xmm3) and ((temp___497 = rsp) and
  ((temp___501 = memory) and ((temp___495 = rsi) and
  ((temp___496 = memory) and ((temp___493 = xmm2) and
  ((temp___494 = overflowflag) and ((temp___491 = r13) and
  ((temp___492 = xmm7) and ((temp___489 = xmm1) and
  ((temp___490 = signflag) and ((temp___488 = rax) and
  ((temp___486 = xmm0) and ((temp___487 = carryflag) and
  ((temp___485 = rbp) and ((temp___482 = xmm5) and ((temp___483 = rdi) and
  ((temp___484 = r12) and ((temp___481 = zeroflag) and
  ((temp___480 = xmm4) and (((rsp1 = temp___500) and
  (forall i:t1. ((ule1(rliteral23, i) and ule1(i, rliteral24)) ->
  (((((((((((((((((not (i = rsp1)) and (not (i = add1(rsp1, rliteral3)))) and
  (not (i = add1(rsp1, rliteral6)))) and (not (i = add1(rsp1,
  rliteral9)))) and (not (i = add1(rsp1, rliteral12)))) and
  (not (i = add1(rsp1, rliteral15)))) and (not (i = add1(rsp1,
  rliteral18)))) and (not (i = add1(rsp1, rliteral21)))) and
  (not (i = add1(rsp1, rliteral25)))) and (not (i = add1(rsp1,
  rliteral26)))) and (not (i = add1(rsp1, rliteral27)))) and
  (not (i = add1(rsp1, rliteral28)))) and (not (i = add1(rsp1,
  rliteral29)))) and (not (i = add1(rsp1, rliteral30)))) and
  (not (i = add1(rsp1, rliteral31)))) and (not (i = add1(rsp1,
  rliteral32)))) -> (to_rep((memory1[i])) = to_rep((temp___501[i]))))))) and
  ((((o = readmem64(rliteral33, memory1)) and ((((((((bw_and1(o,
  rliteral1) = toBig(to_rep((memory1[rliteral33])))) and (bw_and1(o,
  rliteral2) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral3)]))),
  rliteral4))) and (bw_and1(o,
  rliteral5) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral6)]))),
  rliteral7))) and (bw_and1(o,
  rliteral8) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral9)]))),
  rliteral10))) and (bw_and1(o,
  rliteral11) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral12)]))),
  rliteral13))) and (bw_and1(o,
  rliteral14) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral15)]))),
  rliteral16))) and (bw_and1(o,
  rliteral17) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral18)]))),
  rliteral19))) and (bw_and1(o,
  rliteral20) = mul1(toBig(to_rep((memory1[add1(rliteral33, rliteral21)]))),
  rliteral22)))) and ((xmm71 = result) and (xmm72 = o))) and
  (((result1 = r121) and (r122 = rliteral27)) and ((((((((((bw_and1(xmm72,
  rliteral1) = toBig(to_rep((memory2[rsp1])))) and (bw_and1(xmm72,
  rliteral2) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral3)]))),
  rliteral4))) and (bw_and1(xmm72,
  rliteral5) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral6)]))),
  rliteral7))) and (bw_and1(xmm72,
  rliteral8) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral9)]))),
  rliteral10))) and (bw_and1(xmm72,
  rliteral11) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral12)]))),
  rliteral13))) and (bw_and1(xmm72,
  rliteral14) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral15)]))),
  rliteral16))) and (bw_and1(xmm72,
  rliteral17) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral18)]))),
  rliteral19))) and (bw_and1(xmm72,
  rliteral20) = mul1(toBig(to_rep((memory2[add1(rsp1, rliteral21)]))),
  rliteral22))) and
  (forall i:t1. ((ule1(rliteral23, i) and ule1(i, rliteral24)) ->
  (((((((((not (i = rsp1)) and (not (i = add1(rsp1, rliteral3)))) and
  (not (i = add1(rsp1, rliteral6)))) and (not (i = add1(rsp1,
  rliteral9)))) and (not (i = add1(rsp1, rliteral12)))) and
  (not (i = add1(rsp1, rliteral15)))) and (not (i = add1(rsp1,
  rliteral18)))) and (not (i = add1(rsp1, rliteral21)))) ->
  (to_rep((memory2[i])) = to_rep((memory1[i]))))))) and
  (((forall i:t1. ((ule1(rliteral23, i) and ule1(i, rliteral24)) ->
    (((((((((not (i = rsp2)) and (not (i = add1(rsp2, rliteral3)))) and
    (not (i = add1(rsp2, rliteral6)))) and (not (i = add1(rsp2,
    rliteral9)))) and (not (i = add1(rsp2, rliteral12)))) and
    (not (i = add1(rsp2, rliteral15)))) and (not (i = add1(rsp2,
    rliteral18)))) and (not (i = add1(rsp2, rliteral21)))) ->
    (to_rep((memory3[i])) = to_rep((memory2[i])))))) and
  (rsp2 = rsp1)) and ((((o1 = readmem64(rliteral34, memory3)) and
  ((((((((bw_and1(o1, rliteral1) = toBig(to_rep((memory3[rliteral34])))) and
  (bw_and1(o1, rliteral2) = mul1(toBig(to_rep((memory3[add1(rliteral34,
  rliteral3)]))), rliteral4))) and (bw_and1(o1,
  rliteral5) = mul1(toBig(to_rep((memory3[add1(rliteral34, rliteral6)]))),
  rliteral7))) and (bw_and1(o1,
  rliteral8) = mul1(toBig(to_rep((memory3[add1(rliteral34, rliteral9)]))),
  rliteral10))) and (bw_and1(o1,
  rliteral11) = mul1(toBig(to_rep((memory3[add1(rliteral34, rliteral12)]))),
  rliteral13))) and (bw_and1(o1,
  rliteral14) = mul1(toBig(to_rep((memory3[add1(rliteral34, rliteral15)]))),
  rliteral16))) and (bw_and1(o1,
  rliteral17) = mul1(toBig(to_rep((memory3[add1(rliteral34, rliteral18)]))),
  rliteral19))) and (bw_and1(o1,
  rliteral20) = mul1(toBig(to_rep((memory3[add1(rliteral34, rliteral21)]))),
  rliteral22)))) and ((result2 = xmm51) and (xmm52 = o1))) and
  (((result3 = r131) and (r132 = sub1(r131, rliteral3))) and
  (((result4 = zeroflag1) and (((r132 = rliteral23) and
  (zeroflag2 = true)) or ((not (r132 = rliteral23)) and
  (zeroflag2 = false)))) and (((((o2 = readmem64(sub1(add1(rsp2, rliteral35),
  rliteral36), memory3)) and ((((((((bw_and1(o2,
  rliteral1) = toBig(to_rep((memory3[sub1(add1(rsp2, rliteral35),
  rliteral36)])))) and (bw_and1(o2,
  rliteral2) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral3)]))), rliteral4))) and (bw_and1(o2,
  rliteral5) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral6)]))), rliteral7))) and (bw_and1(o2,
  rliteral8) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral9)]))), rliteral10))) and (bw_and1(o2,
  rliteral11) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral12)]))), rliteral13))) and (bw_and1(o2,
  rliteral14) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral15)]))), rliteral16))) and (bw_and1(o2,
  rliteral17) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral18)]))), rliteral19))) and (bw_and1(o2,
  rliteral20) = mul1(toBig(to_rep((memory3[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral21)]))), rliteral22)))) and (o3 = add1(xmm52,
  o2))) and ((result5 = xmm52) and (xmm53 = o3))) and
  ((((((((((bw_and1(xmm53, rliteral1) = toBig(to_rep((memory4[sub1(add1(rsp2,
  rliteral35), rliteral36)])))) and (bw_and1(xmm53,
  rliteral2) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral3)]))), rliteral4))) and (bw_and1(xmm53,
  rliteral5) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral6)]))), rliteral7))) and (bw_and1(xmm53,
  rliteral8) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral9)]))), rliteral10))) and (bw_and1(xmm53,
  rliteral11) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral12)]))), rliteral13))) and (bw_and1(xmm53,
  rliteral14) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral15)]))), rliteral16))) and (bw_and1(xmm53,
  rliteral17) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral18)]))), rliteral19))) and (bw_and1(xmm53,
  rliteral20) = mul1(toBig(to_rep((memory4[add1(sub1(add1(rsp2, rliteral35),
  rliteral36), rliteral21)]))), rliteral22))) and
  (forall i:t1. ((ule1(rliteral23, i) and ule1(i, rliteral24)) ->
  (((((((((not (i = sub1(add1(rsp2, rliteral35), rliteral36))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral3)))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral6)))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral9)))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral12)))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral15)))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral18)))) and
  (not (i = add1(sub1(add1(rsp2, rliteral35), rliteral36), rliteral21)))) ->
  (to_rep((memory4[i])) = to_rep((memory3[i]))))))) and
  (zeroflag2 = true))))))))))))))))))))))))))))))))) and (((memory5 = {
  map__content = memory4 }) and ((r133 = { t__content1 = r132 }) and
  ((r124 = { t__content1 = r123 }) and ((rdi2 = { t__content1 = rdi1 }) and
  ((rsi1 = rsi2) and ((rbp1 = rbp2) and ((rsp2 = rsp3) and ((rbx1 = rbx2) and
  ((rax1 = rax2) and ((xmm72 = xmm73) and ((xmm53 = xmm54) and
  ((xmm41 = xmm42) and ((xmm31 = xmm32) and ((xmm21 = xmm22) and
  ((xmm11 = xmm12) and ((xmm01 = xmm02) and
  ((overflowflag1 = overflowflag2) and ((signflag1 = signflag2) and
  ((carryflag1 = carryflag2) and
  (zeroflag2 = zeroflag3)))))))))))))))))))) and ((memory6 = memory4) and
  ((r134 = r132) and ((r125 = r123) and ((rdi3 = rdi1) and ((rsi3 = rsi1) and
  ((rbp3 = rbp1) and ((rsp4 = rsp2) and ((rbx3 = rbx1) and ((rax3 = rax1) and
  ((xmm74 = xmm72) and ((xmm55 = xmm53) and ((xmm43 = xmm41) and
  ((xmm33 = xmm31) and ((xmm23 = xmm21) and ((xmm13 = xmm11) and
  ((xmm03 = xmm01) and ((overflowflag3 = overflowflag1) and
  ((signflag3 = signflag1) and ((carryflag3 = carryflag1) and
  (zeroflag4 = zeroflag2)))))))))))))))))))))) and (((memory7 = memory5) and
  ((r135 = r133) and ((r126 = r124) and ((rdi4 = rdi2) and ((rsi4 = {
  t__content1 = rsi2 }) and ((rbp4 = { t__content1 = rbp2 }) and ((rsp5 = {
  t__content1 = rsp3 }) and ((rbx4 = { t__content1 = rbx2 }) and ((rax4 = {
  t__content1 = rax2 }) and ((xmm75 = { t__content1 = xmm73 }) and
  ((xmm56 = { t__content1 = xmm54 }) and ((xmm44 = { t__content1 = xmm42
  }) and ((xmm34 = { t__content1 = xmm32 }) and ((xmm24 = { t__content1 =
  xmm22 }) and ((xmm14 = { t__content1 = xmm12 }) and ((xmm04 = {
  t__content1 = xmm02 }) and ((overflowflag4 = { bool__content =
  overflowflag2 }) and ((signflag4 = { bool__content = signflag2 }) and
  ((carryflag4 = { bool__content = carryflag2 }) and (zeroflag5 = {
  bool__content = zeroflag3 })))))))))))))))))))) and
  ((memory8 = memory6) and ((r136 = r134) and ((r127 = r125) and
  ((rdi5 = rdi3) and ((rsi5 = rsi3) and ((rbp5 = rbp3) and ((rsp6 = rsp4) and
  ((rbx5 = rbx3) and ((rax5 = rax3) and ((xmm76 = xmm74) and
  ((xmm57 = xmm55) and ((xmm45 = xmm43) and ((xmm35 = xmm33) and
  ((xmm25 = xmm23) and ((xmm15 = xmm13) and ((xmm05 = xmm03) and
  ((overflowflag5 = overflowflag3) and ((signflag5 = signflag3) and
  ((carryflag5 = carryflag3) and
  (zeroflag6 = zeroflag4)))))))))))))))))))))) and (((memory9 = memory7) and
  ((r137 = r135) and ((r128 = r126) and ((rdi6 = rdi4) and ((rsi6 = rsi4) and
  ((rbp6 = rbp4) and ((rsp7 = rsp5) and ((rbx6 = rbx4) and ((rax6 = rax4) and
  ((xmm77 = xmm75) and ((xmm58 = xmm56) and ((xmm46 = xmm44) and
  ((xmm36 = xmm34) and ((xmm26 = xmm24) and ((xmm16 = xmm14) and
  ((xmm06 = xmm04) and ((overflowflag6 = overflowflag4) and
  ((signflag6 = signflag4) and ((carryflag6 = carryflag4) and
  (zeroflag7 = zeroflag5)))))))))))))))))))) and ((memory10 = memory8) and
  ((r138 = r136) and ((r129 = r127) and ((rdi7 = rdi5) and ((rsi7 = rsi5) and
  ((rbp7 = rbp5) and ((rsp8 = rsp6) and ((rbx7 = rbx5) and ((rax7 = rax5) and
  ((xmm78 = xmm76) and ((xmm59 = xmm57) and ((xmm47 = xmm45) and
  ((xmm37 = xmm35) and ((xmm27 = xmm25) and ((xmm17 = xmm15) and
  ((xmm07 = xmm05) and ((overflowflag7 = overflowflag5) and
  ((signflag7 = signflag5) and ((carryflag7 = carryflag5) and
  (zeroflag8 = zeroflag6)))))))))))))))))))))) ->
  (forall i:t1. ((ule1(rliteral23, i) and ule1(i, rliteral24)) ->
  (((((((((((((((((not (i = (rsp7).t__content1)) and
  (not (i = add1((rsp7).t__content1, rliteral3)))) and
  (not (i = add1((rsp7).t__content1, rliteral6)))) and
  (not (i = add1((rsp7).t__content1, rliteral9)))) and
  (not (i = add1((rsp7).t__content1, rliteral12)))) and
  (not (i = add1((rsp7).t__content1, rliteral15)))) and
  (not (i = add1((rsp7).t__content1, rliteral18)))) and
  (not (i = add1((rsp7).t__content1, rliteral21)))) and
  (not (i = add1((rsp7).t__content1, rliteral25)))) and
  (not (i = add1((rsp7).t__content1, rliteral26)))) and
  (not (i = add1((rsp7).t__content1, rliteral27)))) and
  (not (i = add1((rsp7).t__content1, rliteral28)))) and
  (not (i = add1((rsp7).t__content1, rliteral29)))) and
  (not (i = add1((rsp7).t__content1, rliteral30)))) and
  (not (i = add1((rsp7).t__content1, rliteral31)))) and
  (not (i = add1((rsp7).t__content1, rliteral32)))) ->
  (to_rep(((memory9).map__content[i])) = to_rep((memory[i]))))))))
