(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort uint8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 8))
(declare-fun user_eq (uint8 uint8) Bool)
(declare-const dummy uint8)
(declare-datatypes () ((uint8__ref (mk_uint8__ref (uint8__content uint8)))))
(define-fun uint8__ref___projection ((a uint8__ref)) uint8 (uint8__content a))
(declare-fun to_rep (uint8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) uint8)
(assert (forall ((x uint8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x uint8)) Int (bv2nat (to_rep x)))
(assert (forall ((x uint8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort uint16 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))
(declare-fun user_eq1 (uint16 uint16) Bool)
(declare-const dummy1 uint16)
(declare-datatypes () ((uint16__ref (mk_uint16__ref (uint16__content uint16)))))
(define-fun uint16__ref___projection ((a uint16__ref)) uint16 (uint16__content a))
(define-fun dynamic_invariant ((temp___expr_142 (_ BitVec 16)) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool true)
(declare-fun to_rep1 (uint16) (_ BitVec 16))
(declare-fun of_rep1 ((_ BitVec 16)) uint16)
(assert (forall ((x uint16)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 16))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x uint16)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x uint16)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 16) uint8))))))
(declare-fun slide ((Array (_ BitVec 16) uint8) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) uint8))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (forall ((first (_ BitVec 16))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (forall ((old_first (_ BitVec 16))) (forall ((new_first (_ BitVec 16))) (forall ((i (_ BitVec 16))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array (_ BitVec 16) uint8) (_ BitVec 16) (_ BitVec 16) (Array (_ BitVec 16) uint8) (_ BitVec 16) (_ BitVec 16)) (Array (_ BitVec 16) uint8))
(assert (forall ((a (Array (_ BitVec 16) uint8)) (b (Array (_ BitVec 16) uint8))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (forall ((i (_ BitVec 16))) (! (and (=> (and (bvule a_first i) (bvule i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (bvugt i a_last) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (uint8 (_ BitVec 16)) (Array (_ BitVec 16) uint8))
(assert (forall ((v uint8)) (forall ((i (_ BitVec 16))) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array (_ BitVec 16) uint8)) (a__first (_ BitVec 16)) (a__last (_ BitVec 16)) (b (Array (_ BitVec 16) uint8)) (b__first (_ BitVec 16)) (b__last (_ BitVec 16))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 16))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array (_ BitVec 16) uint8)) (b (Array (_ BitVec 16) uint8))) (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16)) (b__first (_ BitVec 16)) (b__last (_ BitVec 16))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_132 (_ BitVec 16))) (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array (_ BitVec 16) uint8) (_ BitVec 16) (_ BitVec 16) (Array (_ BitVec 16) uint8) (_ BitVec 16) (_ BitVec 16)) Int)
(assert (forall ((a (Array (_ BitVec 16) uint8)) (b (Array (_ BitVec 16) uint8))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 16) uint8)) (b (Array (_ BitVec 16) uint8))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i (_ BitVec 16)) (j (_ BitVec 16))) (and (bvule i a_last) (and (bvult j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (bvult i a_last) (bvult (to_rep (select a (bvadd i #x0001))) (to_rep (select b (bvadd j #x0001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array (_ BitVec 16) uint8)) (b (Array (_ BitVec 16) uint8))) (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)) (b_first (_ BitVec 16)) (b_last (_ BitVec 16))) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i (_ BitVec 16)) (j (_ BitVec 16))) (and (bvule i b_last) (and (bvult j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (bvult i b_last) (bvugt (to_rep (select a (bvadd j #x0001))) (to_rep (select b (bvadd i #x0001))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) uint16)
(declare-fun last (t) uint16)
(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)
(assert (forall ((f (_ BitVec 16)) (l (_ BitVec 16))) (! (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first (_ BitVec 16)) (range_last (_ BitVec 16)) (low (_ BitVec 16)) (high (_ BitVec 16))) Bool true)
(declare-datatypes () ((us_t (mk___t (elts (Array (_ BitVec 16) uint8)) (rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) uint8) (elts a))
(define-fun of_array ((a (Array (_ BitVec 16) uint8)) (f (_ BitVec 16)) (l (_ BitVec 16))) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a)) (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array (_ BitVec 16) uint8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array (_ BitVec 16) uint8)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array (_ BitVec 16) uint8)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((bytearray__ref (mk_bytearray__ref (bytearray__content us_t)))))
(define-fun bytearray__ref___projection ((a bytearray__ref)) us_t (bytearray__content a))
(declare-const dummy3 (Array (_ BitVec 16) uint8))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array (_ BitVec 16) uint8)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array (_ BitVec 16) uint8)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array (_ BitVec 16) uint8)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array (_ BitVec 16) uint8))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 ((Array (_ BitVec 16) uint8) (Array (_ BitVec 16) uint8)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__bytes__record_struct__id uint16) (rec__bytes__record_struct__length uint8) (rec__bytes__record_struct__payload (Array (_ BitVec 16) uint8))))))
(define-fun us_split_fields_id__projection ((a us_split_fields)) uint16 (rec__bytes__record_struct__id a))
(define-fun us_split_fields_length__projection ((a us_split_fields)) uint8 (rec__bytes__record_struct__length a))
(define-fun us_split_fields_Payload__projection ((a us_split_fields)) (Array (_ BitVec 16) uint8) (rec__bytes__record_struct__payload a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__bytes__record_struct__id (us_split_fields1 a))) (to_rep1 (rec__bytes__record_struct__id (us_split_fields1 b)))) (= (to_rep (rec__bytes__record_struct__length (us_split_fields1 a))) (to_rep (rec__bytes__record_struct__length (us_split_fields1 b))))) (= (bool_eq (rec__bytes__record_struct__payload (us_split_fields1 a)) ((_ int2bv 16) 1) ((_ int2bv 16) 256) (rec__bytes__record_struct__payload (us_split_fields1 b)) ((_ int2bv 16) 1) ((_ int2bv 16) 256)) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const bytes__record_struct__id__first__bit Int)
(declare-const bytes__record_struct__id__last__bit Int)
(declare-const bytes__record_struct__id__position Int)
(assert (<= 0 bytes__record_struct__id__first__bit))
(assert (< bytes__record_struct__id__first__bit bytes__record_struct__id__last__bit))
(assert (<= 0 bytes__record_struct__id__position))
(declare-const bytes__record_struct__length__first__bit Int)
(declare-const bytes__record_struct__length__last__bit Int)
(declare-const bytes__record_struct__length__position Int)
(assert (<= 0 bytes__record_struct__length__first__bit))
(assert (< bytes__record_struct__length__first__bit bytes__record_struct__length__last__bit))
(assert (<= 0 bytes__record_struct__length__position))
(declare-const bytes__record_struct__payload__first__bit Int)
(declare-const bytes__record_struct__payload__last__bit Int)
(declare-const bytes__record_struct__payload__position Int)
(assert (<= 0 bytes__record_struct__payload__first__bit))
(assert (< bytes__record_struct__payload__first__bit bytes__record_struct__payload__last__bit))
(assert (<= 0 bytes__record_struct__payload__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((record_struct__ref (mk_record_struct__ref (record_struct__content us_rep)))))
(define-fun record_struct__ref___projection ((a record_struct__ref)) us_rep (record_struct__content a))
(declare-const a_record us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const output__first uint16)
(declare-const output__last uint16)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_136 (_ BitVec 8)) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool true)
(define-fun dynamic_invariant2 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property ((_ int2bv 16) 0) ((_ int2bv 16) 65535) (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-const length1 (_ BitVec 16))
(declare-const o uint8)
(assert (dynamic_property ((_ int2bv 16) 0) ((_ int2bv 16) 65535) (to_rep1 output__first) (to_rep1 output__last)))
(assert true)
(assert (= (to_rep o) (to_rep (rec__bytes__record_struct__length (us_split_fields1 a_record)))))
(assert (not (bvule (to_rep1 output__first) (to_rep1 output__first))))
(check-sat)
(exit)
