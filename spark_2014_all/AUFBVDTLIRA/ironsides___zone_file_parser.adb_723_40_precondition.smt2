(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort unsigned32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned32 unsigned32) Bool)
(declare-const dummy1 unsigned32)
(declare-datatypes () ((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 (unsigned32__content a))
(define-fun dynamic_invariant1 ((temp___expr_284 (_ BitVec 32)) (temp___is_init_280 Bool) (temp___skip_constant_281 Bool) (temp___do_toplevel_282 Bool) (temp___do_typ_inv_283 Bool)) Bool true)
(declare-sort rritemtype 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (rritemtype rritemtype) Bool)
(declare-const dummy2 rritemtype)
(declare-datatypes () ((rritemtype__ref (mk_rritemtype__ref (rritemtype__content rritemtype)))))
(define-fun rritemtype__ref___projection ((a rritemtype__ref)) rritemtype (rritemtype__content a))
(define-fun dynamic_invariant2 ((temp___expr_298 Int) (temp___is_init_294 Bool) (temp___skip_constant_295 Bool) (temp___do_toplevel_296 Bool) (temp___do_typ_inv_297 Bool)) Bool (=> (or (= temp___is_init_294 true) (<= 0 10)) (in_range2 temp___expr_298)))
(declare-sort linelengthindex 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 256)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (linelengthindex linelengthindex) Bool)
(declare-const dummy3 linelengthindex)
(declare-datatypes () ((linelengthindex__ref (mk_linelengthindex__ref (linelengthindex__content linelengthindex)))))
(define-fun linelengthindex__ref___projection ((a linelengthindex__ref)) linelengthindex (linelengthindex__content a))
(define-fun dynamic_invariant3 ((temp___expr_305 Int) (temp___is_init_301 Bool) (temp___skip_constant_302 Bool) (temp___do_toplevel_303 Bool) (temp___do_typ_inv_304 Bool)) Bool (=> (or (= temp___is_init_301 true) (<= 1 256)) (in_range3 temp___expr_305)))
(declare-sort character 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (character character) Bool)
(declare-const dummy4 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (byte byte) Bool)
(declare-const dummy5 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep1 (byte) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x byte)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort query_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (query_type query_type) Bool)
(declare-const dummy6 query_type)
(declare-datatypes () ((query_type__ref (mk_query_type__ref (query_type__content query_type)))))
(define-fun query_type__ref___projection ((a query_type__ref)) query_type (query_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_561 Int) (temp___is_init_557 Bool) (temp___skip_constant_558 Bool) (temp___do_toplevel_559 Bool) (temp___do_typ_inv_560 Bool)) Bool (=> (or (= temp___is_init_557 true) (<= 0 18)) (in_range5 temp___expr_561)))
(declare-fun to_rep2 (query_type) Int)
(declare-fun of_rep2 (Int) query_type)
(assert (forall ((x query_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x query_type)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int byte))))))
(declare-fun slide1 ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_172 Int)) (=> (and (<= a__first temp___idx_172) (<= temp___idx_172 a__last)) (= (to_rep1 (select a temp___idx_172)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_172))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_172 Int)) (=> (and (<= a__first temp___idx_172) (<= temp___idx_172 a__last)) (= (to_rep1 (select a temp___idx_172)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_172)))))))))))
(declare-fun getrecordtype ((Array Int character) Int Int) Int)
(declare-fun getrecordtype__function_guard (Int (Array Int character) Int Int) Bool)
(assert (forall ((s (Array Int character))) (forall ((begidx Int) (endidx Int)) (! (=> (and (and (dynamic_invariant3 begidx true true true true) (dynamic_invariant3 endidx true true true true)) (<= begidx endidx)) (dynamic_invariant4 (getrecordtype s begidx endidx) true false true true)) :pattern ((getrecordtype s begidx endidx))))))
(declare-sort recordtypeindexvalue 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq7 (recordtypeindexvalue recordtypeindexvalue) Bool)
(declare-const dummy7 recordtypeindexvalue)
(declare-datatypes () ((recordtypeindexvalue__ref (mk_recordtypeindexvalue__ref (recordtypeindexvalue__content recordtypeindexvalue)))))
(define-fun recordtypeindexvalue__ref___projection ((a recordtypeindexvalue__ref)) recordtypeindexvalue (recordtypeindexvalue__content a))
(define-fun dynamic_invariant5 ((temp___expr_1180 Int) (temp___is_init_1176 Bool) (temp___skip_constant_1177 Bool) (temp___do_toplevel_1178 Bool) (temp___do_typ_inv_1179 Bool)) Bool (=> (or (= temp___is_init_1176 true) (<= 0 32)) (in_range6 temp___expr_1180)))
(declare-sort recordtypearrayindex 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq8 (recordtypearrayindex recordtypearrayindex) Bool)
(declare-const dummy8 recordtypearrayindex)
(declare-datatypes () ((recordtypearrayindex__ref (mk_recordtypearrayindex__ref (recordtypearrayindex__content recordtypearrayindex)))))
(define-fun recordtypearrayindex__ref___projection ((a recordtypearrayindex__ref)) recordtypearrayindex (recordtypearrayindex__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int query_type))))))
(declare-fun slide2 ((Array Int query_type) Int Int) (Array Int query_type))
(assert (forall ((a (Array Int query_type))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int query_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int query_type)) (a__first Int) (a__last Int) (b (Array Int query_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_203 Int)) (=> (and (<= a__first temp___idx_203) (<= temp___idx_203 a__last)) (= (to_rep2 (select a temp___idx_203)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_203))))))) true false))
(assert (forall ((a (Array Int query_type)) (b (Array Int query_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_203 Int)) (=> (and (<= a__first temp___idx_203) (<= temp___idx_203 a__last)) (= (to_rep2 (select a temp___idx_203)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_203)))))))))))
(declare-sort blocknumbervalue 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq9 (blocknumbervalue blocknumbervalue) Bool)
(declare-const dummy9 blocknumbervalue)
(declare-datatypes () ((blocknumbervalue__ref (mk_blocknumbervalue__ref (blocknumbervalue__content blocknumbervalue)))))
(define-fun blocknumbervalue__ref___projection ((a blocknumbervalue__ref)) blocknumbervalue (blocknumbervalue__content a))
(define-fun dynamic_invariant6 ((temp___expr_1204 Int) (temp___is_init_1200 Bool) (temp___skip_constant_1201 Bool) (temp___do_toplevel_1202 Bool) (temp___do_typ_inv_1203 Bool)) Bool (=> (or (= temp___is_init_1200 true) (<= 0 32)) (in_range8 temp___expr_1204)))
(declare-sort blocknumberarrayindex 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq10 (blocknumberarrayindex blocknumberarrayindex) Bool)
(declare-const dummy10 blocknumberarrayindex)
(declare-datatypes () ((blocknumberarrayindex__ref (mk_blocknumberarrayindex__ref (blocknumberarrayindex__content blocknumberarrayindex)))))
(define-fun blocknumberarrayindex__ref___projection ((a blocknumberarrayindex__ref)) blocknumberarrayindex (blocknumberarrayindex__content a))
(declare-sort blocklengthvalue 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq11 (blocklengthvalue blocklengthvalue) Bool)
(declare-const dummy11 blocklengthvalue)
(declare-datatypes () ((blocklengthvalue__ref (mk_blocklengthvalue__ref (blocklengthvalue__content blocklengthvalue)))))
(define-fun blocklengthvalue__ref___projection ((a blocklengthvalue__ref)) blocklengthvalue (blocklengthvalue__content a))
(define-fun dynamic_invariant7 ((temp___expr_1228 Int) (temp___is_init_1224 Bool) (temp___skip_constant_1225 Bool) (temp___do_toplevel_1226 Bool) (temp___do_typ_inv_1227 Bool)) Bool (=> (or (= temp___is_init_1224 true) (<= 1 32)) (in_range10 temp___expr_1228)))
(declare-fun to_rep3 (blocklengthvalue) Int)
(declare-fun of_rep3 (Int) blocklengthvalue)
(assert (forall ((x blocklengthvalue)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x blocklengthvalue)) (! (in_range10 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int blocklengthvalue))))))
(declare-fun slide3 ((Array Int blocklengthvalue) Int Int) (Array Int blocklengthvalue))
(assert (forall ((a (Array Int blocklengthvalue))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int blocklengthvalue))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int blocklengthvalue)) (a__first Int) (a__last Int) (b (Array Int blocklengthvalue)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_204 Int)) (=> (and (<= a__first temp___idx_204) (<= temp___idx_204 a__last)) (= (to_rep3 (select a temp___idx_204)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_204))))))) true false))
(assert (forall ((a (Array Int blocklengthvalue)) (b (Array Int blocklengthvalue))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_204 Int)) (=> (and (<= a__first temp___idx_204) (<= temp___idx_204 a__last)) (= (to_rep3 (select a temp___idx_204)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_204)))))))))))
(declare-const dummy12 (Array Int byte))
(declare-const value__size Int)
(declare-fun object__size ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int byte)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))
(declare-fun user_eq12 ((Array Int byte) (Array Int byte)) Bool)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int byte)))))))
(declare-fun slide4 ((Array Int (Array Int byte)) Int Int) (Array Int (Array Int byte)))
(assert (forall ((a (Array Int (Array Int byte)))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int (Array Int byte)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int (Array Int byte))) (a__first Int) (a__last Int) (b (Array Int (Array Int byte))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_205 Int)) (=> (and (<= a__first temp___idx_205) (<= temp___idx_205 a__last)) (= (bool_eq1 (select a temp___idx_205) 1 32 (select b (+ (- b__first a__first) temp___idx_205)) 1 32) true)))) true false))
(assert (forall ((a (Array Int (Array Int byte))) (b (Array Int (Array Int byte)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_205 Int)) (=> (and (<= a__first temp___idx_205) (<= temp___idx_205 a__last)) (= (bool_eq1 (select a temp___idx_205) 1 32 (select b (+ (- b__first a__first) temp___idx_205)) 1 32) true))))))))
(declare-const rrstring (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const linecount (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-sort blockmapindex 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE13 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) (_ BitVec 8))
(declare-fun user_eq13 (blockmapindex blockmapindex) Bool)
(declare-const dummy13 blockmapindex)
(declare-datatypes () ((blockmapindex__ref (mk_blockmapindex__ref (blockmapindex__content blockmapindex)))))
(define-fun blockmapindex__ref___projection ((a blockmapindex__ref)) blockmapindex (blockmapindex__content a))
(define-fun dynamic_invariant8 ((temp___expr_1444 (_ BitVec 8)) (temp___is_init_1440 Bool) (temp___skip_constant_1441 Bool) (temp___do_toplevel_1442 Bool) (temp___do_typ_inv_1443 Bool)) Bool true)
(declare-datatypes () ((map__ref5 (mk_map__ref5 (map__content5 (Array (_ BitVec 8) Bool))))))
(declare-fun slide5 ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) Bool))
(assert (forall ((a (Array (_ BitVec 8) Bool))) (forall ((first (_ BitVec 8))) (! (= (slide5 a first first) a) :pattern ((slide5 a first first))))))
(assert (forall ((a (Array (_ BitVec 8) Bool))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide5 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide5 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array (_ BitVec 8) Bool)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) Bool)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_229 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_229) (bvule temp___idx_229 a__last)) (= (select a temp___idx_229) (select b (bvadd (bvsub b__first a__first) temp___idx_229)))))) true false))
(assert (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_229 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_229) (bvule temp___idx_229 a__last)) (= (select a temp___idx_229) (select b (bvadd (bvsub b__first a__first) temp___idx_229))))))))))
(declare-datatypes () ((map__ref6 (mk_map__ref6 (map__content6 (Array (_ BitVec 8) blocklengthvalue))))))
(declare-fun slide6 ((Array (_ BitVec 8) blocklengthvalue) (_ BitVec 8) (_ BitVec 8)) (Array (_ BitVec 8) blocklengthvalue))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue))) (forall ((first (_ BitVec 8))) (! (= (slide6 a first first) a) :pattern ((slide6 a first first))))))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue))) (forall ((old_first (_ BitVec 8))) (forall ((new_first (_ BitVec 8))) (forall ((i (_ BitVec 8))) (! (= (select (slide6 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide6 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array (_ BitVec 8) blocklengthvalue)) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) blocklengthvalue)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_230 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_230) (bvule temp___idx_230 a__last)) (= (to_rep3 (select a temp___idx_230)) (to_rep3 (select b (bvadd (bvsub b__first a__first) temp___idx_230))))))) true false))
(assert (forall ((a (Array (_ BitVec 8) blocklengthvalue)) (b (Array (_ BitVec 8) blocklengthvalue))) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8))) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_230 (_ BitVec 8))) (=> (and (bvule a__first temp___idx_230) (bvule temp___idx_230 a__last)) (= (to_rep3 (select a temp___idx_230)) (to_rep3 (select b (bvadd (bvsub b__first a__first) temp___idx_230)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-sort source 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq14 (source source) Bool)
(declare-const dummy14 source)
(declare-datatypes () ((source__ref (mk_source__ref (source__content source)))))
(define-fun source__ref___projection ((a source__ref)) source (source__content a))
(define-fun dynamic_invariant9 ((temp___expr_1471 Int) (temp___is_init_1467 Bool) (temp___skip_constant_1468 Bool) (temp___do_toplevel_1469 Bool) (temp___do_typ_inv_1470 Bool)) Bool (=> (or (= temp___is_init_1467 true) (<= 0 18)) (in_range11 temp___expr_1471)))
(declare-sort target 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE15 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) (_ BitVec 16))
(declare-fun user_eq15 (target target) Bool)
(declare-const dummy15 target)
(declare-datatypes () ((target__ref (mk_target__ref (target__content target)))))
(define-fun target__ref___projection ((a target__ref)) target (target__content a))
(define-fun dynamic_invariant10 ((temp___expr_1478 (_ BitVec 16)) (temp___is_init_1474 Bool) (temp___skip_constant_1475 Bool) (temp___do_toplevel_1476 Bool) (temp___do_typ_inv_1477 Bool)) Bool true)
(declare-fun from_query_type (Int) (_ BitVec 16))
(declare-fun from_query_type__function_guard ((_ BitVec 16) Int) Bool)
(assert (forall ((s Int)) (! (=> (dynamic_invariant9 s true true true true) (dynamic_invariant10 (from_query_type s) true false true true)) :pattern ((from_query_type s)))))
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const r60b Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-sort integer 0)
(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)
(declare-fun user_eq16 (integer integer) Bool)
(declare-const dummy16 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep4 (integer) Int)
(declare-fun of_rep4 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x integer)) (! (in_range12 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range12 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)
(declare-fun user_eq17 (integer integer) Bool)
(declare-const dummy17 integer)
(declare-datatypes () ((t61b__ref (mk_t61b__ref (t61b__content integer)))))
(define-fun t61b__ref___projection ((a t61b__ref)) integer (t61b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const r62b Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)
(declare-fun user_eq18 (integer integer) Bool)
(declare-const dummy18 integer)
(declare-datatypes () ((t63b__ref (mk_t63b__ref (t63b__content integer)))))
(define-fun t63b__ref___projection ((a t63b__ref)) integer (t63b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-fun zone_file_parser__fillblockinfo__blockmap__aggregate_def (Bool) (Array (_ BitVec 8) Bool))
(declare-fun zone_file_parser__fillblockinfo__blocklengthmap__aggregate_def (Int) (Array (_ BitVec 8) blocklengthvalue))
(declare-fun temp___1651 (Int) (Array Int query_type))
(declare-fun temp___1655 ((_ BitVec 8)) (Array Int byte))
(declare-fun temp___1659 (Int) (Array Int blocklengthvalue))
(declare-fun temp___1663 ((Array Int byte)) (Array Int (Array Int byte)))
(declare-fun temp___1667 ((_ BitVec 8)) (Array Int byte))
(declare-fun temp___1692 ((Array Int byte)) (Array Int (Array Int byte)))
(declare-fun temp___1696 ((_ BitVec 8)) (Array Int byte))
(define-fun dynamic_invariant11 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range4 temp___expr_74)))
(define-fun dynamic_invariant12 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range12 temp___expr_18)))
(assert (forall ((temp___1646 Bool)) (forall ((temp___1647 (_ BitVec 8))) (= (select (zone_file_parser__fillblockinfo__blockmap__aggregate_def temp___1646) temp___1647) temp___1646))))
(assert (forall ((temp___1649 Int)) (=> (dynamic_invariant7 temp___1649 true true true true) (forall ((temp___1650 (_ BitVec 8))) (= (to_rep3 (select (zone_file_parser__fillblockinfo__blocklengthmap__aggregate_def temp___1649) temp___1650)) temp___1649)))))
(assert (forall ((temp___1653 Int)) (=> (dynamic_invariant4 temp___1653 true true true true) (forall ((temp___1654 Int)) (= (to_rep2 (select (temp___1651 temp___1653) temp___1654)) temp___1653)))))
(define-fun dynamic_invariant13 ((temp___expr_503 (_ BitVec 8)) (temp___is_init_499 Bool) (temp___skip_constant_500 Bool) (temp___do_toplevel_501 Bool) (temp___do_typ_inv_502 Bool)) Bool true)
(assert (forall ((temp___1657 (_ BitVec 8))) (=> (dynamic_invariant13 temp___1657 true true true true) (forall ((temp___1658 Int)) (= (to_rep1 (select (temp___1655 temp___1657) temp___1658)) temp___1657)))))
(assert (forall ((temp___1661 Int)) (=> (dynamic_invariant7 temp___1661 true true true true) (forall ((temp___1662 Int)) (= (to_rep3 (select (temp___1659 temp___1661) temp___1662)) temp___1661)))))
(assert (forall ((temp___1665 (Array Int byte))) (forall ((temp___1666 Int)) (= (select (temp___1663 temp___1665) temp___1666) temp___1665))))
(assert (forall ((temp___1669 (_ BitVec 8))) (=> (dynamic_invariant13 temp___1669 true true true true) (forall ((temp___1670 Int)) (= (to_rep1 (select (temp___1667 temp___1669) temp___1670)) temp___1669)))))
(assert (forall ((temp___1694 (Array Int byte))) (forall ((temp___1695 Int)) (= (select (temp___1692 temp___1694) temp___1695) temp___1694))))
(assert (forall ((temp___1698 (_ BitVec 8))) (=> (dynamic_invariant13 temp___1698 true true true true) (forall ((temp___1699 Int)) (= (to_rep1 (select (temp___1696 temp___1698) temp___1699)) temp___1698)))))
(define-fun dynamic_invariant14 ((temp___expr_1187 Int) (temp___is_init_1183 Bool) (temp___skip_constant_1184 Bool) (temp___do_toplevel_1185 Bool) (temp___do_typ_inv_1186 Bool)) Bool (=> (or (= temp___is_init_1183 true) (<= 1 32)) (in_range7 temp___expr_1187)))
(define-fun dynamic_invariant15 ((temp___expr_1211 Int) (temp___is_init_1207 Bool) (temp___skip_constant_1208 Bool) (temp___do_toplevel_1209 Bool) (temp___do_typ_inv_1210 Bool)) Bool (=> (or (= temp___is_init_1207 true) (<= 1 32)) (in_range9 temp___expr_1211)))
(declare-const numberofrecordtypes Int)
(declare-const recordtypes (Array Int query_type))
(declare-const numberofblocks Int)
(declare-const blocknumbers (Array Int byte))
(declare-const blocklengths (Array Int blocklengthvalue))
(declare-const bitmaps (Array Int (Array Int byte)))
(declare-const blockmap (Array (_ BitVec 8) Bool))
(declare-const blocklengthmap (Array (_ BitVec 8) blocklengthvalue))
(declare-const begidx Int)
(declare-const endidx Int)
(declare-const foundtype Int)
(declare-const recordtype Int)
(declare-const blockindex Int)
(declare-const bytenumber Int)
(declare-const bitnumber Int)
(declare-const result map__ref5)
(declare-const blockmap1 (Array (_ BitVec 8) Bool))
(declare-const result1 map__ref6)
(declare-const blocklengthmap1 (Array (_ BitVec 8) blocklengthvalue))
(declare-const result2 int__ref)
(declare-const numberofrecordtypes1 Int)
(declare-const result3 map__ref2)
(declare-const recordtypes1 (Array Int query_type))
(declare-const result4 int__ref)
(declare-const numberofblocks1 Int)
(declare-const result5 map__ref1)
(declare-const blocknumbers1 (Array Int byte))
(declare-const result6 map__ref3)
(declare-const blocklengths1 (Array Int blocklengthvalue))
(declare-const result7 map__ref4)
(declare-const bitmaps1 (Array Int (Array Int byte)))
(declare-const result8 int__ref)
(declare-const begidx1 Int)
(declare-const begidx2 Int)
(declare-const endidx1 Int)
(declare-const foundtype1 Int)
(assert (=> (<= 0 32) (in_range6 numberofrecordtypes)))
(assert (=> (<= 0 32) (in_range8 numberofblocks)))
(assert (= result (mk_map__ref5 blockmap)))
(assert (= blockmap1 (zone_file_parser__fillblockinfo__blockmap__aggregate_def (distinct 0 0))))
(assert (= result1 (mk_map__ref6 blocklengthmap)))
(assert (= blocklengthmap1 (zone_file_parser__fillblockinfo__blocklengthmap__aggregate_def 1)))
(assert (=> (<= 1 256) (in_range3 begidx)))
(assert (=> (<= 1 256) (in_range3 endidx)))
(assert (=> (<= 0 10) (in_range2 foundtype)))
(assert (=> (<= 0 18) (in_range5 recordtype)))
(assert (=> (<= 0 32) (in_range8 blockindex)))
(assert (=> (<= 1 32) (in_range10 bytenumber)))
(assert (=> (<= 0 2147483647) (in_range1 bitnumber)))
(assert (= result2 (mk_int__ref numberofrecordtypes)))
(assert (= numberofrecordtypes1 0))
(assert (= result3 (mk_map__ref2 recordtypes)))
(assert (= recordtypes1 (temp___1651 18)))
(assert (= result4 (mk_int__ref numberofblocks)))
(assert (= numberofblocks1 0))
(assert (= result5 (mk_map__ref1 blocknumbers)))
(assert (= blocknumbers1 (temp___1655 #x00)))
(assert (= result6 (mk_map__ref3 blocklengths)))
(assert (= blocklengths1 (temp___1659 1)))
(assert (= result7 (mk_map__ref4 bitmaps)))
(assert (= bitmaps1 (temp___1663 (temp___1667 #x00))))
(assert (= result8 (mk_int__ref begidx)))
(assert (= begidx1 1))
(assert (and (and (and (and (<= begidx2 endidx1) (<= begidx2 256)) (<= endidx1 256)) (=> (= foundtype1 1) (forall ((i Int)) (=> (and (<= begidx2 i) (<= i endidx1)) (and (<= 48 (to_rep (select rrstring i))) (<= (to_rep (select rrstring i)) 57)))))) (and (and (in_range3 begidx2) (in_range3 endidx1)) (in_range2 foundtype1))))
(assert (= foundtype1 3))
(assert (not (<= begidx2 endidx1)))
(check-sat)
(exit)
