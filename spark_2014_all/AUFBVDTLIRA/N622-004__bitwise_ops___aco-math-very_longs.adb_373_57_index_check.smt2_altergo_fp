(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type octet

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : octet, octet -> bool

logic dummy : octet

type octet__ref = { octet__content : octet
}

function octet__ref___projection(a: octet__ref) : octet = (a).octet__content

logic to_rep : octet -> t

logic of_rep : t -> octet

axiom inversion_axiom : (forall x:octet [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: octet) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:octet [to_int2(x)]. uint_in_range(to_int2(x)))

type map__ref = { map__content : (int,octet) farray
}

logic slide : (int,octet) farray, int, int -> (int,octet) farray

axiom slide_eq :
  (forall a:(int,octet) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,octet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,octet) farray, int, int, (int,octet) farray, int,
  int -> (int,octet) farray

axiom concat_def :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : octet, int -> (int,octet) farray

axiom singleton_def :
  (forall v:octet.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,octet) farray, int, int, (int,octet) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,octet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,octet) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,octet) farray, int, int, (int,octet) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep((a[(i + 1)])), to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep((a[(j + 1)])), to_rep((b[(i + 1)]))))))))))))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic shift_right : t, int -> t

logic shift_right__function_guard : t, t, int -> prop

axiom shift_right__post_axiom :
  (forall value:t.
  (forall count:int [shift_right(value, count)]. (in_range1(count) ->
  (((count <  256) -> (shift_right(value, count) = udiv(value,
  lsl_bv(of_int(1), of_int(count))))) and ((not (count <  256)) ->
  (shift_right(value, count) = udiv(value, of_int(0))))))))

type tdigit_index_typeB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tdigit_index_typeB, tdigit_index_typeB -> bool

logic dummy2 : tdigit_index_typeB

type tdigit_index_typeB__ref = { tdigit_index_typeB__content :
tdigit_index_typeB
}

function tdigit_index_typeB__ref___projection(a: tdigit_index_typeB__ref) : tdigit_index_typeB =
  (a).tdigit_index_typeB__content

type digit_index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : digit_index_type, digit_index_type -> bool

logic dummy3 : digit_index_type

type digit_index_type__ref = { digit_index_type__content : digit_index_type
}

function digit_index_type__ref___projection(a: digit_index_type__ref) : digit_index_type =
  (a).digit_index_type__content

logic to_rep1 : digit_index_type -> int

logic of_rep1 : int -> digit_index_type

axiom inversion_axiom1 :
  (forall x:digit_index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:digit_index_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic to_rep2 : tdigit_index_typeB -> int

logic of_rep2 : int -> tdigit_index_typeB

axiom inversion_axiom2 :
  (forall x:tdigit_index_typeB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tdigit_index_typeB [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tdigit_index_typeB, tdigit_index_typeB -> bool

logic dummy4 : tdigit_index_typeB

type t21s__ref = { t21s__content : tdigit_index_typeB
}

function t21s__ref___projection(a: t21s__ref) : tdigit_index_typeB =
  (a).t21s__content

type t1

logic first : t1 -> tdigit_index_typeB

logic last : t1 -> tdigit_index_typeB

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,octet) farray; rt : t1
}

function to_array(a: us_t) : (int,octet) farray = (a).elts

function of_array(a: (int,octet) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,octet) farray -> int

logic value__component__size : int

logic object__component__size : (int,octet) farray -> int

logic value__alignment : int

logic object__alignment : (int,octet) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,octet) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,octet) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,octet) farray. (0 <= object__alignment(a)))

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,octet) farray

logic dummy6 : t1

type t22s__ref = { t22s__content : us_t
}

function t22s__ref___projection(a: t22s__ref) : us_t = (a).t22s__content

type us_split_discrs = { rec__aco__math__very_longs__very_long__octet_length
: digit_index_type
}

function us_split_discrs___projection(a: us_split_discrs) : digit_index_type =
  (a).rec__aco__math__very_longs__very_long__octet_length

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__aco__math__very_longs__very_long__long_digits :
us_t
}

function us_split_fields_Long_Digits__projection(a: us_split_fields) : us_t =
  (a).rec__aco__math__very_longs__very_long__long_digits

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__aco__math__very_longs__very_long__octet_length) = to_rep1(((b).us_split_discrs1).rec__aco__math__very_longs__very_long__octet_length)) and
  (bool_eq9(((a).us_split_fields1).rec__aco__math__very_longs__very_long__long_digits,
  ((b).us_split_fields1).rec__aco__math__very_longs__very_long__long_digits) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__aco__math__very_longs__very_long__octet_length) = to_rep1(((b).us_split_discrs1).rec__aco__math__very_longs__very_long__octet_length)) and
  (bool_eq9(((a).us_split_fields1).rec__aco__math__very_longs__very_long__long_digits,
  ((b).us_split_fields1).rec__aco__math__very_longs__very_long__long_digits) = true))) ->
  (bool_eq10(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:digit_index_type. forall a1:(int,octet) farray. forall a2:t1.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__aco__math__very_longs__very_long__octet_length = a };
  us_split_fields1 = { rec__aco__math__very_longs__very_long__long_digits = {
  elts = a1; rt = a2 } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:digit_index_type. forall a1:(int,octet) farray. forall a2:t1.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__aco__math__very_longs__very_long__octet_length = a };
  us_split_fields1 = { rec__aco__math__very_longs__very_long__long_digits = {
  elts = a1; rt = a2 } } })))

logic aco__math__very_longs__very_long__octet_length__first__bit : int

logic aco__math__very_longs__very_long__octet_length__last__bit : int

logic aco__math__very_longs__very_long__octet_length__position : int

axiom aco__math__very_longs__very_long__octet_length__first__bit_axiom :
  (0 <= aco__math__very_longs__very_long__octet_length__first__bit)

axiom aco__math__very_longs__very_long__octet_length__last__bit_axiom :
  (aco__math__very_longs__very_long__octet_length__first__bit <  aco__math__very_longs__very_long__octet_length__last__bit)

axiom aco__math__very_longs__very_long__octet_length__position_axiom :
  (0 <= aco__math__very_longs__very_long__octet_length__position)

logic aco__math__very_longs__very_long__long_digits__first__bit : int

logic aco__math__very_longs__very_long__long_digits__last__bit : int

logic aco__math__very_longs__very_long__long_digits__position : int

axiom aco__math__very_longs__very_long__long_digits__first__bit_axiom :
  (0 <= aco__math__very_longs__very_long__long_digits__first__bit)

axiom aco__math__very_longs__very_long__long_digits__last__bit_axiom :
  (aco__math__very_longs__very_long__long_digits__first__bit <  aco__math__very_longs__very_long__long_digits__last__bit)

axiom aco__math__very_longs__very_long__long_digits__position_axiom :
  (0 <= aco__math__very_longs__very_long__long_digits__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : digit_index_type

logic dummy8 : (int,octet) farray

logic dummy9 : t1

type very_long__ref = { very_long__content : us_rep
}

function very_long__ref___projection(a: very_long__ref) : us_rep =
  (a).very_long__content

type shift_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : shift_type, shift_type -> bool

logic dummy10 : shift_type

type shift_type__ref = { shift_type__content : shift_type
}

function shift_type__ref___projection(a: shift_type__ref) : shift_type =
  (a).shift_type__content

logic number : digit_index_type

logic number1 : (int,octet) farray

logic number2 : t1

logic attr__ATTRIBUTE_ADDRESS : int

logic result____split_discrs : digit_index_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic distance : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r122b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : tdigit_index_typeB, tdigit_index_typeB -> bool

logic dummy11 : tdigit_index_typeB

type tS121bP1__ref = { tS121bP1__content : tdigit_index_typeB
}

function tS121bP1__ref___projection(a: tS121bP1__ref) : tdigit_index_typeB =
  (a).tS121bP1__content

type t2

logic first2 : t2 -> tdigit_index_typeB

logic last2 : t2 -> tdigit_index_typeB

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first2(mk1(f, l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,octet) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,octet) farray = (a).elts1

function of_array1(a: (int,octet) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,octet) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,octet) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,octet) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,octet) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,octet) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,octet) farray. (0 <= object__alignment2(a)))

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq9 : us_t1, us_t1 -> bool

logic dummy12 : (int,octet) farray

logic dummy13 : t2

type s121b__ref = { s121b__content : us_t1
}

function s121b__ref___projection(a: s121b__ref) : us_t1 = (a).s121b__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : tdigit_index_typeB, tdigit_index_typeB -> bool

logic dummy14 : tdigit_index_typeB

type t123b__ref = { t123b__content : tdigit_index_typeB
}

function t123b__ref___projection(a: t123b__ref) : tdigit_index_typeB =
  (a).t123b__content

type t3

logic first4 : t3 -> tdigit_index_typeB

logic last4 : t3 -> tdigit_index_typeB

logic mk2 : int, int -> t3

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first4(mk2(f, l))) = f) and (to_rep2(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,octet) farray; rt2 : t3
}

function to_array2(a: us_t2) : (int,octet) farray = (a).elts2

function of_array2(a: (int,octet) farray, f: int, l: int) : us_t2 = { elts2 =
  a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep2(first4((a).rt2))

function last5(a: us_t2) : int = to_rep2(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,octet) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,octet) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,octet) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,octet) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,octet) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,octet) farray. (0 <= object__alignment3(a)))

function bool_eq15(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep2(first4((x).rt2)), to_rep2(last4((x).rt2)), (y).elts2,
  to_rep2(first4((y).rt2)), to_rep2(last4((y).rt2)))

logic user_eq11 : us_t2, us_t2 -> bool

logic dummy15 : (int,octet) farray

logic dummy16 : t3

type t124b__ref = { t124b__content : us_t2
}

function t124b__ref___projection(a: t124b__ref) : us_t2 = (a).t124b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

type t4

logic first6 : t4 -> tdigit_index_typeB

logic last6 : t4 -> tdigit_index_typeB

logic mk3 : int, int -> t4

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first6(mk3(f, l))) = f) and (to_rep2(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t3 = { elts3 : (int,octet) farray; rt3 : t4
}

function to_array3(a: us_t3) : (int,octet) farray = (a).elts3

function of_array3(a: (int,octet) farray, f: int, l: int) : us_t3 = { elts3 =
  a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep2(first6((a).rt3))

function last7(a: us_t3) : int = to_rep2(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,octet) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,octet) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,octet) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,octet) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,octet) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,octet) farray. (0 <= object__alignment4(a)))

function bool_eq16(x: us_t3, y: us_t3) : bool = bool_eq4((x).elts3,
  to_rep2(first6((x).rt3)), to_rep2(last6((x).rt3)), (y).elts3,
  to_rep2(first6((y).rt3)), to_rep2(last6((y).rt3)))

logic user_eq12 : us_t3, us_t3 -> bool

logic dummy17 : (int,octet) farray

logic dummy18 : t4

type digits_array_type__ref = { digits_array_type__content : us_t3
}

function digits_array_type__ref___projection(a: digits_array_type__ref) : us_t3 =
  (a).digits_array_type__content

logic temp___1454 : t, int, int -> us_t2

axiom def_axiom :
  (forall temp___1456:t.
  (forall temp___1457:int. forall temp___1458:int. ((dynamic_property6(1,
  2147483647, temp___1457, temp___1458) ->
  ((to_rep2(first4((temp___1454(temp___1456, temp___1457,
  temp___1458)).rt2)) = temp___1457) and
  (to_rep2(last4((temp___1454(temp___1456, temp___1457,
  temp___1458)).rt2)) = temp___1458))) and
  (forall temp___1459:int. (((temp___1454(temp___1456, temp___1457,
  temp___1458)).elts2[temp___1459]) = of_rep(temp___1456))))))

logic result____split_fields : (int,octet) farray

logic result____split_fields1 : t1

logic old_overflow : t

logic new_overflow : t

logic overflow_mask : t

logic i : int

logic o : int

logic us : int

logic temp___1461 : (int,octet) farray

logic temp___14611 : t3

logic temp___1462 : (int,octet) farray

logic temp___14621 : t2

logic temp___1464 : (int,octet) farray

logic temp___14641 : t2

logic o1 : (int,octet) farray

logic o2 : t1

logic o3 : (int,octet) farray

logic o4 : t1

logic temp___1466 : digit_index_type

logic temp___14661 : (int,octet) farray

logic temp___14662 : t1

logic o5 : t

logic temp___1478 : digit_index_type

logic temp___14781 : (int,octet) farray

logic temp___14782 : t1

logic temp___1477 : t

logic temp___1476 : t

logic o6 : int

logic o7 : octet

logic o8 : t

logic o9 : t

logic o10 : t

logic o11 : int

logic o12 : octet

logic o13 : t

logic o14 : t

logic o15 : octet

logic o16 : int

logic o17 : (int,octet) farray

logic o18 : (int,octet) farray

logic o19 : t1

logic o20 : (int,octet) farray

logic o21 : t1

logic temp___1471 : digit_index_type

logic temp___14711 : (int,octet) farray

logic temp___14712 : t1

logic o22 : int

logic o23 : octet

logic o24 : t

logic o25 : t

logic o26 : octet

logic o27 : int

logic o28 : (int,octet) farray

logic o29 : (int,octet) farray

logic o30 : t1

logic o31 : (int,octet) farray

logic o32 : t1

logic temp___1475 : digit_index_type

logic temp___14751 : (int,octet) farray

logic temp___14752 : t1

logic o33 : octet

logic new_overflow1 : t

logic result : t

logic old_overflow1 : t

logic result1 : (int,octet) farray

logic result2 : t1

logic result____split_fields2 : (int,octet) farray

logic result____split_fields3 : t1

logic result3 : t

logic overflow_mask1 : t

logic result4 : int

logic i1 : int

logic result____split_fields4 : (int,octet) farray

logic result____split_fields5 : t1

logic old_overflow2 : t

logic new_overflow2 : t

logic i2 : int

logic result5 : t

logic new_overflow3 : t

logic result6 : (int,octet) farray

logic result7 : t1

logic result____split_fields6 : (int,octet) farray

logic result____split_fields7 : t1

logic result8 : (int,octet) farray

logic result9 : t1

logic result____split_fields8 : (int,octet) farray

logic result____split_fields9 : t1

logic result10 : t

logic old_overflow3 : t

logic result____split_fields10 : (int,octet) farray

logic result____split_fields11 : t1

logic old_overflow4 : t

logic new_overflow4 : t

logic i3 : int

logic result____split_fields12 : (int,octet) farray

logic result____split_fields13 : t1

logic old_overflow5 : t

logic new_overflow5 : t

logic i4 : int

logic result____split_fields14 : (int,octet) farray

logic result____split_fields15 : t1

logic old_overflow6 : t

logic new_overflow6 : t

logic i5 : int

logic result____split_fields16 : (int,octet) farray

logic result____split_fields17 : t1

logic old_overflow7 : t

logic new_overflow7 : t

logic i6 : int

axiom H : (dynamic_property1(1, to_rep1(number), to_rep2(first(number2)),
  to_rep2(last(number2))) and ((to_rep2(first(number2)) = 1) and
  (to_rep2(last(number2)) = to_rep1(number))))

axiom H1 : (dynamic_property1(1, to_rep1(result____split_discrs),
  to_rep2(first(result____split_fields1)),
  to_rep2(last(result____split_fields1))) and
  ((to_rep2(first(result____split_fields1)) = 1) and
  (to_rep2(last(result____split_fields1)) = to_rep1(result____split_discrs))))

axiom H2 : in_range4(distance)

axiom H3 : (to_rep1(result____split_discrs) = (to_rep1(number) + 1))

axiom H4 : ((us = to_rep1(number)) and in_range3(to_rep1(number)))

axiom H5 : (result = old_overflow)

axiom H6 : (old_overflow1 = of_int(0))

axiom H7 : true

axiom H8 : true

axiom H9 : true

axiom H10 : (to_rep1(result____split_discrs) = r122b)

axiom H11 : in_range3(r122b)

axiom H12 : (to_rep2(first4((temp___1454(of_int(0), 1, r122b)).rt2)) = 1)

axiom H13 : (to_rep2(last4((temp___1454(of_int(0), 1, r122b)).rt2)) = r122b)

axiom H14 : ({ elts2 = temp___1461; rt2 = temp___14611
  } = temp___1454(of_int(0), 1, r122b))

axiom H15 :
  (((to_rep2(first4(temp___14611)) <= to_rep2(last4(temp___14611))) ->
  (((1 <= r122b) ->
  (((to_rep2(last4(temp___14611)) - to_rep2(first4(temp___14611))) + 1) = ((r122b - 1) + 1))) and
  ((not (1 <= r122b)) ->
  (((to_rep2(last4(temp___14611)) - to_rep2(first4(temp___14611))) + 1) = 0)))) and
  ((not (to_rep2(first4(temp___14611)) <= to_rep2(last4(temp___14611)))) ->
  ((1 <= r122b) -> (0 = ((r122b - 1) + 1)))))

axiom H16 : (temp___1461 = temp___1462)

axiom H17 : (mk1(to_rep2(first4(temp___14611)),
  to_rep2(last4(temp___14611))) = temp___14621)

axiom H18 :
  (((to_rep2(first2(temp___14621)) <= to_rep2(last2(temp___14621))) ->
  (((to_rep2(first(result____split_fields1)) <= to_rep2(last(result____split_fields1))) ->
  (((to_rep2(last2(temp___14621)) - to_rep2(first2(temp___14621))) + 1) = ((to_rep2(last(result____split_fields1)) - to_rep2(first(result____split_fields1))) + 1))) and
  ((not (to_rep2(first(result____split_fields1)) <= to_rep2(last(result____split_fields1)))) ->
  (((to_rep2(last2(temp___14621)) - to_rep2(first2(temp___14621))) + 1) = 0)))) and
  ((not (to_rep2(first2(temp___14621)) <= to_rep2(last2(temp___14621)))) ->
  ((to_rep2(first(result____split_fields1)) <= to_rep2(last(result____split_fields1))) ->
  (0 = ((to_rep2(last(result____split_fields1)) - to_rep2(first(result____split_fields1))) + 1)))))

axiom H19 : ((temp___1464 = temp___1462) and (temp___14641 = temp___14621))

axiom H20 : (temp___1464 = o1)

axiom H21 : (mk(to_rep2(first2(temp___14641)),
  to_rep2(last2(temp___14641))) = o2)

axiom H22 : (o3 = o1)

axiom H23 : (o4 = o2)

axiom H24 : (result____split_discrs = temp___1466)

axiom H25 : (temp___14661 = o3)

axiom H26 : (temp___14662 = o4)

axiom H27 : ((result1 = result____split_fields) and
  (result2 = result____split_fields1))

axiom H28 : ((result____split_fields2 = temp___14661) and
  (result____split_fields3 = temp___14662))

axiom H29 : (result____split_discrs = temp___1466)

axiom H30 : (((8 - distance) <  8) -> (o5 = lsl_bv(of_int(255),
  of_int((8 - distance)))))

axiom H31 : ((not ((8 - distance) <  8)) -> (o5 = of_int(0)))

axiom H32 : (result3 = overflow_mask)

axiom H33 : (overflow_mask1 = o5)

axiom H34 : (result4 = i)

axiom H35 : (i1 = 1)

axiom H36 : (1 <= i1)

axiom H37 : (i1 <= to_rep2(last(number2)))

axiom H38 : (((dynamic_property1(1, to_rep1(result____split_discrs),
  to_rep2(first(result____split_fields5)),
  to_rep2(last(result____split_fields5))) and
  ((to_rep2(first(result____split_fields5)) = 1) and
  (to_rep2(last(result____split_fields5)) = to_rep1(result____split_discrs)))) and
  (forall temp___1480:int.
  (((to_rep2(first(result____split_fields5)) <= temp___1480) and
  (temp___1480 <= to_rep2(last(result____split_fields5)))) ->
  ((i2 <= temp___1480) ->
  ((result____split_fields4[temp___1480]) = (result____split_fields2[temp___1480])))))) and
  ((1 <= i2) and (i2 <= to_rep2(last(number2)))))

axiom H39 : ((to_rep2(first(number2)) <= i2) and
  (i2 <= to_rep2(last(number2))))

axiom H40 : (o6 = i2)

axiom H41 : (o7 = (number1[o6]))

axiom H42 : (o8 = to_rep(o7))

axiom H43 : (o9 = bw_and(o8, overflow_mask1))

axiom H44 : ((o10 = shift_right(o9, (8 - distance))) and
  ((((8 - distance) <  256) -> (o10 = udiv(o9, lsl_bv(of_int(1),
  of_int((8 - distance)))))) and ((not ((8 - distance) <  256)) ->
  (o10 = udiv(o9, of_int(0))))))

axiom H45 : (result5 = new_overflow2)

axiom H46 : (new_overflow3 = o10)

axiom H47 : ((distance <  8) -> ((to_rep2(first(number2)) <= i2) and
  (i2 <= to_rep2(last(number2)))))

axiom H48 : ((distance <  8) -> (o11 = i2))

axiom H49 : ((distance <  8) -> (o12 = (number1[o11])))

axiom H50 : ((distance <  8) -> (o13 = to_rep(o12)))

axiom H51 : ((distance <  8) -> (o14 = lsl_bv(o13, of_int(distance))))

axiom H52 : ((not (distance <  8)) -> (o14 = of_int(0)))

axiom H53 : (to_rep(o15) = o14)

axiom H54 : ((to_rep2(first(result____split_fields5)) <= i2) and
  (i2 <= to_rep2(last(result____split_fields5))))

axiom H55 : (o16 = i2)

axiom H56 : (o17 = (result____split_fields4[o16 <- o15]))

axiom H57 : ((o18 = o17) and (o19 = result____split_fields5))

axiom H58 : ((o20 = o18) and (o21 = o19))

axiom H59 : ((temp___1471 = result____split_discrs) and
  ((temp___14711 = o20) and (temp___14712 = o21)))

axiom H60 : ((result6 = result____split_fields4) and
  (result7 = result____split_fields5))

axiom H61 : ((result____split_fields6 = temp___14711) and
  (result____split_fields7 = temp___14712))

axiom H62 : (result____split_discrs = temp___1471)

 (* File "aco-math-very_longs.adb", line 310, characters 0-0 *)
goal WP_parameter_def : (to_rep2(first(result____split_fields7)) <= i2)
