(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq (unsigned8 unsigned8) Bool)
(declare-const dummy unsigned8)
(declare-datatypes () ((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 (unsigned8__content a))
(declare-fun to_rep (unsigned8) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) unsigned8)
(assert (forall ((x unsigned8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x unsigned8)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned8)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((first (_ BitVec 64))) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array (_ BitVec 64) unsigned8))) (forall ((old_first (_ BitVec 64))) (forall ((new_first (_ BitVec 64))) (forall ((i (_ BitVec 64))) (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool (ite (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array (_ BitVec 64) unsigned8)) (b (Array (_ BitVec 64) unsigned8))) (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (forall ((temp___idx_154 (_ BitVec 64))) (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun readmem64 ((_ BitVec 64) (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))
(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) unsigned8)) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))
(declare-fun user_eq1 (unsigned64 unsigned64) Bool)
(declare-const dummy1 unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_236 (_ BitVec 64)) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool true)
(assert (forall ((addr (_ BitVec 64))) (forall ((x86__memory (Array (_ BitVec 64) unsigned8))) (! (=> (dynamic_invariant addr true true true true) (let ((result (readmem64 addr x86__memory))) (and (and (and (and (and (and (and (and (= (bvand result #x00000000000000FF) ((_ zero_extend 56) (to_rep (select x86__memory addr)))) (= (bvand result #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0000000000000100))) (= (bvand result #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x0000000000010000))) (= (bvand result #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x0000000001000000))) (= (bvand result #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000004)))) #x0000000100000000))) (= (bvand result #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000005)))) #x0000010000000000))) (= (bvand result #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000006)))) #x0001000000000000))) (= (bvand result #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select x86__memory (bvadd addr #x0000000000000007)))) #x0100000000000000))) (dynamic_invariant result true false true true)))) :pattern ((readmem64 addr x86__memory))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(define-fun dynamic_invariant1 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(declare-const zeroflag Bool)
(declare-const carryflag Bool)
(declare-const signflag Bool)
(declare-const overflowflag Bool)
(declare-const xmm0 (_ BitVec 64))
(declare-const xmm1 (_ BitVec 64))
(declare-const xmm2 (_ BitVec 64))
(declare-const xmm3 (_ BitVec 64))
(declare-const xmm4 (_ BitVec 64))
(declare-const xmm5 (_ BitVec 64))
(declare-const xmm7 (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const rbx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rbp (_ BitVec 64))
(declare-const rsi (_ BitVec 64))
(declare-const rdi (_ BitVec 64))
(declare-const r12 (_ BitVec 64))
(declare-const r13 (_ BitVec 64))
(declare-const memory (Array (_ BitVec 64) unsigned8))
(declare-const temp___499 (_ BitVec 64))
(declare-const temp___500 (_ BitVec 64))
(declare-const temp___498 (_ BitVec 64))
(declare-const temp___497 (_ BitVec 64))
(declare-const temp___501 (Array (_ BitVec 64) unsigned8))
(declare-const temp___495 (_ BitVec 64))
(declare-const temp___496 (Array (_ BitVec 64) unsigned8))
(declare-const temp___493 (_ BitVec 64))
(declare-const temp___494 Bool)
(declare-const temp___491 (_ BitVec 64))
(declare-const temp___492 (_ BitVec 64))
(declare-const temp___489 (_ BitVec 64))
(declare-const temp___490 Bool)
(declare-const temp___488 (_ BitVec 64))
(declare-const temp___486 (_ BitVec 64))
(declare-const temp___487 Bool)
(declare-const temp___485 (_ BitVec 64))
(declare-const temp___482 (_ BitVec 64))
(declare-const temp___483 (_ BitVec 64))
(declare-const temp___484 (_ BitVec 64))
(declare-const temp___481 Bool)
(declare-const temp___480 (_ BitVec 64))
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 64))
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const xmm51 (_ BitVec 64))
(declare-const xmm71 (_ BitVec 64))
(declare-const rsp1 (_ BitVec 64))
(declare-const r121 (_ BitVec 64))
(declare-const r131 (_ BitVec 64))
(declare-const memory1 (Array (_ BitVec 64) unsigned8))
(declare-const result (_ BitVec 64))
(declare-const xmm72 (_ BitVec 64))
(declare-const result1 t__ref1)
(declare-const r122 (_ BitVec 64))
(declare-const memory2 (Array (_ BitVec 64) unsigned8))
(declare-const zeroflag1 Bool)
(declare-const carryflag1 Bool)
(declare-const signflag1 Bool)
(declare-const overflowflag1 Bool)
(declare-const xmm01 (_ BitVec 64))
(declare-const xmm11 (_ BitVec 64))
(declare-const xmm21 (_ BitVec 64))
(declare-const xmm31 (_ BitVec 64))
(declare-const xmm41 (_ BitVec 64))
(declare-const rax1 (_ BitVec 64))
(declare-const rbx1 (_ BitVec 64))
(declare-const rsp2 (_ BitVec 64))
(declare-const rbp1 (_ BitVec 64))
(declare-const rsi1 (_ BitVec 64))
(declare-const rdi1 (_ BitVec 64))
(declare-const r123 (_ BitVec 64))
(declare-const memory3 (Array (_ BitVec 64) unsigned8))
(declare-const result2 t__ref1)
(declare-const xmm52 (_ BitVec 64))
(declare-const result3 t__ref1)
(declare-const r132 (_ BitVec 64))
(declare-const result4 bool__ref)
(declare-const zeroflag2 Bool)
(declare-const result5 t__ref1)
(declare-const xmm53 (_ BitVec 64))
(declare-const memory4 (Array (_ BitVec 64) unsigned8))
(declare-const zeroflag3 bool__ref)
(declare-const carryflag2 bool__ref)
(declare-const signflag2 bool__ref)
(declare-const overflowflag2 bool__ref)
(declare-const xmm02 t__ref1)
(declare-const xmm12 t__ref1)
(declare-const xmm22 t__ref1)
(declare-const xmm32 t__ref1)
(declare-const xmm42 t__ref1)
(declare-const xmm54 t__ref1)
(declare-const xmm73 t__ref1)
(declare-const rax2 t__ref1)
(declare-const rbx2 t__ref1)
(declare-const rsp3 t__ref1)
(declare-const rbp2 t__ref1)
(declare-const rsi2 t__ref1)
(declare-const rdi2 t__ref1)
(declare-const r124 t__ref1)
(declare-const r133 t__ref1)
(declare-const memory5 map__ref)
(declare-const zeroflag4 Bool)
(declare-const carryflag3 Bool)
(declare-const signflag3 Bool)
(declare-const overflowflag3 Bool)
(declare-const xmm03 (_ BitVec 64))
(declare-const xmm13 (_ BitVec 64))
(declare-const xmm23 (_ BitVec 64))
(declare-const xmm33 (_ BitVec 64))
(declare-const xmm43 (_ BitVec 64))
(declare-const xmm55 (_ BitVec 64))
(declare-const xmm74 (_ BitVec 64))
(declare-const rax3 (_ BitVec 64))
(declare-const rbx3 (_ BitVec 64))
(declare-const rsp4 (_ BitVec 64))
(declare-const rbp3 (_ BitVec 64))
(declare-const rsi3 (_ BitVec 64))
(declare-const rdi3 (_ BitVec 64))
(declare-const r125 (_ BitVec 64))
(declare-const r134 (_ BitVec 64))
(declare-const memory6 (Array (_ BitVec 64) unsigned8))
(declare-const zeroflag5 bool__ref)
(declare-const carryflag4 bool__ref)
(declare-const signflag4 bool__ref)
(declare-const overflowflag4 bool__ref)
(declare-const xmm04 t__ref1)
(declare-const xmm14 t__ref1)
(declare-const xmm24 t__ref1)
(declare-const xmm34 t__ref1)
(declare-const xmm44 t__ref1)
(declare-const xmm56 t__ref1)
(declare-const xmm75 t__ref1)
(declare-const rax4 t__ref1)
(declare-const rbx4 t__ref1)
(declare-const rsp5 t__ref1)
(declare-const rbp4 t__ref1)
(declare-const rsi4 t__ref1)
(declare-const rdi4 t__ref1)
(declare-const r126 t__ref1)
(declare-const r135 t__ref1)
(declare-const memory7 map__ref)
(declare-const zeroflag6 Bool)
(declare-const carryflag5 Bool)
(declare-const signflag5 Bool)
(declare-const overflowflag5 Bool)
(declare-const xmm05 (_ BitVec 64))
(declare-const xmm15 (_ BitVec 64))
(declare-const xmm25 (_ BitVec 64))
(declare-const xmm35 (_ BitVec 64))
(declare-const xmm45 (_ BitVec 64))
(declare-const xmm57 (_ BitVec 64))
(declare-const xmm76 (_ BitVec 64))
(declare-const rax5 (_ BitVec 64))
(declare-const rbx5 (_ BitVec 64))
(declare-const rsp6 (_ BitVec 64))
(declare-const rbp5 (_ BitVec 64))
(declare-const rsi5 (_ BitVec 64))
(declare-const rdi5 (_ BitVec 64))
(declare-const r127 (_ BitVec 64))
(declare-const r136 (_ BitVec 64))
(declare-const memory8 (Array (_ BitVec 64) unsigned8))
(declare-const zeroflag7 bool__ref)
(declare-const carryflag6 bool__ref)
(declare-const signflag6 bool__ref)
(declare-const overflowflag6 bool__ref)
(declare-const xmm06 t__ref1)
(declare-const xmm16 t__ref1)
(declare-const xmm26 t__ref1)
(declare-const xmm36 t__ref1)
(declare-const xmm46 t__ref1)
(declare-const xmm58 t__ref1)
(declare-const xmm77 t__ref1)
(declare-const rax6 t__ref1)
(declare-const rbx6 t__ref1)
(declare-const rsp7 t__ref1)
(declare-const rbp6 t__ref1)
(declare-const rsi6 t__ref1)
(declare-const rdi6 t__ref1)
(declare-const r128 t__ref1)
(declare-const r137 t__ref1)
(declare-const memory9 map__ref)
(declare-const zeroflag8 Bool)
(declare-const carryflag7 Bool)
(declare-const signflag7 Bool)
(declare-const overflowflag7 Bool)
(declare-const xmm07 (_ BitVec 64))
(declare-const xmm17 (_ BitVec 64))
(declare-const xmm27 (_ BitVec 64))
(declare-const xmm37 (_ BitVec 64))
(declare-const xmm47 (_ BitVec 64))
(declare-const xmm59 (_ BitVec 64))
(declare-const xmm78 (_ BitVec 64))
(declare-const rax7 (_ BitVec 64))
(declare-const rbx7 (_ BitVec 64))
(declare-const rsp8 (_ BitVec 64))
(declare-const rbp7 (_ BitVec 64))
(declare-const rsi7 (_ BitVec 64))
(declare-const rdi7 (_ BitVec 64))
(declare-const r129 (_ BitVec 64))
(declare-const r138 (_ BitVec 64))
(declare-const memory10 (Array (_ BitVec 64) unsigned8))
(assert (= temp___499 rbx))
(assert (= temp___500 rsp))
(assert (= temp___498 xmm3))
(assert (= temp___497 rsp))
(assert (= temp___501 memory))
(assert (= temp___495 rsi))
(assert (= temp___496 memory))
(assert (= temp___493 xmm2))
(assert (= temp___494 overflowflag))
(assert (= temp___491 r13))
(assert (= temp___492 xmm7))
(assert (= temp___489 xmm1))
(assert (= temp___490 signflag))
(assert (= temp___488 rax))
(assert (= temp___486 xmm0))
(assert (= temp___487 carryflag))
(assert (= temp___485 rbp))
(assert (= temp___482 xmm5))
(assert (= temp___483 rdi))
(assert (= temp___484 r12))
(assert (= temp___481 zeroflag))
(assert (= temp___480 xmm4))
(assert (= rsp1 temp___500))
(assert (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 #x0000000000000001)))) (not (= i (bvadd rsp1 #x0000000000000002)))) (not (= i (bvadd rsp1 #x0000000000000003)))) (not (= i (bvadd rsp1 #x0000000000000004)))) (not (= i (bvadd rsp1 #x0000000000000005)))) (not (= i (bvadd rsp1 #x0000000000000006)))) (not (= i (bvadd rsp1 #x0000000000000007)))) (not (= i (bvadd rsp1 #x0000000000000008)))) (not (= i (bvadd rsp1 #x0000000000000009)))) (not (= i (bvadd rsp1 #x000000000000000A)))) (not (= i (bvadd rsp1 #x000000000000000B)))) (not (= i (bvadd rsp1 #x000000000000000C)))) (not (= i (bvadd rsp1 #x000000000000000D)))) (not (= i (bvadd rsp1 #x000000000000000E)))) (not (= i (bvadd rsp1 #x000000000000000F)))) (= (to_rep (select memory1 i)) (to_rep (select temp___501 i)))))))
(assert (and (= o (readmem64 #x0000000000401158 memory1)) (and (and (and (and (and (and (and (= (bvand o #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory1 #x0000000000401158)))) (= (bvand o #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000001)))) #x0000000000000100))) (= (bvand o #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000002)))) #x0000000000010000))) (= (bvand o #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000003)))) #x0000000001000000))) (= (bvand o #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000004)))) #x0000000100000000))) (= (bvand o #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000005)))) #x0000010000000000))) (= (bvand o #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000006)))) #x0001000000000000))) (= (bvand o #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory1 (bvadd #x0000000000401158 #x0000000000000007)))) #x0100000000000000)))))
(assert (= xmm71 result))
(assert (= xmm72 o))
(assert (= result1 (mk_t__ref1 r121)))
(assert (= r122 #x000000000000000A))
(assert (and (and (and (and (and (and (and (and (= (bvand xmm72 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory2 rsp1)))) (= (bvand xmm72 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000001)))) #x0000000000000100))) (= (bvand xmm72 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000002)))) #x0000000000010000))) (= (bvand xmm72 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000003)))) #x0000000001000000))) (= (bvand xmm72 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000004)))) #x0000000100000000))) (= (bvand xmm72 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000005)))) #x0000010000000000))) (= (bvand xmm72 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000006)))) #x0001000000000000))) (= (bvand xmm72 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory2 (bvadd rsp1 #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 #x0000000000000001)))) (not (= i (bvadd rsp1 #x0000000000000002)))) (not (= i (bvadd rsp1 #x0000000000000003)))) (not (= i (bvadd rsp1 #x0000000000000004)))) (not (= i (bvadd rsp1 #x0000000000000005)))) (not (= i (bvadd rsp1 #x0000000000000006)))) (not (= i (bvadd rsp1 #x0000000000000007)))) (= (to_rep (select memory2 i)) (to_rep (select memory1 i))))))))
(assert (and (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i rsp2)) (not (= i (bvadd rsp2 #x0000000000000001)))) (not (= i (bvadd rsp2 #x0000000000000002)))) (not (= i (bvadd rsp2 #x0000000000000003)))) (not (= i (bvadd rsp2 #x0000000000000004)))) (not (= i (bvadd rsp2 #x0000000000000005)))) (not (= i (bvadd rsp2 #x0000000000000006)))) (not (= i (bvadd rsp2 #x0000000000000007)))) (= (to_rep (select memory3 i)) (to_rep (select memory2 i)))))) (= rsp2 rsp1)))
(assert (and (= o1 (readmem64 #x00000000004011C8 memory3)) (and (and (and (and (and (and (and (= (bvand o1 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory3 #x00000000004011C8)))) (= (bvand o1 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000001)))) #x0000000000000100))) (= (bvand o1 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000002)))) #x0000000000010000))) (= (bvand o1 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000003)))) #x0000000001000000))) (= (bvand o1 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000004)))) #x0000000100000000))) (= (bvand o1 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000005)))) #x0000010000000000))) (= (bvand o1 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000006)))) #x0001000000000000))) (= (bvand o1 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd #x00000000004011C8 #x0000000000000007)))) #x0100000000000000)))))
(assert (= result2 (mk_t__ref1 xmm51)))
(assert (= xmm52 o1))
(assert (= result3 (mk_t__ref1 r131)))
(assert (= r132 (bvsub r131 #x0000000000000001)))
(assert (= result4 (mk_bool__ref zeroflag1)))
(assert (= zeroflag2 (ite (= r132 #x0000000000000000) true false)))
(assert (and (= o2 (readmem64 (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) memory3)) (and (and (and (and (and (and (and (= (bvand o2 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory3 (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090))))) (= (bvand o2 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000001)))) #x0000000000000100))) (= (bvand o2 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000002)))) #x0000000000010000))) (= (bvand o2 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000003)))) #x0000000001000000))) (= (bvand o2 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000004)))) #x0000000100000000))) (= (bvand o2 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000005)))) #x0000010000000000))) (= (bvand o2 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000006)))) #x0001000000000000))) (= (bvand o2 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory3 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000007)))) #x0100000000000000)))))
(assert (= o3 (bvadd xmm52 o2)))
(assert (= result5 (mk_t__ref1 xmm52)))
(assert (= xmm53 o3))
(assert (and (and (and (and (and (and (and (and (= (bvand xmm53 #x00000000000000FF) ((_ zero_extend 56) (to_rep (select memory4 (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090))))) (= (bvand xmm53 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000001)))) #x0000000000000100))) (= (bvand xmm53 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000002)))) #x0000000000010000))) (= (bvand xmm53 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000003)))) #x0000000001000000))) (= (bvand xmm53 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000004)))) #x0000000100000000))) (= (bvand xmm53 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000005)))) #x0000010000000000))) (= (bvand xmm53 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000006)))) #x0001000000000000))) (= (bvand xmm53 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep (select memory4 (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000007)))) #x0100000000000000))) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF)) (=> (and (and (and (and (and (and (and (not (= i (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000001)))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000002)))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000003)))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000004)))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000005)))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000006)))) (not (= i (bvadd (bvsub (bvadd rsp2 #x0000000000000098) #x0000000000000090) #x0000000000000007)))) (= (to_rep (select memory4 i)) (to_rep (select memory3 i))))))))
(assert (= zeroflag2 true))
(assert (= memory5 (mk_map__ref memory4)))
(assert (= r133 (mk_t__ref1 r132)))
(assert (= r124 (mk_t__ref1 r123)))
(assert (= rdi2 (mk_t__ref1 rdi1)))
(assert (= rsi2 (mk_t__ref1 rsi1)))
(assert (= rbp2 (mk_t__ref1 rbp1)))
(assert (= rsp3 (mk_t__ref1 rsp2)))
(assert (= rbx2 (mk_t__ref1 rbx1)))
(assert (= rax2 (mk_t__ref1 rax1)))
(assert (= xmm73 (mk_t__ref1 xmm72)))
(assert (= xmm54 (mk_t__ref1 xmm53)))
(assert (= xmm42 (mk_t__ref1 xmm41)))
(assert (= xmm32 (mk_t__ref1 xmm31)))
(assert (= xmm22 (mk_t__ref1 xmm21)))
(assert (= xmm12 (mk_t__ref1 xmm11)))
(assert (= xmm02 (mk_t__ref1 xmm01)))
(assert (= overflowflag2 (mk_bool__ref overflowflag1)))
(assert (= signflag2 (mk_bool__ref signflag1)))
(assert (= carryflag2 (mk_bool__ref carryflag1)))
(assert (= zeroflag3 (mk_bool__ref zeroflag2)))
(assert (= memory6 memory4))
(assert (= r134 r132))
(assert (= r125 r123))
(assert (= rdi3 rdi1))
(assert (= rsi3 rsi1))
(assert (= rbp3 rbp1))
(assert (= rsp4 rsp2))
(assert (= rbx3 rbx1))
(assert (= rax3 rax1))
(assert (= xmm74 xmm72))
(assert (= xmm55 xmm53))
(assert (= xmm43 xmm41))
(assert (= xmm33 xmm31))
(assert (= xmm23 xmm21))
(assert (= xmm13 xmm11))
(assert (= xmm03 xmm01))
(assert (= overflowflag3 overflowflag1))
(assert (= signflag3 signflag1))
(assert (= carryflag3 carryflag1))
(assert (= zeroflag4 zeroflag2))
(assert (= memory7 memory5))
(assert (= r135 r133))
(assert (= r126 r124))
(assert (= rdi4 rdi2))
(assert (= rsi4 rsi2))
(assert (= rbp4 rbp2))
(assert (= rsp5 rsp3))
(assert (= rbx4 rbx2))
(assert (= rax4 rax2))
(assert (= xmm75 xmm73))
(assert (= xmm56 xmm54))
(assert (= xmm44 xmm42))
(assert (= xmm34 xmm32))
(assert (= xmm24 xmm22))
(assert (= xmm14 xmm12))
(assert (= xmm04 xmm02))
(assert (= overflowflag4 overflowflag2))
(assert (= signflag4 signflag2))
(assert (= carryflag4 carryflag2))
(assert (= zeroflag5 zeroflag3))
(assert (= memory8 memory6))
(assert (= r136 r134))
(assert (= r127 r125))
(assert (= rdi5 rdi3))
(assert (= rsi5 rsi3))
(assert (= rbp5 rbp3))
(assert (= rsp6 rsp4))
(assert (= rbx5 rbx3))
(assert (= rax5 rax3))
(assert (= xmm76 xmm74))
(assert (= xmm57 xmm55))
(assert (= xmm45 xmm43))
(assert (= xmm35 xmm33))
(assert (= xmm25 xmm23))
(assert (= xmm15 xmm13))
(assert (= xmm05 xmm03))
(assert (= overflowflag5 overflowflag3))
(assert (= signflag5 signflag3))
(assert (= carryflag5 carryflag3))
(assert (= zeroflag6 zeroflag4))
(assert (= memory9 memory7))
(assert (= r137 r135))
(assert (= r128 r126))
(assert (= rdi6 rdi4))
(assert (= rsi6 rsi4))
(assert (= rbp6 rbp4))
(assert (= rsp7 rsp5))
(assert (= rbx6 rbx4))
(assert (= rax6 rax4))
(assert (= xmm77 xmm75))
(assert (= xmm58 xmm56))
(assert (= xmm46 xmm44))
(assert (= xmm36 xmm34))
(assert (= xmm26 xmm24))
(assert (= xmm16 xmm14))
(assert (= xmm06 xmm04))
(assert (= overflowflag6 overflowflag4))
(assert (= signflag6 signflag4))
(assert (= carryflag6 carryflag4))
(assert (= zeroflag7 zeroflag5))
(assert (= memory10 memory8))
(assert (= r138 r136))
(assert (= r129 r127))
(assert (= rdi7 rdi5))
(assert (= rsi7 rsi5))
(assert (= rbp7 rbp5))
(assert (= rsp8 rsp6))
(assert (= rbx7 rbx5))
(assert (= rax7 rax5))
(assert (= xmm78 xmm76))
(assert (= xmm59 xmm57))
(assert (= xmm47 xmm45))
(assert (= xmm37 xmm35))
(assert (= xmm27 xmm25))
(assert (= xmm17 xmm15))
(assert (= xmm07 xmm05))
(assert (= overflowflag7 overflowflag5))
(assert (= signflag7 signflag5))
(assert (= carryflag7 carryflag5))
(assert (= zeroflag8 zeroflag6))
(declare-const i (_ BitVec 64))
(assert (bvule #x0000000000000000 i))
(assert (bvule i #xFFFFFFFFFFFFFFFF))
(assert (not (= i (t__content1 rsp7))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000001))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000002))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000003))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000004))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000005))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000006))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000007))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000008))))
(assert (not (= i (bvadd (t__content1 rsp7) #x0000000000000009))))
(assert (not (= i (bvadd (t__content1 rsp7) #x000000000000000A))))
(assert (not (= i (bvadd (t__content1 rsp7) #x000000000000000B))))
(assert (not (= i (bvadd (t__content1 rsp7) #x000000000000000C))))
(assert (not (= i (bvadd (t__content1 rsp7) #x000000000000000D))))
(assert (not (= i (bvadd (t__content1 rsp7) #x000000000000000E))))
(assert (not (= i (bvadd (t__content1 rsp7) #x000000000000000F))))
(assert (not (= (to_rep (select (map__content memory9) i)) (to_rep (select memory i)))))
(check-sat)
(exit)
