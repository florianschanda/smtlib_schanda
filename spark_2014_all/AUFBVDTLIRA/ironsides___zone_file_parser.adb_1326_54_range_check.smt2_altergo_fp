(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 65535)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (16 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  16)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (16 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 16))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 16))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(65536 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  65536)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 16)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 65535)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  65536) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  65536)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 65536)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  65536) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 65536)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 16)]. (eq_sub(x, y, 0, 16) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type unsigned16

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : unsigned16, unsigned16 -> bool

logic dummy2 : unsigned16

type unsigned16__ref = { unsigned16__content : unsigned16
}

function unsigned16__ref___projection(a: unsigned16__ref) : unsigned16 =
  (a).unsigned16__content

type rritemtype

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : rritemtype, rritemtype -> bool

logic dummy3 : rritemtype

type rritemtype__ref = { rritemtype__content : rritemtype
}

function rritemtype__ref___projection(a: rritemtype__ref) : rritemtype =
  (a).rritemtype__content

type linelengthindex

predicate in_range4(x: int) = ((1 <= x) and (x <= 256))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : linelengthindex, linelengthindex -> bool

logic dummy4 : linelengthindex

type linelengthindex__ref = { linelengthindex__content : linelengthindex
}

function linelengthindex__ref___projection(a: linelengthindex__ref) : linelengthindex =
  (a).linelengthindex__content

type domainnamestringtypeindex

predicate in_range5(x: int) = ((1 <= x) and (x <= 128))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : domainnamestringtypeindex, domainnamestringtypeindex -> bool

logic dummy5 : domainnamestringtypeindex

type domainnamestringtypeindex__ref = { domainnamestringtypeindex__content :
domainnamestringtypeindex
}

function domainnamestringtypeindex__ref___projection(a: domainnamestringtypeindex__ref) : domainnamestringtypeindex =
  (a).domainnamestringtypeindex__content

logic blankdomainname : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic rr_type__blankdomainname__aggregate_def : int -> (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic zonefileline : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic zlength : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic r83b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic r84b : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type t85b__ref = { t85b__content : integer
}

function t85b__ref___projection(a: t85b__ref) : integer = (a).t85b__content

logic attr__ATTRIBUTE_ADDRESS16 : int

logic r86b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic r87b : int

logic attr__ATTRIBUTE_ADDRESS18 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy7 : integer

type t88b__ref = { t88b__content : integer
}

function t88b__ref___projection(a: t88b__ref) : integer = (a).t88b__content

logic attr__ATTRIBUTE_ADDRESS19 : int

logic r89b : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic r90b : int

logic attr__ATTRIBUTE_ADDRESS21 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy8 : integer

type t91b__ref = { t91b__content : integer
}

function t91b__ref___projection(a: t91b__ref) : integer = (a).t91b__content

logic attr__ATTRIBUTE_ADDRESS22 : int

logic r92b : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic r93b : int

logic attr__ATTRIBUTE_ADDRESS24 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy9 : integer

type t94b__ref = { t94b__content : integer
}

function t94b__ref___projection(a: t94b__ref) : integer = (a).t94b__content

logic attr__ATTRIBUTE_ADDRESS25 : int

logic r95b : int

logic attr__ATTRIBUTE_ADDRESS26 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy10 : integer

type t96b__ref = { t96b__content : integer
}

function t96b__ref___projection(a: t96b__ref) : integer = (a).t96b__content

logic attr__ATTRIBUTE_ADDRESS27 : int

axiom blankdomainname__def_axiom :
  (blankdomainname = rr_type__blankdomainname__aggregate_def(32))

axiom def_axiom :
  (forall temp___158:int. (in_range2(temp___158) ->
  (forall temp___159:int.
  (to_rep((rr_type__blankdomainname__aggregate_def(temp___158)[temp___159])) = temp___158))))

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 32767)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 48)

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 10)

 (* File "zone_file_parser.adb", line 1074, characters 0-0 *)
goal WP_parameter_def :
  (forall newpref:t. forall newweight:t. forall newport:t.
  forall newdomainname:(int,character) farray. forall begidx:int.
  forall endidx:int. forall foundtype:int. forall digitval:t.
  forall tmpval:t. forall lengthoftoken:int. forall i:int. forall i1:int.
  forall i2:int. forall temp___1757:int. forall temp___1756:int.
  forall temp___1755:int. forall o:int. forall o1:int.
  forall temp___1760:int. forall temp___1759:t. forall temp___1758:t.
  forall o2:int. forall temp___1765:int. forall temp___1764:t.
  forall temp___1763:t. forall o3:int. forall temp___1770:int.
  forall temp___1769:t. forall temp___1768:t. forall digitval1:t.
  forall result:int. forall begidx1:int. forall result1:t. forall newpref1:t.
  forall result2:t. forall newweight1:t. forall result3:t. forall newport1:t.
  forall result4:(int,character) farray.
  forall newdomainname1:(int,character) farray. forall begidx2:int.
  forall endidx1:int. forall foundtype1:int. forall begidx3:int.
  forall endidx2:int. forall foundtype2:int. forall result5:int.
  forall begidx4:int. forall begidx5:int. forall endidx3:int.
  forall foundtype3:int. forall begidx6:int. forall endidx4:int.
  forall foundtype4:int. forall begidx7:int. forall endidx5:int.
  forall foundtype5:int. forall begidx8:int. forall endidx6:int.
  forall foundtype6:int. forall begidx9:int. forall endidx7:int.
  forall foundtype7:int. forall result6:int. forall begidx10:int.
  forall begidx11:int. forall endidx8:int. forall foundtype8:int.
  forall result7:t. forall tmpval1:t. forall result8:int. forall i3:int.
  forall digitval2:t. forall tmpval2:t. forall i4:int. forall result9:t.
  forall digitval3:t. forall result10:t. forall tmpval3:t.
  forall digitval4:t__ref. forall tmpval4:t__ref. forall i5:int__ref.
  forall digitval5:t. forall tmpval5:t. forall i6:int.
  forall digitval6:t__ref. forall tmpval6:t__ref. forall i7:int__ref.
  forall digitval7:t. forall tmpval7:t. forall i8:int.
  forall result11:t__ref. forall newpref2:t. forall result12:int__ref.
  forall begidx12:int. forall begidx13:int. forall endidx9:int.
  forall foundtype9:int. forall result13:t__ref. forall tmpval8:t.
  forall result14:int__ref. forall i9:int. forall digitval8:t.
  forall tmpval9:t. forall i10:int. forall result15:t__ref.
  forall digitval9:t. forall result16:t__ref. forall tmpval10:t.
  forall digitval10:t__ref. forall tmpval11:t__ref. forall i11:int__ref.
  forall digitval11:t. forall tmpval12:t. forall i12:int.
  forall digitval12:t__ref. forall tmpval13:t__ref. forall i13:int__ref.
  forall digitval13:t. forall tmpval14:t. forall i14:int.
  forall result17:t__ref. forall newweight2:t. forall result18:int__ref.
  forall begidx14:int. forall begidx15:int. forall endidx10:int.
  forall foundtype10:int. forall result19:t__ref. forall tmpval15:t.
  forall result20:int__ref. forall i15:int. forall digitval14:t.
  forall tmpval16:t. forall i16:int. forall result21:t__ref.
  forall digitval15:t. forall result22:t__ref. forall tmpval17:t.
  forall digitval16:t__ref. forall tmpval18:t__ref. forall i17:int__ref.
  forall digitval17:t. forall tmpval19:t. forall i18:int.
  forall digitval18:t__ref. forall tmpval20:t__ref. forall i19:int__ref.
  forall digitval19:t. forall tmpval21:t. forall i20:int.
  forall result23:t__ref. forall newport2:t.
  ((rr_type__blankdomainname__aggregate_def(32) = blankdomainname) ->
  (in_range4(zlength) -> (((result = begidx) and (begidx1 = 1)) ->
  (in_range4(begidx1) -> (((1 <= 256) -> in_range4(endidx)) -> (((0 <= 10) ->
  in_range3(foundtype)) -> (((1 <= 256) -> in_range4(lengthoftoken)) ->
  (((result1 = newpref) and (newpref1 = rliteral)) ->
  (((result2 = newweight) and (newweight1 = rliteral)) ->
  (((result3 = newport) and (newport1 = rliteral)) ->
  (((result4 = newdomainname) and (newdomainname1 = blankdomainname)) ->
  ((((((begidx2 <= endidx1) and (begidx2 <= zlength)) and
  (endidx1 <= zlength)) and ((foundtype1 = 1) ->
  (forall i21:int. (((begidx2 <= i21) and (i21 <= endidx1)) ->
  ((48 <= to_rep((zonefileline[i21]))) and
  (to_rep((zonefileline[i21])) <= 57)))))) and ((in_range4(begidx2) and
  in_range4(endidx1)) and in_range3(foundtype1))) ->
  (((((not (foundtype1 = 3)) and (endidx1 <  zlength)) and
  ((((temp___1757 = endidx1) and ((temp___1756 = begidx2) and
  ((temp___1755 = foundtype1) and ((endidx2 <  zlength) and ((((((0 <= 10) ->
  in_range3(foundtype2)) and ((1 <= 256) -> in_range4(begidx3))) and
  ((1 <= 256) -> in_range4(endidx2))) and ((not (foundtype2 = 3)) and
  (endidx2 <  zlength))) and ((((o = (endidx2 + 1)) and
  in_range4((endidx2 + 1))) and ((begidx3 = result5) and (begidx4 = o))) and
  ((((((begidx5 <= endidx3) and (begidx5 <= zlength)) and
  (endidx3 <= zlength)) and ((foundtype3 = 1) ->
  (forall i21:int. (((begidx5 <= i21) and (i21 <= endidx3)) ->
  ((48 <= to_rep((zonefileline[i21]))) and
  (to_rep((zonefileline[i21])) <= 57)))))) and ((in_range4(begidx5) and
  in_range4(endidx3)) and in_range3(foundtype3))) and
  (not ((not (foundtype3 = 3)) and (endidx3 <  zlength)))))))))) and
  (((foundtype3 = foundtype4) and ((endidx3 = endidx4) and
  (begidx5 = begidx6))) and ((foundtype5 = foundtype3) and
  ((endidx5 = endidx3) and (begidx7 = begidx5))))) and ((({ int__content =
  foundtype6 } = { int__content = foundtype4 }) and (({ int__content =
  endidx6 } = { int__content = endidx4 }) and ({ int__content = begidx8 } = {
  int__content = begidx6 }))) and ((foundtype7 = foundtype5) and
  ((endidx7 = endidx5) and (begidx9 = begidx7)))))) or
  ((not ((not (foundtype1 = 3)) and (endidx1 <  zlength))) and
  (((foundtype1 = foundtype6) and ((endidx1 = endidx6) and
  (begidx2 = begidx8))) and ((foundtype7 = foundtype1) and
  ((endidx7 = endidx1) and (begidx9 = begidx2)))))) ->
  ((not (endidx6 = zlength)) -> ((((o1 = (endidx6 + 1)) and
  in_range4((endidx6 + 1))) and ((result6 = begidx8) and (begidx10 = o1))) ->
  ((((((begidx11 <= endidx8) and (begidx11 <= zlength)) and
  (endidx8 <= zlength)) and ((foundtype8 = 1) ->
  (forall i21:int. (((begidx11 <= i21) and (i21 <= endidx8)) ->
  ((48 <= to_rep((zonefileline[i21]))) and
  (to_rep((zonefileline[i21])) <= 57)))))) and ((in_range4(begidx11) and
  in_range4(endidx8)) and in_range3(foundtype8))) -> ((foundtype8 = 1) ->
  (((result7 = tmpval) and (tmpval1 = rliteral)) -> (((begidx11 = r83b) and
  in_range4(r83b)) -> (((endidx8 = r84b) and in_range4(r84b)) ->
  ((((result8 = i) and (i3 = r83b)) and ((((r83b <= i3) and (i3 <= r84b)) and
  ((((temp___1760 = i3) and ((temp___1759 = tmpval1) and
  ((temp___1758 = digitval) and (((1 <= begidx11) and ule(tmpval2,
  rliteral1)) and ((((r83b <= r84b) -> dynamic_property(r83b, r84b, i4)) and
  ((r83b <= i4) and (i4 <= r84b))) and (((result9 = digitval2) and
  (digitval3 = sub(of_int(to_rep((zonefileline[i4]))), rliteral2))) and
  (((result10 = tmpval2) and (tmpval3 = add(mul(rliteral3, tmpval2),
  digitval3))) and (ugt(tmpval3, rliteral1) or ((not ugt(tmpval3,
  rliteral1)) and (i4 = r84b)))))))))) and (((i5 = { int__content = i4 }) and
  ((tmpval4 = { t__content = tmpval3 }) and (digitval4 = { t__content =
  digitval3 }))) and ((i6 = i4) and ((tmpval5 = tmpval3) and
  (digitval5 = digitval3))))) and (((i7 = i5) and ((tmpval6 = tmpval4) and
  (digitval6 = digitval4))) and ((i8 = i6) and ((tmpval7 = tmpval5) and
  (digitval7 = digitval5)))))) or ((not ((r83b <= i3) and (i3 <= r84b))) and
  (((i7 = { int__content = i3 }) and ((tmpval6 = { t__content = tmpval1
  }) and (digitval6 = { t__content = digitval }))) and ((i8 = i3) and
  ((tmpval7 = tmpval1) and (digitval7 = digitval1))))))) ->
  ((not ugt((tmpval6).t__content, rliteral1)) -> (((result11 = { t__content =
  newpref1 }) and (newpref2 = (tmpval6).t__content)) ->
  ((not (zlength <= endidx8)) -> ((((o2 = (endidx8 + 1)) and
  in_range4((endidx8 + 1))) and ((result12 = { int__content = begidx11 }) and
  (begidx12 = o2))) -> ((((((begidx13 <= endidx9) and
  (begidx13 <= zlength)) and (endidx9 <= zlength)) and ((foundtype9 = 1) ->
  (forall i21:int. (((begidx13 <= i21) and (i21 <= endidx9)) ->
  ((48 <= to_rep((zonefileline[i21]))) and
  (to_rep((zonefileline[i21])) <= 57)))))) and ((in_range4(begidx13) and
  in_range4(endidx9)) and in_range3(foundtype9))) -> ((foundtype9 = 1) ->
  (((result13 = tmpval6) and (tmpval8 = rliteral)) -> (((begidx13 = r86b) and
  in_range4(r86b)) -> (((endidx9 = r87b) and in_range4(r87b)) ->
  ((((result14 = { int__content = i1 }) and (i9 = r86b)) and
  ((((r86b <= i9) and (i9 <= r87b)) and ((((temp___1765 = i9) and
  ((temp___1764 = tmpval8) and ((temp___1763 = (digitval6).t__content) and
  (((1 <= begidx13) and ule(tmpval9, rliteral1)) and ((((r86b <= r87b) ->
  dynamic_property1(r86b, r87b, i10)) and ((r86b <= i10) and
  (i10 <= r87b))) and (((result15 = { t__content = digitval8 }) and
  (digitval9 = sub(of_int(to_rep((zonefileline[i10]))), rliteral2))) and
  (((result16 = { t__content = tmpval9 }) and (tmpval10 = add(mul(rliteral3,
  tmpval9), digitval9))) and (ugt(tmpval10, rliteral1) or ((not ugt(tmpval10,
  rliteral1)) and (i10 = r87b)))))))))) and (((i11 = { int__content = i10
  }) and ((tmpval11 = { t__content = tmpval10 }) and (digitval10 = {
  t__content = digitval9 }))) and ((i12 = i10) and ((tmpval12 = tmpval10) and
  (digitval11 = digitval9))))) and (((i13 = i11) and
  ((tmpval13 = tmpval11) and (digitval12 = digitval10))) and ((i14 = i12) and
  ((tmpval14 = tmpval12) and (digitval13 = digitval11)))))) or
  ((not ((r86b <= i9) and (i9 <= r87b))) and (((i13 = { int__content = i9
  }) and ((tmpval13 = { t__content = tmpval8 }) and
  (digitval12 = digitval6))) and ((i14 = i9) and ((tmpval14 = tmpval8) and
  (digitval13 = digitval7))))))) -> ((not ugt((tmpval13).t__content,
  rliteral1)) -> (((result17 = { t__content = newweight1 }) and
  (newweight2 = (tmpval13).t__content)) -> ((not (zlength <= endidx9)) ->
  ((((o3 = (endidx9 + 1)) and in_range4((endidx9 + 1))) and ((result18 = {
  int__content = begidx13 }) and (begidx14 = o3))) ->
  ((((((begidx15 <= endidx10) and (begidx15 <= zlength)) and
  (endidx10 <= zlength)) and ((foundtype10 = 1) ->
  (forall i21:int. (((begidx15 <= i21) and (i21 <= endidx10)) ->
  ((48 <= to_rep((zonefileline[i21]))) and
  (to_rep((zonefileline[i21])) <= 57)))))) and ((in_range4(begidx15) and
  in_range4(endidx10)) and in_range3(foundtype10))) -> ((foundtype10 = 1) ->
  (((result19 = tmpval13) and (tmpval15 = rliteral)) ->
  (((begidx15 = r89b) and in_range4(r89b)) -> (((endidx10 = r90b) and
  in_range4(r90b)) -> ((((result20 = { int__content = i2 }) and
  (i15 = r89b)) and ((((r89b <= i15) and (i15 <= r90b)) and
  ((((temp___1770 = i15) and ((temp___1769 = tmpval15) and
  ((temp___1768 = (digitval12).t__content) and (((1 <= begidx15) and
  ule(tmpval16, rliteral1)) and ((((r89b <= r90b) -> dynamic_property2(r89b,
  r90b, i16)) and ((r89b <= i16) and (i16 <= r90b))) and (((result21 = {
  t__content = digitval14 }) and
  (digitval15 = sub(of_int(to_rep((zonefileline[i16]))), rliteral2))) and
  (((result22 = { t__content = tmpval16 }) and (tmpval17 = add(mul(rliteral3,
  tmpval16), digitval15))) and (ugt(tmpval17, rliteral1) or
  ((not ugt(tmpval17, rliteral1)) and (i16 = r90b)))))))))) and (((i17 = {
  int__content = i16 }) and ((tmpval18 = { t__content = tmpval17 }) and
  (digitval16 = { t__content = digitval15 }))) and ((i18 = i16) and
  ((tmpval19 = tmpval17) and (digitval17 = digitval15))))) and
  (((i19 = i17) and ((tmpval20 = tmpval18) and
  (digitval18 = digitval16))) and ((i20 = i18) and ((tmpval21 = tmpval19) and
  (digitval19 = digitval17)))))) or ((not ((r89b <= i15) and
  (i15 <= r90b))) and (((i19 = { int__content = i15 }) and ((tmpval20 = {
  t__content = tmpval15 }) and (digitval18 = digitval12))) and
  ((i20 = i15) and ((tmpval21 = tmpval15) and
  (digitval19 = digitval13))))))) -> ((not ugt((tmpval20).t__content,
  rliteral1)) -> (((result23 = { t__content = newport1 }) and
  (newport2 = (tmpval20).t__content)) -> ((not (zlength <= endidx10)) ->
  in_range4((endidx10 + 1)))))))))))))))))))))))))))))))))))))))))))))))
