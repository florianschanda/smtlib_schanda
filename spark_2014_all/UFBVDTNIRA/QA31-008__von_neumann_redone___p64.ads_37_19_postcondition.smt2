(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort long_integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (long_integer long_integer) Bool)
(declare-const dummy long_integer)
(declare-datatypes () ((long_integer__ref (mk_long_integer__ref (long_integer__content long_integer)))))
(define-fun long_integer__ref___projection ((a long_integer__ref)) long_integer (long_integer__content a))
(declare-sort sqrt_domain64 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (sqrt_domain64 sqrt_domain64) Bool)
(declare-const dummy1 sqrt_domain64)
(declare-datatypes () ((sqrt_domain64__ref (mk_sqrt_domain64__ref (sqrt_domain64__content sqrt_domain64)))))
(define-fun sqrt_domain64__ref___projection ((a sqrt_domain64__ref)) sqrt_domain64 (sqrt_domain64__content a))
(define-fun dynamic_invariant ((temp___expr_201 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= 0 9223372036854775807)) (in_range2 temp___expr_201)))
(declare-sort sqrt_range64 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3037000499)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (sqrt_range64 sqrt_range64) Bool)
(declare-const dummy2 sqrt_range64)
(declare-datatypes () ((sqrt_range64__ref (mk_sqrt_range64__ref (sqrt_range64__content sqrt_range64)))))
(define-fun sqrt_range64__ref___projection ((a sqrt_range64__ref)) sqrt_range64 (sqrt_range64__content a))
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq3 (u64 u64) Bool)
(declare-const dummy3 u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant1 ((temp___expr_213 (_ BitVec 64)) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool)) Bool true)
(declare-fun sqrt_von_neumann_aux64 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun sqrt_von_neumann_aux64__function_guard ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64))) (! (=> (dynamic_invariant1 x true true true) (let ((result (sqrt_von_neumann_aux64 x))) (and (and (and (bvule (bvmul result result) x) (bvuge (bvsub (bvmul (bvadd result ((_ int2bv 64) 1)) (bvadd result ((_ int2bv 64) 1))) ((_ int2bv 64) 1)) x)) (=> (bvule x ((_ int2bv 64) 9223372036854775807)) (bvule result ((_ int2bv 64) 3037000499)))) (dynamic_invariant1 result true false true)))) :pattern ((sqrt_von_neumann_aux64 x)))))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant2 ((temp___expr_21 Int) (temp___is_init_18 Bool) (temp___skip_constant_19 Bool) (temp___do_toplevel_20 Bool)) Bool (=> (or (= temp___is_init_18 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range1 temp___expr_21)))
(define-fun dynamic_invariant3 ((temp___expr_207 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 3037000499)) (in_range3 temp___expr_207)))
(declare-const p64__sqrt_von_neumann64__result Int)
(declare-const o (_ BitVec 64))
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Bool)
(declare-const result Int)
(declare-const p64__sqrt_von_neumann64__result1 Int)
(declare-const p64__sqrt_von_neumann64__result2 Int)
(declare-const p64__sqrt_von_neumann64__result3 Int)
(declare-const p64__sqrt_von_neumann64__result4 Int)
(declare-const p64__sqrt_von_neumann64__result5 Int)
(declare-const result1 Int)
(assert (in_range2 x))
(assert (= p64__sqrt_von_neumann64__result1 p64__sqrt_von_neumann64__result2))
(assert (= p64__sqrt_von_neumann64__result3 p64__sqrt_von_neumann64__result1))
(assert (and (= o (sqrt_von_neumann_aux64 ((_ int2bv 64) x))) (and (and (bvule (bvmul o o) ((_ int2bv 64) x)) (bvuge (bvsub (bvmul (bvadd o ((_ int2bv 64) 1)) (bvadd o ((_ int2bv 64) 1))) ((_ int2bv 64) 1)) ((_ int2bv 64) x))) (=> (bvule ((_ int2bv 64) x) ((_ int2bv 64) 9223372036854775807)) (bvule o ((_ int2bv 64) 3037000499))))))
(assert (= o1 (bv2nat o)))
(assert (and (= o2 o1) (in_range3 o1)))
(assert (= (mk_int__ref result) (mk_int__ref p64__sqrt_von_neumann64__result)))
(assert (= p64__sqrt_von_neumann64__result1 o2))
(assert (= (mk_int__ref p64__sqrt_von_neumann64__result4) (mk_int__ref p64__sqrt_von_neumann64__result2)))
(assert (= p64__sqrt_von_neumann64__result5 p64__sqrt_von_neumann64__result3))
(assert (= result1 p64__sqrt_von_neumann64__result4))
(assert (not (<= (* p64__sqrt_von_neumann64__result4 p64__sqrt_von_neumann64__result4) x)))
(check-sat)
(exit)
