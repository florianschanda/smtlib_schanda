(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(65536 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type bits_3

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 7)

predicate in_range2(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq2 : bits_3, bits_3 -> bool

logic dummy2 : bits_3

type bits_3__ref = { bits_3__content : bits_3
}

function bits_3__ref___projection(a: bits_3__ref) : bits_3 =
  (a).bits_3__content

logic to_rep : bits_3 -> t

logic of_rep : t -> bits_3

axiom inversion_axiom :
  (forall x:bits_3 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:bits_3 [to_rep(x)]. in_range2(to_rep(x)))

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 8)

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (in_range2(urem(x, rliteral2)) ->
  (to_rep(of_rep(x)) = urem(x, rliteral2))))

function to_int2(x: bits_3) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:bits_3 [to_int2(x)]. in_range_int(to_int2(x)))

type bits_7

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 127)

predicate in_range3(x: t) = (ule(rliteral, x) and ule(x, rliteral3))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 127))

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq3 : bits_7, bits_7 -> bool

logic dummy3 : bits_7

type bits_7__ref = { bits_7__content : bits_7
}

function bits_7__ref___projection(a: bits_7__ref) : bits_7 =
  (a).bits_7__content

logic to_rep1 : bits_7 -> t

logic of_rep1 : t -> bits_7

axiom inversion_axiom1 :
  (forall x:bits_7 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:bits_7 [to_rep1(x)]. in_range3(to_rep1(x)))

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 128)

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (in_range3(urem(x, rliteral4)) ->
  (to_rep1(of_rep1(x)) = urem(x, rliteral4))))

function to_int3(x: bits_7) : int = tqtint(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:bits_7 [to_int3(x)]. in_range_int1(to_int3(x)))

type bits_10

logic rliteral5 : t1

axiom rliteral_axiom5 : (tqtint1(rliteral5) = 0)

logic rliteral6 : t1

axiom rliteral_axiom6 : (tqtint1(rliteral6) = 1023)

predicate in_range4(x: t1) = (ule1(rliteral5, x) and ule1(x, rliteral6))

predicate in_range_int2(x: int) = ((0 <= x) and (x <= 1023))

logic bool_eq7 : t1, t1 -> bool

axiom bool_eq_def6 :
  (forall x:t1. forall y:t1 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq4 : bits_10, bits_10 -> bool

logic dummy4 : bits_10

type bits_10__ref = { bits_10__content : bits_10
}

function bits_10__ref___projection(a: bits_10__ref) : bits_10 =
  (a).bits_10__content

logic to_rep2 : bits_10 -> t1

logic of_rep2 : t1 -> bits_10

axiom inversion_axiom2 :
  (forall x:bits_10 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:bits_10 [to_rep2(x)]. in_range4(to_rep2(x)))

logic rliteral7 : t1

axiom rliteral_axiom7 : (tqtint1(rliteral7) = 1024)

axiom coerce_axiom2 :
  (forall x:t1 [to_rep2(of_rep2(x))]. (in_range4(urem1(x, rliteral7)) ->
  (to_rep2(of_rep2(x)) = urem1(x, rliteral7))))

function to_int4(x: bits_10) : int = tqtint1(to_rep2(x))

axiom range_int_axiom2 :
  (forall x:bits_10 [to_int4(x)]. in_range_int2(to_int4(x)))

type bits_1

logic rliteral8 : t

axiom rliteral_axiom8 : (tqtint(rliteral8) = 1)

predicate in_range5(x: t) = (ule(rliteral, x) and ule(x, rliteral8))

predicate in_range_int3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : t, t -> bool

axiom bool_eq_def7 :
  (forall x:t. forall y:t [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic user_eq5 : bits_1, bits_1 -> bool

logic dummy5 : bits_1

type bits_1__ref = { bits_1__content : bits_1
}

function bits_1__ref___projection(a: bits_1__ref) : bits_1 =
  (a).bits_1__content

logic to_rep3 : bits_1 -> t

logic of_rep3 : t -> bits_1

axiom inversion_axiom3 :
  (forall x:bits_1 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:bits_1 [to_rep3(x)]. in_range5(to_rep3(x)))

logic rliteral9 : t

axiom rliteral_axiom9 : (tqtint(rliteral9) = 2)

axiom coerce_axiom3 :
  (forall x:t [to_rep3(of_rep3(x))]. (in_range5(urem(x, rliteral9)) ->
  (to_rep3(of_rep3(x)) = urem(x, rliteral9))))

function to_int5(x: bits_1) : int = tqtint(to_rep3(x))

axiom range_int_axiom3 :
  (forall x:bits_1 [to_int5(x)]. in_range_int3(to_int5(x)))

type bits_2

logic rliteral10 : t

axiom rliteral_axiom10 : (tqtint(rliteral10) = 3)

predicate in_range6(x: t) = (ule(rliteral, x) and ule(x, rliteral10))

predicate in_range_int4(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq9 : t, t -> bool

axiom bool_eq_def8 :
  (forall x:t. forall y:t [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq6 : bits_2, bits_2 -> bool

logic dummy6 : bits_2

type bits_2__ref = { bits_2__content : bits_2
}

function bits_2__ref___projection(a: bits_2__ref) : bits_2 =
  (a).bits_2__content

logic to_rep4 : bits_2 -> t

logic of_rep4 : t -> bits_2

axiom inversion_axiom4 :
  (forall x:bits_2 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:bits_2 [to_rep4(x)]. in_range6(to_rep4(x)))

logic rliteral11 : t

axiom rliteral_axiom11 : (tqtint(rliteral11) = 4)

axiom coerce_axiom4 :
  (forall x:t [to_rep4(of_rep4(x))]. (in_range6(urem(x, rliteral11)) ->
  (to_rep4(of_rep4(x)) = urem(x, rliteral11))))

function to_int6(x: bits_2) : int = tqtint(to_rep4(x))

axiom range_int_axiom4 :
  (forall x:bits_2 [to_int6(x)]. in_range_int4(to_int6(x)))

type bits_8

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq10 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic user_eq7 : bits_8, bits_8 -> bool

logic dummy7 : bits_8

type bits_8__ref = { bits_8__content : bits_8
}

function bits_8__ref___projection(a: bits_8__ref) : bits_8 =
  (a).bits_8__content

logic to_rep5 : bits_8 -> t

logic of_rep5 : t -> bits_8

axiom inversion_axiom5 :
  (forall x:bits_8 [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : true

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int7(x: bits_8) : int = tqtint(to_rep5(x))

axiom range_int_axiom5 :
  (forall x:bits_8 [to_int7(x)]. uint_in_range(to_int7(x)))

type us_split_fields = { rec__dw1000__register_types__tx_fctrl_type__tflen :
bits_7; rec__dw1000__register_types__tx_fctrl_type__tfle : bits_3;
rec__dw1000__register_types__tx_fctrl_type__r : bits_3;
rec__dw1000__register_types__tx_fctrl_type__txbr : bits_2;
rec__dw1000__register_types__tx_fctrl_type__tr : bits_1;
rec__dw1000__register_types__tx_fctrl_type__txprf : bits_2;
rec__dw1000__register_types__tx_fctrl_type__txpsr : bits_2;
rec__dw1000__register_types__tx_fctrl_type__pe : bits_2;
rec__dw1000__register_types__tx_fctrl_type__txboffs : bits_10;
rec__dw1000__register_types__tx_fctrl_type__ifsdelay : bits_8
}

function us_split_fields_TFLEN__projection(a: us_split_fields) : bits_7 =
  (a).rec__dw1000__register_types__tx_fctrl_type__tflen

function us_split_fields_TFLE__projection(a: us_split_fields) : bits_3 =
  (a).rec__dw1000__register_types__tx_fctrl_type__tfle

function us_split_fields_R__projection(a: us_split_fields) : bits_3 =
  (a).rec__dw1000__register_types__tx_fctrl_type__r

function us_split_fields_TXBR__projection(a: us_split_fields) : bits_2 =
  (a).rec__dw1000__register_types__tx_fctrl_type__txbr

function us_split_fields_TR__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__tx_fctrl_type__tr

function us_split_fields_TXPRF__projection(a: us_split_fields) : bits_2 =
  (a).rec__dw1000__register_types__tx_fctrl_type__txprf

function us_split_fields_TXPSR__projection(a: us_split_fields) : bits_2 =
  (a).rec__dw1000__register_types__tx_fctrl_type__txpsr

function us_split_fields_PE__projection(a: us_split_fields) : bits_2 =
  (a).rec__dw1000__register_types__tx_fctrl_type__pe

function us_split_fields_TXBOFFS__projection(a: us_split_fields) : bits_10 =
  (a).rec__dw1000__register_types__tx_fctrl_type__txboffs

function us_split_fields_IFSDELAY__projection(a: us_split_fields) : bits_8 =
  (a).rec__dw1000__register_types__tx_fctrl_type__ifsdelay

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___6__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((((((((to_rep1(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tflen) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tflen)) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tfle) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tfle))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__r) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__r))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txbr) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txbr))) and
  (to_rep3(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tr) = to_rep3(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tr))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txprf) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txprf))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txpsr) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txpsr))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__pe) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__pe))) and
  (to_rep2(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txboffs) = to_rep2(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txboffs))) and
  (to_rep5(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__ifsdelay) = to_rep5(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__ifsdelay))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((((((((to_rep1(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tflen) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tflen)) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tfle) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tfle))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__r) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__r))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txbr) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txbr))) and
  (to_rep3(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tr) = to_rep3(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__tr))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txprf) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txprf))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txpsr) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txpsr))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__pe) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__pe))) and
  (to_rep2(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txboffs) = to_rep2(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__txboffs))) and
  (to_rep5(((a).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__ifsdelay) = to_rep5(((b).us_split_fields1).rec__dw1000__register_types__tx_fctrl_type__ifsdelay)))) ->
  (bool_eq11(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bits_7. forall a1:bits_3. forall a2:bits_3. forall a3:bits_2.
  forall a4:bits_1. forall a5:bits_2. forall a6:bits_2. forall a7:bits_2.
  forall a8:bits_10. forall a9:bits_8. (0 <= object__size({
  us_split_fields1 = { rec__dw1000__register_types__tx_fctrl_type__tflen = a;
  rec__dw1000__register_types__tx_fctrl_type__tfle = a1;
  rec__dw1000__register_types__tx_fctrl_type__r = a2;
  rec__dw1000__register_types__tx_fctrl_type__txbr = a3;
  rec__dw1000__register_types__tx_fctrl_type__tr = a4;
  rec__dw1000__register_types__tx_fctrl_type__txprf = a5;
  rec__dw1000__register_types__tx_fctrl_type__txpsr = a6;
  rec__dw1000__register_types__tx_fctrl_type__pe = a7;
  rec__dw1000__register_types__tx_fctrl_type__txboffs = a8;
  rec__dw1000__register_types__tx_fctrl_type__ifsdelay = a9 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bits_7. forall a1:bits_3. forall a2:bits_3. forall a3:bits_2.
  forall a4:bits_1. forall a5:bits_2. forall a6:bits_2. forall a7:bits_2.
  forall a8:bits_10. forall a9:bits_8. (0 <= object__alignment({
  us_split_fields1 = { rec__dw1000__register_types__tx_fctrl_type__tflen = a;
  rec__dw1000__register_types__tx_fctrl_type__tfle = a1;
  rec__dw1000__register_types__tx_fctrl_type__r = a2;
  rec__dw1000__register_types__tx_fctrl_type__txbr = a3;
  rec__dw1000__register_types__tx_fctrl_type__tr = a4;
  rec__dw1000__register_types__tx_fctrl_type__txprf = a5;
  rec__dw1000__register_types__tx_fctrl_type__txpsr = a6;
  rec__dw1000__register_types__tx_fctrl_type__pe = a7;
  rec__dw1000__register_types__tx_fctrl_type__txboffs = a8;
  rec__dw1000__register_types__tx_fctrl_type__ifsdelay = a9 } })))

logic dw1000__register_types__tx_fctrl_type__tflen__first__bit : int

logic dw1000__register_types__tx_fctrl_type__tflen__last__bit : int

logic dw1000__register_types__tx_fctrl_type__tflen__position : int

axiom dw1000__register_types__tx_fctrl_type__tflen__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__tflen__first__bit)

axiom dw1000__register_types__tx_fctrl_type__tflen__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__tflen__first__bit <  dw1000__register_types__tx_fctrl_type__tflen__last__bit)

axiom dw1000__register_types__tx_fctrl_type__tflen__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__tflen__position)

logic dw1000__register_types__tx_fctrl_type__tfle__first__bit : int

logic dw1000__register_types__tx_fctrl_type__tfle__last__bit : int

logic dw1000__register_types__tx_fctrl_type__tfle__position : int

axiom dw1000__register_types__tx_fctrl_type__tfle__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__tfle__first__bit)

axiom dw1000__register_types__tx_fctrl_type__tfle__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__tfle__first__bit <  dw1000__register_types__tx_fctrl_type__tfle__last__bit)

axiom dw1000__register_types__tx_fctrl_type__tfle__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__tfle__position)

logic dw1000__register_types__tx_fctrl_type__r__first__bit : int

logic dw1000__register_types__tx_fctrl_type__r__last__bit : int

logic dw1000__register_types__tx_fctrl_type__r__position : int

axiom dw1000__register_types__tx_fctrl_type__r__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__r__first__bit)

axiom dw1000__register_types__tx_fctrl_type__r__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__r__first__bit <  dw1000__register_types__tx_fctrl_type__r__last__bit)

axiom dw1000__register_types__tx_fctrl_type__r__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__r__position)

logic dw1000__register_types__tx_fctrl_type__txbr__first__bit : int

logic dw1000__register_types__tx_fctrl_type__txbr__last__bit : int

logic dw1000__register_types__tx_fctrl_type__txbr__position : int

axiom dw1000__register_types__tx_fctrl_type__txbr__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txbr__first__bit)

axiom dw1000__register_types__tx_fctrl_type__txbr__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__txbr__first__bit <  dw1000__register_types__tx_fctrl_type__txbr__last__bit)

axiom dw1000__register_types__tx_fctrl_type__txbr__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txbr__position)

logic dw1000__register_types__tx_fctrl_type__tr__first__bit : int

logic dw1000__register_types__tx_fctrl_type__tr__last__bit : int

logic dw1000__register_types__tx_fctrl_type__tr__position : int

axiom dw1000__register_types__tx_fctrl_type__tr__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__tr__first__bit)

axiom dw1000__register_types__tx_fctrl_type__tr__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__tr__first__bit <  dw1000__register_types__tx_fctrl_type__tr__last__bit)

axiom dw1000__register_types__tx_fctrl_type__tr__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__tr__position)

logic dw1000__register_types__tx_fctrl_type__txprf__first__bit : int

logic dw1000__register_types__tx_fctrl_type__txprf__last__bit : int

logic dw1000__register_types__tx_fctrl_type__txprf__position : int

axiom dw1000__register_types__tx_fctrl_type__txprf__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txprf__first__bit)

axiom dw1000__register_types__tx_fctrl_type__txprf__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__txprf__first__bit <  dw1000__register_types__tx_fctrl_type__txprf__last__bit)

axiom dw1000__register_types__tx_fctrl_type__txprf__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txprf__position)

logic dw1000__register_types__tx_fctrl_type__txpsr__first__bit : int

logic dw1000__register_types__tx_fctrl_type__txpsr__last__bit : int

logic dw1000__register_types__tx_fctrl_type__txpsr__position : int

axiom dw1000__register_types__tx_fctrl_type__txpsr__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txpsr__first__bit)

axiom dw1000__register_types__tx_fctrl_type__txpsr__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__txpsr__first__bit <  dw1000__register_types__tx_fctrl_type__txpsr__last__bit)

axiom dw1000__register_types__tx_fctrl_type__txpsr__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txpsr__position)

logic dw1000__register_types__tx_fctrl_type__pe__first__bit : int

logic dw1000__register_types__tx_fctrl_type__pe__last__bit : int

logic dw1000__register_types__tx_fctrl_type__pe__position : int

axiom dw1000__register_types__tx_fctrl_type__pe__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__pe__first__bit)

axiom dw1000__register_types__tx_fctrl_type__pe__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__pe__first__bit <  dw1000__register_types__tx_fctrl_type__pe__last__bit)

axiom dw1000__register_types__tx_fctrl_type__pe__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__pe__position)

logic dw1000__register_types__tx_fctrl_type__txboffs__first__bit : int

logic dw1000__register_types__tx_fctrl_type__txboffs__last__bit : int

logic dw1000__register_types__tx_fctrl_type__txboffs__position : int

axiom dw1000__register_types__tx_fctrl_type__txboffs__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txboffs__first__bit)

axiom dw1000__register_types__tx_fctrl_type__txboffs__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__txboffs__first__bit <  dw1000__register_types__tx_fctrl_type__txboffs__last__bit)

axiom dw1000__register_types__tx_fctrl_type__txboffs__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__txboffs__position)

logic dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit : int

logic dw1000__register_types__tx_fctrl_type__ifsdelay__last__bit : int

logic dw1000__register_types__tx_fctrl_type__ifsdelay__position : int

axiom dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit)

axiom dw1000__register_types__tx_fctrl_type__ifsdelay__last__bit_axiom :
  (dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit <  dw1000__register_types__tx_fctrl_type__ifsdelay__last__bit)

axiom dw1000__register_types__tx_fctrl_type__ifsdelay__position_axiom :
  (0 <= dw1000__register_types__tx_fctrl_type__ifsdelay__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : bits_7

logic dummy9 : bits_3

logic dummy10 : bits_3

logic dummy11 : bits_2

logic dummy12 : bits_1

logic dummy13 : bits_2

logic dummy14 : bits_2

logic dummy15 : bits_2

logic dummy16 : bits_10

logic dummy17 : bits_8

type tx_fctrl_type__ref = { tx_fctrl_type__content : us_rep
}

function tx_fctrl_type__ref___projection(a: tx_fctrl_type__ref) : us_rep =
  (a).tx_fctrl_type__content

type register_type__ref = { register_type__content : us_rep
}

function register_type__ref___6__projection(a: register_type__ref) : us_rep =
  (a).register_type__content

logic length : int

logic attr__ATTRIBUTE_ADDRESS : int

logic offset : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "dw1000-driver.adb", line 451, characters 0-0 *)
goal WP_parameter_def :
  (forall tx_fctrl_reg__split_fields:bits_7.
  forall tx_fctrl_reg__split_fields1:bits_3.
  forall tx_fctrl_reg__split_fields2:bits_3.
  forall tx_fctrl_reg__split_fields3:bits_2.
  forall tx_fctrl_reg__split_fields4:bits_1.
  forall tx_fctrl_reg__split_fields5:bits_2.
  forall tx_fctrl_reg__split_fields6:bits_2.
  forall tx_fctrl_reg__split_fields7:bits_2.
  forall tx_fctrl_reg__split_fields8:bits_10.
  forall tx_fctrl_reg__split_fields9:bits_8. forall o:int. forall o1:t.
  forall o2:bits_7. forall o3:bits_7. forall o4:bits_3. forall o5:bits_3.
  forall o6:bits_2. forall o7:bits_1. forall o8:bits_2. forall o9:bits_2.
  forall o10:bits_2. forall o11:bits_10. forall o12:bits_8.
  forall temp___3599:bits_7. forall temp___35991:bits_3.
  forall temp___35992:bits_3. forall temp___35993:bits_2.
  forall temp___35994:bits_1. forall temp___35995:bits_2.
  forall temp___35996:bits_2. forall temp___35997:bits_2.
  forall temp___35998:bits_10. forall temp___35999:bits_8. forall o13:int.
  forall o14:t. forall o15:bits_3. forall o16:bits_7. forall o17:bits_3.
  forall o18:bits_3. forall o19:bits_2. forall o20:bits_1. forall o21:bits_2.
  forall o22:bits_2. forall o23:bits_2. forall o24:bits_10.
  forall o25:bits_8. forall temp___3601:bits_7. forall temp___36011:bits_3.
  forall temp___36012:bits_3. forall temp___36013:bits_2.
  forall temp___36014:bits_1. forall temp___36015:bits_2.
  forall temp___36016:bits_2. forall temp___36017:bits_2.
  forall temp___36018:bits_10. forall temp___36019:bits_8.
  forall dw1000__registers__tx_fctrl__read__reg__fields:bits_7.
  forall dw1000__registers__tx_fctrl__read__reg__fields1:bits_3.
  forall dw1000__registers__tx_fctrl__read__reg__fields2:bits_3.
  forall dw1000__registers__tx_fctrl__read__reg__fields3:bits_2.
  forall dw1000__registers__tx_fctrl__read__reg__fields4:bits_1.
  forall dw1000__registers__tx_fctrl__read__reg__fields5:bits_2.
  forall dw1000__registers__tx_fctrl__read__reg__fields6:bits_2.
  forall dw1000__registers__tx_fctrl__read__reg__fields7:bits_2.
  forall dw1000__registers__tx_fctrl__read__reg__fields8:bits_10.
  forall dw1000__registers__tx_fctrl__read__reg__fields9:bits_8.
  forall result:bits_7. forall result1:bits_3. forall result2:bits_3.
  forall result3:bits_2. forall result4:bits_1. forall result5:bits_2.
  forall result6:bits_2. forall result7:bits_2. forall result8:bits_10.
  forall result9:bits_8. forall tx_fctrl_reg__split_fields10:bits_7.
  forall tx_fctrl_reg__split_fields11:bits_3.
  forall tx_fctrl_reg__split_fields12:bits_3.
  forall tx_fctrl_reg__split_fields13:bits_2.
  forall tx_fctrl_reg__split_fields14:bits_1.
  forall tx_fctrl_reg__split_fields15:bits_2.
  forall tx_fctrl_reg__split_fields16:bits_2.
  forall tx_fctrl_reg__split_fields17:bits_2.
  forall tx_fctrl_reg__split_fields18:bits_10.
  forall tx_fctrl_reg__split_fields19:bits_8. forall result10:bits_7.
  forall result11:bits_3. forall result12:bits_3. forall result13:bits_2.
  forall result14:bits_1. forall result15:bits_2. forall result16:bits_2.
  forall result17:bits_2. forall result18:bits_10. forall result19:bits_8.
  forall tx_fctrl_reg__split_fields20:bits_7.
  forall tx_fctrl_reg__split_fields21:bits_3.
  forall tx_fctrl_reg__split_fields22:bits_3.
  forall tx_fctrl_reg__split_fields23:bits_2.
  forall tx_fctrl_reg__split_fields24:bits_1.
  forall tx_fctrl_reg__split_fields25:bits_2.
  forall tx_fctrl_reg__split_fields26:bits_2.
  forall tx_fctrl_reg__split_fields27:bits_2.
  forall tx_fctrl_reg__split_fields28:bits_10.
  forall tx_fctrl_reg__split_fields29:bits_8. forall result20:bits_7.
  forall result21:bits_3. forall result22:bits_3. forall result23:bits_2.
  forall result24:bits_1. forall result25:bits_2. forall result26:bits_2.
  forall result27:bits_2. forall result28:bits_10. forall result29:bits_8.
  forall tx_fctrl_reg__split_fields30:bits_7.
  forall tx_fctrl_reg__split_fields31:bits_3.
  forall tx_fctrl_reg__split_fields32:bits_3.
  forall tx_fctrl_reg__split_fields33:bits_2.
  forall tx_fctrl_reg__split_fields34:bits_1.
  forall tx_fctrl_reg__split_fields35:bits_2.
  forall tx_fctrl_reg__split_fields36:bits_2.
  forall tx_fctrl_reg__split_fields37:bits_2.
  forall tx_fctrl_reg__split_fields38:bits_10.
  forall tx_fctrl_reg__split_fields39:bits_8. (in_range1(length) ->
  (in_range1(offset) -> (((length <  1024) and ((offset <  1024) and
  ((length + offset) <= 1024))) ->
  ((((result = tx_fctrl_reg__split_fields) and
  ((result1 = tx_fctrl_reg__split_fields1) and
  ((result2 = tx_fctrl_reg__split_fields2) and
  ((result3 = tx_fctrl_reg__split_fields3) and
  ((result4 = tx_fctrl_reg__split_fields4) and
  ((result5 = tx_fctrl_reg__split_fields5) and
  ((result6 = tx_fctrl_reg__split_fields6) and
  ((result7 = tx_fctrl_reg__split_fields7) and
  ((result8 = tx_fctrl_reg__split_fields8) and
  (result9 = tx_fctrl_reg__split_fields9)))))))))) and
  ((tx_fctrl_reg__split_fields10 = dw1000__registers__tx_fctrl__read__reg__fields) and
  ((tx_fctrl_reg__split_fields11 = dw1000__registers__tx_fctrl__read__reg__fields1) and
  ((tx_fctrl_reg__split_fields12 = dw1000__registers__tx_fctrl__read__reg__fields2) and
  ((tx_fctrl_reg__split_fields13 = dw1000__registers__tx_fctrl__read__reg__fields3) and
  ((tx_fctrl_reg__split_fields14 = dw1000__registers__tx_fctrl__read__reg__fields4) and
  ((tx_fctrl_reg__split_fields15 = dw1000__registers__tx_fctrl__read__reg__fields5) and
  ((tx_fctrl_reg__split_fields16 = dw1000__registers__tx_fctrl__read__reg__fields6) and
  ((tx_fctrl_reg__split_fields17 = dw1000__registers__tx_fctrl__read__reg__fields7) and
  ((tx_fctrl_reg__split_fields18 = dw1000__registers__tx_fctrl__read__reg__fields8) and
  (tx_fctrl_reg__split_fields19 = dw1000__registers__tx_fctrl__read__reg__fields9))))))))))) ->
  ((((((((o = mod(length, 128)) and in_range_int1(mod(length, 128))) and
  (o1 = of_int(o))) and (to_rep1(o2) = o1)) and ((o2 = o3) and
  ((tx_fctrl_reg__split_fields11 = o4) and
  ((tx_fctrl_reg__split_fields12 = o5) and
  ((tx_fctrl_reg__split_fields13 = o6) and
  ((tx_fctrl_reg__split_fields14 = o7) and
  ((tx_fctrl_reg__split_fields15 = o8) and
  ((tx_fctrl_reg__split_fields16 = o9) and
  ((tx_fctrl_reg__split_fields17 = o10) and
  ((tx_fctrl_reg__split_fields18 = o11) and
  (tx_fctrl_reg__split_fields19 = o12))))))))))) and ((temp___3599 = o3) and
  ((temp___35991 = o4) and ((temp___35992 = o5) and ((temp___35993 = o6) and
  ((temp___35994 = o7) and ((temp___35995 = o8) and ((temp___35996 = o9) and
  ((temp___35997 = o10) and ((temp___35998 = o11) and
  (temp___35999 = o12))))))))))) and
  (((result10 = tx_fctrl_reg__split_fields10) and
  ((result11 = tx_fctrl_reg__split_fields11) and
  ((result12 = tx_fctrl_reg__split_fields12) and
  ((result13 = tx_fctrl_reg__split_fields13) and
  ((result14 = tx_fctrl_reg__split_fields14) and
  ((result15 = tx_fctrl_reg__split_fields15) and
  ((result16 = tx_fctrl_reg__split_fields16) and
  ((result17 = tx_fctrl_reg__split_fields17) and
  ((result18 = tx_fctrl_reg__split_fields18) and
  (result19 = tx_fctrl_reg__split_fields19)))))))))) and
  ((temp___3599 = tx_fctrl_reg__split_fields20) and
  ((temp___35991 = tx_fctrl_reg__split_fields21) and
  ((temp___35992 = tx_fctrl_reg__split_fields22) and
  ((temp___35993 = tx_fctrl_reg__split_fields23) and
  ((temp___35994 = tx_fctrl_reg__split_fields24) and
  ((temp___35995 = tx_fctrl_reg__split_fields25) and
  ((temp___35996 = tx_fctrl_reg__split_fields26) and
  ((temp___35997 = tx_fctrl_reg__split_fields27) and
  ((temp___35998 = tx_fctrl_reg__split_fields28) and
  (temp___35999 = tx_fctrl_reg__split_fields29)))))))))))) ->
  ((((((((o13 = comp_div(length,128)) and
  in_range_int(comp_div(length,128))) and (o14 = of_int(o13))) and
  (to_rep(o15) = o14)) and ((tx_fctrl_reg__split_fields20 = o16) and
  ((o15 = o17) and ((tx_fctrl_reg__split_fields22 = o18) and
  ((tx_fctrl_reg__split_fields23 = o19) and
  ((tx_fctrl_reg__split_fields24 = o20) and
  ((tx_fctrl_reg__split_fields25 = o21) and
  ((tx_fctrl_reg__split_fields26 = o22) and
  ((tx_fctrl_reg__split_fields27 = o23) and
  ((tx_fctrl_reg__split_fields28 = o24) and
  (tx_fctrl_reg__split_fields29 = o25))))))))))) and ((temp___3601 = o16) and
  ((temp___36011 = o17) and ((temp___36012 = o18) and
  ((temp___36013 = o19) and ((temp___36014 = o20) and
  ((temp___36015 = o21) and ((temp___36016 = o22) and
  ((temp___36017 = o23) and ((temp___36018 = o24) and
  (temp___36019 = o25))))))))))) and
  (((result20 = tx_fctrl_reg__split_fields20) and
  ((result21 = tx_fctrl_reg__split_fields21) and
  ((result22 = tx_fctrl_reg__split_fields22) and
  ((result23 = tx_fctrl_reg__split_fields23) and
  ((result24 = tx_fctrl_reg__split_fields24) and
  ((result25 = tx_fctrl_reg__split_fields25) and
  ((result26 = tx_fctrl_reg__split_fields26) and
  ((result27 = tx_fctrl_reg__split_fields27) and
  ((result28 = tx_fctrl_reg__split_fields28) and
  (result29 = tx_fctrl_reg__split_fields29)))))))))) and
  ((tx_fctrl_reg__split_fields30 = temp___3601) and
  ((tx_fctrl_reg__split_fields31 = temp___36011) and
  ((tx_fctrl_reg__split_fields32 = temp___36012) and
  ((tx_fctrl_reg__split_fields33 = temp___36013) and
  ((tx_fctrl_reg__split_fields34 = temp___36014) and
  ((tx_fctrl_reg__split_fields35 = temp___36015) and
  ((tx_fctrl_reg__split_fields36 = temp___36016) and
  ((tx_fctrl_reg__split_fields37 = temp___36017) and
  ((tx_fctrl_reg__split_fields38 = temp___36018) and
  (tx_fctrl_reg__split_fields39 = temp___36019)))))))))))) ->
  in_range_int2(offset))))))))
