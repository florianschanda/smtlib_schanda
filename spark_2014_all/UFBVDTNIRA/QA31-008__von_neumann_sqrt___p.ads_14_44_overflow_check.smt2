(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort sqrt_domain 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (sqrt_domain sqrt_domain) Bool)
(declare-const dummy1 sqrt_domain)
(declare-datatypes () ((sqrt_domain__ref (mk_sqrt_domain__ref (sqrt_domain__content sqrt_domain)))))
(define-fun sqrt_domain__ref___projection ((a sqrt_domain__ref)) sqrt_domain (sqrt_domain__content a))
(define-fun dynamic_invariant ((temp___expr_201 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= 0 2147483647)) (in_range2 temp___expr_201)))
(declare-sort sqrt_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 46340)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (sqrt_range sqrt_range) Bool)
(declare-const dummy2 sqrt_range)
(declare-datatypes () ((sqrt_range__ref (mk_sqrt_range__ref (sqrt_range__content sqrt_range)))))
(define-fun sqrt_range__ref___projection ((a sqrt_range__ref)) sqrt_range (sqrt_range__content a))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq3 (u64 u64) Bool)
(declare-const dummy3 u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant1 ((temp___expr_219 (_ BitVec 64)) (temp___is_init_216 Bool) (temp___skip_constant_217 Bool) (temp___do_toplevel_218 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant3 ((temp___expr_207 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 46340)) (in_range3 temp___expr_207)))
(declare-const ux (_ BitVec 64))
(declare-const m (_ BitVec 64))
(declare-const y (_ BitVec 64))
(declare-const b (_ BitVec 64))
(declare-const i (_ BitVec 64))
(declare-const bits (_ BitVec 64))
(declare-const left_x (_ BitVec 64))
(declare-const left_y (_ BitVec 64))
(declare-const left_ux (_ BitVec 64))
(declare-const p__sqrt_von_neumann__result Int)
(declare-const temp___233 (_ BitVec 64))
(declare-const temp___232 (_ BitVec 64))
(declare-const temp___231 (_ BitVec 64))
(declare-const temp___230 (_ BitVec 64))
(declare-const temp___229 (_ BitVec 64))
(declare-const temp___228 (_ BitVec 64))
(declare-const temp___227 (_ BitVec 64))
(declare-const temp___225 (_ BitVec 64))
(declare-const temp___226 (_ BitVec 64))
(declare-const o (_ BitVec 64))
(declare-const o1 Int)
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const o4 (_ BitVec 64))
(declare-const o5 Int)
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 Int)
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const temp___234 Int)
(declare-const temp___236 Int)
(declare-const o13 (_ BitVec 64))
(declare-const o14 Int)
(declare-const o15 (_ BitVec 64))
(declare-const o16 (_ BitVec 64))
(declare-const o17 (_ BitVec 64))
(declare-const o18 Int)
(declare-const o19 (_ BitVec 64))
(declare-const o20 (_ BitVec 64))
(declare-const o21 (_ BitVec 64))
(declare-const o22 Int)
(declare-const o23 (_ BitVec 64))
(declare-const o24 (_ BitVec 64))
(declare-const o25 (_ BitVec 64))
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Bool)
(declare-const b1 (_ BitVec 64))
(declare-const bits1 (_ BitVec 64))
(declare-const left_x1 (_ BitVec 64))
(declare-const left_y1 (_ BitVec 64))
(declare-const left_ux1 (_ BitVec 64))
(declare-const result (_ BitVec 64))
(declare-const i1 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const ux1 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const m1 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const y1 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const i2 (_ BitVec 64))
(declare-const result5 (_ BitVec 64))
(declare-const b2 (_ BitVec 64))
(declare-const result6 (_ BitVec 64))
(declare-const y2 (_ BitVec 64))
(declare-const result7 (_ BitVec 64))
(declare-const ux2 (_ BitVec 64))
(declare-const result8 (_ BitVec 64))
(declare-const y3 (_ BitVec 64))
(declare-const result9 (_ BitVec 64))
(declare-const bits2 (_ BitVec 64))
(declare-const result10 (_ BitVec 64))
(declare-const left_x2 (_ BitVec 64))
(declare-const result11 t__ref)
(declare-const left_y2 (_ BitVec 64))
(declare-const result12 t__ref)
(declare-const left_ux2 (_ BitVec 64))
(declare-const ux3 (_ BitVec 64))
(declare-const m2 (_ BitVec 64))
(declare-const y4 (_ BitVec 64))
(declare-const b3 (_ BitVec 64))
(declare-const i3 (_ BitVec 64))
(declare-const bits3 (_ BitVec 64))
(declare-const left_x3 (_ BitVec 64))
(declare-const left_y3 (_ BitVec 64))
(declare-const left_ux3 (_ BitVec 64))
(declare-const result13 t__ref)
(declare-const m3 (_ BitVec 64))
(declare-const result14 t__ref)
(declare-const i4 (_ BitVec 64))
(declare-const result15 t__ref)
(declare-const b4 (_ BitVec 64))
(declare-const result16 t__ref)
(declare-const y5 (_ BitVec 64))
(declare-const result17 t__ref)
(declare-const ux4 (_ BitVec 64))
(declare-const result18 t__ref)
(declare-const y6 (_ BitVec 64))
(declare-const result19 t__ref)
(declare-const bits4 (_ BitVec 64))
(declare-const result20 t__ref)
(declare-const left_x4 (_ BitVec 64))
(declare-const result21 t__ref)
(declare-const left_y4 (_ BitVec 64))
(declare-const result22 t__ref)
(declare-const left_ux4 (_ BitVec 64))
(declare-const ux5 t__ref)
(declare-const m4 t__ref)
(declare-const y7 t__ref)
(declare-const b5 t__ref)
(declare-const i5 t__ref)
(declare-const bits5 t__ref)
(declare-const left_x5 t__ref)
(declare-const left_y5 t__ref)
(declare-const left_ux5 t__ref)
(declare-const ux6 (_ BitVec 64))
(declare-const m5 (_ BitVec 64))
(declare-const y8 (_ BitVec 64))
(declare-const b6 (_ BitVec 64))
(declare-const i6 (_ BitVec 64))
(declare-const bits6 (_ BitVec 64))
(declare-const left_x6 (_ BitVec 64))
(declare-const left_y6 (_ BitVec 64))
(declare-const left_ux6 (_ BitVec 64))
(declare-const ux7 t__ref)
(declare-const m6 t__ref)
(declare-const y9 t__ref)
(declare-const b7 t__ref)
(declare-const i7 t__ref)
(declare-const bits7 t__ref)
(declare-const left_x7 t__ref)
(declare-const left_y7 t__ref)
(declare-const left_ux7 t__ref)
(declare-const ux8 (_ BitVec 64))
(declare-const m7 (_ BitVec 64))
(declare-const y10 (_ BitVec 64))
(declare-const b8 (_ BitVec 64))
(declare-const i8 (_ BitVec 64))
(declare-const bits8 (_ BitVec 64))
(declare-const left_x8 (_ BitVec 64))
(declare-const left_y8 (_ BitVec 64))
(declare-const left_ux8 (_ BitVec 64))
(declare-const result23 int__ref)
(declare-const p__sqrt_von_neumann__result1 Int)
(declare-const p__sqrt_von_neumann__result2 int__ref)
(declare-const p__sqrt_von_neumann__result3 Int)
(declare-const ux9 t__ref)
(declare-const m8 t__ref)
(declare-const y11 t__ref)
(declare-const b9 t__ref)
(declare-const i9 t__ref)
(declare-const bits9 t__ref)
(declare-const left_x9 t__ref)
(declare-const left_y9 t__ref)
(declare-const left_ux9 t__ref)
(declare-const p__sqrt_von_neumann__result4 int__ref)
(declare-const ux10 (_ BitVec 64))
(declare-const m9 (_ BitVec 64))
(declare-const y12 (_ BitVec 64))
(declare-const b10 (_ BitVec 64))
(declare-const i10 (_ BitVec 64))
(declare-const bits10 (_ BitVec 64))
(declare-const left_x10 (_ BitVec 64))
(declare-const left_y10 (_ BitVec 64))
(declare-const left_ux10 (_ BitVec 64))
(declare-const p__sqrt_von_neumann__result5 Int)
(assert (in_range2 x))
(assert (and (and (and (= (mk_t__ref result) (mk_t__ref i)) (= i1 ((_ int2bv 64) 0))) (and (and (= (mk_t__ref result1) (mk_t__ref ux)) (= ux1 ((_ int2bv 64) x))) (and (bvule ux1 ((_ int2bv 64) 2147483647)) (and (and (= (mk_t__ref result2) (mk_t__ref m)) (= m1 ((_ int2bv 64) 1073741824))) (and (and (= (mk_t__ref result3) (mk_t__ref y)) (= y1 ((_ int2bv 64) 0))) (and (ite (not (= m1 ((_ int2bv 64) 0))) (and (and (and (= temp___233 ux1) (and (= temp___232 left_y) (and (= temp___231 i1) (and (= temp___230 left_x) (and (= temp___229 b) (and (= temp___228 y1) (and (= temp___227 left_ux) (and (= temp___225 m1) (and (= temp___226 bits) (and (and (= i1 result4) (= i2 (bvadd i1 ((_ int2bv 64) 1)))) (and (and (= (mk_t__ref result5) (mk_t__ref b)) (= b2 (bvor y1 m1))) (and (and (= y1 result6) (= y2 (bvudiv y1 ((_ int2bv 64) 2)))) (and (ite (bvuge ux1 b2) (and (and (= ux1 result7) (= ux2 (bvsub ux1 b2))) (and (= y2 result8) (= y3 (bvor y2 m1)))) (and (= y3 y2) (= ux2 ux1))) (and (and (= o (bvsub ((_ int2bv 64) 32) (bvmul ((_ int2bv 64) 2) i2))) (and (= (mk_t__ref result9) (mk_t__ref bits)) (= bits2 o))) (and (and (and (and (and (and (= o1 (bv2nat bits2)) (in_range1 (bv2nat bits2))) (= o2 ((_ int2bv 64) o1))) (= o3 (bvlshr ((_ int2bv 64) x) o2))) (= o4 o3)) (and (= (mk_t__ref result10) (mk_t__ref left_x)) (= left_x2 o4))) (and (and (and (and (and (and (= o5 (bv2nat bits2)) (in_range1 (bv2nat bits2))) (= o6 ((_ int2bv 64) o5))) (= o7 (bvlshr y3 o6))) (= o8 o7)) (and (= result11 (mk_t__ref left_y)) (= left_y2 o8))) (and (and (and (and (and (and (= o9 (bv2nat bits2)) (in_range1 (bv2nat bits2))) (= o10 ((_ int2bv 64) o9))) (= o11 (bvlshr ux2 o10))) (= o12 o11)) (and (= result12 (mk_t__ref left_ux)) (= left_ux2 o12))) (and (and (and (bvule ((_ int2bv 64) 1) i3) (bvule i3 ((_ int2bv 64) 16))) (and (= m2 (let ((temp___235 (bv2nat (bvsub ((_ int2bv 64) 32) (bvmul ((_ int2bv 64) 2) i3))))) (ite (< temp___235 18446744073709551616) (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) temp___235)) ((_ int2bv 64) 0)))) (and (= (bvurem y4 m2) ((_ int2bv 64) 0)) (and (bvult left_y3 (let ((temp___237 (bv2nat i3))) (ite (< temp___237 18446744073709551616) (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) temp___237)) ((_ int2bv 64) 0)))) (and (= (bvurem ux3 m2) (bvurem ((_ int2bv 64) x) m2)) (and (= left_ux3 (bvsub left_x3 (bvmul left_y3 left_y3))) (and (bvule (bvmul left_y3 left_y3) left_x3) (bvugt (bvmul (bvadd left_y3 ((_ int2bv 64) 1)) (bvadd left_y3 ((_ int2bv 64) 1))) left_x3)))))))) (and (and (= result13 (mk_t__ref m2)) (= m3 (bvudiv m2 ((_ int2bv 64) 4)))) (= m3 ((_ int2bv 64) 0))))))))))))))))))))) (and (and (= left_ux5 (mk_t__ref left_ux3)) (and (= left_y5 (mk_t__ref left_y3)) (and (= left_x5 (mk_t__ref left_x3)) (and (= bits5 (mk_t__ref bits3)) (and (= i5 (mk_t__ref i3)) (and (= b5 (mk_t__ref b3)) (and (= y7 (mk_t__ref y4)) (and (= m4 (mk_t__ref m3)) (= ux5 (mk_t__ref ux3)))))))))) (and (= left_ux6 left_ux3) (and (= left_y6 left_y3) (and (= left_x6 left_x3) (and (= bits6 bits3) (and (= i6 i3) (and (= b6 b3) (and (= y8 y4) (and (= m5 m3) (= ux6 ux3))))))))))) (and (and (= left_ux7 left_ux5) (and (= left_y7 left_y5) (and (= left_x7 left_x5) (and (= bits7 bits5) (and (= i7 i5) (and (= b7 b5) (and (= y9 y7) (and (= m6 m4) (= ux7 ux5))))))))) (and (= left_ux8 left_ux6) (and (= left_y8 left_y6) (and (= left_x8 left_x6) (and (= bits8 bits6) (and (= i8 i6) (and (= b8 b6) (and (= y10 y8) (and (= m7 m5) (= ux8 ux6))))))))))) (and (and (= left_ux7 (mk_t__ref left_ux)) (and (= left_y7 (mk_t__ref left_y)) (and (= left_x7 (mk_t__ref left_x)) (and (= bits7 (mk_t__ref bits)) (and (= i7 (mk_t__ref i1)) (and (= b7 (mk_t__ref b)) (and (= y9 (mk_t__ref y1)) (and (= m6 (mk_t__ref m1)) (= ux7 (mk_t__ref ux1)))))))))) (and (= left_ux8 left_ux1) (and (= left_y8 left_y1) (and (= left_x8 left_x1) (and (= bits8 bits1) (and (= i8 i1) (and (= b8 b1) (and (= y10 y1) (and (= m7 m1) (= ux8 ux1))))))))))) (and (and (= p__sqrt_von_neumann__result2 (mk_int__ref p__sqrt_von_neumann__result1)) (= p__sqrt_von_neumann__result3 p__sqrt_von_neumann__result1)) (and (and (= o26 (bv2nat (t__content y9))) (in_range3 (bv2nat (t__content y9)))) (and (= result23 (mk_int__ref p__sqrt_von_neumann__result)) (= p__sqrt_von_neumann__result1 o26)))))))))) (and (and (= p__sqrt_von_neumann__result4 p__sqrt_von_neumann__result2) (and (= left_ux9 left_ux7) (and (= left_y9 left_y7) (and (= left_x9 left_x7) (and (= bits9 bits7) (and (= i9 i7) (and (= b9 b7) (and (= y11 y9) (and (= m8 m6) (= ux9 ux7)))))))))) (and (= p__sqrt_von_neumann__result5 p__sqrt_von_neumann__result3) (and (= left_ux10 left_ux8) (and (= left_y10 left_y8) (and (= left_x10 left_x8) (and (= bits10 bits8) (and (= i10 i8) (and (= b10 b8) (and (= y12 y10) (and (= m9 m7) (= ux10 ux8)))))))))))))
(assert (and (= o28 (* (+ (int__content p__sqrt_von_neumann__result4) 1) (+ (int__content p__sqrt_von_neumann__result4) 1))) (in_range1 (* (+ (int__content p__sqrt_von_neumann__result4) 1) (+ (int__content p__sqrt_von_neumann__result4) 1)))))
(assert (= o29 (ite (< x o28) true false)))
(assert (not (in_range1 (* (int__content p__sqrt_von_neumann__result4) (int__content p__sqrt_von_neumann__result4)))))
(check-sat)
(exit)
