(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort count_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep (count_type) Int)
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort hash_type 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (hash_type hash_type) Bool)
(declare-const dummy1 hash_type)
(declare-datatypes () ((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type (hash_type__content a))
(declare-fun to_rep1 (hash_type) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) hash_type)
(assert (forall ((x hash_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x hash_type)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x hash_type)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_maps__my_maps__map__capacity count_type) (rec__use_maps__my_maps__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__use_maps__my_maps__map__capacity a))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) hash_type (rec__use_maps__my_maps__map__modulus a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_maps__my_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type (rec__use_maps__my_maps__map a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__use_maps__my_maps__map__capacity (us_split_discrs1 a))) (to_rep (rec__use_maps__my_maps__map__capacity (us_split_discrs1 b)))) (= (to_rep1 (rec__use_maps__my_maps__map__modulus (us_split_discrs1 a))) (to_rep1 (rec__use_maps__my_maps__map__modulus (us_split_discrs1 b))))) (= (us_main_eq (rec__use_maps__my_maps__map (us_split_fields1 a)) (rec__use_maps__my_maps__map (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const use_maps__my_maps__map__capacity__first__bit Int)
(declare-const use_maps__my_maps__map__capacity__last__bit Int)
(declare-const use_maps__my_maps__map__capacity__position Int)
(assert (<= 0 use_maps__my_maps__map__capacity__first__bit))
(assert (< use_maps__my_maps__map__capacity__first__bit use_maps__my_maps__map__capacity__last__bit))
(assert (<= 0 use_maps__my_maps__map__capacity__position))
(declare-const use_maps__my_maps__map__modulus__first__bit Int)
(declare-const use_maps__my_maps__map__modulus__last__bit Int)
(declare-const use_maps__my_maps__map__modulus__position Int)
(assert (<= 0 use_maps__my_maps__map__modulus__first__bit))
(assert (< use_maps__my_maps__map__modulus__first__bit use_maps__my_maps__map__modulus__last__bit))
(assert (<= 0 use_maps__my_maps__map__modulus__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_maps__my_maps__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__use_maps__my_maps__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep (rec__use_maps__my_maps__cursor__node (us_split_fields3 a))) (to_rep (rec__use_maps__my_maps__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const use_maps__my_maps__cursor__node__first__bit Int)
(declare-const use_maps__my_maps__cursor__node__last__bit Int)
(declare-const use_maps__my_maps__cursor__node__position Int)
(assert (<= 0 use_maps__my_maps__cursor__node__first__bit))
(assert (< use_maps__my_maps__cursor__node__first__bit use_maps__my_maps__cursor__node__last__bit))
(assert (<= 0 use_maps__my_maps__cursor__node__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun length1 (Int us_rep) Int)
(declare-fun length__function_guard1 (Int Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_173 Int) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool)) Bool (=> (or (= temp___is_init_170 true) (<= 0 2147483647)) (in_range1 temp___expr_173)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__use_maps__my_maps__map__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true))) :pattern ((length container)))))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (! (dynamic_invariant (length1 attr__tag container) true false true) :pattern ((length1 attr__tag container))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref___2__projection ((a map__ref1)) us_rep2 (map__content1 a))
(declare-fun has_key (us_rep2 Int) Bool)
(declare-fun has_key__function_guard (Bool us_rep2 Int) Bool)
(declare-sort key_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (key_type key_type) Bool)
(declare-const dummy5 key_type)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___2__projection ((a key_type__ref)) key_type (key_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_354 Int) (temp___is_init_351 Bool) (temp___skip_constant_352 Bool) (temp___do_toplevel_353 Bool)) Bool (=> (or (= temp___is_init_351 true) (<= 1 2147483647)) (in_range2 temp___expr_354)))
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption ((temp___expr_367 us_rep2) (temp___skip_top_level_368 Bool)) Bool (=> (not (= temp___skip_top_level_368 true)) (and (= (is_empty temp___expr_367) true) (= (length2 temp___expr_367) 0))))
(assert (forall ((container us_rep2)) (forall ((key Int)) (! (=> (dynamic_invariant1 key true true true) (=> (= (of_int 1) true) (=> (exists ((k Int)) (and (and (in_range2 k) (= (has_key container k) true)) (= k key))) (= (has_key container key) true)))) :pattern ((has_key container key))))))
(declare-sort extended_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (extended_index extended_index) Bool)
(declare-const dummy6 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq7 (us_rep3 us_rep3) Bool)
(declare-const dummy7 us_rep3)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content a))
(declare-fun get (us_rep3 Int) Int)
(declare-fun get__function_guard (Int us_rep3 Int) Bool)
(declare-sort element_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (element_type element_type) Bool)
(declare-const dummy8 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_385 Int) (temp___is_init_382 Bool) (temp___skip_constant_383 Bool) (temp___do_toplevel_384 Bool)) Bool (=> (or (= temp___is_init_382 true) (<= 1 2147483647)) (in_range4 temp___expr_385)))
(define-fun dynamic_invariant3 ((temp___expr_391 Int) (temp___is_init_388 Bool) (temp___skip_constant_389 Bool) (temp___do_toplevel_390 Bool)) Bool (=> (or (= temp___is_init_388 true) (<= 0 2147483647)) (in_range3 temp___expr_391)))
(declare-fun length3 (us_rep3) Int)
(declare-fun length__function_guard3 (Int us_rep3) Bool)
(define-fun last ((container us_rep3)) Int (+ 0 (length3 container)))
(declare-fun last__function_guard (Int us_rep3) Bool)
(define-fun oeq2 ((left us_rep3) (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq7 a b) (oeq2 a b)) :pattern ((user_eq7 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_398 us_rep3) (temp___skip_top_level_399 Bool)) Bool (=> (not (= temp___skip_top_level_399 true)) (= (length3 temp___expr_398) 0)))
(assert (forall ((container us_rep3)) (forall ((position Int)) (! (=> (and (dynamic_invariant3 position true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant2 (get container position) true false true)) :pattern ((get container position))))))
(define-fun iter_has_element ((container us_rep3) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq9 (us_rep4 us_rep4) Bool)
(declare-const dummy9 us_rep4)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep4 (map__content2 a))
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep1)))))
(define-fun key_type__ref___3__projection ((a key_type__ref1)) us_rep1 (key_type__content1 a))
(declare-fun get1 (us_rep4 us_rep1) Int)
(declare-fun get__function_guard1 (Int us_rep4 us_rep1) Bool)
(declare-sort element_type1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq10 (element_type1 element_type1) Bool)
(declare-const dummy10 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___4__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_411 Int) (temp___is_init_408 Bool) (temp___skip_constant_409 Bool) (temp___do_toplevel_410 Bool)) Bool (=> (or (= temp___is_init_408 true) (<= 1 2147483647)) (in_range5 temp___expr_411)))
(declare-fun length4 (us_rep4) Int)
(declare-fun length__function_guard4 (Int us_rep4) Bool)
(declare-fun is_empty1 (us_rep4) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)
(define-fun default_initial_assumption2 ((temp___expr_418 us_rep4) (temp___skip_top_level_419 Bool)) Bool (=> (not (= temp___skip_top_level_419 true)) (and (= (is_empty1 temp___expr_418) true) (= (length4 temp___expr_418) 0))))
(declare-fun has_key1 (us_rep4 us_rep1) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep1) Bool)
(declare-fun witness (us_rep4 us_rep1) Int)
(declare-fun witness__function_guard (Int us_rep4 us_rep1) Bool)
(declare-fun w_get (us_rep4 Int) Int)
(declare-fun w_get__function_guard (Int us_rep4 Int) Bool)
(assert (forall ((container us_rep4)) (forall ((key us_rep1)) (! (=> (= (has_key1 container key) true) (let ((result (get1 container key))) (and (=> (= (of_int 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep1)) (=> (= (has_key1 container k) true) (= (= (bool_eq1 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant4 result true false true)))) :pattern ((get1 container key))))))
(declare-fun model__ (us_rep) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep) Bool)
(assert true)
(declare-fun keys (us_rep) us_rep3)
(declare-fun keys__function_guard (us_rep3 us_rep) Bool)
(declare-fun find (us_rep3 Int) Int)
(declare-fun find__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((container us_rep)) (! (let ((result (keys container))) (and (and (and (and (= (length3 result) (length container)) (forall ((temp___435 Int)) (=> (and (in_range3 temp___435) (= (iter_has_element result temp___435) true)) (= (has_key (model__ container) (get result temp___435)) true)))) (forall ((key Int)) (=> (and (in_range2 key) (= (has_key (model__ container) key) true)) (and (< 0 (find result key)) (= (get result (find result key)) key))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (= (find result (get result i)) i)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length container))) (=> (= (get result i) (get result j)) (= i j)))))))) :pattern ((keys container)))))
(declare-fun positions (us_rep) us_rep4)
(declare-fun positions__function_guard (us_rep4 us_rep) Bool)
(declare-const no_element us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key1 result no_element) true)) (forall ((i us_rep1)) (=> (= (has_key1 result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep1)) (=> (= (has_key1 result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern ((positions container)))))
(declare-fun clear__specific_post (Int us_split_fields us_split_discrs us_split_fields) Bool)
(define-fun has_element ((container us_rep) (position us_rep1)) Bool (has_key1 (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(declare-fun has_element1 (Int us_rep us_rep1) Bool)
(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)
(assert true)
(declare-sort key_type1 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (key_type1 key_type1) Bool)
(declare-const dummy11 key_type1)
(declare-datatypes () ((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___projection ((a key_type__ref2)) key_type1 (key_type__content2 a))
(define-fun dynamic_invariant5 ((temp___expr_319 Int) (temp___is_init_316 Bool) (temp___skip_constant_317 Bool) (temp___do_toplevel_318 Bool)) Bool (=> (or (= temp___is_init_316 true) (<= 1 2147483647)) (in_range6 temp___expr_319)))
(define-fun key ((container us_rep) (position us_rep1)) Int (get (keys container) (get1 (positions container) position)))
(declare-fun key__function_guard (Int us_rep us_rep1) Bool)
(declare-fun key1 (Int us_rep us_rep1) Int)
(declare-fun key__function_guard1 (Int Int us_rep us_rep1) Bool)
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (forall ((position us_rep1)) (! (dynamic_invariant5 (key1 attr__tag container position) true false true) :pattern ((key1 attr__tag container position)))))))
(declare-sort element_type2 0)
(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (element_type2 element_type2) Bool)
(declare-const dummy12 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant6 ((temp___expr_325 Int) (temp___is_init_322 Bool) (temp___skip_constant_323 Bool) (temp___do_toplevel_324 Bool)) Bool (=> (or (= temp___is_init_322 true) (<= (- 2147483648) 2147483647)) (in_range7 temp___expr_325)))
(declare-fun get2 (us_rep2 Int) Int)
(declare-fun get__function_guard2 (Int us_rep2 Int) Bool)
(define-fun element ((container us_rep) (position us_rep1)) Int (get2 (model__ container) (key container position)))
(declare-fun element__function_guard (Int us_rep us_rep1) Bool)
(declare-fun element1 (Int us_rep us_rep1) Int)
(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (forall ((position us_rep1)) (! (dynamic_invariant6 (element1 attr__tag container position) true false true) :pattern ((element1 attr__tag container position)))))))
(define-fun element__2 ((container us_rep) (key2 Int)) Int (get2 (model__ container) key2))
(declare-fun element__2__function_guard (Int us_rep Int) Bool)
(declare-fun element__21 (Int us_rep Int) Int)
(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)
(define-fun contains ((container us_rep) (key2 Int)) Bool (has_key (model__ container) key2))
(declare-fun contains__function_guard (Bool us_rep Int) Bool)
(declare-fun contains1 (Int us_rep Int) Bool)
(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)
(assert (forall ((attr__tag Int) (key2 Int)) (forall ((container us_rep)) (! (=> (dynamic_invariant5 key2 true true true) (dynamic_invariant6 (element__21 attr__tag container key2) true false true)) :pattern ((element__21 attr__tag container key2))))))
(declare-fun ole (us_rep2 us_rep2) Bool)
(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun keys_included (us_rep2 us_rep2) Bool)
(declare-fun keys_included__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun same_keys ((left us_rep2) (right us_rep2)) Bool (and (keys_included left right) (keys_included right left)))
(declare-fun same_keys__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun keys_included_except (us_rep2 us_rep2 Int) Bool)
(declare-fun keys_included_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun elements_equal_except (us_rep2 us_rep2 Int) Bool)
(declare-fun elements_equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(define-fun equal_except ((left us_rep3) (right us_rep3) (position Int)) Bool (and (= (length3 left) (length3 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)
(declare-fun oeq3 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)
(declare-fun keys_included_except1 (us_rep4 us_rep4 us_rep1) Bool)
(declare-fun keys_included_except__function_guard1 (Bool us_rep4 us_rep4 us_rep1) Bool)
(declare-fun mapping_preserved (us_rep3 us_rep3 us_rep4 us_rep4) Bool)
(declare-fun mapping_preserved__function_guard (Bool us_rep3 us_rep3 us_rep4 us_rep4) Bool)
(declare-fun find1 (us_rep Int) us_rep1)
(declare-fun find__function_guard1 (us_rep1 us_rep Int) Bool)
(declare-fun find2 (Int us_rep Int) us_rep1)
(declare-fun find__function_guard2 (us_rep1 Int us_rep Int) Bool)
(declare-fun include__specific_post (Int us_split_fields us_split_discrs Int Int us_split_fields) Bool)
(declare-fun first (us_rep) us_rep1)
(declare-fun first__function_guard (us_rep1 us_rep) Bool)
(declare-fun first1 (Int us_rep) us_rep1)
(declare-fun first__function_guard1 (us_rep1 Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (first container))) (ite (= (length container) 0) (= (bool_eq1 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) 1)))) :pattern ((first container)))))
(assert true)
(declare-fun next (us_rep us_rep1) us_rep1)
(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)
(declare-fun next1 (Int us_rep us_rep1) us_rep1)
(declare-fun next__function_guard1 (us_rep1 Int us_rep us_rep1) Bool)
(assert (forall ((container us_rep)) (forall ((position us_rep1)) (! (=> (or (= (has_element container position) true) (= (bool_eq1 position no_element) true)) (let ((result (next container position))) (ite (or (= (bool_eq1 position no_element) true) (= (get1 (positions container) position) (length container))) (= (bool_eq1 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (+ (get1 (positions container) position) 1)))))) :pattern ((next container position))))))
(assert true)
(declare-fun f (Int) Int)
(declare-fun f__function_guard (Int Int) Bool)
(declare-sort integer 0)
(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq13 (integer integer) Bool)
(declare-const dummy13 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range8 temp___expr_15)))
(assert (forall ((e Int)) (! (=> (dynamic_invariant7 e true true true) (dynamic_invariant7 (f e) true false true)) :pattern ((f e)))))
(assert (forall ((e Int)) (! (=> (dynamic_invariant7 e true true true) (= (f e) (ite (and (<= (- 100) e) (<= e 100)) (* e 2) e))) :pattern ((f e)))))
(declare-const s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const r__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant8 ((temp___expr_167 (_ BitVec 32)) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool)) Bool true)
(assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))
(assert (forall ((container us_rep3)) (forall ((key2 Int)) (! (=> (dynamic_invariant5 key2 true true true) (let ((result (find container key2))) (and (=> (< 0 result) (and (<= result (length3 container)) (= key2 (get container result)))) (dynamic_invariant result true false true)))) :pattern ((find container key2))))))
(declare-fun k_keys_included (us_rep3 us_rep3) Bool)
(declare-fun k_keys_included__function_guard (Bool us_rep3 us_rep3) Bool)
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (k_keys_included left right) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length3 left))) (and (< 0 (find right (get left i))) (= (get right (find right (get left i))) (get left i)))))) :pattern ((k_keys_included left right)))))
(declare-fun keys_included1 (us_rep4 us_rep4) Bool)
(declare-fun keys_included__function_guard1 (Bool us_rep4 us_rep4) Bool)
(assert (forall ((k_left us_rep3) (k_right us_rep3)) (forall ((p_left us_rep4) (p_right us_rep4)) (! (=> (= (mapping_preserved k_left k_right p_left p_right) true) (and (and (= (keys_included1 p_left p_right) true) (= (k_keys_included k_left k_right) true)) (forall ((c us_rep1)) (=> (= (has_key1 p_left c) true) (= (get k_left (get1 p_left c)) (get k_right (get1 p_right c))))))) :pattern ((mapping_preserved k_left k_right p_left p_right))))))
(declare-fun oeq4 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard4 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq left right) true) (= (oeq4 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(assert true)
(assert (forall ((container us_rep)) (forall ((key2 Int)) (! (=> (dynamic_invariant5 key2 true true true) (let ((result (find1 container key2))) (ite (not (= (has_key (model__ container) key2) true)) (= (bool_eq1 result no_element) true) (and (and (= (has_key1 (positions container) result) true) (= (get1 (positions container) result) (find (keys container) key2))) (= (key container result) key2))))) :pattern ((find1 container key2))))))
(assert true)
(assert true)
(declare-sort element_type3 0)
(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq14 (element_type3 element_type3) Bool)
(declare-const dummy14 element_type3)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___2__projection ((a element_type__ref3)) element_type3 (element_type__content3 a))
(define-fun dynamic_invariant9 ((temp___expr_360 Int) (temp___is_init_357 Bool) (temp___skip_constant_358 Bool) (temp___do_toplevel_359 Bool)) Bool (=> (or (= temp___is_init_357 true) (<= (- 2147483648) 2147483647)) (in_range9 temp___expr_360)))
(declare-fun witness1 (us_rep2 Int) Int)
(declare-fun witness__function_guard1 (Int us_rep2 Int) Bool)
(declare-fun w_get1 (us_rep2 Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep2 Int) Bool)
(assert (forall ((container us_rep2)) (forall ((key2 Int)) (! (=> (and (dynamic_invariant1 key2 true true true) (= (has_key container key2) true)) (let ((result (get2 container key2))) (and (=> (= (of_int 1) true) (and (= result (w_get1 container (witness1 container key2))) (forall ((k Int)) (=> (and (in_range2 k) (= (has_key container k) true)) (= (= k key2) (= (witness1 container key2) (witness1 container k))))))) (dynamic_invariant9 result true false true)))) :pattern ((get2 container key2))))))
(assert (forall ((container us_rep2)) (! (dynamic_invariant (length2 container) true false true) :pattern ((length2 container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (ole left right) true) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key left key2) true)) (and (= (has_key right key2) true) (= (get2 right key2) (get2 left key2)))))) :pattern ((ole left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (oeq4 left right) true) (and (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key left key2) true)) (and (= (has_key right key2) true) (= (get2 right key2) (get2 left key2))))) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key right key2) true)) (= (has_key left key2) true))))) :pattern ((oeq4 left right)))))
(assert (forall ((container us_rep2)) (! (= (= (is_empty container) true) (forall ((key2 Int)) (not (and (in_range2 key2) (= (has_key container key2) true))))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (keys_included left right) true) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key left key2) true)) (= (has_key right key2) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (forall ((new_key Int)) (! (=> (dynamic_invariant1 new_key true true true) (= (= (keys_included_except left right new_key) true) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key left key2) true)) (=> (not (= key2 new_key)) (= (has_key right key2) true)))))) :pattern ((keys_included_except left right new_key))))))
(assert (forall ((left us_rep2) (right us_rep2)) (forall ((new_key Int)) (! (=> (dynamic_invariant1 new_key true true true) (= (= (elements_equal_except left right new_key) true) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key left key2) true)) (=> (not (= key2 new_key)) (and (= (has_key right key2) true) (= (get2 left key2) (get2 right key2)))))))) :pattern ((elements_equal_except left right new_key))))))
(declare-fun has_witness (us_rep2 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)
(assert true)
(assert (forall ((container us_rep2)) (forall ((key2 Int)) (! (=> (and (dynamic_invariant1 key2 true true true) (= (has_key container key2) true)) (let ((result (witness1 container key2))) (and (= (has_witness container result) true) (dynamic_invariant result true false true)))) :pattern ((witness1 container key2))))))
(assert (forall ((container us_rep2)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant witness2 true true true) (= (has_witness container witness2) true)) (dynamic_invariant9 (w_get1 container witness2) true false true)) :pattern ((w_get1 container witness2))))))
(assert (forall ((container us_rep3)) (! (let ((result (length3 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true))) :pattern ((length3 container)))))
(assert (forall ((container us_rep4)) (forall ((key2 us_rep1)) (! (=> (= (of_int 0) true) (=> (exists ((k us_rep1)) (and (= (has_key1 container k) true) (= (bool_eq1 k key2) true))) (= (has_key1 container key2) true))) :pattern ((has_key1 container key2))))))
(assert (forall ((container us_rep4)) (! (dynamic_invariant (length4 container) true false true) :pattern ((length4 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq3 left right) true) (and (forall ((key2 us_rep1)) (=> (= (has_key1 left key2) true) (and (= (has_key1 right key2) true) (= (get1 right key2) (get1 left key2))))) (forall ((key2 us_rep1)) (=> (= (has_key1 right key2) true) (= (has_key1 left key2) true))))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep4)) (! (= (= (is_empty1 container) true) (forall ((key2 us_rep1)) (not (= (has_key1 container key2) true)))) :pattern ((is_empty1 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (keys_included1 left right) true) (forall ((key2 us_rep1)) (=> (= (has_key1 left key2) true) (= (has_key1 right key2) true)))) :pattern ((keys_included1 left right)))))
(assert (forall ((left us_rep4) (right us_rep4)) (forall ((new_key us_rep1)) (! (= (= (keys_included_except1 left right new_key) true) (forall ((key2 us_rep1)) (=> (= (has_key1 left key2) true) (=> (not (= (bool_eq1 key2 new_key) true)) (= (has_key1 right key2) true))))) :pattern ((keys_included_except1 left right new_key))))))
(declare-fun has_witness1 (us_rep4 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)
(assert true)
(assert (forall ((container us_rep4)) (forall ((key2 us_rep1)) (! (=> (= (has_key1 container key2) true) (let ((result (witness container key2))) (and (= (has_witness1 container result) true) (dynamic_invariant result true false true)))) :pattern ((witness container key2))))))
(assert (forall ((container us_rep4)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant witness2 true true true) (= (has_witness1 container witness2) true)) (dynamic_invariant4 (w_get container witness2) true false true)) :pattern ((w_get container witness2))))))
(declare-const cu__split_fields count_type)
(declare-const use_maps__apply_f__cu__assume count_type)
(declare-const temp___755 count_type)
(declare-const temp___754 count_type)
(declare-const temp___7541 hash_type)
(declare-const temp___7542 us_main_type)
(declare-const o us_rep4)
(declare-const o1 Int)
(declare-const i Int)
(declare-const o2 us_rep4)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Bool)
(declare-const temp___757 us_rep3)
(declare-const temp___756 Int)
(declare-const o6 Bool)
(declare-const o7 Bool)
(declare-const k Int)
(declare-const o8 us_rep3)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const temp___765 us_rep3)
(declare-const temp___764 Int)
(declare-const o13 Bool)
(declare-const o14 Bool)
(declare-const k1 Int)
(declare-const i1 Int)
(declare-const o15 us_rep4)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Bool)
(declare-const o19 us_rep3)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const i2 Int)
(declare-const o24 us_rep4)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Bool)
(declare-const o28 Bool)
(declare-const o29 us_rep3)
(declare-const o30 Int)
(declare-const o31 Int)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const temp___753 count_type)
(declare-const o35 Bool)
(declare-const temp___773 us_rep3)
(declare-const temp___772 Int)
(declare-const o36 Bool)
(declare-const o37 Bool)
(declare-const k2 Int)
(declare-const temp___775 us_rep3)
(declare-const temp___774 Int)
(declare-const o38 Bool)
(declare-const o39 Bool)
(declare-const l Int)
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const temp___783 us_rep3)
(declare-const temp___782 Int)
(declare-const o43 Bool)
(declare-const o44 Bool)
(declare-const l1 Int)
(declare-const temp___785 us_rep3)
(declare-const temp___784 Int)
(declare-const o45 Bool)
(declare-const o46 Bool)
(declare-const k3 Int)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 Int)
(declare-const o50 Bool)
(declare-const result count_type)
(declare-const cu__split_fields1 count_type)
(declare-const r__split_fields us_main_type)
(declare-const result1 Bool)
(declare-const r__split_fields1 us_main_type)
(declare-const cu__split_fields2 count_type)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const r__split_fields2 us_main_type)
(declare-const result7 count_type)
(declare-const cu__split_fields3 us_split_fields2)
(declare-const result8 Bool)
(declare-const r__split_fields3 us_split_fields__ref)
(declare-const cu__split_fields4 us_split_fields__ref1)
(declare-const r__split_fields4 us_split_fields)
(declare-const cu__split_fields5 us_split_fields2)
(declare-const r__split_fields5 us_split_fields__ref)
(declare-const cu__split_fields6 us_split_fields__ref1)
(declare-const r__split_fields6 us_split_fields)
(declare-const cu__split_fields7 us_split_fields2)
(declare-const r__split_fields7 us_split_fields__ref)
(declare-const cu__split_fields8 us_split_fields__ref1)
(declare-const r__split_fields8 us_split_fields)
(declare-const cu__split_fields9 us_split_fields2)
(declare-const result9 Bool)
(declare-const result10 Bool)
(declare-const result11 Bool)
(declare-const result12 Bool)
(assert (<= (length s) (to_rep (rec__use_maps__my_maps__map__capacity r__split_discrs))))
(assert (and (= (mk___rep1 (mk___split_fields1 use_maps__apply_f__cu__assume)) (first s)) (ite (= (= (length s) 0) true) (= (bool_eq1 (mk___rep1 (mk___split_fields1 use_maps__apply_f__cu__assume)) no_element) true) (and (= (has_key1 (positions s) (mk___rep1 (mk___split_fields1 use_maps__apply_f__cu__assume))) true) (= (get1 (positions s) (mk___rep1 (mk___split_fields1 use_maps__apply_f__cu__assume))) 1)))))
(assert (= (mk___split_fields__ref1 (mk___split_fields1 result)) (mk___split_fields__ref1 (mk___split_fields1 cu__split_fields))))
(assert (= use_maps__apply_f__cu__assume cu__split_fields1))
(assert (and (= (length (mk___rep r__split_discrs (mk___split_fields r__split_fields))) 0) (= (is_empty (model__ (mk___rep r__split_discrs (mk___split_fields r__split_fields)))) true)))
(assert (and (= result1 (has_key1 (positions s) (mk___rep1 (mk___split_fields1 cu__split_fields1)))) (= (= result1 true) (= (has_key1 (positions s) (mk___rep1 (mk___split_fields1 cu__split_fields1))) true))))
(assert (= result1 true))
(assert (= (length (mk___rep r__split_discrs (mk___split_fields r__split_fields1))) (- (get1 (positions s) (mk___rep1 (mk___split_fields1 cu__split_fields2))) 1)))
(assert (forall ((i3 Int)) (=> (and (<= 1 i3) (<= i3 (- (get1 (positions s) (mk___rep1 (mk___split_fields1 cu__split_fields2))) 1))) (let ((temp___763 (keys (mk___rep r__split_discrs (mk___split_fields r__split_fields1))))) (exists ((temp___762 Int)) (and (and (in_range3 temp___762) (= (iter_has_element temp___763 temp___762) true)) (= (get2 (model__ (mk___rep r__split_discrs (mk___split_fields r__split_fields1))) (get temp___763 temp___762)) (f (get2 (model__ s) (get (keys s) i3))))))))))
(assert (let ((temp___769 (keys (mk___rep r__split_discrs (mk___split_fields r__split_fields1))))) (forall ((temp___768 Int)) (=> (and (in_range3 temp___768) (= (iter_has_element temp___769 temp___768) true)) (exists ((i3 Int)) (and (and (<= 1 i3) (<= i3 (- (get1 (positions s) (mk___rep1 (mk___split_fields1 cu__split_fields2))) 1))) (= (get2 (model__ (mk___rep r__split_discrs (mk___split_fields r__split_fields1))) (get temp___769 temp___768)) (f (get2 (model__ s) (get (keys s) i3))))))))))
(assert (forall ((i3 Int)) (=> (and (<= (get1 (positions s) (mk___rep1 (mk___split_fields1 cu__split_fields2))) i3) (<= i3 (length s))) (not (= (has_key (model__ (mk___rep r__split_discrs (mk___split_fields r__split_fields1))) (get (keys s) i3)) true)))))
(assert (and (= o2 (positions s)) (and (not (= (has_key1 o2 no_element) true)) (forall ((i3 us_rep1)) (=> (= (has_key1 o2 i3) true) (and (and (<= 1 (get1 o2 i3)) (<= (get1 o2 i3) (length s))) (forall ((j us_rep1)) (=> (= (has_key1 o2 j) true) (=> (= (get1 o2 i3) (get1 o2 j)) (= (bool_eq1 i3 j) true))))))))))
(assert (and (= o3 (get1 o2 (mk___rep1 (mk___split_fields1 cu__split_fields2)))) (and (in_range5 o3) (=> (= (of_int 0) true) (and (= o3 (w_get o2 (witness o2 (mk___rep1 (mk___split_fields1 cu__split_fields2))))) (forall ((k4 us_rep1)) (=> (= (has_key1 o2 k4) true) (= (= (bool_eq1 k4 (mk___rep1 (mk___split_fields1 cu__split_fields2))) true) (= (witness o2 (mk___rep1 (mk___split_fields1 cu__split_fields2))) (witness o2 k4))))))))))
(assert (= o4 (- o3 1)))
(assert (= o5 (ite (<= i o4) true false)))
(assert (= result2 (ite (<= 1 i) o5 false)))
(assert (= result2 true))
(assert (and (= temp___757 (keys (mk___rep r__split_discrs (mk___split_fields r__split_fields1)))) (and (and (and (and (= (length3 temp___757) (length (mk___rep r__split_discrs (mk___split_fields r__split_fields1)))) (forall ((temp___431 Int)) (=> (and (in_range3 temp___431) (= (iter_has_element temp___757 temp___431) true)) (= (has_key (model__ (mk___rep r__split_discrs (mk___split_fields r__split_fields1))) (get temp___757 temp___431)) true)))) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key (model__ (mk___rep r__split_discrs (mk___split_fields r__split_fields1))) key2) true)) (and (< 0 (find temp___757 key2)) (= (get temp___757 (find temp___757 key2)) key2))))) (forall ((i3 Int)) (=> (and (<= 1 i3) (<= i3 (length (mk___rep r__split_discrs (mk___split_fields r__split_fields1))))) (= (find temp___757 (get temp___757 i3)) i3)))) (forall ((i3 Int)) (=> (and (<= 1 i3) (<= i3 (length (mk___rep r__split_discrs (mk___split_fields r__split_fields1))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (mk___rep r__split_discrs (mk___split_fields r__split_fields1))))) (=> (= (get temp___757 i3) (get temp___757 j)) (= i3 j)))))))))
(assert (and (= o6 (iter_has_element temp___757 temp___756)) (= (= o6 true) (and (<= 1 temp___756) (<= temp___756 (last temp___757))))))
(assert (= (= o7 true) (in_range3 temp___756)))
(assert (= result3 (ite (= o7 true) o6 false)))
(assert (= result3 true))
(assert (and (= k (get temp___757 temp___756)) (in_range4 k)))
(assert (and (= o8 (keys s)) (and (and (and (and (= (length3 o8) (length s)) (forall ((temp___431 Int)) (=> (and (in_range3 temp___431) (= (iter_has_element o8 temp___431) true)) (= (has_key (model__ s) (get o8 temp___431)) true)))) (forall ((key2 Int)) (=> (and (in_range2 key2) (= (has_key (model__ s) key2) true)) (and (< 0 (find o8 key2)) (= (get o8 (find o8 key2)) key2))))) (forall ((i3 Int)) (=> (and (<= 1 i3) (<= i3 (length s))) (= (find o8 (get o8 i3)) i3)))) (forall ((i3 Int)) (=> (and (<= 1 i3) (<= i3 (length s))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length s))) (=> (= (get o8 i3) (get o8 j)) (= i3 j)))))))))
(assert (not (<= 1 i)))
(check-sat)
(exit)
