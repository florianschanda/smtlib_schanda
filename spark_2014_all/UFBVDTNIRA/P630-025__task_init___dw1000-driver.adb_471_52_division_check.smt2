(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 16) Int) Bool)
(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-sort bits_3 0)
(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 7))))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (bits_3 bits_3) Bool)
(declare-const dummy2 bits_3)
(declare-datatypes () ((bits_3__ref (mk_bits_3__ref (bits_3__content bits_3)))))
(define-fun bits_3__ref___projection ((a bits_3__ref)) bits_3 (bits_3__content a))
(declare-fun to_rep (bits_3) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) bits_3)
(assert (forall ((x bits_3)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x bits_3)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 8)))) (=> (in_range2 y) (= (to_rep (of_rep x)) y))) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x bits_3)) Int (bv2nat (to_rep x)))
(assert (forall ((x bits_3)) (! (in_range_int (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort bits_7 0)
(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 127))))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq3 (bits_7 bits_7) Bool)
(declare-const dummy3 bits_7)
(declare-datatypes () ((bits_7__ref (mk_bits_7__ref (bits_7__content bits_7)))))
(define-fun bits_7__ref___projection ((a bits_7__ref)) bits_7 (bits_7__content a))
(declare-fun to_rep1 (bits_7) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) bits_7)
(assert (forall ((x bits_7)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x bits_7)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 128)))) (=> (in_range3 y) (= (to_rep1 (of_rep1 x)) y))) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x bits_7)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x bits_7)) (! (in_range_int1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort bits_10 0)
(define-fun in_range4 ((x (_ BitVec 16))) Bool (and (bvule ((_ int2bv 16) 0) x) (bvule x ((_ int2bv 16) 1023))))
(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 1023)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))
(declare-fun user_eq4 (bits_10 bits_10) Bool)
(declare-const dummy4 bits_10)
(declare-datatypes () ((bits_10__ref (mk_bits_10__ref (bits_10__content bits_10)))))
(define-fun bits_10__ref___projection ((a bits_10__ref)) bits_10 (bits_10__content a))
(declare-fun to_rep2 (bits_10) (_ BitVec 16))
(declare-fun of_rep2 ((_ BitVec 16)) bits_10)
(assert (forall ((x bits_10)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x bits_10)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x (_ BitVec 16))) (! (let ((y (bvurem x ((_ int2bv 16) 1024)))) (=> (in_range4 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int5 ((x bits_10)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x bits_10)) (! (in_range_int2 (to_int5 x)) :pattern ((to_int5 x)))))
(declare-sort bits_1 0)
(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 1))))
(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq5 (bits_1 bits_1) Bool)
(declare-const dummy5 bits_1)
(declare-datatypes () ((bits_1__ref (mk_bits_1__ref (bits_1__content bits_1)))))
(define-fun bits_1__ref___projection ((a bits_1__ref)) bits_1 (bits_1__content a))
(declare-fun to_rep3 (bits_1) (_ BitVec 8))
(declare-fun of_rep3 ((_ BitVec 8)) bits_1)
(assert (forall ((x bits_1)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x bits_1)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 2)))) (=> (in_range5 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int6 ((x bits_1)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x bits_1)) (! (in_range_int3 (to_int6 x)) :pattern ((to_int6 x)))))
(declare-sort bits_2 0)
(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x) (bvule x ((_ int2bv 8) 3))))
(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (bits_2 bits_2) Bool)
(declare-const dummy6 bits_2)
(declare-datatypes () ((bits_2__ref (mk_bits_2__ref (bits_2__content bits_2)))))
(define-fun bits_2__ref___projection ((a bits_2__ref)) bits_2 (bits_2__content a))
(declare-fun to_rep4 (bits_2) (_ BitVec 8))
(declare-fun of_rep4 ((_ BitVec 8)) bits_2)
(assert (forall ((x bits_2)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x bits_2)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x (_ BitVec 8))) (! (let ((y (bvurem x ((_ int2bv 8) 4)))) (=> (in_range6 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int7 ((x bits_2)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x bits_2)) (! (in_range_int4 (to_int7 x)) :pattern ((to_int7 x)))))
(declare-sort bits_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))
(declare-fun user_eq7 (bits_8 bits_8) Bool)
(declare-const dummy7 bits_8)
(declare-datatypes () ((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content a))
(declare-fun to_rep5 (bits_8) (_ BitVec 8))
(declare-fun of_rep5 ((_ BitVec 8)) bits_8)
(assert (forall ((x bits_8)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))))))
(define-fun to_int8 ((x bits_8)) Int (bv2nat (to_rep5 x)))
(assert (forall ((x bits_8)) (! (uint_in_range (to_int8 x)) :pattern ((to_int8 x)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dw1000__register_types__tx_fctrl_type__tflen bits_7) (rec__dw1000__register_types__tx_fctrl_type__tfle bits_3) (rec__dw1000__register_types__tx_fctrl_type__r bits_3) (rec__dw1000__register_types__tx_fctrl_type__txbr bits_2) (rec__dw1000__register_types__tx_fctrl_type__tr bits_1) (rec__dw1000__register_types__tx_fctrl_type__txprf bits_2) (rec__dw1000__register_types__tx_fctrl_type__txpsr bits_2) (rec__dw1000__register_types__tx_fctrl_type__pe bits_2) (rec__dw1000__register_types__tx_fctrl_type__txboffs bits_10) (rec__dw1000__register_types__tx_fctrl_type__ifsdelay bits_8)))))
(define-fun us_split_fields_TFLEN__projection ((a us_split_fields)) bits_7 (rec__dw1000__register_types__tx_fctrl_type__tflen a))
(define-fun us_split_fields_TFLE__projection ((a us_split_fields)) bits_3 (rec__dw1000__register_types__tx_fctrl_type__tfle a))
(define-fun us_split_fields_R__projection ((a us_split_fields)) bits_3 (rec__dw1000__register_types__tx_fctrl_type__r a))
(define-fun us_split_fields_TXBR__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__tx_fctrl_type__txbr a))
(define-fun us_split_fields_TR__projection ((a us_split_fields)) bits_1 (rec__dw1000__register_types__tx_fctrl_type__tr a))
(define-fun us_split_fields_TXPRF__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__tx_fctrl_type__txprf a))
(define-fun us_split_fields_TXPSR__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__tx_fctrl_type__txpsr a))
(define-fun us_split_fields_PE__projection ((a us_split_fields)) bits_2 (rec__dw1000__register_types__tx_fctrl_type__pe a))
(define-fun us_split_fields_TXBOFFS__projection ((a us_split_fields)) bits_10 (rec__dw1000__register_types__tx_fctrl_type__txboffs a))
(define-fun us_split_fields_IFSDELAY__projection ((a us_split_fields)) bits_8 (rec__dw1000__register_types__tx_fctrl_type__ifsdelay a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___6__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (and (and (= (to_rep1 (rec__dw1000__register_types__tx_fctrl_type__tflen (us_split_fields1 a))) (to_rep1 (rec__dw1000__register_types__tx_fctrl_type__tflen (us_split_fields1 b)))) (= (to_rep (rec__dw1000__register_types__tx_fctrl_type__tfle (us_split_fields1 a))) (to_rep (rec__dw1000__register_types__tx_fctrl_type__tfle (us_split_fields1 b))))) (= (to_rep (rec__dw1000__register_types__tx_fctrl_type__r (us_split_fields1 a))) (to_rep (rec__dw1000__register_types__tx_fctrl_type__r (us_split_fields1 b))))) (= (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__txbr (us_split_fields1 a))) (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__txbr (us_split_fields1 b))))) (= (to_rep3 (rec__dw1000__register_types__tx_fctrl_type__tr (us_split_fields1 a))) (to_rep3 (rec__dw1000__register_types__tx_fctrl_type__tr (us_split_fields1 b))))) (= (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__txprf (us_split_fields1 a))) (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__txprf (us_split_fields1 b))))) (= (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__txpsr (us_split_fields1 a))) (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__txpsr (us_split_fields1 b))))) (= (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__pe (us_split_fields1 a))) (to_rep4 (rec__dw1000__register_types__tx_fctrl_type__pe (us_split_fields1 b))))) (= (to_rep2 (rec__dw1000__register_types__tx_fctrl_type__txboffs (us_split_fields1 a))) (to_rep2 (rec__dw1000__register_types__tx_fctrl_type__txboffs (us_split_fields1 b))))) (= (to_rep5 (rec__dw1000__register_types__tx_fctrl_type__ifsdelay (us_split_fields1 a))) (to_rep5 (rec__dw1000__register_types__tx_fctrl_type__ifsdelay (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dw1000__register_types__tx_fctrl_type__tflen__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__tflen__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__tflen__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__tflen__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__tflen__first__bit dw1000__register_types__tx_fctrl_type__tflen__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__tflen__position))
(declare-const dw1000__register_types__tx_fctrl_type__tfle__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__tfle__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__tfle__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__tfle__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__tfle__first__bit dw1000__register_types__tx_fctrl_type__tfle__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__tfle__position))
(declare-const dw1000__register_types__tx_fctrl_type__r__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__r__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__r__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__r__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__r__first__bit dw1000__register_types__tx_fctrl_type__r__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__r__position))
(declare-const dw1000__register_types__tx_fctrl_type__txbr__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txbr__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txbr__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txbr__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__txbr__first__bit dw1000__register_types__tx_fctrl_type__txbr__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txbr__position))
(declare-const dw1000__register_types__tx_fctrl_type__tr__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__tr__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__tr__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__tr__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__tr__first__bit dw1000__register_types__tx_fctrl_type__tr__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__tr__position))
(declare-const dw1000__register_types__tx_fctrl_type__txprf__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txprf__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txprf__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txprf__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__txprf__first__bit dw1000__register_types__tx_fctrl_type__txprf__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txprf__position))
(declare-const dw1000__register_types__tx_fctrl_type__txpsr__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txpsr__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txpsr__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txpsr__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__txpsr__first__bit dw1000__register_types__tx_fctrl_type__txpsr__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txpsr__position))
(declare-const dw1000__register_types__tx_fctrl_type__pe__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__pe__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__pe__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__pe__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__pe__first__bit dw1000__register_types__tx_fctrl_type__pe__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__pe__position))
(declare-const dw1000__register_types__tx_fctrl_type__txboffs__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txboffs__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__txboffs__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txboffs__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__txboffs__first__bit dw1000__register_types__tx_fctrl_type__txboffs__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__txboffs__position))
(declare-const dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__ifsdelay__last__bit Int)
(declare-const dw1000__register_types__tx_fctrl_type__ifsdelay__position Int)
(assert (<= 0 dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit))
(assert (< dw1000__register_types__tx_fctrl_type__ifsdelay__first__bit dw1000__register_types__tx_fctrl_type__ifsdelay__last__bit))
(assert (<= 0 dw1000__register_types__tx_fctrl_type__ifsdelay__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((tx_fctrl_type__ref (mk_tx_fctrl_type__ref (tx_fctrl_type__content us_rep)))))
(define-fun tx_fctrl_type__ref___projection ((a tx_fctrl_type__ref)) us_rep (tx_fctrl_type__content a))
(declare-datatypes () ((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___6__projection ((a register_type__ref)) us_rep (register_type__content a))
(declare-const length Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const offset Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_274 (_ BitVec 8)) (temp___is_init_271 Bool) (temp___skip_constant_272 Bool) (temp___do_toplevel_273 Bool)) Bool (=> (or (= temp___is_init_271 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1))) (in_range5 temp___expr_274)))
(define-fun dynamic_invariant3 ((temp___expr_280 (_ BitVec 8)) (temp___is_init_277 Bool) (temp___skip_constant_278 Bool) (temp___do_toplevel_279 Bool)) Bool (=> (or (= temp___is_init_277 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 3))) (in_range6 temp___expr_280)))
(define-fun dynamic_invariant4 ((temp___expr_286 (_ BitVec 8)) (temp___is_init_283 Bool) (temp___skip_constant_284 Bool) (temp___do_toplevel_285 Bool)) Bool (=> (or (= temp___is_init_283 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 7))) (in_range2 temp___expr_286)))
(define-fun dynamic_invariant5 ((temp___expr_310 (_ BitVec 8)) (temp___is_init_307 Bool) (temp___skip_constant_308 Bool) (temp___do_toplevel_309 Bool)) Bool (=> (or (= temp___is_init_307 true) (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 127))) (in_range3 temp___expr_310)))
(define-fun dynamic_invariant6 ((temp___expr_316 (_ BitVec 8)) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool)) Bool true)
(define-fun dynamic_invariant7 ((temp___expr_328 (_ BitVec 16)) (temp___is_init_325 Bool) (temp___skip_constant_326 Bool) (temp___do_toplevel_327 Bool)) Bool (=> (or (= temp___is_init_325 true) (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 1023))) (in_range4 temp___expr_328)))
(declare-const tx_fctrl_reg__split_fields bits_7)
(declare-const tx_fctrl_reg__split_fields1 bits_3)
(declare-const tx_fctrl_reg__split_fields2 bits_3)
(declare-const tx_fctrl_reg__split_fields3 bits_2)
(declare-const tx_fctrl_reg__split_fields4 bits_1)
(declare-const tx_fctrl_reg__split_fields5 bits_2)
(declare-const tx_fctrl_reg__split_fields6 bits_2)
(declare-const tx_fctrl_reg__split_fields7 bits_2)
(declare-const tx_fctrl_reg__split_fields8 bits_10)
(declare-const tx_fctrl_reg__split_fields9 bits_8)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 (_ BitVec 8))
(declare-const o3 bits_7)
(declare-const o4 bits_7)
(declare-const o5 bits_3)
(declare-const o6 bits_3)
(declare-const o7 bits_2)
(declare-const o8 bits_1)
(declare-const o9 bits_2)
(declare-const o10 bits_2)
(declare-const o11 bits_2)
(declare-const o12 bits_10)
(declare-const o13 bits_8)
(declare-const temp___3261 bits_7)
(declare-const temp___32611 bits_3)
(declare-const temp___32612 bits_3)
(declare-const temp___32613 bits_2)
(declare-const temp___32614 bits_1)
(declare-const temp___32615 bits_2)
(declare-const temp___32616 bits_2)
(declare-const temp___32617 bits_2)
(declare-const temp___32618 bits_10)
(declare-const temp___32619 bits_8)
(declare-const o14 Int)
(declare-const o15 (_ BitVec 8))
(declare-const o16 bits_3)
(declare-const o17 bits_7)
(declare-const o18 bits_3)
(declare-const o19 bits_3)
(declare-const o20 bits_2)
(declare-const o21 bits_1)
(declare-const o22 bits_2)
(declare-const o23 bits_2)
(declare-const o24 bits_2)
(declare-const o25 bits_10)
(declare-const o26 bits_8)
(declare-const temp___3263 bits_7)
(declare-const temp___32631 bits_3)
(declare-const temp___32632 bits_3)
(declare-const temp___32633 bits_2)
(declare-const temp___32634 bits_1)
(declare-const temp___32635 bits_2)
(declare-const temp___32636 bits_2)
(declare-const temp___32637 bits_2)
(declare-const temp___32638 bits_10)
(declare-const temp___32639 bits_8)
(declare-const o27 Int)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields bits_7)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields1 bits_3)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields2 bits_3)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields3 bits_2)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields4 bits_1)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields5 bits_2)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields6 bits_2)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields7 bits_2)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields8 bits_10)
(declare-const dw1000__registers__tx_fctrl__read__reg__fields9 bits_8)
(declare-const result bits_7)
(declare-const result1 bits_3)
(declare-const result2 bits_3)
(declare-const result3 bits_2)
(declare-const result4 bits_1)
(declare-const result5 bits_2)
(declare-const result6 bits_2)
(declare-const result7 bits_2)
(declare-const result8 bits_10)
(declare-const result9 bits_8)
(declare-const tx_fctrl_reg__split_fields10 bits_7)
(declare-const tx_fctrl_reg__split_fields11 bits_3)
(declare-const tx_fctrl_reg__split_fields12 bits_3)
(declare-const tx_fctrl_reg__split_fields13 bits_2)
(declare-const tx_fctrl_reg__split_fields14 bits_1)
(declare-const tx_fctrl_reg__split_fields15 bits_2)
(declare-const tx_fctrl_reg__split_fields16 bits_2)
(declare-const tx_fctrl_reg__split_fields17 bits_2)
(declare-const tx_fctrl_reg__split_fields18 bits_10)
(declare-const tx_fctrl_reg__split_fields19 bits_8)
(declare-const result10 bits_7)
(declare-const result11 bits_3)
(declare-const result12 bits_3)
(declare-const result13 bits_2)
(declare-const result14 bits_1)
(declare-const result15 bits_2)
(declare-const result16 bits_2)
(declare-const result17 bits_2)
(declare-const result18 bits_10)
(declare-const result19 bits_8)
(declare-const tx_fctrl_reg__split_fields20 bits_7)
(declare-const tx_fctrl_reg__split_fields21 bits_3)
(declare-const tx_fctrl_reg__split_fields22 bits_3)
(declare-const tx_fctrl_reg__split_fields23 bits_2)
(declare-const tx_fctrl_reg__split_fields24 bits_1)
(declare-const tx_fctrl_reg__split_fields25 bits_2)
(declare-const tx_fctrl_reg__split_fields26 bits_2)
(declare-const tx_fctrl_reg__split_fields27 bits_2)
(declare-const tx_fctrl_reg__split_fields28 bits_10)
(declare-const tx_fctrl_reg__split_fields29 bits_8)
(declare-const result20 bits_7)
(declare-const result21 bits_3)
(declare-const result22 bits_3)
(declare-const result23 bits_2)
(declare-const result24 bits_1)
(declare-const result25 bits_2)
(declare-const result26 bits_2)
(declare-const result27 bits_2)
(declare-const result28 bits_10)
(declare-const result29 bits_8)
(declare-const tx_fctrl_reg__split_fields30 bits_7)
(declare-const tx_fctrl_reg__split_fields31 bits_3)
(declare-const tx_fctrl_reg__split_fields32 bits_3)
(declare-const tx_fctrl_reg__split_fields33 bits_2)
(declare-const tx_fctrl_reg__split_fields34 bits_1)
(declare-const tx_fctrl_reg__split_fields35 bits_2)
(declare-const tx_fctrl_reg__split_fields36 bits_2)
(declare-const tx_fctrl_reg__split_fields37 bits_2)
(declare-const tx_fctrl_reg__split_fields38 bits_10)
(declare-const tx_fctrl_reg__split_fields39 bits_8)
(assert (in_range1 length))
(assert (in_range1 offset))
(assert (and (< length 1024) (and (< offset 1024) (<= (+ length offset) 1024))))
(assert (= result tx_fctrl_reg__split_fields))
(assert (= result1 tx_fctrl_reg__split_fields1))
(assert (= result2 tx_fctrl_reg__split_fields2))
(assert (= result3 tx_fctrl_reg__split_fields3))
(assert (= result4 tx_fctrl_reg__split_fields4))
(assert (= result5 tx_fctrl_reg__split_fields5))
(assert (= result6 tx_fctrl_reg__split_fields6))
(assert (= result7 tx_fctrl_reg__split_fields7))
(assert (= result8 tx_fctrl_reg__split_fields8))
(assert (= result9 tx_fctrl_reg__split_fields9))
(assert (= (mk___split_fields tx_fctrl_reg__split_fields10 tx_fctrl_reg__split_fields11 tx_fctrl_reg__split_fields12 tx_fctrl_reg__split_fields13 tx_fctrl_reg__split_fields14 tx_fctrl_reg__split_fields15 tx_fctrl_reg__split_fields16 tx_fctrl_reg__split_fields17 tx_fctrl_reg__split_fields18 tx_fctrl_reg__split_fields19) (mk___split_fields dw1000__registers__tx_fctrl__read__reg__fields dw1000__registers__tx_fctrl__read__reg__fields1 dw1000__registers__tx_fctrl__read__reg__fields2 dw1000__registers__tx_fctrl__read__reg__fields3 dw1000__registers__tx_fctrl__read__reg__fields4 dw1000__registers__tx_fctrl__read__reg__fields5 dw1000__registers__tx_fctrl__read__reg__fields6 dw1000__registers__tx_fctrl__read__reg__fields7 dw1000__registers__tx_fctrl__read__reg__fields8 dw1000__registers__tx_fctrl__read__reg__fields9)))
(assert (and (= o1 (mod2 length 128)) (in_range_int1 (mod2 length 128))))
(assert (= o2 ((_ int2bv 8) o1)))
(assert (= (to_rep1 o3) o2))
(assert (= o3 o4))
(assert (= tx_fctrl_reg__split_fields11 o5))
(assert (= tx_fctrl_reg__split_fields12 o6))
(assert (= tx_fctrl_reg__split_fields13 o7))
(assert (= tx_fctrl_reg__split_fields14 o8))
(assert (= tx_fctrl_reg__split_fields15 o9))
(assert (= tx_fctrl_reg__split_fields16 o10))
(assert (= tx_fctrl_reg__split_fields17 o11))
(assert (= tx_fctrl_reg__split_fields18 o12))
(assert (= tx_fctrl_reg__split_fields19 o13))
(assert (= temp___3261 o4))
(assert (= temp___32611 o5))
(assert (= temp___32612 o6))
(assert (= temp___32613 o7))
(assert (= temp___32614 o8))
(assert (= temp___32615 o9))
(assert (= temp___32616 o10))
(assert (= temp___32617 o11))
(assert (= temp___32618 o12))
(assert (= temp___32619 o13))
(assert (= result10 tx_fctrl_reg__split_fields10))
(assert (= result11 tx_fctrl_reg__split_fields11))
(assert (= result12 tx_fctrl_reg__split_fields12))
(assert (= result13 tx_fctrl_reg__split_fields13))
(assert (= result14 tx_fctrl_reg__split_fields14))
(assert (= result15 tx_fctrl_reg__split_fields15))
(assert (= result16 tx_fctrl_reg__split_fields16))
(assert (= result17 tx_fctrl_reg__split_fields17))
(assert (= result18 tx_fctrl_reg__split_fields18))
(assert (= result19 tx_fctrl_reg__split_fields19))
(assert (= temp___3261 tx_fctrl_reg__split_fields20))
(assert (= temp___32611 tx_fctrl_reg__split_fields21))
(assert (= temp___32612 tx_fctrl_reg__split_fields22))
(assert (= temp___32613 tx_fctrl_reg__split_fields23))
(assert (= temp___32614 tx_fctrl_reg__split_fields24))
(assert (= temp___32615 tx_fctrl_reg__split_fields25))
(assert (= temp___32616 tx_fctrl_reg__split_fields26))
(assert (= temp___32617 tx_fctrl_reg__split_fields27))
(assert (= temp___32618 tx_fctrl_reg__split_fields28))
(assert (= temp___32619 tx_fctrl_reg__split_fields29))
(assert (not (not (= 128 0))))
(check-sat)
(exit)
