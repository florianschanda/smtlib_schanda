(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 16) Int) Bool)
(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort mod_time 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq1 (mod_time mod_time) Bool)
(declare-const dummy1 mod_time)
(declare-datatypes () ((mod_time__ref (mk_mod_time__ref (mod_time__content mod_time)))))
(define-fun mod_time__ref___projection ((a mod_time__ref)) mod_time (mod_time__content a))
(define-fun dynamic_invariant ((temp___expr_235 (_ BitVec 16)) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool true)
(declare-sort mod_count 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))
(declare-fun user_eq2 (mod_count mod_count) Bool)
(declare-const dummy2 mod_count)
(declare-datatypes () ((mod_count__ref (mk_mod_count__ref (mod_count__content mod_count)))))
(define-fun mod_count__ref___projection ((a mod_count__ref)) mod_count (mod_count__content a))
(define-fun dynamic_invariant1 ((temp___expr_249 (_ BitVec 16)) (temp___is_init_245 Bool) (temp___skip_constant_246 Bool) (temp___do_toplevel_247 Bool) (temp___do_typ_inv_248 Bool)) Bool true)
(declare-sort time 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (time time) Bool)
(declare-const dummy3 time)
(declare-datatypes () ((time__ref (mk_time__ref (time__content time)))))
(define-fun time__ref___projection ((a time__ref)) time (time__content a))
(define-fun dynamic_invariant2 ((temp___expr_256 Int) (temp___is_init_252 Bool) (temp___skip_constant_253 Bool) (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool (=> (or (= temp___is_init_252 true) (<= 0 2147483647)) (in_range2 temp___expr_256)))
(declare-sort distance 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (distance distance) Bool)
(declare-const dummy4 distance)
(declare-datatypes () ((distance__ref (mk_distance__ref (distance__content distance)))))
(define-fun distance__ref___projection ((a distance__ref)) distance (distance__content a))
(define-fun dynamic_invariant3 ((temp___expr_263 Int) (temp___is_init_259 Bool) (temp___skip_constant_260 Bool) (temp___do_toplevel_261 Bool) (temp___do_typ_inv_262 Bool)) Bool (=> (or (= temp___is_init_259 true) (<= 0 2147483647)) (in_range3 temp___expr_263)))
(declare-sort velocity 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (velocity velocity) Bool)
(declare-const dummy5 velocity)
(declare-datatypes () ((velocity__ref (mk_velocity__ref (velocity__content velocity)))))
(define-fun velocity__ref___projection ((a velocity__ref)) velocity (velocity__content a))
(define-fun dynamic_invariant4 ((temp___expr_277 Int) (temp___is_init_273 Bool) (temp___skip_constant_274 Bool) (temp___do_toplevel_275 Bool) (temp___do_typ_inv_276 Bool)) Bool (=> (or (= temp___is_init_273 true) (<= 0 2147483647)) (in_range4 temp___expr_277)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const currtime (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const thistime (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const thiscount (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_invariant5 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const prevtime (_ BitVec 16))
(declare-const prevcount (_ BitVec 16))
(declare-const success Bool)
(declare-const result__ Int)
(declare-const t1 Int)
(declare-const t2 Int)
(declare-const d1 Int)
(declare-const d2 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const success1 Bool)
(declare-const result__1 Int)
(declare-const t11 Int)
(declare-const t21 Int)
(declare-const d11 Int)
(declare-const d21 Int)
(declare-const result Bool)
(declare-const success2 Bool)
(declare-const result1 Int)
(declare-const result__2 Int)
(declare-const result2 Int)
(declare-const t12 Int)
(declare-const result3 Int)
(declare-const t22 Int)
(declare-const result4 Int)
(declare-const d12 Int)
(declare-const result5 Int)
(declare-const d22 Int)
(declare-const result6 Bool)
(declare-const success3 Bool)
(declare-const result7 Int)
(declare-const result__3 Int)
(declare-const success4 Bool)
(declare-const result__4 Int)
(declare-const t13 Int)
(declare-const t23 Int)
(declare-const d13 Int)
(declare-const d23 int__ref)
(declare-const success5 Bool)
(declare-const result__5 Int)
(declare-const t14 Int)
(declare-const t24 Int)
(declare-const d14 Int)
(declare-const d24 Int)
(declare-const success6 bool__ref)
(declare-const result__6 int__ref)
(declare-const t15 int__ref)
(declare-const t25 int__ref)
(declare-const d15 int__ref)
(declare-const d25 int__ref)
(declare-const success7 Bool)
(declare-const result__7 Int)
(declare-const t16 Int)
(declare-const t26 Int)
(declare-const d16 Int)
(declare-const d26 Int)
(define-fun d17 () int__ref (mk_int__ref d13))
(define-fun t27 () int__ref (mk_int__ref t23))
(define-fun t17 () int__ref (mk_int__ref t13))
(define-fun d27 () int__ref (mk_int__ref d2))
(define-fun d18 () int__ref (mk_int__ref d1))
(define-fun t28 () int__ref (mk_int__ref t2))
(define-fun t18 () int__ref (mk_int__ref t1))
(assert (=> (<= 0 2147483647) (in_range4 result__)))
(assert (and (not (= thistime prevtime)) (not (= thiscount prevcount))))
(assert (=> (<= 0 2147483647) (in_range2 t1)))
(assert (=> (<= 0 2147483647) (in_range2 t2)))
(assert (=> (<= 0 2147483647) (in_range3 d1)))
(assert (=> (<= 0 2147483647) (in_range3 d2)))
(assert (or (and (and (and (= d23 d27) (and (= d17 d18) (and (= t27 t28) (and (= t17 t18) (and (= result__2 result__4) (= success2 success4)))))) (and (= d24 d21) (and (= d14 d11) (and (= t24 t21) (and (= t14 t11) (and (= result__5 result__2) (= success5 success2))))))) (and (bvult (bvsub thiscount prevcount) (bvsub thistime prevtime)) (and (and (= (mk_bool__ref result) (mk_bool__ref success)) (= success2 (distinct 0 0))) (and (= (mk_int__ref result1) (mk_int__ref result__)) (= result__2 0))))) (and (and (not (bvult (bvsub thiscount prevcount) (bvsub thistime prevtime))) (and (and (= result__2 result__) (= success2 success)) (and (= result__2 result__1) (= success2 success1)))) (and (and (and (= d23 (mk_int__ref d22)) (and (= d12 d13) (and (= t22 t23) (and (= t12 t13) (and (= result__3 result__4) (= success3 success4)))))) (and (= d24 d22) (and (= d14 d12) (and (= t24 t22) (and (= t14 t12) (and (= result__5 result__3) (= success5 success3))))))) (and (and (= (mk_int__ref result2) t18) (= t12 (bv2nat (bvsub thistime prevtime)))) (and (and (= (mk_int__ref result3) t28) (= t22 (bv2nat (bvsub currtime thistime)))) (and (and (and (and (= o (* 207 (bv2nat (bvsub thiscount prevcount)))) (in_range1 (* 207 (bv2nat (bvsub thiscount prevcount))))) (and (= o1 o) (in_range3 o))) (and (= (mk_int__ref result4) d18) (= d12 o1))) (and (and (and (and (and (= o2 (* d12 t22)) (in_range1 (* d12 t22))) (= o3 (div1 o2 t12))) (and (= o4 o3) (in_range3 o3))) (and (= (mk_int__ref result5) d27) (= d22 o4))) (and (and (= success2 result6) (= success3 (distinct 1 0))) (and (and (and (and (= o8 (+ t12 t22)) (in_range1 (+ t12 t22))) (and (and (and (and (= o5 (+ d12 d22)) (in_range1 (+ d12 d22))) (= o6 (* o5 3600))) (and (= o7 o6) (in_range1 o6))) (= o9 (div1 o7 o8)))) (and (= o10 o9) (in_range4 o9))) (and (= result__2 result7) (= result__3 o10))))))))))))
(assert (= d25 d23))
(assert (= d15 d17))
(assert (= t25 t27))
(assert (= t15 t17))
(assert (= result__6 (mk_int__ref result__4)))
(assert (= success6 (mk_bool__ref success4)))
(assert (= d26 d24))
(assert (= d16 d14))
(assert (= t26 t24))
(assert (= t16 t14))
(assert (= result__7 result__5))
(assert (= success7 success5))
(assert (= (bool__content success6) true))
(assert (and (= o11 (* 207 (bv2nat (bvsub thiscount prevcount)))) (in_range1 (* 207 (bv2nat (bvsub thiscount prevcount))))))
(assert (= o12 (* o11 (bv2nat (bvsub currtime thistime)))))
(assert (and (= o13 o12) (in_range1 o12)))
(assert (= o14 (div1 o13 (bv2nat (bvsub thistime prevtime)))))
(assert (and (= o15 (* 207 (bv2nat (bvsub thiscount prevcount)))) (in_range1 (* 207 (bv2nat (bvsub thiscount prevcount))))))
(assert (= o16 (+ o15 o14)))
(assert (and (= o17 o16) (in_range1 o16)))
(assert (= o18 (* o17 3600)))
(assert (and (= o19 o18) (in_range1 o18)))
(assert (not (not (= (bv2nat (bvsub currtime prevtime)) 0))))
(check-sat)
(exit)
