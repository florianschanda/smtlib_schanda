(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic functions__non_ter_func__result : bool

logic functions__non_ter_func__result1 : bool

logic functions__non_ter_func__result2 : bool

logic result : bool

logic functions__non_ter_func__result3 : bool

logic functions__non_ter_func__result4 : bool

logic functions__non_ter_func__result5 : bool

logic result1 : bool

logic functions__non_ter_func__result6 : bool

logic functions__non_ter_func__result7 : bool

logic functions__non_ter_func__result8 : bool

logic functions__non_ter_func__result9 : bool

logic functions__non_ter_func__result10 : bool

logic functions__non_ter_func__result11 : bool

logic functions__non_ter_func__result12 : bool

logic result2 : bool

axiom H :
  ((((functions__non_ter_func__result3 = functions__non_ter_func__result9) and
  (functions__non_ter_func__result10 = functions__non_ter_func__result3)) and
  ((of_int(1) = true) and ((result = functions__non_ter_func__result2) and
  (functions__non_ter_func__result3 = of_int(1))))) or
  (((not (of_int(1) = true)) and
  ((functions__non_ter_func__result4 = functions__non_ter_func__result) and
  (functions__non_ter_func__result5 = functions__non_ter_func__result1))) and
  (((functions__non_ter_func__result9 = functions__non_ter_func__result7) and
  (functions__non_ter_func__result10 = functions__non_ter_func__result8)) and
  (((functions__non_ter_func__result6 = functions__non_ter_func__result7) and
  (functions__non_ter_func__result8 = functions__non_ter_func__result6)) and
  ((result1 = functions__non_ter_func__result4) and
  (functions__non_ter_func__result6 = of_int(0)))))))

axiom H1 :
  (functions__non_ter_func__result11 = functions__non_ter_func__result9)

axiom H2 :
  (functions__non_ter_func__result12 = functions__non_ter_func__result10)

axiom H3 : (result2 = functions__non_ter_func__result11)

axiom H4 : (functions__non_ter_func__result11 = true)

 (* File "functions.ads", line 3, characters 0-0 *)
goal WP_parameter_def : true
