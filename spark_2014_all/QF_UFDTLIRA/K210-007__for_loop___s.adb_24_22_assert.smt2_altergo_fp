(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

type t8b

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t8b, t8b -> bool

logic dummy1 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref___projection(a: t8b__ref) : t8b = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type t9b

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t9b, t9b -> bool

logic dummy2 : t9b

type t9b__ref = { t9b__content : t9b
}

function t9b__ref___projection(a: t9b__ref) : t9b = (a).t9b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic t : int

logic index : int

logic index1 : int

logic temp___163 : int

logic temp___162 : int

logic temp___167 : int

logic temp___166 : int

logic result : int

logic t1 : int

logic result1 : int

logic index2 : int

logic t2 : int

logic index3 : int

logic result2 : int

logic t3 : int

logic result3 : int

logic index4 : int

logic t4 : int

logic index5 : int

logic t5 : int

logic index6 : int

logic t6 : int

logic index7 : int

logic t7 : int

logic index8 : int

logic t8 : int

logic index9 : int

logic t9 : int

logic index10 : int

logic result4 : int

logic t10 : int

logic result5 : int

logic index11 : int

logic t11 : int

logic index12 : int

logic result6 : int

logic t12 : int

logic result7 : int

logic index13 : int

logic t13 : int

logic index14 : int

logic t14 : int

logic index15 : int

logic t15 : int

logic index16 : int

logic t16 : int

logic index17 : int

logic t17 : int

logic index18 : int

logic t18 : int

logic index19 : int

logic t19 : int

logic index20 : int

logic t20 : int

logic index21 : int

axiom H : (result = t)

axiom H1 : (t1 = 0)

axiom H2 : in_range1(t1)

axiom H3 : (result1 = index)

axiom H4 : (index2 = 1)

axiom H5 : (((1 <= index2) and (index2 <= 10)) -> (((temp___163 = index2) and
  ((temp___162 = t1) and ((t2 = (index3 - 1)) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(t2)) and ((1 <= 10) ->
  in_range2(index3))) and ((1 <= index3) and (index3 <= 10))) and
  (((t2 = result2) and (t3 = index3)) and (index3 = 10)))))) and
  (((index3 = index7) and (t3 = t6)) and ((index8 = index3) and (t7 = t3)))))

axiom H6 : (((1 <= index2) and (index2 <= 10)) -> (index9 = index7))

axiom H7 : (((1 <= index2) and (index2 <= 10)) -> (t8 = t6))

axiom H8 : (((1 <= index2) and (index2 <= 10)) -> (index10 = index8))

axiom H9 : (((1 <= index2) and (index2 <= 10)) -> (t9 = t7))

axiom H10 : ((not ((1 <= index2) and (index2 <= 10))) -> (index2 = index9))

axiom H11 : ((not ((1 <= index2) and (index2 <= 10))) -> (t1 = t8))

axiom H12 : ((not ((1 <= index2) and (index2 <= 10))) -> (index10 = index2))

axiom H13 : ((not ((1 <= index2) and (index2 <= 10))) -> (t9 = t1))

 (* File "s.adb", line 3, characters 0-0 *)
goal WP_parameter_def : (t8 = 10)
