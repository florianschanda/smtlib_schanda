(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort big_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (big_type big_type) Bool)
(declare-const dummy big_type)
(declare-datatypes () ((big_type__ref (mk_big_type__ref (big_type__content big_type)))))
(define-fun big_type__ref___projection ((a big_type__ref)) big_type (big_type__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 8)) (in_range1 temp___expr_158)))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const r Bool)
(declare-const enums__enum_lt_5_broken_a__result Bool)
(declare-const result Bool)
(declare-const r1 Bool)
(declare-const result1 Bool)
(declare-const r2 Bool)
(declare-const result2 Bool)
(declare-const r3 Bool)
(declare-const result3 Bool)
(declare-const r4 Bool)
(declare-const result4 Bool)
(declare-const r5 Bool)
(declare-const result5 Bool)
(declare-const r6 Bool)
(declare-const result6 Bool)
(declare-const enums__enum_lt_5_broken_a__result1 Bool)
(declare-const enums__enum_lt_5_broken_a__result2 Bool)
(declare-const enums__enum_lt_5_broken_a__result3 Bool)
(declare-const r7 Bool)
(declare-const enums__enum_lt_5_broken_a__result4 Bool)
(declare-const r8 Bool)
(declare-const enums__enum_lt_5_broken_a__result5 Bool)
(declare-const result7 Bool)
(assert (in_range1 a))
(assert (=> (= a 0) (= result r)))
(assert (=> (= a 0) (= r1 (distinct 1 0))))
(assert (=> (not (= a 0)) (=> (= a 2) (= result1 r))))
(assert (=> (not (= a 0)) (=> (= a 2) (= r2 (ite (= a 2) true false)))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (= a 3) (= result2 r)))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (= a 3) (= r3 (ite (not (= a 8)) true false))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (= a 4) (= result3 r))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (= a 4) (= r4 (ite (< a 6) true false)))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (not (= a 4)) (=> (= a 7) (= result4 r)))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (not (= a 4)) (=> (= a 7) (= r5 (distinct 1 0))))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (not (= a 4)) (=> (not (= a 7)) (= result5 r)))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (not (= a 4)) (=> (not (= a 7)) (= r6 (distinct 0 0))))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (not (= a 4)) (=> (not (= a 7)) (= r5 r6)))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (=> (not (= a 4)) (= r4 r5))))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (=> (not (= a 3)) (= r3 r4)))))
(assert (=> (not (= a 0)) (=> (not (= a 2)) (= r2 r3))))
(assert (=> (not (= a 0)) (= r1 r2)))
(assert (= enums__enum_lt_5_broken_a__result1 enums__enum_lt_5_broken_a__result2))
(assert (= enums__enum_lt_5_broken_a__result3 enums__enum_lt_5_broken_a__result1))
(assert (= result6 enums__enum_lt_5_broken_a__result))
(assert (= enums__enum_lt_5_broken_a__result1 r1))
(assert (= (mk_bool__ref enums__enum_lt_5_broken_a__result4) (mk_bool__ref enums__enum_lt_5_broken_a__result2)))
(assert (= r7 r1))
(assert (= enums__enum_lt_5_broken_a__result5 enums__enum_lt_5_broken_a__result3))
(assert (= r8 r1))
(assert (= result7 enums__enum_lt_5_broken_a__result4))
(assert (= enums__enum_lt_5_broken_a__result4 true))
(assert (not (< a 5)))
(check-sat)
(exit)
