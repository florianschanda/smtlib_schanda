(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-const roll_active Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const hdg_active Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const nav_active Bool)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const lappr_active Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const lga_active Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const hdg_active_out1 Bool)
(declare-const lappr_active_out1 Bool)
(declare-const lga_active_out1 Bool)
(declare-const nav_active_out1 Bool)
(declare-const roll_active_out1 Bool)
(declare-const nor_lga_out1 Bool)
(declare-const not1_out1 Bool)
(declare-const not5_out1 Bool)
(declare-const nor_lappr_out1 Bool)
(declare-const not1_out1_1 Bool)
(declare-const not5_out1_1 Bool)
(declare-const nor_nav_out1 Bool)
(declare-const not1_out1_2 Bool)
(declare-const not5_out1_2 Bool)
(declare-const nor_hdg_out1 Bool)
(declare-const not1_out1_3 Bool)
(declare-const not5_out1_3 Bool)
(declare-const nor_roll_out1 Bool)
(declare-const not1_out1_4 Bool)
(declare-const not5_out1_4 Bool)
(declare-const and_out1 Bool)
(declare-const result bool__ref)
(declare-const hdg_active_out11 Bool)
(declare-const result1 bool__ref)
(declare-const lappr_active_out11 Bool)
(declare-const result2 bool__ref)
(declare-const lga_active_out11 Bool)
(declare-const result3 bool__ref)
(declare-const nav_active_out11 Bool)
(declare-const result4 bool__ref)
(declare-const roll_active_out11 Bool)
(declare-const result5 bool__ref)
(declare-const nor_lga_out11 Bool)
(declare-const result6 bool__ref)
(declare-const not1_out11 Bool)
(declare-const result7 bool__ref)
(declare-const not5_out11 Bool)
(declare-const result8 bool__ref)
(declare-const nor_lappr_out11 Bool)
(declare-const result9 bool__ref)
(declare-const not1_out1_11 Bool)
(declare-const result10 bool__ref)
(declare-const not5_out1_11 Bool)
(declare-const result11 bool__ref)
(declare-const nor_nav_out11 Bool)
(declare-const result12 bool__ref)
(declare-const not1_out1_21 Bool)
(declare-const result13 bool__ref)
(declare-const not5_out1_21 Bool)
(declare-const result14 bool__ref)
(declare-const nor_hdg_out11 Bool)
(declare-const result15 bool__ref)
(declare-const not1_out1_31 Bool)
(declare-const result16 bool__ref)
(declare-const not5_out1_31 Bool)
(declare-const result17 bool__ref)
(declare-const nor_roll_out11 Bool)
(declare-const result18 bool__ref)
(declare-const not1_out1_41 Bool)
(declare-const result19 bool__ref)
(declare-const not5_out1_41 Bool)
(declare-const result20 bool__ref)
(declare-const and_out11 Bool)
(assert (= result (mk_bool__ref hdg_active_out1)))
(assert (= hdg_active_out11 hdg_active))
(assert (= result1 (mk_bool__ref lappr_active_out1)))
(assert (= lappr_active_out11 lappr_active))
(assert (= result2 (mk_bool__ref lga_active_out1)))
(assert (= lga_active_out11 lga_active))
(assert (= result3 (mk_bool__ref nav_active_out1)))
(assert (= nav_active_out11 nav_active))
(assert (= result4 (mk_bool__ref roll_active_out1)))
(assert (= roll_active_out11 roll_active))
(assert (= result5 (mk_bool__ref nor_lga_out1)))
(assert (= nor_lga_out11 (ite (not (or (or (or (= roll_active_out11 true) (= hdg_active_out11 true)) (= nav_active_out11 true)) (= lappr_active_out11 true))) true false)))
(assert (= result6 (mk_bool__ref not1_out1)))
(assert (= not1_out11 (ite (not (= lga_active_out11 true)) true false)))
(assert (= result7 (mk_bool__ref not5_out1)))
(assert (= not5_out11 (ite (or (= not1_out11 true) (= nor_lga_out11 true)) true false)))
(assert (= result8 (mk_bool__ref nor_lappr_out1)))
(assert (= nor_lappr_out11 (ite (not (or (or (or (= roll_active_out11 true) (= hdg_active_out11 true)) (= nav_active_out11 true)) (= lga_active_out11 true))) true false)))
(assert (= result9 (mk_bool__ref not1_out1_1)))
(assert (= not1_out1_11 (ite (not (= lappr_active_out11 true)) true false)))
(assert (= result10 (mk_bool__ref not5_out1_1)))
(assert (= not5_out1_11 (ite (or (= not1_out1_11 true) (= nor_lappr_out11 true)) true false)))
(assert (= result11 (mk_bool__ref nor_nav_out1)))
(assert (= nor_nav_out11 (ite (not (or (or (or (= roll_active_out11 true) (= hdg_active_out11 true)) (= lappr_active_out11 true)) (= lga_active_out11 true))) true false)))
(assert (= result12 (mk_bool__ref not1_out1_2)))
(assert (= not1_out1_21 (ite (not (= nav_active_out11 true)) true false)))
(assert (= result13 (mk_bool__ref not5_out1_2)))
(assert (= not5_out1_21 (ite (or (= not1_out1_21 true) (= nor_nav_out11 true)) true false)))
(assert (= result14 (mk_bool__ref nor_hdg_out1)))
(assert (= nor_hdg_out11 (ite (not (or (or (or (= roll_active_out11 true) (= nav_active_out11 true)) (= lappr_active_out11 true)) (= lga_active_out11 true))) true false)))
(assert (= result15 (mk_bool__ref not1_out1_3)))
(assert (= not1_out1_31 (ite (not (= hdg_active_out11 true)) true false)))
(assert (= result16 (mk_bool__ref not5_out1_3)))
(assert (= not5_out1_31 (ite (or (= not1_out1_31 true) (= nor_hdg_out11 true)) true false)))
(assert (= result17 (mk_bool__ref nor_roll_out1)))
(assert (= nor_roll_out11 (ite (not (or (or (or (= hdg_active_out11 true) (= nav_active_out11 true)) (= lappr_active_out11 true)) (= lga_active_out11 true))) true false)))
(assert (= result18 (mk_bool__ref not1_out1_4)))
(assert (= not1_out1_41 (ite (not (= roll_active_out11 true)) true false)))
(assert (= result19 (mk_bool__ref not5_out1_4)))
(assert (= not5_out1_41 (ite (or (= not1_out1_41 true) (= nor_roll_out11 true)) true false)))
(assert (= result20 (mk_bool__ref and_out1)))
(assert (= and_out11 (ite (and (and (and (and (= not5_out1_41 true) (= not5_out1_31 true)) (= not5_out1_21 true)) (= not5_out1_11 true)) (= not5_out11 true)) true false)))
(assert (not (= and_out11 true)))
(check-sat)
(exit)
