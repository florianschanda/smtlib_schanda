(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort big_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (big_type big_type) Bool)
(declare-const dummy1 big_type)
(declare-datatypes () ((big_type__ref (mk_big_type__ref (big_type__content big_type)))))
(define-fun big_type__ref___projection ((a big_type__ref)) big_type (big_type__content a))
(declare-sort smaller_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 3 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (smaller_type smaller_type) Bool)
(declare-const dummy2 smaller_type)
(declare-datatypes () ((smaller_type__ref (mk_smaller_type__ref (smaller_type__content smaller_type)))))
(define-fun smaller_type__ref___projection ((a smaller_type__ref)) smaller_type (smaller_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 3 5)) (in_range3 temp___expr_165)))
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 8)) (in_range2 temp___expr_158)))
(declare-const result__ Int)
(declare-const success Bool)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Bool)
(declare-const success1 Bool)
(declare-const result1 Int)
(declare-const result__1 Int)
(declare-const result2 Bool)
(declare-const success2 Bool)
(declare-const result3 Int)
(declare-const result__2 Int)
(declare-const result__3 Int)
(declare-const success3 Bool)
(declare-const result__4 Int)
(declare-const success4 Bool)
(define-fun success5 () bool__ref (mk_bool__ref success))
(define-fun result__5 () int__ref (mk_int__ref result__))
(assert (in_range1 i))
(assert (=> (<= 3 5) (in_range3 result__)))
(assert (=> (and (<= 3 i) (<= i 5)) (= (mk_bool__ref result) success5)))
(assert (=> (and (<= 3 i) (<= i 5)) (= success1 (distinct 1 0))))
(assert (=> (and (<= 3 i) (<= i 5)) (and (= o i) (in_range2 i))))
(assert (=> (and (<= 3 i) (<= i 5)) (and (= o1 o) (in_range3 o))))
(assert (=> (and (<= 3 i) (<= i 5)) (= (mk_int__ref result1) result__5)))
(assert (=> (and (<= 3 i) (<= i 5)) (= result__1 o1)))
(assert (=> (not (and (<= 3 i) (<= i 5))) (= (mk_bool__ref result2) success5)))
(assert (=> (not (and (<= 3 i) (<= i 5))) (= success2 (distinct 0 0))))
(assert (=> (not (and (<= 3 i) (<= i 5))) (= (mk_int__ref result3) result__5)))
(assert (=> (not (and (<= 3 i) (<= i 5))) (= result__2 3)))
(assert (=> (not (and (<= 3 i) (<= i 5))) (= success1 success2)))
(assert (=> (not (and (<= 3 i) (<= i 5))) (= result__1 result__2)))
(assert (= success1 success3))
(assert (= result__1 result__3))
(assert (= success4 success1))
(assert (= result__4 result__1))
(assert (= success3 true))
(assert (not (in_range2 i)))
(check-sat)
(exit)
