(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const region_checks__in_unit_square__result Int)
(declare-const result Int)
(declare-const region_checks__in_unit_square__result1 Int)
(declare-const result1 Int)
(declare-const region_checks__in_unit_square__result2 Int)
(declare-const result2 Int)
(declare-const region_checks__in_unit_square__result3 Int)
(declare-const result3 Int)
(declare-const region_checks__in_unit_square__result4 Int)
(declare-const result4 Int)
(declare-const region_checks__in_unit_square__result5 Int)
(declare-const region_checks__in_unit_square__result6 Int)
(declare-const region_checks__in_unit_square__result7 Int)
(declare-const region_checks__in_unit_square__result8 Int)
(declare-const region_checks__in_unit_square__result9 Int)
(declare-const region_checks__in_unit_square__result10 Int)
(declare-const region_checks__in_unit_square__result11 Int)
(declare-const region_checks__in_unit_square__result12 Int)
(declare-const region_checks__in_unit_square__result13 Int)
(declare-const region_checks__in_unit_square__result14 Int)
(declare-const region_checks__in_unit_square__result15 Int)
(declare-const region_checks__in_unit_square__result16 Int)
(declare-const region_checks__in_unit_square__result17 Int)
(assert (in_range1 x))
(assert (in_range1 y))
(assert (and (and (= (mk_int__ref region_checks__in_unit_square__result14) (mk_int__ref region_checks__in_unit_square__result12)) (= region_checks__in_unit_square__result15 region_checks__in_unit_square__result13)) (ite (and (<= (- 1) x) (and (<= x 1) (and (<= (- 1) y) (<= y 1)))) (and (and (= region_checks__in_unit_square__result1 region_checks__in_unit_square__result12) (= region_checks__in_unit_square__result13 region_checks__in_unit_square__result1)) (and (= result region_checks__in_unit_square__result) (= region_checks__in_unit_square__result1 1))) (and (and (= (mk_int__ref region_checks__in_unit_square__result12) (mk_int__ref region_checks__in_unit_square__result10)) (= region_checks__in_unit_square__result13 region_checks__in_unit_square__result11)) (ite (and (<= 0 x) (<= 0 y)) (and (and (= region_checks__in_unit_square__result2 region_checks__in_unit_square__result10) (= region_checks__in_unit_square__result11 region_checks__in_unit_square__result2)) (and (= result1 region_checks__in_unit_square__result) (= region_checks__in_unit_square__result2 0))) (and (and (= (mk_int__ref region_checks__in_unit_square__result10) (mk_int__ref region_checks__in_unit_square__result8)) (= region_checks__in_unit_square__result11 region_checks__in_unit_square__result9)) (ite (and (< x 0) (<= 0 y)) (and (and (= region_checks__in_unit_square__result3 region_checks__in_unit_square__result8) (= region_checks__in_unit_square__result9 region_checks__in_unit_square__result3)) (and (= result2 region_checks__in_unit_square__result) (= region_checks__in_unit_square__result3 (- 1)))) (and (and (= (mk_int__ref region_checks__in_unit_square__result8) (mk_int__ref region_checks__in_unit_square__result6)) (= region_checks__in_unit_square__result9 region_checks__in_unit_square__result7)) (ite (and (< x 0) (< y 0)) (and (and (= region_checks__in_unit_square__result4 region_checks__in_unit_square__result6) (= region_checks__in_unit_square__result7 region_checks__in_unit_square__result4)) (and (= result3 region_checks__in_unit_square__result) (= region_checks__in_unit_square__result4 0))) (and (and (= region_checks__in_unit_square__result5 region_checks__in_unit_square__result6) (= region_checks__in_unit_square__result7 region_checks__in_unit_square__result5)) (and (= result4 region_checks__in_unit_square__result) (= region_checks__in_unit_square__result5 (- 1)))))))))))))
(assert (= (mk_int__ref region_checks__in_unit_square__result16) (mk_int__ref region_checks__in_unit_square__result14)))
(assert (= region_checks__in_unit_square__result17 region_checks__in_unit_square__result15))
(assert (=> (ite (= (ite (= (>= x 0) true) (>= y 0) false) true) (ite (= (ite (= (<= x 1) true) (<= y 1) false) false) true false) false) (= region_checks__in_unit_square__result16 0)))
(assert (ite (= (ite (= (< x 0) true) (>= y 0) false) true) (ite (= (ite (= (>= x (- 1)) true) (<= y 1) false) false) true false) true))
(assert (ite (= (ite (= (< x 0) true) (>= y 0) false) true) true false))
(assert (not (= region_checks__in_unit_square__result16 (- 1))))
(check-sat)
(exit)
