(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type s1

predicate in_range1(x1: int) = ((1 <= x1) and (x1 <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x1:int. forall y1:int [bool_eq2(x1, y1)]. (((x1 = y1) ->
  (bool_eq2(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq2(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : s1, s1 -> bool

logic dummy1 : s1

type s1__ref = { s1__content : s1
}

function s1__ref___projection(a: s1__ref) : s1 = (a).s1__content

logic attr__ATTRIBUTE_ADDRESS2 : int

type s2

predicate in_range2(x1: int) = ((1 <= x1) and (x1 <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x1:int. forall y1:int [bool_eq3(x1, y1)]. (((x1 = y1) ->
  (bool_eq3(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq3(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : s2, s2 -> bool

logic dummy2 : s2

type s2__ref = { s2__content : s2
}

function s2__ref___projection(a: s2__ref) : s2 = (a).s2__content

logic attr__ATTRIBUTE_ADDRESS3 : int

type ttmp3S

predicate in_range3(x1: int) = ((1 <= x1) and (x1 <= 5))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x1:int. forall y1:int [bool_eq4(x1, y1)]. (((x1 = y1) ->
  (bool_eq4(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq4(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : ttmp3S, ttmp3S -> bool

logic dummy3 : ttmp3S

type ttmp3S__ref = { ttmp3S__content : ttmp3S
}

function ttmp3S__ref___projection(a: ttmp3S__ref) : ttmp3S =
  (a).ttmp3S__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type ttmp4S

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 5))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x1:int. forall y1:int [bool_eq5(x1, y1)]. (((x1 = y1) ->
  (bool_eq5(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq5(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : ttmp4S, ttmp4S -> bool

logic dummy4 : ttmp4S

type ttmp4S__ref = { ttmp4S__content : ttmp4S
}

function ttmp4S__ref___projection(a: ttmp4S__ref) : ttmp4S =
  (a).ttmp4S__content

logic attr__ATTRIBUTE_ADDRESS5 : int

type ttmp5S

predicate in_range5(x1: int) = ((1 <= x1) and (x1 <= 5))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x1:int. forall y1:int [bool_eq6(x1, y1)]. (((x1 = y1) ->
  (bool_eq6(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq6(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : ttmp5S, ttmp5S -> bool

logic dummy5 : ttmp5S

type ttmp5S__ref = { ttmp5S__content : ttmp5S
}

function ttmp5S__ref___projection(a: ttmp5S__ref) : ttmp5S =
  (a).ttmp5S__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic tmp1 : int

logic tmp2 : int

logic tmp3 : int

logic tmp4 : int

logic tmp5 : int

logic o : int

logic o1 : int

logic result : int

logic tmp11 : int

axiom H : in_range(x)

axiom H1 : in_range(y)

axiom H2 : ((1 <= 10) -> in_range1(tmp1))

axiom H3 : ((1 <= 10) -> in_range2(tmp2))

axiom H4 : ((1 <= 5) -> in_range3(tmp3))

axiom H5 : ((1 <= 5) -> in_range4(tmp4))

axiom H6 : ((1 <= 5) -> in_range5(tmp5))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1(x)
