(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

type t1b

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : t1b, t1b -> bool

logic dummy : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a: t1b__ref) : t1b = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type t2b

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t2b, t2b -> bool

logic dummy1 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref___projection(a: t2b__ref) : t2b = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

type t3b

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t3b, t3b -> bool

logic dummy2 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref___projection(a: t3b__ref) : t3b = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

type t4b

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : t4b, t4b -> bool

logic dummy3 : t4b

type t4b__ref = { t4b__content : t4b
}

function t4b__ref___projection(a: t4b__ref) : t4b = (a).t4b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type t5b

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : t5b, t5b -> bool

logic dummy4 : t5b

type t5b__ref = { t5b__content : t5b
}

function t5b__ref___projection(a: t5b__ref) : t5b = (a).t5b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

type t6b

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : t6b, t6b -> bool

logic dummy5 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref___projection(a: t6b__ref) : t6b = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

type t7b

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : t7b, t7b -> bool

logic dummy6 : t7b

type t7b__ref = { t7b__content : t7b
}

function t7b__ref___projection(a: t7b__ref) : t7b = (a).t7b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

type t8b

predicate in_range8(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : t8b, t8b -> bool

logic dummy7 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref___projection(a: t8b__ref) : t8b = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

 (* File "simple_loops.adb", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall prop__:bool. forall i:int. forall j:int. forall i1:int.
  forall j1:int. forall temp___173:int. forall temp___172:bool.
  forall temp___169:int. forall temp___168:bool. forall prop__1:bool.
  forall j2:int. forall result:int. forall i2:int. forall result1:bool.
  forall prop__2:bool. forall result2:int. forall j3:int.
  forall prop__3:bool. forall j4:int. forall result3:bool.
  forall prop__4:bool. forall prop__5:bool. forall j5:int.
  forall prop__6:bool. forall j6:int. forall prop__7:bool. forall j7:int.
  forall prop__8:bool. forall j8:int. forall prop__9:bool. forall i3:int.
  forall j9:int. forall prop__10:bool. forall i4:int. forall j10:int.
  forall prop__11:bool. forall i5:int. forall j11:int. forall prop__12:bool.
  forall i6:int. forall j12:int. forall prop__13:bool. forall i7:int.
  forall j13:int. forall result4:int. forall i8:int. forall result5:bool.
  forall prop__14:bool. forall result6:int. forall j14:int.
  forall prop__15:bool. forall j15:int. forall result7:bool.
  forall prop__16:bool. forall result8:int. forall j16:int.
  forall prop__17:bool. forall j17:int__ref. forall prop__18:bool.
  forall j18:int. (((({ int__content = result } = { int__content = i }) and
  (i2 = 1)) and ((((1 <= i2) and (i2 <= 3)) and ((((temp___173 = i2) and
  ((temp___172 = prop__) and ((({ bool__content = result1 } = {
  bool__content = prop__ }) and (prop__2 = of_int(0))) and (((({
  int__content = result2 } = { int__content = j }) and (j3 = 1)) and
  ((((1 <= j3) and (j3 <= 10)) and ((((temp___169 = j3) and
  ((temp___168 = prop__2) and ((prop__3 = true) and ((((1 <= 10) ->
  in_range2(j4)) and ((1 <= j4) and (j4 <= 10))) and
  (((prop__3 = result3) and (prop__4 = of_int(1))) and (j4 = 10)))))) and
  (((j4 = j5) and (prop__4 = prop__5)) and ((j6 = j4) and
  (prop__6 = prop__4)))) and ((({ int__content = j7 } = { int__content = j5
  }) and ({ bool__content = prop__7 } = { bool__content = prop__5 })) and
  ((j8 = j6) and (prop__8 = prop__6))))) or ((not ((1 <= j3) and
  (j3 <= 10))) and (((j3 = j7) and (prop__2 = prop__7)) and ((j8 = j3) and
  (prop__8 = prop__2)))))) and ((((1 <= 3) -> in_range1(i3)) and
  ((1 <= i3) and (i3 <= 3))) and (i3 = 3)))))) and (((j9 = j10) and
  ((i3 = i4) and (prop__9 = prop__10))) and ((j11 = j9) and ((i5 = i3) and
  (prop__11 = prop__9))))) and ((({ int__content = j12 } = { int__content =
  j10 }) and (({ int__content = i6 } = { int__content = i4 }) and ({
  bool__content = prop__12 } = { bool__content = prop__10 }))) and
  ((j13 = j11) and ((i7 = i5) and (prop__13 = prop__11)))))) or
  ((not ((1 <= i2) and (i2 <= 3))) and ((({ int__content = j12 } = {
  int__content = j }) and ((i2 = i6) and ({ bool__content = prop__12 } = {
  bool__content = prop__ }))) and ((j13 = j2) and ((i7 = i2) and
  (prop__13 = prop__1))))))) -> (((result4 = i1) and (i8 = 1)) ->
  (((1 <= i8) and (i8 <= 3)) -> (((result5 = prop__12) and
  (prop__14 = of_int(1))) -> (((result6 = j1) and (j14 = 1)) ->
  (((1 <= j14) and (j14 <= 10)) -> ((prop__15 = true) -> ((((((1 <= 10) ->
  in_range4(j15)) and ((1 <= j15) and (j15 <= 10))) and
  (((result7 = prop__15) and (prop__16 = of_int(0))) and
  ((not (j15 = 10)) and ((result8 = j15) and (j16 = (j15 + 1)))))) and
  (((j17 = { int__content = j16 }) and (prop__16 = prop__17)) and
  ((j18 = j16) and (prop__18 = prop__16)))) -> (prop__17 = true))))))))))
