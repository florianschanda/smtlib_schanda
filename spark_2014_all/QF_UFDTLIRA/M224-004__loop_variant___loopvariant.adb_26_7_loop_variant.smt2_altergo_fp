(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "loopvariant.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall i:int. forall j:int. forall temp___197:int. forall temp___196:int.
  forall temp___199:int. forall temp___198:int. forall o:int. forall o1:int.
  forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall result:int. forall i1:int. forall result1:int. forall j1:int.
  forall result2:int. forall j2:int. forall result3:int. forall j3:int.
  forall result4:int. forall i2:int. forall i3:int. forall j4:int.
  forall temp___1991:int. forall temp___1981:int. forall result5:int.
  forall temp___1992:int. forall result6:int. forall temp___1982:int.
  forall i4:int. forall j5:int. forall i5:int. forall j6:int. forall i6:int.
  forall j7:int. forall i7:int. forall j8:int. forall result7:int.
  forall i8:int. forall result8:int. forall j9:int. forall result9:int.
  forall j10:int. forall result10:int. forall j11:int. forall result11:int.
  forall i9:int. forall i10:int. forall j12:int. forall i11:int.
  forall j13:int. forall i12:int. forall j14:int. forall temp___203:int.
  forall temp___202:int. forall result12:int. forall temp___2031:int.
  forall result13:int. forall temp___2021:int. forall result14:int.
  forall j15:int. forall result15:int. forall j16:int. forall result16:int.
  forall i13:int. forall i14:int. forall j17:int. forall i15:int.
  forall j18:int. ((((- 2147483648) <= 2147483647) -> in_range1(i)) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(j)) -> (((result = i) and
  (i1 = 1)) -> (((result1 = j) and (j1 = 3)) -> ((((i1 <  3) and
  ((((temp___197 = j1) and ((temp___196 = i1) and ((0 = temp___199) and
  ((0 = temp___198) and ((((0 <  j1) and ((((o = (j1 - 1)) and
  in_range1((j1 - 1))) and ((j1 = result2) and (j2 = o))) and (i2 = i1))) or
  ((not (0 <  j1)) and ((((j1 = result3) and (j3 = 3)) and
  (((o1 = (i1 + 1)) and in_range1((i1 + 1))) and ((i1 = result4) and
  (i2 = o1)))) and (j2 = j3)))) and (((((- 2147483648) <= 2147483647) ->
  in_range1(i3)) and (((- 2147483648) <= 2147483647) -> in_range1(j4))) and
  (((temp___1991 = result5) and (temp___1992 = i3)) and
  (((temp___1981 = result6) and (temp___1982 = j4)) and
  (not (i3 <  3)))))))))) and (((j4 = j5) and (i3 = i4)) and ((j6 = j4) and
  (i5 = i3)))) and (((j5 = j7) and (i4 = i6)) and ((j8 = j6) and
  (i7 = i5))))) or ((not (i1 <  3)) and (((j1 = j7) and (i1 = i6)) and
  ((j8 = j1) and (i7 = i1))))) -> (((result7 = i6) and (i8 = 1)) ->
  (((result8 = j7) and (j9 = 3)) -> ((i8 <  3) -> ((((0 <  j9) and
  ((((o2 = (j9 - 1)) and in_range1((j9 - 1))) and ((result9 = j9) and
  (j10 = o2))) and (((j10 = j12) and (i8 = i10)) and ((j13 = j10) and
  (i11 = i8))))) or ((not (0 <  j9)) and ((((result10 = j9) and
  (j11 = 3)) and (((o3 = (i8 - 1)) and in_range1((i8 - 1))) and
  ((result11 = i8) and (i9 = o3)))) and (((j11 = j12) and (i9 = i10)) and
  ((j13 = j11) and (i11 = i9)))))) -> (((((- 2147483648) <= 2147483647) ->
  in_range1(i12)) and (((- 2147483648) <= 2147483647) -> in_range1(j14))) ->
  (((result12 = temp___203) and (temp___2031 = i12)) ->
  (((result13 = temp___202) and (temp___2021 = j14)) -> (((0 <= i12) and
  (i12 <= 3)) -> ((i12 <  3) -> ((((0 <  j14) and ((((o4 = (j14 - 1)) and
  in_range1((j14 - 1))) and ((result14 = j14) and (j15 = o4))) and
  (((j15 = j17) and (i12 = i14)) and ((j18 = j15) and (i15 = i12))))) or
  ((not (0 <  j14)) and ((((result15 = j14) and (j16 = 3)) and
  (((o5 = (i12 - 1)) and in_range1((i12 - 1))) and ((result16 = i12) and
  (i13 = o5)))) and (((j16 = j17) and (i13 = i14)) and ((j18 = j16) and
  (i15 = i13)))))) -> ((temp___2031 <  i14) or ((i14 = temp___2031) and
  (j17 <  temp___2021)))))))))))))))))))
