(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x Int)
(declare-const i Int)
(declare-const j Int)
(declare-const temp___142 Int)
(declare-const temp___1421 Int)
(declare-const temp___1422 Int)
(declare-const temp___1423 Int)
(declare-const temp___1424 Int)
(declare-const temp___1425 Int)
(declare-const temp___1426 Int)
(declare-const temp___1427 Int)
(declare-const temp___1428 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Int)
(declare-const x1 Int)
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const j2 Int)
(declare-const result3 Int)
(declare-const j3 Int)
(declare-const j4 Int)
(declare-const j5 Int)
(declare-const j6 Int)
(declare-const j7 Int)
(declare-const j8 Int)
(declare-const j9 Int)
(declare-const result4 Int)
(declare-const i2 Int)
(declare-const result5 Int)
(declare-const x2 Int)
(declare-const result6 Int)
(declare-const j10 Int)
(declare-const j11 Int)
(declare-const result7 Int)
(declare-const j12 Int)
(declare-const j13 Int)
(declare-const j14 Int)
(declare-const j15 Int)
(declare-const j16 Int)
(declare-const j17 Int)
(declare-const j18 Int)
(declare-const j19 Int)
(declare-const j20 Int)
(declare-const result8 Int)
(declare-const i3 Int)
(declare-const result9 Int)
(declare-const x3 Int)
(declare-const result10 Int)
(declare-const j21 Int)
(declare-const j22 Int)
(declare-const result11 int__ref)
(declare-const j23 Int)
(declare-const j24 int__ref)
(declare-const j25 Int)
(declare-const j26 int__ref)
(declare-const j27 Int)
(declare-const j28 int__ref)
(declare-const j29 Int)
(declare-const j30 int__ref)
(declare-const j31 Int)
(declare-const result12 int__ref)
(declare-const i4 Int)
(declare-const result13 int__ref)
(declare-const x4 Int)
(declare-const result14 int__ref)
(declare-const j32 Int)
(declare-const j33 Int)
(declare-const result15 int__ref)
(declare-const j34 Int)
(declare-const j35 int__ref)
(declare-const j36 Int)
(declare-const j37 int__ref)
(declare-const j38 Int)
(declare-const j39 int__ref)
(declare-const j40 Int)
(declare-const j41 int__ref)
(declare-const j42 Int)
(declare-const result16 int__ref)
(declare-const i5 Int)
(declare-const result17 int__ref)
(declare-const x5 Int)
(declare-const result18 int__ref)
(declare-const j43 Int)
(declare-const j44 Int)
(declare-const result19 int__ref)
(declare-const j45 Int)
(declare-const j46 int__ref)
(declare-const j47 Int)
(declare-const j48 int__ref)
(declare-const j49 Int)
(declare-const j50 int__ref)
(declare-const j51 Int)
(declare-const j52 int__ref)
(declare-const j53 Int)
(declare-const result20 int__ref)
(declare-const i6 Int)
(declare-const result21 int__ref)
(declare-const x6 Int)
(declare-const result22 int__ref)
(declare-const j54 Int)
(declare-const j55 Int)
(declare-const result23 int__ref)
(declare-const j56 Int)
(declare-const j57 int__ref)
(declare-const j58 Int)
(declare-const j59 int__ref)
(declare-const j60 Int)
(declare-const j61 int__ref)
(declare-const j62 Int)
(declare-const j63 int__ref)
(declare-const j64 Int)
(declare-const result24 int__ref)
(declare-const i7 Int)
(declare-const result25 int__ref)
(declare-const x7 Int)
(declare-const result26 int__ref)
(declare-const j65 Int)
(declare-const j66 Int)
(declare-const result27 int__ref)
(declare-const j67 Int)
(declare-const j68 int__ref)
(declare-const j69 Int)
(declare-const j70 int__ref)
(declare-const j71 Int)
(declare-const j72 int__ref)
(declare-const j73 Int)
(declare-const j74 int__ref)
(declare-const j75 Int)
(declare-const result28 int__ref)
(declare-const i8 Int)
(declare-const result29 int__ref)
(declare-const x8 Int)
(declare-const result30 int__ref)
(declare-const j76 Int)
(declare-const j77 Int)
(declare-const result31 int__ref)
(declare-const j78 Int)
(declare-const j79 int__ref)
(declare-const j80 Int)
(declare-const j81 int__ref)
(declare-const j82 Int)
(declare-const j83 int__ref)
(declare-const j84 Int)
(declare-const j85 int__ref)
(declare-const j86 Int)
(declare-const result32 int__ref)
(declare-const i9 Int)
(declare-const result33 int__ref)
(declare-const x9 Int)
(declare-const result34 int__ref)
(declare-const j87 Int)
(declare-const j88 Int)
(declare-const result35 int__ref)
(declare-const j89 Int)
(declare-const j90 int__ref)
(declare-const j91 Int)
(declare-const j92 int__ref)
(declare-const j93 Int)
(declare-const j94 int__ref)
(declare-const j95 Int)
(declare-const j96 int__ref)
(declare-const j97 Int)
(declare-const result36 int__ref)
(declare-const i10 Int)
(declare-const result37 int__ref)
(declare-const x10 Int)
(declare-const result38 int__ref)
(declare-const j98 Int)
(declare-const j99 Int)
(declare-const result39 int__ref)
(declare-const j100 Int)
(declare-const j101 int__ref)
(declare-const j102 Int)
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 x)))
(assert (= result i))
(assert (= i1 1))
(assert (= result1 x))
(assert (= x1 0))
(assert (= (mk_int__ref result2) (mk_int__ref j)))
(assert (= j1 (- 2147483648)))
(assert (<= (- 2147483648) j1))
(assert (<= j1 2147483647))
(assert (= x1 x))
(assert (and (=> (<= (- 2147483648) 2147483647) (in_range1 j2)) (and (<= (- 2147483648) j2) (<= j2 2147483647))))
(assert (not (= j2 2147483647)))
(assert (= result3 j2))
(assert (= j3 (+ j2 1)))
(assert (not (= x1 x)))
(check-sat)
(exit)
