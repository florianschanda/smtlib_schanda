(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-const max Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const step Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const res Int)
(declare-const count__count__result Int)
(declare-const o Int)
(declare-const temp___132 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const result Int)
(declare-const res1 Int)
(declare-const res2 Int)
(declare-const result1 Int)
(declare-const res3 Int)
(declare-const res4 Int)
(declare-const res5 Int)
(declare-const res6 Int)
(declare-const res7 Int)
(declare-const res8 Int)
(declare-const res9 Int)
(declare-const result2 Int)
(declare-const count__count__result1 Int)
(declare-const count__count__result2 Int)
(declare-const count__count__result3 Int)
(declare-const res10 Int)
(declare-const count__count__result4 Int)
(declare-const res11 Int)
(declare-const count__count__result5 Int)
(declare-const result3 Int)
(assert (in_range max))
(assert (in_range1 step))
(assert (and (< 0 step) (and (<= 0 max) (< max (- 2147483647 step)))))
(assert (= (mk_int__ref result) (mk_int__ref res)))
(assert (= res1 0))
(assert (in_range1 res1))
(assert (and (and (= temp___132 res1) (and (<= res2 max) (and (=> (<= 0 2147483647) (in_range1 res2)) (and (and (and (= o1 (+ res2 step)) (in_range (+ res2 step))) (and (= res2 result1) (= res3 o1))) (< max res3))))) (and (= res3 res6) (= res7 res3))))
(assert (= (mk_int__ref res8) (mk_int__ref res6)))
(assert (= res9 res7))
(assert (= count__count__result1 count__count__result2))
(assert (= count__count__result3 count__count__result1))
(assert (= (mk_int__ref result2) (mk_int__ref count__count__result)))
(assert (= count__count__result1 res8))
(assert (= (mk_int__ref count__count__result4) (mk_int__ref count__count__result2)))
(assert (= (mk_int__ref res10) (mk_int__ref res8)))
(assert (= count__count__result5 count__count__result3))
(assert (= res11 res9))
(assert (= result3 count__count__result4))
(assert (not (< max count__count__result4)))
(check-sat)
(exit)
