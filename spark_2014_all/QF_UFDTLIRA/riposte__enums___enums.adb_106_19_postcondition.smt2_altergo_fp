(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type big_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : big_type, big_type -> bool

logic dummy1 : big_type

type big_type__ref = { big_type__content : big_type
}

function big_type__ref___projection(a: big_type__ref) : big_type =
  (a).big_type__content

type smaller_type

predicate in_range2(x: int) = ((3 <= x) and (x <= 5))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : smaller_type, smaller_type -> bool

logic dummy2 : smaller_type

type smaller_type__ref = { smaller_type__content : smaller_type
}

function smaller_type__ref___projection(a: smaller_type__ref) : smaller_type =
  (a).smaller_type__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall r:int. forall enums__tick_pos__result:int. forall result:int.
  forall r1:int. forall result1:int. forall r2:int. forall result2:int.
  forall r3:int. forall result3:int. forall r4:int. forall result4:int.
  forall r5:int. forall result5:int. forall r6:int. forall result6:int.
  forall r7:int. forall result7:int. forall r8:int. forall result8:int.
  forall r9:int. forall result9:int. forall r10:int. forall result10:int.
  forall r11:int. forall result11:int. forall enums__tick_pos__result1:int.
  forall enums__tick_pos__result2:int. forall enums__tick_pos__result3:int.
  forall r12:int. forall enums__tick_pos__result4:int. forall r13:int.
  forall enums__tick_pos__result5:int.
  (forall result12:int. ((in_range1(a) and
  ((((((-2147483648) <= 2147483647) -> in_range(r)) and ((((a = 0) and (({
  int__content = result } = { int__content = r }) and (r1 = 0))) or
  ((not (a = 0)) and ((((a = 1) and (({ int__content = result1 } = {
  int__content = r }) and (r2 = a))) or ((not (a = 1)) and ((((a = 2) and (({
  int__content = result2 } = { int__content = r }) and (r3 = 2))) or
  ((not (a = 2)) and ((((a = 3) and (({ int__content = result3 } = {
  int__content = r }) and (r4 = 3))) or ((not (a = 3)) and ((((a = 4) and
  ((in_range2(a) and (({ int__content = result4 } = { int__content = r }) and
  (r5 = 4))) or ((not in_range2(a)) and ((({ int__content = result5 } = {
  int__content = r }) and (r6 = 0)) and (r5 = r6))))) or ((not (a = 4)) and
  ((((a = 5) and (({ int__content = result6 } = { int__content = r }) and
  (r7 = 5))) or ((not (a = 5)) and ((((a = 6) and ((in_range2(a) and (({
  int__content = result7 } = { int__content = r }) and (r8 = 0))) or
  ((not in_range2(a)) and ((({ int__content = result8 } = { int__content = r
  }) and (r9 = 6)) and (r8 = r9))))) or ((not (a = 6)) and ((((a = 8) and (({
  int__content = result9 } = { int__content = r }) and (r10 = 8))) or
  ((not (a = 8)) and ((({ int__content = result10 } = { int__content = r
  }) and (r11 = 7)) and (r10 = r11)))) and (r8 = r10)))) and (r7 = r8)))) and
  (r5 = r7)))) and (r4 = r5)))) and (r3 = r4)))) and (r2 = r3)))) and
  (r1 = r2)))) and
  (((enums__tick_pos__result1 = enums__tick_pos__result2) and
  (enums__tick_pos__result3 = enums__tick_pos__result1)) and (({
  int__content = result11 } = { int__content = enums__tick_pos__result }) and
  (enums__tick_pos__result1 = r1))))) and ((({ int__content =
  enums__tick_pos__result4 } = { int__content = enums__tick_pos__result2
  }) and (r1 = r12)) and
  ((enums__tick_pos__result5 = enums__tick_pos__result3) and
  (r13 = r1)))) and (result12 = enums__tick_pos__result4))) ->
  (enums__tick_pos__result4 = a))))
