(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const a Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r Bool)
(declare-const logic__xor_test_a__result Bool)
(declare-const result Bool)
(declare-const r1 Bool)
(declare-const result1 Bool)
(declare-const r2 Bool)
(declare-const result2 Bool)
(declare-const r3 Bool)
(declare-const result3 Bool)
(declare-const r4 Bool)
(declare-const result4 Bool)
(declare-const logic__xor_test_a__result1 Bool)
(declare-const logic__xor_test_a__result2 Bool)
(declare-const logic__xor_test_a__result3 Bool)
(declare-const r5 Bool)
(declare-const logic__xor_test_a__result4 Bool)
(declare-const r6 Bool)
(declare-const logic__xor_test_a__result5 Bool)
(declare-const result5 Bool)
(assert (=> (= (ite (= a true) b false) true) (= result r)))
(assert (=> (= (ite (= a true) b false) true) (= r1 (distinct 0 0))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (and (not (= a true)) (not (= b true))) (= result1 r))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (and (not (= a true)) (not (= b true))) (= r2 (distinct 0 0)))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (not (and (not (= a true)) (not (= b true)))) (=> (ite (= a true) (not (= b true)) false) (= result2 r)))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (not (and (not (= a true)) (not (= b true)))) (=> (ite (= a true) (not (= b true)) false) (= r3 (distinct 1 0))))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (not (and (not (= a true)) (not (= b true)))) (=> (not (ite (= a true) (not (= b true)) false)) (= result3 r)))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (not (and (not (= a true)) (not (= b true)))) (=> (not (ite (= a true) (not (= b true)) false)) (= r4 (distinct 1 0))))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (not (and (not (= a true)) (not (= b true)))) (=> (not (ite (= a true) (not (= b true)) false)) (= r3 r4)))))
(assert (=> (not (= (ite (= a true) b false) true)) (=> (not (and (not (= a true)) (not (= b true)))) (= r2 r3))))
(assert (=> (not (= (ite (= a true) b false) true)) (= r1 r2)))
(assert (= logic__xor_test_a__result1 logic__xor_test_a__result2))
(assert (= logic__xor_test_a__result3 logic__xor_test_a__result1))
(assert (= result4 logic__xor_test_a__result))
(assert (= logic__xor_test_a__result1 r1))
(assert (= (mk_bool__ref logic__xor_test_a__result4) (mk_bool__ref logic__xor_test_a__result2)))
(assert (= r5 r1))
(assert (= logic__xor_test_a__result5 logic__xor_test_a__result3))
(assert (= r6 r1))
(assert (= result5 logic__xor_test_a__result4))
(assert (not (ite (= (ite (= (= (ite logic__xor_test_a__result4 1 0) (ite a 1 0)) false) b true) true) (ite (= (ite (= (= (ite logic__xor_test_a__result4 1 0) (ite a 1 0)) true) b false) false) true true) true)))
(check-sat)
(exit)
