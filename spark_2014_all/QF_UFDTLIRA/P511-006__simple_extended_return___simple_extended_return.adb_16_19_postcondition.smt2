(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const a Bool)
(declare-const b Bool)
(declare-const simple_extended_return__simple_extended_r2__result Bool)
(declare-const a1 Bool)
(declare-const b1 Bool)
(declare-const result Bool)
(declare-const a2 Bool)
(declare-const result1 Bool)
(declare-const simple_extended_return__simple_extended_r2__result1 Bool)
(declare-const result2 Bool)
(declare-const b2 Bool)
(declare-const result3 Bool)
(declare-const simple_extended_return__simple_extended_r2__result2 Bool)
(declare-const a3 Bool)
(declare-const b3 Bool)
(declare-const simple_extended_return__simple_extended_r2__result3 Bool)
(declare-const a4 Bool)
(declare-const b4 Bool)
(declare-const simple_extended_return__simple_extended_r2__result4 Bool)
(declare-const a5 Bool)
(declare-const b5 Bool)
(declare-const simple_extended_return__simple_extended_r2__result5 Bool)
(declare-const a6 Bool)
(declare-const b6 Bool)
(declare-const simple_extended_return__simple_extended_r2__result6 Bool)
(declare-const a7 Bool)
(declare-const b7 Bool)
(declare-const simple_extended_return__simple_extended_r2__result7 Bool)
(declare-const a8 Bool)
(declare-const b8 Bool)
(declare-const simple_extended_return__simple_extended_r2__result8 Bool)
(declare-const result4 Bool)
(assert (in_range1 x))
(assert (and (and (and (= (mk_bool__ref simple_extended_return__simple_extended_r2__result5) (mk_bool__ref simple_extended_return__simple_extended_r2__result3)) (and (= (mk_bool__ref b5) (mk_bool__ref b3)) (= (mk_bool__ref a5) (mk_bool__ref a3)))) (and (= simple_extended_return__simple_extended_r2__result6 simple_extended_return__simple_extended_r2__result4) (and (= b6 b4) (= a6 a4)))) (ite (< 0 x) (and (and (and (= simple_extended_return__simple_extended_r2__result1 simple_extended_return__simple_extended_r2__result3) (and (= (mk_bool__ref b3) (mk_bool__ref b)) (= a2 a3))) (and (= simple_extended_return__simple_extended_r2__result4 simple_extended_return__simple_extended_r2__result1) (and (= b4 b1) (= a4 a2)))) (and (and (= result a) (= a2 (of_int 1))) (and (= result1 simple_extended_return__simple_extended_r2__result) (= simple_extended_return__simple_extended_r2__result1 a2)))) (and (and (and (= simple_extended_return__simple_extended_r2__result2 simple_extended_return__simple_extended_r2__result3) (and (= b2 b3) (= (mk_bool__ref a3) (mk_bool__ref a)))) (and (= simple_extended_return__simple_extended_r2__result4 simple_extended_return__simple_extended_r2__result2) (and (= b4 b2) (= a4 a1)))) (and (and (= result2 b) (= b2 (of_int 1))) (and (= result3 simple_extended_return__simple_extended_r2__result) (= simple_extended_return__simple_extended_r2__result2 b2)))))))
(assert (= (mk_bool__ref simple_extended_return__simple_extended_r2__result7) (mk_bool__ref simple_extended_return__simple_extended_r2__result5)))
(assert (= b7 b5))
(assert (= a7 a5))
(assert (= simple_extended_return__simple_extended_r2__result8 simple_extended_return__simple_extended_r2__result6))
(assert (= b8 b6))
(assert (= a8 a6))
(assert (= result4 simple_extended_return__simple_extended_r2__result7))
(assert (= simple_extended_return__simple_extended_r2__result7 true))
(assert (not true))
(check-sat)
(exit)
