(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort enum_a 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 11)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (enum_a enum_a) Bool)
(declare-const dummy enum_a)
(declare-datatypes () ((enum_a__ref (mk_enum_a__ref (enum_a__content enum_a)))))
(define-fun enum_a__ref___projection ((a enum_a__ref)) enum_a (enum_a__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 11)) (in_range1 temp___expr_158)))
(declare-sort enum_b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (enum_b enum_b) Bool)
(declare-const dummy1 enum_b)
(declare-datatypes () ((enum_b__ref (mk_enum_b__ref (enum_b__content enum_b)))))
(define-fun enum_b__ref___projection ((a enum_b__ref)) enum_b (enum_b__content a))
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 5)) (in_range2 temp___expr_165)))
(declare-const sort Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const r Int)
(declare-const real_world__example_a__result Int)
(declare-const result Int)
(declare-const r1 Int)
(declare-const result1 Int)
(declare-const r2 Int)
(declare-const result2 Int)
(declare-const r3 Int)
(declare-const result3 Int)
(declare-const r4 Int)
(declare-const result4 Int)
(declare-const r5 Int)
(declare-const result5 Int)
(declare-const r6 Int)
(declare-const result6 Int)
(declare-const real_world__example_a__result1 Int)
(declare-const real_world__example_a__result2 Int)
(declare-const real_world__example_a__result3 Int)
(declare-const r7 Int)
(declare-const real_world__example_a__result4 Int)
(declare-const r8 Int)
(declare-const real_world__example_a__result5 Int)
(declare-const result7 Int)
(assert (in_range1 sort))
(assert (=> (<= 0 5) (in_range2 r)))
(assert (=> (= sort 2) (= result r)))
(assert (=> (= sort 2) (= r1 3)))
(assert (=> (not (= sort 2)) (=> (= sort 4) (= result1 r))))
(assert (=> (not (= sort 2)) (=> (= sort 4) (= r2 1))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))) (= result2 r)))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))) (= r3 2)))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (= sort 1) (= result3 r))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (= sort 1) (= r4 4))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (not (= sort 1)) (=> (= sort 8) (= result4 r)))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (not (= sort 1)) (=> (= sort 8) (= r5 5)))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (not (= sort 1)) (=> (not (= sort 8)) (= result5 r)))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (not (= sort 1)) (=> (not (= sort 8)) (= r6 0)))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (not (= sort 1)) (=> (not (= sort 8)) (= r5 r6)))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (=> (not (= sort 1)) (= r4 r5))))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (=> (not (=> (not (= sort 5)) (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (= r3 r4)))))
(assert (=> (not (= sort 2)) (=> (not (= sort 4)) (= r2 r3))))
(assert (=> (not (= sort 2)) (= r1 r2)))
(assert (= real_world__example_a__result1 real_world__example_a__result2))
(assert (= real_world__example_a__result3 real_world__example_a__result1))
(assert (= result6 real_world__example_a__result))
(assert (= real_world__example_a__result1 r1))
(assert (= (mk_int__ref real_world__example_a__result4) (mk_int__ref real_world__example_a__result2)))
(assert (= r7 r1))
(assert (= real_world__example_a__result5 real_world__example_a__result3))
(assert (= r8 r1))
(assert (= result7 real_world__example_a__result4))
(assert (= sort 2))
(assert (not (= real_world__example_a__result4 3)))
(check-sat)
(exit)
