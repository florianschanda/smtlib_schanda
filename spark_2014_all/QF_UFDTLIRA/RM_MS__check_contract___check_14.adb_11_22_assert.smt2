(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort small 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (small small) Bool)
(declare-const dummy small)
(declare-datatypes () ((small__ref (mk_small__ref (small__content small)))))
(define-fun small__ref___projection ((a small__ref)) small (small__content a))
(define-fun dynamic_invariant ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= 1 10)) (in_range temp___expr_135)))
(declare-sort big 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 21)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (big big) Bool)
(declare-const dummy1 big)
(declare-datatypes () ((big__ref (mk_big__ref (big__content big)))))
(define-fun big__ref___projection ((a big__ref)) big (big__content a))
(define-fun dynamic_invariant1 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 1 21)) (in_range1 temp___expr_141)))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const c1 Int)
(declare-const result Int)
(declare-const c2 Int)
(declare-const result1 Int)
(declare-const c3 Int)
(declare-const result2 Int)
(declare-const c4 Int)
(assert (in_range a))
(assert (in_range b))
(assert (in_range1 c))
(assert (=> (<= c (+ a b)) (= (mk_int__ref result) (mk_int__ref c))))
(assert (=> (<= c (+ a b)) (= c2 a)))
(assert (=> (<= c (+ a b)) (and (= o (+ c2 b)) (in_range1 (+ c2 b)))))
(assert (=> (<= c (+ a b)) (= c2 result1)))
(assert (=> (<= c (+ a b)) (= c3 o)))
(assert (=> (<= c (+ a b)) (and (= o1 (+ c3 1)) (in_range1 (+ c3 1)))))
(assert (=> (<= c (+ a b)) (= result2 c3)))
(assert (=> (<= c (+ a b)) (= c4 o1)))
(assert (=> (not (<= c (+ a b))) (= c4 c)))
(assert (=> (not (<= c (+ a b))) (= c4 c1)))
(assert (not (< (+ a b) c4)))
(check-sat)
(exit)
