(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

 (* File "infoflow.ads", line 22, characters 0-0 *)
goal WP_parameter_def :
  (forall in_0_rdy_v1:bool. forall in_1_rdy_v1:bool.
  forall out_0_rdy_v1:bool. forall out_1_rdy_v1:bool. forall in_0_dat_v1:int.
  forall in_1_dat_v1:int. forall out_0_dat_v1:int. forall out_1_dat_v1:int.
  forall in_0_rdy_v2:bool. forall in_1_rdy_v2:bool. forall out_0_rdy_v2:bool.
  forall out_1_rdy_v2:bool. forall in_0_dat_v2:int. forall in_1_dat_v2:int.
  forall out_0_dat_v2:int. forall out_1_dat_v2:int. forall data_0_v1:int.
  forall data_1_v1:int. forall data_0_v2:int. forall data_1_v2:int.
  forall in_0_rdy_v11:bool. forall in_1_rdy_v11:bool.
  forall out_0_rdy_v11:bool. forall out_1_rdy_v11:bool.
  forall out_0_dat_v11:int. forall out_1_dat_v11:int.
  forall in_0_rdy_v21:bool. forall in_1_rdy_v21:bool.
  forall out_0_rdy_v21:bool. forall out_1_rdy_v21:bool.
  forall out_0_dat_v21:int. forall out_1_dat_v21:int. forall data_0_v11:int.
  forall data_1_v11:int. forall data_0_v21:int. forall data_1_v21:int.
  forall result:int. forall data_0_v12:int. forall result1:bool.
  forall in_0_rdy_v12:bool. forall result2:int. forall out_1_dat_v12:int.
  forall result3:bool. forall out_1_rdy_v12:bool. forall result4:int.
  forall data_1_v12:int. forall result5:bool. forall in_1_rdy_v12:bool.
  forall result6:int. forall out_0_dat_v12:int. forall result7:bool.
  forall out_0_rdy_v12:bool. forall result8:int. forall data_0_v22:int.
  forall result9:bool. forall in_0_rdy_v22:bool. forall result10:int.
  forall out_1_dat_v22:int. forall result11:bool. forall out_1_rdy_v22:bool.
  forall result12:int. forall data_1_v22:int. forall result13:bool.
  forall in_1_rdy_v22:bool. forall result14:int. forall out_0_dat_v22:int.
  forall result15:bool. forall out_0_rdy_v22:bool. forall in_0_rdy_v13:bool.
  forall in_1_rdy_v13:bool. forall out_0_rdy_v13:bool.
  forall out_1_rdy_v13:bool. forall out_0_dat_v13:int.
  forall out_1_dat_v13:int. forall in_0_rdy_v23:bool__ref.
  forall in_1_rdy_v23:bool__ref. forall out_0_rdy_v23:bool__ref.
  forall out_1_rdy_v23:bool__ref. forall out_0_dat_v23:int__ref.
  forall out_1_dat_v23:int__ref. forall data_0_v13:int__ref.
  forall data_1_v13:int__ref. forall data_0_v23:int__ref.
  forall data_1_v23:int__ref. forall in_0_rdy_v14:bool.
  forall in_1_rdy_v14:bool. forall out_0_rdy_v14:bool.
  forall out_1_rdy_v14:bool. forall out_0_dat_v14:int.
  forall out_1_dat_v14:int. forall in_0_rdy_v24:bool.
  forall in_1_rdy_v24:bool. forall out_0_rdy_v24:bool.
  forall out_1_rdy_v24:bool. forall out_0_dat_v24:int.
  forall out_1_dat_v24:int. forall data_0_v14:int. forall data_1_v14:int.
  forall data_0_v24:int. forall data_1_v24:int. (in_range1(in_0_dat_v1) ->
  (in_range1(in_1_dat_v1) -> (in_range1(out_0_dat_v1) ->
  (in_range1(out_1_dat_v1) -> (in_range1(in_0_dat_v2) ->
  (in_range1(in_1_dat_v2) -> (in_range1(out_0_dat_v2) ->
  (in_range1(out_1_dat_v2) -> ((((((0 <= 255) -> in_range1(data_0_v1)) and
  (((0 <= 255) -> in_range1(data_1_v1)) and (((((in_0_rdy_v1 = true) and
  (not (out_1_rdy_v1 = true))) and (((result = data_0_v1) and
  (data_0_v12 = in_0_dat_v1)) and (((result1 = in_0_rdy_v1) and
  (in_0_rdy_v12 = of_int(0))) and (((result2 = out_1_dat_v1) and
  (out_1_dat_v12 = data_0_v12)) and ((result3 = out_1_rdy_v1) and
  (out_1_rdy_v12 = of_int(1))))))) or ((not (((in_0_rdy_v1 = true) ->
  (not (out_1_rdy_v1 = true))) and (not (in_0_rdy_v1 = false)))) and
  (((data_0_v12 = data_0_v1) and ((out_1_dat_v12 = out_1_dat_v1) and
  ((out_1_rdy_v12 = out_1_rdy_v1) and (in_0_rdy_v12 = in_0_rdy_v1)))) and
  ((data_0_v12 = data_0_v11) and ((out_1_dat_v12 = out_1_dat_v11) and
  ((out_1_rdy_v12 = out_1_rdy_v11) and
  (in_0_rdy_v12 = in_0_rdy_v11))))))) and ((((in_1_rdy_v1 = true) and
  (not (out_0_rdy_v1 = true))) and (((result4 = data_1_v1) and
  (data_1_v12 = in_1_dat_v1)) and (((result5 = in_1_rdy_v1) and
  (in_1_rdy_v12 = of_int(0))) and (((result6 = out_0_dat_v1) and
  (out_0_dat_v12 = data_1_v12)) and ((result7 = out_0_rdy_v1) and
  (out_0_rdy_v12 = of_int(1))))))) or ((not (((in_1_rdy_v1 = true) ->
  (not (out_0_rdy_v1 = true))) and (not (in_1_rdy_v1 = false)))) and
  (((data_1_v12 = data_1_v1) and ((out_0_dat_v12 = out_0_dat_v1) and
  ((out_0_rdy_v12 = out_0_rdy_v1) and (in_1_rdy_v12 = in_1_rdy_v1)))) and
  ((data_1_v12 = data_1_v11) and ((out_0_dat_v12 = out_0_dat_v11) and
  ((out_0_rdy_v12 = out_0_rdy_v11) and
  (in_1_rdy_v12 = in_1_rdy_v11)))))))))) and (((0 <= 255) ->
  in_range1(data_0_v2)) and (((0 <= 255) -> in_range1(data_1_v2)) and
  (((((in_0_rdy_v2 = true) and (not (out_1_rdy_v2 = true))) and
  (((result8 = data_0_v2) and (data_0_v22 = in_0_dat_v2)) and
  (((result9 = in_0_rdy_v2) and (in_0_rdy_v22 = of_int(0))) and
  (((result10 = out_1_dat_v2) and (out_1_dat_v22 = data_0_v22)) and
  ((result11 = out_1_rdy_v2) and (out_1_rdy_v22 = of_int(1))))))) or
  ((not (((in_0_rdy_v2 = true) -> (not (out_1_rdy_v2 = true))) and
  (not (in_0_rdy_v2 = false)))) and (((data_0_v22 = data_0_v2) and
  ((out_1_dat_v22 = out_1_dat_v2) and ((out_1_rdy_v22 = out_1_rdy_v2) and
  (in_0_rdy_v22 = in_0_rdy_v2)))) and ((data_0_v22 = data_0_v21) and
  ((out_1_dat_v22 = out_1_dat_v21) and ((out_1_rdy_v22 = out_1_rdy_v21) and
  (in_0_rdy_v22 = in_0_rdy_v21))))))) and ((((in_1_rdy_v2 = true) and
  (not (out_0_rdy_v2 = true))) and (((result12 = data_1_v2) and
  (data_1_v22 = in_1_dat_v2)) and (((result13 = in_1_rdy_v2) and
  (in_1_rdy_v22 = of_int(0))) and (((result14 = out_0_dat_v2) and
  (out_0_dat_v22 = data_1_v22)) and ((result15 = out_0_rdy_v2) and
  (out_0_rdy_v22 = of_int(1))))))) or ((not (((in_1_rdy_v2 = true) ->
  (not (out_0_rdy_v2 = true))) and (not (in_1_rdy_v2 = false)))) and
  (((data_1_v22 = data_1_v2) and ((out_0_dat_v22 = out_0_dat_v2) and
  ((out_0_rdy_v22 = out_0_rdy_v2) and (in_1_rdy_v22 = in_1_rdy_v2)))) and
  ((data_1_v22 = data_1_v21) and ((out_0_dat_v22 = out_0_dat_v21) and
  ((out_0_rdy_v22 = out_0_rdy_v21) and
  (in_1_rdy_v22 = in_1_rdy_v21))))))))))) and (((data_1_v23 = {
  int__content = data_1_v22 }) and ((data_0_v23 = { int__content = data_0_v22
  }) and ((data_1_v13 = { int__content = data_1_v12 }) and ((data_0_v13 = {
  int__content = data_0_v12 }) and ((out_1_dat_v23 = { int__content =
  out_1_dat_v22 }) and ((out_0_dat_v23 = { int__content = out_0_dat_v22
  }) and ((out_1_rdy_v23 = { bool__content = out_1_rdy_v22 }) and
  ((out_0_rdy_v23 = { bool__content = out_0_rdy_v22 }) and ((in_1_rdy_v23 = {
  bool__content = in_1_rdy_v22 }) and ((in_0_rdy_v23 = { bool__content =
  in_0_rdy_v22 }) and ((out_1_dat_v13 = out_1_dat_v12) and
  ((out_0_dat_v12 = out_0_dat_v13) and ((out_1_rdy_v13 = out_1_rdy_v12) and
  ((out_0_rdy_v13 = out_0_rdy_v12) and ((in_1_rdy_v13 = in_1_rdy_v12) and
  (in_0_rdy_v13 = in_0_rdy_v12)))))))))))))))) and
  ((data_1_v24 = data_1_v22) and ((data_0_v24 = data_0_v22) and
  ((data_1_v14 = data_1_v12) and ((data_0_v14 = data_0_v12) and
  ((out_1_dat_v24 = out_1_dat_v22) and ((out_0_dat_v24 = out_0_dat_v22) and
  ((out_1_rdy_v24 = out_1_rdy_v22) and ((out_0_rdy_v24 = out_0_rdy_v22) and
  ((in_1_rdy_v24 = in_1_rdy_v22) and ((in_0_rdy_v24 = in_0_rdy_v22) and
  ((out_1_dat_v14 = out_1_dat_v12) and ((out_0_dat_v14 = out_0_dat_v12) and
  ((out_1_rdy_v14 = out_1_rdy_v12) and ((out_0_rdy_v14 = out_0_rdy_v12) and
  ((in_1_rdy_v14 = in_1_rdy_v12) and
  (in_0_rdy_v14 = in_0_rdy_v12)))))))))))))))))) -> (((bool_eq(in_1_dat_v1,
  in_1_dat_v2) = true) and ((in_1_rdy_v1 = true) and
  ((out_0_rdy_v1 = false) and ((in_1_rdy_v2 = true) and
  (out_0_rdy_v2 = false))))) ->
  (out_0_dat_v13 = (out_0_dat_v23).int__content))))))))))))
