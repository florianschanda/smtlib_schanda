(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_byte

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref___projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic half_range : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t31b

predicate in_range2(x: int) = ((0 <= x) and (x <= 127))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t31b, t31b -> bool

logic dummy1 : t31b

type t31b__ref = { t31b__content : t31b
}

function t31b__ref___projection(a: t31b__ref) : t31b = (a).t31b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom half_range__def_axiom : (half_range = 127)

 (* File "arithmetic.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall r:int. forall i:int. forall arithmetic__halve_c__result:int.
  forall temp___206:int. forall temp___205:int. forall r1:int.
  forall result:int. forall i1:int. forall result1:int. forall r2:int.
  forall r3:int. forall i2:int. forall result2:int. forall i3:int.
  forall result3:int. forall r4:int. forall r5:int. forall i4:int.
  forall r6:int. forall i5:int. forall r7:int. forall i6:int. forall r8:int.
  forall i7:int. forall r9:int. forall i8:int. forall r10:int. forall i9:int.
  forall r11:int. forall i10:int. forall r12:int. forall i11:int.
  forall result4:int. forall arithmetic__halve_c__result1:int.
  forall arithmetic__halve_c__result2:int.
  forall arithmetic__halve_c__result3:int. forall r13:int. forall i12:int.
  forall arithmetic__halve_c__result4:int. forall r14:int. forall i13:int.
  forall arithmetic__halve_c__result5:int.
  (forall result5:int. ((in_range1(n) and (((in_range1(half_range) and
  (((0 <= 255) -> in_range1(r)) and (((({ int__content = result } = {
  int__content = i }) and (i1 = 0)) and ((((0 <= i1) and (i1 <= 127)) and
  ((((temp___206 = r) and ((temp___205 = i1) and ((({ int__content = result1
  } = { int__content = r }) and (r2 = i1)) and (((((i1 = i6) and
  (r2 = r7)) and ((i7 = i1) and (r8 = r2))) and ((not ((r2 + r2) = n)) ->
  (((r2 + r2) + 1) = n))) or ((not ((not ((r2 + r2) = n)) ->
  (((r2 + r2) + 1) = n))) and ((((i4 = i6) and (r5 = r7)) and ((i7 = i5) and
  (r8 = r6))) and ((((r3 = i2) and (((r3 + r3) + 1) <  n)) and
  in_range1(r3)) and (((((0 <= 127) -> in_range2(i2)) and ((0 <= 255) ->
  in_range1(r3))) and ((0 <= i2) and (i2 <= 127))) and (((((i2 = i4) and
  (r3 = r5)) and ((i5 = i2) and (r6 = r3))) and (i2 = 127)) or
  ((not (i2 = 127)) and ((((i3 = i4) and (r4 = r5)) and ((i5 = i3) and
  (r6 = r4))) and (((i2 = result2) and (i3 = (i2 + 1))) and
  (((r3 = result3) and (r4 = i3)) and ((not ((r4 + r4) = n)) ->
  (((r4 + r4) + 1) = n))))))))))))))) and ((({ int__content = i8 } = {
  int__content = i6 }) and ({ int__content = r9 } = { int__content = r7
  })) and ((i9 = i7) and (r10 = r8)))) and (((i10 = i8) and ({ int__content =
  r11 } = { int__content = r9 })) and ((i11 = i9) and (r12 = r10))))) or
  ((not ((0 <= i1) and (i1 <= 127))) and (((i1 = i10) and ({ int__content =
  r11 } = { int__content = r })) and ((i11 = i1) and (r12 = r1)))))) and
  (((arithmetic__halve_c__result1 = arithmetic__halve_c__result2) and
  (arithmetic__halve_c__result3 = arithmetic__halve_c__result1)) and
  ((result4 = arithmetic__halve_c__result) and
  (arithmetic__halve_c__result1 = r11)))))) and
  (((arithmetic__halve_c__result2 = arithmetic__halve_c__result4) and
  ((i12 = i10) and (r13 = r11))) and
  ((arithmetic__halve_c__result5 = arithmetic__halve_c__result3) and
  ((i13 = i11) and (r14 = r12))))) and
  (result5 = arithmetic__halve_c__result4))) ->
  (((arithmetic__halve_c__result4 + arithmetic__halve_c__result4) = n) or
  (((arithmetic__halve_c__result4 + arithmetic__halve_c__result4) + 1) = n)))))
