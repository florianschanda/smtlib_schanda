(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type int20

predicate in_range(x: int) = ((1 <= x) and (x <= 20))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : int20, int20 -> bool

logic dummy : int20

type int20__ref = { int20__content : int20
}

function int20__ref___projection(a: int20__ref) : int20 = (a).int20__content

type int10

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : int10, int10 -> bool

logic dummy1 : int10

type int10__ref = { int10__content : int10
}

function int10__ref___projection(a: int10__ref) : int10 = (a).int10__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x : int

logic y : int

logic inrange__do_it__result : int

logic o : int

logic inrange__add_out__i : int

logic o1 : int

logic result : int

logic x1 : int

logic result1 : int

logic y1 : int

logic inrange__add_out__i1 : int

logic result2 : int

logic x2 : int

logic result3 : int

logic inrange__do_it__result1 : int

logic inrange__do_it__result2 : int

logic inrange__do_it__result3 : int

logic x3 : int

logic y2 : int

logic inrange__do_it__result4 : int

logic x4 : int

logic y3 : int

logic inrange__do_it__result5 : int

logic result4 : int

axiom H : (result = x)

axiom H1 : (x1 = 10)

axiom H2 : in_range1(x1)

axiom H3 : (result1 = y)

axiom H4 : (y1 = 10)

axiom H5 : in_range1(y1)

axiom H6 : ((o = x1) and in_range(x1))

axiom H7 : (o = inrange__add_out__i)

axiom H8 : ((inrange__add_out__i1 = (inrange__add_out__i + y1)) and
  in_range(inrange__add_out__i1))

axiom H9 : ((o1 = inrange__add_out__i1) and in_range1(inrange__add_out__i1))

axiom H10 : (result2 = x1)

axiom H11 : (x2 = o1)

axiom H12 : (inrange__do_it__result1 = inrange__do_it__result2)

axiom H13 : (inrange__do_it__result3 = inrange__do_it__result1)

axiom H14 : (result3 = inrange__do_it__result)

axiom H15 : (inrange__do_it__result1 = x2)

axiom H16 : (inrange__do_it__result4 = inrange__do_it__result2)

axiom H17 : (y2 = y1)

axiom H18 : (x3 = x2)

axiom H19 : (inrange__do_it__result5 = inrange__do_it__result3)

axiom H20 : (y3 = y1)

axiom H21 : (x4 = x2)

axiom H22 : (result4 = inrange__do_it__result4)

 (* File "inrange.ads", line 3, characters 0-0 *)
goal WP_parameter_def : (inrange__do_it__result4 <= 10)
