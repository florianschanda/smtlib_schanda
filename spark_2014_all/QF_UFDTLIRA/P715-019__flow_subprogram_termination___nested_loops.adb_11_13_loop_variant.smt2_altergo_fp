(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t2b

predicate in_range2(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t2b, t2b -> bool

logic dummy1 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref___projection(a: t2b__ref) : t2b = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic j : int

logic x : int

logic o : int

logic temp___134 : int

logic temp___133 : int

logic temp___135 : int

logic temp___132 : int

logic o1 : int

logic result : int

logic j1 : int

logic result1 : int

logic j2 : int

logic j3 : int

logic x1 : int

logic i : int

logic temp___140 : int

logic rho : int

logic rho1 : int

logic result2 : int

logic temp___1401 : int

logic result3 : int

logic i1 : int

logic x2 : int

logic i2 : int

logic temp___1351 : int

logic rho2 : int

logic result4 : int

logic temp___1352 : int

logic result5 : int

logic x3 : int

logic temp___1321 : int

logic result6 : int

logic temp___1322 : int

logic rho3 : int

logic rho4 : int

logic result7 : int

logic i3 : int

logic x4 : int

logic i4 : int

logic x5 : int

logic i5 : int

logic rho5 : int

logic rho6 : int

logic x6 : int

logic i6 : int

logic x7 : int

logic i7 : int

logic rho7 : int

logic rho8 : int

logic result8 : int

logic j4 : int

axiom H : (result = j)

axiom H1 : (j1 = 2)

axiom H2 : in_range1(j1)

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(x))

axiom H4 : (j1 <  5)

axiom H5 : ((o = (j1 + 1)) and in_range1((j1 + 1)))

axiom H6 : (result1 = j1)

axiom H7 : (j2 = o)

axiom H8 : ((((- 2147483648) <= 2147483647) -> in_range1(j3)) and
  (((- 2147483648) <= 2147483647) -> in_range1(x1)))

axiom H9 : (result2 = temp___140)

axiom H10 : (temp___1401 = j3)

axiom H11 : (i = result3)

axiom H12 : (i1 = 1)

axiom H13 : (1 <= i1)

axiom H14 : (i1 <= 5)

axiom H15 : (((((- 2147483648) <= 2147483647) -> in_range1(x2)) and
  ((1 <= 5) -> in_range2(i2))) and ((1 <= i2) and (i2 <= 5)))

axiom H16 : (temp___1351 = result4)

axiom H17 : (temp___1352 = i2)

axiom H18 : (x2 = result5)

axiom H19 : (x3 = i2)

axiom H20 : ((0 <  x3) -> (0 = temp___132))

axiom H21 : true

axiom H22 : ((0 <  x3) -> (temp___1321 = result6))

axiom H23 : ((0 <  x3) -> (temp___1322 = x3))

axiom H24 : ((0 <  x3) -> (not (0 <  x3)))

axiom H25 : ((0 <  x3) -> (rho3 = temp___1322))

axiom H26 : ((0 <  x3) -> (rho4 = rho3))

axiom H27 : ((not (0 <  x3)) -> (rho4 = rho2))

axiom H28 : (not (i2 = 5))

axiom H29 : (result7 = i2)

axiom H30 : (i3 = (i2 + 1))

 (* File "nested_loops.adb", line 44, characters 0-0 *)
goal WP_parameter_def : (temp___1352 <  i3)
