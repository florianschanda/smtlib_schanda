(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type character

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

type wide_character

predicate in_range1(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : wide_character, wide_character -> bool

logic dummy1 : wide_character

type wide_character__ref = { wide_character__content : wide_character
}

function wide_character__ref___projection(a: wide_character__ref) : wide_character =
  (a).wide_character__content

type wide_wide_character

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : wide_wide_character, wide_wide_character -> bool

logic dummy2 : wide_wide_character

type wide_wide_character__ref = { wide_wide_character__content :
wide_wide_character
}

function wide_wide_character__ref___projection(a: wide_wide_character__ref) : wide_wide_character =
  (a).wide_wide_character__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic x : int

logic y : int

logic wx : int

logic wy : int

logic wwx : int

logic wwy : int

logic z : bool

logic wz : bool

logic wwz : bool

logic f : int

logic wf : int

logic wwf : int

logic chars__doit__result : bool

logic result : int

logic x1 : int

logic result1 : int

logic y1 : int

logic result2 : int

logic wx1 : int

logic result3 : int

logic wy1 : int

logic result4 : int

logic wwx1 : int

logic result5 : int

logic wwy1 : int

logic result6 : bool

logic z1 : bool

logic result7 : bool

logic wz1 : bool

logic result8 : bool

logic wwz1 : bool

logic result9 : int

logic f1 : int

logic result10 : int

logic wf1 : int

logic result11 : int

logic wwf1 : int

logic result12 : bool

logic chars__doit__result1 : bool

logic chars__doit__result2 : bool

logic chars__doit__result3 : bool

logic x2 : int

logic y2 : int

logic wx2 : int

logic wy2 : int

logic wwx2 : int

logic wwy2 : int

logic z2 : bool

logic wz2 : bool

logic wwz2 : bool

logic f2 : int

logic wf2 : int

logic wwf2 : int

logic chars__doit__result4 : bool

logic x3 : int

logic y3 : int

logic wx3 : int

logic wy3 : int

logic wwx3 : int

logic wwy3 : int

logic z3 : bool

logic wz3 : bool

logic wwz3 : bool

logic f3 : int

logic wf3 : int

logic wwf3 : int

logic chars__doit__result5 : bool

logic result13 : bool

axiom H : (result = x)

axiom H1 : (x1 = 65)

axiom H2 : in_range(x1)

axiom H3 : (result1 = y)

axiom H4 : (y1 = 97)

axiom H5 : in_range(y1)

axiom H6 : (result2 = wx)

axiom H7 : (wx1 = 65)

axiom H8 : in_range1(wx1)

axiom H9 : (result3 = wy)

axiom H10 : (wy1 = 97)

axiom H11 : in_range1(wy1)

axiom H12 : (result4 = wwx)

axiom H13 : (wwx1 = 65)

axiom H14 : in_range2(wwx1)

axiom H15 : (result5 = wwy)

axiom H16 : (wwy1 = 97)

axiom H17 : in_range2(wwy1)

axiom H18 : (result6 = z)

axiom H19 : (((x1 <  y1) -> (z1 = true)) and ((not (x1 <  y1)) ->
  (z1 = false)))

axiom H20 : (result7 = wz)

axiom H21 : (((wx1 <  wy1) -> (wz1 = true)) and ((not (wx1 <  wy1)) ->
  (wz1 = false)))

axiom H22 : (result8 = wwz)

axiom H23 : (((wwx1 <  wwy1) -> (wwz1 = true)) and ((not (wwx1 <  wwy1)) ->
  (wwz1 = false)))

axiom H24 : (result9 = f)

axiom H25 : (f1 = 0)

axiom H26 : in_range(f1)

axiom H27 : (result10 = wf)

axiom H28 : (wf1 = 0)

axiom H29 : in_range1(wf1)

axiom H30 : (result11 = wwf)

axiom H31 : (wwf1 = 0)

axiom H32 : in_range2(wwf1)

axiom H33 : (chars__doit__result2 = chars__doit__result1)

axiom H34 : (chars__doit__result3 = chars__doit__result1)

axiom H35 : (result12 = chars__doit__result)

axiom H36 : (((((z1 = true) and (wz1 = true)) and (wwz1 = true)) ->
  (chars__doit__result1 = true)) and ((not (((z1 = true) and
  (wz1 = true)) and (wwz1 = true))) -> (chars__doit__result1 = false)))

axiom H37 : (chars__doit__result4 = chars__doit__result2)

axiom H38 : (wwf2 = wwf1)

axiom H39 : (wf2 = wf1)

axiom H40 : (f2 = f1)

axiom H41 : (wwz2 = wwz1)

axiom H42 : (wz2 = wz1)

axiom H43 : (z2 = z1)

axiom H44 : (wwy2 = wwy1)

axiom H45 : (wwx2 = wwx1)

axiom H46 : (wy2 = wy1)

axiom H47 : (wx2 = wx1)

axiom H48 : (y2 = y1)

axiom H49 : (x2 = x1)

axiom H50 : (chars__doit__result5 = chars__doit__result3)

axiom H51 : (wwf3 = wwf1)

axiom H52 : (wf3 = wf1)

axiom H53 : (f3 = f1)

axiom H54 : (wwz3 = wwz1)

axiom H55 : (wz3 = wz1)

axiom H56 : (z3 = z1)

axiom H57 : (wwy3 = wwy1)

axiom H58 : (wwx3 = wwx1)

axiom H59 : (wy3 = wy1)

axiom H60 : (wx3 = wx1)

axiom H61 : (y3 = y1)

axiom H62 : (x3 = x1)

axiom H63 : (result13 = chars__doit__result4)

 (* File "chars.ads", line 2, characters 0-0 *)
goal WP_parameter_def : (chars__doit__result4 = true)
