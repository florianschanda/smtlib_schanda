(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const input_value Int)
(declare-const input_port Int)
(declare-const first_read Int)
(declare-const second_read Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const input_port1 Int)
(declare-const result Int)
(declare-const second_read1 Int)
(declare-const result1 Int)
(declare-const first_read1 Int)
(declare-const input_port2 Int)
(declare-const result2 Int)
(declare-const second_read2 Int)
(declare-const result3 Int)
(declare-const input_value1 Int)
(declare-const result4 Int)
(declare-const input_value2 Int)
(assert (in_range input_port))
(assert (=> (<= (- 2147483648) 2147483647) (in_range input_value)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range first_read)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range second_read)))
(assert (in_range input_port1))
(assert (= o input_port1))
(assert (= result second_read))
(assert (= second_read1 o))
(assert (= result1 first_read))
(assert (= first_read1 second_read1))
(assert (=> (= first_read1 0) (in_range input_port2)))
(assert (=> (= first_read1 0) (= o1 input_port2)))
(assert (=> (= first_read1 0) (= result2 second_read1)))
(assert (=> (= first_read1 0) (= second_read2 o1)))
(assert (=> (= first_read1 0) (= result3 input_value)))
(assert (=> (= first_read1 0) (= input_value1 second_read2)))
(assert (=> (not (= first_read1 0)) (= result4 input_value)))
(assert (=> (not (= first_read1 0)) (= input_value2 first_read1)))
(assert (=> (not (= first_read1 0)) (= second_read2 second_read1)))
(assert (=> (not (= first_read1 0)) (= input_port2 input_port1)))
(assert (=> (not (= first_read1 0)) (= input_value1 input_value2)))
(assert (not (or (and (= first_read1 0) (= input_value1 second_read2)) (= input_value1 first_read1))))
(check-sat)
(exit)
