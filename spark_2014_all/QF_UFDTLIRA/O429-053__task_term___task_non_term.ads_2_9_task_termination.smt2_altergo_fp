(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "task_non_term.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall a:int. forall f:int. forall tmp:int. forall temp___216:int.
  forall temp___215:int. forall temp___214:int. forall o:int.
  forall tmp1:int. forall result:int. forall a1:int. forall result1:int.
  forall f1:int. forall a2:int. forall f2:int. forall tmp2:int.
  forall result2:int. forall tmp3:int. forall result3:int. forall f3:int.
  forall result4:int. forall a3:int. forall a4:int. forall f4:int.
  forall tmp4:int. forall a5:int. forall f5:int. forall tmp5:int.
  forall a6:int. forall f6:int. forall tmp6:int. forall a7:int.
  forall f7:int. forall tmp7:int. (not ((({ int__content = result } = {
  int__content = a }) and (a1 = 1)) and (in_range1(a1) and ((({
  int__content = result1 } = { int__content = f }) and (f1 = 1)) and
  (in_range1(f1) and ((((- 2147483648) <= 2147483647) -> in_range1(tmp)) and
  (((f1 <  1000) and ((((temp___216 = tmp) and ((temp___215 = f1) and
  ((temp___214 = a1) and (((((((- 2147483648) <= 2147483647) ->
  in_range1(a2)) and (((- 2147483648) <= 2147483647) -> in_range1(f2))) and
  (((- 2147483648) <= 2147483647) -> in_range1(tmp2))) and (f2 <  1000)) and
  (((tmp2 = result2) and (tmp3 = f2)) and ((((o = (a2 + f2)) and
  in_range1((a2 + f2))) and ((result3 = f2) and (f3 = o))) and
  (((result4 = a2) and (a3 = tmp3)) and (not (f3 <  1000))))))))) and
  (((tmp3 = tmp4) and ((f3 = f4) and (a3 = a4))) and ((tmp5 = tmp3) and
  ((f5 = f3) and (a5 = a3))))) and (((tmp4 = tmp6) and ((f6 = f4) and
  (a6 = a4))) and ((tmp7 = tmp5) and ((f7 = f5) and (a7 = a5)))))) or
  ((not (f1 <  1000)) and (((tmp = tmp6) and ((f1 = f6) and (a1 = a6))) and
  ((tmp7 = tmp1) and ((f7 = f1) and (a7 = a1)))))))))))))
