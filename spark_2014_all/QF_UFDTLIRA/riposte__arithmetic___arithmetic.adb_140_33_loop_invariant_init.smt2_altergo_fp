(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_byte

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref___projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic half_range : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t31b

predicate in_range2(x: int) = ((0 <= x) and (x <= 127))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t31b, t31b -> bool

logic dummy1 : t31b

type t31b__ref = { t31b__content : t31b
}

function t31b__ref___projection(a: t31b__ref) : t31b = (a).t31b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom half_range__def_axiom : (half_range = 127)

logic r : int

logic i : int

logic arithmetic__halve_c__result : int

logic temp___180 : int

logic temp___179 : int

logic r1 : int

logic result : int

logic i1 : int

logic result1 : int

logic r2 : int

logic r3 : int

logic i2 : int

logic result2 : int

logic i3 : int

logic result3 : int

logic r4 : int

logic r5 : int

logic i4 : int

logic r6 : int

logic i5 : int

logic r7 : int

logic i6 : int

logic r8 : int

logic i7 : int

logic r9 : int

logic i8 : int

logic r10 : int

logic i9 : int

logic r11 : int

logic i10 : int

logic r12 : int

logic i11 : int

logic r13 : int

logic i12 : int

logic r14 : int

logic i13 : int

logic result4 : int

logic arithmetic__halve_c__result1 : int

logic arithmetic__halve_c__result2 : int

logic arithmetic__halve_c__result3 : int

logic r15 : int

logic i14 : int

logic arithmetic__halve_c__result4 : int

logic r16 : int

logic i15 : int

logic arithmetic__halve_c__result5 : int

axiom H : in_range1(n)

axiom H1 : in_range1(half_range)

axiom H2 : ((0 <= 255) -> in_range1(r))

axiom H3 : (result = i)

axiom H4 : (i1 = 0)

axiom H5 : (0 <= i1)

axiom H6 : (i1 <= 127)

axiom H7 : (result1 = r)

axiom H8 : (r2 = i1)

axiom H9 : (not ((r2 + r2) = n))

axiom H10 : (not (((r2 + r2) + 1) = n))

 (* File "arithmetic.adb", line 3, characters 0-0 *)
goal WP_parameter_def : (r2 = i1)
