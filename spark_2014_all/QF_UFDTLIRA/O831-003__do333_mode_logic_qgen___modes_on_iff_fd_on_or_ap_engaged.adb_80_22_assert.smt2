(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const offside_fd_on Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const is_ap_engaged Bool)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const fd_on Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const modes_on Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const true_out1 Bool)
(declare-const unit_delay_memory Bool)
(declare-const unit_delay_out1 Bool)
(declare-const fd_on_out1 Bool)
(declare-const is_ap_engaged_out1 Bool)
(declare-const modes_on_out1 Bool)
(declare-const offside_fd_on_out1 Bool)
(declare-const or1_out1 Bool)
(declare-const equals_out1 Bool)
(declare-const or_out1 Bool)
(declare-const result Bool)
(declare-const unit_delay_out11 Bool)
(declare-const result1 Bool)
(declare-const fd_on_out11 Bool)
(declare-const result2 Bool)
(declare-const is_ap_engaged_out11 Bool)
(declare-const result3 Bool)
(declare-const modes_on_out11 Bool)
(declare-const result4 Bool)
(declare-const offside_fd_on_out11 Bool)
(declare-const result5 Bool)
(declare-const or1_out11 Bool)
(declare-const result6 Bool)
(declare-const equals_out11 Bool)
(declare-const result7 Bool)
(declare-const true_out11 Bool)
(declare-const result8 Bool)
(declare-const or_out11 Bool)
(assert (= result unit_delay_out1))
(assert (= unit_delay_out11 unit_delay_memory))
(assert (= result1 fd_on_out1))
(assert (= fd_on_out11 fd_on))
(assert (= result2 is_ap_engaged_out1))
(assert (= is_ap_engaged_out11 is_ap_engaged))
(assert (= result3 modes_on_out1))
(assert (= modes_on_out11 modes_on))
(assert (= result4 offside_fd_on_out1))
(assert (= offside_fd_on_out11 offside_fd_on))
(assert (= result5 or1_out1))
(assert (= or1_out11 (ite (or (or (= offside_fd_on_out11 true) (= is_ap_engaged_out11 true)) (= fd_on_out11 true)) true false)))
(assert (= result6 equals_out1))
(assert (= equals_out11 (ite (= (to_int1 or1_out11) (to_int1 modes_on_out11)) true false)))
(assert (= result7 true_out1))
(assert (= true_out11 (of_int 0)))
(assert (= result8 or_out1))
(assert (= or_out11 (ite (or (= unit_delay_out11 true) (= equals_out11 true)) true false)))
(assert (not (= or_out11 true)))
(check-sat)
(exit)
