(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic a : bool

logic b : bool

logic simple_extended_return__simple_extended_r2__result : bool

logic a1 : bool

logic b1 : bool

logic result : bool

logic a2 : bool

logic result1 : bool

logic simple_extended_return__simple_extended_r2__result1 : bool

logic result2 : bool

logic b2 : bool

logic result3 : bool

logic simple_extended_return__simple_extended_r2__result2 : bool

logic a3 : bool

logic b3 : bool

logic simple_extended_return__simple_extended_r2__result3 : bool

logic a4 : bool

logic b4 : bool

logic simple_extended_return__simple_extended_r2__result4 : bool

logic a5 : bool

logic b5 : bool

logic simple_extended_return__simple_extended_r2__result5 : bool

logic a6 : bool

logic b6 : bool

logic simple_extended_return__simple_extended_r2__result6 : bool

logic a7 : bool

logic b7 : bool

logic simple_extended_return__simple_extended_r2__result7 : bool

logic a8 : bool

logic b8 : bool

logic simple_extended_return__simple_extended_r2__result8 : bool

logic result4 : bool

axiom H : in_range1(x)

axiom H1 :
  ((((simple_extended_return__simple_extended_r2__result5 = simple_extended_return__simple_extended_r2__result3) and
  ((b5 = b3) and (a5 = a3))) and
  ((simple_extended_return__simple_extended_r2__result6 = simple_extended_return__simple_extended_r2__result4) and
  ((b6 = b4) and (a6 = a4)))) and (((0 <  x) ->
  ((((simple_extended_return__simple_extended_r2__result1 = simple_extended_return__simple_extended_r2__result3) and
  ((b3 = b) and (a2 = a3))) and
  ((simple_extended_return__simple_extended_r2__result4 = simple_extended_return__simple_extended_r2__result1) and
  ((b4 = b1) and (a4 = a2)))) and (((result = a) and (a2 = of_int(1))) and
  ((result1 = simple_extended_return__simple_extended_r2__result) and
  (simple_extended_return__simple_extended_r2__result1 = a2))))) and
  ((not (0 <  x)) ->
  ((((simple_extended_return__simple_extended_r2__result2 = simple_extended_return__simple_extended_r2__result3) and
  ((b2 = b3) and (a3 = a))) and
  ((simple_extended_return__simple_extended_r2__result4 = simple_extended_return__simple_extended_r2__result2) and
  ((b4 = b2) and (a4 = a1)))) and (((result2 = b) and (b2 = of_int(1))) and
  ((result3 = simple_extended_return__simple_extended_r2__result) and
  (simple_extended_return__simple_extended_r2__result2 = b2)))))))

axiom H2 :
  (simple_extended_return__simple_extended_r2__result7 = simple_extended_return__simple_extended_r2__result5)

axiom H3 : (b7 = b5)

axiom H4 : (a7 = a5)

axiom H5 :
  (simple_extended_return__simple_extended_r2__result8 = simple_extended_return__simple_extended_r2__result6)

axiom H6 : (b8 = b6)

axiom H7 : (a8 = a6)

axiom H8 : (result4 = simple_extended_return__simple_extended_r2__result7)

axiom H9 : (simple_extended_return__simple_extended_r2__result7 = true)

 (* File "simple_extended_return.adb", line 15, characters 0-0 *)
goal WP_parameter_def : true
