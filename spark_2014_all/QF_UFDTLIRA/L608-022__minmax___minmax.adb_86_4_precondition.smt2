(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort s 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (s s) Bool)
(declare-const dummy1 s)
(declare-datatypes () ((s__ref (mk_s__ref (s__content s)))))
(define-fun s__ref___projection ((a s__ref)) s (s__content a))
(declare-sort t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (t t) Bool)
(declare-const dummy2 t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(define-fun dynamic_invariant1 ((temp___expr_207 Int) (temp___is_init_203 Bool) (temp___skip_constant_204 Bool) (temp___do_toplevel_205 Bool) (temp___do_typ_inv_206 Bool)) Bool (=> (or (= temp___is_init_203 true) (<= 1 127)) (in_range2 temp___expr_207)))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-sort e 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (e e) Bool)
(declare-const dummy3 e)
(declare-datatypes () ((e__ref (mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))
(define-fun dynamic_invariant2 ((temp___expr_214 Int) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool (=> (or (= temp___is_init_210 true) (<= 0 3)) (in_range3 temp___expr_214)))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(define-fun dynamic_invariant3 ((temp___expr_200 Int) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (or (= temp___is_init_196 true) (<= 1 127)) (in_range1 temp___expr_200)))
(declare-const x Int)
(declare-const y Int)
(declare-const min Int)
(declare-const max Int)
(declare-const v Int)
(declare-const w Int)
(declare-const mint Int)
(declare-const maxt Int)
(declare-const aa Int)
(declare-const cc Int)
(declare-const mine Int)
(declare-const maxe Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const x1 Int)
(declare-const result1 Int)
(declare-const y1 Int)
(declare-const result2 Int)
(declare-const v1 Int)
(declare-const result3 Int)
(declare-const w1 Int)
(declare-const result4 Int)
(declare-const aa1 Int)
(declare-const result5 Int)
(declare-const cc1 Int)
(declare-const min1 Int)
(declare-const max1 Int)
(declare-const min2 Int)
(declare-const max2 Int)
(declare-const mint1 Int)
(declare-const maxt1 Int)
(assert (= result x))
(assert (= x1 1))
(assert (in_range x1))
(assert (= result1 y))
(assert (= y1 127))
(assert (in_range y1))
(assert (=> (<= (- 2147483648) 2147483647) (in_range min)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range max)))
(assert (= result2 v))
(assert (= v1 1))
(assert (in_range2 v1))
(assert (= result3 w))
(assert (= w1 127))
(assert (in_range2 w1))
(assert (=> (<= 1 127) (in_range2 mint)))
(assert (=> (<= 1 127) (in_range2 maxt)))
(assert (= result4 aa))
(assert (= aa1 0))
(assert (in_range3 aa1))
(assert (= result5 cc))
(assert (= cc1 2))
(assert (in_range3 cc1))
(assert (=> (<= 0 3) (in_range3 mine)))
(assert (=> (<= 0 3) (in_range3 maxe)))
(assert (and (in_range min1) (in_range max1)))
(assert (and (= o1 y1) (in_range1 y1)))
(assert (and (= o x1) (in_range1 x1)))
(assert (and (in_range min2) (in_range max2)))
(assert (and (in_range2 mint1) (in_range2 maxt1)))
(assert (not (< aa1 cc1)))
(check-sat)
(exit)
