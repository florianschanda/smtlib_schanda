(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type enum_a

predicate in_range1(x: int) = ((0 <= x) and (x <= 11))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : enum_a, enum_a -> bool

logic dummy : enum_a

type enum_a__ref = { enum_a__content : enum_a
}

function enum_a__ref___projection(a: enum_a__ref) : enum_a =
  (a).enum_a__content

type enum_b

predicate in_range2(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : enum_b, enum_b -> bool

logic dummy1 : enum_b

type enum_b__ref = { enum_b__content : enum_b
}

function enum_b__ref___projection(a: enum_b__ref) : enum_b =
  (a).enum_b__content

logic sort : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r : int

logic real_world__example_a__result : int

logic result : int

logic r1 : int

logic result1 : int

logic r2 : int

logic result2 : int

logic r3 : int

logic result3 : int

logic r4 : int

logic result4 : int

logic r5 : int

logic result5 : int

logic r6 : int

logic result6 : int

logic real_world__example_a__result1 : int

logic real_world__example_a__result2 : int

logic real_world__example_a__result3 : int

logic r7 : int

logic real_world__example_a__result4 : int

logic r8 : int

logic real_world__example_a__result5 : int

logic result7 : int

axiom H : in_range1(sort)

axiom H1 : ((0 <= 5) -> in_range2(r))

axiom H2 : ((sort = 2) -> (result = r))

axiom H3 : ((sort = 2) -> (r1 = 3))

axiom H4 : ((not (sort = 2)) -> ((sort = 4) -> (result1 = r)))

axiom H5 : ((not (sort = 2)) -> ((sort = 4) -> (r2 = 1)))

axiom H6 : ((not (sort = 2)) -> ((not (sort = 4)) -> (((not (sort = 5)) ->
  ((not (sort = 9)) -> ((not (sort = 6)) -> (sort = 7)))) -> (result2 = r))))

axiom H7 : ((not (sort = 2)) -> ((not (sort = 4)) -> (((not (sort = 5)) ->
  ((not (sort = 9)) -> ((not (sort = 6)) -> (sort = 7)))) -> (r3 = 2))))

axiom H8 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((sort = 1) -> (result3 = r)))))

axiom H9 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((sort = 1) -> (r4 = 4)))))

axiom H10 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((not (sort = 1)) -> ((sort = 8) -> (result4 = r))))))

axiom H11 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((not (sort = 1)) -> ((sort = 8) -> (r5 = 5))))))

axiom H12 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((not (sort = 1)) -> ((not (sort = 8)) ->
  (result5 = r))))))

axiom H13 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((not (sort = 1)) -> ((not (sort = 8)) -> (r6 = 0))))))

axiom H14 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((not (sort = 1)) -> ((not (sort = 8)) -> (r5 = r6))))))

axiom H15 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> ((not (sort = 1)) -> (r4 = r5)))))

axiom H16 : ((not (sort = 2)) -> ((not (sort = 4)) ->
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) -> (r3 = r4))))

axiom H17 : ((not (sort = 2)) -> ((not (sort = 4)) -> (r2 = r3)))

axiom H18 : ((not (sort = 2)) -> (r1 = r2))

axiom H19 : (real_world__example_a__result1 = real_world__example_a__result2)

axiom H20 : (real_world__example_a__result3 = real_world__example_a__result1)

axiom H21 : (result6 = real_world__example_a__result)

axiom H22 : (real_world__example_a__result1 = r1)

axiom H23 : (real_world__example_a__result4 = real_world__example_a__result2)

axiom H24 : (r7 = r1)

axiom H25 : (real_world__example_a__result5 = real_world__example_a__result3)

axiom H26 : (r8 = r1)

axiom H27 : (result7 = real_world__example_a__result4)

axiom H28 : (sort = 2)

 (* File "real_world.adb", line 6, characters 0-0 *)
goal WP_parameter_def : (real_world__example_a__result4 = 3)
