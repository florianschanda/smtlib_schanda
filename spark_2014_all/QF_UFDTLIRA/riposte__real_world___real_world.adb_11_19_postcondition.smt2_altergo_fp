(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type enum_a

predicate in_range1(x: int) = ((0 <= x) and (x <= 11))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : enum_a, enum_a -> bool

logic dummy : enum_a

type enum_a__ref = { enum_a__content : enum_a
}

function enum_a__ref___projection(a: enum_a__ref) : enum_a =
  (a).enum_a__content

type enum_b

predicate in_range2(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : enum_b, enum_b -> bool

logic dummy1 : enum_b

type enum_b__ref = { enum_b__content : enum_b
}

function enum_b__ref___projection(a: enum_b__ref) : enum_b =
  (a).enum_b__content

logic sort : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "real_world.adb", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall r:int. forall real_world__example_a__result:int. forall result:int.
  forall r1:int. forall result1:int. forall r2:int. forall result2:int.
  forall r3:int. forall result3:int. forall r4:int. forall result4:int.
  forall r5:int. forall result5:int. forall r6:int. forall result6:int.
  forall real_world__example_a__result1:int.
  forall real_world__example_a__result2:int.
  forall real_world__example_a__result3:int. forall r7:int.
  forall real_world__example_a__result4:int. forall r8:int.
  forall real_world__example_a__result5:int.
  (forall result7:int. ((in_range1(sort) and (((((0 <= 5) ->
  in_range2(r)) and ((((sort = 2) and ((result = r) and (r1 = 3))) or
  ((not (sort = 2)) and ((((sort = 4) and ((result1 = r) and (r2 = 1))) or
  ((not (sort = 4)) and (((((not (sort = 5)) -> ((not (sort = 9)) ->
  ((not (sort = 6)) -> (sort = 7)))) and ((result2 = r) and (r3 = 2))) or
  ((not ((not (sort = 5)) -> ((not (sort = 9)) -> ((not (sort = 6)) ->
  (sort = 7))))) and ((((sort = 1) and ((result3 = r) and (r4 = 4))) or
  ((not (sort = 1)) and ((((sort = 8) and ((result4 = r) and (r5 = 5))) or
  ((not (sort = 8)) and (((result5 = r) and (r6 = 0)) and (r5 = r6)))) and
  (r4 = r5)))) and (r3 = r4)))) and (r2 = r3)))) and (r1 = r2)))) and
  (((real_world__example_a__result1 = real_world__example_a__result2) and
  (real_world__example_a__result3 = real_world__example_a__result1)) and
  ((result6 = real_world__example_a__result) and
  (real_world__example_a__result1 = r1))))) and
  (((real_world__example_a__result4 = real_world__example_a__result2) and
  (r7 = r1)) and
  ((real_world__example_a__result5 = real_world__example_a__result3) and
  (r8 = r1)))) and (result7 = real_world__example_a__result4))) ->
  ((sort = 2) -> (real_world__example_a__result4 = 3)))))
