(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun recurse2 (Bool) Bool)
(declare-fun recurse2__function_guard (Bool Bool) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const res Bool)
(declare-const tmp Bool)
(declare-const o Bool)
(declare-const result Bool)
(declare-const tmp1 Bool)
(declare-const result1 Bool)
(declare-const tmp2 Bool)
(declare-const result2 Bool)
(declare-const res1 Bool)
(declare-const res2 Bool)
(declare-const tmp3 Bool)
(declare-const res3 Bool)
(declare-const tmp4 Bool)
(assert (=> (= (distinct 0 0) true) (= result tmp)))
(assert (=> (= (distinct 0 0) true) (= tmp1 (distinct 1 0))))
(assert (=> (not (= (distinct 0 0) true)) (= o (recurse2 (distinct 1 0)))))
(assert (=> (not (= (distinct 0 0) true)) (= result1 tmp)))
(assert (=> (not (= (distinct 0 0) true)) (= tmp2 o)))
(assert (=> (not (= (distinct 0 0) true)) (= tmp1 tmp2)))
(assert (= result2 res))
(assert (= res1 tmp1))
(assert (= tmp3 tmp1))
(assert (= res1 res2))
(assert (= tmp4 tmp1))
(assert (= res3 res1))
(assert (not (= res2 true)))
(check-sat)
(exit)
