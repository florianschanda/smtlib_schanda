(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

type t1b

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : t1b, t1b -> bool

logic dummy : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a: t1b__ref) : t1b = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type t2b

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t2b, t2b -> bool

logic dummy1 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref___projection(a: t2b__ref) : t2b = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

type t3b

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t3b, t3b -> bool

logic dummy2 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref___projection(a: t3b__ref) : t3b = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

type t4b

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : t4b, t4b -> bool

logic dummy3 : t4b

type t4b__ref = { t4b__content : t4b
}

function t4b__ref___projection(a: t4b__ref) : t4b = (a).t4b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type t5b

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : t5b, t5b -> bool

logic dummy4 : t5b

type t5b__ref = { t5b__content : t5b
}

function t5b__ref___projection(a: t5b__ref) : t5b = (a).t5b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

type t6b

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : t6b, t6b -> bool

logic dummy5 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref___projection(a: t6b__ref) : t6b = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

type t7b

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : t7b, t7b -> bool

logic dummy6 : t7b

type t7b__ref = { t7b__content : t7b
}

function t7b__ref___projection(a: t7b__ref) : t7b = (a).t7b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

type t8b

predicate in_range8(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : t8b, t8b -> bool

logic dummy7 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref___projection(a: t8b__ref) : t8b = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

logic prop__ : bool

logic i : int

logic j : int

logic i1 : int

logic j1 : int

logic i2 : int

logic j2 : int

logic i3 : int

logic j3 : int

logic temp___173 : int

logic temp___172 : bool

logic temp___169 : int

logic temp___168 : bool

logic temp___181 : int

logic temp___180 : bool

logic temp___177 : int

logic temp___176 : bool

logic temp___189 : int

logic temp___188 : bool

logic temp___185 : int

logic temp___184 : bool

logic temp___193 : int

logic temp___192 : bool

logic prop__1 : bool

logic j4 : int

logic j5 : int

logic j6 : int

logic result : int

logic i4 : int

logic result1 : bool

logic prop__2 : bool

logic result2 : int

logic j7 : int

logic prop__3 : bool

logic j8 : int

logic result3 : bool

logic prop__4 : bool

logic result4 : int

logic j9 : int

logic prop__5 : bool

logic j10 : int

logic prop__6 : bool

logic j11 : int

logic prop__7 : bool

logic j12 : int

logic prop__8 : bool

logic j13 : int

logic prop__9 : bool

logic j14 : int

logic prop__10 : bool

logic j15 : int

logic prop__11 : bool

logic i5 : int

logic j16 : int

logic result5 : int

logic i6 : int

logic result6 : bool

logic prop__12 : bool

logic result7 : int

logic j17 : int

logic prop__13 : bool

logic j18 : int

logic result8 : bool

logic prop__14 : bool

logic result9 : int

logic j19 : int

logic prop__15 : bool

logic j20 : int

logic prop__16 : bool

logic j21 : int

logic prop__17 : bool

logic i7 : int

logic j22 : int

logic prop__18 : bool

logic i8 : int

logic j23 : int

logic prop__19 : bool

logic i9 : int

logic j24 : int

logic prop__20 : bool

logic i10 : int

logic j25 : int

logic prop__21 : bool

logic i11 : int

logic j26 : int

logic prop__22 : bool

logic i12 : int

logic j27 : int

logic result10 : int

logic i13 : int

logic result11 : bool

logic prop__23 : bool

logic result12 : int

logic j28 : int

logic prop__24 : bool

logic j29 : int

logic result13 : bool

logic prop__25 : bool

logic result14 : int

logic j30 : int

logic prop__26 : bool

logic j31 : int

logic prop__27 : bool

logic j32 : int

logic prop__28 : bool

logic j33 : int

logic prop__29 : bool

logic j34 : int

logic prop__30 : bool

logic j35 : int

logic prop__31 : bool

logic j36 : int

logic prop__32 : bool

logic j37 : int

logic prop__33 : bool

logic j38 : int

logic prop__34 : bool

logic i14 : int

logic j39 : int

logic result15 : int

logic i15 : int

logic result16 : bool

logic prop__35 : bool

logic result17 : int

logic j40 : int

logic prop__36 : bool

logic j41 : int

logic result18 : bool

logic prop__37 : bool

logic result19 : int

logic j42 : int

logic prop__38 : bool

logic j43 : int

logic prop__39 : bool

logic j44 : int

logic prop__40 : bool

logic i16 : int

logic j45 : int

logic prop__41 : bool

logic i17 : int

logic j46 : int

logic prop__42 : bool

logic i18 : int

logic j47 : int

logic prop__43 : bool

logic i19 : int

logic j48 : int

logic prop__44 : bool

logic i20 : int

logic j49 : int

logic prop__45 : bool

logic i21 : int

logic j50 : int

logic result20 : int

logic i22 : int

logic result21 : bool

logic prop__46 : bool

logic result22 : int

logic j51 : int

logic prop__47 : bool

logic j52 : int

logic result23 : bool

logic prop__48 : bool

logic result24 : int

logic j53 : int

logic prop__49 : bool

logic j54 : int

logic prop__50 : bool

logic j55 : int

logic prop__51 : bool

logic j56 : int

logic prop__52 : bool

logic j57 : int

logic prop__53 : bool

logic j58 : int

logic prop__54 : bool

logic j59 : int

logic prop__55 : bool

logic j60 : int

logic prop__56 : bool

logic j61 : int

logic prop__57 : bool

logic i23 : int

logic j62 : int

logic result25 : int

logic i24 : int

logic result26 : bool

logic prop__58 : bool

logic result27 : int

logic j63 : int

logic prop__59 : bool

logic j64 : int

logic result28 : bool

logic prop__60 : bool

logic result29 : int

logic j65 : int

logic prop__61 : bool

logic j66 : int

logic prop__62 : bool

logic j67 : int

logic prop__63 : bool

logic i25 : int

logic j68 : int

logic prop__64 : bool

logic i26 : int

logic j69 : int

logic prop__65 : bool

logic i27 : int

logic j70 : int

logic prop__66 : bool

logic i28 : int

logic j71 : int

logic prop__67 : bool

logic i29 : int

logic j72 : int

logic prop__68 : bool

logic i30 : int

logic j73 : int

logic result30 : int

logic i31 : int

logic result31 : bool

logic prop__69 : bool

logic result32 : int

logic j74 : int

logic prop__70 : bool

logic j75 : int

logic result33 : bool

logic prop__71 : bool

logic result34 : int

logic j76 : int

logic prop__72 : bool

logic j77 : int

logic prop__73 : bool

logic j78 : int

logic prop__74 : bool

logic j79 : int

logic prop__75 : bool

logic j80 : int

logic prop__76 : bool

logic j81 : int

logic prop__77 : bool

logic j82 : int

logic prop__78 : bool

logic j83 : int

logic prop__79 : bool

logic j84 : int

logic prop__80 : bool

logic i32 : int

logic j85 : int

logic result35 : int

logic i33 : int

logic result36 : bool

logic prop__81 : bool

logic result37 : int

logic j86 : int

logic prop__82 : bool

logic j87 : int

logic result38 : bool

logic prop__83 : bool

logic result39 : int

logic j88 : int

logic prop__84 : bool

logic j89 : int

logic prop__85 : bool

logic j90 : int

axiom H : (result = i)

axiom H1 : (i4 = 1)

axiom H2 : (((1 <= i4) and (i4 <= 3)) -> (((temp___173 = i4) and
  ((temp___172 = prop__) and (((result1 = prop__) and
  (prop__2 = of_int(0))) and ((((result2 = j) and (j7 = 1)) and
  ((((1 <= j7) and (j7 <= 10)) -> ((((temp___169 = j7) and
  ((temp___168 = prop__2) and ((prop__3 = true) and ((((1 <= 10) ->
  in_range2(j8)) and ((1 <= j8) and (j8 <= 10))) and
  (((prop__3 = result3) and (prop__4 = of_int(1))) and (j8 = 10)))))) and
  (((j8 = j12) and (prop__4 = prop__7)) and ((j13 = j8) and
  (prop__8 = prop__4)))) and (((j14 = j12) and (prop__9 = prop__7)) and
  ((j15 = j13) and (prop__10 = prop__8))))) and ((not ((1 <= j7) and
  (j7 <= 10))) -> (((j7 = j14) and (prop__2 = prop__9)) and ((j15 = j7) and
  (prop__10 = prop__2)))))) and ((((1 <= 3) -> in_range1(i5)) and
  ((1 <= i5) and (i5 <= 3))) and (i5 = 3)))))) and (((j24 = j16) and
  ((i9 = i5) and (prop__19 = prop__11))) and ((j25 = j16) and ((i10 = i5) and
  (prop__20 = prop__11))))))

axiom H3 : (((1 <= i4) and (i4 <= 3)) -> (j26 = j24))

axiom H4 : (((1 <= i4) and (i4 <= 3)) -> (i11 = i9))

axiom H5 : (((1 <= i4) and (i4 <= 3)) -> (prop__21 = prop__19))

axiom H6 : (((1 <= i4) and (i4 <= 3)) -> (j27 = j25))

axiom H7 : (((1 <= i4) and (i4 <= 3)) -> (i12 = i10))

axiom H8 : (((1 <= i4) and (i4 <= 3)) -> (prop__22 = prop__20))

axiom H9 : ((not ((1 <= i4) and (i4 <= 3))) -> (j26 = j))

axiom H10 : ((not ((1 <= i4) and (i4 <= 3))) -> (i11 = i4))

axiom H11 : ((not ((1 <= i4) and (i4 <= 3))) -> (prop__21 = prop__))

axiom H12 : ((not ((1 <= i4) and (i4 <= 3))) -> (j27 = j4))

axiom H13 : ((not ((1 <= i4) and (i4 <= 3))) -> (i12 = i4))

axiom H14 : ((not ((1 <= i4) and (i4 <= 3))) -> (prop__22 = prop__1))

axiom H15 : (result10 = i1)

axiom H16 : (i13 = 1)

axiom H17 : (1 <= i13)

axiom H18 : (i13 <= 3)

axiom H19 : (result11 = prop__21)

axiom H20 : (prop__23 = of_int(1))

axiom H21 : (result12 = j1)

axiom H22 : (j28 = 1)

axiom H23 : (((1 <= j28) and (j28 <= 10)) -> (((temp___177 = j28) and
  ((temp___176 = prop__23) and ((prop__24 = true) and ((((1 <= 10) ->
  in_range4(j29)) and ((1 <= j29) and (j29 <= 10))) and
  (((result13 = prop__24) and (prop__25 = of_int(0))) and (j29 = 10)))))) and
  (((j35 = j29) and (prop__30 = prop__25)) and ((j36 = j29) and
  (prop__31 = prop__25)))))

axiom H24 : (((1 <= j28) and (j28 <= 10)) -> (j37 = j35))

axiom H25 : (((1 <= j28) and (j28 <= 10)) -> (prop__32 = prop__30))

axiom H26 : (((1 <= j28) and (j28 <= 10)) -> (j38 = j36))

axiom H27 : (((1 <= j28) and (j28 <= 10)) -> (prop__33 = prop__31))

axiom H28 : ((not ((1 <= j28) and (j28 <= 10))) -> (j37 = j28))

axiom H29 : ((not ((1 <= j28) and (j28 <= 10))) -> (prop__32 = prop__23))

axiom H30 : ((not ((1 <= j28) and (j28 <= 10))) -> (j38 = j28))

axiom H31 : ((not ((1 <= j28) and (j28 <= 10))) -> (prop__33 = prop__23))

axiom H32 : true

 (* File "simple_loops.adb", line 1, characters 0-0 *)
goal WP_parameter_def : true
