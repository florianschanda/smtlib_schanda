(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun ispresent (us_private) Bool)
(declare-fun ispresent__function_guard (Bool us_private) Bool)
(declare-sort statust 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (statust statust) Bool)
(declare-const dummy statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___2__projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant ((temp___expr_1792 Int) (temp___is_init_1789 Bool) (temp___skip_constant_1790 Bool) (temp___do_toplevel_1791 Bool)) Bool (=> (or (= temp___is_init_1789 true) (<= 0 8)) (in_range temp___expr_1792)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort enrolmentstates 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (enrolmentstates enrolmentstates) Bool)
(declare-const dummy1 enrolmentstates)
(declare-datatypes () ((enrolmentstates__ref (mk_enrolmentstates__ref (enrolmentstates__content enrolmentstates)))))
(define-fun enrolmentstates__ref___projection ((a enrolmentstates__ref)) enrolmentstates (enrolmentstates__content a))
(define-fun dynamic_invariant1 ((temp___expr_1798 Int) (temp___is_init_1795 Bool) (temp___skip_constant_1796 Bool) (temp___do_toplevel_1797 Bool)) Bool (=> (or (= temp___is_init_1795 true) (<= 0 2)) (in_range1 temp___expr_1798)))
(declare-const status Int)
(declare-const state us_private)
(declare-const status1 Int)
(declare-const state1 us_private)
(declare-const result Bool)
(declare-const state2 us_private)
(declare-const state3 us_private)
(declare-const state4 us_private)
(declare-const filestate us_private)
(declare-const state5 us_private)
(declare-const result1 Int)
(declare-const status2 Int)
(declare-const state6 us_private)
(declare-const state7 us_private)
(declare-const filestate1 us_private)
(declare-const state8 us_private)
(declare-const status3 Int)
(declare-const state9 us_private)
(declare-const filestate2 us_private)
(declare-const state10 us_private)
(declare-const state11 us_private)
(declare-const state12 us_private)
(declare-const status4 Int)
(declare-const state13 us_private)
(declare-const filestate3 us_private)
(declare-const state14 us_private)
(declare-const state15 us_private)
(declare-const state16 us_private)
(assert (in_range status))
(assert (in_range1 status))
(assert (= result (ispresent state)))
(assert (=> (= result true) (= result1 status)))
(assert (=> (= result true) (= status2 1)))
(assert (=> (not (= result true)) (= state3 state6)))
(assert (=> (not (= result true)) (= state2 state)))
(assert (=> (not (= result true)) (= state5 state8)))
(assert (=> (not (= result true)) (= filestate filestate1)))
(assert (=> (not (= result true)) (= state4 state7)))
(assert (=> (not (= result true)) (= status2 status)))
(assert (=> (not (= result true)) (= state3 state6)))
(assert (=> (not (= result true)) (= state2 state1)))
(assert (=> (not (= result true)) (= state5 state8)))
(assert (=> (not (= result true)) (= filestate filestate1)))
(assert (=> (not (= result true)) (= state4 state7)))
(assert (=> (not (= result true)) (= status2 status1)))
(assert (= state12 state3))
(assert (= state11 state2))
(assert (= state10 state5))
(assert (= filestate2 filestate))
(assert (= state9 state4))
(assert (= status2 status3))
(assert (= state16 state3))
(assert (= state15 state2))
(assert (= state14 state5))
(assert (= filestate3 filestate))
(assert (= state13 state4))
(assert (= status4 status2))
(assert (not (in_range1 status3)))
(check-sat)
(exit)
