(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t1b 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (t1b t1b) Bool)
(declare-const dummy t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-fun f (Bool Int) Bool)
(declare-fun f__function_guard (Bool Bool Int) Bool)
(assert true)
(declare-const o Bool)
(declare-const i Int)
(declare-const o1 Bool)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const o6 Bool)
(declare-const o7 Bool)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const result Bool)
(declare-const o11 Bool)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 Bool)
(declare-const o12 Bool)
(declare-const result3 Int)
(declare-const i2 Int)
(declare-const result4 Bool)
(declare-const o13 Bool)
(declare-const result5 Int)
(declare-const i3 Int)
(declare-const result6 Bool)
(declare-const o14 Bool)
(declare-const result7 Int)
(declare-const i4 Int)
(declare-const result8 Bool)
(declare-const o15 Bool)
(declare-const result9 Int)
(declare-const i5 Int)
(declare-const result10 Bool)
(declare-const o16 Bool)
(declare-const result11 Int)
(declare-const i6 Int)
(declare-const result12 Bool)
(declare-const o17 Bool)
(declare-const result13 Int)
(declare-const i7 Int)
(declare-const result14 Bool)
(declare-const o18 Bool)
(declare-const result15 Int)
(declare-const i8 Int)
(declare-const result16 Bool)
(declare-const o19 Bool)
(declare-const result17 Int)
(declare-const i9 Int)
(declare-const result18 Bool)
(declare-const o20 Bool)
(declare-const result19 int__ref)
(declare-const i10 Int)
(assert (= result o))
(assert (= o11 (of_int 0)))
(assert (= result1 i))
(assert (= i1 1))
(assert (not true))
(check-sat)
(exit)
