(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t4b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t4b t4b) Bool)
(declare-const dummy1 t4b)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content t4b)))))
(define-fun t4b__ref___projection ((a t4b__ref)) t4b (t4b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const o Int)
(declare-const temp___163 Int)
(declare-const temp___164 Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const j1 Int)
(declare-const result1 Int)
(declare-const j2 Int)
(declare-const j3 Int)
(declare-const i Int)
(declare-const temp___168 Int)
(declare-const rho Int)
(declare-const result2 Int)
(declare-const temp___1681 Int)
(declare-const result3 Int)
(declare-const i1 Int)
(declare-const i2 Int)
(declare-const temp___1641 Int)
(declare-const result4 Int)
(declare-const temp___1642 Int)
(declare-const i3 Int)
(declare-const i4 Int)
(declare-const rho1 Int)
(declare-const i5 Int)
(declare-const i6 Int)
(declare-const rho2 Int)
(declare-const result5 Int)
(declare-const j4 Int)
(assert (= result j))
(assert (= j1 2))
(assert (in_range1 j1))
(assert (< j1 5))
(assert (and (= o (+ j1 1)) (in_range1 (+ j1 1))))
(assert (= result1 j1))
(assert (= j2 o))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 j3)))
(assert (= result2 temp___168))
(assert (= temp___1681 j3))
(assert (= i result3))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= temp___163 i1)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= 0 temp___164)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (and (=> (<= 1 5) (in_range2 i2)) (and (<= 1 i2) (<= i2 5)))))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= temp___1641 result4)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= temp___1642 i2)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (=> (= (distinct 1 0) true) (not (= (distinct 1 0) true)))))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= i2 5)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= rho1 temp___1642)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= rho2 rho1)))
(assert (=> (and (<= 1 i1) (<= i1 5)) (= i6 i4)))
(assert (=> (not (and (<= 1 i1) (<= i1 5))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 5))) (= rho2 rho)))
(assert (=> (not (and (<= 1 i1) (<= i1 5))) (= i6 i1)))
(assert (< j3 5))
(assert (and (= o1 (+ j3 1)) (in_range1 (+ j3 1))))
(assert (= result5 j3))
(assert (= j4 o1))
(assert (not (< temp___1681 j4)))
(check-sat)
(exit)
