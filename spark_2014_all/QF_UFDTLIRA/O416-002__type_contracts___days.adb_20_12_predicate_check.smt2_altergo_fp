(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type day

predicate in_range1(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : day, day -> bool

logic dummy : day

type day__ref = { day__content : day
}

function day__ref___projection(a: day__ref) : day = (a).day__content

type t_day

predicate in_range2(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t_day, t_day -> bool

logic dummy1 : t_day

type t_day__ref = { t_day__content : t_day
}

function t_day__ref___projection(a: t_day__ref) : t_day = (a).t_day__content

logic i1s : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "days.adb", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall d:int. forall tmp:int. forall o:bool. forall o1:bool.
  forall temp___171:int. forall o2:bool. forall o3:bool. forall o4:bool.
  forall result:int. forall tmp1:int. forall tmp2:int. forall result1:bool.
  forall tmp3:int. forall tmp4:int. forall result2:bool. forall tmp5:int.
  forall tmp6:int. forall tmp7:int. forall tmp8:int. ((in_range2(i1s) and
  (((1 <= i1s) and (i1s <= 1)) or ((3 <= i1s) and (i1s <= 3)))) ->
  ((in_range2(d) and (((1 <= d) and (d <= 1)) or ((3 <= d) and (d <= 3)))) ->
  (((result = tmp) and (tmp1 = d)) -> (in_range1(tmp1) -> (in_range1(tmp2) ->
  ((((((o = true) <-> (((1 <= tmp2) and (tmp2 <= 1)) or ((3 <= tmp2) and
  (tmp2 <= 3)))) and ((in_range2(tmp2) and (o1 = o)) or
  ((not in_range2(tmp2)) and (o1 = false)))) and (((not (o1 = true)) and
  (result1 = true)) or ((o1 = true) and (result1 = false)))) and
  (((result1 = true) and ((((temp___171 = tmp2) and ((((0 <= 6) ->
  in_range1(tmp3)) and (in_range2(tmp3) -> (not (((1 <= tmp3) and
  (tmp3 <= 1)) or ((3 <= tmp3) and (tmp3 <= 3)))))) and (in_range1(tmp4) and
  ((((((o2 = true) <-> (((1 <= tmp4) and (tmp4 <= 1)) or ((3 <= tmp4) and
  (tmp4 <= 3)))) and ((in_range2(tmp4) and (o3 = o2)) or
  ((not in_range2(tmp4)) and (o3 = false)))) and (((not (o3 = true)) and
  (o4 = true)) or ((o3 = true) and (o4 = false)))) and
  (((not (o4 = true)) and (result2 = true)) or ((o4 = true) and
  (result2 = false)))) and (result2 = true))))) and ((tmp4 = tmp5) and
  (tmp6 = tmp4))) and ((tmp7 = tmp5) and (tmp8 = tmp6)))) or
  ((not (result1 = true)) and ((tmp2 = tmp7) and (tmp8 = tmp2))))) ->
  (((1 <= tmp7) and (tmp7 <= 1)) or ((3 <= tmp7) and (tmp7 <= 3))))))))))
