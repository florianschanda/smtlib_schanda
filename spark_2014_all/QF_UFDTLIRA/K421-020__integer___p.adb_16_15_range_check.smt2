(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort s1 0)
(define-fun in_range1 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (s1 s1) Bool)
(declare-const dummy1 s1)
(declare-datatypes () ((s1__ref (mk_s1__ref (s1__content s1)))))
(define-fun s1__ref___projection ((a s1__ref)) s1 (s1__content a))
(define-fun dynamic_invariant1 ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= 1 10)) (in_range1 temp___expr_135)))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort s2 0)
(define-fun in_range2 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (s2 s2) Bool)
(declare-const dummy2 s2)
(declare-datatypes () ((s2__ref (mk_s2__ref (s2__content s2)))))
(define-fun s2__ref___projection ((a s2__ref)) s2 (s2__content a))
(define-fun dynamic_invariant2 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 1 10)) (in_range2 temp___expr_141)))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort ttmp3S 0)
(define-fun in_range3 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 5)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (ttmp3S ttmp3S) Bool)
(declare-const dummy3 ttmp3S)
(declare-datatypes () ((ttmp3S__ref (mk_ttmp3S__ref (ttmp3S__content ttmp3S)))))
(define-fun ttmp3S__ref___projection ((a ttmp3S__ref)) ttmp3S (ttmp3S__content a))
(define-fun dynamic_invariant3 ((temp___expr_147 Int) (temp___is_init_144 Bool) (temp___skip_constant_145 Bool) (temp___do_toplevel_146 Bool)) Bool (=> (or (= temp___is_init_144 true) (<= 1 5)) (in_range3 temp___expr_147)))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort ttmp4S 0)
(define-fun in_range4 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (ttmp4S ttmp4S) Bool)
(declare-const dummy4 ttmp4S)
(declare-datatypes () ((ttmp4S__ref (mk_ttmp4S__ref (ttmp4S__content ttmp4S)))))
(define-fun ttmp4S__ref___projection ((a ttmp4S__ref)) ttmp4S (ttmp4S__content a))
(define-fun dynamic_invariant4 ((temp___expr_153 Int) (temp___is_init_150 Bool) (temp___skip_constant_151 Bool) (temp___do_toplevel_152 Bool)) Bool (=> (or (= temp___is_init_150 true) (<= 1 5)) (in_range4 temp___expr_153)))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort ttmp5S 0)
(define-fun in_range5 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 5)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (ttmp5S ttmp5S) Bool)
(declare-const dummy5 ttmp5S)
(declare-datatypes () ((ttmp5S__ref (mk_ttmp5S__ref (ttmp5S__content ttmp5S)))))
(define-fun ttmp5S__ref___projection ((a ttmp5S__ref)) ttmp5S (ttmp5S__content a))
(define-fun dynamic_invariant5 ((temp___expr_159 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 1 5)) (in_range5 temp___expr_159)))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const tmp1 Int)
(declare-const tmp2 Int)
(declare-const tmp3 Int)
(declare-const tmp4 Int)
(declare-const tmp5 Int)
(declare-const o Int)
(declare-const result Int)
(declare-const tmp11 Int)
(assert (in_range x))
(assert (in_range y))
(assert (=> (<= 1 10) (in_range1 tmp1)))
(assert (=> (<= 1 10) (in_range2 tmp2)))
(assert (=> (<= 1 5) (in_range3 tmp3)))
(assert (=> (<= 1 5) (in_range4 tmp4)))
(assert (=> (<= 1 5) (in_range5 tmp5)))
(assert (and (= o x) (in_range1 x)))
(assert (= result tmp1))
(assert (= tmp11 o))
(assert (not (in_range2 y)))
(check-sat)
(exit)
