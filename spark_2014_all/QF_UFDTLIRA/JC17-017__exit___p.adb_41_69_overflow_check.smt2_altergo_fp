(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic z : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t3b

predicate in_range2(x1: int) = ((1 <= x1) and (x1 <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x1:int. forall y1:int [bool_eq3(x1, y1)]. (((x1 = y1) ->
  (bool_eq3(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq3(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t3b, t3b -> bool

logic dummy1 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref___projection(a: t3b__ref) : t3b = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

type t4b

predicate in_range3(x1: int) = ((1 <= x1) and (x1 <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x1:int. forall y1:int [bool_eq4(x1, y1)]. (((x1 = y1) ->
  (bool_eq4(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq4(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t4b, t4b -> bool

logic dummy2 : t4b

type t4b__ref = { t4b__content : t4b
}

function t4b__ref___projection(a: t4b__ref) : t4b = (a).t4b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type t6b

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x1:int. forall y1:int [bool_eq5(x1, y1)]. (((x1 = y1) ->
  (bool_eq5(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq5(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : t6b, t6b -> bool

logic dummy3 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref___projection(a: t6b__ref) : t6b = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall k:int. forall temp___157:int. forall result:int. forall k1:int.
  forall k2:int. forall k3:int. forall k4:int. forall k5:int. forall k6:int.
  (in_range1(x) -> (in_range1(y) -> (in_range1(z) -> ((((((10 <= x) and
  (x <= 1000)) and (0 <  y)) and (z <  0)) and ((y + z) <= 1000)) -> (((({
  int__content = result } = { int__content = k }) and (k1 = 1)) and
  ((((1 <= k1) and (k1 <= 10)) and ((((temp___157 = k1) and ((k2 <= x) and
  ((((1 <= 10) -> in_range3(k2)) and ((1 <= k2) and (k2 <= 10))) and
  (((k2 <  y) and ((k2 <  z) and (z <  y))) or (((k2 <  y) -> ((k2 <  z) ->
  (not (z <  y)))) and (k2 = 10)))))) and ((k2 = k3) and (k4 = k2))) and (({
  int__content = k5 } = { int__content = k3 }) and (k6 = k4)))) or
  ((not ((1 <= k1) and (k1 <= 10))) and ((k1 = k5) and (k6 = k1))))) ->
  in_range1((y + z))))))))
