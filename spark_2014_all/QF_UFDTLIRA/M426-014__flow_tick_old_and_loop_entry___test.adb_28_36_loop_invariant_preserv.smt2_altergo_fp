(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic x : int

logic i : int

logic j : int

logic temp___142 : int

logic temp___1421 : int

logic temp___1422 : int

logic temp___1423 : int

logic temp___1424 : int

logic temp___1425 : int

logic temp___1426 : int

logic temp___1427 : int

logic temp___1428 : int

logic result : int

logic i1 : int

logic result1 : int

logic x1 : int

logic result2 : int

logic j1 : int

logic j2 : int

logic result3 : int

logic j3 : int

logic j4 : int

logic j5 : int

logic j6 : int

logic j7 : int

logic j8 : int

logic j9 : int

logic result4 : int

logic i2 : int

logic result5 : int

logic x2 : int

logic result6 : int

logic j10 : int

logic j11 : int

logic result7 : int

logic j12 : int

logic j13 : int

logic j14 : int

logic j15 : int

logic j16 : int

logic j17 : int

logic j18 : int

logic j19 : int

logic j20 : int

logic result8 : int

logic i3 : int

logic result9 : int

logic x3 : int

logic result10 : int

logic j21 : int

logic j22 : int

logic result11 : int

logic j23 : int

logic j24 : int

logic j25 : int

logic j26 : int

logic j27 : int

logic j28 : int

logic j29 : int

logic j30 : int

logic j31 : int

logic result12 : int

logic i4 : int

logic result13 : int

logic x4 : int

logic result14 : int

logic j32 : int

logic j33 : int

logic result15 : int

logic j34 : int

logic j35 : int

logic j36 : int

logic j37 : int

logic j38 : int

logic j39 : int

logic j40 : int

logic j41 : int

logic j42 : int

logic result16 : int

logic i5 : int

logic result17 : int

logic x5 : int

logic result18 : int

logic j43 : int

logic j44 : int

logic result19 : int

logic j45 : int

logic j46 : int

logic j47 : int

logic j48 : int

logic j49 : int

logic j50 : int

logic j51 : int

logic j52 : int

logic j53 : int

logic result20 : int

logic i6 : int

logic result21 : int

logic x6 : int

logic result22 : int

logic j54 : int

logic j55 : int

logic result23 : int

logic j56 : int

logic j57 : int

logic j58 : int

logic j59 : int

logic j60 : int

logic j61 : int

logic j62 : int

logic j63 : int

logic j64 : int

logic result24 : int

logic i7 : int

logic result25 : int

logic x7 : int

logic result26 : int

logic j65 : int

logic j66 : int

logic result27 : int

logic j67 : int

logic j68 : int

logic j69 : int

logic j70 : int

logic j71 : int

logic j72 : int

logic j73 : int

logic j74 : int

logic j75 : int

logic result28 : int

logic i8 : int

logic result29 : int

logic x8 : int

logic result30 : int

logic j76 : int

logic j77 : int

logic result31 : int

logic j78 : int

logic j79 : int

logic j80 : int

logic j81 : int

logic j82 : int

logic j83 : int

logic j84 : int

logic j85 : int

logic j86 : int

logic result32 : int

logic i9 : int

logic result33 : int

logic x9 : int

logic result34 : int

logic j87 : int

logic j88 : int

logic result35 : int

logic j89 : int

logic j90 : int

logic j91 : int

logic j92 : int

logic j93 : int

logic j94 : int

logic j95 : int

logic j96 : int

logic j97 : int

logic result36 : int

logic i10 : int

logic result37 : int

logic x10 : int

logic result38 : int

logic j98 : int

logic j99 : int

logic result39 : int

logic j100 : int

logic j101 : int

logic j102 : int

axiom H : (((- 2147483648) <= 2147483647) -> in_range1(x))

axiom H1 : (result = i)

axiom H2 : (i1 = 1)

axiom H3 : (result1 = x)

axiom H4 : (x1 = 0)

axiom H5 : (result2 = j)

axiom H6 : (j1 = (- 2147483648))

axiom H7 : ((- 2147483648) <= j1)

axiom H8 : (j1 <= 2147483647)

axiom H9 : (x1 = x)

axiom H10 : ((((- 2147483648) <= 2147483647) -> in_range1(j2)) and
  (((- 2147483648) <= j2) and (j2 <= 2147483647)))

axiom H11 : (not (j2 = 2147483647))

axiom H12 : (result3 = j2)

axiom H13 : (j3 = (j2 + 1))

 (* File "test.adb", line 13, characters 0-0 *)
goal WP_parameter_def : (x1 = x)
