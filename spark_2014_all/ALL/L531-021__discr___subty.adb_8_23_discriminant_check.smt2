;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort enum 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (enum enum) Bool)

(declare-const dummy2 enum)

(declare-datatypes ((enum__ref 0)) (((mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))

(declare-fun to_rep1 (enum) Int)

(declare-fun of_rep1 (Int) enum)

;; inversion_axiom
  (assert
  (forall ((x enum)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x enum)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__basic__r__x enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__basic__r__x
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__basic__r__base integer)(rec__basic__r__a_field integer)(rec__basic__r__c_field1 Bool)(rec__basic__r__c_field2 natural)))))
(define-fun us_split_fields_Base__projection ((a us_split_fields)) integer
  (rec__basic__r__base a))

(define-fun us_split_fields_A_Field__projection ((a us_split_fields)) integer
  (rec__basic__r__a_field a))

(define-fun us_split_fields_C_Field1__projection ((a us_split_fields)) Bool
  (rec__basic__r__c_field1 a))

(define-fun us_split_fields_C_Field2__projection ((a us_split_fields)) natural
  (rec__basic__r__c_field2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun basic__r__a_field__pred ((a us_rep)) Bool (= (to_rep1
                                                         (rec__basic__r__x
                                                         (us_split_discrs1 a))) 0))

(define-fun basic__r__c_field1__pred ((a us_rep)) Bool (= (to_rep1
                                                          (rec__basic__r__x
                                                          (us_split_discrs1
                                                          a))) 2))

(define-fun basic__r__c_field2__pred ((a us_rep)) Bool (= (to_rep1
                                                          (rec__basic__r__x
                                                          (us_split_discrs1
                                                          a))) 2))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep1 (rec__basic__r__x (us_split_discrs1 a)))
                        (to_rep1 (rec__basic__r__x (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__basic__r__base (us_split_fields1 a)))
                        (to_rep (rec__basic__r__base (us_split_fields1 b)))))
                        (=> (basic__r__a_field__pred a)
                        (= (to_rep
                           (rec__basic__r__a_field (us_split_fields1 a)))
                        (to_rep
                        (rec__basic__r__a_field (us_split_fields1 b))))))
                        (=> (basic__r__c_field1__pred a)
                        (= (rec__basic__r__c_field1 (us_split_fields1 a))
                        (rec__basic__r__c_field1 (us_split_fields1 b)))))
                        (=> (basic__r__c_field2__pred a)
                        (= (to_rep2
                           (rec__basic__r__c_field2 (us_split_fields1 a)))
                        (to_rep2
                        (rec__basic__r__c_field2 (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const basic__r__x__first__bit Int)

(declare-const basic__r__x__last__bit Int)

(declare-const basic__r__x__position Int)

;; basic__r__x__first__bit_axiom
  (assert (<= 0 basic__r__x__first__bit))

;; basic__r__x__last__bit_axiom
  (assert (< basic__r__x__first__bit basic__r__x__last__bit))

;; basic__r__x__position_axiom
  (assert (<= 0 basic__r__x__position))

(declare-const basic__r__base__first__bit Int)

(declare-const basic__r__base__last__bit Int)

(declare-const basic__r__base__position Int)

;; basic__r__base__first__bit_axiom
  (assert (<= 0 basic__r__base__first__bit))

;; basic__r__base__last__bit_axiom
  (assert (< basic__r__base__first__bit basic__r__base__last__bit))

;; basic__r__base__position_axiom
  (assert (<= 0 basic__r__base__position))

(declare-const basic__r__a_field__first__bit Int)

(declare-const basic__r__a_field__last__bit Int)

(declare-const basic__r__a_field__position Int)

;; basic__r__a_field__first__bit_axiom
  (assert (<= 0 basic__r__a_field__first__bit))

;; basic__r__a_field__last__bit_axiom
  (assert (< basic__r__a_field__first__bit basic__r__a_field__last__bit))

;; basic__r__a_field__position_axiom
  (assert (<= 0 basic__r__a_field__position))

(declare-const basic__r__c_field1__first__bit Int)

(declare-const basic__r__c_field1__last__bit Int)

(declare-const basic__r__c_field1__position Int)

;; basic__r__c_field1__first__bit_axiom
  (assert (<= 0 basic__r__c_field1__first__bit))

;; basic__r__c_field1__last__bit_axiom
  (assert (< basic__r__c_field1__first__bit basic__r__c_field1__last__bit))

;; basic__r__c_field1__position_axiom
  (assert (<= 0 basic__r__c_field1__position))

(declare-const basic__r__c_field2__first__bit Int)

(declare-const basic__r__c_field2__last__bit Int)

(declare-const basic__r__c_field2__position Int)

;; basic__r__c_field2__first__bit_axiom
  (assert (<= 0 basic__r__c_field2__first__bit))

;; basic__r__c_field2__last__bit_axiom
  (assert (< basic__r__c_field2__first__bit basic__r__c_field2__last__bit))

;; basic__r__c_field2__position_axiom
  (assert (<= 0 basic__r__c_field2__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((r__ref 0)) (((mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(define-fun in_range3 ((rec__basic__r__x1 Int)
  (a us_rep)) Bool (= rec__basic__r__x1 (to_rep1
                                        (rec__basic__r__x
                                        (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const basic__r__x__first__bit1 Int)

(declare-const basic__r__x__last__bit1 Int)

(declare-const basic__r__x__position1 Int)

;; basic__r__x__first__bit_axiom
  (assert (<= 0 basic__r__x__first__bit1))

;; basic__r__x__last__bit_axiom
  (assert (< basic__r__x__first__bit1 basic__r__x__last__bit1))

;; basic__r__x__position_axiom
  (assert (<= 0 basic__r__x__position1))

(declare-const basic__r__c_field1__first__bit1 Int)

(declare-const basic__r__c_field1__last__bit1 Int)

(declare-const basic__r__c_field1__position1 Int)

;; basic__r__c_field1__first__bit_axiom
  (assert (<= 0 basic__r__c_field1__first__bit1))

;; basic__r__c_field1__last__bit_axiom
  (assert (< basic__r__c_field1__first__bit1 basic__r__c_field1__last__bit1))

;; basic__r__c_field1__position_axiom
  (assert (<= 0 basic__r__c_field1__position1))

(declare-const basic__r__c_field2__first__bit1 Int)

(declare-const basic__r__c_field2__last__bit1 Int)

(declare-const basic__r__c_field2__position1 Int)

;; basic__r__c_field2__first__bit_axiom
  (assert (<= 0 basic__r__c_field2__first__bit1))

;; basic__r__c_field2__last__bit_axiom
  (assert (< basic__r__c_field2__first__bit1 basic__r__c_field2__last__bit1))

;; basic__r__c_field2__position_axiom
  (assert (<= 0 basic__r__c_field2__position1))

(declare-const basic__r__base__first__bit1 Int)

(declare-const basic__r__base__last__bit1 Int)

(declare-const basic__r__base__position1 Int)

;; basic__r__base__first__bit_axiom
  (assert (<= 0 basic__r__base__first__bit1))

;; basic__r__base__last__bit_axiom
  (assert (< basic__r__base__first__bit1 basic__r__base__last__bit1))

;; basic__r__base__position_axiom
  (assert (<= 0 basic__r__base__position1))

(declare-const basic__r__a_field__first__bit1 Int)

(declare-const basic__r__a_field__last__bit1 Int)

(declare-const basic__r__a_field__position1 Int)

;; basic__r__a_field__first__bit_axiom
  (assert (<= 0 basic__r__a_field__first__bit1))

;; basic__r__a_field__last__bit_axiom
  (assert (< basic__r__a_field__first__bit1 basic__r__a_field__last__bit1))

;; basic__r__a_field__position_axiom
  (assert (<= 0 basic__r__a_field__position1))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((s__ref 0)) (((mk_s__ref (s__content us_rep)))))
(define-fun s__ref___projection ((a s__ref)) us_rep (s__content a))

(define-fun dynamic_invariant ((temp___expr_160 us_rep)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (not (= temp___skip_constant_158 true))
                                      (in_range3 0 temp___expr_160)))

(define-fun default_initial_assumption ((temp___expr_162 us_rep)
  (temp___skip_top_level_163 Bool)) Bool (= (to_rep1
                                            (rec__basic__r__x
                                            (us_split_discrs1
                                            temp___expr_162))) 0))

(declare-const v us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range4 ((rec__basic__r__x1 Int)
  (a us_rep)) Bool (= rec__basic__r__x1 (to_rep1
                                        (rec__basic__r__x
                                        (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const basic__r__x__first__bit2 Int)

(declare-const basic__r__x__last__bit2 Int)

(declare-const basic__r__x__position2 Int)

;; basic__r__x__first__bit_axiom
  (assert (<= 0 basic__r__x__first__bit2))

;; basic__r__x__last__bit_axiom
  (assert (< basic__r__x__first__bit2 basic__r__x__last__bit2))

;; basic__r__x__position_axiom
  (assert (<= 0 basic__r__x__position2))

(declare-const basic__r__c_field1__first__bit2 Int)

(declare-const basic__r__c_field1__last__bit2 Int)

(declare-const basic__r__c_field1__position2 Int)

;; basic__r__c_field1__first__bit_axiom
  (assert (<= 0 basic__r__c_field1__first__bit2))

;; basic__r__c_field1__last__bit_axiom
  (assert (< basic__r__c_field1__first__bit2 basic__r__c_field1__last__bit2))

;; basic__r__c_field1__position_axiom
  (assert (<= 0 basic__r__c_field1__position2))

(declare-const basic__r__c_field2__first__bit2 Int)

(declare-const basic__r__c_field2__last__bit2 Int)

(declare-const basic__r__c_field2__position2 Int)

;; basic__r__c_field2__first__bit_axiom
  (assert (<= 0 basic__r__c_field2__first__bit2))

;; basic__r__c_field2__last__bit_axiom
  (assert (< basic__r__c_field2__first__bit2 basic__r__c_field2__last__bit2))

;; basic__r__c_field2__position_axiom
  (assert (<= 0 basic__r__c_field2__position2))

(declare-const basic__r__base__first__bit2 Int)

(declare-const basic__r__base__last__bit2 Int)

(declare-const basic__r__base__position2 Int)

;; basic__r__base__first__bit_axiom
  (assert (<= 0 basic__r__base__first__bit2))

;; basic__r__base__last__bit_axiom
  (assert (< basic__r__base__first__bit2 basic__r__base__last__bit2))

;; basic__r__base__position_axiom
  (assert (<= 0 basic__r__base__position2))

(declare-const basic__r__a_field__first__bit2 Int)

(declare-const basic__r__a_field__last__bit2 Int)

(declare-const basic__r__a_field__position2 Int)

;; basic__r__a_field__first__bit_axiom
  (assert (<= 0 basic__r__a_field__first__bit2))

;; basic__r__a_field__last__bit_axiom
  (assert (< basic__r__a_field__first__bit2 basic__r__a_field__last__bit2))

;; basic__r__a_field__position_axiom
  (assert (<= 0 basic__r__a_field__position2))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((t1b__ref 0)) (((mk_t1b__ref (t1b__content us_rep)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep (t1b__content a))

(declare-const z__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 2)) (in_range2 temp___expr_135)))

(declare-const z__split_fields integer)

(declare-const z__split_fields1 integer)

(declare-const z__split_fields2 Bool)

(declare-const z__split_fields3 natural)

(declare-const o enum)

(declare-const o1 integer)

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const o4 integer)

(declare-const o5 Bool)

(declare-const o6 natural)

(declare-const o7 enum)

(declare-const o8 enum)

(declare-const o9 integer)

(declare-const o10 integer)

(declare-const o11 Bool)

(declare-const o12 natural)

(declare-const o13 enum)

(declare-const o14 integer)

(declare-const o15 integer)

(declare-const o16 Bool)

(declare-const o17 natural)

(declare-const o18 enum)

(declare-const o19 integer)

(declare-const o20 integer)

(declare-const o21 Bool)

(declare-const o22 natural)

(declare-const subty__p__z__assume enum)

(declare-const subty__p__z__assume1 integer)

(declare-const subty__p__z__assume2 integer)

(declare-const subty__p__z__assume3 Bool)

(declare-const subty__p__z__assume4 natural)

(declare-const result integer)

(declare-const result1 integer)

(declare-const result2 Bool)

(declare-const result3 natural)

(declare-const z__split_fields4 us_split_fields)

(define-fun o23 () us_rep (mk___rep (mk___split_discrs o18)
                          (mk___split_fields o19 o20 o21 o22)))

(define-fun o24 () us_rep (mk___rep (mk___split_discrs o13)
                          (mk___split_fields o14 o15 o16 o17)))

;; H
  (assert (= 0 (to_rep1 (rec__basic__r__x (us_split_discrs1 v)))))

;; H
  (assert (= (to_rep o1) 1))

;; H
  (assert (= (to_rep o2) 1))

;; H
  (assert (= o2 o3))

;; H
  (assert (= o1 o4))

;; H
  (assert (= true o5))

;; H
  (assert (= dummy1 o6))

;; H
  (assert (= (to_rep1 o) 0))

;; H
  (assert (= o o7))

;; H
  (assert (= o8 o7))

;; H
  (assert (= o9 o3))

;; H
  (assert (= o10 o4))

;; H
  (assert (= o11 o5))

;; H
  (assert (= o12 o6))

;; H
  (assert
  (= o24 (mk___rep (mk___split_discrs o8) (mk___split_fields o9 o10 o11 o12))))

;; H
  (assert (= o23 o24))

;; H
  (assert
  (= (mk___rep (mk___split_discrs subty__p__z__assume)
     (mk___split_fields subty__p__z__assume1 subty__p__z__assume2
     subty__p__z__assume3 subty__p__z__assume4)) o23))

;; H
  (assert (= result z__split_fields))

;; H
  (assert (= result1 z__split_fields1))

;; H
  (assert (= result2 z__split_fields2))

;; H
  (assert (= result3 z__split_fields3))

;; H
  (assert
  (= z__split_fields4 (mk___split_fields subty__p__z__assume1
                      subty__p__z__assume2 subty__p__z__assume3
                      subty__p__z__assume4)))

;; H
  (assert (= z__split_discrs (mk___split_discrs subty__p__z__assume)))

;; H
  (assert (= 0 (to_rep1 (rec__basic__r__x z__split_discrs))))

;; H
  (assert (= (to_rep1 (rec__basic__r__x z__split_discrs)) 0))

;; H
  (assert (= (to_rep (rec__basic__r__base z__split_fields4)) 1))

(assert
;; WP_parameter_def
 ;; File "subty.ads", line 5, characters 0-0
  (not (= (to_rep1 (rec__basic__r__x z__split_discrs)) 0)))
(check-sat)
(exit)
