;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_201 (_ BitVec 64))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool true)

(declare-const var (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const bottom (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const range_size (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const matched Bool)

(declare-const i (_ BitVec 64))

(declare-const inrange2__inrange64__result Bool)

(declare-const temp___205 (_ BitVec 64))

(declare-const temp___204 Bool)

(declare-const temp___206 (_ BitVec 64))

(declare-const result Bool)

(declare-const matched1 Bool)

(declare-const result1 (_ BitVec 64))

(declare-const i1 (_ BitVec 64))

(declare-const temp___2061 (_ BitVec 64))

(declare-const result2 Bool)

(declare-const matched2 Bool)

(declare-const result3 (_ BitVec 64))

(declare-const i2 (_ BitVec 64))

(declare-const matched3 Bool)

(declare-const i3 (_ BitVec 64))

(declare-const temp___2062 (_ BitVec 64))

(declare-const result4 (_ BitVec 64))

(declare-const temp___2063 (_ BitVec 64))

(declare-const result5 Bool)

(declare-const matched4 Bool)

(declare-const result6 (_ BitVec 64))

(declare-const i4 (_ BitVec 64))

(declare-const matched5 Bool)

(declare-const matched6 Bool)

(declare-const matched7 Bool)

(declare-const i5 (_ BitVec 64))

(declare-const temp___2064 (_ BitVec 64))

(declare-const matched8 Bool)

(declare-const i6 (_ BitVec 64))

(declare-const temp___2065 (_ BitVec 64))

(declare-const matched9 Bool)

(declare-const i7 (_ BitVec 64))

(declare-const matched10 Bool)

(declare-const i8 (_ BitVec 64))

(declare-const matched11 Bool)

(declare-const i9 t__ref)

(declare-const matched12 Bool)

(declare-const i10 (_ BitVec 64))

(declare-const result7 bool__ref)

(declare-const inrange2__inrange64__result1 Bool)

(declare-const inrange2__inrange64__result2 bool__ref)

(declare-const inrange2__inrange64__result3 Bool)

(declare-const matched13 bool__ref)

(declare-const i11 t__ref)

(declare-const inrange2__inrange64__result4 bool__ref)

(declare-const matched14 Bool)

(declare-const i12 (_ BitVec 64))

(declare-const inrange2__inrange64__result5 Bool)

(define-fun matched15 () bool__ref (mk_bool__ref matched11))

(define-fun i13 () t__ref (mk_t__ref i7))

(define-fun matched16 () bool__ref (mk_bool__ref matched9))

(define-fun temp___2066 () t__ref (mk_t__ref temp___2064))

(define-fun i14 () t__ref (mk_t__ref i5))

(define-fun matched17 () bool__ref (mk_bool__ref matched7))

(define-fun matched18 () bool__ref (mk_bool__ref matched5))

(define-fun result8 () t__ref (mk_t__ref result1))

(define-fun result9 () bool__ref (mk_bool__ref result))

(define-fun temp___2067 () t__ref (mk_t__ref temp___206))

(define-fun inrange2__inrange64__result6 () bool__ref (mk_bool__ref
                                                      inrange2__inrange64__result))

(define-fun i15 () t__ref (mk_t__ref i))

(define-fun matched19 () bool__ref (mk_bool__ref matched))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and (bvuge range_size ((_ int2bv 64) 2))
  (bvule range_size ((_ int2bv 64) 65535))))

;; H
  (assert (= result9 matched19))

;; H
  (assert (= matched1 (of_int 0)))

;; H
  (assert (= result8 i15))

;; H
  (assert (= i1 ((_ int2bv 64) 0)))

;; H
  (assert true)

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true))) (= temp___205 i1)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (= temp___204 matched1)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (= ((_ int2bv 64) 0) temp___206)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (or
  (and
  (and
  (and (= temp___2066 temp___2067) (and (= i1 i5) (= matched2 matched7)))
  (and (= temp___2065 temp___2061) (and (= i6 i1) (= matched8 matched2))))
  (and (= var (bvadd bottom i1))
  (and (= matched1 result2) (= matched2 (of_int 1)))))
  (and (and (not (= var (bvadd bottom i1))) (= matched2 matched1))
  (and
  (and
  (and (= temp___2063 temp___2064) (and (= i3 i5) (= matched17 matched18)))
  (and (= temp___2065 temp___2063) (and (= i6 i3) (= matched8 matched6))))
  (and (and (= i1 result3) (= i2 (bvadd i1 ((_ int2bv 64) 1))))
  (and
  (and
  (= (= matched3 true)
  (exists ((n (_ BitVec 64)))
  (and
  (and (bvule ((_ int2bv 64) 0) n) (bvule n (bvsub i3 ((_ int2bv 64) 1))))
  (= var (bvadd bottom n))))) (not (= matched3 true)))
  (and (and (= temp___2062 result4) (= temp___2063 i3))
  (or
  (and (and (= matched3 matched5) (= matched6 matched3))
  (not (and (bvult i3 range_size) (not (= matched3 true)))))
  (and (and (bvult i3 range_size) (not (= matched3 true)))
  (and (and (= matched4 matched5) (= matched6 matched4))
  (and (= var (bvadd bottom i3))
  (and (= matched3 result5) (= matched4 (of_int 1)))))))))))))))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i13 i14)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (= matched16 matched17)))

;; H
  (assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i8 i6)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (= matched10 matched8)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i9 i13)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (= matched15 matched16)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i10 i8)))

;; H
  (assert
  (=> (and (bvult i1 range_size) (not (= matched1 true)))
  (= matched12 matched10)))

;; H
  (assert
  (=> (not (and (bvult i1 range_size) (not (= matched1 true))))
  (= i9 (mk_t__ref i1))))

;; H
  (assert
  (=> (not (and (bvult i1 range_size) (not (= matched1 true))))
  (= matched1 matched11)))

;; H
  (assert
  (=> (not (and (bvult i1 range_size) (not (= matched1 true)))) (= i10 i1)))

;; H
  (assert
  (=> (not (and (bvult i1 range_size) (not (= matched1 true))))
  (= matched12 matched1)))

;; H
  (assert
  (= inrange2__inrange64__result2 (mk_bool__ref inrange2__inrange64__result1)))

;; H
  (assert (= inrange2__inrange64__result3 inrange2__inrange64__result1))

;; H
  (assert (= result7 inrange2__inrange64__result6))

;; H
  (assert (= inrange2__inrange64__result1 matched11))

;; H
  (assert (= inrange2__inrange64__result4 inrange2__inrange64__result2))

;; H
  (assert (= i11 i9))

;; H
  (assert (= matched13 matched15))

;; H
  (assert (= inrange2__inrange64__result5 inrange2__inrange64__result3))

;; H
  (assert (= i12 i10))

;; H
  (assert (= matched14 matched12))

;; H
  (assert (bvule ((_ int2bv 64) 0) (bvsub range_size ((_ int2bv 64) 1))))

(assert
;; WP_parameter_def
 ;; File "inrange2.ads", line 15, characters 0-0
  (not (bvuge ((_ int2bv 64) 0) ((_ int2bv 64) 0))))
(check-sat)
(exit)
