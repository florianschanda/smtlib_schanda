;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort et1 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (et1 et1) Bool)

(declare-const dummy et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort et2 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 25)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (et2 et2) Bool)

(declare-const dummy1 et2)

(declare-datatypes () ((et2__ref (mk_et2__ref (et2__content et2)))))
(define-fun et2__ref___projection ((a et2__ref)) et2 (et2__content a))

(define-fun dynamic_invariant ((temp___expr_182 Int)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)) Bool (=>
                                      (or (= temp___is_init_179 true)
                                      (<= 1 25)) (in_range1 temp___expr_182)))

(declare-fun to_rep1 (et2) Int)

(declare-fun of_rep1 (Int) et2)

;; inversion_axiom
  (assert
  (forall ((x et2)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x et2)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__ar__rec1t__f1 et1)(rec__ar__rec1t__g1 et2)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) et1
  (rec__ar__rec1t__f1 a))

(define-fun us_split_fields_G1__projection ((a us_split_fields)) et2
  (rec__ar__rec1t__g1 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__ar__rec1t__f1 (us_split_fields1 a)))
                        (to_rep (rec__ar__rec1t__f1 (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ar__rec1t__g1 (us_split_fields1 a)))
                        (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const ar__rec1t__f1__first__bit Int)

(declare-const ar__rec1t__f1__last__bit Int)

(declare-const ar__rec1t__f1__position Int)

;; ar__rec1t__f1__first__bit_axiom
  (assert (<= 0 ar__rec1t__f1__first__bit))

;; ar__rec1t__f1__last__bit_axiom
  (assert (< ar__rec1t__f1__first__bit ar__rec1t__f1__last__bit))

;; ar__rec1t__f1__position_axiom
  (assert (<= 0 ar__rec1t__f1__position))

(declare-const ar__rec1t__g1__first__bit Int)

(declare-const ar__rec1t__g1__last__bit Int)

(declare-const ar__rec1t__g1__position Int)

;; ar__rec1t__g1__first__bit_axiom
  (assert (<= 0 ar__rec1t__g1__first__bit))

;; ar__rec1t__g1__last__bit_axiom
  (assert (< ar__rec1t__g1__first__bit ar__rec1t__g1__last__bit))

;; ar__rec1t__g1__position_axiom
  (assert (<= 0 ar__rec1t__g1__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((rec1t__ref (mk_rec1t__ref (rec1t__content us_rep)))))
(define-fun rec1t__ref___projection ((a rec1t__ref)) us_rep (rec1t__content
                                                            a))

(declare-sort et3 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 10 x) (<= x 90)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (et3 et3) Bool)

(declare-const dummy3 et3)

(declare-datatypes () ((et3__ref (mk_et3__ref (et3__content et3)))))
(define-fun et3__ref___projection ((a et3__ref)) et3 (et3__content a))

(declare-fun to_rep2 (et3) Int)

(declare-fun of_rep2 (Int) et3)

;; inversion_axiom
  (assert
  (forall ((x et3)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x et3)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort enum1ta 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (enum1ta enum1ta) Bool)

(declare-const dummy4 enum1ta)

(declare-datatypes ()
((enum1ta__ref (mk_enum1ta__ref (enum1ta__content enum1ta)))))
(define-fun enum1ta__ref___projection ((a enum1ta__ref)) enum1ta (enum1ta__content
                                                                 a))

(declare-fun to_rep3 (enum1ta) Int)

(declare-fun of_rep3 (Int) enum1ta)

;; inversion_axiom
  (assert
  (forall ((x enum1ta))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x enum1ta)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__ar__rec2t__f2 et3)(rec__ar__rec2t__g2 us_rep)(rec__ar__rec2t__h2 enum1ta)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) et3
  (rec__ar__rec2t__f2 a))

(define-fun us_split_fields_G2__projection ((a us_split_fields2)) us_rep
  (rec__ar__rec2t__g2 a))

(define-fun us_split_fields_H2__projection ((a us_split_fields2)) enum1ta
  (rec__ar__rec2t__h2 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__ar__rec2t__f2 (us_split_fields3 a)))
                         (to_rep2 (rec__ar__rec2t__f2 (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__ar__rec2t__g2 (us_split_fields3 a))
                            (rec__ar__rec2t__g2 (us_split_fields3 b))) true))
                         (= (to_rep3
                            (rec__ar__rec2t__h2 (us_split_fields3 a)))
                         (to_rep3 (rec__ar__rec2t__h2 (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const ar__rec2t__f2__first__bit Int)

(declare-const ar__rec2t__f2__last__bit Int)

(declare-const ar__rec2t__f2__position Int)

;; ar__rec2t__f2__first__bit_axiom
  (assert (<= 0 ar__rec2t__f2__first__bit))

;; ar__rec2t__f2__last__bit_axiom
  (assert (< ar__rec2t__f2__first__bit ar__rec2t__f2__last__bit))

;; ar__rec2t__f2__position_axiom
  (assert (<= 0 ar__rec2t__f2__position))

(declare-const ar__rec2t__g2__first__bit Int)

(declare-const ar__rec2t__g2__last__bit Int)

(declare-const ar__rec2t__g2__position Int)

;; ar__rec2t__g2__first__bit_axiom
  (assert (<= 0 ar__rec2t__g2__first__bit))

;; ar__rec2t__g2__last__bit_axiom
  (assert (< ar__rec2t__g2__first__bit ar__rec2t__g2__last__bit))

;; ar__rec2t__g2__position_axiom
  (assert (<= 0 ar__rec2t__g2__position))

(declare-const ar__rec2t__h2__first__bit Int)

(declare-const ar__rec2t__h2__last__bit Int)

(declare-const ar__rec2t__h2__position Int)

;; ar__rec2t__h2__first__bit_axiom
  (assert (<= 0 ar__rec2t__h2__first__bit))

;; ar__rec2t__h2__last__bit_axiom
  (assert (< ar__rec2t__h2__first__bit ar__rec2t__h2__last__bit))

;; ar__rec2t__h2__position_axiom
  (assert (<= 0 ar__rec2t__h2__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ()
((rec2t__ref (mk_rec2t__ref (rec2t__content us_rep1)))))
(define-fun rec2t__ref___projection ((a rec2t__ref)) us_rep1 (rec2t__content
                                                             a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range temp___expr_176)))

(define-fun dynamic_invariant2 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= 10 90)) (in_range2
                                      temp___expr_188)))

(define-fun dynamic_invariant3 ((temp___expr_212 Int)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)) Bool (=>
                                      (or (= temp___is_init_209 true)
                                      (<= 1 4)) (in_range3 temp___expr_212)))

(declare-const r__split_fields et3)

(declare-const r__split_fields1 et1)

(declare-const r__split_fields2 et2)

(declare-const r__split_fields3 enum1ta)

(declare-const temp Int)

(declare-const o Int)

(declare-const o1 et1)

(declare-const o2 et1)

(declare-const o3 et2)

(declare-const o4 et1)

(declare-const o5 et2)

(declare-const o6 et3)

(declare-const o7 et1)

(declare-const o8 et2)

(declare-const o9 enum1ta)

(declare-const temp___6702 et3)

(declare-const temp___67021 et1)

(declare-const temp___67022 et2)

(declare-const temp___67023 enum1ta)

(declare-const o10 et2)

(declare-const o11 et1)

(declare-const o12 et2)

(declare-const o13 et1)

(declare-const o14 et2)

(declare-const o15 et3)

(declare-const o16 et1)

(declare-const o17 et2)

(declare-const o18 enum1ta)

(declare-const temp___6705 us_rep1)

(declare-const result int__ref)

(declare-const temp1 Int)

(declare-const result1 us_split_fields__ref1)

(declare-const r__split_fields4 us_split_fields2)

(declare-const result2 us_split_fields__ref1)

(declare-const r__split_fields5 us_split_fields2)

(declare-const r__split_fields6 us_split_fields__ref1)

(declare-const temp2 int__ref)

(declare-const r__split_fields7 us_split_fields2)

(declare-const temp3 Int)

;; H
  (assert (in_range1 (to_rep r__split_fields1)))

;; H
  (assert (=> (<= 1 25) (in_range1 temp)))

;; H
  (assert
  (and (= o (to_rep r__split_fields1)) (in_range1 (to_rep r__split_fields1))))

;; H
  (assert (= result (mk_int__ref temp)))

;; H
  (assert (= temp1 o))

;; H
  (assert (= (to_rep o1) (to_rep1 r__split_fields2)))

;; H
  (assert (= o1 o2))

;; H
  (assert (= r__split_fields2 o3))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

;; H
  (assert (= r__split_fields o6))

;; H
  (assert (= o7 o4))

;; H
  (assert (= o8 o5))

;; H
  (assert (= r__split_fields3 o9))

;; H
  (assert (= temp___6702 o6))

;; H
  (assert (= temp___67021 o7))

;; H
  (assert (= temp___67022 o8))

;; H
  (assert (= temp___67023 o9))

;; H
  (assert
  (= result1 (mk___split_fields__ref1
             (mk___split_fields1 r__split_fields
             (mk___rep (mk___split_fields r__split_fields1 r__split_fields2))
             r__split_fields3))))

;; H
  (assert
  (= r__split_fields4 (mk___split_fields1 temp___6702
                      (mk___rep
                      (mk___split_fields temp___67021 temp___67022))
                      temp___67023)))

;; H
  (assert (= (to_rep1 o10) temp1))

;; H
  (assert
  (= (rec__ar__rec1t__f1
     (us_split_fields1 (rec__ar__rec2t__g2 r__split_fields4))) o11))

;; H
  (assert (= o10 o12))

;; H
  (assert (= o13 o11))

;; H
  (assert (= o14 o12))

;; H
  (assert (= (rec__ar__rec2t__f2 r__split_fields4) o15))

;; H
  (assert (= o16 o13))

;; H
  (assert (= o17 o14))

;; H
  (assert (= (rec__ar__rec2t__h2 r__split_fields4) o18))

;; H
  (assert
  (= temp___6705 (mk___rep1
                 (mk___split_fields1 o15
                 (mk___rep (mk___split_fields o16 o17)) o18))))

;; H
  (assert (= result2 (mk___split_fields__ref1 r__split_fields4)))

;; H
  (assert (= r__split_fields5 (us_split_fields3 temp___6705)))

;; H
  (assert (= temp2 (mk_int__ref temp1)))

;; H
  (assert (= r__split_fields6 (mk___split_fields__ref1 r__split_fields5)))

;; H
  (assert (= temp3 temp1))

;; H
  (assert (= r__split_fields7 r__split_fields5))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 800, characters 0-0
  (not
  (= (bool_eq1 (mk___rep1 (us_split_fields__content1 r__split_fields6))
     (mk___rep1
     (mk___split_fields1 r__split_fields
     (mk___rep
     (mk___split_fields (of_rep (to_rep1 r__split_fields2))
     (of_rep1 (to_rep r__split_fields1)))) r__split_fields3))) true)))
(check-sat)
(exit)
