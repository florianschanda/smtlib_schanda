;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort cell 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (cell cell) Bool)

(declare-const dummy cell)

(declare-datatypes ((cell__ref 0)) (((mk_cell__ref (cell__content cell)))))
(define-fun cell__ref___projection ((a cell__ref)) cell (cell__content a))

(declare-fun to_rep (cell) Int)

(declare-fun of_rep (Int) cell)

;; inversion_axiom
  (assert
  (forall ((x cell)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x cell)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort shape 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (shape shape) Bool)

(declare-const dummy1 shape)

(declare-datatypes ((shape__ref 0))
(((mk_shape__ref (shape__content shape)))))
(define-fun shape__ref___projection ((a shape__ref)) shape (shape__content a))

(declare-fun to_rep1 (shape) Int)

(declare-fun of_rep1 (Int) shape)

;; inversion_axiom
  (assert
  (forall ((x shape))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x shape)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort three_shape 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 3 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (three_shape three_shape) Bool)

(declare-const dummy2 three_shape)

(declare-datatypes ((three_shape__ref 0))
(((mk_three_shape__ref (three_shape__content three_shape)))))
(define-fun three_shape__ref___projection ((a three_shape__ref)) three_shape
  (three_shape__content a))

(declare-sort x_coord 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (x_coord x_coord) Bool)

(declare-const dummy3 x_coord)

(declare-datatypes ((x_coord__ref 0))
(((mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a x_coord__ref)) x_coord (x_coord__content
                                                                 a))

(declare-sort y_coord 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (y_coord y_coord) Bool)

(declare-const dummy4 y_coord)

(declare-datatypes ((y_coord__ref 0))
(((mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content
                                                                 a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int cell))))))
(declare-fun slide ((Array Int cell) Int Int) (Array Int cell))

;; slide_eq
  (assert
  (forall ((a (Array Int cell)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int cell)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int cell) Int Int (Array Int cell) Int
  Int) (Array Int cell))

;; concat_def
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (cell Int) (Array Int cell))

;; singleton_def
  (assert
  (forall ((v cell))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int cell)) (a__first Int) (a__last Int)
  (b (Array Int cell)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int cell) Int Int (Array Int cell) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy5 (Array Int cell))

(declare-const value__size Int)

(declare-fun object__size ((Array Int cell)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int cell)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int cell)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int cell))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int cell))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int cell))) (<= 0 (object__alignment a))))

(declare-fun user_eq5 ((Array Int cell) (Array Int cell)) Bool)

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int (Array Int cell)))))))
(declare-fun slide1 ((Array Int (Array Int cell)) Int
  Int) (Array Int (Array Int cell)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int cell))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int cell))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int cell)) Int Int
  (Array Int (Array Int cell)) Int Int) (Array Int (Array Int cell)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int cell) Int) (Array Int (Array Int cell)))

;; singleton_def
  (assert
  (forall ((v (Array Int cell)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int cell))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int cell))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133) 1 10
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133) 1 10
     (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort px_coord 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 1) x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (px_coord px_coord) Bool)

(declare-const dummy6 px_coord)

(declare-datatypes ((px_coord__ref 0))
(((mk_px_coord__ref (px_coord__content px_coord)))))
(define-fun px_coord__ref___projection ((a px_coord__ref)) px_coord (px_coord__content
                                                                    a))

(declare-fun to_rep2 (px_coord) Int)

(declare-fun of_rep2 (Int) px_coord)

;; inversion_axiom
  (assert
  (forall ((x px_coord))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x px_coord)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort py_coord 0)

(define-fun in_range7 ((x Int)) Bool (and (<= (- 1) x) (<= x 49)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (py_coord py_coord) Bool)

(declare-const dummy7 py_coord)

(declare-datatypes ((py_coord__ref 0))
(((mk_py_coord__ref (py_coord__content py_coord)))))
(define-fun py_coord__ref___projection ((a py_coord__ref)) py_coord (py_coord__content
                                                                    a))

(declare-fun to_rep3 (py_coord) Int)

(declare-fun of_rep3 (Int) py_coord)

;; inversion_axiom
  (assert
  (forall ((x py_coord))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x py_coord)) (! (in_range7 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort direction 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (direction direction) Bool)

(declare-const dummy8 direction)

(declare-datatypes ((direction__ref 0))
(((mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction
  (direction__content a))

(declare-fun to_rep4 (direction) Int)

(declare-fun of_rep4 (Int) direction)

;; inversion_axiom
  (assert
  (forall ((x direction))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x direction)) (! (in_range8
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__tetris_flow__piece__s shape)(rec__tetris_flow__piece__d direction)(rec__tetris_flow__piece__x px_coord)(rec__tetris_flow__piece__y py_coord)))))
(define-fun us_split_fields_S__projection ((a us_split_fields)) shape
  (rec__tetris_flow__piece__s a))

(define-fun us_split_fields_D__projection ((a us_split_fields)) direction
  (rec__tetris_flow__piece__d a))

(define-fun us_split_fields_X__projection ((a us_split_fields)) px_coord
  (rec__tetris_flow__piece__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) py_coord
  (rec__tetris_flow__piece__y a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__tetris_flow__piece__s (us_split_fields1 a)))
                        (to_rep1
                        (rec__tetris_flow__piece__s (us_split_fields1 b))))
                        (= (to_rep4
                           (rec__tetris_flow__piece__d (us_split_fields1 a)))
                        (to_rep4
                        (rec__tetris_flow__piece__d (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__tetris_flow__piece__x (us_split_fields1 a)))
                        (to_rep2
                        (rec__tetris_flow__piece__x (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__tetris_flow__piece__y (us_split_fields1 a)))
                        (to_rep3
                        (rec__tetris_flow__piece__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const tetris_flow__piece__s__first__bit Int)

(declare-const tetris_flow__piece__s__last__bit Int)

(declare-const tetris_flow__piece__s__position Int)

;; tetris_flow__piece__s__first__bit_axiom
  (assert (<= 0 tetris_flow__piece__s__first__bit))

;; tetris_flow__piece__s__last__bit_axiom
  (assert
  (< tetris_flow__piece__s__first__bit tetris_flow__piece__s__last__bit))

;; tetris_flow__piece__s__position_axiom
  (assert (<= 0 tetris_flow__piece__s__position))

(declare-const tetris_flow__piece__d__first__bit Int)

(declare-const tetris_flow__piece__d__last__bit Int)

(declare-const tetris_flow__piece__d__position Int)

;; tetris_flow__piece__d__first__bit_axiom
  (assert (<= 0 tetris_flow__piece__d__first__bit))

;; tetris_flow__piece__d__last__bit_axiom
  (assert
  (< tetris_flow__piece__d__first__bit tetris_flow__piece__d__last__bit))

;; tetris_flow__piece__d__position_axiom
  (assert (<= 0 tetris_flow__piece__d__position))

(declare-const tetris_flow__piece__x__first__bit Int)

(declare-const tetris_flow__piece__x__last__bit Int)

(declare-const tetris_flow__piece__x__position Int)

;; tetris_flow__piece__x__first__bit_axiom
  (assert (<= 0 tetris_flow__piece__x__first__bit))

;; tetris_flow__piece__x__last__bit_axiom
  (assert
  (< tetris_flow__piece__x__first__bit tetris_flow__piece__x__last__bit))

;; tetris_flow__piece__x__position_axiom
  (assert (<= 0 tetris_flow__piece__x__position))

(declare-const tetris_flow__piece__y__first__bit Int)

(declare-const tetris_flow__piece__y__last__bit Int)

(declare-const tetris_flow__piece__y__position Int)

;; tetris_flow__piece__y__first__bit_axiom
  (assert (<= 0 tetris_flow__piece__y__first__bit))

;; tetris_flow__piece__y__last__bit_axiom
  (assert
  (< tetris_flow__piece__y__first__bit tetris_flow__piece__y__last__bit))

;; tetris_flow__piece__y__position_axiom
  (assert (<= 0 tetris_flow__piece__y__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((piece__ref 0))
(((mk_piece__ref (piece__content us_rep)))))
(define-fun piece__ref___projection ((a piece__ref)) us_rep (piece__content
                                                            a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort map1 0)

(declare-datatypes ((map__ref2 0)) (((mk_map__ref2 (map__content2 map1)))))
(declare-fun get (map1 Int Int) Bool)

(declare-fun set (map1 Int Int Bool) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a Bool))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a Bool))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide2 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide2 a old_first new_first old_first_2 new_first_2) i j)
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide2 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_134 Int)
                             (temp___idx_135 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_134)
                             (<= temp___idx_134 a__last))
                             (and (<= a__first_2 temp___idx_135)
                             (<= temp___idx_135 a__last_2)))
                             (= (get a temp___idx_134 temp___idx_135)
                             (get b (+ (- b__first a__first) temp___idx_134)
                             (+ (- b__first_2 a__first_2) temp___idx_135))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_134 Int) (temp___idx_135 Int))
  (=>
  (and (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (and (<= a__first_2 temp___idx_135) (<= temp___idx_135 a__last_2)))
  (= (get a temp___idx_134 temp___idx_135) (get b
                                           (+ (- b__first a__first) temp___idx_134)
                                           (+ (- b__first_2 a__first_2) temp___idx_135))))))))))

(declare-const dummy10 map1)

(declare-const value__size2 Int)

(declare-fun object__size2 (map1) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 (map1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 (map1 map1) Bool)

(declare-datatypes ((map__ref3 0))
(((mk_map__ref3 (map__content3 (Array Int map1))))))
(declare-fun slide3 ((Array Int map1) Int Int) (Array Int map1))

;; slide_eq
  (assert
  (forall ((a (Array Int map1)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int map1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int map1) Int Int (Array Int map1) Int
  Int) (Array Int map1))

;; concat_def
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (map1 Int) (Array Int map1))

;; singleton_def
  (assert
  (forall ((v map1))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int map1)) (a__first Int) (a__last Int)
  (b (Array Int map1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_136 Int))
                           (=>
                           (and (<= a__first temp___idx_136)
                           (<= temp___idx_136 a__last))
                           (= (bool_eq3 (select a temp___idx_136) 0 3 0 3
                              (select b (+ (- b__first a__first) temp___idx_136))
                              0 3 0 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_136 Int))
  (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last))
  (= (bool_eq3 (select a temp___idx_136) 0 3 0 3
     (select b (+ (- b__first a__first) temp___idx_136)) 0 3 0 3) true))))))))

(declare-const possible_i_shapes (Array Int map1))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun tetris_flow__possible_i_shapes__aggregate_def (map1 map1 map1
  map1) (Array Int map1))

;; def_axiom
  (assert
  (forall ((temp___138 map1) (temp___139 map1) (temp___140 map1)
  (temp___141 map1))
  (let ((temp___137 (tetris_flow__possible_i_shapes__aggregate_def temp___138
                    temp___139 temp___140 temp___141)))
  (and
  (and
  (and (= (select temp___137 0) temp___138)
  (= (select temp___137 1) temp___139)) (= (select temp___137 2) temp___140))
  (= (select temp___137 3) temp___141)))))

(declare-fun temp___143 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___145 Bool) (temp___146 Bool) (temp___147 Bool)
  (temp___148 Bool) (temp___149 Bool) (temp___150 Bool) (temp___151 Bool)
  (temp___152 Bool) (temp___153 Bool) (temp___154 Bool) (temp___155 Bool)
  (temp___156 Bool) (temp___157 Bool) (temp___158 Bool) (temp___159 Bool)
  (temp___160 Bool))
  (let ((temp___144 (temp___143 temp___145 temp___146 temp___147 temp___148
                    temp___149 temp___150 temp___151 temp___152 temp___153
                    temp___154 temp___155 temp___156 temp___157 temp___158
                    temp___159 temp___160)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___144 0 0) temp___145)
  (= (get temp___144 0 1) temp___146)) (= (get temp___144 0 2) temp___147))
  (= (get temp___144 0 3) temp___148))
  (and
  (and
  (and (= (get temp___144 1 0) temp___149)
  (= (get temp___144 1 1) temp___150)) (= (get temp___144 1 2) temp___151))
  (= (get temp___144 1 3) temp___152)))
  (and
  (and
  (and (= (get temp___144 2 0) temp___153)
  (= (get temp___144 2 1) temp___154)) (= (get temp___144 2 2) temp___155))
  (= (get temp___144 2 3) temp___156)))
  (and
  (and
  (and (= (get temp___144 3 0) temp___157)
  (= (get temp___144 3 1) temp___158)) (= (get temp___144 3 2) temp___159))
  (= (get temp___144 3 3) temp___160))))))

(declare-fun temp___163 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___165 Bool) (temp___166 Bool) (temp___167 Bool)
  (temp___168 Bool) (temp___169 Bool) (temp___170 Bool) (temp___171 Bool)
  (temp___172 Bool) (temp___173 Bool) (temp___174 Bool) (temp___175 Bool)
  (temp___176 Bool) (temp___177 Bool) (temp___178 Bool) (temp___179 Bool)
  (temp___180 Bool))
  (let ((temp___164 (temp___163 temp___165 temp___166 temp___167 temp___168
                    temp___169 temp___170 temp___171 temp___172 temp___173
                    temp___174 temp___175 temp___176 temp___177 temp___178
                    temp___179 temp___180)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___164 0 0) temp___165)
  (= (get temp___164 0 1) temp___166)) (= (get temp___164 0 2) temp___167))
  (= (get temp___164 0 3) temp___168))
  (and
  (and
  (and (= (get temp___164 1 0) temp___169)
  (= (get temp___164 1 1) temp___170)) (= (get temp___164 1 2) temp___171))
  (= (get temp___164 1 3) temp___172)))
  (and
  (and
  (and (= (get temp___164 2 0) temp___173)
  (= (get temp___164 2 1) temp___174)) (= (get temp___164 2 2) temp___175))
  (= (get temp___164 2 3) temp___176)))
  (and
  (and
  (and (= (get temp___164 3 0) temp___177)
  (= (get temp___164 3 1) temp___178)) (= (get temp___164 3 2) temp___179))
  (= (get temp___164 3 3) temp___180))))))

(declare-fun temp___183 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___185 Bool) (temp___186 Bool) (temp___187 Bool)
  (temp___188 Bool) (temp___189 Bool) (temp___190 Bool) (temp___191 Bool)
  (temp___192 Bool) (temp___193 Bool) (temp___194 Bool) (temp___195 Bool)
  (temp___196 Bool) (temp___197 Bool) (temp___198 Bool) (temp___199 Bool)
  (temp___200 Bool))
  (let ((temp___184 (temp___183 temp___185 temp___186 temp___187 temp___188
                    temp___189 temp___190 temp___191 temp___192 temp___193
                    temp___194 temp___195 temp___196 temp___197 temp___198
                    temp___199 temp___200)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___184 0 0) temp___185)
  (= (get temp___184 0 1) temp___186)) (= (get temp___184 0 2) temp___187))
  (= (get temp___184 0 3) temp___188))
  (and
  (and
  (and (= (get temp___184 1 0) temp___189)
  (= (get temp___184 1 1) temp___190)) (= (get temp___184 1 2) temp___191))
  (= (get temp___184 1 3) temp___192)))
  (and
  (and
  (and (= (get temp___184 2 0) temp___193)
  (= (get temp___184 2 1) temp___194)) (= (get temp___184 2 2) temp___195))
  (= (get temp___184 2 3) temp___196)))
  (and
  (and
  (and (= (get temp___184 3 0) temp___197)
  (= (get temp___184 3 1) temp___198)) (= (get temp___184 3 2) temp___199))
  (= (get temp___184 3 3) temp___200))))))

(declare-fun temp___203 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___205 Bool) (temp___206 Bool) (temp___207 Bool)
  (temp___208 Bool) (temp___209 Bool) (temp___210 Bool) (temp___211 Bool)
  (temp___212 Bool) (temp___213 Bool) (temp___214 Bool) (temp___215 Bool)
  (temp___216 Bool) (temp___217 Bool) (temp___218 Bool) (temp___219 Bool)
  (temp___220 Bool))
  (let ((temp___204 (temp___203 temp___205 temp___206 temp___207 temp___208
                    temp___209 temp___210 temp___211 temp___212 temp___213
                    temp___214 temp___215 temp___216 temp___217 temp___218
                    temp___219 temp___220)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___204 0 0) temp___205)
  (= (get temp___204 0 1) temp___206)) (= (get temp___204 0 2) temp___207))
  (= (get temp___204 0 3) temp___208))
  (and
  (and
  (and (= (get temp___204 1 0) temp___209)
  (= (get temp___204 1 1) temp___210)) (= (get temp___204 1 2) temp___211))
  (= (get temp___204 1 3) temp___212)))
  (and
  (and
  (and (= (get temp___204 2 0) temp___213)
  (= (get temp___204 2 1) temp___214)) (= (get temp___204 2 2) temp___215))
  (= (get temp___204 2 3) temp___216)))
  (and
  (and
  (and (= (get temp___204 3 0) temp___217)
  (= (get temp___204 3 1) temp___218)) (= (get temp___204 3 2) temp___219))
  (= (get temp___204 3 3) temp___220))))))

(declare-const dummy11 map1)

(declare-const value__size3 Int)

(declare-fun object__size3 (map1) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 (map1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq11 (map1 map1) Bool)

(declare-sort map2 0)

(declare-datatypes ((map__ref4 0)) (((mk_map__ref4 (map__content4 map2)))))
(declare-fun get1 (map2 Int Int) map1)

(declare-fun set1 (map2 Int Int map1) map2)

;; Select_eq
  (assert
  (forall ((m map2))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a map1))
  (! (= (get1 (set1 m i j a) i j) a) :pattern ((set1 m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map2))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a map1))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get1 (set1 m i j a) i2 j2) (get1 m i2 j2))) :pattern ((get1
                                                               (set1 m i j a)
                                                               i2 j2)) :pattern (
  (set1 m i j a) (get1 m i2 j2)) ))))))

(declare-fun slide4 (map2 Int Int Int Int) map2)

;; slide_def
  (assert
  (forall ((a map2))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j)
  (get1 a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq5 ((a map2) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map2) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_223 Int)
                             (temp___idx_224 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_223)
                             (<= temp___idx_223 a__last))
                             (and (<= a__first_2 temp___idx_224)
                             (<= temp___idx_224 a__last_2)))
                             (= (bool_eq3
                                (get1 a temp___idx_223 temp___idx_224) 0 2 0
                                2
                                (get1 b
                                (+ (- b__first a__first) temp___idx_223)
                                (+ (- b__first_2 a__first_2) temp___idx_224))
                                0 2 0 2) true))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map2) (b map2))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq5 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_223 Int) (temp___idx_224 Int))
  (=>
  (and (and (<= a__first temp___idx_223) (<= temp___idx_223 a__last))
  (and (<= a__first_2 temp___idx_224) (<= temp___idx_224 a__last_2)))
  (= (bool_eq3 (get1 a temp___idx_223 temp___idx_224) 0 2 0 2
     (get1 b (+ (- b__first a__first) temp___idx_223)
     (+ (- b__first_2 a__first_2) temp___idx_224)) 0 2 0 2) true))))))))

(declare-const possible_three_shapes map2)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun tetris_flow__possible_three_shapes__aggregate_def (map1 map1
  map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1
  map1 map1 map1) map2)

;; def_axiom
  (assert
  (forall ((temp___226 map1) (temp___227 map1) (temp___228 map1)
  (temp___229 map1) (temp___230 map1) (temp___231 map1) (temp___232 map1)
  (temp___233 map1) (temp___234 map1) (temp___235 map1) (temp___236 map1)
  (temp___237 map1) (temp___238 map1) (temp___239 map1) (temp___240 map1)
  (temp___241 map1) (temp___242 map1) (temp___243 map1) (temp___244 map1)
  (temp___245 map1))
  (let ((temp___225 (tetris_flow__possible_three_shapes__aggregate_def
                    temp___226 temp___227 temp___228 temp___229 temp___230
                    temp___231 temp___232 temp___233 temp___234 temp___235
                    temp___236 temp___237 temp___238 temp___239 temp___240
                    temp___241 temp___242 temp___243 temp___244 temp___245)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (get1 temp___225 3 0) temp___226)
  (= (get1 temp___225 3 1) temp___227)) (= (get1 temp___225 3 2) temp___228))
  (= (get1 temp___225 3 3) temp___229))
  (and
  (and
  (and (= (get1 temp___225 4 0) temp___230)
  (= (get1 temp___225 4 1) temp___231)) (= (get1 temp___225 4 2) temp___232))
  (= (get1 temp___225 4 3) temp___233)))
  (and
  (and
  (and (= (get1 temp___225 5 0) temp___234)
  (= (get1 temp___225 5 1) temp___235)) (= (get1 temp___225 5 2) temp___236))
  (= (get1 temp___225 5 3) temp___237)))
  (and
  (and
  (and (= (get1 temp___225 6 0) temp___238)
  (= (get1 temp___225 6 1) temp___239)) (= (get1 temp___225 6 2) temp___240))
  (= (get1 temp___225 6 3) temp___241)))
  (and
  (and
  (and (= (get1 temp___225 7 0) temp___242)
  (= (get1 temp___225 7 1) temp___243)) (= (get1 temp___225 7 2) temp___244))
  (= (get1 temp___225 7 3) temp___245))))))

(declare-fun temp___248 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___250 Bool) (temp___251 Bool) (temp___252 Bool)
  (temp___253 Bool) (temp___254 Bool) (temp___255 Bool) (temp___256 Bool)
  (temp___257 Bool) (temp___258 Bool))
  (let ((temp___249 (temp___248 temp___250 temp___251 temp___252 temp___253
                    temp___254 temp___255 temp___256 temp___257 temp___258)))
  (and
  (and
  (and
  (and (= (get temp___249 0 0) temp___250)
  (= (get temp___249 0 1) temp___251)) (= (get temp___249 0 2) temp___252))
  (and
  (and (= (get temp___249 1 0) temp___253)
  (= (get temp___249 1 1) temp___254)) (= (get temp___249 1 2) temp___255)))
  (and
  (and (= (get temp___249 2 0) temp___256)
  (= (get temp___249 2 1) temp___257)) (= (get temp___249 2 2) temp___258))))))

(declare-fun temp___261 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___263 Bool) (temp___264 Bool) (temp___265 Bool)
  (temp___266 Bool) (temp___267 Bool) (temp___268 Bool) (temp___269 Bool)
  (temp___270 Bool) (temp___271 Bool))
  (let ((temp___262 (temp___261 temp___263 temp___264 temp___265 temp___266
                    temp___267 temp___268 temp___269 temp___270 temp___271)))
  (and
  (and
  (and
  (and (= (get temp___262 0 0) temp___263)
  (= (get temp___262 0 1) temp___264)) (= (get temp___262 0 2) temp___265))
  (and
  (and (= (get temp___262 1 0) temp___266)
  (= (get temp___262 1 1) temp___267)) (= (get temp___262 1 2) temp___268)))
  (and
  (and (= (get temp___262 2 0) temp___269)
  (= (get temp___262 2 1) temp___270)) (= (get temp___262 2 2) temp___271))))))

(declare-fun temp___274 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___276 Bool) (temp___277 Bool) (temp___278 Bool)
  (temp___279 Bool) (temp___280 Bool) (temp___281 Bool) (temp___282 Bool)
  (temp___283 Bool) (temp___284 Bool))
  (let ((temp___275 (temp___274 temp___276 temp___277 temp___278 temp___279
                    temp___280 temp___281 temp___282 temp___283 temp___284)))
  (and
  (and
  (and
  (and (= (get temp___275 0 0) temp___276)
  (= (get temp___275 0 1) temp___277)) (= (get temp___275 0 2) temp___278))
  (and
  (and (= (get temp___275 1 0) temp___279)
  (= (get temp___275 1 1) temp___280)) (= (get temp___275 1 2) temp___281)))
  (and
  (and (= (get temp___275 2 0) temp___282)
  (= (get temp___275 2 1) temp___283)) (= (get temp___275 2 2) temp___284))))))

(declare-fun temp___287 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___289 Bool) (temp___290 Bool) (temp___291 Bool)
  (temp___292 Bool) (temp___293 Bool) (temp___294 Bool) (temp___295 Bool)
  (temp___296 Bool) (temp___297 Bool))
  (let ((temp___288 (temp___287 temp___289 temp___290 temp___291 temp___292
                    temp___293 temp___294 temp___295 temp___296 temp___297)))
  (and
  (and
  (and
  (and (= (get temp___288 0 0) temp___289)
  (= (get temp___288 0 1) temp___290)) (= (get temp___288 0 2) temp___291))
  (and
  (and (= (get temp___288 1 0) temp___292)
  (= (get temp___288 1 1) temp___293)) (= (get temp___288 1 2) temp___294)))
  (and
  (and (= (get temp___288 2 0) temp___295)
  (= (get temp___288 2 1) temp___296)) (= (get temp___288 2 2) temp___297))))))

(declare-fun temp___300 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___302 Bool) (temp___303 Bool) (temp___304 Bool)
  (temp___305 Bool) (temp___306 Bool) (temp___307 Bool) (temp___308 Bool)
  (temp___309 Bool) (temp___310 Bool))
  (let ((temp___301 (temp___300 temp___302 temp___303 temp___304 temp___305
                    temp___306 temp___307 temp___308 temp___309 temp___310)))
  (and
  (and
  (and
  (and (= (get temp___301 0 0) temp___302)
  (= (get temp___301 0 1) temp___303)) (= (get temp___301 0 2) temp___304))
  (and
  (and (= (get temp___301 1 0) temp___305)
  (= (get temp___301 1 1) temp___306)) (= (get temp___301 1 2) temp___307)))
  (and
  (and (= (get temp___301 2 0) temp___308)
  (= (get temp___301 2 1) temp___309)) (= (get temp___301 2 2) temp___310))))))

(declare-fun temp___313 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___315 Bool) (temp___316 Bool) (temp___317 Bool)
  (temp___318 Bool) (temp___319 Bool) (temp___320 Bool) (temp___321 Bool)
  (temp___322 Bool) (temp___323 Bool))
  (let ((temp___314 (temp___313 temp___315 temp___316 temp___317 temp___318
                    temp___319 temp___320 temp___321 temp___322 temp___323)))
  (and
  (and
  (and
  (and (= (get temp___314 0 0) temp___315)
  (= (get temp___314 0 1) temp___316)) (= (get temp___314 0 2) temp___317))
  (and
  (and (= (get temp___314 1 0) temp___318)
  (= (get temp___314 1 1) temp___319)) (= (get temp___314 1 2) temp___320)))
  (and
  (and (= (get temp___314 2 0) temp___321)
  (= (get temp___314 2 1) temp___322)) (= (get temp___314 2 2) temp___323))))))

(declare-fun temp___326 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___328 Bool) (temp___329 Bool) (temp___330 Bool)
  (temp___331 Bool) (temp___332 Bool) (temp___333 Bool) (temp___334 Bool)
  (temp___335 Bool) (temp___336 Bool))
  (let ((temp___327 (temp___326 temp___328 temp___329 temp___330 temp___331
                    temp___332 temp___333 temp___334 temp___335 temp___336)))
  (and
  (and
  (and
  (and (= (get temp___327 0 0) temp___328)
  (= (get temp___327 0 1) temp___329)) (= (get temp___327 0 2) temp___330))
  (and
  (and (= (get temp___327 1 0) temp___331)
  (= (get temp___327 1 1) temp___332)) (= (get temp___327 1 2) temp___333)))
  (and
  (and (= (get temp___327 2 0) temp___334)
  (= (get temp___327 2 1) temp___335)) (= (get temp___327 2 2) temp___336))))))

(declare-fun temp___339 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___341 Bool) (temp___342 Bool) (temp___343 Bool)
  (temp___344 Bool) (temp___345 Bool) (temp___346 Bool) (temp___347 Bool)
  (temp___348 Bool) (temp___349 Bool))
  (let ((temp___340 (temp___339 temp___341 temp___342 temp___343 temp___344
                    temp___345 temp___346 temp___347 temp___348 temp___349)))
  (and
  (and
  (and
  (and (= (get temp___340 0 0) temp___341)
  (= (get temp___340 0 1) temp___342)) (= (get temp___340 0 2) temp___343))
  (and
  (and (= (get temp___340 1 0) temp___344)
  (= (get temp___340 1 1) temp___345)) (= (get temp___340 1 2) temp___346)))
  (and
  (and (= (get temp___340 2 0) temp___347)
  (= (get temp___340 2 1) temp___348)) (= (get temp___340 2 2) temp___349))))))

(declare-fun temp___352 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___354 Bool) (temp___355 Bool) (temp___356 Bool)
  (temp___357 Bool) (temp___358 Bool) (temp___359 Bool) (temp___360 Bool)
  (temp___361 Bool) (temp___362 Bool))
  (let ((temp___353 (temp___352 temp___354 temp___355 temp___356 temp___357
                    temp___358 temp___359 temp___360 temp___361 temp___362)))
  (and
  (and
  (and
  (and (= (get temp___353 0 0) temp___354)
  (= (get temp___353 0 1) temp___355)) (= (get temp___353 0 2) temp___356))
  (and
  (and (= (get temp___353 1 0) temp___357)
  (= (get temp___353 1 1) temp___358)) (= (get temp___353 1 2) temp___359)))
  (and
  (and (= (get temp___353 2 0) temp___360)
  (= (get temp___353 2 1) temp___361)) (= (get temp___353 2 2) temp___362))))))

(declare-fun temp___365 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___367 Bool) (temp___368 Bool) (temp___369 Bool)
  (temp___370 Bool) (temp___371 Bool) (temp___372 Bool) (temp___373 Bool)
  (temp___374 Bool) (temp___375 Bool))
  (let ((temp___366 (temp___365 temp___367 temp___368 temp___369 temp___370
                    temp___371 temp___372 temp___373 temp___374 temp___375)))
  (and
  (and
  (and
  (and (= (get temp___366 0 0) temp___367)
  (= (get temp___366 0 1) temp___368)) (= (get temp___366 0 2) temp___369))
  (and
  (and (= (get temp___366 1 0) temp___370)
  (= (get temp___366 1 1) temp___371)) (= (get temp___366 1 2) temp___372)))
  (and
  (and (= (get temp___366 2 0) temp___373)
  (= (get temp___366 2 1) temp___374)) (= (get temp___366 2 2) temp___375))))))

(declare-fun temp___378 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___380 Bool) (temp___381 Bool) (temp___382 Bool)
  (temp___383 Bool) (temp___384 Bool) (temp___385 Bool) (temp___386 Bool)
  (temp___387 Bool) (temp___388 Bool))
  (let ((temp___379 (temp___378 temp___380 temp___381 temp___382 temp___383
                    temp___384 temp___385 temp___386 temp___387 temp___388)))
  (and
  (and
  (and
  (and (= (get temp___379 0 0) temp___380)
  (= (get temp___379 0 1) temp___381)) (= (get temp___379 0 2) temp___382))
  (and
  (and (= (get temp___379 1 0) temp___383)
  (= (get temp___379 1 1) temp___384)) (= (get temp___379 1 2) temp___385)))
  (and
  (and (= (get temp___379 2 0) temp___386)
  (= (get temp___379 2 1) temp___387)) (= (get temp___379 2 2) temp___388))))))

(declare-fun temp___391 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___393 Bool) (temp___394 Bool) (temp___395 Bool)
  (temp___396 Bool) (temp___397 Bool) (temp___398 Bool) (temp___399 Bool)
  (temp___400 Bool) (temp___401 Bool))
  (let ((temp___392 (temp___391 temp___393 temp___394 temp___395 temp___396
                    temp___397 temp___398 temp___399 temp___400 temp___401)))
  (and
  (and
  (and
  (and (= (get temp___392 0 0) temp___393)
  (= (get temp___392 0 1) temp___394)) (= (get temp___392 0 2) temp___395))
  (and
  (and (= (get temp___392 1 0) temp___396)
  (= (get temp___392 1 1) temp___397)) (= (get temp___392 1 2) temp___398)))
  (and
  (and (= (get temp___392 2 0) temp___399)
  (= (get temp___392 2 1) temp___400)) (= (get temp___392 2 2) temp___401))))))

(declare-fun temp___404 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___406 Bool) (temp___407 Bool) (temp___408 Bool)
  (temp___409 Bool) (temp___410 Bool) (temp___411 Bool) (temp___412 Bool)
  (temp___413 Bool) (temp___414 Bool))
  (let ((temp___405 (temp___404 temp___406 temp___407 temp___408 temp___409
                    temp___410 temp___411 temp___412 temp___413 temp___414)))
  (and
  (and
  (and
  (and (= (get temp___405 0 0) temp___406)
  (= (get temp___405 0 1) temp___407)) (= (get temp___405 0 2) temp___408))
  (and
  (and (= (get temp___405 1 0) temp___409)
  (= (get temp___405 1 1) temp___410)) (= (get temp___405 1 2) temp___411)))
  (and
  (and (= (get temp___405 2 0) temp___412)
  (= (get temp___405 2 1) temp___413)) (= (get temp___405 2 2) temp___414))))))

(declare-fun temp___417 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___419 Bool) (temp___420 Bool) (temp___421 Bool)
  (temp___422 Bool) (temp___423 Bool) (temp___424 Bool) (temp___425 Bool)
  (temp___426 Bool) (temp___427 Bool))
  (let ((temp___418 (temp___417 temp___419 temp___420 temp___421 temp___422
                    temp___423 temp___424 temp___425 temp___426 temp___427)))
  (and
  (and
  (and
  (and (= (get temp___418 0 0) temp___419)
  (= (get temp___418 0 1) temp___420)) (= (get temp___418 0 2) temp___421))
  (and
  (and (= (get temp___418 1 0) temp___422)
  (= (get temp___418 1 1) temp___423)) (= (get temp___418 1 2) temp___424)))
  (and
  (and (= (get temp___418 2 0) temp___425)
  (= (get temp___418 2 1) temp___426)) (= (get temp___418 2 2) temp___427))))))

(declare-fun temp___430 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___432 Bool) (temp___433 Bool) (temp___434 Bool)
  (temp___435 Bool) (temp___436 Bool) (temp___437 Bool) (temp___438 Bool)
  (temp___439 Bool) (temp___440 Bool))
  (let ((temp___431 (temp___430 temp___432 temp___433 temp___434 temp___435
                    temp___436 temp___437 temp___438 temp___439 temp___440)))
  (and
  (and
  (and
  (and (= (get temp___431 0 0) temp___432)
  (= (get temp___431 0 1) temp___433)) (= (get temp___431 0 2) temp___434))
  (and
  (and (= (get temp___431 1 0) temp___435)
  (= (get temp___431 1 1) temp___436)) (= (get temp___431 1 2) temp___437)))
  (and
  (and (= (get temp___431 2 0) temp___438)
  (= (get temp___431 2 1) temp___439)) (= (get temp___431 2 2) temp___440))))))

(declare-fun temp___443 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___445 Bool) (temp___446 Bool) (temp___447 Bool)
  (temp___448 Bool) (temp___449 Bool) (temp___450 Bool) (temp___451 Bool)
  (temp___452 Bool) (temp___453 Bool))
  (let ((temp___444 (temp___443 temp___445 temp___446 temp___447 temp___448
                    temp___449 temp___450 temp___451 temp___452 temp___453)))
  (and
  (and
  (and
  (and (= (get temp___444 0 0) temp___445)
  (= (get temp___444 0 1) temp___446)) (= (get temp___444 0 2) temp___447))
  (and
  (and (= (get temp___444 1 0) temp___448)
  (= (get temp___444 1 1) temp___449)) (= (get temp___444 1 2) temp___450)))
  (and
  (and (= (get temp___444 2 0) temp___451)
  (= (get temp___444 2 1) temp___452)) (= (get temp___444 2 2) temp___453))))))

(declare-fun temp___456 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___458 Bool) (temp___459 Bool) (temp___460 Bool)
  (temp___461 Bool) (temp___462 Bool) (temp___463 Bool) (temp___464 Bool)
  (temp___465 Bool) (temp___466 Bool))
  (let ((temp___457 (temp___456 temp___458 temp___459 temp___460 temp___461
                    temp___462 temp___463 temp___464 temp___465 temp___466)))
  (and
  (and
  (and
  (and (= (get temp___457 0 0) temp___458)
  (= (get temp___457 0 1) temp___459)) (= (get temp___457 0 2) temp___460))
  (and
  (and (= (get temp___457 1 0) temp___461)
  (= (get temp___457 1 1) temp___462)) (= (get temp___457 1 2) temp___463)))
  (and
  (and (= (get temp___457 2 0) temp___464)
  (= (get temp___457 2 1) temp___465)) (= (get temp___457 2 2) temp___466))))))

(declare-fun temp___469 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___471 Bool) (temp___472 Bool) (temp___473 Bool)
  (temp___474 Bool) (temp___475 Bool) (temp___476 Bool) (temp___477 Bool)
  (temp___478 Bool) (temp___479 Bool))
  (let ((temp___470 (temp___469 temp___471 temp___472 temp___473 temp___474
                    temp___475 temp___476 temp___477 temp___478 temp___479)))
  (and
  (and
  (and
  (and (= (get temp___470 0 0) temp___471)
  (= (get temp___470 0 1) temp___472)) (= (get temp___470 0 2) temp___473))
  (and
  (and (= (get temp___470 1 0) temp___474)
  (= (get temp___470 1 1) temp___475)) (= (get temp___470 1 2) temp___476)))
  (and
  (and (= (get temp___470 2 0) temp___477)
  (= (get temp___470 2 1) temp___478)) (= (get temp___470 2 2) temp___479))))))

(declare-fun temp___482 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___484 Bool) (temp___485 Bool) (temp___486 Bool)
  (temp___487 Bool) (temp___488 Bool) (temp___489 Bool) (temp___490 Bool)
  (temp___491 Bool) (temp___492 Bool))
  (let ((temp___483 (temp___482 temp___484 temp___485 temp___486 temp___487
                    temp___488 temp___489 temp___490 temp___491 temp___492)))
  (and
  (and
  (and
  (and (= (get temp___483 0 0) temp___484)
  (= (get temp___483 0 1) temp___485)) (= (get temp___483 0 2) temp___486))
  (and
  (and (= (get temp___483 1 0) temp___487)
  (= (get temp___483 1 1) temp___488)) (= (get temp___483 1 2) temp___489)))
  (and
  (and (= (get temp___483 2 0) temp___490)
  (= (get temp___483 2 1) temp___491)) (= (get temp___483 2 2) temp___492))))))

(declare-fun temp___495 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___497 Bool) (temp___498 Bool) (temp___499 Bool)
  (temp___500 Bool) (temp___501 Bool) (temp___502 Bool) (temp___503 Bool)
  (temp___504 Bool) (temp___505 Bool))
  (let ((temp___496 (temp___495 temp___497 temp___498 temp___499 temp___500
                    temp___501 temp___502 temp___503 temp___504 temp___505)))
  (and
  (and
  (and
  (and (= (get temp___496 0 0) temp___497)
  (= (get temp___496 0 1) temp___498)) (= (get temp___496 0 2) temp___499))
  (and
  (and (= (get temp___496 1 0) temp___500)
  (= (get temp___496 1 1) temp___501)) (= (get temp___496 1 2) temp___502)))
  (and
  (and (= (get temp___496 2 0) temp___503)
  (= (get temp___496 2 1) temp___504)) (= (get temp___496 2 2) temp___505))))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant ((temp___expr_514 Int)
  (temp___is_init_511 Bool) (temp___skip_constant_512 Bool)
  (temp___do_toplevel_513 Bool)) Bool (=>
                                      (or (= temp___is_init_511 true)
                                      (<= 0 7)) (in_range1 temp___expr_514)))

(define-fun dynamic_invariant1 ((temp___expr_520 Int)
  (temp___is_init_517 Bool) (temp___skip_constant_518 Bool)
  (temp___do_toplevel_519 Bool)) Bool (=>
                                      (or (= temp___is_init_517 true)
                                      (<= 1 7)) (in_range2 temp___expr_520)))

(define-fun dynamic_invariant2 ((temp___expr_526 Int)
  (temp___is_init_523 Bool) (temp___skip_constant_524 Bool)
  (temp___do_toplevel_525 Bool)) Bool (=>
                                      (or (= temp___is_init_523 true)
                                      (<= 3 7)) (in_range3 temp___expr_526)))

(define-fun dynamic_invariant3 ((temp___expr_532 Int)
  (temp___is_init_529 Bool) (temp___skip_constant_530 Bool)
  (temp___do_toplevel_531 Bool)) Bool (=>
                                      (or (= temp___is_init_529 true)
                                      (<= 1 10)) (in_range4 temp___expr_532)))

(define-fun dynamic_invariant4 ((temp___expr_538 Int)
  (temp___is_init_535 Bool) (temp___skip_constant_536 Bool)
  (temp___do_toplevel_537 Bool)) Bool (=>
                                      (or (= temp___is_init_535 true)
                                      (<= 1 50)) (in_range5 temp___expr_538)))

(define-fun dynamic_invariant5 ((temp___expr_565 Int)
  (temp___is_init_562 Bool) (temp___skip_constant_563 Bool)
  (temp___do_toplevel_564 Bool)) Bool (=>
                                      (or (= temp___is_init_562 true)
                                      (<= (- 1) 9)) (in_range6
                                      temp___expr_565)))

(define-fun dynamic_invariant6 ((temp___expr_571 Int)
  (temp___is_init_568 Bool) (temp___skip_constant_569 Bool)
  (temp___do_toplevel_570 Bool)) Bool (=>
                                      (or (= temp___is_init_568 true)
                                      (<= (- 1) 49)) (in_range7
                                      temp___expr_571)))

(define-fun dynamic_invariant7 ((temp___expr_577 Int)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (or (= temp___is_init_574 true)
                                      (<= 0 3)) (in_range8 temp___expr_577)))

;; possible_i_shapes__def_axiom
  (assert
  (= possible_i_shapes (tetris_flow__possible_i_shapes__aggregate_def
                       (temp___143 (of_int 0) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 1) (of_int 1) (of_int 1) (of_int 1)
                       (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 0))
                       (temp___163 (of_int 0) (of_int 0) (of_int 1)
                       (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 1) (of_int 0))
                       (temp___183 (of_int 0) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
                       (of_int 1) (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 0))
                       (temp___203 (of_int 0) (of_int 1) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 0)
                       (of_int 1) (of_int 0) (of_int 0)))))

;; possible_three_shapes__def_axiom
  (assert
  (= possible_three_shapes (tetris_flow__possible_three_shapes__aggregate_def
                           (temp___248 (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___261 (of_int 0) (of_int 1) (of_int 1)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___274 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1))
                           (temp___287 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 1)
                           (of_int 1) (of_int 0))
                           (temp___300 (of_int 0) (of_int 0) (of_int 1)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___313 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1))
                           (temp___326 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 1)
                           (of_int 0) (of_int 0))
                           (temp___339 (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___352 (of_int 0) (of_int 1) (of_int 1)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___365 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1))
                           (temp___378 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 1)
                           (of_int 1) (of_int 0))
                           (temp___391 (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___404 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___417 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___430 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___443 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___456 (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___469 (of_int 0) (of_int 0) (of_int 1)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___482 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1))
                           (temp___495 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 1)
                           (of_int 0) (of_int 0)))))

(declare-const cur_board (Array Int (Array Int cell)))

(declare-const cur_piece__split_fields shape)

(declare-const cur_piece__split_fields1 px_coord)

(declare-const cur_piece__split_fields2 py_coord)

(declare-const o cell)

(declare-const o1 Int)

(declare-const o2 (Array Int cell))

(declare-const o3 Int)

(declare-const o4 (Array Int (Array Int cell)))

(declare-const o5 cell)

(declare-const o6 Int)

(declare-const o7 (Array Int cell))

(declare-const o8 Int)

(declare-const o9 (Array Int (Array Int cell)))

(declare-const o10 cell)

(declare-const o11 Int)

(declare-const o12 (Array Int cell))

(declare-const result (Array Int (Array Int cell)))

(declare-const cur_board1 (Array Int (Array Int cell)))

(declare-const result1 (Array Int (Array Int cell)))

(declare-const cur_board2 (Array Int (Array Int cell)))

;; H
  (assert
  (= (tetris_flow__possible_i_shapes__aggregate_def
     (temp___143 (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 1) (of_int 1) (of_int 0) (of_int 0) (of_int 0)
     (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0))
     (temp___163 (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 0)
     (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 0) (of_int 1)
     (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 0))
     (temp___183 (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
     (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0) (of_int 0))
     (temp___203 (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 0)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 0)
     (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 0))) possible_i_shapes))

;; H
  (assert
  (= (tetris_flow__possible_three_shapes__aggregate_def
     (temp___248 (of_int 1) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0))
     (temp___261 (of_int 0) (of_int 1) (of_int 1) (of_int 0) (of_int 1)
     (of_int 0) (of_int 0) (of_int 1) (of_int 0))
     (temp___274 (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 1))
     (temp___287 (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 1)
     (of_int 0) (of_int 1) (of_int 1) (of_int 0))
     (temp___300 (of_int 0) (of_int 0) (of_int 1) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0))
     (temp___313 (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 1)
     (of_int 0) (of_int 0) (of_int 1) (of_int 1))
     (temp___326 (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
     (of_int 1) (of_int 1) (of_int 0) (of_int 0))
     (temp___339 (of_int 1) (of_int 1) (of_int 0) (of_int 0) (of_int 1)
     (of_int 0) (of_int 0) (of_int 1) (of_int 0))
     (temp___352 (of_int 0) (of_int 1) (of_int 1) (of_int 1) (of_int 1)
     (of_int 0) (of_int 0) (of_int 0) (of_int 0))
     (temp___365 (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 1))
     (temp___378 (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 1) (of_int 1) (of_int 0))
     (temp___391 (of_int 1) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
     (of_int 0) (of_int 0) (of_int 1) (of_int 0))
     (temp___404 (of_int 0) (of_int 1) (of_int 0) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0))
     (temp___417 (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 0) (of_int 1) (of_int 0))
     (temp___430 (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 1) (of_int 0))
     (temp___443 (of_int 0) (of_int 1) (of_int 0) (of_int 1) (of_int 1)
     (of_int 0) (of_int 0) (of_int 1) (of_int 0))
     (temp___456 (of_int 1) (of_int 1) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0))
     (temp___469 (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 1)
     (of_int 1) (of_int 0) (of_int 1) (of_int 0))
     (temp___482 (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
     (of_int 0) (of_int 0) (of_int 1) (of_int 1))
     (temp___495 (of_int 0) (of_int 1) (of_int 0) (of_int 1) (of_int 1)
     (of_int 0) (of_int 1) (of_int 0) (of_int 0))) possible_three_shapes))

;; H
  (assert (= (to_rep1 cur_piece__split_fields) 2))

;; H
  (assert (= (to_rep o) (to_rep1 cur_piece__split_fields)))

;; H
  (assert
  (and (<= 1 (to_rep2 cur_piece__split_fields1))
  (<= (to_rep2 cur_piece__split_fields1) 10)))

;; H
  (assert (= o1 (to_rep2 cur_piece__split_fields1)))

;; H
  (assert
  (= o2 (store (select cur_board (to_rep3 cur_piece__split_fields2))
  o1 o)))

;; H
  (assert
  (and (<= 1 (to_rep3 cur_piece__split_fields2))
  (<= (to_rep3 cur_piece__split_fields2) 50)))

;; H
  (assert (= o3 (to_rep3 cur_piece__split_fields2)))

;; H
  (assert (= o4 (store cur_board o3 o2)))

;; H
  (assert (= result cur_board))

;; H
  (assert (= cur_board1 o4))

;; H
  (assert (= (to_rep o5) (to_rep1 cur_piece__split_fields)))

;; H
  (assert
  (and (<= 1 (to_rep2 cur_piece__split_fields1))
  (<= (to_rep2 cur_piece__split_fields1) 10)))

;; H
  (assert (= o6 (to_rep2 cur_piece__split_fields1)))

;; H
  (assert
  (= o7 (store (select cur_board1 (+ (to_rep3 cur_piece__split_fields2) 1))
  o6 o5)))

;; H
  (assert
  (and (<= 1 (+ (to_rep3 cur_piece__split_fields2) 1))
  (<= (+ (to_rep3 cur_piece__split_fields2) 1) 50)))

;; H
  (assert (= o8 (+ (to_rep3 cur_piece__split_fields2) 1)))

;; H
  (assert (= o9 (store cur_board1 o8 o7)))

;; H
  (assert (= result1 cur_board1))

;; H
  (assert (= cur_board2 o9))

;; H
  (assert (= (to_rep o10) (to_rep1 cur_piece__split_fields)))

;; H
  (assert
  (and (<= 1 (+ (to_rep2 cur_piece__split_fields1) 1))
  (<= (+ (to_rep2 cur_piece__split_fields1) 1) 10)))

;; H
  (assert (= o11 (+ (to_rep2 cur_piece__split_fields1) 1)))

;; H
  (assert
  (= o12 (store (select cur_board2 (to_rep3 cur_piece__split_fields2))
  o11 o10)))

(assert
;; WP_parameter_def
 ;; File "tetris_flow.adb", line 107, characters 0-0
  (not (<= 1 (to_rep3 cur_piece__split_fields2))))
(check-sat)
(exit)
