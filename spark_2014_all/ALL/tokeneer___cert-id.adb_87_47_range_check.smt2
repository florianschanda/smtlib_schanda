;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned32t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (unsigned32t unsigned32t) Bool)

(declare-const dummy unsigned32t)

(declare-datatypes ((unsigned32t__ref 0))
(((mk_unsigned32t__ref (unsigned32t__content unsigned32t)))))
(define-fun unsigned32t__ref___projection ((a unsigned32t__ref)) unsigned32t
  (unsigned32t__content a))

(declare-fun to_rep (unsigned32t) Int)

(declare-fun of_rep (Int) unsigned32t)

;; inversion_axiom
  (assert
  (forall ((x unsigned32t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned32t)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort namecountt 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (namecountt namecountt) Bool)

(declare-const dummy1 namecountt)

(declare-datatypes ((namecountt__ref 0))
(((mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt
  (namecountt__content a))

(declare-fun to_rep1 (namecountt) Int)

(declare-fun of_rep1 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy3 (Array Int character))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int character) (Array Int character)) Bool)

(declare-sort issueridt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (issueridt issueridt) Bool)

(declare-const dummy4 issueridt)

(declare-datatypes ((issueridt__ref 0))
(((mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt
  (issueridt__content a))

(declare-fun to_rep3 (issueridt) Int)

(declare-fun of_rep3 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range4
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((issuert__ref 0))
(((mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-sort algorithmt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (algorithmt algorithmt) Bool)

(declare-const dummy6 algorithmt)

(declare-datatypes ((algorithmt__ref 0))
(((mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt
  (algorithmt__content a))

(declare-fun to_rep4 (algorithmt) Int)

(declare-fun of_rep4 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range5
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort keyidt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (keyidt keyidt) Bool)

(declare-const dummy7 keyidt)

(declare-datatypes ((keyidt__ref 0))
(((mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content
                                                              a))

(declare-fun to_rep5 (keyidt) Int)

(declare-fun of_rep5 (Int) keyidt)

;; inversion_axiom
  (assert
  (forall ((x keyidt))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x keyidt)) (! (in_range6 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort keylengtht 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (keylengtht keylengtht) Bool)

(declare-const dummy8 keylengtht)

(declare-datatypes ((keylengtht__ref 0))
(((mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht
  (keylengtht__content a))

(declare-fun to_rep6 (keylengtht) Int)

(declare-fun of_rep6 (Int) keylengtht)

;; inversion_axiom
  (assert
  (forall ((x keylengtht))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x keylengtht)) (! (in_range7
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields2)) algorithmt
  (rec__cryptotypes__keypartt__algorithmid a))

(define-fun us_split_fields_KeyID__projection ((a us_split_fields2)) keyidt
  (rec__cryptotypes__keypartt__keyid a))

(define-fun us_split_fields_KeyLength__projection ((a us_split_fields2)) keylengtht
  (rec__cryptotypes__keypartt__keylength a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__cryptotypes__keypartt__algorithmid
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__cryptotypes__keypartt__algorithmid
                                                   (us_split_fields3 b))))
                         (= (to_rep5
                            (rec__cryptotypes__keypartt__keyid
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__cryptotypes__keypartt__keyid
                                                   (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__cryptotypes__keypartt__keylength
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__cryptotypes__keypartt__keylength
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; cryptotypes__keypartt__algorithmid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; cryptotypes__keypartt__algorithmid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; cryptotypes__keypartt__algorithmid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; cryptotypes__keypartt__keyid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; cryptotypes__keypartt__keyid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; cryptotypes__keypartt__keyid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; cryptotypes__keypartt__keylength__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; cryptotypes__keypartt__keylength__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; cryptotypes__keypartt__keylength__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((keypartt__ref 0))
(((mk_keypartt__ref (keypartt__content us_rep1)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep1 (keypartt__content
                                                                   a))

(declare-sort serialnumbert 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (serialnumbert serialnumbert) Bool)

(declare-const dummy10 serialnumbert)

(declare-datatypes ((serialnumbert__ref 0))
(((mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert
  (serialnumbert__content a))

(declare-fun to_rep7 (serialnumbert) Int)

(declare-fun of_rep7 (Int) serialnumbert)

;; inversion_axiom
  (assert
  (forall ((x serialnumbert))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x serialnumbert)) (! (in_range8
  (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                              (of_rep7 x))) )))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__certtypes__idt__issuer us_rep)(rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields4)) us_rep
  (rec__certtypes__idt__issuer a))

(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields4)) serialnumbert
  (rec__certtypes__idt__serialnumber a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq1
                            (rec__certtypes__idt__issuer
                            (us_split_fields5 a))
                            (rec__certtypes__idt__issuer
                            (us_split_fields5 b))) true)
                         (= (to_rep7
                            (rec__certtypes__idt__serialnumber
                            (us_split_fields5 a))) (to_rep7
                                                   (rec__certtypes__idt__serialnumber
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const certtypes__idt__issuer__first__bit Int)

(declare-const certtypes__idt__issuer__last__bit Int)

(declare-const certtypes__idt__issuer__position Int)

;; certtypes__idt__issuer__first__bit_axiom
  (assert (<= 0 certtypes__idt__issuer__first__bit))

;; certtypes__idt__issuer__last__bit_axiom
  (assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; certtypes__idt__issuer__position_axiom
  (assert (<= 0 certtypes__idt__issuer__position))

(declare-const certtypes__idt__serialnumber__first__bit Int)

(declare-const certtypes__idt__serialnumber__last__bit Int)

(declare-const certtypes__idt__serialnumber__position Int)

;; certtypes__idt__serialnumber__first__bit_axiom
  (assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; certtypes__idt__serialnumber__last__bit_axiom
  (assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; certtypes__idt__serialnumber__position_axiom
  (assert (<= 0 certtypes__idt__serialnumber__position))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ((idt__ref 0)) (((mk_idt__ref (idt__content us_rep2)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep2 (idt__content a))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__certprocessing__timet__year unsigned32t)(rec__certprocessing__timet__month unsigned32t)(rec__certprocessing__timet__day unsigned32t)(rec__certprocessing__timet__hour unsigned32t)(rec__certprocessing__timet__minute unsigned32t)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields6)) unsigned32t
  (rec__certprocessing__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields6)) unsigned32t
  (rec__certprocessing__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields6)) unsigned32t
  (rec__certprocessing__timet__day a))

(define-fun us_split_fields_Hour__projection ((a us_split_fields6)) unsigned32t
  (rec__certprocessing__timet__hour a))

(define-fun us_split_fields_Minute__projection ((a us_split_fields6)) unsigned32t
  (rec__certprocessing__timet__minute a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___8__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                  a))

(define-fun bool_eq4 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep
                            (rec__certprocessing__timet__year
                            (us_split_fields7 a))) (to_rep
                                                   (rec__certprocessing__timet__year
                                                   (us_split_fields7 b))))
                         (= (to_rep
                            (rec__certprocessing__timet__month
                            (us_split_fields7 a))) (to_rep
                                                   (rec__certprocessing__timet__month
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__certprocessing__timet__day
                            (us_split_fields7 a))) (to_rep
                                                   (rec__certprocessing__timet__day
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__certprocessing__timet__hour
                            (us_split_fields7 a))) (to_rep
                                                   (rec__certprocessing__timet__hour
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__certprocessing__timet__minute
                            (us_split_fields7 a))) (to_rep
                                                   (rec__certprocessing__timet__minute
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-const certprocessing__timet__year__first__bit Int)

(declare-const certprocessing__timet__year__last__bit Int)

(declare-const certprocessing__timet__year__position Int)

;; certprocessing__timet__year__first__bit_axiom
  (assert (<= 0 certprocessing__timet__year__first__bit))

;; certprocessing__timet__year__last__bit_axiom
  (assert
  (< certprocessing__timet__year__first__bit certprocessing__timet__year__last__bit))

;; certprocessing__timet__year__position_axiom
  (assert (<= 0 certprocessing__timet__year__position))

(declare-const certprocessing__timet__month__first__bit Int)

(declare-const certprocessing__timet__month__last__bit Int)

(declare-const certprocessing__timet__month__position Int)

;; certprocessing__timet__month__first__bit_axiom
  (assert (<= 0 certprocessing__timet__month__first__bit))

;; certprocessing__timet__month__last__bit_axiom
  (assert
  (< certprocessing__timet__month__first__bit certprocessing__timet__month__last__bit))

;; certprocessing__timet__month__position_axiom
  (assert (<= 0 certprocessing__timet__month__position))

(declare-const certprocessing__timet__day__first__bit Int)

(declare-const certprocessing__timet__day__last__bit Int)

(declare-const certprocessing__timet__day__position Int)

;; certprocessing__timet__day__first__bit_axiom
  (assert (<= 0 certprocessing__timet__day__first__bit))

;; certprocessing__timet__day__last__bit_axiom
  (assert
  (< certprocessing__timet__day__first__bit certprocessing__timet__day__last__bit))

;; certprocessing__timet__day__position_axiom
  (assert (<= 0 certprocessing__timet__day__position))

(declare-const certprocessing__timet__hour__first__bit Int)

(declare-const certprocessing__timet__hour__last__bit Int)

(declare-const certprocessing__timet__hour__position Int)

;; certprocessing__timet__hour__first__bit_axiom
  (assert (<= 0 certprocessing__timet__hour__first__bit))

;; certprocessing__timet__hour__last__bit_axiom
  (assert
  (< certprocessing__timet__hour__first__bit certprocessing__timet__hour__last__bit))

;; certprocessing__timet__hour__position_axiom
  (assert (<= 0 certprocessing__timet__hour__position))

(declare-const certprocessing__timet__minute__first__bit Int)

(declare-const certprocessing__timet__minute__last__bit Int)

(declare-const certprocessing__timet__minute__position Int)

;; certprocessing__timet__minute__first__bit_axiom
  (assert (<= 0 certprocessing__timet__minute__first__bit))

;; certprocessing__timet__minute__last__bit_axiom
  (assert
  (< certprocessing__timet__minute__first__bit certprocessing__timet__minute__last__bit))

;; certprocessing__timet__minute__position_axiom
  (assert (<= 0 certprocessing__timet__minute__position))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-const dummy12 us_rep3)

(declare-datatypes ((timet__ref 0))
(((mk_timet__ref (timet__content us_rep3)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep3 (timet__content
                                                             a))

(declare-datatypes ((us_split_fields8 0))
(((mk___split_fields4
  (rec__certprocessing__validityt__notbefore us_rep3)(rec__certprocessing__validityt__notafter us_rep3)))))
(define-fun us_split_fields_NotBefore__projection ((a us_split_fields8)) us_rep3
  (rec__certprocessing__validityt__notbefore a))

(define-fun us_split_fields_NotAfter__projection ((a us_split_fields8)) us_rep3
  (rec__certprocessing__validityt__notafter a))

(declare-datatypes ((us_split_fields__ref4 0))
(((mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___9__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                  a))

(define-fun bool_eq5 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (bool_eq4
                            (rec__certprocessing__validityt__notbefore
                            (us_split_fields9 a))
                            (rec__certprocessing__validityt__notbefore
                            (us_split_fields9 b))) true)
                         (= (bool_eq4
                            (rec__certprocessing__validityt__notafter
                            (us_split_fields9 a))
                            (rec__certprocessing__validityt__notafter
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-const certprocessing__validityt__notbefore__first__bit Int)

(declare-const certprocessing__validityt__notbefore__last__bit Int)

(declare-const certprocessing__validityt__notbefore__position Int)

;; certprocessing__validityt__notbefore__first__bit_axiom
  (assert (<= 0 certprocessing__validityt__notbefore__first__bit))

;; certprocessing__validityt__notbefore__last__bit_axiom
  (assert
  (< certprocessing__validityt__notbefore__first__bit certprocessing__validityt__notbefore__last__bit))

;; certprocessing__validityt__notbefore__position_axiom
  (assert (<= 0 certprocessing__validityt__notbefore__position))

(declare-const certprocessing__validityt__notafter__first__bit Int)

(declare-const certprocessing__validityt__notafter__last__bit Int)

(declare-const certprocessing__validityt__notafter__position Int)

;; certprocessing__validityt__notafter__first__bit_axiom
  (assert (<= 0 certprocessing__validityt__notafter__first__bit))

;; certprocessing__validityt__notafter__last__bit_axiom
  (assert
  (< certprocessing__validityt__notafter__first__bit certprocessing__validityt__notafter__last__bit))

;; certprocessing__validityt__notafter__position_axiom
  (assert (<= 0 certprocessing__validityt__notafter__position))

(declare-fun user_eq13 (us_rep4 us_rep4) Bool)

(declare-const dummy13 us_rep4)

(declare-datatypes ((validityt__ref 0))
(((mk_validityt__ref (validityt__content us_rep4)))))
(define-fun validityt__ref___projection ((a validityt__ref)) us_rep4
  (validityt__content a))

(declare-datatypes ((us_split_fields10 0))
(((mk___split_fields5
  (rec__certprocessing__publickeyinfot__algorithmid algorithmt)(rec__certprocessing__publickeyinfot__keyid unsigned32t)(rec__certprocessing__publickeyinfot__keylength unsigned32t)))))
(define-fun us_split_fields_AlgorithmId__projection ((a us_split_fields10)) algorithmt
  (rec__certprocessing__publickeyinfot__algorithmid a))

(define-fun us_split_fields_KeyID__2__projection ((a us_split_fields10)) unsigned32t
  (rec__certprocessing__publickeyinfot__keyid a))

(define-fun us_split_fields_KeyLength__2__projection ((a us_split_fields10)) unsigned32t
  (rec__certprocessing__publickeyinfot__keylength a))

(declare-datatypes ((us_split_fields__ref5 0))
(((mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep5 0))
(((mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___11__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                    a))

(define-fun bool_eq6 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__certprocessing__publickeyinfot__algorithmid
                            (us_split_fields11 a))) (to_rep4
                                                    (rec__certprocessing__publickeyinfot__algorithmid
                                                    (us_split_fields11 b))))
                         (= (to_rep
                            (rec__certprocessing__publickeyinfot__keyid
                            (us_split_fields11 a))) (to_rep
                                                    (rec__certprocessing__publickeyinfot__keyid
                                                    (us_split_fields11 b)))))
                         (= (to_rep
                            (rec__certprocessing__publickeyinfot__keylength
                            (us_split_fields11 a))) (to_rep
                                                    (rec__certprocessing__publickeyinfot__keylength
                                                    (us_split_fields11 b)))))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep5) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment6 a))))

(declare-const certprocessing__publickeyinfot__algorithmid__first__bit Int)

(declare-const certprocessing__publickeyinfot__algorithmid__last__bit Int)

(declare-const certprocessing__publickeyinfot__algorithmid__position Int)

;; certprocessing__publickeyinfot__algorithmid__first__bit_axiom
  (assert (<= 0 certprocessing__publickeyinfot__algorithmid__first__bit))

;; certprocessing__publickeyinfot__algorithmid__last__bit_axiom
  (assert
  (< certprocessing__publickeyinfot__algorithmid__first__bit certprocessing__publickeyinfot__algorithmid__last__bit))

;; certprocessing__publickeyinfot__algorithmid__position_axiom
  (assert (<= 0 certprocessing__publickeyinfot__algorithmid__position))

(declare-const certprocessing__publickeyinfot__keyid__first__bit Int)

(declare-const certprocessing__publickeyinfot__keyid__last__bit Int)

(declare-const certprocessing__publickeyinfot__keyid__position Int)

;; certprocessing__publickeyinfot__keyid__first__bit_axiom
  (assert (<= 0 certprocessing__publickeyinfot__keyid__first__bit))

;; certprocessing__publickeyinfot__keyid__last__bit_axiom
  (assert
  (< certprocessing__publickeyinfot__keyid__first__bit certprocessing__publickeyinfot__keyid__last__bit))

;; certprocessing__publickeyinfot__keyid__position_axiom
  (assert (<= 0 certprocessing__publickeyinfot__keyid__position))

(declare-const certprocessing__publickeyinfot__keylength__first__bit Int)

(declare-const certprocessing__publickeyinfot__keylength__last__bit Int)

(declare-const certprocessing__publickeyinfot__keylength__position Int)

;; certprocessing__publickeyinfot__keylength__first__bit_axiom
  (assert (<= 0 certprocessing__publickeyinfot__keylength__first__bit))

;; certprocessing__publickeyinfot__keylength__last__bit_axiom
  (assert
  (< certprocessing__publickeyinfot__keylength__first__bit certprocessing__publickeyinfot__keylength__last__bit))

;; certprocessing__publickeyinfot__keylength__position_axiom
  (assert (<= 0 certprocessing__publickeyinfot__keylength__position))

(declare-fun user_eq14 (us_rep5 us_rep5) Bool)

(declare-const dummy14 us_rep5)

(declare-datatypes ((publickeyinfot__ref 0))
(((mk_publickeyinfot__ref (publickeyinfot__content us_rep5)))))
(define-fun publickeyinfot__ref___projection ((a publickeyinfot__ref)) us_rep5
  (publickeyinfot__content a))

(declare-datatypes ((us_split_fields12 0))
(((mk___split_fields6
  (rec__certprocessing__idcertdatat__serialnumber unsigned32t)(rec__certprocessing__idcertdatat__sigalgid algorithmt)(rec__certprocessing__idcertdatat__issuer us_rep)(rec__certprocessing__idcertdatat__validity us_rep4)(rec__certprocessing__idcertdatat__subject us_rep)(rec__certprocessing__idcertdatat__subjectpublickeyinfo us_rep5)))))
(define-fun us_split_fields_SerialNumber__2__projection ((a us_split_fields12)) unsigned32t
  (rec__certprocessing__idcertdatat__serialnumber a))

(define-fun us_split_fields_SigAlgId__projection ((a us_split_fields12)) algorithmt
  (rec__certprocessing__idcertdatat__sigalgid a))

(define-fun us_split_fields_Issuer__2__projection ((a us_split_fields12)) us_rep
  (rec__certprocessing__idcertdatat__issuer a))

(define-fun us_split_fields_Validity__projection ((a us_split_fields12)) us_rep4
  (rec__certprocessing__idcertdatat__validity a))

(define-fun us_split_fields_Subject__projection ((a us_split_fields12)) us_rep
  (rec__certprocessing__idcertdatat__subject a))

(define-fun us_split_fields_SubjectPublicKeyInfo__projection ((a us_split_fields12)) us_rep5
  (rec__certprocessing__idcertdatat__subjectpublickeyinfo a))

(declare-datatypes ((us_split_fields__ref6 0))
(((mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref___12__projection ((a us_split_fields__ref6)) us_split_fields12
  (us_split_fields__content6 a))

(declare-datatypes ((us_rep6 0))
(((mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep___12__projection ((a us_rep6)) us_split_fields12 (us_split_fields13
                                                                    a))

(define-fun bool_eq7 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep
                            (rec__certprocessing__idcertdatat__serialnumber
                            (us_split_fields13 a))) (to_rep
                                                    (rec__certprocessing__idcertdatat__serialnumber
                                                    (us_split_fields13 b))))
                         (= (to_rep4
                            (rec__certprocessing__idcertdatat__sigalgid
                            (us_split_fields13 a))) (to_rep4
                                                    (rec__certprocessing__idcertdatat__sigalgid
                                                    (us_split_fields13 b)))))
                         (= (bool_eq1
                            (rec__certprocessing__idcertdatat__issuer
                            (us_split_fields13 a))
                            (rec__certprocessing__idcertdatat__issuer
                            (us_split_fields13 b))) true))
                         (= (bool_eq5
                            (rec__certprocessing__idcertdatat__validity
                            (us_split_fields13 a))
                            (rec__certprocessing__idcertdatat__validity
                            (us_split_fields13 b))) true))
                         (= (bool_eq1
                            (rec__certprocessing__idcertdatat__subject
                            (us_split_fields13 a))
                            (rec__certprocessing__idcertdatat__subject
                            (us_split_fields13 b))) true))
                         (= (bool_eq6
                            (rec__certprocessing__idcertdatat__subjectpublickeyinfo
                            (us_split_fields13 a))
                            (rec__certprocessing__idcertdatat__subjectpublickeyinfo
                            (us_split_fields13 b))) true))
                    true false))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep6) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))

(declare-const certprocessing__idcertdatat__serialnumber__first__bit Int)

(declare-const certprocessing__idcertdatat__serialnumber__last__bit Int)

(declare-const certprocessing__idcertdatat__serialnumber__position Int)

;; certprocessing__idcertdatat__serialnumber__first__bit_axiom
  (assert (<= 0 certprocessing__idcertdatat__serialnumber__first__bit))

;; certprocessing__idcertdatat__serialnumber__last__bit_axiom
  (assert
  (< certprocessing__idcertdatat__serialnumber__first__bit certprocessing__idcertdatat__serialnumber__last__bit))

;; certprocessing__idcertdatat__serialnumber__position_axiom
  (assert (<= 0 certprocessing__idcertdatat__serialnumber__position))

(declare-const certprocessing__idcertdatat__sigalgid__first__bit Int)

(declare-const certprocessing__idcertdatat__sigalgid__last__bit Int)

(declare-const certprocessing__idcertdatat__sigalgid__position Int)

;; certprocessing__idcertdatat__sigalgid__first__bit_axiom
  (assert (<= 0 certprocessing__idcertdatat__sigalgid__first__bit))

;; certprocessing__idcertdatat__sigalgid__last__bit_axiom
  (assert
  (< certprocessing__idcertdatat__sigalgid__first__bit certprocessing__idcertdatat__sigalgid__last__bit))

;; certprocessing__idcertdatat__sigalgid__position_axiom
  (assert (<= 0 certprocessing__idcertdatat__sigalgid__position))

(declare-const certprocessing__idcertdatat__issuer__first__bit Int)

(declare-const certprocessing__idcertdatat__issuer__last__bit Int)

(declare-const certprocessing__idcertdatat__issuer__position Int)

;; certprocessing__idcertdatat__issuer__first__bit_axiom
  (assert (<= 0 certprocessing__idcertdatat__issuer__first__bit))

;; certprocessing__idcertdatat__issuer__last__bit_axiom
  (assert
  (< certprocessing__idcertdatat__issuer__first__bit certprocessing__idcertdatat__issuer__last__bit))

;; certprocessing__idcertdatat__issuer__position_axiom
  (assert (<= 0 certprocessing__idcertdatat__issuer__position))

(declare-const certprocessing__idcertdatat__validity__first__bit Int)

(declare-const certprocessing__idcertdatat__validity__last__bit Int)

(declare-const certprocessing__idcertdatat__validity__position Int)

;; certprocessing__idcertdatat__validity__first__bit_axiom
  (assert (<= 0 certprocessing__idcertdatat__validity__first__bit))

;; certprocessing__idcertdatat__validity__last__bit_axiom
  (assert
  (< certprocessing__idcertdatat__validity__first__bit certprocessing__idcertdatat__validity__last__bit))

;; certprocessing__idcertdatat__validity__position_axiom
  (assert (<= 0 certprocessing__idcertdatat__validity__position))

(declare-const certprocessing__idcertdatat__subject__first__bit Int)

(declare-const certprocessing__idcertdatat__subject__last__bit Int)

(declare-const certprocessing__idcertdatat__subject__position Int)

;; certprocessing__idcertdatat__subject__first__bit_axiom
  (assert (<= 0 certprocessing__idcertdatat__subject__first__bit))

;; certprocessing__idcertdatat__subject__last__bit_axiom
  (assert
  (< certprocessing__idcertdatat__subject__first__bit certprocessing__idcertdatat__subject__last__bit))

;; certprocessing__idcertdatat__subject__position_axiom
  (assert (<= 0 certprocessing__idcertdatat__subject__position))

(declare-const certprocessing__idcertdatat__subjectpublickeyinfo__first__bit Int)

(declare-const certprocessing__idcertdatat__subjectpublickeyinfo__last__bit Int)

(declare-const certprocessing__idcertdatat__subjectpublickeyinfo__position Int)

;; certprocessing__idcertdatat__subjectpublickeyinfo__first__bit_axiom
  (assert
  (<= 0 certprocessing__idcertdatat__subjectpublickeyinfo__first__bit))

;; certprocessing__idcertdatat__subjectpublickeyinfo__last__bit_axiom
  (assert
  (< certprocessing__idcertdatat__subjectpublickeyinfo__first__bit certprocessing__idcertdatat__subjectpublickeyinfo__last__bit))

;; certprocessing__idcertdatat__subjectpublickeyinfo__position_axiom
  (assert (<= 0 certprocessing__idcertdatat__subjectpublickeyinfo__position))

(declare-fun user_eq15 (us_rep6 us_rep6) Bool)

(declare-const dummy15 us_rep6)

(declare-datatypes ((idcertdatat__ref 0))
(((mk_idcertdatat__ref (idcertdatat__content us_rep6)))))
(define-fun idcertdatat__ref___projection ((a idcertdatat__ref)) us_rep6
  (idcertdatat__content a))

(declare-sort yearst 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq16 (yearst yearst) Bool)

(declare-const dummy16 yearst)

(declare-datatypes ((yearst__ref 0))
(((mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep8 (yearst) Int)

(declare-fun of_rep8 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range9 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                              (of_rep8 x))) )))

(declare-sort monthst 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq17 (monthst monthst) Bool)

(declare-const dummy17 monthst)

(declare-datatypes ((monthst__ref 0))
(((mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep9 (monthst) Int)

(declare-fun of_rep9 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range10 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-sort dayst 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq18 (dayst dayst) Bool)

(declare-const dummy18 dayst)

(declare-datatypes ((dayst__ref 0))
(((mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep10 (dayst) Int)

(declare-fun of_rep10 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range11 (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-sort millisecst 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq19 (millisecst millisecst) Bool)

(declare-const dummy19 millisecst)

(declare-datatypes ((millisecst__ref 0))
(((mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst
  (millisecst__content a))

(declare-fun to_rep11 (millisecst) Int)

(declare-fun of_rep11 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range12
  (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-datatypes ((us_split_fields14 0))
(((mk___split_fields7
  (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__2__projection ((a us_split_fields14)) yearst
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__2__projection ((a us_split_fields14)) monthst
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__2__projection ((a us_split_fields14)) dayst
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields14)) millisecst
  (rec__clock__timet__millisec a))

(declare-datatypes ((us_split_fields__ref7 0))
(((mk___split_fields__ref7 (us_split_fields__content7 us_split_fields14)))))
(define-fun us_split_fields__ref___16__projection ((a us_split_fields__ref7)) us_split_fields14
  (us_split_fields__content7 a))

(declare-datatypes ((us_rep7 0))
(((mk___rep7 (us_split_fields15 us_split_fields14)))))
(define-fun us_rep___16__projection ((a us_rep7)) us_split_fields14 (us_split_fields15
                                                                    a))

(define-fun bool_eq8 ((a us_rep7)
  (b us_rep7)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep8
                            (rec__clock__timet__year (us_split_fields15 a)))
                         (to_rep8
                         (rec__clock__timet__year (us_split_fields15 b))))
                         (= (to_rep9
                            (rec__clock__timet__month (us_split_fields15 a)))
                         (to_rep9
                         (rec__clock__timet__month (us_split_fields15 b)))))
                         (= (to_rep10
                            (rec__clock__timet__day (us_split_fields15 a)))
                         (to_rep10
                         (rec__clock__timet__day (us_split_fields15 b)))))
                         (= (to_rep11
                            (rec__clock__timet__millisec
                            (us_split_fields15 a))) (to_rep11
                                                    (rec__clock__timet__millisec
                                                    (us_split_fields15 b)))))
                    true false))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep7) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment8 a))))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun user_eq20 (us_rep7 us_rep7) Bool)

(declare-const dummy20 us_rep7)

(declare-datatypes ((timet__ref1 0))
(((mk_timet__ref1 (timet__content1 us_rep7)))))
(define-fun timet__ref___2__projection ((a timet__ref1)) us_rep7 (timet__content1
                                                                 a))

(declare-datatypes ((us_split_fields16 0))
(((mk___split_fields8
  (rec__cert__id__contentst__id us_rep2)(rec__cert__id__contentst__notbefore us_rep7)(rec__cert__id__contentst__notafter us_rep7)(rec__cert__id__contentst__mechanism algorithmt)(rec__cert__id__contentst__subject us_rep)(rec__cert__id__contentst__subjectpublickey us_rep1)))))
(define-fun us_split_fields_ID__4__projection ((a us_split_fields16)) us_rep2
  (rec__cert__id__contentst__id a))

(define-fun us_split_fields_NotBefore__3__projection ((a us_split_fields16)) us_rep7
  (rec__cert__id__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__3__projection ((a us_split_fields16)) us_rep7
  (rec__cert__id__contentst__notafter a))

(define-fun us_split_fields_Mechanism__2__projection ((a us_split_fields16)) algorithmt
  (rec__cert__id__contentst__mechanism a))

(define-fun us_split_fields_Subject__2__projection ((a us_split_fields16)) us_rep
  (rec__cert__id__contentst__subject a))

(define-fun us_split_fields_SubjectPublicKey__projection ((a us_split_fields16)) us_rep1
  (rec__cert__id__contentst__subjectpublickey a))

(declare-datatypes ((us_split_fields__ref8 0))
(((mk___split_fields__ref8 (us_split_fields__content8 us_split_fields16)))))
(define-fun us_split_fields__ref___19__projection ((a us_split_fields__ref8)) us_split_fields16
  (us_split_fields__content8 a))

(declare-datatypes ((us_rep8 0))
(((mk___rep8 (us_split_fields17 us_split_fields16)))))
(define-fun us_rep___20__projection ((a us_rep8)) us_split_fields16 (us_split_fields17
                                                                    a))

(define-fun bool_eq9 ((a us_rep8)
  (b us_rep8)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__cert__id__contentst__id
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__id
                            (us_split_fields17 b))) true)
                         (= (bool_eq8
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields17 b))) true))
                         (= (bool_eq8
                            (rec__cert__id__contentst__notafter
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__notafter
                            (us_split_fields17 b))) true))
                         (= (to_rep4
                            (rec__cert__id__contentst__mechanism
                            (us_split_fields17 a))) (to_rep4
                                                    (rec__cert__id__contentst__mechanism
                                                    (us_split_fields17 b)))))
                         (= (bool_eq1
                            (rec__cert__id__contentst__subject
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__subject
                            (us_split_fields17 b))) true))
                         (= (bool_eq2
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields17 b))) true))
                    true false))

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep8) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment9 a))))

(declare-const cert__id__contentst__id__first__bit Int)

(declare-const cert__id__contentst__id__last__bit Int)

(declare-const cert__id__contentst__id__position Int)

;; cert__id__contentst__id__first__bit_axiom
  (assert (<= 0 cert__id__contentst__id__first__bit))

;; cert__id__contentst__id__last__bit_axiom
  (assert
  (< cert__id__contentst__id__first__bit cert__id__contentst__id__last__bit))

;; cert__id__contentst__id__position_axiom
  (assert (<= 0 cert__id__contentst__id__position))

(declare-const cert__id__contentst__notbefore__first__bit Int)

(declare-const cert__id__contentst__notbefore__last__bit Int)

(declare-const cert__id__contentst__notbefore__position Int)

;; cert__id__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notbefore__first__bit))

;; cert__id__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__id__contentst__notbefore__first__bit cert__id__contentst__notbefore__last__bit))

;; cert__id__contentst__notbefore__position_axiom
  (assert (<= 0 cert__id__contentst__notbefore__position))

(declare-const cert__id__contentst__notafter__first__bit Int)

(declare-const cert__id__contentst__notafter__last__bit Int)

(declare-const cert__id__contentst__notafter__position Int)

;; cert__id__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notafter__first__bit))

;; cert__id__contentst__notafter__last__bit_axiom
  (assert
  (< cert__id__contentst__notafter__first__bit cert__id__contentst__notafter__last__bit))

;; cert__id__contentst__notafter__position_axiom
  (assert (<= 0 cert__id__contentst__notafter__position))

(declare-const cert__id__contentst__mechanism__first__bit Int)

(declare-const cert__id__contentst__mechanism__last__bit Int)

(declare-const cert__id__contentst__mechanism__position Int)

;; cert__id__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__id__contentst__mechanism__first__bit))

;; cert__id__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__id__contentst__mechanism__first__bit cert__id__contentst__mechanism__last__bit))

;; cert__id__contentst__mechanism__position_axiom
  (assert (<= 0 cert__id__contentst__mechanism__position))

(declare-const cert__id__contentst__subject__first__bit Int)

(declare-const cert__id__contentst__subject__last__bit Int)

(declare-const cert__id__contentst__subject__position Int)

;; cert__id__contentst__subject__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subject__first__bit))

;; cert__id__contentst__subject__last__bit_axiom
  (assert
  (< cert__id__contentst__subject__first__bit cert__id__contentst__subject__last__bit))

;; cert__id__contentst__subject__position_axiom
  (assert (<= 0 cert__id__contentst__subject__position))

(declare-const cert__id__contentst__subjectpublickey__first__bit Int)

(declare-const cert__id__contentst__subjectpublickey__last__bit Int)

(declare-const cert__id__contentst__subjectpublickey__position Int)

;; cert__id__contentst__subjectpublickey__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__first__bit))

;; cert__id__contentst__subjectpublickey__last__bit_axiom
  (assert
  (< cert__id__contentst__subjectpublickey__first__bit cert__id__contentst__subjectpublickey__last__bit))

;; cert__id__contentst__subjectpublickey__position_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__position))

(declare-fun user_eq21 (us_rep8 us_rep8) Bool)

(declare-const dummy21 us_rep8)

(declare-datatypes ((contentst__ref 0))
(((mk_contentst__ref (contentst__content us_rep8)))))
(define-fun contentst__ref___2__projection ((a contentst__ref)) us_rep8
  (contentst__content a))

(declare-const rawcert (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant1 ((temp___expr_655 Int)
  (temp___is_init_652 Bool) (temp___skip_constant_653 Bool)
  (temp___do_toplevel_654 Bool)) Bool (=>
                                      (or (= temp___is_init_652 true)
                                      (<= 1901 2099)) (in_range9
                                      temp___expr_655)))

(define-fun dynamic_invariant2 ((temp___expr_661 Int)
  (temp___is_init_658 Bool) (temp___skip_constant_659 Bool)
  (temp___do_toplevel_660 Bool)) Bool (=>
                                      (or (= temp___is_init_658 true)
                                      (<= 1 12)) (in_range10
                                      temp___expr_661)))

(define-fun dynamic_invariant3 ((temp___expr_667 Int)
  (temp___is_init_664 Bool) (temp___skip_constant_665 Bool)
  (temp___do_toplevel_666 Bool)) Bool (=>
                                      (or (= temp___is_init_664 true)
                                      (<= 1 31)) (in_range11
                                      temp___expr_667)))

(define-fun dynamic_invariant4 ((temp___expr_691 Int)
  (temp___is_init_688 Bool) (temp___skip_constant_689 Bool)
  (temp___do_toplevel_690 Bool)) Bool (=>
                                      (or (= temp___is_init_688 true)
                                      (<= 0 86399999)) (in_range12
                                      temp___expr_691)))

(define-fun dynamic_invariant5 ((temp___expr_155 Int)
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (or (= temp___is_init_152 true)
                                      (<= 0 4294967295)) (in_range1
                                      temp___expr_155)))

(define-fun dynamic_invariant6 ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 40)) (in_range2 temp___expr_179)))

(define-fun dynamic_invariant7 ((temp___expr_200 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)) Bool (=>
                                      (or (= temp___is_init_197 true)
                                      (<= 0 4294967295)) (in_range4
                                      temp___expr_200)))

(define-fun dynamic_invariant8 ((temp___expr_218 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (=>
                                      (or (= temp___is_init_215 true)
                                      (<= 0 10)) (in_range5 temp___expr_218)))

(define-fun dynamic_invariant9 ((temp___expr_230 Int)
  (temp___is_init_227 Bool) (temp___skip_constant_228 Bool)
  (temp___do_toplevel_229 Bool)) Bool (=>
                                      (or (= temp___is_init_227 true)
                                      (<= 0 4294967295)) (in_range6
                                      temp___expr_230)))

(define-fun dynamic_invariant10 ((temp___expr_236 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (or (= temp___is_init_233 true)
                                      (<= 0 128)) (in_range7
                                      temp___expr_236)))

(define-fun dynamic_invariant11 ((temp___expr_309 Int)
  (temp___is_init_306 Bool) (temp___skip_constant_307 Bool)
  (temp___do_toplevel_308 Bool)) Bool (=>
                                      (or (= temp___is_init_306 true)
                                      (<= 0 4294967295)) (in_range8
                                      temp___expr_309)))

(declare-const contents__split_fields us_split_fields__ref8)

(declare-const localcontents__split_fields us_split_fields__ref6)

(declare-const o serialnumbert)

(declare-const o1 issueridt)

(declare-const o2 namecountt)

(declare-const o3 (Array Int character))

(declare-const o4 serialnumbert)

(declare-const o5 issueridt)

(declare-const o6 namecountt)

(declare-const o7 (Array Int character))

(declare-const o8 serialnumbert)

(declare-const o9 us_split_fields16)

(declare-const temp___1295 us_rep8)

(declare-const o10 algorithmt)

(declare-const o11 us_split_fields16)

(declare-const temp___1297 us_rep8)

(declare-const o12 algorithmt)

(declare-const o13 algorithmt)

(declare-const o14 keyidt)

(declare-const o15 keylengtht)

(declare-const o16 algorithmt)

(declare-const o17 keyidt)

(declare-const o18 keylengtht)

(declare-const o19 us_split_fields16)

(declare-const temp___1302 us_rep8)

(declare-const o20 keyidt)

(declare-const o21 algorithmt)

(declare-const o22 keyidt)

(declare-const o23 keylengtht)

(declare-const o24 algorithmt)

(declare-const o25 keyidt)

(declare-const o26 keylengtht)

(declare-const o27 us_split_fields16)

(declare-const temp___1305 us_rep8)

(declare-const localcontents__split_fields1 us_split_fields12)

(declare-const result us_split_fields__ref8)

(declare-const contents__split_fields1 us_split_fields16)

(declare-const result1 us_split_fields__ref8)

(declare-const contents__split_fields2 us_split_fields16)

(declare-const result2 us_split_fields__ref8)

(declare-const contents__split_fields3 us_split_fields16)

(declare-const result3 us_split_fields__ref8)

(declare-const contents__split_fields4 us_split_fields16)

(declare-const result4 us_split_fields__ref8)

(declare-const contents__split_fields5 us_split_fields16)

(declare-const result5 us_split_fields__ref8)

(declare-const contents__split_fields6 us_split_fields16)

;; H
  (assert (= result contents__split_fields))

;; H
  (assert
  (= (let ((subject contents__split_fields)) contents__split_fields1)
  (mk___split_fields8
  (mk___rep2
  (mk___split_fields2
  (rec__certprocessing__idcertdatat__issuer
  (let ((subject localcontents__split_fields)) localcontents__split_fields1))
  (rec__certtypes__idt__serialnumber
  (us_split_fields5
  (rec__cert__id__contentst__id
  (us_split_fields__content8 contents__split_fields))))))
  (rec__cert__id__contentst__notbefore
  (us_split_fields__content8 contents__split_fields))
  (rec__cert__id__contentst__notafter
  (us_split_fields__content8 contents__split_fields))
  (rec__cert__id__contentst__mechanism
  (us_split_fields__content8 contents__split_fields))
  (rec__cert__id__contentst__subject
  (us_split_fields__content8 contents__split_fields))
  (rec__cert__id__contentst__subjectpublickey
  (us_split_fields__content8 contents__split_fields)))))

;; H
  (assert
  (= (to_rep7 o) (to_rep
                 (rec__certprocessing__idcertdatat__serialnumber
                 (let ((subject localcontents__split_fields))
                 localcontents__split_fields1)))))

;; H
  (assert
  (= (rec__certtypes__idt__issuer
     (us_split_fields5
     (rec__cert__id__contentst__id
     (let ((subject contents__split_fields)) contents__split_fields1))))
  (mk___rep (mk___split_fields o1 o2 o3))))

;; H
  (assert (= o o4))

;; H
  (assert (= o5 o1))

;; H
  (assert (= o6 o2))

;; H
  (assert (= o7 o3))

;; H
  (assert (= o8 o4))

;; H
  (assert
  (= o9 (mk___split_fields8
        (mk___rep2
        (mk___split_fields2 (mk___rep (mk___split_fields o5 o6 o7)) o8))
        (rec__cert__id__contentst__notbefore
        (let ((subject contents__split_fields)) contents__split_fields1))
        (rec__cert__id__contentst__notafter
        (let ((subject contents__split_fields)) contents__split_fields1))
        (rec__cert__id__contentst__mechanism
        (let ((subject contents__split_fields)) contents__split_fields1))
        (rec__cert__id__contentst__subject
        (let ((subject contents__split_fields)) contents__split_fields1))
        (rec__cert__id__contentst__subjectpublickey
        (let ((subject contents__split_fields)) contents__split_fields1)))))

;; H
  (assert (= temp___1295 (mk___rep8 o9)))

;; H
  (assert
  (= result1 (let ((subject contents__split_fields))
             (mk___split_fields__ref8 contents__split_fields1))))

;; H
  (assert
  (= (let ((subject contents__split_fields)) contents__split_fields2)
  (us_split_fields17 temp___1295)))

;; H
  (assert
  (= (to_rep4 o10) (to_rep4
                   (rec__certprocessing__idcertdatat__sigalgid
                   (let ((subject localcontents__split_fields))
                   localcontents__split_fields1)))))

;; H
  (assert
  (= o11 (mk___split_fields8
         (rec__cert__id__contentst__id
         (let ((subject contents__split_fields)) contents__split_fields2))
         (rec__cert__id__contentst__notbefore
         (let ((subject contents__split_fields)) contents__split_fields2))
         (rec__cert__id__contentst__notafter
         (let ((subject contents__split_fields)) contents__split_fields2))
         o10
         (rec__cert__id__contentst__subject
         (let ((subject contents__split_fields)) contents__split_fields2))
         (rec__cert__id__contentst__subjectpublickey
         (let ((subject contents__split_fields)) contents__split_fields2)))))

;; H
  (assert (= temp___1297 (mk___rep8 o11)))

;; H
  (assert
  (= result2 (let ((subject contents__split_fields))
             (mk___split_fields__ref8 contents__split_fields2))))

;; H
  (assert
  (= (let ((subject contents__split_fields)) contents__split_fields3)
  (us_split_fields17 temp___1297)))

;; H
  (assert
  (= result3 (let ((subject contents__split_fields))
             (mk___split_fields__ref8 contents__split_fields3))))

;; H
  (assert
  (= (let ((subject contents__split_fields)) contents__split_fields4)
  (mk___split_fields8
  (rec__cert__id__contentst__id
  (let ((subject contents__split_fields)) contents__split_fields3))
  (rec__cert__id__contentst__notbefore
  (let ((subject contents__split_fields)) contents__split_fields3))
  (rec__cert__id__contentst__notafter
  (let ((subject contents__split_fields)) contents__split_fields3))
  (rec__cert__id__contentst__mechanism
  (let ((subject contents__split_fields)) contents__split_fields3))
  (rec__certprocessing__idcertdatat__subject
  (let ((subject localcontents__split_fields)) localcontents__split_fields1))
  (rec__cert__id__contentst__subjectpublickey
  (let ((subject contents__split_fields)) contents__split_fields3)))))

;; H
  (assert
  (= (to_rep4 o12) (to_rep4
                   (rec__certprocessing__publickeyinfot__algorithmid
                   (us_split_fields11
                   (rec__certprocessing__idcertdatat__subjectpublickeyinfo
                   (let ((subject localcontents__split_fields))
                   localcontents__split_fields1)))))))

;; H
  (assert (= o12 o13))

;; H
  (assert
  (= (rec__cryptotypes__keypartt__keyid
     (us_split_fields3
     (rec__cert__id__contentst__subjectpublickey
     (let ((subject contents__split_fields)) contents__split_fields4))))
  o14))

;; H
  (assert
  (= (rec__cryptotypes__keypartt__keylength
     (us_split_fields3
     (rec__cert__id__contentst__subjectpublickey
     (let ((subject contents__split_fields)) contents__split_fields4))))
  o15))

;; H
  (assert (= o16 o13))

;; H
  (assert (= o17 o14))

;; H
  (assert (= o18 o15))

;; H
  (assert
  (= o19 (mk___split_fields8
         (rec__cert__id__contentst__id
         (let ((subject contents__split_fields)) contents__split_fields4))
         (rec__cert__id__contentst__notbefore
         (let ((subject contents__split_fields)) contents__split_fields4))
         (rec__cert__id__contentst__notafter
         (let ((subject contents__split_fields)) contents__split_fields4))
         (rec__cert__id__contentst__mechanism
         (let ((subject contents__split_fields)) contents__split_fields4))
         (rec__cert__id__contentst__subject
         (let ((subject contents__split_fields)) contents__split_fields4))
         (mk___rep1 (mk___split_fields1 o16 o17 o18)))))

;; H
  (assert (= temp___1302 (mk___rep8 o19)))

;; H
  (assert
  (= result4 (let ((subject contents__split_fields))
             (mk___split_fields__ref8 contents__split_fields4))))

;; H
  (assert
  (= (let ((subject contents__split_fields)) contents__split_fields5)
  (us_split_fields17 temp___1302)))

;; H
  (assert
  (= (to_rep5 o20) (to_rep
                   (rec__certprocessing__publickeyinfot__keyid
                   (us_split_fields11
                   (rec__certprocessing__idcertdatat__subjectpublickeyinfo
                   (let ((subject localcontents__split_fields))
                   localcontents__split_fields1)))))))

;; H
  (assert
  (= (rec__cryptotypes__keypartt__algorithmid
     (us_split_fields3
     (rec__cert__id__contentst__subjectpublickey
     (let ((subject contents__split_fields)) contents__split_fields5))))
  o21))

;; H
  (assert (= o20 o22))

;; H
  (assert
  (= (rec__cryptotypes__keypartt__keylength
     (us_split_fields3
     (rec__cert__id__contentst__subjectpublickey
     (let ((subject contents__split_fields)) contents__split_fields5))))
  o23))

;; H
  (assert (= o24 o21))

;; H
  (assert (= o25 o22))

;; H
  (assert (= o26 o23))

;; H
  (assert
  (= o27 (mk___split_fields8
         (rec__cert__id__contentst__id
         (let ((subject contents__split_fields)) contents__split_fields5))
         (rec__cert__id__contentst__notbefore
         (let ((subject contents__split_fields)) contents__split_fields5))
         (rec__cert__id__contentst__notafter
         (let ((subject contents__split_fields)) contents__split_fields5))
         (rec__cert__id__contentst__mechanism
         (let ((subject contents__split_fields)) contents__split_fields5))
         (rec__cert__id__contentst__subject
         (let ((subject contents__split_fields)) contents__split_fields5))
         (mk___rep1 (mk___split_fields1 o24 o25 o26)))))

;; H
  (assert (= temp___1305 (mk___rep8 o27)))

;; H
  (assert
  (= result5 (let ((subject contents__split_fields))
             (mk___split_fields__ref8 contents__split_fields5))))

;; H
  (assert
  (= (let ((subject contents__split_fields)) contents__split_fields6)
  (us_split_fields17 temp___1305)))

;; H
  (assert
  (<= 0 (to_rep
        (rec__certprocessing__publickeyinfot__keylength
        (us_split_fields11
        (rec__certprocessing__idcertdatat__subjectpublickeyinfo
        (let ((subject localcontents__split_fields))
        localcontents__split_fields1)))))))

;; H
  (assert
  (<= (to_rep
      (rec__certprocessing__publickeyinfot__keylength
      (us_split_fields11
      (rec__certprocessing__idcertdatat__subjectpublickeyinfo
      (let ((subject localcontents__split_fields))
      localcontents__split_fields1))))) 128))

(assert
;; WP_parameter_def
 ;; File "cryptotypes.ads", line 70, characters 0-0
  (not (in_range7
  (to_rep
  (rec__certprocessing__publickeyinfot__keylength
  (us_split_fields11
  (rec__certprocessing__idcertdatat__subjectpublickeyinfo
  (let ((subject localcontents__split_fields)) localcontents__split_fields1))))))))
(check-sat)
(exit)
