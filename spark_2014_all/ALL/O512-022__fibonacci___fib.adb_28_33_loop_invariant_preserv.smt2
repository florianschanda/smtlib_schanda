;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun fibonacci (Int) Int)

(declare-fun fibonacci__function_guard (Int Int) Bool)

;; fibonacci__post_axiom
  (assert
  (forall ((n Int))
  (! (=> (and (dynamic_invariant n true true true) (<= n 23))
     (dynamic_invariant (fibonacci n) true false true)) :pattern ((fibonacci
                                                                  n)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun n1 () Int)

(declare-fun n2 () Int)

(declare-fun l1 () Int)

(declare-fun l2 () Int)

(declare-fun a1 () Int)

(declare-fun a2 () Int)

(declare-fun b1 () Int)

(declare-fun b2 () Int)

(declare-fun i () Int)

(declare-fun copy_n1 () Int)

(declare-fun copy_n2 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun result () Int)

(declare-fun copy_n11 () Int)

(declare-fun result1 () Int)

(declare-fun copy_n21 () Int)

(declare-fun result2 () Int)

(declare-fun a11 () Int)

(declare-fun result3 () Int)

(declare-fun a21 () Int)

(declare-fun result4 () Int)

(declare-fun b11 () Int)

(declare-fun result5 () Int)

(declare-fun b21 () Int)

(declare-fun result6 () Int)

(declare-fun i1 () Int)

(declare-fun n11 () Int)

(declare-fun a12 () Int)

(declare-fun b12 () Int)

(declare-fun i2 () Int)

(declare-fun temp___166 () Int)

(declare-fun result7 () Int)

(declare-fun temp___1661 () Int)

(declare-fun result8 () int__ref)

(declare-fun a13 () Int)

(declare-fun result9 () int__ref)

(declare-fun b13 () Int)

(declare-fun result10 () int__ref)

(declare-fun n12 () Int)

(declare-fun result11 () int__ref)

(declare-fun i3 () Int)

;; H
  (assert (in_range2 n1))

;; H
  (assert (in_range2 n2))

;; H
  (assert (in_range2 l1))

;; H
  (assert (in_range2 l2))

;; H
  (assert (and (= n1 n2) (and (= l1 l2) (<= n1 23))))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 a1)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 a2)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 b1)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 b2)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 i)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 copy_n1)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 copy_n2)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref copy_n1)))

;; H
  (assert (= copy_n11 n1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref copy_n2)))

;; H
  (assert (= copy_n21 n2))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref a1)))

;; H
  (assert (= a11 1))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref a2)))

;; H
  (assert (= a21 1))

;; H
  (assert (= (mk_int__ref result4) (mk_int__ref b1)))

;; H
  (assert (= b11 1))

;; H
  (assert (= (mk_int__ref result5) (mk_int__ref b2)))

;; H
  (assert (= b21 1))

;; H
  (assert (= (mk_int__ref result6) (mk_int__ref i)))

;; H
  (assert (= i1 2))

;; H
  (assert (< 2 n1))

;; H
  (assert
  (and
  (and (and (= a12 (fibonacci i2)) (= b12 (fibonacci (- i2 1)))) (<= i2 23))
  (= (- (+ n11 i2) 2) copy_n11)))

;; H
  (assert
  (and
  (and
  (and (and (=> (<= 0 2147483647) (in_range2 a12)) (in_range2 n11))
  (=> (<= 0 2147483647) (in_range2 b12)))
  (=> (<= 0 2147483647) (in_range2 i2))) (< 2 n11)))

;; H
  (assert (= temp___166 result7))

;; H
  (assert (= temp___1661 n11))

;; H
  (assert (and (= o (+ a12 b12)) (in_range1 (+ a12 b12))))

;; H
  (assert (= result8 (mk_int__ref a12)))

;; H
  (assert (= a13 o))

;; H
  (assert (and (= o1 (- a13 b12)) (in_range1 (- a13 b12))))

;; H
  (assert (and (= o2 o1) (in_range2 o1)))

;; H
  (assert (= result9 (mk_int__ref b12)))

;; H
  (assert (= b13 o2))

;; H
  (assert (and (= o3 (- n11 1)) (in_range2 (- n11 1))))

;; H
  (assert (= result10 (mk_int__ref n11)))

;; H
  (assert (= n12 o3))

;; H
  (assert (and (= o4 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= result11 (mk_int__ref i2)))

;; H
  (assert (= i3 o4))

;; H
  (assert (< 2 n12))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= a13 (fibonacci i3))))
(check-sat)
