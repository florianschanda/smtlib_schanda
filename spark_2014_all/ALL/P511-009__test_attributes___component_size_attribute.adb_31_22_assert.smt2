;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort r 0)

(declare-fun user_eq (r r) Bool)

(declare-const value__size Int)

(declare-fun object__size (r) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (r) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a r)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a r)) (<= 0 (object__alignment a))))

(declare-const dummy r)

(declare-datatypes ((r__ref 0)) (((mk_r__ref (r__content r)))))
(define-fun r__ref___projection ((a r__ref)) r (r__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int r))))))
(declare-fun slide ((Array Int r) Int Int) (Array Int r))

;; slide_eq
  (assert
  (forall ((a (Array Int r)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int r)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int r) Int Int (Array Int r) Int
  Int) (Array Int r))

;; concat_def
  (assert
  (forall ((a (Array Int r)) (b (Array Int r)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (r Int) (Array Int r))

;; singleton_def
  (assert
  (forall ((v r))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int r)) (a__first Int) (a__last Int)
  (b (Array Int r)) (b__first Int)
  (b__last Int)) Bool (ite (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int r)) (b (Array Int r)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))))))

(declare-const dummy1 (Array Int r))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int r)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int r)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int r)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int r))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int r))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int r))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq1 ((Array Int r) (Array Int r)) Bool)

;; H
  (assert (<= 0 value__component__size))

(assert
;; WP_parameter_def
 ;; File "component_size_attribute.adb", line 13, characters 0-0
  (not (< value__component__size 0)))
(check-sat)
(exit)
