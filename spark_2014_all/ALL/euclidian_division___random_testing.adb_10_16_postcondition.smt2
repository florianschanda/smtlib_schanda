;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const result__ Bool)

(declare-const m Int)

(declare-const n Int)

(declare-const q Int)

(declare-const r Int)

(declare-const o Int)

(declare-const m1 Int)

(declare-const n1 Int)

(declare-const q1 Int)

(declare-const r1 Int)

(declare-const result Bool)

(declare-const result__1 Bool)

(declare-const result1 Bool)

(declare-const result__2 Bool)

(declare-const result__3 Bool)

(declare-const m2 Int)

(declare-const n2 Int)

(declare-const q2 Int)

(declare-const r2 Int)

(declare-const result__4 Bool)

(declare-const m3 Int)

(declare-const n3 Int)

(declare-const q3 Int)

(declare-const r3 Int)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 m)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 n)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 q)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 r)))

;; H
  (assert (and (and (<= 0 m1) (< m1 200)) (in_range1 m1)))

;; H
  (assert (and (and (<= 0 n1) (< n1 100)) (in_range1 n1)))

;; H
  (assert (and (= o (+ n1 1)) (in_range1 (+ n1 1))))

;; H
  (assert
  (and (and (and (and (<= 0 q1) (<= 0 r1)) (< r1 o)) (= (+ (* o q1) r1) m1))
  (and (in_range1 q1) (in_range1 r1))))

;; H
  (assert (= result result__))

;; H
  (assert (= result__1 (of_int 0)))

;; H
  (assert (=> (<= r1 98) (= result1 result__1)))

;; H
  (assert (=> (<= r1 98) (= result__2 (of_int 1))))

;; H
  (assert (=> (not (<= r1 98)) (= result__2 result__1)))

;; H
  (assert (= r1 r2))

;; H
  (assert (= q1 q2))

;; H
  (assert (= n1 n2))

;; H
  (assert (= m1 m2))

;; H
  (assert (= result__2 result__3))

;; H
  (assert (= r3 r1))

;; H
  (assert (= q3 q1))

;; H
  (assert (= n3 n1))

;; H
  (assert (= m3 m1))

;; H
  (assert (= result__4 result__2))

(assert
;; WP_parameter_def
 ;; File "random_testing.adb", line 9, characters 0-0
  (not (= result__3 true)))
(check-sat)
(exit)
