(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int : t -> int

logic of_int : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t1
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t1

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type hash_type

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq8 : t, t -> bool

axiom bool_eq_def6 :
  (forall x:t. forall y:t [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq4 : hash_type, hash_type -> bool

logic dummy5 : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref___projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

logic hash : us_t -> t

logic hash__function_guard : t, us_t -> prop

axiom hash__post_axiom : true

type name_id

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : name_id, name_id -> bool

logic dummy6 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref___projection(a: name_id__ref) : name_id =
  (a).name_id__content

logic to_rep2 : name_id -> int

logic of_rep2 : int -> name_id

axiom inversion_axiom2 :
  (forall x:name_id [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:name_id [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (t,name_id) farray
}

logic slide1 : (t,name_id) farray, t, t -> (t,name_id) farray

axiom slide_eq1 :
  (forall a:(t,name_id) farray.
  (forall first2:t [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(t,name_id) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide1(a, old_first, new_first)[i])]. ((slide1(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

logic concat1 : (t,name_id) farray, t, t, (t,name_id) farray, t,
  t -> (t,name_id) farray

axiom concat_def1 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t.
  (forall i:t [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((ule(a_first, i) and ule(i, a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and (ugt(i, a_last) -> ((concat1(a,
  a_first, a_last, b, b_first, b_last)[i]) = (b[add(sub(i, a_last),
  sub(b_first, one))])))))))

logic singleton1 : name_id, t -> (t,name_id) farray

axiom singleton_def1 :
  (forall v:name_id.
  (forall i:t [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq10 : (t,name_id) farray, t, t, (t,name_id) farray, t, t -> bool

axiom bool_eq_def8 :
  (forall a:(t,name_id) farray. forall a__first:t. forall a__last:t.
  forall b:(t,name_id) farray. forall b__first:t. forall b__last:t
  [bool_eq10(a, a__first, a__last, b, b__first, b__last)]. (((((ule(a__first,
  a__last) and (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) or ((not ule(a__first, a__last)) and
  ugt(b__first, b__last))) and
  (forall temp___idx_132:t. (((ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)) and
  (to_rep2((a[temp___idx_132])) = to_rep2((b[add(sub(b__first, a__first),
  temp___idx_132)])))) or (not (ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)))))) -> (bool_eq10(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule(a__first, a__last) ->
  (ule(b__first, b__last) and (sub(a__last, a__first) = sub(b__last,
  b__first)))) and ((not ule(a__first, a__last)) -> ugt(b__first,
  b__last))) and
  (forall temp___idx_132:t. ((ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[add(sub(b__first, a__first),
  temp___idx_132)]))))))) -> (bool_eq10(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq10(b, b__first, b__last, a, a__first, a__last) = true) ->
  (((ule(a__first, a__last) -> (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) and ((not ule(a__first, a__last)) ->
  ugt(b__first, b__last))) and
  (forall temp___idx_132:t. ((ule(a__first, temp___idx_132) and
  ule(temp___idx_132, a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[add(sub(b__first, a__first),
  temp___idx_132)])))))))))

logic compare1 : (t,name_id) farray, t, t, (t,name_id) farray, t, t -> int

axiom compare_def_eq1 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare1(a, a_first, a_last, b, b_first, b_last)]. ((compare1(a, a_first,
  a_last, b, b_first, b_last) = 0) <-> (bool_eq10(a, a_first, a_last, b,
  b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare1(a, a_first, a_last, b, b_first, b_last)]. ((compare1(a, a_first,
  a_last, b, b_first, b_last) <  0) <->
  (exists i:t. exists j:t. (ule(i, a_last) and (ult(j, b_last) and
  ((bool_eq10(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  (ult(i, a_last) and (to_rep2((a[add(i, one)])) <  to_rep2((b[add(j,
  one)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare1(a, a_first, a_last, b, b_first, b_last)]. ((0 <  compare1(a,
  a_first, a_last, b, b_first, b_last)) <->
  (exists i:t. exists j:t. (ule(i, b_last) and (ult(j, a_last) and
  ((bool_eq10(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  (ult(i, b_last) and (to_rep2((b[add(i, one)])) <  to_rep2((a[add(j,
  one)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

type capacity_range

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : capacity_range, capacity_range -> bool

logic dummy7 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__names__data__char_tables__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__names__data__char_tables__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__names__data__char_tables__vector : us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__names__data__char_tables__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = { rec__names__data__char_tables__vector__capacity = a };
  us_split_fields1 = { rec__names__data__char_tables__vector = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = a }; us_split_fields1 = {
  rec__names__data__char_tables__vector = a1 } })))

logic names__data__char_tables__vector__capacity__first__bit : int

logic names__data__char_tables__vector__capacity__last__bit : int

logic names__data__char_tables__vector__capacity__position : int

axiom names__data__char_tables__vector__capacity__first__bit_axiom :
  (0 <= names__data__char_tables__vector__capacity__first__bit)

axiom names__data__char_tables__vector__capacity__last__bit_axiom :
  (names__data__char_tables__vector__capacity__first__bit <  names__data__char_tables__vector__capacity__last__bit)

axiom names__data__char_tables__vector__capacity__position_axiom :
  (0 <= names__data__char_tables__vector__capacity__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy8 : capacity_range

logic dummy9 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

logic to_rep3 : capacity_range -> int

logic of_rep3 : int -> capacity_range

axiom inversion_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate in_range6(rec__names__data__char_tables__vector__capacity1: int,
  a: us_rep) =
  (rec__names__data__char_tables__vector__capacity1 = to_rep3(((a).us_split_discrs1).rec__names__data__char_tables__vector__capacity))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__names__data__char_tables__vector__capacity = a };
  us_split_fields1 = { rec__names__data__char_tables__vector = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = a }; us_split_fields1 = {
  rec__names__data__char_tables__vector = a1 } })))

logic names__data__char_tables__vector__capacity__first__bit1 : int

logic names__data__char_tables__vector__capacity__last__bit1 : int

logic names__data__char_tables__vector__capacity__position1 : int

axiom names__data__char_tables__vector__capacity__first__bit_axiom1 :
  (0 <= names__data__char_tables__vector__capacity__first__bit1)

axiom names__data__char_tables__vector__capacity__last__bit_axiom1 :
  (names__data__char_tables__vector__capacity__first__bit1 <  names__data__char_tables__vector__capacity__last__bit1)

axiom names__data__char_tables__vector__capacity__position_axiom1 :
  (0 <= names__data__char_tables__vector__capacity__position1)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy10 : capacity_range

logic dummy11 : us_main_type

type tchar_tableS__ref = { tchar_tableS__content : us_rep
}

function tchar_tableS__ref___projection(a: tchar_tableS__ref) : us_rep =
  (a).tchar_tableS__content

logic char_table__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

type capacity_range1

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : capacity_range1, capacity_range1 -> bool

logic dummy12 : capacity_range1

type capacity_range__ref1 = { capacity_range__content1 : capacity_range1
}

function capacity_range__ref_2__projection(a: capacity_range__ref1) : capacity_range1 =
  (a).capacity_range__content1

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = { rec__names__data__entry_tables__vector__capacity :
capacity_range1
}

function us_split_discrs_2__projection(a: us_split_discrs2) : capacity_range1 =
  (a).rec__names__data__entry_tables__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref_2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__names__data__entry_tables__vector :
us_main_type1
}

function us_split_fields_Vector2__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__names__data__entry_tables__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep_4__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep_5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:capacity_range1. forall a1:us_main_type1. (0 <= object__size3({
  us_split_discrs3 = { rec__names__data__entry_tables__vector__capacity = a
  }; us_split_fields3 = { rec__names__data__entry_tables__vector = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:capacity_range1. forall a1:us_main_type1.
  (0 <= object__alignment3({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = a }; us_split_fields3 =
  { rec__names__data__entry_tables__vector = a1 } })))

logic names__data__entry_tables__vector__capacity__first__bit : int

logic names__data__entry_tables__vector__capacity__last__bit : int

logic names__data__entry_tables__vector__capacity__position : int

axiom names__data__entry_tables__vector__capacity__first__bit_axiom :
  (0 <= names__data__entry_tables__vector__capacity__first__bit)

axiom names__data__entry_tables__vector__capacity__last__bit_axiom :
  (names__data__entry_tables__vector__capacity__first__bit <  names__data__entry_tables__vector__capacity__last__bit)

axiom names__data__entry_tables__vector__capacity__position_axiom :
  (0 <= names__data__entry_tables__vector__capacity__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy13 : capacity_range1

logic dummy14 : us_main_type1

type vector__ref1 = { vector__content1 : us_rep1
}

function vector__ref_2__projection(a: vector__ref1) : us_rep1 =
  (a).vector__content1

logic to_rep4 : capacity_range1 -> int

logic of_rep4 : int -> capacity_range1

axiom inversion_axiom4 :
  (forall x:capacity_range1 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:capacity_range1 [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

predicate in_range8(rec__names__data__entry_tables__vector__capacity1: int,
  a: us_rep1) =
  (rec__names__data__entry_tables__vector__capacity1 = to_rep4(((a).us_split_discrs3).rec__names__data__entry_tables__vector__capacity))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:capacity_range1. forall a1:us_main_type1. (0 <= object__size4({
  us_split_discrs3 = { rec__names__data__entry_tables__vector__capacity = a
  }; us_split_fields3 = { rec__names__data__entry_tables__vector = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:capacity_range1. forall a1:us_main_type1.
  (0 <= object__alignment4({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = a }; us_split_fields3 =
  { rec__names__data__entry_tables__vector = a1 } })))

logic names__data__entry_tables__vector__capacity__first__bit1 : int

logic names__data__entry_tables__vector__capacity__last__bit1 : int

logic names__data__entry_tables__vector__capacity__position1 : int

axiom names__data__entry_tables__vector__capacity__first__bit_axiom1 :
  (0 <= names__data__entry_tables__vector__capacity__first__bit1)

axiom names__data__entry_tables__vector__capacity__last__bit_axiom1 :
  (names__data__entry_tables__vector__capacity__first__bit1 <  names__data__entry_tables__vector__capacity__last__bit1)

axiom names__data__entry_tables__vector__capacity__position_axiom1 :
  (0 <= names__data__entry_tables__vector__capacity__position1)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy15 : capacity_range1

logic dummy16 : us_main_type1

type tentry_tableS__ref = { tentry_tableS__content : us_rep1
}

function tentry_tableS__ref___projection(a: tentry_tableS__ref) : us_rep1 =
  (a).tentry_tableS__content

logic entry_table__split_discrs : capacity_range1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic is_empty1 : us_rep1 -> bool

logic is_empty__function_guard1 : bool, us_rep1 -> prop

logic invariant__ : (t,name_id) farray, us_split_fields,
  us_split_fields2 -> bool

logic invariant____function_guard : bool, (t,name_id) farray,
  us_split_fields, us_split_fields2 -> prop

logic valid_tables : us_split_fields, us_split_fields2 -> bool

logic valid_tables__function_guard : bool, us_split_fields,
  us_split_fields2 -> prop

logic valid_hashes : (t,name_id) farray, us_split_fields2 -> bool

logic valid_hashes__function_guard : bool, (t,name_id) farray,
  us_split_fields2 -> prop

logic valid_name_table : us_split_fields, us_split_fields2 -> bool

logic valid_name_table__function_guard : bool, us_split_fields,
  us_split_fields2 -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_main_type.
  (forall names__entry_table__fields:us_main_type1
  [invariant__(names__hash_table, { rec__names__data__char_tables__vector =
  names__char_table__fields }, { rec__names__data__entry_tables__vector =
  names__entry_table__fields })]. ((invariant__(names__hash_table, {
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  }) = true) <-> (((valid_tables({ rec__names__data__char_tables__vector =
  names__char_table__fields }, { rec__names__data__entry_tables__vector =
  names__entry_table__fields }) = true) and (valid_name_table({
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  }) = true)) and (valid_hashes(names__hash_table, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  }) = true))))))

logic s : (int,character) farray

logic s1 : t1

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic to_string1 : int, (t,name_id) farray, us_split_fields,
  us_split_fields2 -> us_t

logic to_string__function_guard : us_t, int, (t,name_id) farray,
  us_split_fields, us_split_fields2 -> prop

axiom to_string__post_axiom :
  (forall n:int.
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_main_type.
  (forall names__entry_table__fields:us_main_type1 [to_string1(n,
  names__hash_table, { rec__names__data__char_tables__vector =
  names__char_table__fields }, { rec__names__data__entry_tables__vector =
  names__entry_table__fields })]. ((in_range4(n) and
  (invariant__(names__hash_table, { rec__names__data__char_tables__vector =
  names__char_table__fields }, { rec__names__data__entry_tables__vector =
  names__entry_table__fields }) = true)) -> dynamic_property(1, 2147483647,
  to_rep1(first((to_string1(n, names__hash_table, {
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  })).rt)), to_rep1(last((to_string1(n, names__hash_table, {
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  })).rt))))))))

type valid_name_id

predicate in_range9(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : valid_name_id, valid_name_id -> bool

logic dummy17 : valid_name_id

type valid_name_id__ref = { valid_name_id__content : valid_name_id
}

function valid_name_id__ref___projection(a: valid_name_id__ref) : valid_name_id =
  (a).valid_name_id__content

type hash_table_index_t

logic attr__ATTRIBUTE_MODULUS1 : t

predicate in_range10(x: t) = (ule(of_int(0), x) and ule(x, of_int(255)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq14 : t, t -> bool

axiom bool_eq_def12 :
  (forall x:t. forall y:t [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> t

logic user_eq13 : hash_table_index_t, hash_table_index_t -> bool

logic dummy18 : hash_table_index_t

type hash_table_index_t__ref = { hash_table_index_t__content :
hash_table_index_t
}

function hash_table_index_t__ref___projection(a: hash_table_index_t__ref) : hash_table_index_t =
  (a).hash_table_index_t__content

type index_type

predicate in_range11(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq14 : index_type, index_type -> bool

logic dummy19 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_3__projection(a: index_type__ref) : index_type =
  (a).index_type__content

logic to_rep5 : positive -> int

logic of_rep5 : int -> positive

axiom inversion_axiom5 :
  (forall x:positive [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:positive [to_rep5(x)]. in_range2(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range2(x) ->
  (to_rep5(of_rep5(x)) = x)))

type char_table_index

predicate in_range12(x: int) = ((0 <= x) and (x <= 2147483646))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : char_table_index, char_table_index -> bool

logic dummy20 : char_table_index

type char_table_index__ref = { char_table_index__content : char_table_index
}

function char_table_index__ref___projection(a: char_table_index__ref) : char_table_index =
  (a).char_table_index__content

logic to_rep6 : char_table_index -> int

logic of_rep6 : int -> char_table_index

axiom inversion_axiom6 :
  (forall x:char_table_index [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:char_table_index [to_rep6(x)]. in_range12(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range12(x) ->
  (to_rep6(of_rep6(x)) = x)))

type us_split_fields4 = { rec__names__data__name_entry__table_index :
char_table_index; rec__names__data__name_entry__length : positive;
rec__names__data__name_entry__next_hash : name_id
}

function us_split_fields_Table_Index__projection(a: us_split_fields4) : char_table_index =
  (a).rec__names__data__name_entry__table_index

function us_split_fields_Length__projection(a: us_split_fields4) : positive =
  (a).rec__names__data__name_entry__length

function us_split_fields_Next_Hash__projection(a: us_split_fields4) : name_id =
  (a).rec__names__data__name_entry__next_hash

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq17 : us_rep2, us_rep2 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq17(a, b)].
  (((((to_rep6(((a).us_split_fields5).rec__names__data__name_entry__table_index) = to_rep6(((b).us_split_fields5).rec__names__data__name_entry__table_index)) and
  (to_rep5(((a).us_split_fields5).rec__names__data__name_entry__length) = to_rep5(((b).us_split_fields5).rec__names__data__name_entry__length))) and
  (to_rep2(((a).us_split_fields5).rec__names__data__name_entry__next_hash) = to_rep2(((b).us_split_fields5).rec__names__data__name_entry__next_hash))) ->
  (bool_eq17(a, b) = true)) and
  ((not (((to_rep6(((a).us_split_fields5).rec__names__data__name_entry__table_index) = to_rep6(((b).us_split_fields5).rec__names__data__name_entry__table_index)) and
  (to_rep5(((a).us_split_fields5).rec__names__data__name_entry__length) = to_rep5(((b).us_split_fields5).rec__names__data__name_entry__length))) and
  (to_rep2(((a).us_split_fields5).rec__names__data__name_entry__next_hash) = to_rep2(((b).us_split_fields5).rec__names__data__name_entry__next_hash)))) ->
  (bool_eq17(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep2 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep2 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:char_table_index. forall a1:positive. forall a2:name_id.
  (0 <= object__size5({ us_split_fields5 = {
  rec__names__data__name_entry__table_index = a;
  rec__names__data__name_entry__length = a1;
  rec__names__data__name_entry__next_hash = a2 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:char_table_index. forall a1:positive. forall a2:name_id.
  (0 <= object__alignment5({ us_split_fields5 = {
  rec__names__data__name_entry__table_index = a;
  rec__names__data__name_entry__length = a1;
  rec__names__data__name_entry__next_hash = a2 } })))

logic names__data__name_entry__table_index__first__bit : int

logic names__data__name_entry__table_index__last__bit : int

logic names__data__name_entry__table_index__position : int

axiom names__data__name_entry__table_index__first__bit_axiom :
  (0 <= names__data__name_entry__table_index__first__bit)

axiom names__data__name_entry__table_index__last__bit_axiom :
  (names__data__name_entry__table_index__first__bit <  names__data__name_entry__table_index__last__bit)

axiom names__data__name_entry__table_index__position_axiom :
  (0 <= names__data__name_entry__table_index__position)

logic names__data__name_entry__length__first__bit : int

logic names__data__name_entry__length__last__bit : int

logic names__data__name_entry__length__position : int

axiom names__data__name_entry__length__first__bit_axiom :
  (0 <= names__data__name_entry__length__first__bit)

axiom names__data__name_entry__length__last__bit_axiom :
  (names__data__name_entry__length__first__bit <  names__data__name_entry__length__last__bit)

axiom names__data__name_entry__length__position_axiom :
  (0 <= names__data__name_entry__length__position)

logic names__data__name_entry__next_hash__first__bit : int

logic names__data__name_entry__next_hash__last__bit : int

logic names__data__name_entry__next_hash__position : int

axiom names__data__name_entry__next_hash__first__bit_axiom :
  (0 <= names__data__name_entry__next_hash__first__bit)

axiom names__data__name_entry__next_hash__last__bit_axiom :
  (names__data__name_entry__next_hash__first__bit <  names__data__name_entry__next_hash__last__bit)

axiom names__data__name_entry__next_hash__position_axiom :
  (0 <= names__data__name_entry__next_hash__position)

logic user_eq16 : us_rep2, us_rep2 -> bool

logic dummy21 : char_table_index

logic dummy22 : positive

logic dummy23 : name_id

type name_entry__ref = { name_entry__content : us_rep2
}

function name_entry__ref___projection(a: name_entry__ref) : us_rep2 =
  (a).name_entry__content

type element_type__ref = { element_type__content : us_rep2
}

function element_type__ref_3__projection(a: element_type__ref) : us_rep2 =
  (a).element_type__content

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq18 : us_rep3, us_rep3 -> bool

logic value__size6 : int

logic object__size6 : us_rep3 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep3 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep3. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep3. (0 <= object__alignment6(a)))

logic user_eq17 : us_rep3, us_rep3 -> bool

logic dummy24 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref_2__projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic length1 : us_rep3 -> int

logic length__function_guard : int, us_rep3 -> prop

logic last__function_guard : int, us_rep3 -> prop

logic model__ : us_rep1 -> us_rep3

logic model____function_guard : us_rep3, us_rep1 -> prop

logic last_index__function_guard : int, us_rep1 -> prop

type extended_index

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq18 : extended_index, extended_index -> bool

logic dummy25 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_3__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type element_type__ref1 = { element_type__content1 : us_rep2
}

function element_type__ref_4__projection(a: element_type__ref1) : us_rep2 =
  (a).element_type__content1

logic get : us_rep3, int -> us_rep2

logic get__function_guard : us_rep2, us_rep3, int -> prop

logic first_index__function_guard : int, us_rep1 -> prop

logic element__function_guard : us_rep2, us_rep1, int -> prop

logic length2 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic equal_except__function_guard : bool, us_rep3, us_rep3, int -> prop

logic length3 : us_rep -> int

logic length__function_guard2 : int, us_rep -> prop

logic attr__ATTRIBUTE_ADDRESS5 : int

logic h : t

logic attr__ATTRIBUTE_ADDRESS6 : int

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq20 : us_rep4, us_rep4 -> bool

logic value__size7 : int

logic object__size7 : us_rep4 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep4 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep4. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep4. (0 <= object__alignment7(a)))

logic user_eq19 : us_rep4, us_rep4 -> bool

logic dummy26 : us_rep4

type sequence__ref1 = { sequence__content1 : us_rep4
}

function sequence__ref___projection(a: sequence__ref1) : us_rep4 =
  (a).sequence__content1

logic length4 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

logic last__function_guard1 : int, us_rep4 -> prop

logic model__1 : us_rep -> us_rep4

logic model____function_guard1 : us_rep4, us_rep -> prop

logic last_index__function_guard1 : int, us_rep -> prop

axiom valid_tables__post_axiom : true

axiom valid_tables__def_axiom :
  (forall names__char_table__fields:us_main_type.
  (forall names__entry_table__fields:us_main_type1 [valid_tables({
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields })].
  ((valid_tables({ rec__names__data__char_tables__vector =
  names__char_table__fields }, { rec__names__data__entry_tables__vector =
  names__entry_table__fields }) = true) <-> (((0 + length1(model__({
  us_split_discrs3 = { rec__names__data__entry_tables__vector__capacity =
  entry_table__split_discrs }; us_split_fields3 = {
  rec__names__data__entry_tables__vector = names__entry_table__fields }
  }))) <= 2147483647) and (((-1) + length4(model__1({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = char_table__split_discrs
  }; us_split_fields1 = { rec__names__data__char_tables__vector =
  names__char_table__fields } }))) <= 2147483646)))))

axiom valid_hashes__post_axiom : true

axiom valid_hashes__def_axiom :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__entry_table__fields:us_main_type1
  [valid_hashes(names__hash_table, { rec__names__data__entry_tables__vector =
  names__entry_table__fields })]. ((valid_hashes(names__hash_table, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  }) = true) <->
  (forall h1:t. ((ule(of_int(0), h1) and ule(h1, of_int(255))) ->
  (to_rep2((names__hash_table[h1])) <= (0 + length1(model__({
  us_split_discrs3 = { rec__names__data__entry_tables__vector__capacity =
  entry_table__split_discrs }; us_split_fields3 = {
  rec__names__data__entry_tables__vector = names__entry_table__fields }
  })))))))))

logic valid_entry : us_rep2, us_split_fields, us_split_fields2 -> bool

logic valid_entry__function_guard : bool, us_rep2, us_split_fields,
  us_split_fields2 -> prop

axiom valid_entry__post_axiom : true

axiom valid_entry__def_axiom :
  (forall e:char_table_index. forall e1:positive. forall e2:name_id.
  (forall names__char_table__fields:us_main_type.
  (forall names__entry_table__fields:us_main_type1 [valid_entry({
  us_split_fields5 = { rec__names__data__name_entry__table_index = e;
  rec__names__data__name_entry__length = e1;
  rec__names__data__name_entry__next_hash = e2 } }, {
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields })].
  ((valid_entry({ us_split_fields5 = {
  rec__names__data__name_entry__table_index = e;
  rec__names__data__name_entry__length = e1;
  rec__names__data__name_entry__next_hash = e2 } }, {
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields
  }) = true) <-> ((to_rep2(e2) <= (0 + length1(model__({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity =
  entry_table__split_discrs }; us_split_fields3 = {
  rec__names__data__entry_tables__vector = names__entry_table__fields }
  })))) and ((to_rep5(e1) - 1) <= (((-1) + length4(model__1({
  us_split_discrs1 = { rec__names__data__char_tables__vector__capacity =
  char_table__split_discrs }; us_split_fields1 = {
  rec__names__data__char_tables__vector = names__char_table__fields }
  }))) - to_rep6(e))))))))

axiom valid_name_table__post_axiom : true

axiom valid_name_table__def_axiom :
  (forall names__char_table__fields:us_main_type.
  (forall names__entry_table__fields:us_main_type1 [valid_name_table({
  rec__names__data__char_tables__vector = names__char_table__fields }, {
  rec__names__data__entry_tables__vector = names__entry_table__fields })].
  ((valid_name_table({ rec__names__data__char_tables__vector =
  names__char_table__fields }, { rec__names__data__entry_tables__vector =
  names__entry_table__fields }) = true) <->
  (forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
  us_split_discrs3 = { rec__names__data__entry_tables__vector__capacity =
  entry_table__split_discrs }; us_split_fields3 = {
  rec__names__data__entry_tables__vector = names__entry_table__fields }
  }))))) -> (valid_entry(get(model__({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity =
  entry_table__split_discrs }; us_split_fields3 = {
  rec__names__data__entry_tables__vector = names__entry_table__fields } }),
  i), { rec__names__data__char_tables__vector = names__char_table__fields },
  { rec__names__data__entry_tables__vector = names__entry_table__fields
  }) = true))))))

axiom h__def_axiom : (h = urem(hash({ elts = s; rt = s1 }), of_int(256)))

type count_type

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq20 : count_type, count_type -> bool

logic dummy27 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type extended_index1

predicate in_range15(x: int) = (((-1) <= x) and (x <= 2147483647))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq21 : extended_index1, extended_index1 -> bool

logic dummy28 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

logic capacity__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length3({
  us_split_discrs1 = { rec__names__data__char_tables__vector__capacity =
  container }; us_split_fields1 = { rec__names__data__char_tables__vector =
  container1 } })]. ((((of_int1(0) = true) -> (length3({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  }) <= to_rep3(container))) and ((not (of_int1(0) = true)) -> (length3({
  us_split_discrs1 = { rec__names__data__char_tables__vector__capacity =
  container }; us_split_fields1 = { rec__names__data__char_tables__vector =
  container1 } }) <= 2147483647))) and in_range5(length3({ us_split_discrs1 =
  { rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  }))))

logic get1 : us_rep4, int -> int

logic get__function_guard1 : int, us_rep4, int -> prop

logic oeq__function_guard : bool, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep4. forall b:us_rep4 [user_eq19(a, b)].
  (((forall n:int. (((0 <= n) and (n <= ((-1) + length4(a)))) -> (get1(a,
    n) = get1(b, n)))) ->
  (user_eq19(a, b) = match_bool(bool_eq2(length4(a), length4(b)), true,
  false))) and
  ((not (forall n:int. (((0 <= n) and (n <= ((-1) + length4(a)))) -> (get1(a,
        n) = get1(b, n))))) ->
  (user_eq19(a, b) = match_bool(bool_eq2(length4(a), length4(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [model__1({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  })]. (length4(model__1({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  })) = length3({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  })))

axiom is_empty__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_empty({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  })]. ((is_empty({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  }) = true) <-> (length3({ us_split_discrs1 = {
  rec__names__data__char_tables__vector__capacity = container };
  us_split_fields1 = { rec__names__data__char_tables__vector = container1 }
  }) = 0)))

type extended_index2

predicate in_range16(x: int) = (((-1) <= x) and (x <= 2147483646))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq22 : extended_index2, extended_index2 -> bool

logic dummy29 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref_2__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

axiom length__post_axiom1 :
  (forall container:us_rep4 [length4(container)].
  ((((-1) + length4(container)) <= 2147483646) and
  in_range14(length4(container))))

type element_type

predicate in_range17(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq23 : element_type, element_type -> bool

logic dummy30 : element_type

type element_type__ref2 = { element_type__content2 : element_type
}

function element_type__ref_2__projection(a: element_type__ref2) : element_type =
  (a).element_type__content2

axiom get__post_axiom :
  (forall container:us_rep4.
  (forall position:int [get1(container, position)].
  ((in_range16(position) and ((0 <= position) and
  (position <= ((-1) + length4(container))))) -> in_range17(get1(container,
  position)))))

logic capacity__function_guard1 : int, us_rep1 -> prop

axiom length__post_axiom2 :
  (forall container:capacity_range1. forall container1:us_main_type1
  [length2({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  })]. ((((of_int1(0) = true) -> (length2({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  }) <= to_rep4(container))) and ((not (of_int1(0) = true)) -> (length2({
  us_split_discrs3 = { rec__names__data__entry_tables__vector__capacity =
  container }; us_split_fields3 = { rec__names__data__entry_tables__vector =
  container1 } }) <= 2147483647))) and in_range7(length2({ us_split_discrs3 =
  { rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  }))))

logic oeq__function_guard1 : bool, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq17(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) ->
    (bool_eq17(get(a, n), get(b, n)) = true))) ->
  (user_eq17(a, b) = match_bool(bool_eq2(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) ->
        (bool_eq17(get(a, n), get(b, n)) = true)))) ->
  (user_eq17(a, b) = match_bool(bool_eq2(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom1 :
  (forall container:capacity_range1. forall container1:us_main_type1
  [model__({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  })]. (length1(model__({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  })) = length2({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  })))

axiom is_empty__post_axiom1 :
  (forall container:capacity_range1. forall container1:us_main_type1
  [is_empty1({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  })]. ((is_empty1({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  }) = true) <-> (length2({ us_split_discrs3 = {
  rec__names__data__entry_tables__vector__capacity = container };
  us_split_fields3 = { rec__names__data__entry_tables__vector = container1 }
  }) = 0)))

type extended_index3

predicate in_range18(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq24 : extended_index3, extended_index3 -> bool

logic dummy31 : extended_index3

type extended_index__ref3 = { extended_index__content3 : extended_index3
}

function extended_index__ref_4__projection(a: extended_index__ref3) : extended_index3 =
  (a).extended_index__content3

axiom length__post_axiom3 :
  (forall container:us_rep3 [length1(container)].
  (((0 + length1(container)) <= 2147483647) and
  in_range14(length1(container))))

axiom get__post_axiom1 : true

 (* File "names.adb", line 192, characters 0-0 *)
goal WP_parameter_def :
  (forall n:int. forall hash_table:(t,name_id) farray.
  forall char_table__split_fields:us_main_type.
  forall entry_table__split_fields:us_main_type1. forall ptr:int. forall o:t.
  forall result:int. forall ptr1:int.
  ((1024 = to_rep3(char_table__split_discrs)) ->
  ((256 = to_rep4(entry_table__split_discrs)) -> (dynamic_property(1,
  2147483647, to_rep1(first(s1)), to_rep1(last(s1))) ->
  (((0 <= 2147483647) -> in_range4(n)) -> ((invariant__(hash_table, {
  rec__names__data__char_tables__vector = char_table__split_fields }, {
  rec__names__data__entry_tables__vector = entry_table__split_fields
  }) = true) -> (((result = ptr) and (ptr1 = 0)) -> (in_range4(ptr1) ->
  ((o = hash({ elts = s; rt = s1 })) -> (not (of_int(256) = zeros)))))))))))
