(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tristate

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tristate, tristate -> bool

logic dummy : tristate

type tristate__ref = { tristate__content : tristate
}

function tristate__ref___projection(a: tristate__ref) : tristate =
  (a).tristate__content

logic to_rep : tristate -> int

logic of_rep : int -> tristate

axiom inversion_axiom :
  (forall x:tristate [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:tristate [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic t_not : int -> int

logic t_not__function_guard : int, int -> prop

axiom t_not__post_axiom :
  (forall op:int [t_not(op)]. (in_range1(op) -> in_range1(t_not(op))))

axiom t_not__def_axiom :
  (forall op:int [t_not(op)]. (in_range1(op) -> (((op = 0) ->
  (t_not(op) = 1)) and ((not (op = 0)) -> (t_not(op) = 0)))))

logic t_or : int, int -> int

logic t_or__function_guard : int, int, int -> prop

axiom t_or__post_axiom :
  (forall left:int. forall right:int [t_or(left, right)].
  ((in_range1(left) and in_range1(right)) -> in_range1(t_or(left, right))))

axiom t_or__def_axiom :
  (forall left:int. forall right:int [t_or(left, right)].
  ((in_range1(left) and in_range1(right)) -> (((left = 0) -> (t_or(left,
  right) = 0)) and ((not (left = 0)) -> (((left = 1) -> (t_or(left,
  right) = right)) and ((not (left = 1)) -> (t_or(left, right) = 2)))))))

logic t_and : int, int -> int

logic t_and__function_guard : int, int, int -> prop

axiom t_and__post_axiom :
  (forall left:int. forall right:int [t_and(left, right)].
  ((in_range1(left) and in_range1(right)) -> in_range1(t_and(left, right))))

axiom t_and__def_axiom :
  (forall left:int. forall right:int [t_and(left, right)].
  ((in_range1(left) and in_range1(right)) -> (((left = 1) -> (t_and(left,
  right) = 1)) and ((not (left = 1)) -> (((left = 0) -> (t_and(left,
  right) = right)) and ((not (left = 0)) -> (t_and(left, right) = 2)))))))

type decision_kind

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : decision_kind, decision_kind -> bool

logic dummy1 : decision_kind

type decision_kind__ref = { decision_kind__content : decision_kind
}

function decision_kind__ref___projection(a: decision_kind__ref) : decision_kind =
  (a).decision_kind__content

logic to_rep1 : decision_kind -> int

logic of_rep1 : int -> decision_kind

axiom inversion_axiom1 :
  (forall x:decision_kind [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:decision_kind [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type node_id

predicate in_range3(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : node_id, node_id -> bool

logic dummy2 : node_id

type node_id__ref = { node_id__content : node_id
}

function node_id__ref___projection(a: node_id__ref) : node_id =
  (a).node_id__content

logic to_rep2 : node_id -> int

logic of_rep2 : int -> node_id

axiom inversion_axiom2 :
  (forall x:node_id [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:node_id [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__var__decision__kind : decision_kind
}

function us_split_discrs___projection(a: us_split_discrs) : decision_kind =
  (a).rec__var__decision__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__var__decision__id : node_id;
rec__var__decision__operand : node_id; rec__var__decision__left : node_id;
rec__var__decision__right : node_id
}

function us_split_fields_Id__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__id

function us_split_fields_Operand__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__operand

function us_split_fields_Left__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__left

function us_split_fields_Right__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_3__projection(a: us_rep) : bool = (a).attr__constrained

predicate var__decision__operand__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 1)

predicate var__decision__left__pred(a: us_rep) =
  ((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 2) or
  (to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 3))

predicate var__decision__right__pred(a: us_rep) =
  ((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 2) or
  (to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 3))

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = to_rep1(((b).us_split_discrs1).rec__var__decision__kind)) and
  (to_rep2(((a).us_split_fields1).rec__var__decision__id) = to_rep2(((b).us_split_fields1).rec__var__decision__id))) and
  (var__decision__operand__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__var__decision__operand) = to_rep2(((b).us_split_fields1).rec__var__decision__operand)))) and
  (var__decision__left__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__var__decision__left) = to_rep2(((b).us_split_fields1).rec__var__decision__left)))) and
  (var__decision__right__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__var__decision__right) = to_rep2(((b).us_split_fields1).rec__var__decision__right)))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = to_rep1(((b).us_split_discrs1).rec__var__decision__kind)) and
  (to_rep2(((a).us_split_fields1).rec__var__decision__id) = to_rep2(((b).us_split_fields1).rec__var__decision__id))) and
  (var__decision__operand__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__var__decision__operand) = to_rep2(((b).us_split_fields1).rec__var__decision__operand)))) and
  (var__decision__left__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__var__decision__left) = to_rep2(((b).us_split_fields1).rec__var__decision__left)))) and
  (var__decision__right__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__var__decision__right) = to_rep2(((b).us_split_fields1).rec__var__decision__right))))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:decision_kind. forall a1:node_id. forall a2:node_id.
  forall a3:node_id. forall a4:node_id. forall a5:bool. (0 <= object__size({
  us_split_discrs1 = { rec__var__decision__kind = a }; us_split_fields1 = {
  rec__var__decision__id = a1; rec__var__decision__operand = a2;
  rec__var__decision__left = a3; rec__var__decision__right = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:decision_kind. forall a1:node_id. forall a2:node_id.
  forall a3:node_id. forall a4:node_id. forall a5:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__var__decision__kind = a
  }; us_split_fields1 = { rec__var__decision__id = a1;
  rec__var__decision__operand = a2; rec__var__decision__left = a3;
  rec__var__decision__right = a4 }; attr__constrained = a5 })))

logic var__decision__kind__first__bit : int

logic var__decision__kind__last__bit : int

logic var__decision__kind__position : int

axiom var__decision__kind__first__bit_axiom :
  (0 <= var__decision__kind__first__bit)

axiom var__decision__kind__last__bit_axiom :
  (var__decision__kind__first__bit <  var__decision__kind__last__bit)

axiom var__decision__kind__position_axiom :
  (0 <= var__decision__kind__position)

logic var__decision__id__first__bit : int

logic var__decision__id__last__bit : int

logic var__decision__id__position : int

axiom var__decision__id__first__bit_axiom :
  (0 <= var__decision__id__first__bit)

axiom var__decision__id__last__bit_axiom :
  (var__decision__id__first__bit <  var__decision__id__last__bit)

axiom var__decision__id__position_axiom : (0 <= var__decision__id__position)

logic var__decision__operand__first__bit : int

logic var__decision__operand__last__bit : int

logic var__decision__operand__position : int

axiom var__decision__operand__first__bit_axiom :
  (0 <= var__decision__operand__first__bit)

axiom var__decision__operand__last__bit_axiom :
  (var__decision__operand__first__bit <  var__decision__operand__last__bit)

axiom var__decision__operand__position_axiom :
  (0 <= var__decision__operand__position)

logic var__decision__left__first__bit : int

logic var__decision__left__last__bit : int

logic var__decision__left__position : int

axiom var__decision__left__first__bit_axiom :
  (0 <= var__decision__left__first__bit)

axiom var__decision__left__last__bit_axiom :
  (var__decision__left__first__bit <  var__decision__left__last__bit)

axiom var__decision__left__position_axiom :
  (0 <= var__decision__left__position)

logic var__decision__right__first__bit : int

logic var__decision__right__last__bit : int

logic var__decision__right__position : int

axiom var__decision__right__first__bit_axiom :
  (0 <= var__decision__right__first__bit)

axiom var__decision__right__last__bit_axiom :
  (var__decision__right__first__bit <  var__decision__right__last__bit)

axiom var__decision__right__position_axiom :
  (0 <= var__decision__right__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : decision_kind

logic dummy4 : node_id

logic dummy5 : node_id

logic dummy6 : node_id

logic dummy7 : node_id

logic dummy8 : bool

type decision__ref = { decision__content : us_rep
}

function decision__ref___projection(a: decision__ref) : us_rep =
  (a).decision__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:decision_kind. forall v1:node_id. forall v2:node_id.
  forall v3:node_id. forall v4:node_id. forall v5:bool.
  (forall i:int [(singleton({ us_split_discrs1 = { rec__var__decision__kind =
  v }; us_split_fields1 = { rec__var__decision__id = v1;
  rec__var__decision__operand = v2; rec__var__decision__left = v3;
  rec__var__decision__right = v4 }; attr__constrained = v5 }, i)[i])].
  ((singleton({ us_split_discrs1 = { rec__var__decision__kind = v };
  us_split_fields1 = { rec__var__decision__id = v1;
  rec__var__decision__operand = v2; rec__var__decision__left = v3;
  rec__var__decision__right = v4 }; attr__constrained = v5 }, i)[i]) = {
  us_split_discrs1 = { rec__var__decision__kind = v }; us_split_fields1 = {
  rec__var__decision__id = v1; rec__var__decision__operand = v2;
  rec__var__decision__left = v3; rec__var__decision__right = v4 };
  attr__constrained = v5 })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref1 = { map__content1 : (int,tristate) farray
}

logic slide1 : (int,tristate) farray, int, int -> (int,tristate) farray

axiom slide_eq1 :
  (forall a:(int,tristate) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,tristate) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,tristate) farray, int, int, (int,tristate) farray, int,
  int -> (int,tristate) farray

axiom concat_def1 :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : tristate, int -> (int,tristate) farray

axiom singleton_def1 :
  (forall v:tristate.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,tristate) farray, int, int, (int,tristate) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,tristate) farray. forall a__first:int. forall a__last:int.
  forall b:(int,tristate) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,tristate) farray, int, int, (int,tristate) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic root_id : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic decision_eval : int, (int,us_rep) farray, (int,tristate) farray -> int

logic decision_eval__function_guard : int, int, (int,us_rep) farray,
  (int,tristate) farray -> prop

logic d__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "tristates.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall decision_table:(int,us_rep) farray.
  forall condition_values:(int,tristate) farray.
  forall d__split_fields:node_id. forall d__split_fields1:node_id.
  forall d__split_fields2:node_id. forall d__split_fields3:node_id.
  forall d__split_discrs:decision_kind. forall kind:int.
  forall result:node_id. forall result1:node_id. forall result2:node_id.
  forall result3:node_id. forall d__split_fields4:node_id.
  forall d__split_fields5:node_id. forall d__split_fields6:node_id.
  forall d__split_fields7:node_id. forall result4:decision_kind.
  forall d__split_discrs1:decision_kind. forall result5:int.
  forall kind1:int.
  ((forall temp___175:int. (((1 <= temp___175) and (temp___175 <= 1000)) ->
   (((decision_table[temp___175])).attr__constrained = false))) ->
  (in_range3(root_id) ->
  ((forall x:int. (((1 <= x) and (x <= 1000)) ->
   (not (to_rep((condition_values[x])) = 2)))) ->
  (((({ us_split_fields__content = { rec__var__decision__id = result;
  rec__var__decision__operand = result1; rec__var__decision__left = result2;
  rec__var__decision__right = result3 } } = { us_split_fields__content = {
  rec__var__decision__id = d__split_fields; rec__var__decision__operand =
  d__split_fields1; rec__var__decision__left = d__split_fields2;
  rec__var__decision__right = d__split_fields3 } }) and ({
  rec__var__decision__id = d__split_fields4; rec__var__decision__operand =
  d__split_fields5; rec__var__decision__left = d__split_fields6;
  rec__var__decision__right = d__split_fields7
  } = ((decision_table[root_id])).us_split_fields1)) and ((({
  us_split_discrs__content = { rec__var__decision__kind = result4 } } = {
  us_split_discrs__content = { rec__var__decision__kind = d__split_discrs }
  }) and ({ rec__var__decision__kind = d__split_discrs1
  } = ((decision_table[root_id])).us_split_discrs1)) and
  (d__attr__constrained = false))) -> ((({ int__content = result5 } = {
  int__content = kind }) and (kind1 = to_rep1(d__split_discrs1))) ->
  (in_range2(kind1) -> ((not (kind1 = 0)) -> ((kind1 = 1) ->
  (to_rep1(d__split_discrs1) = 1))))))))))
