;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort enum 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (enum enum) Bool)

(declare-const dummy enum)

(declare-datatypes ((enum__ref 0)) (((mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))

(declare-fun to_rep (enum) Int)

(declare-fun of_rep (Int) enum)

;; inversion_axiom
  (assert
  (forall ((x enum)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x enum)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-const dummy2 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__basic__r__x enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__basic__r__x
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__basic__r__base integer)(rec__basic__r__a_field integer)(rec__basic__r__c_field1 Bool)(rec__basic__r__c_field2 natural)))))
(define-fun us_split_fields_Base__projection ((a us_split_fields)) integer
  (rec__basic__r__base a))

(define-fun us_split_fields_A_Field__projection ((a us_split_fields)) integer
  (rec__basic__r__a_field a))

(define-fun us_split_fields_C_Field1__projection ((a us_split_fields)) Bool
  (rec__basic__r__c_field1 a))

(define-fun us_split_fields_C_Field2__projection ((a us_split_fields)) natural
  (rec__basic__r__c_field2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun basic__r__a_field__pred ((a us_rep)) Bool (= (to_rep
                                                         (rec__basic__r__x
                                                         (us_split_discrs1 a))) 0))

(define-fun basic__r__c_field1__pred ((a us_rep)) Bool (= (to_rep
                                                          (rec__basic__r__x
                                                          (us_split_discrs1
                                                          a))) 2))

(define-fun basic__r__c_field2__pred ((a us_rep)) Bool (= (to_rep
                                                          (rec__basic__r__x
                                                          (us_split_discrs1
                                                          a))) 2))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep (rec__basic__r__x (us_split_discrs1 a)))
                        (to_rep (rec__basic__r__x (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__basic__r__base (us_split_fields1 a)))
                        (to_rep1 (rec__basic__r__base (us_split_fields1 b)))))
                        (=> (basic__r__a_field__pred a)
                        (= (to_rep1
                           (rec__basic__r__a_field (us_split_fields1 a)))
                        (to_rep1
                        (rec__basic__r__a_field (us_split_fields1 b))))))
                        (=> (basic__r__c_field1__pred a)
                        (= (rec__basic__r__c_field1 (us_split_fields1 a))
                        (rec__basic__r__c_field1 (us_split_fields1 b)))))
                        (=> (basic__r__c_field2__pred a)
                        (= (to_rep2
                           (rec__basic__r__c_field2 (us_split_fields1 a)))
                        (to_rep2
                        (rec__basic__r__c_field2 (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const basic__r__x__first__bit Int)

(declare-const basic__r__x__last__bit Int)

(declare-const basic__r__x__position Int)

;; basic__r__x__first__bit_axiom
  (assert (<= 0 basic__r__x__first__bit))

;; basic__r__x__last__bit_axiom
  (assert (< basic__r__x__first__bit basic__r__x__last__bit))

;; basic__r__x__position_axiom
  (assert (<= 0 basic__r__x__position))

(declare-const basic__r__base__first__bit Int)

(declare-const basic__r__base__last__bit Int)

(declare-const basic__r__base__position Int)

;; basic__r__base__first__bit_axiom
  (assert (<= 0 basic__r__base__first__bit))

;; basic__r__base__last__bit_axiom
  (assert (< basic__r__base__first__bit basic__r__base__last__bit))

;; basic__r__base__position_axiom
  (assert (<= 0 basic__r__base__position))

(declare-const basic__r__a_field__first__bit Int)

(declare-const basic__r__a_field__last__bit Int)

(declare-const basic__r__a_field__position Int)

;; basic__r__a_field__first__bit_axiom
  (assert (<= 0 basic__r__a_field__first__bit))

;; basic__r__a_field__last__bit_axiom
  (assert (< basic__r__a_field__first__bit basic__r__a_field__last__bit))

;; basic__r__a_field__position_axiom
  (assert (<= 0 basic__r__a_field__position))

(declare-const basic__r__c_field1__first__bit Int)

(declare-const basic__r__c_field1__last__bit Int)

(declare-const basic__r__c_field1__position Int)

;; basic__r__c_field1__first__bit_axiom
  (assert (<= 0 basic__r__c_field1__first__bit))

;; basic__r__c_field1__last__bit_axiom
  (assert (< basic__r__c_field1__first__bit basic__r__c_field1__last__bit))

;; basic__r__c_field1__position_axiom
  (assert (<= 0 basic__r__c_field1__position))

(declare-const basic__r__c_field2__first__bit Int)

(declare-const basic__r__c_field2__last__bit Int)

(declare-const basic__r__c_field2__position Int)

;; basic__r__c_field2__first__bit_axiom
  (assert (<= 0 basic__r__c_field2__first__bit))

;; basic__r__c_field2__last__bit_axiom
  (assert (< basic__r__c_field2__first__bit basic__r__c_field2__last__bit))

;; basic__r__c_field2__position_axiom
  (assert (<= 0 basic__r__c_field2__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((r__ref 0)) (((mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(declare-const x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 2)) (in_range temp___expr_135)))

(assert
;; WP_parameter_def
 ;; File "basic.ads", line 4, characters 0-0
  (not (in_range (to_rep (rec__basic__r__x (us_split_discrs1 x))))))
(check-sat)
(exit)
