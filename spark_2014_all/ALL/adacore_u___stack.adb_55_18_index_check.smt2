;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort element 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (element element) Bool)

(declare-const dummy element)

(declare-datatypes ((element__ref 0))
(((mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 1 2147483647)) (in_range1
                                      temp___expr_136)))

(declare-fun to_rep (element) Int)

(declare-fun of_rep (Int) element)

;; inversion_axiom
  (assert
  (forall ((x element)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x element)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))

;; slide_eq
  (assert
  (forall ((a (Array Int element)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int element) Int Int (Array Int element) Int
  Int) (Array Int element))

;; concat_def
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (element Int) (Array Int element))

;; singleton_def
  (assert
  (forall ((v element))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int)
  (b (Array Int element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int element) Int Int (Array Int element) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort length_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (length_type length_type) Bool)

(declare-const dummy1 length_type)

(declare-datatypes ((length_type__ref 0))
(((mk_length_type__ref (length_type__content length_type)))))
(define-fun length_type__ref___projection ((a length_type__ref)) length_type
  (length_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_147)))

(declare-fun to_rep1 (length_type) Int)

(declare-fun of_rep1 (Int) length_type)

;; inversion_axiom
  (assert
  (forall ((x length_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x length_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const dummy2 (Array Int element))

(declare-const value__size Int)

(declare-fun object__size ((Array Int element)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int element)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int element))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int element))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int element))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int element) (Array Int element)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__stack__stack_model__top length_type)(rec__stack__stack_model__content (Array Int element))))))
(define-fun us_split_fields_Top__projection ((a us_split_fields)) length_type
  (rec__stack__stack_model__top a))

(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int element)
  (rec__stack__stack_model__content a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__stack__stack_model__top
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__stack__stack_model__top
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__stack__stack_model__content
                           (us_split_fields1 a)) 1 100
                           (rec__stack__stack_model__content
                           (us_split_fields1 b)) 1 100) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const stack__stack_model__top__first__bit Int)

(declare-const stack__stack_model__top__last__bit Int)

(declare-const stack__stack_model__top__position Int)

;; stack__stack_model__top__first__bit_axiom
  (assert (<= 0 stack__stack_model__top__first__bit))

;; stack__stack_model__top__last__bit_axiom
  (assert
  (< stack__stack_model__top__first__bit stack__stack_model__top__last__bit))

;; stack__stack_model__top__position_axiom
  (assert (<= 0 stack__stack_model__top__position))

(declare-const stack__stack_model__content__first__bit Int)

(declare-const stack__stack_model__content__last__bit Int)

(declare-const stack__stack_model__content__position Int)

;; stack__stack_model__content__first__bit_axiom
  (assert (<= 0 stack__stack_model__content__first__bit))

;; stack__stack_model__content__last__bit_axiom
  (assert
  (< stack__stack_model__content__first__bit stack__stack_model__content__last__bit))

;; stack__stack_model__content__position_axiom
  (assert (<= 0 stack__stack_model__content__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((stack_model__ref 0))
(((mk_stack_model__ref (stack_model__content us_rep)))))
(define-fun stack_model__ref___projection ((a stack_model__ref)) us_rep
  (stack_model__content a))

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun is_empty2 (Int) Bool)

(declare-fun is_empty2__function_guard (Bool Int) Bool)

;; is_empty2__post_axiom
  (assert true)

;; is_empty2__def_axiom
  (assert
  (forall ((stack__p_top Int))
  (! (= (= (is_empty2 stack__p_top) true) (= stack__p_top 0)) :pattern (
  (is_empty2 stack__p_top)) )))

(declare-fun is_full2 (Int) Bool)

(declare-fun is_full2__function_guard (Bool Int) Bool)

;; is_full2__post_axiom
  (assert true)

;; is_full2__def_axiom
  (assert
  (forall ((stack__p_top Int))
  (! (= (= (is_full2 stack__p_top) true) (<= 100 stack__p_top)) :pattern (
  (is_full2 stack__p_top)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun get_stack2 (Int (Array Int element)) us_rep)

(declare-fun get_stack2__function_guard (us_rep Int
  (Array Int element)) Bool)

;; get_stack2__post_axiom
  (assert true)

;; get_stack2__def_axiom
  (assert
  (forall ((stack__p_top Int))
  (forall ((stack__p_content (Array Int element)))
  (! (=> (dynamic_invariant1 stack__p_top true true true)
     (= (get_stack2 stack__p_top stack__p_content) (mk___rep
                                                   (mk___split_fields
                                                   (of_rep1 stack__p_top)
                                                   stack__p_content)))) :pattern (
  (get_stack2 stack__p_top stack__p_content)) ))))

(declare-fun peek2 (Int (Array Int element)) Int)

(declare-fun peek2__function_guard (Int Int (Array Int element)) Bool)

;; peek2__post_axiom
  (assert
  (forall ((stack__p_top Int))
  (forall ((stack__p_content (Array Int element)))
  (! (=>
     (and (dynamic_invariant1 stack__p_top true true true)
     (not (= (is_empty2 stack__p_top) true))) (dynamic_invariant
     (peek2 stack__p_top stack__p_content) true false true)) :pattern (
  (peek2 stack__p_top stack__p_content)) ))))

;; peek2__def_axiom
  (assert
  (forall ((stack__p_top Int))
  (forall ((stack__p_content (Array Int element)))
  (! (=> (dynamic_invariant1 stack__p_top true true true)
     (= (peek2 stack__p_top stack__p_content) (to_rep
                                              (select stack__p_content stack__p_top)))) :pattern (
  (peek2 stack__p_top stack__p_content)) ))))

(declare-sort tTp_contentSP1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (tTp_contentSP1 tTp_contentSP1) Bool)

(declare-const dummy4 tTp_contentSP1)

(declare-datatypes ((tTp_contentSP1__ref 0))
(((mk_tTp_contentSP1__ref (tTp_contentSP1__content tTp_contentSP1)))))
(define-fun tTp_contentSP1__ref___projection ((a tTp_contentSP1__ref)) tTp_contentSP1
  (tTp_contentSP1__content a))

(declare-const p_top Int)

(declare-const o Int)

(declare-const o1 element)

(declare-const result Int)

(declare-const p_top1 Int)

;; H
  (assert (in_range1 e))

;; H
  (assert (in_range2 p_top))

;; H
  (assert (not (<= 100 p_top)))

;; H
  (assert (and (= o (+ p_top 1)) (in_range2 (+ p_top 1))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref p_top)))

;; H
  (assert (= p_top1 o))

;; H
  (assert (= (to_rep o1) e))

(assert
;; WP_parameter_def
 ;; File "stack.ads", line 2, characters 0-0
  (not (<= 1 p_top1)))
(check-sat)
(exit)
