;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__ext__ us_private)))))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((derived__ref 0))
(((mk_derived__ref (derived__content us_rep)))))
(define-fun derived__ref___projection ((a derived__ref)) us_rep (derived__content
                                                                a))

(define-fun default_initial_assumption ((temp___expr_182 us_rep)
  (temp___skip_top_level_183 Bool)) Bool (= (attr__tag temp___expr_182)
  us_tag))

(declare-const x__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((root__ref 0)) (((mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))

(declare-fun test_mem (us_rep) Bool)

(declare-fun test_mem__function_guard (Bool us_rep) Bool)

(define-fun default_initial_assumption1 ((temp___expr_172 us_rep)
  (temp___skip_top_level_173 Bool)) Bool (= (attr__tag temp___expr_172)
  us_tag1))

;; test_mem__post_axiom
  (assert true)

;; test_mem__def_axiom
  (assert
  (forall ((v us_rep))
  (! (= (= (test_mem v) true) (= (attr__tag v) us_tag)) :pattern ((test_mem
                                                                  v)) )))

(declare-fun test_mem_class (us_rep) Bool)

(declare-fun test_mem_class__function_guard (Bool us_rep) Bool)

(declare-fun us_compatible_tags (Int Int) Bool)

;; __compatible_tags_refl
  (assert (forall ((tag Int)) (us_compatible_tags tag tag)))

;; test_mem_class__post_axiom
  (assert true)

;; test_mem_class__def_axiom
  (assert
  (forall ((v us_rep))
  (! (= (= (test_mem_class v) true) (us_compatible_tags (attr__tag v)
     us_tag)) :pattern ((test_mem_class v)) )))

(declare-fun test_mem_class1 (us_rep) Bool)

(declare-fun test_mem_class1__function_guard (Bool us_rep) Bool)

;; test_mem_class1__post_axiom
  (assert true)

;; test_mem_class1__def_axiom
  (assert
  (forall ((v us_rep))
  (! (= (= (test_mem_class1 v) true)
     (or (us_compatible_tags (attr__tag v) us_tag) (= (attr__tag v) us_tag))) :pattern (
  (test_mem_class1 v)) )))

(declare-fun test_mem_class2 (us_rep) Bool)

(declare-fun test_mem_class2__function_guard (Bool us_rep) Bool)

;; test_mem_class2__post_axiom
  (assert true)

;; test_mem_class2__def_axiom
  (assert
  (forall ((v us_rep))
  (! (= (= (test_mem_class2 v) true)
     (or (= (attr__tag v) us_tag) (us_compatible_tags (attr__tag v) us_tag))) :pattern (
  (test_mem_class2 v)) )))

(declare-const x__split_fields us_private)

;; H
  (assert (= x__attr__tag us_tag))

;; H
  (assert
  (= (test_mem (mk___rep (mk___split_fields x__split_fields) x__attr__tag)) true))

;; H
  (assert
  (= (test_mem_class
     (mk___rep (mk___split_fields x__split_fields) x__attr__tag)) true))

(assert
;; WP_parameter_def
 ;; File "mem.adb", line 12, characters 0-0
  (not
  (= (test_mem_class1
     (mk___rep (mk___split_fields x__split_fields) x__attr__tag)) true)))
(check-sat)
(exit)
