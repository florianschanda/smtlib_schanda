;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort modular 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 8))

(declare-fun user_eq (modular modular) Bool)

(declare-const dummy modular)

(declare-datatypes ((modular__ref 0))
(((mk_modular__ref (modular__content modular)))))
(define-fun modular__ref_2__projection ((a modular__ref)) modular (modular__content
                                                                  a))

(define-fun dynamic_invariant ((temp___expr_225 (_ BitVec 8))
  (temp___is_init_222 Bool) (temp___skip_constant_223 Bool)
  (temp___do_toplevel_224 Bool)) Bool true)

(declare-sort bit_position 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (bit_position bit_position) Bool)

(declare-const dummy1 bit_position)

(declare-datatypes ((bit_position__ref 0))
(((mk_bit_position__ref (bit_position__content bit_position)))))
(define-fun bit_position__ref___projection ((a bit_position__ref)) bit_position
  (bit_position__content a))

(define-fun dynamic_invariant1 ((temp___expr_231 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)) Bool (=>
                                      (or (= temp___is_init_228 true)
                                      (<= 0 7)) (in_range temp___expr_231)))

(declare-sort mask_size 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (mask_size mask_size) Bool)

(declare-const dummy2 mask_size)

(declare-datatypes ((mask_size__ref 0))
(((mk_mask_size__ref (mask_size__content mask_size)))))
(define-fun mask_size__ref___projection ((a mask_size__ref)) mask_size
  (mask_size__content a))

(declare-fun shift_right ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun shift_right__function_guard ((_ BitVec 8) (_ BitVec 8)
  Int) Bool)

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes ((t__ref2 0))
(((mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes ((t__ref3 0))
(((mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (natural natural) Bool)

(declare-const dummy3 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

;; shift_right__post_axiom
  (assert
  (forall ((v (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant2 amount
     true true true)) (dynamic_invariant (shift_right v amount) true false
     true)) :pattern ((shift_right v amount)) ))))

;; shift_right__def_axiom
  (assert
  (forall ((v (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant2 amount
     true true true))
     (= (shift_right v amount) (ite (and (<= 1 8) (<= 8 8))
                               (ite (< amount 8)
                               (bvlshr v ((_ int2bv 8) amount))
                               ((_ int2bv 8) 0))
                               (ite (and (<= 9 8) (<= 8 16))
                               ((_ extract 7 0) (ite (< amount 16)
                                                (bvlshr ((_ zero_extend 8) v) ((_ int2bv 16) amount))
                                                ((_ int2bv 16) 0)))
                               (ite (and (<= 17 8) (<= 8 32))
                               ((_ extract 7 0) (bvlshr ((_ zero_extend 24) v) ((_ int2bv 32) amount)))
                               ((_ extract 7 0) (bvlshr ((_ zero_extend 56) v) ((_ int2bv 64) amount)))))))) :pattern (
  (shift_right v amount)) ))))

(declare-fun shift_left ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun shift_left__function_guard ((_ BitVec 8) (_ BitVec 8) Int) Bool)

;; shift_left__post_axiom
  (assert
  (forall ((v (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant2 amount
     true true true)) (dynamic_invariant (shift_left v amount) true false
     true)) :pattern ((shift_left v amount)) ))))

;; shift_left__def_axiom
  (assert
  (forall ((v (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant2 amount
     true true true))
     (= (shift_left v amount) (ite (and (<= 1 8) (<= 8 8))
                              (ite (< amount 8)
                              (bvshl v ((_ int2bv 8) amount))
                              ((_ int2bv 8) 0))
                              (ite (and (<= 9 8) (<= 8 16))
                              ((_ extract 7 0) (bvurem (ite (< amount 16)
                                                       (bvshl ((_ zero_extend 8) v) ((_ int2bv 16) amount))
                                                       ((_ int2bv 16) 0)) ((_ int2bv 16) 256)))
                              (ite (and (<= 17 8) (<= 8 32))
                              ((_ extract 7 0) (bvurem (bvshl ((_ zero_extend 24) v) ((_ int2bv 32) amount)) ((_ int2bv 32) 256)))
                              ((_ extract 7 0) (bvurem (bvshl ((_ zero_extend 56) v) ((_ int2bv 64) amount)) ((_ int2bv 64) 256)))))))) :pattern (
  (shift_left v amount)) ))))

(declare-fun make_mask (Int) (_ BitVec 8))

(declare-fun make_mask__function_guard ((_ BitVec 8) Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_237 Int)
  (temp___is_init_234 Bool) (temp___skip_constant_235 Bool)
  (temp___do_toplevel_236 Bool)) Bool (=>
                                      (or (= temp___is_init_234 true)
                                      (<= 1 8)) (in_range1 temp___expr_237)))

;; make_mask__post_axiom
  (assert
  (forall ((num_bits Int))
  (! (=> (dynamic_invariant3 num_bits true true true) (dynamic_invariant
     (make_mask num_bits) true false true)) :pattern ((make_mask num_bits)) )))

;; make_mask__def_axiom
  (assert
  (forall ((num_bits Int))
  (! (=> (dynamic_invariant3 num_bits true true true)
     (= (make_mask num_bits) (shift_right ((_ int2bv 8) 255) (- 8 num_bits)))) :pattern (
  (make_mask num_bits)) )))

(declare-const value (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const from Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const to__ Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun extract_bits_inline_always ((_ BitVec 8) Int Int) (_ BitVec 8))

(declare-fun extract_bits_inline_always__function_guard ((_ BitVec 8)
  (_ BitVec 8) Int Int) Bool)

;; extract_bits_inline_always__post_axiom
  (assert
  (forall ((value1 (_ BitVec 8)))
  (forall ((from1 Int) (to__1 Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant value1 true true true) (dynamic_invariant1 from1
     true true true)) (dynamic_invariant1 to__1 true true true))
     (<= from1 to__1))
     (let ((result (extract_bits_inline_always value1 from1 to__1)))
     (and
     (and
     (= result (bvand (shift_right value1 from1) (make_mask
                                                 (+ (- to__1 from1) 1))))
     (and (bvule result (make_mask (+ (- to__1 from1) 1)))
     (= (shift_left result from1) (bvand value1 (shift_left
                                                (make_mask
                                                (+ (- to__1 from1) 1)) from1)))))
     (dynamic_invariant result true false true)))) :pattern ((extract_bits_inline_always
                                                             value1 from1
                                                             to__1)) ))))

(declare-fun extract_bits_inline ((_ BitVec 8) Int Int) (_ BitVec 8))

(declare-fun extract_bits_inline__function_guard ((_ BitVec 8) (_ BitVec 8)
  Int Int) Bool)

;; extract_bits_inline__post_axiom
  (assert
  (forall ((value1 (_ BitVec 8)))
  (forall ((from1 Int) (to__1 Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant value1 true true true) (dynamic_invariant1 from1
     true true true)) (dynamic_invariant1 to__1 true true true))
     (<= from1 to__1))
     (let ((result (extract_bits_inline value1 from1 to__1)))
     (and
     (and
     (= result (bvand (shift_right value1 from1) (make_mask
                                                 (+ (- to__1 from1) 1))))
     (and (bvule result (make_mask (+ (- to__1 from1) 1)))
     (= (shift_left result from1) (bvand value1 (shift_left
                                                (make_mask
                                                (+ (- to__1 from1) 1)) from1)))))
     (dynamic_invariant result true false true)))) :pattern ((extract_bits_inline
                                                             value1 from1
                                                             to__1)) ))))

;; extract_bits_inline__def_axiom
  (assert
  (forall ((value1 (_ BitVec 8)))
  (forall ((from1 Int) (to__1 Int))
  (! (=>
     (and
     (and (dynamic_invariant value1 true true true) (dynamic_invariant1 from1
     true true true)) (dynamic_invariant1 to__1 true true true))
     (= (extract_bits_inline value1 from1 to__1) (extract_bits_inline_always
                                                 value1 from1 to__1))) :pattern (
  (extract_bits_inline value1 from1 to__1)) ))))

(declare-fun extract_bits_not_inline ((_ BitVec 8) Int Int) (_ BitVec 8))

(declare-fun extract_bits_not_inline__function_guard ((_ BitVec 8)
  (_ BitVec 8) Int Int) Bool)

;; extract_bits_not_inline__post_axiom
  (assert
  (forall ((value1 (_ BitVec 8)))
  (forall ((from1 Int) (to__1 Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant value1 true true true) (dynamic_invariant1 from1
     true true true)) (dynamic_invariant1 to__1 true true true))
     (<= from1 to__1))
     (let ((result (extract_bits_not_inline value1 from1 to__1)))
     (and
     (and
     (= result (bvand (shift_right value1 from1) (make_mask
                                                 (+ (- to__1 from1) 1))))
     (and (bvule result (make_mask (+ (- to__1 from1) 1)))
     (= (shift_left result from1) (bvand value1 (shift_left
                                                (make_mask
                                                (+ (- to__1 from1) 1)) from1)))))
     (dynamic_invariant result true false true)))) :pattern ((extract_bits_not_inline
                                                             value1 from1
                                                             to__1)) ))))

;; extract_bits_not_inline__def_axiom
  (assert
  (forall ((value1 (_ BitVec 8)))
  (forall ((from1 Int) (to__1 Int))
  (! (=>
     (and
     (and (dynamic_invariant value1 true true true) (dynamic_invariant1 from1
     true true true)) (dynamic_invariant1 to__1 true true true))
     (= (extract_bits_not_inline value1 from1 to__1) (extract_bits_inline_always
                                                     value1 from1 to__1))) :pattern (
  (extract_bits_not_inline value1 from1 to__1)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const result__ (_ BitVec 8))

(declare-const bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result (_ BitVec 8))

(declare-const o (_ BitVec 8))

(declare-const o1 (_ BitVec 8))

(declare-const o2 (_ BitVec 8))

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 (_ BitVec 8))

(declare-const o6 Int)

(declare-const o7 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 8))

(declare-const result (_ BitVec 8))

(declare-const result__1 (_ BitVec 8))

(declare-const result1 (_ BitVec 8))

(declare-const result__2 (_ BitVec 8))

(declare-const result2 (_ BitVec 8))

(declare-const result__3 (_ BitVec 8))

(declare-const result3 (_ BitVec 8))

(declare-const bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result1 (_ BitVec 8))

(declare-const result__4 (_ BitVec 8))

(declare-const bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result2 (_ BitVec 8))

(declare-const result__5 (_ BitVec 8))

(declare-const bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result3 (_ BitVec 8))

(declare-const result__6 (_ BitVec 8))

(declare-const bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result4 (_ BitVec 8))

(declare-const result__7 (_ BitVec 8))

(declare-const bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result5 (_ BitVec 8))

(declare-const result4 Bool)

(declare-const result5 Bool)

(define-fun bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result6 () t__ref
  (mk_t__ref
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result4))

(define-fun result__8 () t__ref (mk_t__ref result__6))

(define-fun bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result7 () t__ref
  (mk_t__ref
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result2))

(define-fun result__9 () t__ref (mk_t__ref result__4))

(define-fun result6 () t__ref (mk_t__ref result3))

(define-fun result7 () t__ref (mk_t__ref result2))

(define-fun result8 () t__ref (mk_t__ref result1))

(define-fun result9 () t__ref (mk_t__ref result))

(define-fun bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result8 () t__ref
  (mk_t__ref
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result))

(define-fun result__10 () t__ref (mk_t__ref result__))

;; H
  (assert true)

;; H
  (assert (in_range from))

;; H
  (assert (in_range to__))

;; H
  (assert (<= from to__))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result1
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result2))

;; H
  (assert (= result__1 result__4))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result3
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result1))

;; H
  (assert (= result__5 result__1))

;; H
  (assert true)

;; H
  (assert
  (=> (= 2 0)
  (and (= o (extract_bits_not_inline value from to__))
  (and (= o (extract_bits_inline_always value from to__))
  (and (= o (bvand (shift_right value from) (make_mask (+ (- to__ from) 1))))
  (and (bvule o (make_mask (+ (- to__ from) 1)))
  (= (shift_left o from) (bvand value (shift_left
                                      (make_mask (+ (- to__ from) 1))
                                      from)))))))))

;; H
  (assert (=> (= 2 0) (= result9 result__10)))

;; H
  (assert (=> (= 2 0) (= result__1 o)))

;; H
  (assert
  (=> (not (= 2 0))
  (=> (= 2 1)
  (and (= o1 (extract_bits_inline value from to__))
  (and (= o1 (extract_bits_inline_always value from to__))
  (and
  (= o1 (bvand (shift_right value from) (make_mask (+ (- to__ from) 1))))
  (and (bvule o1 (make_mask (+ (- to__ from) 1)))
  (= (shift_left o1 from) (bvand value (shift_left
                                       (make_mask (+ (- to__ from) 1))
                                       from))))))))))

;; H
  (assert (=> (not (= 2 0)) (=> (= 2 1) (= result8 result__10))))

;; H
  (assert (=> (not (= 2 0)) (=> (= 2 1) (= result__2 o1))))

;; H
  (assert
  (=> (not (= 2 0))
  (=> (not (= 2 1))
  (and (= o2 (extract_bits_inline_always value from to__))
  (and
  (= o2 (bvand (shift_right value from) (make_mask (+ (- to__ from) 1))))
  (and (bvule o2 (make_mask (+ (- to__ from) 1)))
  (= (shift_left o2 from) (bvand value (shift_left
                                       (make_mask (+ (- to__ from) 1))
                                       from)))))))))

;; H
  (assert (=> (not (= 2 0)) (=> (not (= 2 1)) (= result7 result__10))))

;; H
  (assert (=> (not (= 2 0)) (=> (not (= 2 1)) (= result__3 o2))))

;; H
  (assert (=> (not (= 2 0)) (=> (not (= 2 1)) (= result__2 result__3))))

;; H
  (assert (=> (not (= 2 0)) (= result__1 result__2)))

;; H
  (assert
  (= result6 bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result8))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result1
  result__1))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result6
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result7))

;; H
  (assert (= result__8 result__9))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result5
  bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result3))

;; H
  (assert (= result__7 result__5))

;; H
  (assert (and (= o6 (+ (- to__ from) 1)) (in_range1 (+ (- to__ from) 1))))

;; H
  (assert
  (and (= o7 (make_mask o6))
  (= o7 (shift_right ((_ int2bv 8) 255) (- 8 o6)))))

;; H
  (assert
  (and (= o8 (shift_right value from))
  (= o8 (ite (and (<= 1 8) (<= 8 8))
        (ite (< from 8) (bvlshr value ((_ int2bv 8) from)) ((_ int2bv 8) 0))
        (ite (and (<= 9 8) (<= 8 16))
        ((_ extract 7 0) (ite (< from 16)
                         (bvlshr ((_ zero_extend 8) value) ((_ int2bv 16)
                         from)) ((_ int2bv 16) 0)))
        (ite (and (<= 17 8) (<= 8 32))
        ((_ extract 7 0) (bvlshr ((_ zero_extend 24) value) ((_ int2bv 32)
        from)))
        ((_ extract 7 0) (bvlshr ((_ zero_extend 56) value) ((_ int2bv 64)
        from)))))))))

;; H
  (assert (= o9 (bvand o8 o7)))

;; H
  (assert
  (= result4 (ite (= bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result4
             o9) true false)))

;; H
  (assert (= result4 true))

;; H
  (assert (and (= o4 (+ (- to__ from) 1)) (in_range1 (+ (- to__ from) 1))))

;; H
  (assert
  (and (= o5 (make_mask o4))
  (= o5 (shift_right ((_ int2bv 8) 255) (- 8 o4)))))

;; H
  (assert
  (= result5 (ite (bvule bits_manipulation_unsigned__unsigned_8__functions__extract_bits__result4
             o5) true false)))

;; H
  (assert (= result5 true))

(assert
;; WP_parameter_def
 ;; File "bits_manipulation.ads", line 3, characters 0-0
  (not (in_range1 (+ (- to__ from) 1))))
(check-sat)
(exit)
