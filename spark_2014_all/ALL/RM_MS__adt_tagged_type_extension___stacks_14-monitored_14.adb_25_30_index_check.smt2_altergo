(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type index_range

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index_range, index_range -> bool

logic dummy1 : index_range

type index_range__ref = { index_range__content : index_range
}

function index_range__ref___projection(a: index_range__ref) : index_range =
  (a).index_range__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type pointer_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : pointer_range, pointer_range -> bool

logic dummy2 : pointer_range

type pointer_range__ref = { pointer_range__content : pointer_range
}

function pointer_range__ref___projection(a: pointer_range__ref) : pointer_range =
  (a).pointer_range__content

logic to_rep1 : pointer_range -> int

logic of_rep1 : int -> pointer_range

axiom inversion_axiom1 :
  (forall x:pointer_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:pointer_range [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic dummy3 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__stacks_14__stack__stack_vector :
(int,integer) farray; rec__stacks_14__stack__stack_pointer : pointer_range;
rec__ext__ : us_private
}

function us_split_fields_Stack_Vector__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__stacks_14__stack__stack_vector

function us_split_fields_Stack_Pointer__projection(a: us_split_fields) : pointer_range =
  (a).rec__stacks_14__stack__stack_pointer

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((bool_eq3(((a).us_split_fields1).rec__stacks_14__stack__stack_vector, 1,
  100, ((b).us_split_fields1).rec__stacks_14__stack__stack_vector, 1,
  100) = true) and
  (to_rep1(((a).us_split_fields1).rec__stacks_14__stack__stack_pointer) = to_rep1(((b).us_split_fields1).rec__stacks_14__stack__stack_pointer))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields1).rec__stacks_14__stack__stack_vector,
  1, 100, ((b).us_split_fields1).rec__stacks_14__stack__stack_vector, 1,
  100) = true) and
  (to_rep1(((a).us_split_fields1).rec__stacks_14__stack__stack_pointer) = to_rep1(((b).us_split_fields1).rec__stacks_14__stack__stack_pointer)))) ->
  (bool_eq5(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. forall a1:pointer_range.
  forall a2:us_private. forall a3:int. (0 <= object__size1({
  us_split_fields1 = { rec__stacks_14__stack__stack_vector = a;
  rec__stacks_14__stack__stack_pointer = a1; rec__ext__ = a2 }; attr__tag =
  a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. forall a1:pointer_range.
  forall a2:us_private. forall a3:int. (0 <= object__alignment1({
  us_split_fields1 = { rec__stacks_14__stack__stack_vector = a;
  rec__stacks_14__stack__stack_pointer = a1; rec__ext__ = a2 }; attr__tag =
  a3 })))

logic stacks_14__stack__stack_vector__first__bit : int

logic stacks_14__stack__stack_vector__last__bit : int

logic stacks_14__stack__stack_vector__position : int

axiom stacks_14__stack__stack_vector__first__bit_axiom :
  (0 <= stacks_14__stack__stack_vector__first__bit)

axiom stacks_14__stack__stack_vector__last__bit_axiom :
  (stacks_14__stack__stack_vector__first__bit <  stacks_14__stack__stack_vector__last__bit)

axiom stacks_14__stack__stack_vector__position_axiom :
  (0 <= stacks_14__stack__stack_vector__position)

logic stacks_14__stack__stack_pointer__first__bit : int

logic stacks_14__stack__stack_pointer__last__bit : int

logic stacks_14__stack__stack_pointer__position : int

axiom stacks_14__stack__stack_pointer__first__bit_axiom :
  (0 <= stacks_14__stack__stack_pointer__first__bit)

axiom stacks_14__stack__stack_pointer__last__bit_axiom :
  (stacks_14__stack__stack_pointer__first__bit <  stacks_14__stack__stack_pointer__last__bit)

axiom stacks_14__stack__stack_pointer__position_axiom :
  (0 <= stacks_14__stack__stack_pointer__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : (int,integer) farray

logic dummy5 : pointer_range

logic dummy6 : us_private

logic dummy7 : int

type stack__ref = { stack__content : us_rep
}

function stack__ref___projection(a: stack__ref) : us_rep = (a).stack__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq6 : bool, bool -> bool

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic is_empty1 : int, us_rep -> bool

logic is_empty__function_guard1 : bool, int, us_rep -> prop

type us_split_fields2 = {
rec__stacks_14__monitored_14__monitored_stack__monitor_vector :
(int,integer) farray;
rec__stacks_14__monitored_14__monitored_stack__next_identity_value : integer;
rec__stacks_14__stack__stack_vector1 : (int,integer) farray;
rec__stacks_14__stack__stack_pointer1 : pointer_range; rec__ext__1 :
us_private
}

function us_split_fields_Monitor_Vector__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__stacks_14__monitored_14__monitored_stack__monitor_vector

function us_split_fields_Next_Identity_Value__projection(a: us_split_fields2) : integer =
  (a).rec__stacks_14__monitored_14__monitored_stack__next_identity_value

function us_split_fields_Stack_Vector2__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__stacks_14__stack__stack_vector1

function us_split_fields_Stack_Pointer2__projection(a: us_split_fields2) : pointer_range =
  (a).rec__stacks_14__stack__stack_pointer1

function us_split_fields_2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep_3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : (int,integer) farray, integer, us_private -> us_private

logic extract__monitor_vector : us_private -> (int,integer) farray

axiom extract__monitor_vector__conv :
  (forall monitor_vector:(int,integer) farray.
  (forall next_identity_value:integer.
  (forall rec__ext__2:us_private.
  (extract__monitor_vector(hide_ext__(monitor_vector, next_identity_value,
  rec__ext__2)) = monitor_vector))))

logic extract__next_identity_value : us_private -> integer

axiom extract__next_identity_value__conv :
  (forall monitor_vector:(int,integer) farray.
  (forall next_identity_value:integer.
  (forall rec__ext__2:us_private.
  (extract__next_identity_value(hide_ext__(monitor_vector,
  next_identity_value, rec__ext__2)) = next_identity_value))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__stacks_14__stack__stack_vector =
  ((a).us_split_fields3).rec__stacks_14__stack__stack_vector1;
  rec__stacks_14__stack__stack_pointer =
  ((a).us_split_fields3).rec__stacks_14__stack__stack_pointer1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__monitor_vector,
  ((a).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__next_identity_value,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__stacks_14__monitored_14__monitored_stack__monitor_vector =
  extract__monitor_vector(((r).us_split_fields1).rec__ext__);
  rec__stacks_14__monitored_14__monitored_stack__next_identity_value =
  extract__next_identity_value(((r).us_split_fields1).rec__ext__);
  rec__stacks_14__stack__stack_vector1 =
  ((r).us_split_fields1).rec__stacks_14__stack__stack_vector;
  rec__stacks_14__stack__stack_pointer1 =
  ((r).us_split_fields1).rec__stacks_14__stack__stack_pointer; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((((bool_eq3(((a).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__monitor_vector,
  1, 100,
  ((b).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__monitor_vector,
  1, 100) = true) and
  (to_rep(((a).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__next_identity_value) = to_rep(((b).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__next_identity_value))) and
  (bool_eq3(((a).us_split_fields3).rec__stacks_14__stack__stack_vector1, 1,
  100, ((b).us_split_fields3).rec__stacks_14__stack__stack_vector1, 1,
  100) = true)) and
  (to_rep1(((a).us_split_fields3).rec__stacks_14__stack__stack_pointer1) = to_rep1(((b).us_split_fields3).rec__stacks_14__stack__stack_pointer1))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((bool_eq3(((a).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__monitor_vector,
  1, 100,
  ((b).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__monitor_vector,
  1, 100) = true) and
  (to_rep(((a).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__next_identity_value) = to_rep(((b).us_split_fields3).rec__stacks_14__monitored_14__monitored_stack__next_identity_value))) and
  (bool_eq3(((a).us_split_fields3).rec__stacks_14__stack__stack_vector1, 1,
  100, ((b).us_split_fields3).rec__stacks_14__stack__stack_vector1, 1,
  100) = true)) and
  (to_rep1(((a).us_split_fields3).rec__stacks_14__stack__stack_pointer1) = to_rep1(((b).us_split_fields3).rec__stacks_14__stack__stack_pointer1)))) ->
  (bool_eq7(a, b) = false))))

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. forall a1:integer.
  forall a2:(int,integer) farray. forall a3:pointer_range.
  forall a4:us_private. forall a5:int. (0 <= object__size2({
  us_split_fields3 = {
  rec__stacks_14__monitored_14__monitored_stack__monitor_vector = a;
  rec__stacks_14__monitored_14__monitored_stack__next_identity_value = a1;
  rec__stacks_14__stack__stack_vector1 = a2;
  rec__stacks_14__stack__stack_pointer1 = a3; rec__ext__1 = a4 };
  attr__tag1 = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. forall a1:integer.
  forall a2:(int,integer) farray. forall a3:pointer_range.
  forall a4:us_private. forall a5:int. (0 <= object__alignment2({
  us_split_fields3 = {
  rec__stacks_14__monitored_14__monitored_stack__monitor_vector = a;
  rec__stacks_14__monitored_14__monitored_stack__next_identity_value = a1;
  rec__stacks_14__stack__stack_vector1 = a2;
  rec__stacks_14__stack__stack_pointer1 = a3; rec__ext__1 = a4 };
  attr__tag1 = a5 })))

logic stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit : int

logic stacks_14__monitored_14__monitored_stack__monitor_vector__last__bit : int

logic stacks_14__monitored_14__monitored_stack__monitor_vector__position : int

axiom stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit_axiom :
  (0 <= stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit)

axiom stacks_14__monitored_14__monitored_stack__monitor_vector__last__bit_axiom :
  (stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit <  stacks_14__monitored_14__monitored_stack__monitor_vector__last__bit)

axiom stacks_14__monitored_14__monitored_stack__monitor_vector__position_axiom :
  (0 <= stacks_14__monitored_14__monitored_stack__monitor_vector__position)

logic stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit : int

logic stacks_14__monitored_14__monitored_stack__next_identity_value__last__bit : int

logic stacks_14__monitored_14__monitored_stack__next_identity_value__position : int

axiom stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit_axiom :
  (0 <= stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit)

axiom stacks_14__monitored_14__monitored_stack__next_identity_value__last__bit_axiom :
  (stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit <  stacks_14__monitored_14__monitored_stack__next_identity_value__last__bit)

axiom stacks_14__monitored_14__monitored_stack__next_identity_value__position_axiom :
  (0 <= stacks_14__monitored_14__monitored_stack__next_identity_value__position)

logic stacks_14__stack__stack_vector__first__bit1 : int

logic stacks_14__stack__stack_vector__last__bit1 : int

logic stacks_14__stack__stack_vector__position1 : int

axiom stacks_14__stack__stack_vector__first__bit_axiom1 :
  (0 <= stacks_14__stack__stack_vector__first__bit1)

axiom stacks_14__stack__stack_vector__last__bit_axiom1 :
  (stacks_14__stack__stack_vector__first__bit1 <  stacks_14__stack__stack_vector__last__bit1)

axiom stacks_14__stack__stack_vector__position_axiom1 :
  (0 <= stacks_14__stack__stack_vector__position1)

logic stacks_14__stack__stack_pointer__first__bit1 : int

logic stacks_14__stack__stack_pointer__last__bit1 : int

logic stacks_14__stack__stack_pointer__position1 : int

axiom stacks_14__stack__stack_pointer__first__bit_axiom1 :
  (0 <= stacks_14__stack__stack_pointer__first__bit1)

axiom stacks_14__stack__stack_pointer__last__bit_axiom1 :
  (stacks_14__stack__stack_pointer__first__bit1 <  stacks_14__stack__stack_pointer__last__bit1)

axiom stacks_14__stack__stack_pointer__position_axiom1 :
  (0 <= stacks_14__stack__stack_pointer__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy8 : (int,integer) farray

logic dummy9 : integer

logic dummy10 : (int,integer) farray

logic dummy11 : pointer_range

logic dummy12 : us_private

logic dummy13 : int

type monitored_stack__ref = { monitored_stack__content : us_rep1
}

function monitored_stack__ref___projection(a: monitored_stack__ref) : us_rep1 =
  (a).monitored_stack__content

axiom is_empty__post_axiom : true

axiom is_empty__post__dispatch_axiom : true

axiom stacks_14__monitored_14__monitored_stack__compat_axiom :
  (forall s:(int,integer) farray. forall s1:pointer_range.
  forall s2:us_private. forall s3:int [is_empty1(us_tag1, {
  us_split_fields1 = { rec__stacks_14__stack__stack_vector = s;
  rec__stacks_14__stack__stack_pointer = s1; rec__ext__ = s2 }; attr__tag =
  s3 })]. (to_int(is_empty({ us_split_fields1 = {
  rec__stacks_14__stack__stack_vector = s;
  rec__stacks_14__stack__stack_pointer = s1; rec__ext__ = s2 }; attr__tag =
  s3 })) = to_int(is_empty1(us_tag1, { us_split_fields1 = {
  rec__stacks_14__stack__stack_vector = s;
  rec__stacks_14__stack__stack_pointer = s1; rec__ext__ = s2 }; attr__tag =
  s3 }))))

axiom stacks_14__stack__compat_axiom :
  (forall s:(int,integer) farray. forall s1:pointer_range.
  forall s2:us_private. forall s3:int [is_empty1(us_tag, { us_split_fields1 =
  { rec__stacks_14__stack__stack_vector = s;
  rec__stacks_14__stack__stack_pointer = s1; rec__ext__ = s2 }; attr__tag =
  s3 })]. (to_int(is_empty({ us_split_fields1 = {
  rec__stacks_14__stack__stack_vector = s;
  rec__stacks_14__stack__stack_pointer = s1; rec__ext__ = s2 }; attr__tag =
  s3 })) = to_int(is_empty1(us_tag, { us_split_fields1 = {
  rec__stacks_14__stack__stack_vector = s;
  rec__stacks_14__stack__stack_pointer = s1; rec__ext__ = s2 }; attr__tag =
  s3 }))))

logic s : (int,integer) farray

logic s1 : integer

logic s2 : (int,integer) farray

logic s3 : pointer_range

logic s4 : us_private

logic s5 : int

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall result:bool. ((result = is_empty({ us_split_fields1 = {
  rec__stacks_14__stack__stack_vector = s2;
  rec__stacks_14__stack__stack_pointer = s3; rec__ext__ = hide_ext__(s, s1,
  s4) }; attr__tag = s5 })) -> ((not (result = true)) ->
  (1 <= to_rep1(s3)))))
