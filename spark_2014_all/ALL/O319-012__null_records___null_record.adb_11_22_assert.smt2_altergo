(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type null_rec

logic user_eq : null_rec, null_rec -> bool

logic value__size : int

logic object__size : null_rec -> int

logic value__alignment : int

logic object__alignment : null_rec -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:null_rec. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:null_rec. (0 <= object__alignment(a)))

logic dummy : null_rec

type null_rec__ref = { null_rec__content : null_rec
}

function null_rec__ref___projection(a: null_rec__ref) : null_rec =
  (a).null_rec__content

logic user_eq1 : null_rec, null_rec -> bool

logic value__size1 : int

logic object__size1 : null_rec -> int

logic value__alignment1 : int

logic object__alignment1 : null_rec -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:null_rec. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:null_rec. (0 <= object__alignment1(a)))

logic dummy1 : null_rec

type null_rec2__ref = { null_rec2__content : null_rec
}

function null_rec2__ref___projection(a: null_rec2__ref) : null_rec =
  (a).null_rec2__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)]. (bool_eq(a, b) = true))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_private. forall a1:int. (0 <= object__size2({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_private. forall a1:int. (0 <= object__alignment2({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_private

logic dummy3 : int

type t_null_rec__ref = { t_null_rec__content : us_rep
}

function t_null_rec__ref___projection(a: t_null_rec__ref) : us_rep =
  (a).t_null_rec__content

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:us_private. forall a1:int. (0 <= object__size3({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_private. forall a1:int. (0 <= object__alignment3({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy4 : us_private

logic dummy5 : int

type t_null_rec2__ref = { t_null_rec2__content : us_rep
}

function t_null_rec2__ref___projection(a: t_null_rec2__ref) : us_rep =
  (a).t_null_rec2__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic t1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic t2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic t3__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS5 : int

 (* File "null_record.adb", line 47, characters 0-0 *)
goal WP_parameter_def : true
