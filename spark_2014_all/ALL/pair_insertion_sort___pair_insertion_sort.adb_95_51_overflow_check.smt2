;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-const dummy1 index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes () ((arr__ref (mk_arr__ref (arr__content us_t)))))
(define-fun arr__ref___projection ((a arr__ref)) us_t (arr__content a))

(declare-fun is_perm (us_t us_t) Bool)

(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)

(define-fun dynamic_invariant1 ((temp___expr_142 us_t)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_140 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_142)
                                      (last1 temp___expr_142)))
                                      (=> (= temp___do_toplevel_141 true)
                                      (=> (= temp___is_init_139 true)
                                      (= (first1 temp___expr_142) 0)))))

(define-fun dynamic_predicate ((temp___145 us_t)) Bool (= (first1 temp___145) 0))

(declare-fun occ (us_t Int) Int)

(declare-fun occ__function_guard (Int us_t Int) Bool)

;; is_perm__post_axiom
  (assert true)

;; is_perm__def_axiom
  (assert
  (forall ((a us_t) (b us_t))
  (! (= (= (is_perm a b) true)
     (forall ((e Int))
     (=> (and (<= (- 2147483648) e) (<= e 2147483647))
     (= (occ a e) (occ b e))))) :pattern ((is_perm a b)) )))

(declare-fun sorted (us_t Int Int) Bool)

(declare-fun sorted__function_guard (Bool us_t Int Int) Bool)

;; sorted__post_axiom
  (assert true)

;; sorted__def_axiom
  (assert
  (forall ((a us_t))
  (forall ((i Int) (j Int))
  (! (= (= (sorted a i j) true)
     (forall ((k Int))
     (=> (and (<= i k) (<= k (- j 1)))
     (<= (to_rep (select (to_array a) k)) (to_rep
                                          (select (to_array a) (+ k 1))))))) :pattern (
  (sorted a i j)) ))))

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ()
((tTbSP1__ref (mk_tTbSP1__ref (tTbSP1__content integer)))))
(define-fun tTbSP1__ref___projection ((a tTbSP1__ref)) integer (tTbSP1__content
                                                               a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int integer)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq4 (us_t1 us_t1) Bool)

(declare-const dummy4 us_t1)

(declare-datatypes () ((tbS__ref (mk_tbS__ref (tbS__content us_t1)))))
(define-fun tbS__ref___projection ((a tbS__ref)) us_t1 (tbS__content a))

(define-fun dynamic_invariant2 ((temp___expr_242 us_t1)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_240 true))
                                      (and (dynamic_property2
                                      (to_rep a__first) (to_rep a__last)
                                      (first3 temp___expr_242)
                                      (last3 temp___expr_242))
                                      (and
                                      (= (first3 temp___expr_242) (to_rep
                                                                  a__first))
                                      (= (last3 temp___expr_242) (to_rep
                                                                 a__last)))))
                                      (=> (= temp___do_toplevel_241 true)
                                      (=> (= temp___is_init_239 true)
                                      (= (first3 temp___expr_242) 0)))))

(define-fun dynamic_predicate1 ((temp___249 us_t1)) Bool (= (first3
                                                            temp___249) 0))

(declare-const b us_t1)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant3 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 2147483646)) (in_range2
                                      temp___expr_136)))

(declare-sort nb_occ 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (nb_occ nb_occ) Bool)

(declare-const dummy5 nb_occ)

(declare-datatypes ()
((nb_occ__ref (mk_nb_occ__ref (nb_occ__content nb_occ)))))
(define-fun nb_occ__ref___projection ((a nb_occ__ref)) nb_occ (nb_occ__content
                                                              a))

(define-fun dynamic_invariant4 ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_152)))

(declare-fun remove_last (us_t) us_t)

(declare-fun remove_last__function_guard (us_t us_t) Bool)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes () ((t17s__ref (mk_t17s__ref (t17s__content integer)))))
(define-fun t17s__ref___projection ((a t17s__ref)) integer (t17s__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))

(define-fun of_array2 ((a (Array Int integer)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq3 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq7 (us_t2 us_t2) Bool)

(declare-const dummy7 us_t2)

(declare-datatypes () ((t18s__ref (mk_t18s__ref (t18s__content us_t2)))))
(define-fun t18s__ref___projection ((a t18s__ref)) us_t2 (t18s__content a))

;; remove_last__post_axiom
  (assert
  (forall ((a us_t))
  (! (=> (and (dynamic_invariant1 a true true true) (< 0 (length a)))
     (dynamic_invariant1 (remove_last a) true false true)) :pattern (
  (remove_last a)) )))

;; remove_last__def_axiom
  (assert
  (forall ((a us_t))
  (! (=> (dynamic_invariant1 a true true true)
     (= (remove_last a) (let ((temp___164 (let ((temp___163 (- (last1 a) 1)))
                                          (let ((temp___162 (first1 a)))
                                          (of_array2 (to_array a) temp___162
                                          temp___163)))))
                        (of_array (to_array2 temp___164) (first5 temp___164)
                        (last5 temp___164))))) :pattern ((remove_last a)) )))

(declare-fun occ_def (us_t Int) Int)

(declare-fun occ_def__function_guard (Int us_t Int) Bool)

;; occ_def__def_axiom
  (assert
  (forall ((a us_t))
  (forall ((e Int))
  (! (=>
     (and (dynamic_invariant1 a true true true) (dynamic_invariant e true
     true true))
     (= (occ_def a e) (ite (= (length a) 0) 0
                      (ite (= (to_rep (select (to_array a) (last1 a))) e)
                      (+ (occ_def (remove_last a) e) 1)
                      (occ_def (remove_last a) e))))) :pattern ((occ_def a e)) ))))

;; occ__post_axiom
  (assert
  (forall ((a us_t))
  (forall ((e Int))
  (! (=>
     (and (dynamic_invariant1 a true true true) (dynamic_invariant e true
     true true))
     (let ((result (occ a e)))
     (and (<= result (length a)) (dynamic_invariant4 result true false true)))) :pattern (
  (occ a e)) ))))

;; occ__def_axiom
  (assert
  (forall ((a us_t))
  (forall ((e Int))
  (! (=>
     (and (dynamic_invariant1 a true true true) (dynamic_invariant e true
     true true)) (= (occ a e) (occ_def a e))) :pattern ((occ a e)) ))))

(declare-const a (Array Int integer))

(declare-const i Int)

(declare-const j Int)

(declare-const x Int)

(declare-const y Int)

(declare-const z Int)

(declare-const temp___253 (Array Int integer))

(declare-const temp___2531 t1)

(declare-const pair_insertion_sort__sort__b__assume (Array Int integer))

(declare-const pair_insertion_sort__sort__b__assume1 t1)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 integer)

(declare-const o5 Int)

(declare-const temp___254 Int)

(declare-const o6 Int)

(declare-const o7 integer)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 integer)

(declare-const o12 Int)

(declare-const temp___258 (Array Int integer))

(declare-const temp___255 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Int)

(declare-const o18 integer)

(declare-const o19 Int)

(declare-const o20 Bool)

(declare-const temp___264 Int)

(declare-const o21 Int)

(declare-const o22 integer)

(declare-const o23 Int)

(declare-const o24 Bool)

(declare-const o25 Int)

(declare-const o26 Int)

(declare-const o27 Int)

(declare-const o28 Int)

(declare-const o29 Int)

(declare-const o30 integer)

(declare-const o31 Int)

(declare-const o32 Int)

(declare-const o33 Int)

(declare-const o34 Int)

(declare-const a1 (Array Int integer))

(declare-const z1 Int)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 Bool)

(declare-const result2 Int)

(declare-const x1 Int)

(declare-const result3 Int)

(declare-const y1 Int)

(declare-const result4 Int)

(declare-const z2 Int)

(declare-const result5 Int)

(declare-const x2 Int)

(declare-const result6 Int)

(declare-const y2 Int)

(declare-const result7 Int)

(declare-const j1 Int)

(declare-const result8 Bool)

(declare-const a2 (Array Int integer))

(declare-const a3 (Array Int integer))

(declare-const j2 Int)

(declare-const result9 Int)

(declare-const j3 Int)

(declare-const result10 Bool)

(declare-const a4 (Array Int integer))

(declare-const j4 Int)

(declare-const a5 (Array Int integer))

(declare-const j5 Int)

(declare-const a6 (Array Int integer))

(declare-const j6 int__ref)

(declare-const a7 (Array Int integer))

(declare-const j7 Int)

(declare-const result11 Bool)

(declare-const a8 (Array Int integer))

(declare-const a9 map__ref)

(declare-const a10 (Array Int integer))

(declare-const result12 Bool)

(declare-const a11 (Array Int integer))

(declare-const a12 (Array Int integer))

(declare-const j8 Int)

(define-fun a13 () map__ref (mk_map__ref a6))

(define-fun pair_insertion_sort__sort__b__assume2 () us_t1 (mk___t1
                                                           pair_insertion_sort__sort__b__assume
                                                           pair_insertion_sort__sort__b__assume1))

;; H
  (assert
  (and (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last))
  (= (to_rep a__first) 0)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 i)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 j)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 x)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 y)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 z)))

;; H
  (assert (= (slide a (to_rep a__first) (to_rep a__first)) temp___253))

;; H
  (assert (= (mk1 (to_rep a__first) (to_rep a__last)) temp___2531))

;; H
  (assert (= (to_rep (first2 temp___2531)) 0))

;; H
  (assert
  (= pair_insertion_sort__sort__b__assume2 (mk___t1 temp___253 temp___2531)))

;; H
  (assert (= pair_insertion_sort__sort__b__assume2 b))

;; H
  (assert (dynamic_invariant2 b true false true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 0))

;; H
  (assert
  (=> (<= (to_rep a__first) (to_rep a__last))
  (= o (+ (- (to_rep a__last) (to_rep a__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep a__first) (to_rep a__last))) (= o 0)))

;; H
  (assert (and (= o1 o) (in_range1 o)))

;; H
  (assert (= o2 (- o1 1)))

;; H
  (assert (= result1 (ite (< i1 o2) true false)))

;; H
  (assert (= result1 true))

;; H
  (assert (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))))

;; H
  (assert (= o3 i1))

;; H
  (assert (= o4 (select a o3)))

;; H
  (assert (= o5 (to_rep o4)))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref x)))

;; H
  (assert (= x1 o5))

;; H
  (assert (and (= temp___254 (+ i1 1)) (in_range1 (+ i1 1))))

;; H
  (assert
  (and (<= (to_rep a__first) temp___254) (<= temp___254 (to_rep a__last))))

;; H
  (assert (= o6 temp___254))

;; H
  (assert (= o7 (select a o6)))

;; H
  (assert (= o8 (to_rep o7)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref y)))

;; H
  (assert (= y1 o8))

;; H
  (assert (=> (< x1 y1) (= (mk_int__ref result4) (mk_int__ref z))))

;; H
  (assert (=> (< x1 y1) (= z2 x1)))

;; H
  (assert (=> (< x1 y1) (= x1 result5)))

;; H
  (assert (=> (< x1 y1) (= x2 y1)))

;; H
  (assert (=> (< x1 y1) (= y1 result6)))

;; H
  (assert (=> (< x1 y1) (= y2 z2)))

;; H
  (assert (=> (not (< x1 y1)) (= z2 z)))

;; H
  (assert (=> (not (< x1 y1)) (= y2 y1)))

;; H
  (assert (=> (not (< x1 y1)) (= x2 x1)))

;; H
  (assert (=> (not (< x1 y1)) (= z2 z1)))

;; H
  (assert (=> (not (< x1 y1)) (= y2 y1)))

;; H
  (assert (=> (not (< x1 y1)) (= x2 x1)))

;; H
  (assert (and (= o9 (- i1 1)) (in_range1 (- i1 1))))

;; H
  (assert (= (mk_int__ref result7) (mk_int__ref j)))

;; H
  (assert (= j1 o9))

;; H
  (assert
  (=> (<= 0 j1) (and (<= (to_rep a__first) j1) (<= j1 (to_rep a__last)))))

;; H
  (assert (=> (<= 0 j1) (= o10 j1)))

;; H
  (assert (=> (<= 0 j1) (= o11 (select a o10))))

;; H
  (assert (=> (<= 0 j1) (= o12 (to_rep o11))))

;; H
  (assert (=> (<= 0 j1) (= result8 (ite (< x2 o12) true false))))

;; H
  (assert (=> (not (<= 0 j1)) (= result8 false)))

;; H
  (assert (=> (= result8 true) (= temp___258 a)))

;; H
  (assert (=> (= result8 true) (= temp___255 j1)))

;; H
  (assert (=> (= result8 true) (and (= o15 j1) (in_range2 j1))))

;; H
  (assert (=> (= result8 true) (and (= o13 (+ j1 2)) (in_range1 (+ j1 2)))))

;; H
  (assert (=> (= result8 true) (and (= o14 o13) (in_range2 o13))))

;; H
  (assert
  (=> (= result8 true)
  (and
  (and
  (= (is_perm (mk___t a (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a2 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a2 o14)) (to_rep (select a o15)))
  (and (= (to_rep (select a2 o15)) (to_rep (select a o14)))
  (forall ((z3 Int))
  (=> (and (<= (to_rep a__first) z3) (<= z3 (to_rep a__last)))
  (=> (and (not (= z3 o14)) (not (= z3 o15)))
  (= (to_rep (select a2 z3)) (to_rep (select a z3)))))))))
  (= (to_rep a__first) 0))))

;; H
  (assert
  (=> (= result8 true)
  (and (<= 0 j2)
  (<= j2 (- (ite (<= (to_rep a__first) (to_rep a__last))
            (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 3)))))

;; H
  (assert
  (=> (= result8 true)
  (= (sorted (mk___t a3 (mk (to_rep a__first) (to_rep a__last))) 0 (- j2 1)) true)))

;; H
  (assert
  (=> (= result8 true)
  (= (sorted (mk___t a3 (mk (to_rep a__first) (to_rep a__last))) (+ j2 2)
     (+ i1 1)) true)))

;; H
  (assert
  (=> (= result8 true)
  (=> (< 0 j2)
  (<= (to_rep (select a3 (- j2 1))) (to_rep (select a3 (+ j2 2)))))))

;; H
  (assert (=> (= result8 true) (< x2 (to_rep (select a3 (+ j2 2))))))

;; H
  (assert
  (=> (= result8 true)
  (= (is_perm
     (mk___t (elts1 b)
     (mk (to_rep (first2 (rt1 b))) (to_rep (last2 (rt1 b)))))
     (mk___t a3 (mk (to_rep a__first) (to_rep a__last)))) true)))

;; H
  (assert
  (=> (= result8 true)
  (or
  (and (= (to_rep (select a3 j2)) x2) (= (to_rep (select a3 (+ j2 1))) y2))
  (and (= (to_rep (select a3 j2)) y2) (= (to_rep (select a3 (+ j2 1))) x2)))))

;; H
  (assert
  (=> (= result8 true)
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 j2))
  (= (to_rep a__first) 0))))

;; H
  (assert (=> (= result8 true) (and (= o16 (- j2 1)) (in_range1 (- j2 1)))))

;; H
  (assert (=> (= result8 true) (= j2 result9)))

;; H
  (assert (=> (= result8 true) (= j3 o16)))

;; H
  (assert
  (=> (= result8 true)
  (=> (<= 0 j3) (and (<= (to_rep a__first) j3) (<= j3 (to_rep a__last))))))

;; H
  (assert (=> (= result8 true) (=> (<= 0 j3) (= o17 j3))))

;; H
  (assert (=> (= result8 true) (=> (<= 0 j3) (= o18 (select a3 o17)))))

;; H
  (assert (=> (= result8 true) (=> (<= 0 j3) (= o19 (to_rep o18)))))

;; H
  (assert
  (=> (= result8 true) (=> (<= 0 j3) (= o20 (ite (< x2 o19) true false)))))

;; H
  (assert (=> (= result8 true) (=> (not (<= 0 j3)) (= o20 false))))

;; H
  (assert
  (=> (= result8 true) (= result10 (ite (not (= o20 true)) true false))))

;; H
  (assert (=> (= result8 true) (= result10 true)))

;; H
  (assert (=> (= result8 true) (= j3 j4)))

;; H
  (assert (=> (= result8 true) (= a3 a4)))

;; H
  (assert (=> (= result8 true) (= j5 j3)))

;; H
  (assert (=> (= result8 true) (= a5 a3)))

;; H
  (assert (=> (= result8 true) (= j6 (mk_int__ref j4))))

;; H
  (assert (=> (= result8 true) (= a13 (mk_map__ref a4))))

;; H
  (assert (=> (= result8 true) (= j7 j5)))

;; H
  (assert (=> (= result8 true) (= a7 a5)))

;; H
  (assert (=> (not (= result8 true)) (= j6 (mk_int__ref j1))))

;; H
  (assert (=> (not (= result8 true)) (= a13 (mk_map__ref a))))

;; H
  (assert (=> (not (= result8 true)) (= j7 j1)))

;; H
  (assert (=> (not (= result8 true)) (= a7 a1)))

;; H
  (assert
  (and (= temp___264 (+ (int__content j6) 2)) (in_range1
  (+ (int__content j6) 2))))

;; H
  (assert
  (and (<= (to_rep a__first) temp___264) (<= temp___264 (to_rep a__last))))

;; H
  (assert (= o21 temp___264))

;; H
  (assert (= o22 (select a6 o21)))

;; H
  (assert (= o23 (to_rep o22)))

;; H
  (assert (= o24 (ite (= o23 x2) true false)))

;; H
  (assert (= result11 (ite (not (= o24 true)) true false)))

;; H
  (assert
  (=> (= result11 true)
  (and (= o27 (+ (int__content j6) 1)) (in_range1 (+ (int__content j6) 1)))))

;; H
  (assert (=> (= result11 true) (and (= o28 o27) (in_range2 o27))))

;; H
  (assert
  (=> (= result11 true)
  (and (= o25 (+ (int__content j6) 2)) (in_range1 (+ (int__content j6) 2)))))

;; H
  (assert (=> (= result11 true) (and (= o26 o25) (in_range2 o25))))

;; H
  (assert
  (=> (= result11 true)
  (and
  (and
  (= (is_perm (mk___t a6 (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a8 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a8 o26)) (to_rep (select a6 o28)))
  (and (= (to_rep (select a8 o28)) (to_rep (select a6 o26)))
  (forall ((z3 Int))
  (=> (and (<= (to_rep a__first) z3) (<= z3 (to_rep a__last)))
  (=> (and (not (= z3 o26)) (not (= z3 o28)))
  (= (to_rep (select a8 z3)) (to_rep (select a6 z3)))))))))
  (= (to_rep a__first) 0))))

;; H
  (assert (=> (= result11 true) (= a9 (mk_map__ref a8))))

;; H
  (assert (=> (= result11 true) (= a10 a8)))

;; H
  (assert (=> (not (= result11 true)) (= a9 a13)))

;; H
  (assert (=> (not (= result11 true)) (= a10 a7)))

;; H
  (assert
  (=> (<= 0 (int__content j6))
  (and (<= (to_rep a__first) (int__content j6))
  (<= (int__content j6) (to_rep a__last)))))

;; H
  (assert (=> (<= 0 (int__content j6)) (= o29 (int__content j6))))

;; H
  (assert
  (=> (<= 0 (int__content j6)) (= o30 (select (map__content a9) o29))))

;; H
  (assert (=> (<= 0 (int__content j6)) (= o31 (to_rep o30))))

;; H
  (assert
  (=> (<= 0 (int__content j6)) (= result12 (ite (< y2 o31) true false))))

;; H
  (assert (=> (not (<= 0 (int__content j6))) (= result12 false)))

;; H
  (assert (= result12 true))

;; H
  (assert (and (= o34 (int__content j6)) (in_range2 (int__content j6))))

;; H
  (assert
  (and (= o32 (+ (int__content j6) 1)) (in_range1 (+ (int__content j6) 1))))

;; H
  (assert (and (= o33 o32) (in_range2 o32)))

;; H
  (assert
  (and
  (and
  (= (is_perm
     (mk___t (map__content a9) (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a11 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a11 o33)) (to_rep (select (map__content a9) o34)))
  (and (= (to_rep (select a11 o34)) (to_rep (select (map__content a9) o33)))
  (forall ((z3 Int))
  (=> (and (<= (to_rep a__first) z3) (<= z3 (to_rep a__last)))
  (=> (and (not (= z3 o33)) (not (= z3 o34)))
  (= (to_rep (select a11 z3)) (to_rep (select (map__content a9) z3)))))))))
  (= (to_rep a__first) 0)))

;; H
  (assert
  (and (<= 0 j8)
  (<= j8 (- (ite (<= (to_rep a__first) (to_rep a__last))
            (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 3))))

;; H
  (assert
  (= (sorted (mk___t a12 (mk (to_rep a__first) (to_rep a__last))) 0 (- j8 1)) true))

;; H
  (assert
  (= (sorted (mk___t a12 (mk (to_rep a__first) (to_rep a__last))) (+
     j8 1) (+ i1 1)) true))

;; H
  (assert
  (=> (< 0 j8)
  (<= (to_rep (select a12 (- j8 1))) (to_rep (select a12 (+ j8 1))))))

;; H
  (assert (< y2 (to_rep (select a12 (+ j8 1)))))

;; H
  (assert
  (= (is_perm
     (mk___t (elts1 b)
     (mk (to_rep (first2 (rt1 b))) (to_rep (last2 (rt1 b)))))
     (mk___t a12 (mk (to_rep a__first) (to_rep a__last)))) true))

;; H
  (assert (= (to_rep (select a12 j8)) y2))

;; H
  (assert
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 j8))
  (= (to_rep a__first) 0)))

(assert
;; WP_parameter_def
 ;; File "pair_insertion_sort.ads", line 7, characters 0-0
  (not (in_range1 (- j8 1))))
(check-sat)
(exit)
