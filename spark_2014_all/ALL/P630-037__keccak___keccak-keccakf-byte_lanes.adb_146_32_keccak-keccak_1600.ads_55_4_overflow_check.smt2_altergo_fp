(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(18446744073709551616 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : byte, byte -> bool

logic dummy2 : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

logic to_rep1 : byte -> t

logic of_rep1 : t -> byte

axiom inversion_axiom1 :
  (forall x:byte [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int3(x: byte) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:byte [to_int3(x)]. uint_in_range(to_int3(x)))

type index_number

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_number, index_number -> bool

logic dummy3 : index_number

type index_number__ref = { index_number__content : index_number
}

function index_number__ref___projection(a: index_number__ref) : index_number =
  (a).index_number__content

type map__ref = { map__content : (int,byte) farray
}

logic slide : (int,byte) farray, int, int -> (int,byte) farray

axiom slide_eq :
  (forall a:(int,byte) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> (int,byte) farray

axiom concat_def :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : byte, int -> (int,byte) farray

axiom singleton_def :
  (forall v:byte.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq8 : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,byte) farray. forall a__first:int. forall a__last:int.
  forall b:(int,byte) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep1((a[(i + 1)])), to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep1((a[(j + 1)])), to_rep1((b[(i + 1)]))))))))))))

type t2

logic first : t2 -> integer

logic last : t2 -> integer

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,byte) farray; rt : t2
}

function to_array(a: us_t) : (int,byte) farray = (a).elts

function of_array(a: (int,byte) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,byte) farray -> int

logic value__alignment : int

logic object__alignment : (int,byte) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,byte) farray. (0 <= object__alignment(a)))

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,byte) farray

logic dummy5 : t2

type byte_array__ref = { byte_array__content : us_t
}

function byte_array__ref___projection(a: byte_array__ref) : us_t =
  (a).byte_array__content

type lane_type

logic attr__ATTRIBUTE_MODULUS1 : t1

logic bool_eq10 : t1, t1 -> bool

axiom bool_eq_def8 :
  (forall x:t1. forall y:t1 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq5 : lane_type, lane_type -> bool

logic dummy6 : lane_type

type lane_type__ref = { lane_type__content : lane_type
}

function lane_type__ref___projection(a: lane_type__ref) : lane_type =
  (a).lane_type__content

logic to_rep2 : lane_type -> t1

logic of_rep2 : t1 -> lane_type

axiom inversion_axiom2 :
  (forall x:lane_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t1 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int4(x: lane_type) : int = tqtint1(to_rep2(x))

axiom range_int_axiom1 :
  (forall x:lane_type [to_int4(x)]. uint_in_range1(to_int4(x)))

type x_coord

predicate in_range4(x: t) = (ule(of_int(0), x) and ule(x, of_int(4)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq11 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq6 : x_coord, x_coord -> bool

logic dummy7 : x_coord

type x_coord__ref = { x_coord__content : x_coord
}

function x_coord__ref___projection(a: x_coord__ref) : x_coord =
  (a).x_coord__content

type y_coord

predicate in_range5(x: t) = (ule(of_int(0), x) and ule(x, of_int(4)))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq12 : t, t -> bool

axiom bool_eq_def10 :
  (forall x:t. forall y:t [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic user_eq7 : y_coord, y_coord -> bool

logic dummy8 : y_coord

type y_coord__ref = { y_coord__content : y_coord
}

function y_coord__ref___projection(a: y_coord__ref) : y_coord =
  (a).y_coord__content

type map

type map__ref1 = { map__content1 : map
}

logic get : map, t, t -> lane_type

logic set : map, t, t, lane_type -> map

axiom Select_eq :
  (forall m:map.
  (forall i:t.
  (forall j:t.
  (forall a:lane_type [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:t. forall i2:t.
  (forall j:t. forall j2:t.
  (forall a:lane_type [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide1 : map, t, t, t, t -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:t. forall old_first:t.
  (forall new_first_2:t. forall old_first_2:t.
  (forall i:t.
  (forall j:t [get(slide1(a, old_first, new_first, old_first_2, new_first_2),
  i, j)]. (get(slide1(a, old_first, new_first, old_first_2, new_first_2), i,
  j) = get(a, sub(i, sub(new_first, old_first)), sub(j, sub(new_first_2,
  old_first_2)))))))))

logic bool_eq13 : map, t, t, t, t, map, t, t, t, t -> bool

axiom bool_eq_def11 :
  (forall a:map. forall a__first:t. forall a__last:t. forall a__first_2:t.
  forall a__last_2:t. forall b:map. forall b__first:t. forall b__last:t.
  forall b__first_2:t. forall b__last_2:t [bool_eq13(a, a__first, a__last,
  a__first_2, a__last_2, b, b__first, b__last, b__first_2, b__last_2)].
  ((((((ule(a__first, a__last) and (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) or ((not ule(a__first, a__last)) and
  ugt(b__first, b__last))) and ((ule(a__first_2, a__last_2) and
  (ule(b__first_2, b__last_2) and (sub(a__last_2,
  a__first_2) = sub(b__last_2, b__first_2)))) or ((not ule(a__first_2,
  a__last_2)) and ugt(b__first_2, b__last_2)))) and
  (forall temp___idx_133:t. forall temp___idx_134:t. ((((ule(a__first,
  temp___idx_133) and ule(temp___idx_133, a__last)) and (ule(a__first_2,
  temp___idx_134) and ule(temp___idx_134, a__last_2))) and (to_rep2(get(a,
  temp___idx_133, temp___idx_134)) = to_rep2(get(b, add(sub(b__first,
  a__first), temp___idx_133), add(sub(b__first_2, a__first_2),
  temp___idx_134))))) or (not ((ule(a__first, temp___idx_133) and
  ule(temp___idx_133, a__last)) and (ule(a__first_2, temp___idx_134) and
  ule(temp___idx_134, a__last_2))))))) -> (bool_eq13(a, a__first, a__last,
  a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = true)) and ((not ((((ule(a__first, a__last) -> (ule(b__first,
  b__last) and (sub(a__last, a__first) = sub(b__last, b__first)))) and
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last))) and
  ((ule(a__first_2, a__last_2) -> (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) and
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2)))) and
  (forall temp___idx_133:t. forall temp___idx_134:t. (((ule(a__first,
  temp___idx_133) and ule(temp___idx_133, a__last)) and (ule(a__first_2,
  temp___idx_134) and ule(temp___idx_134, a__last_2))) -> (to_rep2(get(a,
  temp___idx_133, temp___idx_134)) = to_rep2(get(b, add(sub(b__first,
  a__first), temp___idx_133), add(sub(b__first_2, a__first_2),
  temp___idx_134)))))))) -> (bool_eq13(a, a__first, a__last, a__first_2,
  a__last_2, b, b__first, b__last, b__first_2, b__last_2) = false))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:t. forall a__last:t. forall a__first_2:t.
  forall a__last_2:t. forall b__first:t. forall b__last:t.
  forall b__first_2:t. forall b__last_2:t. ((bool_eq13(b, b__first, b__last,
  b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((((ule(a__first, a__last) -> (ule(b__first,
  b__last) and (sub(a__last, a__first) = sub(b__last, b__first)))) and
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last))) and
  ((ule(a__first_2, a__last_2) -> (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) and
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2)))) and
  (forall temp___idx_133:t. forall temp___idx_134:t. (((ule(a__first,
  temp___idx_133) and ule(temp___idx_133, a__last)) and (ule(a__first_2,
  temp___idx_134) and ule(temp___idx_134, a__last_2))) -> (to_rep2(get(a,
  temp___idx_133, temp___idx_134)) = to_rep2(get(b, add(sub(b__first,
  a__first), temp___idx_133), add(sub(b__first_2, a__first_2),
  temp___idx_134))))))))))

logic a : map

logic attr__ATTRIBUTE_ADDRESS : int

logic data__first : integer

logic data__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy9 : integer

type t67s__ref = { t67s__content : integer
}

function t67s__ref___projection(a1: t67s__ref) : integer = (a1).t67s__content

type t3

logic first2 : t3 -> integer

logic last2 : t3 -> integer

logic mk1 : int, int -> t3

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,byte) farray; rt1 : t3
}

function to_array1(a1: us_t1) : (int,byte) farray = (a1).elts1

function of_array1(a1: (int,byte) farray, f: int, l: int) : us_t1 = { elts1 =
  a1; rt1 = mk1(f, l) }

function first3(a1: us_t1) : int = to_rep(first2((a1).rt1))

function last3(a1: us_t1) : int = to_rep(last2((a1).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a1:us_t1 [length1(a1)]. (((first3(a1) <= last3(a1)) ->
  (length1(a1) = ((last3(a1) - first3(a1)) + 1))) and
  ((not (first3(a1) <= last3(a1))) -> (length1(a1) = 0))))

logic value__size1 : int

logic object__size1 : (int,byte) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,byte) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,byte) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a1:(int,byte) farray. (0 <= object__size1(a1)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a1:(int,byte) farray. (0 <= object__component__size1(a1)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a1:(int,byte) farray. (0 <= object__alignment1(a1)))

function bool_eq15(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq9 : us_t1, us_t1 -> bool

logic dummy10 : (int,byte) farray

logic dummy11 : t3

type t68s__ref = { t68s__content : us_t1
}

function t68s__ref___projection(a1: t68s__ref) : us_t1 = (a1).t68s__content

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic temp___738 : t, int, int -> us_t1

axiom def_axiom :
  (forall temp___740:t.
  (forall temp___741:int. forall temp___742:int. ((dynamic_property(0,
  2147483647, temp___741, temp___742) ->
  ((to_rep(first2((temp___738(temp___740, temp___741,
  temp___742)).rt1)) = temp___741) and (to_rep(last2((temp___738(temp___740,
  temp___741, temp___742)).rt1)) = temp___742))) and
  (forall temp___743:int. (((temp___738(temp___740, temp___741,
  temp___742)).elts1[temp___743]) = of_rep1(temp___740))))))

 (* File "keccak-keccakf-byte_lanes.adb", line 30, characters 0-0 *)
goal WP_parameter_def :
  (forall data:(int,byte) farray. forall x:t. forall y:t.
  forall remaining_bytes:int. forall offset:int. forall lane:t1.
  forall i:int. forall shift:int. forall initial_offset:int. forall o:int.
  forall o1:int. forall temp___745:(int,byte) farray. forall temp___7451:t3.
  forall temp___746:(int,byte) farray. forall temp___7461:t2.
  forall temp___747:(int,byte) farray. forall temp___7471:t2.
  forall o2:(int,byte) farray. forall temp___763:t1. forall temp___762:int.
  forall temp___761:int. forall temp___760:t.
  forall temp___758:(int,byte) farray. forall temp___756:t.
  forall temp___765:int. forall temp___764:int. forall o3:int. forall o4:int.
  forall temp___748:int. forall o5:int. forall o6:int. forall o7:t1.
  forall o8:t1. forall o9:t1. forall o10:t1. forall o11:t. forall o12:byte.
  forall o13:int. forall o14:(int,byte) farray. forall o15:int.
  forall o16:int. forall temp___7481:int. forall o17:int. forall o18:int.
  forall o19:t1. forall o20:t1. forall o21:t1. forall o22:t1. forall o23:t.
  forall o24:byte. forall o25:int. forall o26:(int,byte) farray.
  forall o27:int. forall o28:int. forall temp___7482:int. forall o29:int.
  forall o30:int. forall o31:t1. forall o32:t1. forall o33:t1. forall o34:t1.
  forall o35:t. forall o36:byte. forall o37:int.
  forall o38:(int,byte) farray. forall o39:int. forall o40:int.
  forall temp___7483:int. forall o41:int. forall o42:int. forall o43:t1.
  forall o44:t1. forall o45:t1. forall o46:t1. forall o47:t. forall o48:byte.
  forall o49:int. forall o50:(int,byte) farray. forall o51:int.
  forall o52:int. forall temp___7484:int. forall o53:int. forall o54:int.
  forall o55:t1. forall o56:t1. forall o57:t1. forall o58:t1. forall o59:t.
  forall o60:byte. forall o61:int. forall o62:(int,byte) farray.
  forall o63:int. forall o64:int. forall temp___7485:int. forall o65:int.
  forall o66:int. forall o67:t1. forall o68:t1. forall o69:t1. forall o70:t1.
  forall o71:t. forall o72:byte. forall o73:int.
  forall o74:(int,byte) farray. forall o75:int. forall o76:int.
  forall temp___7486:int. forall o77:int. forall o78:int. forall o79:t1.
  forall o80:t1. forall o81:t1. forall o82:t1. forall o83:t. forall o84:byte.
  forall o85:int. forall o86:(int,byte) farray. forall o87:int.
  forall o88:int. forall temp___7487:int. forall o89:int. forall o90:int.
  forall o91:t1. forall o92:t1. forall o93:t1. forall o94:t1. forall o95:t.
  forall o96:byte. forall o97:int. forall o98:(int,byte) farray.
  forall o99:t. forall o100:t. forall o101:int. forall o102:int.
  forall o103:byte. forall lane1:t1. forall i1:int. forall result:t.
  forall x1:t. forall result1:t. forall y1:t. forall result2:int.
  forall remaining_bytes1:int. forall result3:int. forall offset1:int.
  forall result4:(int,byte) farray. forall data1:(int,byte) farray.
  forall data2:(int,byte) farray. forall x2:t. forall y2:t.
  forall remaining_bytes2:int. forall offset2:int. forall lane2:t1.
  forall i2:int. forall temp___7651:int. forall temp___7641:int.
  forall result5:int. forall temp___7652:int. forall result6:int.
  forall temp___7642:int. forall result7:t1. forall lane3:t1.
  forall result8:int. forall i3:int. forall result9:(int,byte) farray.
  forall data3:(int,byte) farray. forall result10:int. forall i4:int.
  forall result11:(int,byte) farray. forall data4:(int,byte) farray.
  forall result12:int. forall i5:int. forall result13:(int,byte) farray.
  forall data5:(int,byte) farray. forall result14:int. forall i6:int.
  forall result15:(int,byte) farray. forall data6:(int,byte) farray.
  forall result16:int. forall i7:int. forall result17:(int,byte) farray.
  forall data7:(int,byte) farray. forall result18:int. forall i8:int.
  forall result19:(int,byte) farray. forall data8:(int,byte) farray.
  forall result20:int. forall i9:int. forall result21:(int,byte) farray.
  forall data9:(int,byte) farray. forall result22:int. forall i10:int.
  forall result23:(int,byte) farray. forall data10:(int,byte) farray.
  forall result24:t. forall x3:t. forall result25:t. forall y3:t.
  forall result26:int. forall remaining_bytes3:int. forall result27:int.
  forall offset3:int. forall data11:map__ref. forall x4:t__ref.
  forall y4:t__ref. forall remaining_bytes4:int__ref.
  forall offset4:int__ref. forall lane4:t__ref1. forall i11:int__ref.
  forall data12:(int,byte) farray. forall x5:t. forall y5:t.
  forall remaining_bytes5:int. forall offset5:int. forall lane5:t1.
  forall i12:int. forall data13:map__ref. forall x6:t__ref. forall y6:t__ref.
  forall remaining_bytes6:int__ref. forall offset6:int__ref.
  forall lane6:t__ref1. forall i13:int__ref. forall data14:(int,byte) farray.
  forall x7:t. forall y7:t. forall remaining_bytes7:int. forall offset7:int.
  forall lane7:t1. forall i14:int. forall result28:t__ref1. forall lane8:t1.
  forall result29:int__ref. forall shift1:int. forall result30:int__ref.
  forall initial_offset1:int. forall remaining_bytes8:int.
  forall offset8:int. forall shift2:int. forall temp___775:int.
  forall temp___774:int. forall temp___773:int. forall result31:int__ref.
  forall temp___7751:int. forall result32:int__ref. forall temp___7741:int.
  forall result33:int__ref. forall temp___7731:int. (dynamic_property(0,
  2147483647, to_rep(data__first), to_rep(data__last)) ->
  ((((to_rep(data__first) <= to_rep(data__last)) and
  (((to_rep(data__last) - to_rep(data__first)) + 1) <= 200)) or
  ((not (to_rep(data__first) <= to_rep(data__last))) and (0 <= 200))) ->
  (((result = x) and (x1 = of_int(0))) -> (in_range4(x1) ->
  (((result1 = y) and (y1 = of_int(0))) -> (in_range5(y1) ->
  ((((((to_rep(data__first) <= to_rep(data__last)) and
  (o = ((to_rep(data__last) - to_rep(data__first)) + 1))) or
  ((not (to_rep(data__first) <= to_rep(data__last))) and (o = 0))) and
  ((o1 = o) and in_range2(o))) and ((result2 = remaining_bytes) and
  (remaining_bytes1 = o1))) -> (in_range2(remaining_bytes1) ->
  (((result3 = offset) and (offset1 = 0)) -> (in_range2(offset1) ->
  (((((((to_rep(first2((temp___738(of_int(0), to_rep(data__first),
  to_rep(data__last))).rt1)) = to_rep(data__first)) and
  ((to_rep(last2((temp___738(of_int(0), to_rep(data__first),
  to_rep(data__last))).rt1)) = to_rep(data__last)) and ({ elts1 = temp___745;
  rt1 = temp___7451 } = temp___738(of_int(0), to_rep(data__first),
  to_rep(data__last))))) and ((temp___745 = temp___746) and
  (mk(to_rep(first2(temp___7451)),
  to_rep(last2(temp___7451))) = temp___7461))) and
  ((((to_rep(first(temp___7461)) <= to_rep(last(temp___7461))) and
  (((to_rep(data__first) <= to_rep(data__last)) and
  (((to_rep(last(temp___7461)) - to_rep(first(temp___7461))) + 1) = ((to_rep(data__last) - to_rep(data__first)) + 1))) or
  ((not (to_rep(data__first) <= to_rep(data__last))) and
  (((to_rep(last(temp___7461)) - to_rep(first(temp___7461))) + 1) = 0)))) or
  ((not (to_rep(first(temp___7461)) <= to_rep(last(temp___7461)))) and
  (((to_rep(data__first) <= to_rep(data__last)) and
  (0 = ((to_rep(data__last) - to_rep(data__first)) + 1))) or
  (not (to_rep(data__first) <= to_rep(data__last)))))) and
  ((temp___747 = temp___746) and (temp___7471 = temp___7461)))) and
  (o2 = slide(temp___747, to_rep(first(temp___7471)),
  to_rep(data__first)))) and ((result4 = data) and (data1 = o2))) ->
  ((((8 <= remaining_bytes1) and ((((temp___763 = lane) and
  ((temp___762 = offset1) and ((temp___761 = remaining_bytes1) and
  ((temp___760 = y1) and ((temp___758 = data1) and ((temp___756 = x1) and
  ((0 = temp___765) and ((0 = temp___764) and (((mod(offset2, 8) = 0) and
  (((to_rep(data__first) <= to_rep(data__last)) and
  ((offset2 + remaining_bytes2) = ((to_rep(data__last) - to_rep(data__first)) + 1))) or
  ((not (to_rep(data__first) <= to_rep(data__last))) and
  ((offset2 + remaining_bytes2) = 0)))) and ((((((ule(of_int(0),
  of_int(4)) -> in_range4(x2)) and (ule(of_int(0), of_int(4)) ->
  in_range5(y2))) and ((0 <= 2147483647) -> in_range2(remaining_bytes2))) and
  ((0 <= 2147483647) -> in_range2(offset2))) and (8 <= remaining_bytes2)) and
  (((temp___7651 = result5) and (temp___7652 = offset2)) and
  (((temp___7641 = result6) and (temp___7642 = remaining_bytes2)) and
  (((result7 = lane2) and (lane3 = to_rep2(get(a, x2, y2)))) and
  ((((result8 = i2) and (i3 = 0)) and ((((((((((((o5 = (i3 * 8)) and
  in_range1((i3 * 8))) and ((o6 = o5) and in_range2(o5))) and
  (o7 = of_int1(o6))) and (o8 = lsr_bv1(lane3, o7))) and (o9 = bw_and1(o8,
  of_int1(255)))) and (o10 = o9)) and (o11 = toSmall(o10))) and
  (to_rep1(o12) = o11)) and ((((((o3 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o4 = (o3 + i3))) and
  ((temp___748 = o4) and in_range1(o4))) and
  (((to_rep(data__first) <= temp___748) and
  (temp___748 <= to_rep(data__last))) and (o13 = temp___748))) and
  (o14 = (data2[o13 <- o12])))) and ((result9 = data2) and
  (data3 = o14))) and (((result10 = i3) and (i4 = 1)) and
  ((((((((((((o17 = (i4 * 8)) and in_range1((i4 * 8))) and ((o18 = o17) and
  in_range2(o17))) and (o19 = of_int1(o18))) and (o20 = lsr_bv1(lane3,
  o19))) and (o21 = bw_and1(o20, of_int1(255)))) and (o22 = o21)) and
  (o23 = toSmall(o22))) and (to_rep1(o24) = o23)) and
  ((((((o15 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o16 = (o15 + i4))) and
  ((temp___7481 = o16) and in_range1(o16))) and
  (((to_rep(data__first) <= temp___7481) and
  (temp___7481 <= to_rep(data__last))) and (o25 = temp___7481))) and
  (o26 = (data3[o25 <- o24])))) and ((result11 = data3) and
  (data4 = o26))) and (((result12 = i4) and (i5 = 2)) and
  ((((((((((((o29 = (i5 * 8)) and in_range1((i5 * 8))) and ((o30 = o29) and
  in_range2(o29))) and (o31 = of_int1(o30))) and (o32 = lsr_bv1(lane3,
  o31))) and (o33 = bw_and1(o32, of_int1(255)))) and (o34 = o33)) and
  (o35 = toSmall(o34))) and (to_rep1(o36) = o35)) and
  ((((((o27 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o28 = (o27 + i5))) and
  ((temp___7482 = o28) and in_range1(o28))) and
  (((to_rep(data__first) <= temp___7482) and
  (temp___7482 <= to_rep(data__last))) and (o37 = temp___7482))) and
  (o38 = (data4[o37 <- o36])))) and ((result13 = data4) and
  (data5 = o38))) and (((result14 = i5) and (i6 = 3)) and
  ((((((((((((o41 = (i6 * 8)) and in_range1((i6 * 8))) and ((o42 = o41) and
  in_range2(o41))) and (o43 = of_int1(o42))) and (o44 = lsr_bv1(lane3,
  o43))) and (o45 = bw_and1(o44, of_int1(255)))) and (o46 = o45)) and
  (o47 = toSmall(o46))) and (to_rep1(o48) = o47)) and
  ((((((o39 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o40 = (o39 + i6))) and
  ((temp___7483 = o40) and in_range1(o40))) and
  (((to_rep(data__first) <= temp___7483) and
  (temp___7483 <= to_rep(data__last))) and (o49 = temp___7483))) and
  (o50 = (data5[o49 <- o48])))) and ((result15 = data5) and
  (data6 = o50))) and (((result16 = i6) and (i7 = 4)) and
  ((((((((((((o53 = (i7 * 8)) and in_range1((i7 * 8))) and ((o54 = o53) and
  in_range2(o53))) and (o55 = of_int1(o54))) and (o56 = lsr_bv1(lane3,
  o55))) and (o57 = bw_and1(o56, of_int1(255)))) and (o58 = o57)) and
  (o59 = toSmall(o58))) and (to_rep1(o60) = o59)) and
  ((((((o51 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o52 = (o51 + i7))) and
  ((temp___7484 = o52) and in_range1(o52))) and
  (((to_rep(data__first) <= temp___7484) and
  (temp___7484 <= to_rep(data__last))) and (o61 = temp___7484))) and
  (o62 = (data6[o61 <- o60])))) and ((result17 = data6) and
  (data7 = o62))) and (((result18 = i7) and (i8 = 5)) and
  ((((((((((((o65 = (i8 * 8)) and in_range1((i8 * 8))) and ((o66 = o65) and
  in_range2(o65))) and (o67 = of_int1(o66))) and (o68 = lsr_bv1(lane3,
  o67))) and (o69 = bw_and1(o68, of_int1(255)))) and (o70 = o69)) and
  (o71 = toSmall(o70))) and (to_rep1(o72) = o71)) and
  ((((((o63 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o64 = (o63 + i8))) and
  ((temp___7485 = o64) and in_range1(o64))) and
  (((to_rep(data__first) <= temp___7485) and
  (temp___7485 <= to_rep(data__last))) and (o73 = temp___7485))) and
  (o74 = (data7[o73 <- o72])))) and ((result19 = data7) and
  (data8 = o74))) and (((result20 = i8) and (i9 = 6)) and
  ((((((((((((o77 = (i9 * 8)) and in_range1((i9 * 8))) and ((o78 = o77) and
  in_range2(o77))) and (o79 = of_int1(o78))) and (o80 = lsr_bv1(lane3,
  o79))) and (o81 = bw_and1(o80, of_int1(255)))) and (o82 = o81)) and
  (o83 = toSmall(o82))) and (to_rep1(o84) = o83)) and
  ((((((o75 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o76 = (o75 + i9))) and
  ((temp___7486 = o76) and in_range1(o76))) and
  (((to_rep(data__first) <= temp___7486) and
  (temp___7486 <= to_rep(data__last))) and (o85 = temp___7486))) and
  (o86 = (data8[o85 <- o84])))) and ((result21 = data8) and
  (data9 = o86))) and (((result22 = i9) and (i10 = 7)) and
  (((((((((((o89 = (i10 * 8)) and in_range1((i10 * 8))) and ((o90 = o89) and
  in_range2(o89))) and (o91 = of_int1(o90))) and (o92 = lsr_bv1(lane3,
  o91))) and (o93 = bw_and1(o92, of_int1(255)))) and (o94 = o93)) and
  (o95 = toSmall(o94))) and (to_rep1(o96) = o95)) and
  ((((((o87 = (to_rep(data__first) + offset2)) and
  in_range1((to_rep(data__first) + offset2))) and (o88 = (o87 + i10))) and
  ((temp___7487 = o88) and in_range1(o88))) and
  (((to_rep(data__first) <= temp___7487) and
  (temp___7487 <= to_rep(data__last))) and (o97 = temp___7487))) and
  (o98 = (data9[o97 <- o96])))) and ((result23 = data9) and
  (data10 = o98)))))))))))))))))) and ((((ule(sub(of_int(5), x2),
  of_int(1)) and (o99 = sub(add(x2, of_int(1)), of_int(5)))) or
  ((not ule(sub(of_int(5), x2), of_int(1))) and (o99 = add(x2,
  of_int(1))))) and ((result24 = x2) and (x3 = o99))) and
  ((((x3 = of_int(0)) and (((ule(sub(of_int(5), y2), of_int(1)) and
  (o100 = sub(add(y2, of_int(1)), of_int(5)))) or ((not ule(sub(of_int(5),
  y2), of_int(1))) and (o100 = add(y2, of_int(1))))) and ((result25 = y2) and
  (y3 = o100)))) or ((not (x3 = of_int(0))) and (y3 = y2))) and
  ((((o101 = (remaining_bytes2 - 8)) and
  in_range2((remaining_bytes2 - 8))) and ((result26 = remaining_bytes2) and
  (remaining_bytes3 = o101))) and ((((o102 = (offset2 + 8)) and
  in_range1((offset2 + 8))) and ((result27 = offset2) and
  (offset3 = o102))) and (not (8 <= remaining_bytes3)))))))))))))))))))) and
  (((i11 = { int__content = i10 }) and ((lane4 = { t__content1 = lane3 }) and
  ((offset4 = { int__content = offset3 }) and ((remaining_bytes4 = {
  int__content = remaining_bytes3 }) and ((y4 = { t__content = y3 }) and
  ((x4 = { t__content = x3 }) and (data11 = { map__content = data10
  }))))))) and ((i12 = i10) and ((lane5 = lane3) and ((offset5 = offset3) and
  ((remaining_bytes5 = remaining_bytes3) and ((y5 = y3) and ((x5 = x3) and
  (data12 = data10))))))))) and (((i13 = i11) and ((lane6 = lane4) and
  ((offset6 = offset4) and ((remaining_bytes6 = remaining_bytes4) and
  ((y6 = y4) and ((x6 = x4) and (data13 = data11))))))) and ((i14 = i12) and
  ((lane7 = lane5) and ((offset7 = offset5) and
  ((remaining_bytes7 = remaining_bytes5) and ((y7 = y5) and ((x7 = x5) and
  (data14 = data12)))))))))) or ((not (8 <= remaining_bytes1)) and (((i13 = {
  int__content = i }) and ((lane6 = { t__content1 = lane }) and ((offset6 = {
  int__content = offset1 }) and ((remaining_bytes6 = { int__content =
  remaining_bytes1 }) and ((y6 = { t__content = y1 }) and ((x6 = {
  t__content = x1 }) and (data13 = { map__content = data1 }))))))) and
  ((i14 = i1) and ((lane7 = lane1) and ((offset7 = offset1) and
  ((remaining_bytes7 = remaining_bytes1) and ((y7 = y1) and ((x7 = x1) and
  (data14 = data1)))))))))) -> ((0 <  (remaining_bytes6).int__content) ->
  (((result28 = lane6) and (lane8 = to_rep2(get(a, (x6).t__content,
  (y6).t__content)))) -> (((result29 = { int__content = shift }) and
  (shift1 = 0)) -> (in_range2(shift1) -> (((result30 = { int__content =
  initial_offset }) and (initial_offset1 = (offset6).int__content)) ->
  (in_range2(initial_offset1) -> ((0 <  (remaining_bytes6).int__content) ->
  ((((((to_rep(data__first) <= to_rep(data__last)) and
  ((offset8 + remaining_bytes8) = ((to_rep(data__last) - to_rep(data__first)) + 1))) or
  ((not (to_rep(data__first) <= to_rep(data__last))) and
  ((offset8 + remaining_bytes8) = 0))) and (mod(shift2, 8) = 0)) and
  (shift2 = ((offset8 - initial_offset1) * 8))) -> ((((((0 <= 2147483647) ->
  in_range2(shift2)) and ((0 <= 2147483647) ->
  in_range2(remaining_bytes8))) and ((0 <= 2147483647) ->
  in_range2(offset8))) and (0 <  remaining_bytes8)) -> (((result31 = {
  int__content = temp___775 }) and (temp___7751 = offset8)) ->
  (((result32 = { int__content = temp___774 }) and (temp___7741 = shift2)) ->
  (((result33 = { int__content = temp___773 }) and
  (temp___7731 = remaining_bytes8)) ->
  ((to_rep1(o103) = toSmall(bw_and1(lsr_bv1(lane8, of_int1(shift2)),
  of_int1(255)))) ->
  in_range1((to_rep(data__first) + offset8))))))))))))))))))))))))))))
