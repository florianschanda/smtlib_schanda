;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort dt 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (dt dt) Bool)

(declare-const dummy dt)

(declare-datatypes ((dt__ref 0)) (((mk_dt__ref (dt__content dt)))))
(define-fun dt__ref___projection ((a dt__ref)) dt (dt__content a))

(define-fun dynamic_invariant ((temp___expr_138 Int)
  (temp___is_init_135 Bool) (temp___skip_constant_136 Bool)
  (temp___do_toplevel_137 Bool)) Bool (=>
                                      (or (= temp___is_init_135 true)
                                      (<= 0 2)) (in_range1 temp___expr_138)))

(declare-fun to_rep (dt) Int)

(declare-fun of_rep (Int) dt)

;; inversion_axiom
  (assert
  (forall ((x dt)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x dt)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__test__wibble__d dt)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) dt (rec__test__wibble__d
                                                                  a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__test__wibble__flag Bool)(rec__test__wibble__x integer)(rec__test__wibble__y Bool)(rec__test__wibble__z dt)))))
(define-fun us_split_fields_Flag__projection ((a us_split_fields)) Bool
  (rec__test__wibble__flag a))

(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__test__wibble__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) Bool
  (rec__test__wibble__y a))

(define-fun us_split_fields_Z__projection ((a us_split_fields)) dt (rec__test__wibble__z
                                                                   a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun test__wibble__x__pred ((a us_rep)) Bool (= (to_rep
                                                       (rec__test__wibble__d
                                                       (us_split_discrs1 a))) 0))

(define-fun test__wibble__y__pred ((a us_rep)) Bool (= (to_rep
                                                       (rec__test__wibble__d
                                                       (us_split_discrs1 a))) 1))

(define-fun test__wibble__z__pred ((a us_rep)) Bool (= (to_rep
                                                       (rec__test__wibble__d
                                                       (us_split_discrs1 a))) 2))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__test__wibble__d (us_split_discrs1 a)))
                        (to_rep (rec__test__wibble__d (us_split_discrs1 b))))
                        (= (rec__test__wibble__flag (us_split_fields1 a))
                        (rec__test__wibble__flag (us_split_fields1 b))))
                        (=> (test__wibble__x__pred a)
                        (= (to_rep1
                           (rec__test__wibble__x (us_split_fields1 a)))
                        (to_rep1 (rec__test__wibble__x (us_split_fields1 b))))))
                        (=> (test__wibble__y__pred a)
                        (= (rec__test__wibble__y (us_split_fields1 a))
                        (rec__test__wibble__y (us_split_fields1 b)))))
                        (=> (test__wibble__z__pred a)
                        (= (to_rep
                           (rec__test__wibble__z (us_split_fields1 a)))
                        (to_rep (rec__test__wibble__z (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const test__wibble__d__first__bit Int)

(declare-const test__wibble__d__last__bit Int)

(declare-const test__wibble__d__position Int)

;; test__wibble__d__first__bit_axiom
  (assert (<= 0 test__wibble__d__first__bit))

;; test__wibble__d__last__bit_axiom
  (assert (< test__wibble__d__first__bit test__wibble__d__last__bit))

;; test__wibble__d__position_axiom
  (assert (<= 0 test__wibble__d__position))

(declare-const test__wibble__flag__first__bit Int)

(declare-const test__wibble__flag__last__bit Int)

(declare-const test__wibble__flag__position Int)

;; test__wibble__flag__first__bit_axiom
  (assert (<= 0 test__wibble__flag__first__bit))

;; test__wibble__flag__last__bit_axiom
  (assert (< test__wibble__flag__first__bit test__wibble__flag__last__bit))

;; test__wibble__flag__position_axiom
  (assert (<= 0 test__wibble__flag__position))

(declare-const test__wibble__x__first__bit Int)

(declare-const test__wibble__x__last__bit Int)

(declare-const test__wibble__x__position Int)

;; test__wibble__x__first__bit_axiom
  (assert (<= 0 test__wibble__x__first__bit))

;; test__wibble__x__last__bit_axiom
  (assert (< test__wibble__x__first__bit test__wibble__x__last__bit))

;; test__wibble__x__position_axiom
  (assert (<= 0 test__wibble__x__position))

(declare-const test__wibble__y__first__bit Int)

(declare-const test__wibble__y__last__bit Int)

(declare-const test__wibble__y__position Int)

;; test__wibble__y__first__bit_axiom
  (assert (<= 0 test__wibble__y__first__bit))

;; test__wibble__y__last__bit_axiom
  (assert (< test__wibble__y__first__bit test__wibble__y__last__bit))

;; test__wibble__y__position_axiom
  (assert (<= 0 test__wibble__y__position))

(declare-const test__wibble__z__first__bit Int)

(declare-const test__wibble__z__last__bit Int)

(declare-const test__wibble__z__position Int)

;; test__wibble__z__first__bit_axiom
  (assert (<= 0 test__wibble__z__first__bit))

;; test__wibble__z__last__bit_axiom
  (assert (< test__wibble__z__first__bit test__wibble__z__last__bit))

;; test__wibble__z__position_axiom
  (assert (<= 0 test__wibble__z__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((wibble__ref 0))
(((mk_wibble__ref (wibble__content us_rep)))))
(define-fun wibble__ref___projection ((a wibble__ref)) us_rep (wibble__content
                                                              a))

(declare-const r__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range3 ((rec__test__wibble__d1 Int)
  (a us_rep)) Bool (= rec__test__wibble__d1 (to_rep
                                            (rec__test__wibble__d
                                            (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const test__wibble__d__first__bit1 Int)

(declare-const test__wibble__d__last__bit1 Int)

(declare-const test__wibble__d__position1 Int)

;; test__wibble__d__first__bit_axiom
  (assert (<= 0 test__wibble__d__first__bit1))

;; test__wibble__d__last__bit_axiom
  (assert (< test__wibble__d__first__bit1 test__wibble__d__last__bit1))

;; test__wibble__d__position_axiom
  (assert (<= 0 test__wibble__d__position1))

(declare-const test__wibble__x__first__bit1 Int)

(declare-const test__wibble__x__last__bit1 Int)

(declare-const test__wibble__x__position1 Int)

;; test__wibble__x__first__bit_axiom
  (assert (<= 0 test__wibble__x__first__bit1))

;; test__wibble__x__last__bit_axiom
  (assert (< test__wibble__x__first__bit1 test__wibble__x__last__bit1))

;; test__wibble__x__position_axiom
  (assert (<= 0 test__wibble__x__position1))

(declare-const test__wibble__y__first__bit1 Int)

(declare-const test__wibble__y__last__bit1 Int)

(declare-const test__wibble__y__position1 Int)

;; test__wibble__y__first__bit_axiom
  (assert (<= 0 test__wibble__y__first__bit1))

;; test__wibble__y__last__bit_axiom
  (assert (< test__wibble__y__first__bit1 test__wibble__y__last__bit1))

;; test__wibble__y__position_axiom
  (assert (<= 0 test__wibble__y__position1))

(declare-const test__wibble__flag__first__bit1 Int)

(declare-const test__wibble__flag__last__bit1 Int)

(declare-const test__wibble__flag__position1 Int)

;; test__wibble__flag__first__bit_axiom
  (assert (<= 0 test__wibble__flag__first__bit1))

;; test__wibble__flag__last__bit_axiom
  (assert (< test__wibble__flag__first__bit1 test__wibble__flag__last__bit1))

;; test__wibble__flag__position_axiom
  (assert (<= 0 test__wibble__flag__position1))

(declare-const test__wibble__z__first__bit1 Int)

(declare-const test__wibble__z__last__bit1 Int)

(declare-const test__wibble__z__position1 Int)

;; test__wibble__z__first__bit_axiom
  (assert (<= 0 test__wibble__z__first__bit1))

;; test__wibble__z__last__bit_axiom
  (assert (< test__wibble__z__first__bit1 test__wibble__z__last__bit1))

;; test__wibble__z__position_axiom
  (assert (<= 0 test__wibble__z__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((tvS__ref 0)) (((mk_tvS__ref (tvS__content us_rep)))))
(define-fun tvS__ref___2__projection ((a tvS__ref)) us_rep (tvS__content a))

(define-fun dynamic_invariant1 ((temp___expr_161 us_rep)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)) Bool (=>
                                      (not (= temp___skip_constant_159 true))
                                      (in_range3 2 temp___expr_161)))

(define-fun default_initial_assumption ((temp___expr_163 us_rep)
  (temp___skip_top_level_164 Bool)) Bool (= (to_rep
                                            (rec__test__wibble__d
                                            (us_split_discrs1
                                            temp___expr_163))) 2))

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const r16b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(declare-const v__split_fields Bool)

(declare-const v__split_fields1 integer)

(declare-const v__split_fields2 Bool)

(declare-const v__split_fields3 dt)

(declare-const us Int)

(declare-const result Bool)

(declare-const result1 integer)

(declare-const result2 Bool)

(declare-const result3 dt)

(declare-const v__split_fields4 Bool)

(declare-const v__split_fields5 integer)

(declare-const v__split_fields6 Bool)

(declare-const v__split_fields7 dt)

;; H
  (assert (and (= us 2) (in_range1 2)))

;; H
  (assert (= (to_rep (rec__test__wibble__d v__split_discrs)) 2))

;; H
  (assert (= 2 (to_rep (rec__test__wibble__d v__split_discrs))))

;; H
  (assert (= result v__split_fields))

;; H
  (assert (= result1 v__split_fields1))

;; H
  (assert (= result2 v__split_fields2))

;; H
  (assert (= result3 v__split_fields3))

;; H
  (assert (= (of_int 1) v__split_fields4))

;; H
  (assert (= v__split_fields1 v__split_fields5))

;; H
  (assert (= v__split_fields2 v__split_fields6))

;; H
  (assert (= v__split_fields3 v__split_fields7))

(assert
;; WP_parameter_def
 ;; File "test.adb", line 33, characters 0-0
  (not (= (to_rep (rec__test__wibble__d v__split_discrs)) 2)))
(check-sat)
(exit)
