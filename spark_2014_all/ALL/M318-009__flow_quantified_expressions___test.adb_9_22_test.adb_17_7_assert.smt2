;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const table (Array Int integer))

(declare-const i Int)

(declare-const o integer)

(declare-const o1 (Array Int integer))

(declare-const o2 integer)

(declare-const o3 (Array Int integer))

(declare-const o4 integer)

(declare-const o5 (Array Int integer))

(declare-const o6 integer)

(declare-const o7 (Array Int integer))

(declare-const o8 integer)

(declare-const o9 (Array Int integer))

(declare-const o10 integer)

(declare-const o11 (Array Int integer))

(declare-const o12 integer)

(declare-const o13 (Array Int integer))

(declare-const o14 integer)

(declare-const o15 (Array Int integer))

(declare-const o16 integer)

(declare-const o17 (Array Int integer))

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 (Array Int integer))

(declare-const table1 (Array Int integer))

(declare-const result2 Int)

(declare-const i2 Int)

(declare-const result3 (Array Int integer))

(declare-const table2 (Array Int integer))

(declare-const result4 Int)

(declare-const i3 Int)

(declare-const result5 (Array Int integer))

(declare-const table3 (Array Int integer))

(declare-const result6 Int)

(declare-const i4 Int)

(declare-const result7 (Array Int integer))

(declare-const table4 (Array Int integer))

(declare-const result8 Int)

(declare-const i5 Int)

(declare-const result9 (Array Int integer))

(declare-const table5 (Array Int integer))

(declare-const result10 Int)

(declare-const i6 Int)

(declare-const result11 (Array Int integer))

(declare-const table6 (Array Int integer))

(declare-const result12 Int)

(declare-const i7 Int)

(declare-const result13 (Array Int integer))

(declare-const table7 (Array Int integer))

(declare-const result14 Int)

(declare-const i8 Int)

(declare-const result15 (Array Int integer))

(declare-const table8 (Array Int integer))

(declare-const result16 Int)

(declare-const i9 Int)

(declare-const result17 map__ref)

(declare-const table9 (Array Int integer))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 9))

;; H
  (assert (= (to_rep o) i1))

;; H
  (assert (= o1 (store table (- 10 i1) o)))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref table)))

;; H
  (assert (= table1 o1))

;; H
  (assert (= i1 result2))

;; H
  (assert (= i2 8))

;; H
  (assert (= (to_rep o2) i2))

;; H
  (assert (= o3 (store table1 (- 10 i2) o2)))

;; H
  (assert (= table1 result3))

;; H
  (assert (= table2 o3))

;; H
  (assert (= i2 result4))

;; H
  (assert (= i3 7))

;; H
  (assert (= (to_rep o4) i3))

;; H
  (assert (= o5 (store table2 (- 10 i3) o4)))

;; H
  (assert (= table2 result5))

;; H
  (assert (= table3 o5))

;; H
  (assert (= i3 result6))

;; H
  (assert (= i4 6))

;; H
  (assert (= (to_rep o6) i4))

;; H
  (assert (= o7 (store table3 (- 10 i4) o6)))

;; H
  (assert (= table3 result7))

;; H
  (assert (= table4 o7))

;; H
  (assert (= i4 result8))

;; H
  (assert (= i5 5))

;; H
  (assert (= (to_rep o8) i5))

;; H
  (assert (= o9 (store table4 (- 10 i5) o8)))

;; H
  (assert (= table4 result9))

;; H
  (assert (= table5 o9))

;; H
  (assert (= i5 result10))

;; H
  (assert (= i6 4))

;; H
  (assert (= (to_rep o10) i6))

;; H
  (assert (= o11 (store table5 (- 10 i6) o10)))

;; H
  (assert (= table5 result11))

;; H
  (assert (= table6 o11))

;; H
  (assert (= i6 result12))

;; H
  (assert (= i7 3))

;; H
  (assert (= (to_rep o12) i7))

;; H
  (assert (= o13 (store table6 (- 10 i7) o12)))

;; H
  (assert (= table6 result13))

;; H
  (assert (= table7 o13))

;; H
  (assert (= i7 result14))

;; H
  (assert (= i8 2))

;; H
  (assert (= (to_rep o14) i8))

;; H
  (assert (= o15 (store table7 (- 10 i8) o14)))

;; H
  (assert (= table7 result15))

;; H
  (assert (= table8 o15))

;; H
  (assert (= i8 result16))

;; H
  (assert (= i9 1))

;; H
  (assert (= (to_rep o16) i9))

;; H
  (assert (= o17 (store table8 (- 10 i9) o16)))

;; H
  (assert (= result17 (mk_map__ref table8)))

;; H
  (assert (= table9 o17))

(assert
;; WP_parameter_def
 ;; File "test.adb", line 2, characters 0-0
  (not
  (exists ((x Int))
  (and (and (<= 1 x) (<= x 9)) (= x (to_rep (select table9 x)))))))
(check-sat)
(exit)
