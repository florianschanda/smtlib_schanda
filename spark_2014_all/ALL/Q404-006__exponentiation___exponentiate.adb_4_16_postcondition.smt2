;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort unsigned_32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)

(declare-const dummy1 unsigned_32)

(declare-datatypes ()
((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32
  (unsigned_32__content a))

(define-fun dynamic_invariant1 ((temp___expr_177 (_ BitVec 32))
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool true)

(declare-const val__ (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const exp Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort titerS 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (titerS titerS) Bool)

(declare-const dummy2 titerS)

(declare-datatypes ()
((titerS__ref (mk_titerS__ref (titerS__content titerS)))))
(define-fun titerS__ref___projection ((a titerS__ref)) titerS (titerS__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_201 Int)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=>
                                      (or (= temp___is_init_198 true)
                                      (<= 0 31)) (in_range2 temp___expr_201)))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun pow21 (Int) (_ BitVec 32))

(declare-fun pow2__function_guard ((_ BitVec 32) Int) Bool)

;; pow2__post_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true) (dynamic_invariant1 (pow21 i)
     true false true)) :pattern ((pow21 i)) )))

;; pow2__def_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true)
     (= (pow21 i) (ite (< i 4294967296)
                  (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) i))
                  ((_ int2bv 32) 0)))) :pattern ((pow21 i)) )))

(declare-const cur_exp (_ BitVec 32))

(declare-const cur_val (_ BitVec 32))

(declare-const result__ (_ BitVec 32))

(declare-const iter Int)

(declare-const exponentiate__result (_ BitVec 32))

(declare-const temp___207 (_ BitVec 32))

(declare-const temp___208 (_ BitVec 32))

(declare-const temp___206 (_ BitVec 32))

(declare-const temp___205 (_ BitVec 32))

(declare-const temp___204 Int)

(declare-const o Int)

(declare-const exponentiate__result1 (_ BitVec 32))

(declare-const result (_ BitVec 32))

(declare-const cur_exp1 (_ BitVec 32))

(declare-const result1 (_ BitVec 32))

(declare-const cur_val1 (_ BitVec 32))

(declare-const result2 (_ BitVec 32))

(declare-const result__1 (_ BitVec 32))

(declare-const result3 Int)

(declare-const iter1 Int)

(declare-const result4 (_ BitVec 32))

(declare-const exponentiate__result2 (_ BitVec 32))

(declare-const cur_exp2 (_ BitVec 32))

(declare-const cur_val2 (_ BitVec 32))

(declare-const result__2 (_ BitVec 32))

(declare-const iter2 Int)

(declare-const result5 (_ BitVec 32))

(declare-const result__3 (_ BitVec 32))

(declare-const result6 (_ BitVec 32))

(declare-const cur_exp3 (_ BitVec 32))

(declare-const result7 (_ BitVec 32))

(declare-const cur_val3 (_ BitVec 32))

(declare-const result8 Int)

(declare-const iter3 Int)

(declare-const cur_exp4 (_ BitVec 32))

(declare-const cur_val4 (_ BitVec 32))

(declare-const result__4 (_ BitVec 32))

(declare-const iter4 int__ref)

(declare-const cur_exp5 (_ BitVec 32))

(declare-const cur_val5 (_ BitVec 32))

(declare-const result__5 (_ BitVec 32))

(declare-const iter5 Int)

(declare-const cur_exp6 t__ref)

(declare-const cur_val6 t__ref)

(declare-const result__6 t__ref)

(declare-const iter6 int__ref)

(declare-const cur_exp7 (_ BitVec 32))

(declare-const cur_val7 (_ BitVec 32))

(declare-const result__7 (_ BitVec 32))

(declare-const iter7 Int)

(declare-const result9 t__ref)

(declare-const exponentiate__result3 (_ BitVec 32))

(declare-const exponentiate__result4 t__ref)

(declare-const exponentiate__result5 (_ BitVec 32))

(declare-const cur_exp8 t__ref)

(declare-const cur_val8 t__ref)

(declare-const result__8 t__ref)

(declare-const iter8 int__ref)

(declare-const exponentiate__result6 t__ref)

(declare-const cur_exp9 (_ BitVec 32))

(declare-const cur_val9 (_ BitVec 32))

(declare-const result__9 (_ BitVec 32))

(declare-const iter9 Int)

(declare-const exponentiate__result7 (_ BitVec 32))

(declare-const cur_exp10 t__ref)

(declare-const cur_val10 t__ref)

(declare-const result__10 t__ref)

(declare-const iter10 int__ref)

(declare-const exponentiate__result8 t__ref)

(declare-const cur_exp11 (_ BitVec 32))

(declare-const cur_val11 (_ BitVec 32))

(declare-const result__11 (_ BitVec 32))

(declare-const iter11 Int)

(declare-const exponentiate__result9 (_ BitVec 32))

(declare-const result10 (_ BitVec 32))

;; H
  (assert (in_range1 exp))

;; H
  (assert (= (mk_t__ref result) (mk_t__ref cur_exp)))

;; H
  (assert (= cur_exp1 ((_ int2bv 32) exp)))

;; H
  (assert (= (mk_t__ref result1) (mk_t__ref cur_val)))

;; H
  (assert (= cur_val1 val__))

;; H
  (assert (= (mk_t__ref result2) (mk_t__ref result__)))

;; H
  (assert (= result__1 ((_ int2bv 32) 1)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref iter)))

;; H
  (assert (= iter1 0))

;; H
  (assert (in_range2 iter1))

;; H
  (assert
  (or
  (and
  (and
  (and (= exponentiate__result6 (mk_t__ref exponentiate__result2))
  (and (= iter8 (mk_int__ref iter1))
  (and (= result__8 (mk_t__ref result__1))
  (and (= cur_val8 (mk_t__ref cur_val1)) (= cur_exp8 (mk_t__ref cur_exp1))))))
  (and (= exponentiate__result7 exponentiate__result2)
  (and (= iter9 iter1)
  (and (= result__9 result__1)
  (and (= cur_val9 cur_val1) (= cur_exp9 cur_exp1))))))
  (and (= exp 0)
  (and (= result4 exponentiate__result)
  (= exponentiate__result2 ((_ int2bv 32) 1)))))
  (and
  (and (not (= exp 0))
  (and (= exponentiate__result2 exponentiate__result)
  (= exponentiate__result2 exponentiate__result1)))
  (and
  (and
  (and (= exponentiate__result6 exponentiate__result4)
  (and (= iter8 iter6)
  (and (= result__8 result__6)
  (and (= cur_val8 cur_val6) (= cur_exp8 cur_exp6)))))
  (and (= exponentiate__result7 exponentiate__result5)
  (and (= iter9 iter7)
  (and (= result__9 result__7)
  (and (= cur_val9 cur_val7) (= cur_exp9 cur_exp7))))))
  (and
  (ite (not (= cur_exp1 ((_ int2bv 32) 0)))
  (and
  (and
  (and (= temp___207 result__1)
  (and (= temp___208 cur_exp1)
  (and (= temp___206 cur_val1)
  (and (= temp___205 cur_exp1)
  (and (= temp___204 iter1)
  (and
  (and
  (= result__2 (power val__
               (bv2nat (bvurem ((_ int2bv 32) exp) (pow21 iter2)))))
  (and (= cur_val2 (power val__ (bv2nat (pow21 iter2))))
  (= cur_exp2 (bvudiv temp___208 (pow21 iter2)))))
  (and
  (and (=> (<= 0 31) (in_range2 iter2)) (not (= cur_exp2 ((_ int2bv 32) 0))))
  (and
  (ite (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1))
  (and (= result__2 result5) (= result__3 (bvmul result__2 cur_val2)))
  (= result__3 result__2))
  (and
  (and (= cur_exp2 result6) (= cur_exp3 (bvudiv cur_exp2 ((_ int2bv 32) 2))))
  (and (and (= cur_val2 result7) (= cur_val3 (bvmul cur_val2 cur_val2)))
  (and
  (and (and (= o (+ iter2 1)) (in_range2 (+ iter2 1)))
  (and (= iter2 result8) (= iter3 o))) (= cur_exp3 ((_ int2bv 32) 0)))))))))))))
  (and
  (and (= iter4 (mk_int__ref iter3))
  (and (= result__3 result__4)
  (and (= cur_val3 cur_val4) (= cur_exp3 cur_exp4))))
  (and (= iter5 iter3)
  (and (= result__5 result__3)
  (and (= cur_val5 cur_val3) (= cur_exp5 cur_exp3))))))
  (and
  (and (= iter6 iter4)
  (and (= result__6 (mk_t__ref result__4))
  (and (= cur_val6 (mk_t__ref cur_val4)) (= cur_exp6 (mk_t__ref cur_exp4)))))
  (and (= iter7 iter5)
  (and (= result__7 result__5)
  (and (= cur_val7 cur_val5) (= cur_exp7 cur_exp5))))))
  (and
  (and (= iter6 (mk_int__ref iter1))
  (and (= result__6 (mk_t__ref result__1))
  (and (= cur_val6 (mk_t__ref cur_val1)) (= cur_exp6 (mk_t__ref cur_exp1)))))
  (and (= iter7 iter1)
  (and (= result__7 result__1)
  (and (= cur_val7 cur_val1) (= cur_exp7 cur_exp1))))))
  (and
  (and (= exponentiate__result4 (mk_t__ref exponentiate__result3))
  (= exponentiate__result5 exponentiate__result3))
  (and (= result9 (mk_t__ref exponentiate__result2))
  (= exponentiate__result3 (t__content result__6)))))))))

;; H
  (assert (= exponentiate__result8 exponentiate__result6))

;; H
  (assert (= iter10 iter8))

;; H
  (assert (= result__10 result__8))

;; H
  (assert (= cur_val10 cur_val8))

;; H
  (assert (= cur_exp10 cur_exp8))

;; H
  (assert (= exponentiate__result9 exponentiate__result7))

;; H
  (assert (= iter11 iter9))

;; H
  (assert (= result__11 result__9))

;; H
  (assert (= cur_val11 cur_val9))

;; H
  (assert (= cur_exp11 cur_exp9))

;; H
  (assert (= result10 (t__content exponentiate__result8)))

(assert
;; WP_parameter_def
 ;; File "interfac.ads", line 74, characters 0-0
  (not (= (t__content exponentiate__result8) (power val__ exp))))
(check-sat)
(exit)
