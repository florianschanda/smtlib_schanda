;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__foo__r__x integer)(rec__foo__r__y integer)(rec__foo__r__z integer)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__foo__r__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer
  (rec__foo__r__y a))

(define-fun us_split_fields_Z__projection ((a us_split_fields)) integer
  (rec__foo__r__z a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep (rec__foo__r__x (us_split_fields1 a)))
                        (to_rep (rec__foo__r__x (us_split_fields1 b))))
                        (= (to_rep (rec__foo__r__y (us_split_fields1 a)))
                        (to_rep (rec__foo__r__y (us_split_fields1 b)))))
                        (= (to_rep (rec__foo__r__z (us_split_fields1 a)))
                        (to_rep (rec__foo__r__z (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const foo__r__x__first__bit Int)

(declare-const foo__r__x__last__bit Int)

(declare-const foo__r__x__position Int)

;; foo__r__x__first__bit_axiom
  (assert (<= 0 foo__r__x__first__bit))

;; foo__r__x__last__bit_axiom
  (assert (< foo__r__x__first__bit foo__r__x__last__bit))

;; foo__r__x__position_axiom
  (assert (<= 0 foo__r__x__position))

(declare-const foo__r__y__first__bit Int)

(declare-const foo__r__y__last__bit Int)

(declare-const foo__r__y__position Int)

;; foo__r__y__first__bit_axiom
  (assert (<= 0 foo__r__y__first__bit))

;; foo__r__y__last__bit_axiom
  (assert (< foo__r__y__first__bit foo__r__y__last__bit))

;; foo__r__y__position_axiom
  (assert (<= 0 foo__r__y__position))

(declare-const foo__r__z__first__bit Int)

(declare-const foo__r__z__last__bit Int)

(declare-const foo__r__z__position Int)

;; foo__r__z__first__bit_axiom
  (assert (<= 0 foo__r__z__first__bit))

;; foo__r__z__last__bit_axiom
  (assert (< foo__r__z__first__bit foo__r__z__last__bit))

;; foo__r__z__position_axiom
  (assert (<= 0 foo__r__z__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((r__ref 0)) (((mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__foo__t__f us_rep)(rec__foo__t__g us_rep)))))
(define-fun us_split_fields_F__projection ((a us_split_fields2)) us_rep
  (rec__foo__t__f a))

(define-fun us_split_fields_G__projection ((a us_split_fields2)) us_rep
  (rec__foo__t__g a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq (rec__foo__t__f (us_split_fields3 a))
                            (rec__foo__t__f (us_split_fields3 b))) true)
                         (= (bool_eq (rec__foo__t__g (us_split_fields3 a))
                            (rec__foo__t__g (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const foo__t__f__first__bit Int)

(declare-const foo__t__f__last__bit Int)

(declare-const foo__t__f__position Int)

;; foo__t__f__first__bit_axiom
  (assert (<= 0 foo__t__f__first__bit))

;; foo__t__f__last__bit_axiom
  (assert (< foo__t__f__first__bit foo__t__f__last__bit))

;; foo__t__f__position_axiom
  (assert (<= 0 foo__t__f__position))

(declare-const foo__t__g__first__bit Int)

(declare-const foo__t__g__last__bit Int)

(declare-const foo__t__g__position Int)

;; foo__t__g__first__bit_axiom
  (assert (<= 0 foo__t__g__first__bit))

;; foo__t__g__last__bit_axiom
  (assert (< foo__t__g__first__bit foo__t__g__last__bit))

;; foo__t__g__position_axiom
  (assert (<= 0 foo__t__g__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const o Int)

(declare-const tmp__split_fields integer)

(declare-const tmp__split_fields1 integer)

(declare-const tmp__split_fields2 integer)

(declare-const tmp__split_fields3 integer)

(declare-const tmp__split_fields4 integer)

(declare-const tmp__split_fields5 integer)

(declare-const o1 integer)

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const o4 integer)

(declare-const o5 integer)

(declare-const o6 integer)

(declare-const o7 integer)

(declare-const o8 integer)

(declare-const o9 integer)

(declare-const o10 integer)

(declare-const o11 integer)

(declare-const o12 integer)

(declare-const o13 integer)

(declare-const temp___215 integer)

(declare-const temp___2151 integer)

(declare-const temp___2152 integer)

(declare-const temp___2153 integer)

(declare-const temp___2154 integer)

(declare-const temp___2155 integer)

(declare-const result us_split_fields__ref1)

(declare-const tmp__split_fields6 us_split_fields2)

;; H
  (assert (in_range a))

;; H
  (assert (in_range b))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range o)))

;; H
  (assert (= (to_rep o1) a))

;; H
  (assert (= o1 o2))

;; H
  (assert (= tmp__split_fields1 o3))

;; H
  (assert (= tmp__split_fields2 o4))

;; H
  (assert (= o5 o2))

;; H
  (assert (= o6 o3))

;; H
  (assert (= o7 o4))

;; H
  (assert (= o8 o5))

;; H
  (assert (= o9 o6))

;; H
  (assert (= o10 o7))

;; H
  (assert (= tmp__split_fields3 o11))

;; H
  (assert (= tmp__split_fields4 o12))

;; H
  (assert (= tmp__split_fields5 o13))

;; H
  (assert (= temp___215 o8))

;; H
  (assert (= temp___2151 o9))

;; H
  (assert (= temp___2152 o10))

;; H
  (assert (= temp___2153 o11))

;; H
  (assert (= temp___2154 o12))

;; H
  (assert (= temp___2155 o13))

;; H
  (assert
  (= result (mk___split_fields__ref1
            (mk___split_fields1
            (mk___rep
            (mk___split_fields tmp__split_fields tmp__split_fields1
            tmp__split_fields2))
            (mk___rep
            (mk___split_fields tmp__split_fields3 tmp__split_fields4
            tmp__split_fields5))))))

;; H
  (assert
  (= tmp__split_fields6 (mk___split_fields1
                        (mk___rep
                        (mk___split_fields temp___215 temp___2151
                        temp___2152))
                        (mk___rep
                        (mk___split_fields temp___2153 temp___2154
                        temp___2155)))))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 52, characters 0-0
  (not (in_range
  (+ a (to_rep
       (rec__foo__r__x
       (us_split_fields1 (rec__foo__t__f tmp__split_fields6))))))))
(check-sat)
(exit)
