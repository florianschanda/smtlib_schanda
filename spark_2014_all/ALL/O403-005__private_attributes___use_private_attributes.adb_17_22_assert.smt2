;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__private_with_attributes__private_unconstrained__c natural)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs)) natural
  (rec__private_with_attributes__private_unconstrained__c a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__private_with_attributes__private_unconstrained us_main_type)))))
(define-fun us_split_fields_Private_Unconstrained__projection ((a us_split_fields)) us_main_type
  (rec__private_with_attributes__private_unconstrained a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep_12__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_13__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                               a))

(define-fun us_rep_14__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__private_with_attributes__private_unconstrained__c
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__private_with_attributes__private_unconstrained__c
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__private_with_attributes__private_unconstrained
                           (us_split_fields1 a))
                           (rec__private_with_attributes__private_unconstrained
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun private_with_attributes__private_unconstrained__c__first__bit () Int)

(declare-fun private_with_attributes__private_unconstrained__c__last__bit () Int)

(declare-fun private_with_attributes__private_unconstrained__c__position () Int)

;; private_with_attributes__private_unconstrained__c__first__bit_axiom
  (assert
  (<= 0 private_with_attributes__private_unconstrained__c__first__bit))

;; private_with_attributes__private_unconstrained__c__last__bit_axiom
  (assert
  (< private_with_attributes__private_unconstrained__c__first__bit private_with_attributes__private_unconstrained__c__last__bit))

;; private_with_attributes__private_unconstrained__c__position_axiom
  (assert (<= 0 private_with_attributes__private_unconstrained__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes ()
((private_unconstrained__ref
 (mk_private_unconstrained__ref (private_unconstrained__content us_rep)))))
(define-fun private_unconstrained__ref___projection ((a private_unconstrained__ref)) us_rep
  (private_unconstrained__content a))

(define-fun default_initial_assumption ((temp___expr_172 us_rep)
  (temp___skip_top_level_173 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_172) false)
                                         (= (to_rep
                                            (rec__private_with_attributes__private_unconstrained__c
                                            (us_split_discrs1
                                            temp___expr_172))) 0)))

(define-fun in_range1 ((rec__private_with_attributes__private_unconstrained__c1 Int)
  (a us_rep)) Bool (= rec__private_with_attributes__private_unconstrained__c1
  (to_rep
  (rec__private_with_attributes__private_unconstrained__c
  (us_split_discrs1 a)))))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun private_with_attributes__private_unconstrained__c__first__bit1 () Int)

(declare-fun private_with_attributes__private_unconstrained__c__last__bit1 () Int)

(declare-fun private_with_attributes__private_unconstrained__c__position1 () Int)

;; private_with_attributes__private_unconstrained__c__first__bit_axiom
  (assert
  (<= 0 private_with_attributes__private_unconstrained__c__first__bit1))

;; private_with_attributes__private_unconstrained__c__last__bit_axiom
  (assert
  (< private_with_attributes__private_unconstrained__c__first__bit1 private_with_attributes__private_unconstrained__c__last__bit1))

;; private_with_attributes__private_unconstrained__c__position_axiom
  (assert
  (<= 0 private_with_attributes__private_unconstrained__c__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((private_constrained__ref
 (mk_private_constrained__ref (private_constrained__content us_rep)))))
(define-fun private_constrained__ref___projection ((a private_constrained__ref)) us_rep
  (private_constrained__content a))

(define-fun dynamic_invariant1 ((temp___expr_178 us_rep)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_176 true))
                                      (in_range1 0 temp___expr_178))
                                      (= (attr__constrained temp___expr_178) true)))

(define-fun default_initial_assumption1 ((temp___expr_180 us_rep)
  (temp___skip_top_level_181 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_180) true)
                                         (= (to_rep
                                            (rec__private_with_attributes__private_unconstrained__c
                                            (us_split_discrs1
                                            temp___expr_180))) 0)))

(declare-fun u__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun u1__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range2 ((rec__private_with_attributes__private_unconstrained__c1 Int)
  (a us_rep)) Bool (= rec__private_with_attributes__private_unconstrained__c1
  (to_rep
  (rec__private_with_attributes__private_unconstrained__c
  (us_split_discrs1 a)))))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun private_with_attributes__private_unconstrained__c__first__bit2 () Int)

(declare-fun private_with_attributes__private_unconstrained__c__last__bit2 () Int)

(declare-fun private_with_attributes__private_unconstrained__c__position2 () Int)

;; private_with_attributes__private_unconstrained__c__first__bit_axiom
  (assert
  (<= 0 private_with_attributes__private_unconstrained__c__first__bit2))

;; private_with_attributes__private_unconstrained__c__last__bit_axiom
  (assert
  (< private_with_attributes__private_unconstrained__c__first__bit2 private_with_attributes__private_unconstrained__c__last__bit2))

;; private_with_attributes__private_unconstrained__c__position_axiom
  (assert
  (<= 0 private_with_attributes__private_unconstrained__c__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((tu2S__ref (mk_tu2S__ref (tu2S__content us_rep)))))
(define-fun tu2S__ref___projection ((a tu2S__ref)) us_rep (tu2S__content a))

(define-fun dynamic_invariant2 ((temp___expr_256 us_rep)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_254 true))
                                      (in_range2 0 temp___expr_256))
                                      (= (attr__constrained temp___expr_256) true)))

(define-fun default_initial_assumption2 ((temp___expr_258 us_rep)
  (temp___skip_top_level_259 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_258) true)
                                         (= (to_rep
                                            (rec__private_with_attributes__private_unconstrained__c
                                            (us_split_discrs1
                                            temp___expr_258))) 0)))

(declare-fun u2__split_discrs () us_split_discrs)

(declare-fun u2__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun c__split_discrs () us_split_discrs)

(declare-fun c__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun r2b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun u__split_fields () us_main_type)

(declare-fun u__split_discrs () natural)

(declare-fun u1__split_fields () us_main_type)

(declare-fun u1__split_discrs () natural)

(declare-fun u2__split_fields () us_main_type)

(declare-fun c__split_fields () us_main_type)

(declare-fun us () Int)

(declare-fun usq_ () natural)

(declare-fun usq_1 () us_main_type)

(declare-fun usq_2 () Bool)

(declare-fun temp___272 () natural)

(declare-fun temp___2721 () us_main_type)

(declare-fun temp___2722 () Bool)

(declare-fun result () us_main_type)

(declare-fun u1__split_fields1 () us_main_type)

(declare-fun result1 () us_split_discrs__ref)

(declare-fun u1__split_discrs1 () us_split_discrs)

(declare-fun result2 () us_split_fields__ref)

(declare-fun u2__split_fields1 () us_split_fields)

(declare-fun result3 () us_split_fields__ref)

(declare-fun c__split_fields1 () us_split_fields)

(define-fun u1__split_fields2 () us_split_fields (mk___split_fields
                                                 u1__split_fields1))

;; H
  (assert (= u__attr__constrained true))

;; H
  (assert
  (and (= u1__attr__constrained false) (= (to_rep u1__split_discrs) 0)))

;; H
  (assert (and (= us 0) (in_range 0)))

;; H
  (assert
  (and (= u2__attr__constrained true)
  (= (to_rep
     (rec__private_with_attributes__private_unconstrained__c
     u2__split_discrs)) 0)))

;; H
  (assert
  (and
  (= 0 (to_rep
       (rec__private_with_attributes__private_unconstrained__c
       u2__split_discrs)))
  (= u2__attr__constrained true)))

;; H
  (assert
  (and (= c__attr__constrained true)
  (= (to_rep
     (rec__private_with_attributes__private_unconstrained__c c__split_discrs)) 0)))

;; H
  (assert
  (and
  (= 0 (to_rep
       (rec__private_with_attributes__private_unconstrained__c
       c__split_discrs)))
  (= c__attr__constrained true)))

;; H
  (assert (= u__attr__constrained true))

;; H
  (assert (not (= u1__attr__constrained true)))

;; H
  (assert (= u2__attr__constrained true))

;; H
  (assert (= c__attr__constrained true))

;; H
  (assert (= (to_rep u__split_discrs) r2b))

;; H
  (assert (in_range r2b))

;; H
  (assert
  (=> (= u1__attr__constrained true) (= u__split_discrs u1__split_discrs)))

;; H
  (assert (= u__split_discrs usq_))

;; H
  (assert (= u__split_fields usq_1))

;; H
  (assert (= u__attr__constrained usq_2))

;; H
  (assert (= usq_ temp___272))

;; H
  (assert (= usq_1 temp___2721))

;; H
  (assert (= u1__attr__constrained temp___2722))

;; H
  (assert (= result u1__split_fields))

;; H
  (assert (= temp___2721 u1__split_fields1))

;; H
  (assert
  (= result1 (mk___split_discrs__ref (mk___split_discrs u1__split_discrs))))

;; H
  (assert (= u1__split_discrs1 (mk___split_discrs temp___272)))

;; H
  (assert
  (= result2 (mk___split_fields__ref (mk___split_fields u2__split_fields))))

;; H
  (assert (= u2__split_fields1 u1__split_fields2))

;; H
  (assert (= u2__split_discrs u1__split_discrs1))

;; H
  (assert
  (= result3 (mk___split_fields__ref (mk___split_fields c__split_fields))))

;; H
  (assert (= c__split_fields1 u1__split_fields2))

;; H
  (assert (= c__split_discrs u1__split_discrs1))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (not (= u1__attr__constrained true))))
(check-sat)
(exit)
