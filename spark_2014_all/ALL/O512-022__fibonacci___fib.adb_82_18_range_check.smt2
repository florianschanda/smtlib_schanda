;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun factorial (Int) Int)

(declare-fun factorial__function_guard (Int Int) Bool)

;; factorial__post_axiom
  (assert
  (forall ((n Int))
  (! (=> (and (dynamic_invariant n true true true) (<= n 7))
     (dynamic_invariant (factorial n) true false true)) :pattern ((factorial
                                                                  n)) )))

(declare-const n1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const n2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((t5b__ref 0)) (((mk_t5b__ref (t5b__content integer)))))
(define-fun t5b__ref___projection ((a t5b__ref)) integer (t5b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((t6b__ref 0)) (((mk_t6b__ref (t6b__content integer)))))
(define-fun t6b__ref___projection ((a t6b__ref)) integer (t6b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const p1 Int)

(declare-const p2 Int)

(declare-const i Int)

(declare-const i1 Int)

(declare-const temp___176 Int)

(declare-const temp___175 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const result Int)

(declare-const p11 Int)

(declare-const result1 Int)

(declare-const i2 Int)

(declare-const p12 Int)

(declare-const i3 Int)

(declare-const result2 Int)

(declare-const p13 Int)

(declare-const p14 Int)

(declare-const i4 Int)

(declare-const p15 Int)

(declare-const i5 Int)

(declare-const p16 Int)

(declare-const i6 Int)

(declare-const p17 Int)

(declare-const i7 Int)

(declare-const result3 Int)

(declare-const p21 Int)

(declare-const result4 Int)

(declare-const i8 Int)

(declare-const p22 Int)

(declare-const i9 Int)

;; H
  (assert (in_range2 n1))

;; H
  (assert (in_range2 n2))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 p1)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 p2)))

;; H
  (assert (and (= n1 n2) (<= n1 7)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref p1)))

;; H
  (assert (= p11 1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i2 2))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= temp___176 i2)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= temp___175 p11)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= p12 (factorial (- i3 1)))))

;; H
  (assert
  (=> (and (<= 2 i2) (<= i2 n1))
  (and
  (and (=> (<= 0 2147483647) (in_range2 p12))
  (=> (<= 2 n1) (dynamic_property 2 n1 i3))) (and (<= 2 i3) (<= i3 n1)))))

;; H
  (assert
  (=> (and (<= 2 i2) (<= i2 n1))
  (and (= o (* i3 p12)) (in_range1 (* i3 p12)))))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (and (= o1 o) (in_range2 o))))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= p12 result2)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= p13 o1)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= i3 n1)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= i3 i4)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= p13 p14)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= i5 i3)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= p15 p13)))

;; H
  (assert
  (=> (and (<= 2 i2) (<= i2 n1)) (= (mk_int__ref i6) (mk_int__ref i4))))

;; H
  (assert
  (=> (and (<= 2 i2) (<= i2 n1)) (= (mk_int__ref p16) (mk_int__ref p14))))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= i7 i5)))

;; H
  (assert (=> (and (<= 2 i2) (<= i2 n1)) (= p17 p15)))

;; H
  (assert (=> (not (and (<= 2 i2) (<= i2 n1))) (= i2 i6)))

;; H
  (assert (=> (not (and (<= 2 i2) (<= i2 n1))) (= p11 p16)))

;; H
  (assert (=> (not (and (<= 2 i2) (<= i2 n1))) (= i7 i2)))

;; H
  (assert (=> (not (and (<= 2 i2) (<= i2 n1))) (= p17 p11)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref p2)))

;; H
  (assert (= p21 1))

;; H
  (assert (= (mk_int__ref result4) (mk_int__ref i1)))

;; H
  (assert (= i8 2))

;; H
  (assert (<= 2 i8))

;; H
  (assert (<= i8 n2))

;; H
  (assert (= p22 (factorial (- i9 1))))

;; H
  (assert
  (and
  (and (=> (<= 2 n2) (dynamic_property1 2 n2 i9))
  (=> (<= 0 2147483647) (in_range2 p22))) (and (<= 2 i9) (<= i9 n2))))

;; H
  (assert (and (= o2 (* i9 p22)) (in_range1 (* i9 p22))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range2 o2)))
(check-sat)
(exit)
