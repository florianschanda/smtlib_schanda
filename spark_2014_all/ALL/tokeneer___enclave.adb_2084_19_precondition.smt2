;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort privileget 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (privileget privileget) Bool)

(declare-const dummy privileget)

(declare-datatypes ()
((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget
  (privileget__content a))

(declare-fun to_rep (privileget) Int)

(declare-fun of_rep (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort opandnullt 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (opandnullt opandnullt) Bool)

(declare-const dummy1 opandnullt)

(declare-datatypes ()
((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt
  (opandnullt__content a))

(declare-fun to_rep1 (opandnullt) Int)

(declare-fun of_rep1 (Int) opandnullt)

;; inversion_axiom
  (assert
  (forall ((x opandnullt))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x opandnullt)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__admin__t__rolepresent privileget)(rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget
  (rec__admin__t__rolepresent a))

(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt
  (rec__admin__t__currentop a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__admin__t__rolepresent (us_split_fields1 a)))
                        (to_rep
                        (rec__admin__t__rolepresent (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__admin__t__currentop (us_split_fields1 a)))
                        (to_rep1
                        (rec__admin__t__currentop (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const admin__t__rolepresent__first__bit Int)

(declare-const admin__t__rolepresent__last__bit Int)

(declare-const admin__t__rolepresent__position Int)

;; admin__t__rolepresent__first__bit_axiom
  (assert (<= 0 admin__t__rolepresent__first__bit))

;; admin__t__rolepresent__last__bit_axiom
  (assert
  (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))

;; admin__t__rolepresent__position_axiom
  (assert (<= 0 admin__t__rolepresent__position))

(declare-const admin__t__currentop__first__bit Int)

(declare-const admin__t__currentop__last__bit Int)

(declare-const admin__t__currentop__position Int)

;; admin__t__currentop__first__bit_axiom
  (assert (<= 0 admin__t__currentop__first__bit))

;; admin__t__currentop__last__bit_axiom
  (assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))

;; admin__t__currentop__position_axiom
  (assert (<= 0 admin__t__currentop__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun rolepresent (us_rep) Int)

(declare-fun rolepresent__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 3)) (in_range1 temp___expr_179)))

;; rolepresent__post_axiom
  (assert
  (forall ((theadmin us_rep)) (! (dynamic_invariant (rolepresent theadmin)
  true false true) :pattern ((rolepresent theadmin)) )))

(declare-fun isdoingop (us_rep) Bool)

(declare-fun isdoingop__function_guard (Bool us_rep) Bool)

;; isdoingop__post_axiom
  (assert true)

(declare-fun thecurrentop (us_rep) Int)

(declare-fun thecurrentop__function_guard (Int us_rep) Bool)

(declare-sort opt 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (opt opt) Bool)

(declare-const dummy3 opt)

(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(define-fun dynamic_invariant1 ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= 1 4)) (in_range3 temp___expr_267)))

;; thecurrentop__post_axiom
  (assert
  (forall ((theadmin us_rep))
  (! (=> (= (isdoingop theadmin) true) (dynamic_invariant1
     (thecurrentop theadmin) true false true)) :pattern ((thecurrentop
                                                         theadmin)) )))

(declare-fun ispresent (us_rep) Bool)

(declare-fun ispresent__function_guard (Bool us_rep) Bool)

;; ispresent__post_axiom
  (assert true)

(declare-fun theauthcertrole (us_private) Int)

(declare-fun theauthcertrole__function_guard (Int us_private) Bool)

;; theauthcertrole__post_axiom
  (assert
  (forall ((admintoken__state us_private)) (! (dynamic_invariant
  (theauthcertrole admintoken__state) true false
  true) :pattern ((theauthcertrole admintoken__state)) )))

(declare-fun isgood (us_private) Bool)

(declare-fun isgood__function_guard (Bool us_private) Bool)

;; isgood__post_axiom
  (assert true)

(declare-fun authcertvalid (us_private) Bool)

(declare-fun authcertvalid__function_guard (Bool us_private) Bool)

;; authcertvalid__post_axiom
  (assert true)

(declare-sort statust 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (statust statust) Bool)

(declare-const dummy4 statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___2__projection ((a statust__ref)) statust (statust__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_1792 Int)
  (temp___is_init_1789 Bool) (temp___skip_constant_1790 Bool)
  (temp___do_toplevel_1791 Bool)) Bool (=>
                                       (or (= temp___is_init_1789 true)
                                       (<= 0 8)) (in_range4
                                       temp___expr_1792)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun statusisgotadmintoken (Int) Bool)

(declare-fun statusisgotadmintoken__function_guard (Bool Int) Bool)

;; statusisgotadmintoken__post_axiom
  (assert true)

;; statusisgotadmintoken__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (statusisgotadmintoken enclave__status) true)
     (= enclave__status 5)) :pattern ((statusisgotadmintoken enclave__status)) )))

(declare-fun statusiswaitingremoveadmintokenfail (Int) Bool)

(declare-fun statusiswaitingremoveadmintokenfail__function_guard (Bool
  Int) Bool)

;; statusiswaitingremoveadmintokenfail__post_axiom
  (assert true)

;; statusiswaitingremoveadmintokenfail__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (statusiswaitingremoveadmintokenfail enclave__status) true)
     (= enclave__status 4)) :pattern ((statusiswaitingremoveadmintokenfail
                                      enclave__status)) )))

(declare-fun statusiswaitingstartadminop (Int) Bool)

(declare-fun statusiswaitingstartadminop__function_guard (Bool Int) Bool)

;; statusiswaitingstartadminop__post_axiom
  (assert true)

;; statusiswaitingstartadminop__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (statusiswaitingstartadminop enclave__status) true)
     (= enclave__status 6)) :pattern ((statusiswaitingstartadminop
                                      enclave__status)) )))

(declare-fun statusiswaitingfinishadminop (Int) Bool)

(declare-fun statusiswaitingfinishadminop__function_guard (Bool Int) Bool)

;; statusiswaitingfinishadminop__post_axiom
  (assert true)

;; statusiswaitingfinishadminop__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (statusiswaitingfinishadminop enclave__status) true)
     (= enclave__status 7)) :pattern ((statusiswaitingfinishadminop
                                      enclave__status)) )))

(declare-fun statusisenclavequiescent (Int) Bool)

(declare-fun statusisenclavequiescent__function_guard (Bool Int) Bool)

;; statusisenclavequiescent__post_axiom
  (assert true)

;; statusisenclavequiescent__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (statusisenclavequiescent enclave__status) true)
     (= enclave__status 3)) :pattern ((statusisenclavequiescent
                                      enclave__status)) )))

(declare-fun statusisshutdown (Int) Bool)

(declare-fun statusisshutdown__function_guard (Bool Int) Bool)

;; statusisshutdown__post_axiom
  (assert true)

;; statusisshutdown__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (statusisshutdown enclave__status) true) (= enclave__status 8)) :pattern (
  (statusisshutdown enclave__status)) )))

(declare-fun enrolmentisinprogress (Int) Bool)

(declare-fun enrolmentisinprogress__function_guard (Bool Int) Bool)

(declare-sort enrolmentstates 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (enrolmentstates enrolmentstates) Bool)

(declare-const dummy5 enrolmentstates)

(declare-datatypes ()
((enrolmentstates__ref
 (mk_enrolmentstates__ref (enrolmentstates__content enrolmentstates)))))
(define-fun enrolmentstates__ref___projection ((a enrolmentstates__ref)) enrolmentstates
  (enrolmentstates__content a))

;; enrolmentisinprogress__post_axiom
  (assert true)

;; enrolmentisinprogress__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (= (= (enrolmentisinprogress enclave__status) true) (in_range5
     enclave__status)) :pattern ((enrolmentisinprogress enclave__status)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun ispresent1 (us_private) Bool)

(declare-fun ispresent__function_guard1 (Bool us_private) Bool)

(declare-fun adminlogoncanstart (us_private us_split_fields Int) Bool)

(declare-fun adminlogoncanstart__function_guard (Bool us_private
  us_split_fields Int) Bool)

;; adminlogoncanstart__post_axiom
  (assert true)

;; adminlogoncanstart__def_axiom
  (assert
  (forall ((admintoken__state us_private))
  (forall ((enclave__startadminactivity__theadmin__fields us_split_fields))
  (forall ((enclave__status Int))
  (! (=
     (= (adminlogoncanstart admintoken__state
        enclave__startadminactivity__theadmin__fields enclave__status) true)
     (and
     (and
     (not
     (= (ispresent (mk___rep enclave__startadminactivity__theadmin__fields)) true))
     (= enclave__status 3)) (= (ispresent1 admintoken__state) true))) :pattern (
  (adminlogoncanstart admintoken__state
  enclave__startadminactivity__theadmin__fields enclave__status)) )))))

(declare-fun adminopcanstart (us_private us_split_fields Int) Bool)

(declare-fun adminopcanstart__function_guard (Bool us_private us_split_fields
  Int) Bool)

;; adminopcanstart__post_axiom
  (assert true)

;; adminopcanstart__def_axiom
  (assert
  (forall ((admintoken__state us_private))
  (forall ((enclave__startadminactivity__theadmin__fields us_split_fields))
  (forall ((enclave__status Int))
  (! (=
     (= (adminopcanstart admintoken__state
        enclave__startadminactivity__theadmin__fields enclave__status) true)
     (and
     (and
     (= (ispresent (mk___rep enclave__startadminactivity__theadmin__fields)) true)
     (= enclave__status 3)) (= (ispresent1 admintoken__state) true))) :pattern (
  (adminopcanstart admintoken__state
  enclave__startadminactivity__theadmin__fields enclave__status)) )))))

(define-fun dynamic_invariant3 ((temp___expr_1798 Int)
  (temp___is_init_1795 Bool) (temp___skip_constant_1796 Bool)
  (temp___do_toplevel_1797 Bool)) Bool (=>
                                       (or (= temp___is_init_1795 true)
                                       (<= 0 2)) (in_range5
                                       temp___expr_1798)))

(define-fun dynamic_invariant4 ((temp___expr_261 Int)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (or (= temp___is_init_258 true)
                                      (<= 0 4)) (in_range2 temp___expr_261)))

;; ispresent__post_axiom
  (assert true)

(declare-const filestate us_private)

(declare-const state us_private)

(declare-const state1 us_private)

(declare-const state2 us_private)

(declare-const theadmin__split_fields privileget)

(declare-const theadmin__split_fields1 opandnullt)

(declare-const status Int)

(declare-const o Int)

(declare-const o1 Bool)

(declare-const o2 Bool)

(declare-const filestate1 us_private)

(declare-const state3 us_private)

(declare-const state4 us_private)

(declare-const theadmin__split_fields2 privileget)

(declare-const theadmin__split_fields3 opandnullt)

(declare-const status1 Int)

(declare-const result Bool)

(declare-const result1 Int)

(declare-const status2 Int)

(declare-const result2 Bool)

(declare-const filestate2 us_private)

(declare-const state5 us_private)

(declare-const state6 us_private)

(declare-const theadmin__split_fields4 privileget)

(declare-const theadmin__split_fields5 opandnullt)

(declare-const status3 Int)

(declare-const filestate3 us_private)

(declare-const state7 us_private)

(declare-const state8 us_private)

(declare-const theadmin__split_fields6 privileget)

(declare-const theadmin__split_fields7 opandnullt)

(declare-const status4 Int)

(declare-const filestate4 us_private)

(declare-const state9 us_private)

(declare-const state10 us_private)

(declare-const theadmin__split_fields8 privileget)

(declare-const theadmin__split_fields9 opandnullt)

(declare-const status5 Int)

(declare-const result3 Bool)

(define-fun theadmin__split_fields10 () us_split_fields (mk___split_fields
                                                        theadmin__split_fields4
                                                        theadmin__split_fields5))

(define-fun theadmin__split_fields11 () us_split_fields (mk___split_fields
                                                        theadmin__split_fields2
                                                        theadmin__split_fields3))

;; H
  (assert (in_range4 status))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= (enrolmentisinprogress status) true))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (and (and (= (isgood state1) true) (= (authcertvalid state1) true))
  (= (theauthcertrole state1) 1))))
  (=>
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)))
  (=>
  (not
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=>
  (or (= (statusisgotadmintoken status) true)
  (= (statusiswaitingremoveadmintokenfail status) true))
  (not
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=>
  (or (= (statusiswaitingstartadminop status) true)
  (= (statusiswaitingfinishadminop status) true))
  (and
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=> (= (statusisenclavequiescent status) true)
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=> (= (statusisshutdown status) true)
  (and
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 0))))
  (=>
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 4))
  (= (statusiswaitingstartadminop status) true)))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (or
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))))

;; H
  (assert
  (and
  (= result (adminlogoncanstart state1
            (mk___split_fields theadmin__split_fields
            theadmin__split_fields1) status))
  (= (= result true)
  (and
  (and
  (not
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (= status 3)) (= (ispresent1 state1) true)))))

;; H
  (assert
  (=> (= result true) (= (mk_int__ref result1) (mk_int__ref status))))

;; H
  (assert (=> (= result true) (= status2 5)))

;; H
  (assert
  (=> (= result true) (= theadmin__split_fields theadmin__split_fields4)))

;; H
  (assert
  (=> (= result true) (= theadmin__split_fields1 theadmin__split_fields5)))

;; H
  (assert (=> (= result true) (= state6 state2)))

;; H
  (assert (=> (= result true) (= state5 state)))

;; H
  (assert (=> (= result true) (= filestate2 filestate)))

;; H
  (assert
  (=> (= result true) (= theadmin__split_fields10 theadmin__split_fields11)))

;; H
  (assert (=> (= result true) (= state6 state4)))

;; H
  (assert (=> (= result true) (= state5 state3)))

;; H
  (assert (=> (= result true) (= filestate2 filestate1)))

;; H
  (assert
  (=> (not (= result true))
  (and
  (= result2 (adminopcanstart state1
             (mk___split_fields theadmin__split_fields
             theadmin__split_fields1) status))
  (= (= result2 true)
  (and
  (and
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= status 3)) (= (ispresent1 state1) true))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (= result2 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (or (= status3 3) (= status3 6))
  (=> (= (rolepresent (mk___rep theadmin__split_fields10)) 1)
  (and (and (= (isgood state1) true) (= (authcertvalid state1) true))
  (= (theauthcertrole state1) 1))))
  (=>
  (and (= (isdoingop (mk___rep theadmin__split_fields10)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields10)) 3))
  (= (rolepresent (mk___rep theadmin__split_fields10)) 1)))
  (=> (= (rolepresent (mk___rep theadmin__split_fields10)) 1)
  (or
  (and (= (isdoingop (mk___rep theadmin__split_fields10)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields10)) 3))
  (not (= (isdoingop (mk___rep theadmin__split_fields10)) true)))))
  (=>
  (and (= (isdoingop (mk___rep theadmin__split_fields10)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields10)) 4)) (= status3 6)))
  (=> (or (= status3 6) (= status3 7))
  (and
  (and (= (isdoingop (mk___rep theadmin__split_fields10)) true)
  (= (ispresent (mk___rep theadmin__split_fields10)) true))
  (= (rolepresent (mk___rep theadmin__split_fields10)) (rolepresent
                                                       (mk___rep
                                                       (mk___split_fields
                                                       theadmin__split_fields
                                                       theadmin__split_fields1)))))))
  (=> (= status3 3)
  (and (not (= (isdoingop (mk___rep theadmin__split_fields10)) true))
  (= (rolepresent (mk___rep theadmin__split_fields10)) (rolepresent
                                                       (mk___rep
                                                       (mk___split_fields
                                                       theadmin__split_fields
                                                       theadmin__split_fields1)))))))
  (=> (= status3 8)
  (and (not (= (isdoingop (mk___rep theadmin__split_fields10)) true))
  (= (rolepresent (mk___rep theadmin__split_fields10)) 0)))) (in_range4
  status3)))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result2 true)) (= status3 status))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true))
  (= theadmin__split_fields theadmin__split_fields4))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true))
  (= theadmin__split_fields1 theadmin__split_fields5))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result2 true)) (= state6 state2))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result2 true)) (= state5 state))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true)) (= filestate2 filestate))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result2 true)) (= status3 status1))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true))
  (= theadmin__split_fields10 theadmin__split_fields11))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result2 true)) (= state6 state4))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result2 true)) (= state5 state3))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true)) (= filestate2 filestate1))))

;; H
  (assert (=> (not (= result true)) (= status2 status3)))

;; H
  (assert (= status2 status4))

;; H
  (assert (= theadmin__split_fields6 theadmin__split_fields4))

;; H
  (assert (= theadmin__split_fields7 theadmin__split_fields5))

;; H
  (assert (= state6 state8))

;; H
  (assert (= state5 state7))

;; H
  (assert (= filestate2 filestate3))

;; H
  (assert (= status5 status2))

;; H
  (assert
  (= (mk___split_fields theadmin__split_fields8 theadmin__split_fields9)
  theadmin__split_fields10))

;; H
  (assert (= state10 state6))

;; H
  (assert (= state9 state5))

;; H
  (assert (= filestate4 filestate2))

;; H
  (assert
  (and
  (= o (rolepresent
       (mk___rep
       (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range1 o)))

;; H
  (assert (= result3 (ite (= o 1) true false)))

;; H
  (assert (= result3 true))

;; H
  (assert
  (= o1 (isdoingop
        (mk___rep
        (mk___split_fields theadmin__split_fields6 theadmin__split_fields7)))))

;; H
  (assert (= o2 (ite (not (= o1 true)) true false)))

(assert
;; WP_parameter_def
 ;; File "enclave.ads", line 514, characters 0-0
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))) true)))
(check-sat)
(exit)
