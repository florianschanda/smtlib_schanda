(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

logic bool_eq : real, real -> bool

axiom bool_eq_def :
  (forall a:real. forall b:real [bool_eq(a, b)]. (((a = b) -> (bool_eq(a,
  b) = true)) and ((not (a = b)) -> (bool_eq(a, b) = false))))

logic user_eq : real, real -> bool

logic value__size : int

logic object__size : real -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:real. (0 <= object__size(a)))

logic oge__logic : real, real -> bool

axiom oge__logic_def :
  (forall x:real. forall y:real [oge__logic(x, y)]. (((y <= x) ->
  (oge__logic(x, y) = true)) and ((not (y <= x)) -> (oge__logic(x,
  y) = false))))

logic oge : real, real -> bool

axiom oge_def :
  (forall x:real. forall y:real [oge(x, y)]. (((y <= x) -> (oge(x,
  y) = true)) and ((not (y <= x)) -> (oge(x, y) = false))))

logic r : real

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "reals.ads", line 8, characters 0-0 *)
goal WP_parameter_def : (oge__logic((r * r), 0.0) = true)
