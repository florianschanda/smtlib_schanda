(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq4 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def3 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq4(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  (((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) and
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133))))) or
  (not (((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))))))) ->
  (bool_eq4(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133)))))))) -> (bool_eq4(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq4(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133))))))))))

type tTmSP1

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tTmSP1, tTmSP1 -> bool

logic dummy2 : tTmSP1

type tTmSP1__ref = { tTmSP1__content : tTmSP1
}

function tTmSP1__ref___projection(a: tTmSP1__ref) : tTmSP1 =
  (a).tTmSP1__content

type tTmSP2

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tTmSP2, tTmSP2 -> bool

logic dummy3 : tTmSP2

type tTmSP2__ref = { tTmSP2__content : tTmSP2
}

function tTmSP2__ref___projection(a: tTmSP2__ref) : tTmSP2 =
  (a).tTmSP2__content

logic attr__ATTRIBUTE_ADDRESS : int

logic c62b : map

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t64b

predicate in_range5(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : t64b, t64b -> bool

logic dummy4 : t64b

type t64b__ref = { t64b__content : t64b
}

function t64b__ref___projection(a: t64b__ref) : t64b = (a).t64b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic c77b : map

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type t79b

predicate in_range6(x: int) = ((0 <= x) and (x <= 9))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : t79b, t79b -> bool

logic dummy5 : t79b

type t79b__ref = { t79b__content : t79b
}

function t79b__ref___projection(a: t79b__ref) : t79b = (a).t79b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic c96b : map

logic attr__ATTRIBUTE_ADDRESS7 : int

type t98b

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : t98b, t98b -> bool

logic dummy6 : t98b

type t98b__ref = { t98b__content : t98b
}

function t98b__ref___projection(a: t98b__ref) : t98b = (a).t98b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

logic temp___220 : int, int, int -> map

axiom def_axiom :
  (forall temp___222:int. forall temp___223:int. forall temp___224:int.
  (forall temp___225:int. forall temp___226:int. (((temp___225 = 7) ->
  (get(temp___220(temp___222, temp___223, temp___224), temp___225,
  temp___226) = of_rep(temp___223))) and ((not (temp___225 = 7)) ->
  (((temp___225 = 5) -> (get(temp___220(temp___222, temp___223, temp___224),
  temp___225, temp___226) = of_rep(temp___222))) and
  ((not (temp___225 = 5)) -> (get(temp___220(temp___222, temp___223,
  temp___224), temp___225, temp___226) = of_rep(temp___224))))))))

logic temp___236 : int, int, int -> map

axiom def_axiom1 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  (forall temp___241:int. forall temp___242:int. (((temp___241 = 7) ->
  (get(temp___236(temp___238, temp___239, temp___240), temp___241,
  temp___242) = of_rep(temp___239))) and ((not (temp___241 = 7)) ->
  (((temp___241 = 5) -> (get(temp___236(temp___238, temp___239, temp___240),
  temp___241, temp___242) = of_rep(temp___238))) and
  ((not (temp___241 = 5)) -> (get(temp___236(temp___238, temp___239,
  temp___240), temp___241, temp___242) = of_rep(temp___240))))))))

logic temp___254 : int -> map

axiom def_axiom2 :
  (forall temp___256:int.
  (forall temp___257:int. forall temp___258:int. (get(temp___254(temp___256),
  temp___257, temp___258) = of_rep(temp___256))))

 (* File "test_swap_lines.adb", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall m:map. forall tmp:int. forall c:int. forall tmp1:int.
  forall c1:int. forall temp___231:int. forall temp___230:int.
  forall temp___227:map. forall temp___233:map. forall temp___232:map.
  forall o:natural. forall o1:map. forall o2:natural. forall o3:map.
  forall temp___251:map. forall temp___250:map. forall temp___245:map.
  forall temp___244:int. forall temp___243:int. forall temp___249:map.
  forall temp___248:map. forall o4:natural. forall o5:map. forall o6:natural.
  forall o7:map. forall tmp2:int. forall tmp3:int. forall result:map.
  forall m1:map. forall result1:int. forall c2:int. forall m2:map.
  forall tmp4:int. forall c3:int. forall result2:int. forall tmp5:int.
  forall result3:map. forall m3:map. forall result4:map. forall m4:map.
  forall m5:map. forall tmp6:int. forall c4:int. forall m6:map.
  forall tmp7:int. forall c5:int. forall m7:map. forall tmp8:int.
  forall c6:int. forall m8:map. forall tmp9:int. forall c7:int.
  forall result5:map. forall m9:map. forall result6:int. forall c8:int.
  forall m10:map. forall tmp10:int. forall c9:int. forall result7:int.
  forall tmp11:int. forall result8:map. forall m11:map. forall result9:map.
  forall m12:map. forall m13:map. forall tmp12:int. forall c10:int.
  forall m14:map. forall tmp13:int. forall c11:int. forall m15:map.
  forall tmp14:int. forall c12:int. forall m16:map. forall tmp15:int.
  forall c13:int. (((result = m) and (m1 = temp___220(1, 2, 0))) ->
  ((m1 = c62b) -> ((((0 <= 2147483647) -> in_range2(tmp)) and ((({
  int__content = result1 } = { int__content = c }) and (c2 = 1)) and
  ((((1 <= c2) and (c2 <= 10)) and ((((temp___231 = tmp) and
  ((temp___230 = c2) and ((temp___227 = m1) and ((temp___233 = m1) and
  ((temp___232 = m1) and
  ((forall i:int. (((1 <= i) and (i <= (c3 - 1))) -> ((to_rep(get(m2, 5,
   i)) = to_rep(get(temp___232, 7, i))) and (to_rep(get(m2, 7,
   i)) = to_rep(get(temp___233, 5, i)))))) and
  (((((forall temp___228:int. forall temp___229:int. ((((1 <= temp___228) and
      (temp___228 <= 10)) and ((1 <= temp___229) and (temp___229 <= 10))) ->
      ((((c3 <= temp___229) or (not (5 = temp___228))) and
      ((c3 <= temp___229) or (not (7 = temp___228)))) -> (get(m2, temp___228,
      temp___229) = get(temp___227, temp___228, temp___229))))) and
  ((1 <= 10) -> in_range5(c3))) and ((0 <= 2147483647) ->
  in_range2(tmp4))) and ((1 <= c3) and (c3 <= 10))) and
  (((tmp4 = result2) and (tmp5 = to_rep(get(m2, 5, c3)))) and
  ((((to_rep(o) = to_rep(get(m2, 7, c3))) and (o1 = set(m2, 5, c3, o))) and
  ((m2 = result3) and (m3 = o1))) and ((((to_rep(o2) = tmp5) and
  (o3 = set(m3, 7, c3, o2))) and ((m3 = result4) and (m4 = o3))) and
  (c3 = 10))))))))))) and (((c3 = c4) and ((tmp5 = tmp6) and (m4 = m5))) and
  ((c5 = c3) and ((tmp7 = tmp5) and (m6 = m4))))) and (((c6 = c4) and (({
  int__content = tmp8 } = { int__content = tmp6 }) and ({ map__content = m7
  } = { map__content = m5 }))) and ((c7 = c5) and ((tmp9 = tmp7) and
  (m8 = m6)))))) or ((not ((1 <= c2) and (c2 <= 10))) and (((c2 = c6) and
  ((tmp = tmp8) and (m1 = m7))) and ((c7 = c2) and ((tmp9 = tmp2) and
  (m8 = m1)))))))) ->
  ((forall i:int. (((1 <= i) and (i <= 10)) ->
   (forall j:int. (((1 <= j) and (j <= 10)) -> (((i = 5) and (to_rep(get(m7,
   i, j)) = 2)) or ((not (i = 5)) and (((i = 7) and (to_rep(get(m7, i,
   j)) = 1)) or ((not (i = 7)) and (to_rep(get(m7, i, j)) = 0))))))))) ->
  (((result5 = m7) and (m9 = temp___236(1, 2, 0))) -> ((m9 = c77b) ->
  ((((0 <= 2147483647) -> in_range2(tmp1)) and (((result6 = c1) and
  (c8 = 0)) and ((((0 <= c8) and (c8 <= 9)) and ((((temp___251 = m9) and
  ((temp___250 = m9) and ((temp___245 = m9) and ((temp___244 = tmp1) and
  ((temp___243 = c8) and ((temp___249 = m9) and ((temp___248 = m9) and
  (((forall i:int. (((1 <= i) and (i <= c9)) -> ((to_rep(get(m10, 5,
    i)) = to_rep(get(temp___248, 7, i))) and (to_rep(get(m10, 7,
    i)) = to_rep(get(temp___249, 5, i)))))) and
  (forall i:int. ((((c9 + 1) <= i) and (i <= 10)) -> ((to_rep(get(m10, 5,
  i)) = to_rep(get(temp___250, 5, i))) and (to_rep(get(m10, 7,
  i)) = to_rep(get(temp___251, 7, i))))))) and ((((((0 <= 9) ->
  in_range6(c9)) and ((0 <= 2147483647) -> in_range2(tmp10))) and
  (forall temp___246:int. forall temp___247:int. ((((1 <= temp___246) and
  (temp___246 <= 10)) and ((1 <= temp___247) and (temp___247 <= 10))) ->
  (((not (7 = temp___246)) and (not (5 = temp___246))) -> (get(m10,
  temp___246, temp___247) = get(temp___245, temp___246, temp___247)))))) and
  ((0 <= c9) and (c9 <= 9))) and (((result7 = tmp10) and
  (tmp11 = to_rep(get(m10, 5, (c9 + 1))))) and
  ((((to_rep(o4) = to_rep(get(m10, 7, (c9 + 1)))) and (o5 = set(m10, 5,
  (c9 + 1), o4))) and ((result8 = m10) and (m11 = o5))) and
  ((((to_rep(o6) = tmp11) and (o7 = set(m11, 7, (c9 + 1), o6))) and
  ((result9 = m11) and (m12 = o7))) and (c9 = 9))))))))))))) and
  (((c9 = c10) and ((tmp11 = tmp12) and (m12 = m13))) and ((c11 = c9) and
  ((tmp13 = tmp11) and (m14 = m12))))) and ((({ int__content = c12 } = {
  int__content = c10 }) and (({ int__content = tmp14 } = { int__content =
  tmp12 }) and ({ map__content = m15 } = { map__content = m13 }))) and
  ((c13 = c11) and ((tmp15 = tmp13) and (m16 = m14)))))) or
  ((not ((0 <= c8) and (c8 <= 9))) and (((c8 = c12) and ((tmp1 = tmp14) and
  (m9 = m15))) and ((c13 = c8) and ((tmp15 = tmp3) and (m16 = m9)))))))) ->
  (forall i:int. (((1 <= i) and (i <= 10)) ->
  (forall j:int. (((1 <= j) and (j <= 10)) -> ((i = 5) -> (to_rep(get(m15, i,
  j)) = 2))))))))))))))
