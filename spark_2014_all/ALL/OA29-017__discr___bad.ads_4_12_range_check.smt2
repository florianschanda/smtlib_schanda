;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun too_small (tuple0) Int)

(declare-fun too_small__function_guard (Int tuple0) Bool)

;; too_small__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant
  (too_small us_void_param) true false
  true) :pattern ((too_small us_void_param)) )))

;; too_small__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (too_small us_void_param) 0) :pattern ((too_small us_void_param)) )))

(declare-fun r1s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__discr__t__c positive)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) positive 
  (rec__discr__t__c a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__discr__t__a integer)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) integer 
  (rec__discr__t__a a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1 (rec__discr__t__c (us_split_discrs1 a))) 
                        (to_rep1 (rec__discr__t__c (us_split_discrs1 b))))
                        (= (to_rep (rec__discr__t__a (us_split_fields1 a))) 
                        (to_rep (rec__discr__t__a (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun discr__t__c__first__bit () Int)

(declare-fun discr__t__c__last__bit () Int)

(declare-fun discr__t__c__position () Int)

;; discr__t__c__first__bit_axiom
  (assert (<= 0 discr__t__c__first__bit))

;; discr__t__c__last__bit_axiom
  (assert (< discr__t__c__first__bit discr__t__c__last__bit))

;; discr__t__c__position_axiom
  (assert (<= 0 discr__t__c__position))

(declare-fun discr__t__a__first__bit () Int)

(declare-fun discr__t__a__last__bit () Int)

(declare-fun discr__t__a__position () Int)

;; discr__t__a__first__bit_axiom
  (assert (<= 0 discr__t__a__first__bit))

;; discr__t__a__last__bit_axiom
  (assert (< discr__t__a__first__bit discr__t__a__last__bit))

;; discr__t__a__position_axiom
  (assert (<= 0 discr__t__a__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(define-fun in_range2 ((rec__discr__t__c1 Int)
  (a us_rep)) Bool (= rec__discr__t__c1 (to_rep1
                                        (rec__discr__t__c
                                        (us_split_discrs1 a)))))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun discr__t__c__first__bit1 () Int)

(declare-fun discr__t__c__last__bit1 () Int)

(declare-fun discr__t__c__position1 () Int)

;; discr__t__c__first__bit_axiom
  (assert (<= 0 discr__t__c__first__bit1))

;; discr__t__c__last__bit_axiom
  (assert (< discr__t__c__first__bit1 discr__t__c__last__bit1))

;; discr__t__c__position_axiom
  (assert (<= 0 discr__t__c__position1))

(declare-fun discr__t__a__first__bit1 () Int)

(declare-fun discr__t__a__last__bit1 () Int)

(declare-fun discr__t__a__position1 () Int)

;; discr__t__a__first__bit_axiom
  (assert (<= 0 discr__t__a__first__bit1))

;; discr__t__a__last__bit_axiom
  (assert (< discr__t__a__first__bit1 discr__t__a__last__bit1))

;; discr__t__a__position_axiom
  (assert (<= 0 discr__t__a__position1))

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((tp1S__ref (mk_tp1S__ref (tp1S__content us_rep)))))
(define-fun tp1S__ref___projection ((a tp1S__ref)) us_rep (tp1S__content a))

(define-fun dynamic_invariant1 ((temp___expr_176 us_rep)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (not (= temp___skip_constant_174 true))
                                      (in_range2 r1s temp___expr_176)))

(define-fun default_initial_assumption ((temp___expr_178 us_rep)
  (temp___skip_top_level_179 Bool)) Bool (= (to_rep1
                                            (rec__discr__t__c
                                            (us_split_discrs1
                                            temp___expr_178))) r1s))

(declare-fun p1__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-fun bad__R1s__assume () Int)

;; H
  (assert
  (and (= bad__R1s__assume (too_small Tuple0))
  (and (in_range bad__R1s__assume) (= bad__R1s__assume 0))))

;; H
  (assert (= bad__R1s__assume r1s))

;; H
  (assert (in_range r1s))

(assert
;; WP_parameter_def
 ;; File "bad.ads", line 3, characters 0-0
  (not (in_range1 r1s)))
(check-sat)
