;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__p__private_types__t1__capacity integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer 
  (rec__p__private_types__t1__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__p__private_types__t1 us_main_type)))))
(define-fun us_split_fields_T1__projection ((a us_split_fields)) us_main_type 
  (rec__p__private_types__t1 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__p__private_types__t1__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__p__private_types__t1__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__p__private_types__t1 (us_split_fields1 a))
                           (rec__p__private_types__t1 (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun p__private_types__t1__capacity__first__bit () Int)

(declare-fun p__private_types__t1__capacity__last__bit () Int)

(declare-fun p__private_types__t1__capacity__position () Int)

;; p__private_types__t1__capacity__first__bit_axiom
  (assert (<= 0 p__private_types__t1__capacity__first__bit))

;; p__private_types__t1__capacity__last__bit_axiom
  (assert
  (< p__private_types__t1__capacity__first__bit p__private_types__t1__capacity__last__bit))

;; p__private_types__t1__capacity__position_axiom
  (assert (<= 0 p__private_types__t1__capacity__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content us_rep)))))
(define-fun t1__ref___projection ((a t1__ref)) us_rep (t1__content a))

(define-fun in_range1 ((rec__p__private_types__t1__capacity1 Int)
  (a us_rep)) Bool (= rec__p__private_types__t1__capacity1 (to_rep
                                                           (rec__p__private_types__t1__capacity
                                                           (us_split_discrs1
                                                           a)))))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun p__private_types__t1__capacity__first__bit1 () Int)

(declare-fun p__private_types__t1__capacity__last__bit1 () Int)

(declare-fun p__private_types__t1__capacity__position1 () Int)

;; p__private_types__t1__capacity__first__bit_axiom
  (assert (<= 0 p__private_types__t1__capacity__first__bit1))

;; p__private_types__t1__capacity__last__bit_axiom
  (assert
  (< p__private_types__t1__capacity__first__bit1 p__private_types__t1__capacity__last__bit1))

;; p__private_types__t1__capacity__position_axiom
  (assert (<= 0 p__private_types__t1__capacity__position1))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((my_t1__ref (mk_my_t1__ref (my_t1__content us_rep)))))
(define-fun my_t1__ref___projection ((a my_t1__ref)) us_rep (my_t1__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_146 us_rep)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (not (= temp___skip_constant_144 true))
                                      (in_range1 10 temp___expr_146)))

(define-fun default_initial_assumption ((temp___expr_148 us_rep)
  (temp___skip_top_level_149 Bool)) Bool (= (to_rep
                                            (rec__p__private_types__t1__capacity
                                            (us_split_discrs1
                                            temp___expr_148))) 10))

(declare-fun l () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun p__identity1__result () integer)

(declare-fun p__identity1__result1 () us_main_type)

(declare-fun result () integer)

(declare-fun result1 () us_main_type)

(declare-fun p__identity1__result2 () integer)

(declare-fun p__identity1__result3 () us_main_type)

(declare-fun p__identity1__result4 () integer)

(declare-fun p__identity1__result5 () us_main_type)

(declare-fun p__identity1__result6 () integer)

(declare-fun p__identity1__result7 () us_main_type)

(declare-fun p__identity1__result8 () integer)

(declare-fun p__identity1__result9 () us_main_type)

(declare-fun p__identity1__result10 () us_rep)

(define-fun p__identity1__result11 () us_rep (mk___rep
                                             (mk___split_discrs
                                             p__identity1__result6)
                                             (mk___split_fields
                                             p__identity1__result7)))

(define-fun p__identity1__result12 () us_rep (mk___rep
                                             (mk___split_discrs
                                             p__identity1__result2)
                                             (mk___split_fields
                                             p__identity1__result3)))

(declare-fun result2 () integer)

(declare-fun result3 () us_main_type)

;; H
  (assert
  (= 10 (to_rep (rec__p__private_types__t1__capacity (us_split_discrs1 l)))))

;; H
  (assert (= p__identity1__result4 p__identity1__result2))

;; H
  (assert (= p__identity1__result5 p__identity1__result3))

;; H
  (assert (= p__identity1__result11 p__identity1__result12))

;; H
  (assert (= result p__identity1__result))

;; H
  (assert (= result1 p__identity1__result1))

;; H
  (assert (= p__identity1__result12 l))

;; H
  (assert
  (= (mk_my_t1__ref
     (mk___rep (mk___split_discrs p__identity1__result8)
     (mk___split_fields p__identity1__result9))) (mk_my_t1__ref
                                                 (mk___rep
                                                 (mk___split_discrs
                                                 p__identity1__result4)
                                                 (mk___split_fields
                                                 p__identity1__result5)))))

;; H
  (assert (= p__identity1__result10 p__identity1__result11))

;; H
  (assert (= result2 p__identity1__result8))

;; H
  (assert (= result3 p__identity1__result9))

(assert
;; WP_parameter_def
 ;; File "p.ads", line 19, characters 0-0
  (not
  (= (bool_eq1
     (mk___rep (mk___split_discrs p__identity1__result8)
     (mk___split_fields p__identity1__result9)) l) true)))
(check-sat)
