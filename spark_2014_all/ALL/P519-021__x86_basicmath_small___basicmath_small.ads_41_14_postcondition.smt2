;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-fun nth2 ((_ BitVec 8) Int) Bool)

(declare-fun lsr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right3 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left3 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun to_int4 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv2 x ((_ int2bv 8) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 8))))))
(declare-fun power2 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-const dummy1 unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int5 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range2
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (unsigned32 unsigned32) Bool)

(declare-const dummy2 unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant1 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ebx__post_axiom
  (assert
  (forall ((x86__rbx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rbx true true true)
     (let ((result (ebx x86__rbx)))
     (and (= result (readreg32 x86__rbx)) (dynamic_invariant1 result true
     false true)))) :pattern ((ebx x86__rbx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant1 result true false true)))) :pattern ((readmem32 addr
                                                              x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(define-fun dynamic_invariant2 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant1 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const xmm0 (_ BitVec 64))

(declare-const rax (_ BitVec 64))

(declare-const rbx (_ BitVec 64))

(declare-const rsp (_ BitVec 64))

(declare-const rbp (_ BitVec 64))

(declare-const rdi (_ BitVec 64))

(declare-const memory (Array (_ BitVec 64) unsigned8))

(declare-const temp___370 (_ BitVec 64))

(declare-const temp___369 (_ BitVec 64))

(declare-const temp___368 Bool)

(declare-const temp___367 Bool)

(declare-const temp___366 (_ BitVec 64))

(declare-const temp___364 Bool)

(declare-const temp___365 (_ BitVec 64))

(declare-const temp___363 (_ BitVec 64))

(declare-const temp___362 (_ BitVec 64))

(declare-const temp___371 (_ BitVec 64))

(declare-const temp___361 Bool)

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 32))

(declare-const o2 (_ BitVec 32))

(declare-const o3 (_ BitVec 32))

(declare-const o4 (_ BitVec 32))

(declare-const o5 (_ BitVec 32))

(declare-const o6 Bool)

(declare-const o7 (_ BitVec 32))

(declare-const o8 (_ BitVec 32))

(declare-const o9 (_ BitVec 32))

(declare-const o10 Bool)

(declare-const o11 (_ BitVec 32))

(declare-const o12 (_ BitVec 32))

(declare-const o13 Bool)

(declare-const o14 (_ BitVec 32))

(declare-const o15 (_ BitVec 32))

(declare-const o16 (_ BitVec 32))

(declare-const o17 (_ BitVec 32))

(declare-const o18 Bool)

(declare-const o19 Bool)

(declare-const o20 Bool)

(declare-const zeroflag1 Bool)

(declare-const carryflag1 Bool)

(declare-const signflag1 Bool)

(declare-const overflowflag1 Bool)

(declare-const xmm01 (_ BitVec 64))

(declare-const rax1 (_ BitVec 64))

(declare-const rbx1 (_ BitVec 64))

(declare-const rsp1 (_ BitVec 64))

(declare-const rbp1 (_ BitVec 64))

(declare-const rdi1 (_ BitVec 64))

(declare-const zeroflag2 Bool)

(declare-const carryflag2 Bool)

(declare-const signflag2 Bool)

(declare-const overflowflag2 Bool)

(declare-const xmm02 (_ BitVec 64))

(declare-const rbx2 (_ BitVec 64))

(declare-const rsp2 (_ BitVec 64))

(declare-const rbp2 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const xmm03 (_ BitVec 64))

(declare-const rdi2 (_ BitVec 64))

(declare-const rax2 (_ BitVec 64))

(declare-const rbx3 (_ BitVec 64))

(declare-const result1 (_ BitVec 64))

(declare-const rbp3 (_ BitVec 64))

(declare-const result2 (_ BitVec 64))

(declare-const rsp3 (_ BitVec 64))

(declare-const rsp4 (_ BitVec 64))

(declare-const result3 Bool)

(declare-const zeroflag3 Bool)

(declare-const result4 Bool)

(declare-const signflag3 Bool)

(declare-const result5 Bool)

(declare-const carryflag3 Bool)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 Bool)

(declare-const overflowflag3 Bool)

(declare-const zeroflag4 bool__ref)

(declare-const carryflag4 bool__ref)

(declare-const signflag4 bool__ref)

(declare-const overflowflag4 bool__ref)

(declare-const xmm04 t__ref1)

(declare-const rax3 t__ref1)

(declare-const rbx4 t__ref1)

(declare-const rsp5 t__ref1)

(declare-const rbp4 t__ref1)

(declare-const rdi3 t__ref1)

(declare-const zeroflag5 Bool)

(declare-const carryflag5 Bool)

(declare-const signflag5 Bool)

(declare-const overflowflag5 Bool)

(declare-const xmm05 (_ BitVec 64))

(declare-const rax4 (_ BitVec 64))

(declare-const rbx5 (_ BitVec 64))

(declare-const rsp6 (_ BitVec 64))

(declare-const rbp5 (_ BitVec 64))

(declare-const rdi4 (_ BitVec 64))

(declare-const zeroflag6 bool__ref)

(declare-const carryflag6 bool__ref)

(declare-const signflag6 bool__ref)

(declare-const overflowflag6 bool__ref)

(declare-const xmm06 t__ref1)

(declare-const rax5 t__ref1)

(declare-const rbx6 t__ref1)

(declare-const rsp7 t__ref1)

(declare-const rbp6 t__ref1)

(declare-const rdi5 t__ref1)

(declare-const zeroflag7 Bool)

(declare-const carryflag7 Bool)

(declare-const signflag7 Bool)

(declare-const overflowflag7 Bool)

(declare-const xmm07 (_ BitVec 64))

(declare-const rax6 (_ BitVec 64))

(declare-const rbx7 (_ BitVec 64))

(declare-const rsp8 (_ BitVec 64))

(declare-const rbp7 (_ BitVec 64))

(declare-const rdi6 (_ BitVec 64))

(declare-const zeroflag8 bool__ref)

(declare-const carryflag8 bool__ref)

(declare-const signflag8 bool__ref)

(declare-const overflowflag8 bool__ref)

(declare-const xmm08 t__ref1)

(declare-const rax7 t__ref1)

(declare-const rbx8 t__ref1)

(declare-const rsp9 t__ref1)

(declare-const rbp8 t__ref1)

(declare-const rdi7 t__ref1)

(declare-const zeroflag9 Bool)

(declare-const carryflag9 Bool)

(declare-const signflag9 Bool)

(declare-const overflowflag9 Bool)

(declare-const xmm09 (_ BitVec 64))

(declare-const rax8 (_ BitVec 64))

(declare-const rbx9 (_ BitVec 64))

(declare-const rsp10 (_ BitVec 64))

(declare-const rbp9 (_ BitVec 64))

(declare-const rdi8 (_ BitVec 64))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___370 rbx)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___369 rsp)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___368 overflowflag)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___367 signflag)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___366 rax)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___364 carryflag)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___365 xmm0)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___363 rbp)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___362 rdi)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___371 rsp)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= temp___361 zeroflag)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp2 temp___371)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and (not (= zeroflag2 true))
  (= (= signflag2 true) (= overflowflag2 true)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and (= o (readmem64 rbp2 memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                       (select memory
                                                       rbp2))))
  (= (bvand o ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select
                                                                memory (bvadd
                                                                rbp2 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   memory (bvadd
                                                                   rbp2 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp2 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp2 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp2 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp2 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp2 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= xmm02 result)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= xmm03 o)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= (writereg32post rdi2 ((_ int2bv 32) 4198699)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= (writereg32post rax2 ((_ int2bv 32) 1)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and (= o1 (ebx rbx2)) (= o1 (readreg32 rbx2)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o2 (bvadd o1 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= (writereg32post rbx3 o2) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbp2 result1)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbp3 (bvadd rbp2 ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp2 result2)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp3 (bvsub rsp2 ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp4 (bvadd rsp3 ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and (= o3 (ebx rbx3)) (= o3 (readreg32 rbx3)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and
  (= o4 (readmem32
        (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
        memory))
  (and
  (and
  (and
  (= (bvand o4 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                        (select memory (bvsub (bvadd
                                                        rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o4 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvsub (bvadd
                                                                 rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o4 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvsub (bvadd
                                                                    rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o4 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o5 (bvsub o4 o3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o6 (ite (= o5 ((_ int2bv 32) 0)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= zeroflag2 result3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= zeroflag3 o6)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and (= o7 (ebx rbx3)) (= o7 (readreg32 rbx3)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and
  (= o8 (readmem32
        (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
        memory))
  (and
  (and
  (and
  (= (bvand o8 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                        (select memory (bvsub (bvadd
                                                        rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o8 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvsub (bvadd
                                                                 rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o8 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvsub (bvadd
                                                                    rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o8 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o9 (bvsub o8 o7))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o10 (ite (bvugt o9 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= signflag2 result4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= signflag3 o10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and (= o11 (ebx rbx3)) (= o11 (readreg32 rbx3)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (and
  (= o12 (readmem32
         (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         memory))
  (and
  (and
  (and
  (= (bvand o12 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select memory (bvsub (bvadd
                                                         rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o12 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  memory (bvadd (bvsub (bvadd
                                                                  rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o12 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o12 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o13 (ite (bvult o12 o11) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= carryflag2 result5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= carryflag3 o13)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (not (= signflag3 true))
  (and
  (= o17 (readmem32
         (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         memory))
  (and
  (and
  (and
  (= (bvand o17 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select memory (bvsub (bvadd
                                                         rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o17 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  memory (bvadd (bvsub (bvadd
                                                                  rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o17 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o17 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (not (= signflag3 true))
  (= result6 (ite (bvugt o17 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (not (not (= signflag3 true))) (= result6 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (= result6 true) (and (= o16 (ebx rbx3)) (= o16 (readreg32 rbx3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (= result6 true)
  (= o18 (ite (bvule o16 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (not (= result6 true)) (= o18 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (= signflag3 true) (and (= o15 (ebx rbx3)) (= o15 (readreg32 rbx3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (= signflag3 true)
  (= result7 (ite (bvugt o15 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (not (= signflag3 true)) (= result7 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (= result7 true)
  (and
  (= o14 (readmem32
         (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         memory))
  (and
  (and
  (and
  (= (bvand o14 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select memory (bvsub (bvadd
                                                         rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o14 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  memory (bvadd (bvsub (bvadd
                                                                  rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o14 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o14 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory (bvadd (bvsub (bvadd rsp4 ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (= result7 true)
  (= o19 (ite (bvule o14 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (=> (not (= result7 true)) (= o19 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= o20 (ite (= o19 false) o18 true))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= overflowflag2 result8)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= overflowflag3 o20)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (not
  (and (not (= zeroflag3 true))
  (= (to_int3 signflag3) (to_int3 overflowflag3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rdi3 (mk_t__ref1 rdi2))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbp4 (mk_t__ref1 rbp3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp5 (mk_t__ref1 rsp4))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbx4 (mk_t__ref1 rbx3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rax3 (mk_t__ref1 rax2))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= xmm04 (mk_t__ref1 xmm03))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= overflowflag4 (mk_bool__ref overflowflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= signflag4 (mk_bool__ref signflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= carryflag4 (mk_bool__ref carryflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= zeroflag4 (mk_bool__ref zeroflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rdi4 rdi2)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbp5 rbp3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp6 rsp4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbx5 rbx3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rax4 rax2)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= xmm05 xmm03)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= overflowflag5 overflowflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= signflag5 signflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= carryflag5 carryflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= zeroflag5 zeroflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rdi5 rdi3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbp6 rbp4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp7 rsp5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbx6 rbx4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rax5 rax3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= xmm06 xmm04)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= overflowflag6 overflowflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= signflag6 signflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= carryflag6 carryflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= zeroflag6 zeroflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rdi6 rdi4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbp7 rbp5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rsp8 rsp6)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rbx7 rbx5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= rax6 rax4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= xmm07 xmm05)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= overflowflag7 overflowflag5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= signflag7 signflag5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= carryflag7 carryflag5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag)))
  (= zeroflag7 zeroflag5)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rdi5 (mk_t__ref1 rdi))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rbp6 (mk_t__ref1 rbp))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rsp7 (mk_t__ref1 rsp))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rbx6 (mk_t__ref1 rbx))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rax5 (mk_t__ref1 rax))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= xmm06 (mk_t__ref1 xmm0))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= overflowflag6 (mk_bool__ref overflowflag))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= signflag6 (mk_bool__ref signflag))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= carryflag6 (mk_bool__ref carryflag))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= zeroflag6 (mk_bool__ref zeroflag))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rdi6 rdi1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rbp7 rbp1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rsp8 rsp1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rbx7 rbx1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= rax6 rax1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= xmm07 xmm01)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= overflowflag7 overflowflag1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= signflag7 signflag1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= carryflag7 carryflag1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag true)) (= (to_int3 signflag) (to_int3 overflowflag))))
  (= zeroflag7 zeroflag1)))

;; H
  (assert (= rdi7 rdi5))

;; H
  (assert (= rbp8 rbp6))

;; H
  (assert (= rsp9 rsp7))

;; H
  (assert (= rbx8 rbx6))

;; H
  (assert (= rax7 rax5))

;; H
  (assert (= xmm08 xmm06))

;; H
  (assert (= overflowflag8 overflowflag6))

;; H
  (assert (= signflag8 signflag6))

;; H
  (assert (= carryflag8 carryflag6))

;; H
  (assert (= zeroflag8 zeroflag6))

;; H
  (assert (= rdi8 rdi6))

;; H
  (assert (= rbp9 rbp7))

;; H
  (assert (= rsp10 rsp8))

;; H
  (assert (= rbx9 rbx7))

;; H
  (assert (= rax8 rax6))

;; H
  (assert (= xmm09 xmm07))

;; H
  (assert (= overflowflag9 overflowflag7))

;; H
  (assert (= signflag9 signflag7))

;; H
  (assert (= carryflag9 carryflag7))

;; H
  (assert (= zeroflag9 zeroflag7))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not (= (t__content1 rsp9) rsp)))
(check-sat)
(exit)
