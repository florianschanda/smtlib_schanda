(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type ttB

predicate in_range(x: int) = (((-128) <= x) and (x <= 127))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : ttB, ttB -> bool

logic dummy : ttB

type ttB__ref = { ttB__content : ttB
}

function ttB__ref___projection(a: ttB__ref) : ttB = (a).ttB__content

logic to_rep : ttB -> int

logic of_rep : int -> ttB

axiom inversion_axiom : (forall x:ttB [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:ttB [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type t

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref___projection(a: t__ref) : t = (a).t__content

logic to_rep1 : t -> int

logic of_rep1 : int -> t

axiom inversion_axiom1 : (forall x:t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:t [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

type t1

logic first : t1 -> ttB

logic last : t1 -> ttB

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t1
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,integer) farray

logic dummy4 : t1

type a__ref = { a__content : us_t
}

function a__ref___projection(a: a__ref) : us_t = (a).a__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : ttB, ttB -> bool

logic dummy5 : ttB

type t3b__ref = { t3b__content : ttB
}

function t3b__ref___projection(a: t3b__ref) : ttB = (a).t3b__content

type t2

logic first2 : t2 -> ttB

logic last2 : t2 -> ttB

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,integer) farray

logic dummy7 : t2

type t4b__ref = { t4b__content : us_t1
}

function t4b__ref___projection(a: t4b__ref) : us_t1 = (a).t4b__content

type us_split_discrs = { rec__proc__r__length : t
}

function us_split_discrs___projection(a: us_split_discrs) : t =
  (a).rec__proc__r__length

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__proc__r__contents : us_t1
}

function us_split_fields_Contents__projection(a: us_split_fields) : us_t1 =
  (a).rec__proc__r__contents

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__proc__r__length) = to_rep1(((b).us_split_discrs1).rec__proc__r__length)) and
  (bool_eq7(((a).us_split_fields1).rec__proc__r__contents,
  ((b).us_split_fields1).rec__proc__r__contents) = true)) -> (bool_eq8(a,
  b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__proc__r__length) = to_rep1(((b).us_split_discrs1).rec__proc__r__length)) and
  (bool_eq7(((a).us_split_fields1).rec__proc__r__contents,
  ((b).us_split_fields1).rec__proc__r__contents) = true))) -> (bool_eq8(a,
  b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:t. forall a1:(int,integer) farray. forall a2:t2.
  (0 <= object__size2({ us_split_discrs1 = { rec__proc__r__length = a };
  us_split_fields1 = { rec__proc__r__contents = { elts1 = a1; rt1 = a2 } }
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:t. forall a1:(int,integer) farray. forall a2:t2.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__proc__r__length = a };
  us_split_fields1 = { rec__proc__r__contents = { elts1 = a1; rt1 = a2 } }
  })))

logic proc__r__length__first__bit : int

logic proc__r__length__last__bit : int

logic proc__r__length__position : int

axiom proc__r__length__first__bit_axiom : (0 <= proc__r__length__first__bit)

axiom proc__r__length__last__bit_axiom :
  (proc__r__length__first__bit <  proc__r__length__last__bit)

axiom proc__r__length__position_axiom : (0 <= proc__r__length__position)

logic proc__r__contents__first__bit : int

logic proc__r__contents__last__bit : int

logic proc__r__contents__position : int

axiom proc__r__contents__first__bit_axiom :
  (0 <= proc__r__contents__first__bit)

axiom proc__r__contents__last__bit_axiom :
  (proc__r__contents__first__bit <  proc__r__contents__last__bit)

axiom proc__r__contents__position_axiom : (0 <= proc__r__contents__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy8 : t

logic dummy9 : (int,integer) farray

logic dummy10 : t2

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

logic f : int -> us_t

logic f__function_guard : us_t, int -> prop

axiom f__post_axiom :
  (forall x:int [f(x)]. (in_range2(x) -> dynamic_property(1, 10,
  to_rep(first((f(x)).rt)), to_rep(last((f(x)).rt)))))

logic item__first : ttB

logic item__last : ttB

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : ttB, ttB -> bool

logic dummy11 : ttB

type tT14bP1__ref = { tT14bP1__content : ttB
}

function tT14bP1__ref___projection(a: tT14bP1__ref) : ttB =
  (a).tT14bP1__content

type t3

logic first4 : t3 -> ttB

logic last4 : t3 -> ttB

logic mk2 : int, int -> t3

axiom mk_def2 :
  (forall f1:int. forall l:int [mk2(f1, l)]. (in_range(f1) -> (in_range(l) ->
  ((to_rep(first4(mk2(f1, l))) = f1) and (to_rep(last4(mk2(f1, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t3
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f1: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f1, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq8 : us_t2, us_t2 -> bool

logic dummy12 : (int,integer) farray

logic dummy13 : t3

type t14b__ref = { t14b__content : us_t2
}

function t14b__ref___projection(a: t14b__ref) : us_t2 = (a).t14b__content

type us_split_fields2 = { rec__proc__r__contents1 : us_t2
}

function us_split_fields_Contents__2__projection(a: us_split_fields2) : us_t2 =
  (a).rec__proc__r__contents1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__proc__r__contents =
  of_array1(to_array2(((a).us_split_fields3).rec__proc__r__contents1),
  first5(((a).us_split_fields3).rec__proc__r__contents1),
  last5(((a).us_split_fields3).rec__proc__r__contents1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__proc__r__contents1 =
  of_array2(to_array1(((r).us_split_fields1).rec__proc__r__contents),
  first3(((r).us_split_fields1).rec__proc__r__contents),
  last3(((r).us_split_fields1).rec__proc__r__contents)) } }

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((to_rep1(((a).us_split_discrs2).rec__proc__r__length) = to_rep1(((b).us_split_discrs2).rec__proc__r__length)) and
  (bool_eq10(((a).us_split_fields3).rec__proc__r__contents1,
  ((b).us_split_fields3).rec__proc__r__contents1) = true)) -> (bool_eq11(a,
  b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs2).rec__proc__r__length) = to_rep1(((b).us_split_discrs2).rec__proc__r__length)) and
  (bool_eq10(((a).us_split_fields3).rec__proc__r__contents1,
  ((b).us_split_fields3).rec__proc__r__contents1) = true))) -> (bool_eq11(a,
  b) = false))))

predicate in_range3(rec__proc__r__length1: int, a: us_rep) =
  (rec__proc__r__length1 = to_rep1(((a).us_split_discrs1).rec__proc__r__length))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:t. forall a1:(int,integer) farray. forall a2:t3.
  (0 <= object__size4({ us_split_discrs2 = { rec__proc__r__length = a };
  us_split_fields3 = { rec__proc__r__contents1 = { elts2 = a1; rt2 = a2 } }
  })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:t. forall a1:(int,integer) farray. forall a2:t3.
  (0 <= object__alignment4({ us_split_discrs2 = { rec__proc__r__length = a };
  us_split_fields3 = { rec__proc__r__contents1 = { elts2 = a1; rt2 = a2 } }
  })))

logic proc__r__length__first__bit1 : int

logic proc__r__length__last__bit1 : int

logic proc__r__length__position1 : int

axiom proc__r__length__first__bit_axiom1 :
  (0 <= proc__r__length__first__bit1)

axiom proc__r__length__last__bit_axiom1 :
  (proc__r__length__first__bit1 <  proc__r__length__last__bit1)

axiom proc__r__length__position_axiom1 : (0 <= proc__r__length__position1)

logic proc__r__contents__first__bit1 : int

logic proc__r__contents__last__bit1 : int

logic proc__r__contents__position1 : int

axiom proc__r__contents__first__bit_axiom1 :
  (0 <= proc__r__contents__first__bit1)

axiom proc__r__contents__last__bit_axiom1 :
  (proc__r__contents__first__bit1 <  proc__r__contents__last__bit1)

axiom proc__r__contents__position_axiom1 :
  (0 <= proc__r__contents__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy14 : t

logic dummy15 : (int,integer) farray

logic dummy16 : t3

type t13b__ref = { t13b__content : us_rep1
}

function t13b__ref___projection(a: t13b__ref) : us_rep1 = (a).t13b__content

logic dr__split_discrs : t

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "proc.adb", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall item:(int,integer) farray.
  forall proc__p__item__assume:(int,integer) farray.
  forall proc__p__item__assume1:t1. forall o:int. forall o1:int.
  forall o2:(int,integer) farray. forall o3:t3.
  forall o4:(int,integer) farray. forall o5:t3.
  forall result:(int,integer) farray. forall item1:(int,integer) farray.
  (((({ elts = proc__p__item__assume; rt = proc__p__item__assume1
  } = f(3)) and dynamic_property(1, 10,
  to_rep(first(proc__p__item__assume1)),
  to_rep(last(proc__p__item__assume1)))) and (((result = item) and
  (item1 = proc__p__item__assume)) and
  ((to_rep(item__first) = to_rep(first(proc__p__item__assume1))) and
  (to_rep(item__last) = to_rep(last(proc__p__item__assume1)))))) ->
  (dynamic_property(1, 10, to_rep(item__first), to_rep(item__last)) ->
  ((((((to_rep(item__first) <= to_rep(item__last)) and
  (((((to_rep(item__first) <= to_rep(item__last)) and
  (1 <= ((to_rep(item__last) - to_rep(item__first)) + 1))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and (1 <= 0))) and
  (((to_rep(item__first) <= to_rep(item__last)) and
  (((to_rep(item__last) - to_rep(item__first)) + 1) = ((((to_rep(item__last) - to_rep(item__first)) + 1) - 1) + 1))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and
  (((to_rep(item__last) - to_rep(item__first)) + 1) = ((0 - 1) + 1))))) or
  ((not (((to_rep(item__first) <= to_rep(item__last)) ->
  (1 <= ((to_rep(item__last) - to_rep(item__first)) + 1))) and
  ((not (to_rep(item__first) <= to_rep(item__last))) -> (1 <= 0)))) and
  (((to_rep(item__last) - to_rep(item__first)) + 1) = 0)))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and
  (((((to_rep(item__first) <= to_rep(item__last)) and
  (1 <= ((to_rep(item__last) - to_rep(item__first)) + 1))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and (1 <= 0))) and
  (((to_rep(item__first) <= to_rep(item__last)) and
  (0 = ((((to_rep(item__last) - to_rep(item__first)) + 1) - 1) + 1))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and
  (0 = ((0 - 1) + 1))))) or
  (not (((to_rep(item__first) <= to_rep(item__last)) ->
  (1 <= ((to_rep(item__last) - to_rep(item__first)) + 1))) and
  ((not (to_rep(item__first) <= to_rep(item__last))) -> (1 <= 0))))))) and
  ((((to_rep(item__first) <= to_rep(item__last)) and
  (o1 = ((to_rep(item__last) - to_rep(item__first)) + 1))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and (o1 = 0))) and
  ((slide(item1, to_rep(item__first), 1) = o2) and (mk2(1, o1) = o3)))) and
  ((o4 = o2) and (o5 = o3))) ->
  ((((to_rep(item__first) <= to_rep(item__last)) and
  (o = ((to_rep(item__last) - to_rep(item__first)) + 1))) or
  ((not (to_rep(item__first) <= to_rep(item__last))) and (o = 0))) ->
  in_range1(o))))))
