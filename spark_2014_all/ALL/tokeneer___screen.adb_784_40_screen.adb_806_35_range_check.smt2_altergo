(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type statscount

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : statscount, statscount -> bool

logic dummy5 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep2 : statscount -> int

logic of_rep2 : int -> statscount

axiom inversion_axiom2 :
  (forall x:statscount [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:statscount [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((((to_rep2(((a).us_split_fields1).rec__stats__t__successentry) = to_rep2(((b).us_split_fields1).rec__stats__t__successentry)) and
  (to_rep2(((a).us_split_fields1).rec__stats__t__failentry) = to_rep2(((b).us_split_fields1).rec__stats__t__failentry))) and
  (to_rep2(((a).us_split_fields1).rec__stats__t__successbio) = to_rep2(((b).us_split_fields1).rec__stats__t__successbio))) and
  (to_rep2(((a).us_split_fields1).rec__stats__t__failbio) = to_rep2(((b).us_split_fields1).rec__stats__t__failbio))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields1).rec__stats__t__successentry) = to_rep2(((b).us_split_fields1).rec__stats__t__successentry)) and
  (to_rep2(((a).us_split_fields1).rec__stats__t__failentry) = to_rep2(((b).us_split_fields1).rec__stats__t__failentry))) and
  (to_rep2(((a).us_split_fields1).rec__stats__t__successbio) = to_rep2(((b).us_split_fields1).rec__stats__t__successbio))) and
  (to_rep2(((a).us_split_fields1).rec__stats__t__failbio) = to_rep2(((b).us_split_fields1).rec__stats__t__failbio)))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size1({ us_split_fields1 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment1({ us_split_fields1 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : statscount

logic dummy7 : statscount

logic dummy8 : statscount

logic dummy9 : statscount

type t__ref = { t__content : us_rep
}

function t__ref_4__projection(a: t__ref) : us_rep = (a).t__content

type us_split_fields2 = { rec__screen__screenstatst__isdisplayed : bool;
rec__screen__screenstatst__data : us_rep
}

function us_split_fields_IsDisplayed__projection(a: us_split_fields2) : bool =
  (a).rec__screen__screenstatst__isdisplayed

function us_split_fields_Data__projection(a: us_split_fields2) : us_rep =
  (a).rec__screen__screenstatst__data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_11__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_12__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((((a).us_split_fields3).rec__screen__screenstatst__isdisplayed = ((b).us_split_fields3).rec__screen__screenstatst__isdisplayed) and
  (bool_eq8(((a).us_split_fields3).rec__screen__screenstatst__data,
  ((b).us_split_fields3).rec__screen__screenstatst__data) = true)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((((a).us_split_fields3).rec__screen__screenstatst__isdisplayed = ((b).us_split_fields3).rec__screen__screenstatst__isdisplayed) and
  (bool_eq8(((a).us_split_fields3).rec__screen__screenstatst__data,
  ((b).us_split_fields3).rec__screen__screenstatst__data) = true))) ->
  (bool_eq9(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. forall a4:statscount. (0 <= object__size2({
  us_split_fields3 = { rec__screen__screenstatst__isdisplayed = a;
  rec__screen__screenstatst__data = { us_split_fields1 = {
  rec__stats__t__successentry = a1; rec__stats__t__failentry = a2;
  rec__stats__t__successbio = a3; rec__stats__t__failbio = a4 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. forall a4:statscount. (0 <= object__alignment2({
  us_split_fields3 = { rec__screen__screenstatst__isdisplayed = a;
  rec__screen__screenstatst__data = { us_split_fields1 = {
  rec__stats__t__successentry = a1; rec__stats__t__failentry = a2;
  rec__stats__t__successbio = a3; rec__stats__t__failbio = a4 } } } })))

logic screen__screenstatst__isdisplayed__first__bit : int

logic screen__screenstatst__isdisplayed__last__bit : int

logic screen__screenstatst__isdisplayed__position : int

axiom screen__screenstatst__isdisplayed__first__bit_axiom :
  (0 <= screen__screenstatst__isdisplayed__first__bit)

axiom screen__screenstatst__isdisplayed__last__bit_axiom :
  (screen__screenstatst__isdisplayed__first__bit <  screen__screenstatst__isdisplayed__last__bit)

axiom screen__screenstatst__isdisplayed__position_axiom :
  (0 <= screen__screenstatst__isdisplayed__position)

logic screen__screenstatst__data__first__bit : int

logic screen__screenstatst__data__last__bit : int

logic screen__screenstatst__data__position : int

axiom screen__screenstatst__data__first__bit_axiom :
  (0 <= screen__screenstatst__data__first__bit)

axiom screen__screenstatst__data__last__bit_axiom :
  (screen__screenstatst__data__first__bit <  screen__screenstatst__data__last__bit)

axiom screen__screenstatst__data__position_axiom :
  (0 <= screen__screenstatst__data__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy10 : bool

logic dummy11 : statscount

logic dummy12 : statscount

logic dummy13 : statscount

logic dummy14 : statscount

type screenstatst__ref = { screenstatst__content : us_rep1
}

function screenstatst__ref___projection(a: screenstatst__ref) : us_rep1 =
  (a).screenstatst__content

logic attr__ATTRIBUTE_ADDRESS : int

type screenxcoordt

predicate in_range5(x: int) = ((0 <= x) and (x <= 79))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : screenxcoordt, screenxcoordt -> bool

logic dummy15 : screenxcoordt

type screenxcoordt__ref = { screenxcoordt__content : screenxcoordt
}

function screenxcoordt__ref___projection(a: screenxcoordt__ref) : screenxcoordt =
  (a).screenxcoordt__content

logic to_rep3 : screenxcoordt -> int

logic of_rep3 : int -> screenxcoordt

axiom inversion_axiom3 :
  (forall x:screenxcoordt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:screenxcoordt [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type screenycoordt

predicate in_range6(x: int) = ((0 <= x) and (x <= 29))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : screenycoordt, screenycoordt -> bool

logic dummy16 : screenycoordt

type screenycoordt__ref = { screenycoordt__content : screenycoordt
}

function screenycoordt__ref___projection(a: screenycoordt__ref) : screenycoordt =
  (a).screenycoordt__content

logic to_rep4 : screenycoordt -> int

logic of_rep4 : int -> screenycoordt

axiom inversion_axiom4 :
  (forall x:screenycoordt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:screenycoordt [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields4 = { rec__screen__interfac__xycoordt__x : screenxcoordt;
rec__screen__interfac__xycoordt__y : screenycoordt
}

function us_split_fields_X__projection(a: us_split_fields4) : screenxcoordt =
  (a).rec__screen__interfac__xycoordt__x

function us_split_fields_Y__projection(a: us_split_fields4) : screenycoordt =
  (a).rec__screen__interfac__xycoordt__y

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_10__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_11__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq12(a, b)].
  ((((to_rep3(((a).us_split_fields5).rec__screen__interfac__xycoordt__x) = to_rep3(((b).us_split_fields5).rec__screen__interfac__xycoordt__x)) and
  (to_rep4(((a).us_split_fields5).rec__screen__interfac__xycoordt__y) = to_rep4(((b).us_split_fields5).rec__screen__interfac__xycoordt__y))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_fields5).rec__screen__interfac__xycoordt__x) = to_rep3(((b).us_split_fields5).rec__screen__interfac__xycoordt__x)) and
  (to_rep4(((a).us_split_fields5).rec__screen__interfac__xycoordt__y) = to_rep4(((b).us_split_fields5).rec__screen__interfac__xycoordt__y)))) ->
  (bool_eq12(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:screenxcoordt. forall a1:screenycoordt. (0 <= object__size3({
  us_split_fields5 = { rec__screen__interfac__xycoordt__x = a;
  rec__screen__interfac__xycoordt__y = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:screenxcoordt. forall a1:screenycoordt.
  (0 <= object__alignment3({ us_split_fields5 = {
  rec__screen__interfac__xycoordt__x = a;
  rec__screen__interfac__xycoordt__y = a1 } })))

logic screen__interfac__xycoordt__x__first__bit : int

logic screen__interfac__xycoordt__x__last__bit : int

logic screen__interfac__xycoordt__x__position : int

axiom screen__interfac__xycoordt__x__first__bit_axiom :
  (0 <= screen__interfac__xycoordt__x__first__bit)

axiom screen__interfac__xycoordt__x__last__bit_axiom :
  (screen__interfac__xycoordt__x__first__bit <  screen__interfac__xycoordt__x__last__bit)

axiom screen__interfac__xycoordt__x__position_axiom :
  (0 <= screen__interfac__xycoordt__x__position)

logic screen__interfac__xycoordt__y__first__bit : int

logic screen__interfac__xycoordt__y__last__bit : int

logic screen__interfac__xycoordt__y__position : int

axiom screen__interfac__xycoordt__y__first__bit_axiom :
  (0 <= screen__interfac__xycoordt__y__first__bit)

axiom screen__interfac__xycoordt__y__last__bit_axiom :
  (screen__interfac__xycoordt__y__first__bit <  screen__interfac__xycoordt__y__last__bit)

axiom screen__interfac__xycoordt__y__position_axiom :
  (0 <= screen__interfac__xycoordt__y__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy17 : screenxcoordt

logic dummy18 : screenycoordt

type xycoordt__ref = { xycoordt__content : us_rep2
}

function xycoordt__ref___projection(a: xycoordt__ref) : us_rep2 =
  (a).xycoordt__content

type statscountstringi

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : statscountstringi, statscountstringi -> bool

logic dummy19 : statscountstringi

type statscountstringi__ref = { statscountstringi__content :
statscountstringi
}

function statscountstringi__ref___projection(a: statscountstringi__ref) : statscountstringi =
  (a).statscountstringi__content

logic thestats : statscount

logic thestats1 : statscount

logic thestats2 : statscount

logic thestats3 : statscount

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic c248b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic data__first : integer

logic data__last : integer

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy20 : integer

type t254b__ref = { t254b__content : integer
}

function t254b__ref___projection(a: t254b__ref) : integer =
  (a).t254b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq15(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq12 : us_t1, us_t1 -> bool

logic dummy21 : (int,character) farray

logic dummy22 : t1

type t255b__ref = { t255b__content : us_t1
}

function t255b__ref___projection(a: t255b__ref) : us_t1 = (a).t255b__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : integer, integer -> bool

logic dummy23 : integer

type t257b__ref = { t257b__content : integer
}

function t257b__ref___projection(a: t257b__ref) : integer =
  (a).t257b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq17(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq14 : us_t2, us_t2 -> bool

logic dummy24 : (int,character) farray

logic dummy25 : t2

type t258b__ref = { t258b__content : us_t2
}

function t258b__ref___projection(a: t258b__ref) : us_t2 = (a).t258b__content

logic c259b : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic data__first1 : integer

logic data__last1 : integer

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq15 : integer, integer -> bool

logic dummy26 : integer

type t265b__ref = { t265b__content : integer
}

function t265b__ref___projection(a: t265b__ref) : integer =
  (a).t265b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,character) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,character) farray. (0 <= object__alignment6(a)))

function bool_eq19(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq16 : us_t3, us_t3 -> bool

logic dummy27 : (int,character) farray

logic dummy28 : t3

type t266b__ref = { t266b__content : us_t3
}

function t266b__ref___projection(a: t266b__ref) : us_t3 = (a).t266b__content

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq17 : integer, integer -> bool

logic dummy29 : integer

type t268b__ref = { t268b__content : integer
}

function t268b__ref___projection(a: t268b__ref) : integer =
  (a).t268b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,character) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,character) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,character) farray. (0 <= object__alignment7(a)))

function bool_eq21(x: us_t4, y: us_t4) : bool = bool_eq5((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq18 : us_t4, us_t4 -> bool

logic dummy30 : (int,character) farray

logic dummy31 : t4

type t269b__ref = { t269b__content : us_t4
}

function t269b__ref___projection(a: t269b__ref) : us_t4 = (a).t269b__content

logic c270b : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic data__first2 : integer

logic data__last2 : integer

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

predicate dynamic_property9(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq19 : integer, integer -> bool

logic dummy32 : integer

type t276b__ref = { t276b__content : integer
}

function t276b__ref___projection(a: t276b__ref) : integer =
  (a).t276b__content

type t5

logic first10 : t5 -> integer

logic last10 : t5 -> integer

logic mk5 : int, int -> t5

axiom mk_def5 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first10(mk5(f, l))) = f) and (to_rep1(last10(mk5(f, l))) = l)))))

predicate dynamic_property10(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property9(range_first, range_last, low) and
  dynamic_property9(range_first, range_last, high)))))

type us_t5 = { elts5 : (int,character) farray; rt5 : t5
}

function to_array5(a: us_t5) : (int,character) farray = (a).elts5

function of_array5(a: (int,character) farray, f: int, l: int) : us_t5 = {
  elts5 = a; rt5 = mk5(f, l) }

function first11(a: us_t5) : int = to_rep1(first10((a).rt5))

function last11(a: us_t5) : int = to_rep1(last10((a).rt5))

logic length5 : us_t5 -> int

axiom length_def5 :
  (forall a:us_t5 [length5(a)]. (((first11(a) <= last11(a)) ->
  (length5(a) = ((last11(a) - first11(a)) + 1))) and
  ((not (first11(a) <= last11(a))) -> (length5(a) = 0))))

logic value__size8 : int

logic object__size8 : (int,character) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,character) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,character) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,character) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,character) farray. (0 <= object__alignment8(a)))

function bool_eq23(x: us_t5, y: us_t5) : bool = bool_eq5((x).elts5,
  to_rep1(first10((x).rt5)), to_rep1(last10((x).rt5)), (y).elts5,
  to_rep1(first10((y).rt5)), to_rep1(last10((y).rt5)))

logic user_eq20 : us_t5, us_t5 -> bool

logic dummy33 : (int,character) farray

logic dummy34 : t5

type t277b__ref = { t277b__content : us_t5
}

function t277b__ref___projection(a: t277b__ref) : us_t5 = (a).t277b__content

predicate dynamic_property11(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq21 : integer, integer -> bool

logic dummy35 : integer

type t279b__ref = { t279b__content : integer
}

function t279b__ref___projection(a: t279b__ref) : integer =
  (a).t279b__content

type t6

logic first12 : t6 -> integer

logic last12 : t6 -> integer

logic mk6 : int, int -> t6

axiom mk_def6 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first12(mk6(f, l))) = f) and (to_rep1(last12(mk6(f, l))) = l)))))

predicate dynamic_property12(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property11(range_first, range_last, low) and
  dynamic_property11(range_first, range_last, high)))))

type us_t6 = { elts6 : (int,character) farray; rt6 : t6
}

function to_array6(a: us_t6) : (int,character) farray = (a).elts6

function of_array6(a: (int,character) farray, f: int, l: int) : us_t6 = {
  elts6 = a; rt6 = mk6(f, l) }

function first13(a: us_t6) : int = to_rep1(first12((a).rt6))

function last13(a: us_t6) : int = to_rep1(last12((a).rt6))

logic length6 : us_t6 -> int

axiom length_def6 :
  (forall a:us_t6 [length6(a)]. (((first13(a) <= last13(a)) ->
  (length6(a) = ((last13(a) - first13(a)) + 1))) and
  ((not (first13(a) <= last13(a))) -> (length6(a) = 0))))

logic value__size9 : int

logic object__size9 : (int,character) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,character) farray -> int

logic value__alignment9 : int

logic object__alignment9 : (int,character) farray -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,character) farray. (0 <= object__size9(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__component__size6(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,character) farray. (0 <= object__alignment9(a)))

function bool_eq25(x: us_t6, y: us_t6) : bool = bool_eq5((x).elts6,
  to_rep1(first12((x).rt6)), to_rep1(last12((x).rt6)), (y).elts6,
  to_rep1(first12((y).rt6)), to_rep1(last12((y).rt6)))

logic user_eq22 : us_t6, us_t6 -> bool

logic dummy36 : (int,character) farray

logic dummy37 : t6

type t280b__ref = { t280b__content : us_t6
}

function t280b__ref___projection(a: t280b__ref) : us_t6 = (a).t280b__content

logic c281b : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic attr__ATTRIBUTE_ADDRESS21 : int

logic data__first3 : integer

logic data__last3 : integer

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

predicate dynamic_property13(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq23 : integer, integer -> bool

logic dummy38 : integer

type t287b__ref = { t287b__content : integer
}

function t287b__ref___projection(a: t287b__ref) : integer =
  (a).t287b__content

type t7

logic first14 : t7 -> integer

logic last14 : t7 -> integer

logic mk7 : int, int -> t7

axiom mk_def7 :
  (forall f:int. forall l:int [mk7(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first14(mk7(f, l))) = f) and (to_rep1(last14(mk7(f, l))) = l)))))

predicate dynamic_property14(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property13(range_first, range_last, low) and
  dynamic_property13(range_first, range_last, high)))))

type us_t7 = { elts7 : (int,character) farray; rt7 : t7
}

function to_array7(a: us_t7) : (int,character) farray = (a).elts7

function of_array7(a: (int,character) farray, f: int, l: int) : us_t7 = {
  elts7 = a; rt7 = mk7(f, l) }

function first15(a: us_t7) : int = to_rep1(first14((a).rt7))

function last15(a: us_t7) : int = to_rep1(last14((a).rt7))

logic length7 : us_t7 -> int

axiom length_def7 :
  (forall a:us_t7 [length7(a)]. (((first15(a) <= last15(a)) ->
  (length7(a) = ((last15(a) - first15(a)) + 1))) and
  ((not (first15(a) <= last15(a))) -> (length7(a) = 0))))

logic value__size10 : int

logic object__size10 : (int,character) farray -> int

logic value__component__size7 : int

logic object__component__size7 : (int,character) farray -> int

logic value__alignment10 : int

logic object__alignment10 : (int,character) farray -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:(int,character) farray. (0 <= object__size10(a)))

axiom value__component__size_axiom7 : (0 <= value__component__size7)

axiom object__component__size_axiom7 :
  (forall a:(int,character) farray. (0 <= object__component__size7(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:(int,character) farray. (0 <= object__alignment10(a)))

function bool_eq27(x: us_t7, y: us_t7) : bool = bool_eq5((x).elts7,
  to_rep1(first14((x).rt7)), to_rep1(last14((x).rt7)), (y).elts7,
  to_rep1(first14((y).rt7)), to_rep1(last14((y).rt7)))

logic user_eq24 : us_t7, us_t7 -> bool

logic dummy39 : (int,character) farray

logic dummy40 : t7

type t288b__ref = { t288b__content : us_t7
}

function t288b__ref___projection(a: t288b__ref) : us_t7 = (a).t288b__content

predicate dynamic_property15(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq25 : integer, integer -> bool

logic dummy41 : integer

type t290b__ref = { t290b__content : integer
}

function t290b__ref___projection(a: t290b__ref) : integer =
  (a).t290b__content

type t8

logic first16 : t8 -> integer

logic last16 : t8 -> integer

logic mk8 : int, int -> t8

axiom mk_def8 :
  (forall f:int. forall l:int [mk8(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first16(mk8(f, l))) = f) and (to_rep1(last16(mk8(f, l))) = l)))))

predicate dynamic_property16(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property15(range_first, range_last, low) and
  dynamic_property15(range_first, range_last, high)))))

type us_t8 = { elts8 : (int,character) farray; rt8 : t8
}

function to_array8(a: us_t8) : (int,character) farray = (a).elts8

function of_array8(a: (int,character) farray, f: int, l: int) : us_t8 = {
  elts8 = a; rt8 = mk8(f, l) }

function first17(a: us_t8) : int = to_rep1(first16((a).rt8))

function last17(a: us_t8) : int = to_rep1(last16((a).rt8))

logic length8 : us_t8 -> int

axiom length_def8 :
  (forall a:us_t8 [length8(a)]. (((first17(a) <= last17(a)) ->
  (length8(a) = ((last17(a) - first17(a)) + 1))) and
  ((not (first17(a) <= last17(a))) -> (length8(a) = 0))))

logic value__size11 : int

logic object__size11 : (int,character) farray -> int

logic value__component__size8 : int

logic object__component__size8 : (int,character) farray -> int

logic value__alignment11 : int

logic object__alignment11 : (int,character) farray -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:(int,character) farray. (0 <= object__size11(a)))

axiom value__component__size_axiom8 : (0 <= value__component__size8)

axiom object__component__size_axiom8 :
  (forall a:(int,character) farray. (0 <= object__component__size8(a)))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:(int,character) farray. (0 <= object__alignment11(a)))

function bool_eq29(x: us_t8, y: us_t8) : bool = bool_eq5((x).elts8,
  to_rep1(first16((x).rt8)), to_rep1(last16((x).rt8)), (y).elts8,
  to_rep1(first16((y).rt8)), to_rep1(last16((y).rt8)))

logic user_eq26 : us_t8, us_t8 -> bool

logic dummy42 : (int,character) farray

logic dummy43 : t8

type t291b__ref = { t291b__content : us_t8
}

function t291b__ref___projection(a: t291b__ref) : us_t8 = (a).t291b__content

logic screen__writestatsdata__B251b__result__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___1409:int.
  (forall temp___1410:int.
  ((screen__writestatsdata__B251b__result__aggregate_def(temp___1409)[temp___1410]) = of_rep(temp___1409))))

logic screen__writestatsdata__B262b__result__aggregate_def : int -> (int,character) farray

axiom def_axiom1 :
  (forall temp___1422:int.
  (forall temp___1423:int.
  ((screen__writestatsdata__B262b__result__aggregate_def(temp___1422)[temp___1423]) = of_rep(temp___1422))))

logic screen__writestatsdata__B273b__result__aggregate_def : int -> (int,character) farray

axiom def_axiom2 :
  (forall temp___1435:int.
  (forall temp___1436:int.
  ((screen__writestatsdata__B273b__result__aggregate_def(temp___1435)[temp___1436]) = of_rep(temp___1435))))

logic screen__writestatsdata__B284b__result__aggregate_def : int -> (int,character) farray

axiom def_axiom3 :
  (forall temp___1448:int.
  (forall temp___1449:int.
  ((screen__writestatsdata__B284b__result__aggregate_def(temp___1448)[temp___1449]) = of_rep(temp___1448))))

 (* File "screen.adb", line 712, characters 0-0 *)
goal WP_parameter_def :
  (forall currentstats__split_fields:bool.
  forall currentstats__split_fields1:statscount.
  forall currentstats__split_fields2:statscount.
  forall currentstats__split_fields3:statscount.
  forall currentstats__split_fields4:statscount. forall successentry:int.
  forall failentry:int. forall successbio:int. forall failbio:int.
  forall data:(int,character) farray. forall result__:(int,character) farray.
  forall successentry1:int. forall failentry1:int. forall successbio1:int.
  forall failbio1:int. forall result:map__ref.
  forall data1:(int,character) farray. forall result1:map__ref.
  forall result__1:(int,character) farray. (((0 <= 2147483647) ->
  in_range4(successentry)) -> (((0 <= 2147483647) -> in_range4(failentry)) ->
  (((0 <= 2147483647) -> in_range4(successbio)) -> (((0 <= 2147483647) ->
  in_range4(failbio)) -> (((currentstats__split_fields = true) ->
  (not (bool_eq8({ us_split_fields1 = { rec__stats__t__successentry =
  currentstats__split_fields1; rec__stats__t__failentry =
  currentstats__split_fields2; rec__stats__t__successbio =
  currentstats__split_fields3; rec__stats__t__failbio =
  currentstats__split_fields4 } }, { us_split_fields1 = {
  rec__stats__t__successentry = thestats; rec__stats__t__failentry =
  thestats1; rec__stats__t__successbio = thestats2; rec__stats__t__failbio =
  thestats3 } }) = true))) -> ((((in_range4(successentry1) and
  in_range4(failentry1)) and in_range4(successbio1)) and
  in_range4(failbio1)) -> (((successentry1 = c248b) and in_range4(c248b)) ->
  ((((result = { map__content = data }) and
  (data1 = (to_string(attr__ATTRIBUTE_IMAGE4(c248b))).elts)) and
  ((to_rep1(data__first) = to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE4(c248b))).rt))) and
  (to_rep1(data__last) = to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE4(c248b))).rt))))) ->
  (dynamic_property(1, 2147483647, to_rep1(data__first),
  to_rep1(data__last)) -> (((result1 = { map__content = result__ }) and
  (result__1 = screen__writestatsdata__B251b__result__aggregate_def(32))) ->
  ((2 <= to_rep1(data__last)) -> (to_rep1(data__first) <= 2)))))))))))))
