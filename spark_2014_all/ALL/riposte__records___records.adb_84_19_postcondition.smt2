;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned_byte 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (unsigned_byte unsigned_byte) Bool)

(declare-const dummy unsigned_byte)

(declare-datatypes ((unsigned_byte__ref 0))
(((mk_unsigned_byte__ref (unsigned_byte__content unsigned_byte)))))
(define-fun unsigned_byte__ref___projection ((a unsigned_byte__ref)) unsigned_byte
  (unsigned_byte__content a))

(declare-fun to_rep (unsigned_byte) Int)

(declare-fun of_rep (Int) unsigned_byte)

;; inversion_axiom
  (assert
  (forall ((x unsigned_byte))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned_byte)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__records_prooffuncs__pair__a unsigned_byte)(rec__records_prooffuncs__pair__b unsigned_byte)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) unsigned_byte
  (rec__records_prooffuncs__pair__a a))

(define-fun us_split_fields_B__projection ((a us_split_fields)) unsigned_byte
  (rec__records_prooffuncs__pair__b a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__records_prooffuncs__pair__a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__records_prooffuncs__pair__a
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__records_prooffuncs__pair__b
                           (us_split_fields1 a))) (to_rep
                                                  (rec__records_prooffuncs__pair__b
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const records_prooffuncs__pair__a__first__bit Int)

(declare-const records_prooffuncs__pair__a__last__bit Int)

(declare-const records_prooffuncs__pair__a__position Int)

;; records_prooffuncs__pair__a__first__bit_axiom
  (assert (<= 0 records_prooffuncs__pair__a__first__bit))

;; records_prooffuncs__pair__a__last__bit_axiom
  (assert
  (< records_prooffuncs__pair__a__first__bit records_prooffuncs__pair__a__last__bit))

;; records_prooffuncs__pair__a__position_axiom
  (assert (<= 0 records_prooffuncs__pair__a__position))

(declare-const records_prooffuncs__pair__b__first__bit Int)

(declare-const records_prooffuncs__pair__b__last__bit Int)

(declare-const records_prooffuncs__pair__b__position Int)

;; records_prooffuncs__pair__b__first__bit_axiom
  (assert (<= 0 records_prooffuncs__pair__b__first__bit))

;; records_prooffuncs__pair__b__last__bit_axiom
  (assert
  (< records_prooffuncs__pair__b__first__bit records_prooffuncs__pair__b__last__bit))

;; records_prooffuncs__pair__b__position_axiom
  (assert (<= 0 records_prooffuncs__pair__b__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((pair__ref 0)) (((mk_pair__ref (pair__content us_rep)))))
(define-fun pair__ref___projection ((a pair__ref)) us_rep (pair__content a))

(declare-fun add_pair_a (us_rep us_rep) us_rep)

(declare-fun add_pair_a__function_guard (us_rep us_rep us_rep) Bool)

;; add_pair_a__post_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (=>
     (and (in_range1
     (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a)))
     (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
     (in_range1
     (+ (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a)))
     (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))
     (= (bool_eq (add_pair_a a b)
        (mk___rep
        (mk___split_fields
        (of_rep
        (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a)))
        (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
        (of_rep
        (+ (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a)))
        (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))) true)) :pattern (
  (add_pair_a a b)) )))

(declare-const a us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 0 255)) (in_range1
                                      temp___expr_180)))

(declare-const r__split_fields unsigned_byte)

(declare-const r__split_fields1 unsigned_byte)

(declare-const records__safe_add_pair_b__result unsigned_byte)

(declare-const records__safe_add_pair_b__result1 unsigned_byte)

(declare-const temp___276 unsigned_byte)

(declare-const temp___2761 unsigned_byte)

(declare-const o unsigned_byte)

(declare-const o1 unsigned_byte)

(declare-const o2 unsigned_byte)

(declare-const o3 unsigned_byte)

(declare-const temp___275 unsigned_byte)

(declare-const temp___2751 unsigned_byte)

(declare-const result unsigned_byte)

(declare-const result1 unsigned_byte)

(declare-const r__split_fields2 unsigned_byte)

(declare-const r__split_fields3 unsigned_byte)

(declare-const result2 unsigned_byte)

(declare-const result3 unsigned_byte)

(declare-const r__split_fields4 unsigned_byte)

(declare-const r__split_fields5 unsigned_byte)

(declare-const result4 unsigned_byte)

(declare-const result5 unsigned_byte)

(declare-const records__safe_add_pair_b__result2 unsigned_byte)

(declare-const records__safe_add_pair_b__result3 unsigned_byte)

(declare-const records__safe_add_pair_b__result4 pair__ref)

(declare-const records__safe_add_pair_b__result5 us_rep)

(declare-const r__split_fields6 us_split_fields__ref)

(declare-const records__safe_add_pair_b__result6 pair__ref)

(declare-const r__split_fields7 us_split_fields)

(declare-const records__safe_add_pair_b__result7 us_rep)

(define-fun records__safe_add_pair_b__result8 () us_rep (mk___rep
                                                        (mk___split_fields
                                                        records__safe_add_pair_b__result2
                                                        records__safe_add_pair_b__result3)))

(define-fun r__split_fields8 () us_split_fields (mk___split_fields
                                                r__split_fields2
                                                r__split_fields3))

(define-fun temp___2762 () us_rep (mk___rep
                                  (mk___split_fields temp___276 temp___2761)))

(declare-const result6 unsigned_byte)

(declare-const result7 unsigned_byte)

;; H
  (assert
  (=>
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))
  (and (= temp___2762 (add_pair_a a b))
  (= (bool_eq temp___2762
     (mk___rep
     (mk___split_fields
     (of_rep
     (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a)))
     (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
     (of_rep
     (+ (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a)))
     (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))) true))))

;; H
  (assert
  (=>
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))
  (= result r__split_fields)))

;; H
  (assert
  (=>
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))
  (= result1 r__split_fields1)))

;; H
  (assert
  (=>
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))
  (= temp___276 r__split_fields2)))

;; H
  (assert
  (=>
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))
  (= temp___2761 r__split_fields3)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= (to_rep o) 0)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= (to_rep o1) 0)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= o1 o2)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= o o3)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= temp___275 o2)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= temp___2751 o3)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= result2 r__split_fields)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= result3 r__split_fields1)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= temp___275 r__split_fields4)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= temp___2751 r__split_fields5)))

;; H
  (assert
  (=>
  (not
  (and
  (<= (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) 1) (- 255
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
  (<= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (- 255
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))
  (= r__split_fields8 (mk___split_fields r__split_fields4 r__split_fields5))))

;; H
  (assert
  (= records__safe_add_pair_b__result4 (mk_pair__ref
                                       records__safe_add_pair_b__result8)))

;; H
  (assert
  (= records__safe_add_pair_b__result5 records__safe_add_pair_b__result8))

;; H
  (assert (= result4 records__safe_add_pair_b__result))

;; H
  (assert (= result5 records__safe_add_pair_b__result1))

;; H
  (assert (= records__safe_add_pair_b__result2 r__split_fields2))

;; H
  (assert (= records__safe_add_pair_b__result3 r__split_fields3))

;; H
  (assert
  (= records__safe_add_pair_b__result6 records__safe_add_pair_b__result4))

;; H
  (assert (= r__split_fields6 (mk___split_fields__ref r__split_fields8)))

;; H
  (assert
  (= records__safe_add_pair_b__result7 records__safe_add_pair_b__result5))

;; H
  (assert (= r__split_fields7 r__split_fields8))

;; H
  (assert
  (= (mk___rep (mk___split_fields result6 result7)) (pair__content
                                                    records__safe_add_pair_b__result6)))

;; H
  (assert (in_range1
  (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a)))
  (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b))))))

;; H
  (assert (in_range1
  (+ (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a)))
  (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))))

(assert
;; WP_parameter_def
 ;; File "records_prooffuncs.ads", line 11, characters 0-0
  (not
  (= (bool_eq (pair__content records__safe_add_pair_b__result6)
     (mk___rep
     (mk___split_fields
     (of_rep
     (+ (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a)))
     (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))))
     (of_rep
     (+ (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a)))
     (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b)))))))) true)))
(check-sat)
(exit)
