(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type instruction

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : instruction, instruction -> bool

logic dummy5 : instruction

type instruction__ref = { instruction__content : instruction
}

function instruction__ref___projection(a: instruction__ref) : instruction =
  (a).instruction__content

logic to_rep2 : instruction -> int

logic of_rep2 : int -> instruction

axiom inversion_axiom2 :
  (forall x:instruction [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:instruction [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic read : us_t -> int

logic read__function_guard : int, us_t -> prop

axiom read__post_axiom :
  (forall word:(int,character) farray. forall word1:t [read({ elts = word;
  rt = word1 })]. in_range4(read({ elts = word; rt = word1 })))

type us_split_fields = { rec__types__value__e : integer
}

function us_split_fields_E__projection(a: us_split_fields) : integer =
  (a).rec__types__value__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  (((to_rep1(((a).us_split_fields1).rec__types__value__e) = to_rep1(((b).us_split_fields1).rec__types__value__e)) ->
  (bool_eq8(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields1).rec__types__value__e) = to_rep1(((b).us_split_fields1).rec__types__value__e))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. (0 <= object__size1({ us_split_fields1 = {
  rec__types__value__e = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. (0 <= object__alignment1({ us_split_fields1 = {
  rec__types__value__e = a } })))

logic types__value__e__first__bit : int

logic types__value__e__last__bit : int

logic types__value__e__position : int

axiom types__value__e__first__bit_axiom : (0 <= types__value__e__first__bit)

axiom types__value__e__last__bit_axiom :
  (types__value__e__first__bit <  types__value__e__last__bit)

axiom types__value__e__position_axiom : (0 <= types__value__e__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : integer

type value__ref = { value__content : us_rep
}

function value__ref___projection(a: value__ref) : us_rep = (a).value__content

logic read1 : us_t -> us_rep

logic read__function_guard1 : us_rep, us_t -> prop

type operation

predicate in_range5(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : operation, operation -> bool

logic dummy7 : operation

type operation__ref = { operation__content : operation
}

function operation__ref___projection(a: operation__ref) : operation =
  (a).operation__content

logic to_rep3 : operation -> int

logic of_rep3 : int -> operation

axiom inversion_axiom3 :
  (forall x:operation [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:operation [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic read2 : us_t -> int

logic read__function_guard2 : int, us_t -> prop

axiom read__post_axiom1 :
  (forall op:(int,character) farray. forall op1:t [read2({ elts = op; rt =
  op1 })]. in_range5(read2({ elts = op; rt = op1 })))

type token_kind

predicate in_range6(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : token_kind, token_kind -> bool

logic dummy8 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref___projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep4 : token_kind -> int

logic of_rep4 : int -> token_kind

axiom inversion_axiom4 :
  (forall x:token_kind [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:token_kind [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_discrs = { rec__tokens__token__kind : token_kind
}

function us_split_discrs___projection(a: us_split_discrs) : token_kind =
  (a).rec__tokens__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__tokens__token__val : us_rep;
rec__tokens__token__op : operation; rec__tokens__token__instr : instruction
}

function us_split_fields_Val__projection(a: us_split_fields2) : us_rep =
  (a).rec__tokens__token__val

function us_split_fields_Op__projection(a: us_split_fields2) : operation =
  (a).rec__tokens__token__op

function us_split_fields_Instr__projection(a: us_split_fields2) : instruction =
  (a).rec__tokens__token__instr

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__constrained : bool
}

function us_rep_2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_4__projection(a: us_rep1) : bool = (a).attr__constrained

predicate tokens__token__val__pred(a: us_rep1) =
  (to_rep4(((a).us_split_discrs1).rec__tokens__token__kind) = 0)

predicate tokens__token__op__pred(a: us_rep1) =
  (to_rep4(((a).us_split_discrs1).rec__tokens__token__kind) = 1)

predicate tokens__token__instr__pred(a: us_rep1) =
  (to_rep4(((a).us_split_discrs1).rec__tokens__token__kind) = 2)

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((((to_rep4(((a).us_split_discrs1).rec__tokens__token__kind) = to_rep4(((b).us_split_discrs1).rec__tokens__token__kind)) and
  (tokens__token__val__pred(a) ->
  (bool_eq8(((a).us_split_fields3).rec__tokens__token__val,
  ((b).us_split_fields3).rec__tokens__token__val) = true))) and
  (tokens__token__op__pred(a) ->
  (to_rep3(((a).us_split_fields3).rec__tokens__token__op) = to_rep3(((b).us_split_fields3).rec__tokens__token__op)))) and
  (tokens__token__instr__pred(a) ->
  (to_rep2(((a).us_split_fields3).rec__tokens__token__instr) = to_rep2(((b).us_split_fields3).rec__tokens__token__instr)))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_discrs1).rec__tokens__token__kind) = to_rep4(((b).us_split_discrs1).rec__tokens__token__kind)) and
  (tokens__token__val__pred(a) ->
  (bool_eq8(((a).us_split_fields3).rec__tokens__token__val,
  ((b).us_split_fields3).rec__tokens__token__val) = true))) and
  (tokens__token__op__pred(a) ->
  (to_rep3(((a).us_split_fields3).rec__tokens__token__op) = to_rep3(((b).us_split_fields3).rec__tokens__token__op)))) and
  (tokens__token__instr__pred(a) ->
  (to_rep2(((a).us_split_fields3).rec__tokens__token__instr) = to_rep2(((b).us_split_fields3).rec__tokens__token__instr))))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment2({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit : int

logic tokens__token__kind__last__bit : int

logic tokens__token__kind__position : int

axiom tokens__token__kind__first__bit_axiom :
  (0 <= tokens__token__kind__first__bit)

axiom tokens__token__kind__last__bit_axiom :
  (tokens__token__kind__first__bit <  tokens__token__kind__last__bit)

axiom tokens__token__kind__position_axiom :
  (0 <= tokens__token__kind__position)

logic tokens__token__val__first__bit : int

logic tokens__token__val__last__bit : int

logic tokens__token__val__position : int

axiom tokens__token__val__first__bit_axiom :
  (0 <= tokens__token__val__first__bit)

axiom tokens__token__val__last__bit_axiom :
  (tokens__token__val__first__bit <  tokens__token__val__last__bit)

axiom tokens__token__val__position_axiom :
  (0 <= tokens__token__val__position)

logic tokens__token__op__first__bit : int

logic tokens__token__op__last__bit : int

logic tokens__token__op__position : int

axiom tokens__token__op__first__bit_axiom :
  (0 <= tokens__token__op__first__bit)

axiom tokens__token__op__last__bit_axiom :
  (tokens__token__op__first__bit <  tokens__token__op__last__bit)

axiom tokens__token__op__position_axiom : (0 <= tokens__token__op__position)

logic tokens__token__instr__first__bit : int

logic tokens__token__instr__last__bit : int

logic tokens__token__instr__position : int

axiom tokens__token__instr__first__bit_axiom :
  (0 <= tokens__token__instr__first__bit)

axiom tokens__token__instr__last__bit_axiom :
  (tokens__token__instr__first__bit <  tokens__token__instr__last__bit)

axiom tokens__token__instr__position_axiom :
  (0 <= tokens__token__instr__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy9 : token_kind

logic dummy10 : integer

logic dummy11 : operation

logic dummy12 : instruction

logic dummy13 : bool

type token__ref = { token__content : us_rep1
}

function token__ref___projection(a: token__ref) : us_rep1 =
  (a).token__content

logic v__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

type tTword_bufferSP1

predicate in_range7(x: int) = ((1 <= x) and (x <= 1024))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : tTword_bufferSP1, tTword_bufferSP1 -> bool

logic dummy14 : tTword_bufferSP1

type tTword_bufferSP1__ref = { tTword_bufferSP1__content : tTword_bufferSP1
}

function tTword_bufferSP1__ref___projection(a: tTword_bufferSP1__ref) : tTword_bufferSP1 =
  (a).tTword_bufferSP1__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r1b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy15 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref___projection(a: t2b__ref) : integer = (a).t2b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq14(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq11 : us_t1, us_t1 -> bool

logic dummy16 : (int,character) farray

logic dummy17 : t1

type t3b__ref = { t3b__content : us_t1
}

function t3b__ref___projection(a: t3b__ref) : us_t1 = (a).t3b__content

logic word__first : integer

logic word__last : integer

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range8(rec__tokens__token__kind1: int, a: us_rep1) =
  (rec__tokens__token__kind1 = to_rep4(((a).us_split_discrs1).rec__tokens__token__kind))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size4({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment4({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit1 : int

logic tokens__token__kind__last__bit1 : int

logic tokens__token__kind__position1 : int

axiom tokens__token__kind__first__bit_axiom1 :
  (0 <= tokens__token__kind__first__bit1)

axiom tokens__token__kind__last__bit_axiom1 :
  (tokens__token__kind__first__bit1 <  tokens__token__kind__last__bit1)

axiom tokens__token__kind__position_axiom1 :
  (0 <= tokens__token__kind__position1)

logic tokens__token__op__first__bit1 : int

logic tokens__token__op__last__bit1 : int

logic tokens__token__op__position1 : int

axiom tokens__token__op__first__bit_axiom1 :
  (0 <= tokens__token__op__first__bit1)

axiom tokens__token__op__last__bit_axiom1 :
  (tokens__token__op__first__bit1 <  tokens__token__op__last__bit1)

axiom tokens__token__op__position_axiom1 :
  (0 <= tokens__token__op__position1)

logic tokens__token__instr__first__bit1 : int

logic tokens__token__instr__last__bit1 : int

logic tokens__token__instr__position1 : int

axiom tokens__token__instr__first__bit_axiom1 :
  (0 <= tokens__token__instr__first__bit1)

axiom tokens__token__instr__last__bit_axiom1 :
  (tokens__token__instr__first__bit1 <  tokens__token__instr__last__bit1)

axiom tokens__token__instr__position_axiom1 :
  (0 <= tokens__token__instr__position1)

logic tokens__token__val__first__bit1 : int

logic tokens__token__val__last__bit1 : int

logic tokens__token__val__position1 : int

axiom tokens__token__val__first__bit_axiom1 :
  (0 <= tokens__token__val__first__bit1)

axiom tokens__token__val__last__bit_axiom1 :
  (tokens__token__val__first__bit1 <  tokens__token__val__last__bit1)

axiom tokens__token__val__position_axiom1 :
  (0 <= tokens__token__val__position1)

logic user_eq12 : us_rep1, us_rep1 -> bool

logic dummy18 : token_kind

logic dummy19 : integer

logic dummy20 : operation

logic dummy21 : instruction

logic dummy22 : bool

type t6b__ref = { t6b__content : us_rep1
}

function t6b__ref___projection(a: t6b__ref) : us_rep1 = (a).t6b__content

logic r9b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate in_range9(rec__tokens__token__kind1: int, a: us_rep1) =
  (rec__tokens__token__kind1 = to_rep4(((a).us_split_discrs1).rec__tokens__token__kind))

logic value__size5 : int

logic object__size5 : us_rep1 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep1 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size5({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment5({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit2 : int

logic tokens__token__kind__last__bit2 : int

logic tokens__token__kind__position2 : int

axiom tokens__token__kind__first__bit_axiom2 :
  (0 <= tokens__token__kind__first__bit2)

axiom tokens__token__kind__last__bit_axiom2 :
  (tokens__token__kind__first__bit2 <  tokens__token__kind__last__bit2)

axiom tokens__token__kind__position_axiom2 :
  (0 <= tokens__token__kind__position2)

logic tokens__token__val__first__bit2 : int

logic tokens__token__val__last__bit2 : int

logic tokens__token__val__position2 : int

axiom tokens__token__val__first__bit_axiom2 :
  (0 <= tokens__token__val__first__bit2)

axiom tokens__token__val__last__bit_axiom2 :
  (tokens__token__val__first__bit2 <  tokens__token__val__last__bit2)

axiom tokens__token__val__position_axiom2 :
  (0 <= tokens__token__val__position2)

logic tokens__token__instr__first__bit2 : int

logic tokens__token__instr__last__bit2 : int

logic tokens__token__instr__position2 : int

axiom tokens__token__instr__first__bit_axiom2 :
  (0 <= tokens__token__instr__first__bit2)

axiom tokens__token__instr__last__bit_axiom2 :
  (tokens__token__instr__first__bit2 <  tokens__token__instr__last__bit2)

axiom tokens__token__instr__position_axiom2 :
  (0 <= tokens__token__instr__position2)

logic tokens__token__op__first__bit2 : int

logic tokens__token__op__last__bit2 : int

logic tokens__token__op__position2 : int

axiom tokens__token__op__first__bit_axiom2 :
  (0 <= tokens__token__op__first__bit2)

axiom tokens__token__op__last__bit_axiom2 :
  (tokens__token__op__first__bit2 <  tokens__token__op__last__bit2)

axiom tokens__token__op__position_axiom2 :
  (0 <= tokens__token__op__position2)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy23 : token_kind

logic dummy24 : integer

logic dummy25 : operation

logic dummy26 : instruction

logic dummy27 : bool

type t10b__ref = { t10b__content : us_rep1
}

function t10b__ref___projection(a: t10b__ref) : us_rep1 = (a).t10b__content

logic r13b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate in_range10(rec__tokens__token__kind1: int, a: us_rep1) =
  (rec__tokens__token__kind1 = to_rep4(((a).us_split_discrs1).rec__tokens__token__kind))

logic value__size6 : int

logic object__size6 : us_rep1 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep1 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size6({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment6({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit3 : int

logic tokens__token__kind__last__bit3 : int

logic tokens__token__kind__position3 : int

axiom tokens__token__kind__first__bit_axiom3 :
  (0 <= tokens__token__kind__first__bit3)

axiom tokens__token__kind__last__bit_axiom3 :
  (tokens__token__kind__first__bit3 <  tokens__token__kind__last__bit3)

axiom tokens__token__kind__position_axiom3 :
  (0 <= tokens__token__kind__position3)

logic tokens__token__op__first__bit3 : int

logic tokens__token__op__last__bit3 : int

logic tokens__token__op__position3 : int

axiom tokens__token__op__first__bit_axiom3 :
  (0 <= tokens__token__op__first__bit3)

axiom tokens__token__op__last__bit_axiom3 :
  (tokens__token__op__first__bit3 <  tokens__token__op__last__bit3)

axiom tokens__token__op__position_axiom3 :
  (0 <= tokens__token__op__position3)

logic tokens__token__instr__first__bit3 : int

logic tokens__token__instr__last__bit3 : int

logic tokens__token__instr__position3 : int

axiom tokens__token__instr__first__bit_axiom3 :
  (0 <= tokens__token__instr__first__bit3)

axiom tokens__token__instr__last__bit_axiom3 :
  (tokens__token__instr__first__bit3 <  tokens__token__instr__last__bit3)

axiom tokens__token__instr__position_axiom3 :
  (0 <= tokens__token__instr__position3)

logic tokens__token__val__first__bit3 : int

logic tokens__token__val__last__bit3 : int

logic tokens__token__val__position3 : int

axiom tokens__token__val__first__bit_axiom3 :
  (0 <= tokens__token__val__first__bit3)

axiom tokens__token__val__last__bit_axiom3 :
  (tokens__token__val__first__bit3 <  tokens__token__val__last__bit3)

axiom tokens__token__val__position_axiom3 :
  (0 <= tokens__token__val__position3)

logic user_eq14 : us_rep1, us_rep1 -> bool

logic dummy28 : token_kind

logic dummy29 : integer

logic dummy30 : operation

logic dummy31 : instruction

logic dummy32 : bool

type t14b__ref = { t14b__content : us_rep1
}

function t14b__ref___projection(a: t14b__ref) : us_rep1 = (a).t14b__content

logic r17b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate in_range11(rec__tokens__token__kind1: int, a: us_rep1) =
  (rec__tokens__token__kind1 = to_rep4(((a).us_split_discrs1).rec__tokens__token__kind))

logic value__size7 : int

logic object__size7 : us_rep1 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep1 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size7({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment7({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit4 : int

logic tokens__token__kind__last__bit4 : int

logic tokens__token__kind__position4 : int

axiom tokens__token__kind__first__bit_axiom4 :
  (0 <= tokens__token__kind__first__bit4)

axiom tokens__token__kind__last__bit_axiom4 :
  (tokens__token__kind__first__bit4 <  tokens__token__kind__last__bit4)

axiom tokens__token__kind__position_axiom4 :
  (0 <= tokens__token__kind__position4)

logic tokens__token__val__first__bit4 : int

logic tokens__token__val__last__bit4 : int

logic tokens__token__val__position4 : int

axiom tokens__token__val__first__bit_axiom4 :
  (0 <= tokens__token__val__first__bit4)

axiom tokens__token__val__last__bit_axiom4 :
  (tokens__token__val__first__bit4 <  tokens__token__val__last__bit4)

axiom tokens__token__val__position_axiom4 :
  (0 <= tokens__token__val__position4)

logic tokens__token__instr__first__bit4 : int

logic tokens__token__instr__last__bit4 : int

logic tokens__token__instr__position4 : int

axiom tokens__token__instr__first__bit_axiom4 :
  (0 <= tokens__token__instr__first__bit4)

axiom tokens__token__instr__last__bit_axiom4 :
  (tokens__token__instr__first__bit4 <  tokens__token__instr__last__bit4)

axiom tokens__token__instr__position_axiom4 :
  (0 <= tokens__token__instr__position4)

logic tokens__token__op__first__bit4 : int

logic tokens__token__op__last__bit4 : int

logic tokens__token__op__position4 : int

axiom tokens__token__op__first__bit_axiom4 :
  (0 <= tokens__token__op__first__bit4)

axiom tokens__token__op__last__bit_axiom4 :
  (tokens__token__op__first__bit4 <  tokens__token__op__last__bit4)

axiom tokens__token__op__position_axiom4 :
  (0 <= tokens__token__op__position4)

logic user_eq15 : us_rep1, us_rep1 -> bool

logic dummy33 : token_kind

logic dummy34 : integer

logic dummy35 : operation

logic dummy36 : instruction

logic dummy37 : bool

type t18b__ref = { t18b__content : us_rep1
}

function t18b__ref___projection(a: t18b__ref) : us_rep1 = (a).t18b__content

logic r21b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate in_range12(rec__tokens__token__kind1: int, a: us_rep1) =
  (rec__tokens__token__kind1 = to_rep4(((a).us_split_discrs1).rec__tokens__token__kind))

logic value__size8 : int

logic object__size8 : us_rep1 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep1 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size8({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment8({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit5 : int

logic tokens__token__kind__last__bit5 : int

logic tokens__token__kind__position5 : int

axiom tokens__token__kind__first__bit_axiom5 :
  (0 <= tokens__token__kind__first__bit5)

axiom tokens__token__kind__last__bit_axiom5 :
  (tokens__token__kind__first__bit5 <  tokens__token__kind__last__bit5)

axiom tokens__token__kind__position_axiom5 :
  (0 <= tokens__token__kind__position5)

logic tokens__token__val__first__bit5 : int

logic tokens__token__val__last__bit5 : int

logic tokens__token__val__position5 : int

axiom tokens__token__val__first__bit_axiom5 :
  (0 <= tokens__token__val__first__bit5)

axiom tokens__token__val__last__bit_axiom5 :
  (tokens__token__val__first__bit5 <  tokens__token__val__last__bit5)

axiom tokens__token__val__position_axiom5 :
  (0 <= tokens__token__val__position5)

logic tokens__token__op__first__bit5 : int

logic tokens__token__op__last__bit5 : int

logic tokens__token__op__position5 : int

axiom tokens__token__op__first__bit_axiom5 :
  (0 <= tokens__token__op__first__bit5)

axiom tokens__token__op__last__bit_axiom5 :
  (tokens__token__op__first__bit5 <  tokens__token__op__last__bit5)

axiom tokens__token__op__position_axiom5 :
  (0 <= tokens__token__op__position5)

logic tokens__token__instr__first__bit5 : int

logic tokens__token__instr__last__bit5 : int

logic tokens__token__instr__position5 : int

axiom tokens__token__instr__first__bit_axiom5 :
  (0 <= tokens__token__instr__first__bit5)

axiom tokens__token__instr__last__bit_axiom5 :
  (tokens__token__instr__first__bit5 <  tokens__token__instr__last__bit5)

axiom tokens__token__instr__position_axiom5 :
  (0 <= tokens__token__instr__position5)

logic user_eq16 : us_rep1, us_rep1 -> bool

logic dummy38 : token_kind

logic dummy39 : integer

logic dummy40 : operation

logic dummy41 : instruction

logic dummy42 : bool

type t22b__ref = { t22b__content : us_rep1
}

function t22b__ref___projection(a: t22b__ref) : us_rep1 = (a).t22b__content

 (* File "tokens.ads", line 14, characters 0-0 *)
goal WP_parameter_def :
  (forall word_size:int. forall o:integer. forall o1:integer.
  forall o2:(int,character) farray. forall temp___229:(int,character) farray.
  forall temp___2291:t1.
  forall tokens__next__read_a_valid_token__word__assume:(int,character) farray.
  forall tokens__next__read_a_valid_token__word__assume1:t. forall o3:int.
  forall o4:int. forall o5:character. forall o6:int. forall o7:int.
  forall o8:character. forall o9:int. forall o10:bool. forall o11:bool.
  forall o12:int. forall o13:character. forall o14:int. forall o15:bool.
  forall o16:bool. forall o17:int. forall o18:character. forall o19:int.
  forall o20:int. forall o21:character. forall o22:int. forall o23:bool.
  forall o24:bool. forall o25:int. forall o26:character. forall o27:int.
  forall o28:bool. forall o29:bool. forall o30:int. forall o31:character.
  forall o32:int. forall o33:int. forall o34:token_kind. forall o35:integer.
  forall o36:integer. forall o37:operation. forall o38:instruction.
  forall o39:token_kind. forall temp___241:token_kind.
  forall temp___2411:integer. forall temp___2412:operation.
  forall temp___2413:instruction. forall temp___2414:bool.
  forall v__split_discrs:us_split_discrs.
  forall word_buffer:(int,character) farray. forall word_size1:int.
  forall word:(int,character) farray. forall word_size2:int.
  forall input__next_word__v:(int,character) farray. forall result:map__ref.
  forall word_buffer1:(int,character) farray. forall result1:map__ref.
  forall word1:(int,character) farray. forall result2:bool.
  forall result3:bool. forall result4:bool. forall result5:bool.
  forall result6:bool. ((((-2147483648) <= 2147483647) ->
  in_range1(word_size)) -> ((((-2147483648) <= 2147483647) ->
  in_range1(word_size1)) -> ((((to_rep1(o1) = 1024) and ((to_rep1(o) = 1) and
  ((word_size2 <= 1024) and in_range1(word_size2)))) and ((result = {
  map__content = word_buffer }) and
  (word_buffer1 = slide(input__next_word__v, to_rep1(first(mk(1, 1024))),
  1)))) -> (((word_size2 = r1b) and in_range1(r1b)) -> ((((((((1 <= r1b) ->
  (((1 <= 1) and (1 <= 1024)) and ((1 <= r1b) and (r1b <= 1024)))) and
  (o2 = word_buffer1)) and ((o2 = temp___229) and (mk1(1,
  r1b) = temp___2291))) and
  ((temp___229 = tokens__next__read_a_valid_token__word__assume) and
  (mk(to_rep1(first2(temp___2291)),
  to_rep1(last2(temp___2291))) = tokens__next__read_a_valid_token__word__assume1))) and
  (((result1 = { map__content = word }) and
  (word1 = tokens__next__read_a_valid_token__word__assume)) and
  ((to_rep1(word__first) = to_rep1(first(tokens__next__read_a_valid_token__word__assume1))) and
  (to_rep1(word__last) = to_rep1(last(tokens__next__read_a_valid_token__word__assume1)))))) and
  dynamic_property(1, 2147483647, to_rep1(word__first),
  to_rep1(word__last))) ->
  (((((to_rep1(word__first) <= to_rep1(word__last)) and
  (o3 = ((to_rep1(word__last) - to_rep1(word__first)) + 1))) or
  ((not (to_rep1(word__first) <= to_rep1(word__last))) and (o3 = 0))) and
  (((1 <= o3) and (result2 = true)) or ((not (1 <= o3)) and
  (result2 = false)))) -> ((result2 = true) ->
  ((((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o12 = to_rep1(word__first))) and (o13 = (word1[o12]))) and
  (o14 = to_rep(o13))) and (((o14 = 46) and (o15 = true)) or
  ((not (o14 = 46)) and (o15 = false)))) and
  ((((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o7 = to_rep1(word__first))) and (o8 = (word1[o7]))) and
  (o9 = to_rep(o8))) and (((o9 <= 57) and (o10 = true)) or
  ((not (o9 <= 57)) and (o10 = false)))) and
  (((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o4 = to_rep1(word__first))) and (o5 = (word1[o4]))) and
  (o6 = to_rep(o5))) and (((48 <= o6) and (o11 = true)) or
  ((not (48 <= o6)) and (o11 = false)))) and (o16 = match_bool(o11, o10,
  false)))) and (result3 = match_bool(o16, true, o15)))) ->
  ((not (result3 = true)) ->
  ((((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o25 = to_rep1(word__first))) and (o26 = (word1[o25]))) and
  (o27 = to_rep(o26))) and (((o27 = 47) and (o28 = true)) or
  ((not (o27 = 47)) and (o28 = false)))) and
  ((((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o20 = to_rep1(word__first))) and (o21 = (word1[o20]))) and
  (o22 = to_rep(o21))) and (((o22 = 42) and (o23 = true)) or
  ((not (o22 = 42)) and (o23 = false)))) and
  (((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o17 = to_rep1(word__first))) and (o18 = (word1[o17]))) and
  (o19 = to_rep(o18))) and (((o19 = 43) and (o24 = true)) or
  ((not (o19 = 43)) and (o24 = false)))) and (o29 = match_bool(o24, true,
  o23)))) and (result4 = match_bool(o29, true, o28)))) ->
  ((not (result4 = true)) ->
  (((((((to_rep1(word__first) <= to_rep1(word__first)) and
  (to_rep1(word__first) <= to_rep1(word__last))) and
  (o30 = to_rep1(word__first))) and (o31 = (word1[o30]))) and
  (o32 = to_rep(o31))) and (((o32 = 45) and (result5 = true)) or
  ((not (o32 = 45)) and (result5 = false)))) -> ((result5 = true) ->
  (((((to_rep1(word__first) <= to_rep1(word__last)) and
  (o33 = ((to_rep1(word__last) - to_rep1(word__first)) + 1))) or
  ((not (to_rep1(word__first) <= to_rep1(word__last))) and (o33 = 0))) and
  (((1 <  o33) and (result6 = true)) or ((not (1 <  o33)) and
  (result6 = false)))) -> ((result6 = true) ->
  (((to_rep4((v__split_discrs).rec__tokens__token__kind) = r13b) and
  in_range6(r13b)) -> (((({ us_split_fields1 = { rec__types__value__e = o35 }
  } = read1({ elts = word1; rt = mk(to_rep1(word__first),
  to_rep1(word__last)) })) and ((o36 = o35) and ((dummy7 = o37) and
  (dummy5 = o38)))) and (((to_rep4(o34) = 0) and (o34 = o39)) and
  ((temp___241 = o39) and (((temp___2411 = o36) and ((temp___2412 = o37) and
  (temp___2413 = o38))) and (true = temp___2414))))) ->
  ((v__attr__constrained = true) ->
  (temp___241 = (v__split_discrs).rec__tokens__token__kind))))))))))))))))))))
