;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort d 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (d d) Bool)

(declare-const dummy1 d)

(declare-datatypes () ((d__ref (mk_d__ref (d__content d)))))
(define-fun d__ref___projection ((a d__ref)) d (d__content a))

(define-fun dynamic_invariant ((temp___expr_139 Int)
  (temp___is_init_136 Bool) (temp___skip_constant_137 Bool)
  (temp___do_toplevel_138 Bool)) Bool (=>
                                      (or (= temp___is_init_136 true)
                                      (<= 1 10)) (in_range1 temp___expr_139)))

(declare-fun to_rep1 (d) Int)

(declare-fun of_rep1 (Int) d)

;; inversion_axiom
  (assert
  (forall ((x d)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x d)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort tdB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tdB tdB) Bool)

(declare-const dummy2 tdB)

(declare-datatypes () ((tdB__ref (mk_tdB__ref (tdB__content tdB)))))
(define-fun tdB__ref___projection ((a tdB__ref)) tdB (tdB__content a))

(declare-fun to_rep2 (tdB) Int)

(declare-fun of_rep2 (Int) tdB)

;; inversion_axiom
  (assert
  (forall ((x tdB)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x tdB)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (tdB tdB) Bool)

(declare-const dummy3 tdB)

(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content tdB)))))
(define-fun t3s__ref___projection ((a t3s__ref)) tdB (t3s__content a))

(declare-sort t 0)

(declare-fun first (t) tdB)

(declare-fun last (t) tdB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t (t4s__content a))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__mutable__t__k d)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) d (rec__mutable__t__k
                                                                 a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__mutable__t__som integer)(rec__mutable__t__arr us_t)))))
(define-fun us_split_fields_Som__projection ((a us_split_fields)) integer
  (rec__mutable__t__som a))

(define-fun us_split_fields_Arr__projection ((a us_split_fields)) us_t
  (rec__mutable__t__arr a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__mutable__t__k (us_split_discrs1 a)))
                        (to_rep1 (rec__mutable__t__k (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__mutable__t__som (us_split_fields1 a)))
                        (to_rep (rec__mutable__t__som (us_split_fields1 b)))))
                        (= (bool_eq1
                           (rec__mutable__t__arr (us_split_fields1 a))
                           (rec__mutable__t__arr (us_split_fields1 b))) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const mutable__t__k__first__bit Int)

(declare-const mutable__t__k__last__bit Int)

(declare-const mutable__t__k__position Int)

;; mutable__t__k__first__bit_axiom
  (assert (<= 0 mutable__t__k__first__bit))

;; mutable__t__k__last__bit_axiom
  (assert (< mutable__t__k__first__bit mutable__t__k__last__bit))

;; mutable__t__k__position_axiom
  (assert (<= 0 mutable__t__k__position))

(declare-const mutable__t__som__first__bit Int)

(declare-const mutable__t__som__last__bit Int)

(declare-const mutable__t__som__position Int)

;; mutable__t__som__first__bit_axiom
  (assert (<= 0 mutable__t__som__first__bit))

;; mutable__t__som__last__bit_axiom
  (assert (< mutable__t__som__first__bit mutable__t__som__last__bit))

;; mutable__t__som__position_axiom
  (assert (<= 0 mutable__t__som__position))

(declare-const mutable__t__arr__first__bit Int)

(declare-const mutable__t__arr__last__bit Int)

(declare-const mutable__t__arr__position Int)

;; mutable__t__arr__first__bit_axiom
  (assert (<= 0 mutable__t__arr__first__bit))

;; mutable__t__arr__last__bit_axiom
  (assert (< mutable__t__arr__first__bit mutable__t__arr__last__bit))

;; mutable__t__arr__position_axiom
  (assert (<= 0 mutable__t__arr__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(define-fun dynamic_invariant1 ((temp___expr_150 us_rep)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (let ((temp___151 (rec__mutable__t__k
                                                        (us_split_discrs1
                                                        temp___expr_150))))
                                      (and (dynamic_property1 1
                                      (to_rep1 temp___151)
                                      (first1
                                      (rec__mutable__t__arr
                                      (us_split_fields1 temp___expr_150)))
                                      (last1
                                      (rec__mutable__t__arr
                                      (us_split_fields1 temp___expr_150))))
                                      (and
                                      (= (first1
                                         (rec__mutable__t__arr
                                         (us_split_fields1 temp___expr_150))) 1)
                                      (= (last1
                                         (rec__mutable__t__arr
                                         (us_split_fields1 temp___expr_150)))
                                      (to_rep1 temp___151))))))

(define-fun default_initial_assumption ((temp___expr_153 us_rep)
  (temp___skip_top_level_154 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_153) false)
                                         (= (to_rep1
                                            (rec__mutable__t__k
                                            (us_split_discrs1
                                            temp___expr_153))) 10)))

(declare-const x__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r4b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tT7bP1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (tT7bP1 tT7bP1) Bool)

(declare-const dummy6 tT7bP1)

(declare-datatypes ()
((tT7bP1__ref (mk_tT7bP1__ref (tT7bP1__content tT7bP1)))))
(define-fun tT7bP1__ref___projection ((a tT7bP1__ref)) tT7bP1 (tT7bP1__content
                                                              a))

(declare-const dummy7 (Array Int integer))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq7 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__mutable__t__som1 integer)(rec__mutable__t__arr1 (Array Int integer))))))
(define-fun us_split_fields_Som__3__projection ((a us_split_fields2)) integer
  (rec__mutable__t__som1 a))

(define-fun us_split_fields_Arr__3__projection ((a us_split_fields2)) (Array Int integer)
  (rec__mutable__t__arr1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__constrained1 Bool)))))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                                 a))

(define-fun us_rep___8__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___9__projection ((a us_rep1)) Bool (attr__constrained1 a))

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (rec__mutable__t__som1
                                         (us_split_fields3 a))
                                         (of_array
                                         (rec__mutable__t__arr1
                                         (us_split_fields3 a)) 1 5))
                                         (attr__constrained1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (rec__mutable__t__som
                                         (us_split_fields1 r))
                                         (let ((temp___135 (rec__mutable__t__arr
                                                           (us_split_fields1
                                                           r))))
                                         (to_array temp___135)))
                                         (attr__constrained r)))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__mutable__t__k (us_split_discrs2 a)))
                         (to_rep1 (rec__mutable__t__k (us_split_discrs2 b))))
                         (= (to_rep
                            (rec__mutable__t__som1 (us_split_fields3 a)))
                         (to_rep
                         (rec__mutable__t__som1 (us_split_fields3 b)))))
                         (= (bool_eq
                            (rec__mutable__t__arr1 (us_split_fields3 a)) 1 5
                            (rec__mutable__t__arr1 (us_split_fields3 b)) 1 5) true))
                    true false))

(define-fun in_range4 ((rec__mutable__t__k1 Int)
  (a us_rep)) Bool (= rec__mutable__t__k1 (to_rep1
                                          (rec__mutable__t__k
                                          (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const mutable__t__k__first__bit1 Int)

(declare-const mutable__t__k__last__bit1 Int)

(declare-const mutable__t__k__position1 Int)

;; mutable__t__k__first__bit_axiom
  (assert (<= 0 mutable__t__k__first__bit1))

;; mutable__t__k__last__bit_axiom
  (assert (< mutable__t__k__first__bit1 mutable__t__k__last__bit1))

;; mutable__t__k__position_axiom
  (assert (<= 0 mutable__t__k__position1))

(declare-const mutable__t__som__first__bit1 Int)

(declare-const mutable__t__som__last__bit1 Int)

(declare-const mutable__t__som__position1 Int)

;; mutable__t__som__first__bit_axiom
  (assert (<= 0 mutable__t__som__first__bit1))

;; mutable__t__som__last__bit_axiom
  (assert (< mutable__t__som__first__bit1 mutable__t__som__last__bit1))

;; mutable__t__som__position_axiom
  (assert (<= 0 mutable__t__som__position1))

(declare-const mutable__t__arr__first__bit1 Int)

(declare-const mutable__t__arr__last__bit1 Int)

(declare-const mutable__t__arr__position1 Int)

;; mutable__t__arr__first__bit_axiom
  (assert (<= 0 mutable__t__arr__first__bit1))

;; mutable__t__arr__last__bit_axiom
  (assert (< mutable__t__arr__first__bit1 mutable__t__arr__last__bit1))

;; mutable__t__arr__position_axiom
  (assert (<= 0 mutable__t__arr__position1))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content us_rep1)))))
(define-fun t6b__ref___projection ((a t6b__ref)) us_rep1 (t6b__content a))

(declare-fun temp___190 (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___192 Int))
  (forall ((temp___193 Int))
  (= (select (temp___190 temp___192) temp___193) (of_rep temp___192)))))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-const x__split_fields integer)

(declare-const x__split_fields1 (Array Int integer))

(declare-const x__split_fields2 t)

(declare-const x__split_discrs d)

(declare-const o d)

(declare-const o1 integer)

(declare-const o2 integer)

(declare-const o3 (Array Int integer))

(declare-const o4 d)

(declare-const o5 d)

(declare-const o6 integer)

(declare-const o7 (Array Int integer))

(declare-const o8 Bool)

(declare-const temp___194 d)

(declare-const temp___1941 integer)

(declare-const temp___1942 (Array Int integer))

(declare-const temp___1943 t)

(declare-const temp___1944 Bool)

;; H
  (assert (dynamic_invariant1
  (mk___rep (mk___split_discrs x__split_discrs)
  (mk___split_fields x__split_fields
  (mk___t x__split_fields1 x__split_fields2)) x__attr__constrained) true
  false true))

;; H
  (assert (= (to_rep1 x__split_discrs) r4b))

;; H
  (assert (in_range1 r4b))

;; H
  (assert (= (to_rep o1) 3))

;; H
  (assert (= o1 o2))

;; H
  (assert (= (temp___190 0) o3))

;; H
  (assert (= (to_rep1 o) 5))

;; H
  (assert (= o o4))

;; H
  (assert (= o5 o4))

;; H
  (assert (= o6 o2))

;; H
  (assert (= o7 o3))

;; H
  (assert (= true o8))

;; H
  (assert (= o5 temp___194))

;; H
  (assert (= o6 temp___1941))

;; H
  (assert (= o7 temp___1942))

;; H
  (assert (= (mk 1 5) temp___1943))

;; H
  (assert (= o8 temp___1944))

;; H
  (assert (= x__attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "mutable.adb", line 15, characters 0-0
  (not (= temp___194 x__split_discrs)))
(check-sat)
(exit)
