;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-const nodescription (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___133 Int))
  (forall ((temp___134 Int))
  (= (select (audittypes__nodescription__aggregate_def temp___133) temp___134)
  (of_rep temp___133)))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun endoffile (us_rep) Bool)

(declare-fun endoffile__function_guard (Bool us_rep) Bool)

(declare-sort issueridt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (issueridt issueridt) Bool)

(declare-const dummy6 issueridt)

(declare-datatypes ((issueridt__ref 0))
(((mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt
  (issueridt__content a))

(declare-fun to_rep2 (issueridt) Int)

(declare-fun of_rep2 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort namecountt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (namecountt namecountt) Bool)

(declare-const dummy7 namecountt)

(declare-datatypes ((namecountt__ref 0))
(((mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt
  (namecountt__content a))

(declare-fun to_rep3 (namecountt) Int)

(declare-fun of_rep3 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy8 (Array Int character))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq8 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__cryptotypes__issuert__id
                            (us_split_fields1 a))) (to_rep2
                                                   (rec__cryptotypes__issuert__id
                                                   (us_split_fields1 b))))
                         (= (to_rep3
                            (rec__cryptotypes__issuert__namelength
                            (us_split_fields1 a))) (to_rep3
                                                   (rec__cryptotypes__issuert__namelength
                                                   (us_split_fields1 b)))))
                         (= (bool_eq
                            (rec__cryptotypes__issuert__name
                            (us_split_fields1 a)) 1 40
                            (rec__cryptotypes__issuert__name
                            (us_split_fields1 b)) 1 40) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((issuert__ref 0))
(((mk_issuert__ref (issuert__content us_rep1)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep1 (issuert__content
                                                                 a))

(declare-sort algorithmt 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (algorithmt algorithmt) Bool)

(declare-const dummy10 algorithmt)

(declare-datatypes ((algorithmt__ref 0))
(((mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt
  (algorithmt__content a))

(declare-fun to_rep4 (algorithmt) Int)

(declare-fun of_rep4 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort keyidt 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (keyidt keyidt) Bool)

(declare-const dummy11 keyidt)

(declare-datatypes ((keyidt__ref 0))
(((mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content
                                                              a))

(declare-fun to_rep5 (keyidt) Int)

(declare-fun of_rep5 (Int) keyidt)

;; inversion_axiom
  (assert
  (forall ((x keyidt))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x keyidt)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort keylengtht 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (keylengtht keylengtht) Bool)

(declare-const dummy12 keylengtht)

(declare-datatypes ((keylengtht__ref 0))
(((mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht
  (keylengtht__content a))

(declare-fun to_rep6 (keylengtht) Int)

(declare-fun of_rep6 (Int) keylengtht)

;; inversion_axiom
  (assert
  (forall ((x keylengtht))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x keylengtht)) (! (in_range9
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields2)) algorithmt
  (rec__cryptotypes__keypartt__algorithmid a))

(define-fun us_split_fields_KeyID__projection ((a us_split_fields2)) keyidt
  (rec__cryptotypes__keypartt__keyid a))

(define-fun us_split_fields_KeyLength__projection ((a us_split_fields2)) keylengtht
  (rec__cryptotypes__keypartt__keylength a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__cryptotypes__keypartt__algorithmid
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__cryptotypes__keypartt__algorithmid
                                                   (us_split_fields3 b))))
                         (= (to_rep5
                            (rec__cryptotypes__keypartt__keyid
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__cryptotypes__keypartt__keyid
                                                   (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__cryptotypes__keypartt__keylength
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__cryptotypes__keypartt__keylength
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; cryptotypes__keypartt__algorithmid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; cryptotypes__keypartt__algorithmid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; cryptotypes__keypartt__algorithmid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; cryptotypes__keypartt__keyid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; cryptotypes__keypartt__keyid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; cryptotypes__keypartt__keyid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; cryptotypes__keypartt__keylength__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; cryptotypes__keypartt__keylength__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; cryptotypes__keypartt__keylength__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ((keypartt__ref 0))
(((mk_keypartt__ref (keypartt__content us_rep2)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep2 (keypartt__content
                                                                   a))

(declare-sort rawcertificatei 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 4096)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (rawcertificatei rawcertificatei) Bool)

(declare-const dummy14 rawcertificatei)

(declare-datatypes ((rawcertificatei__ref 0))
(((mk_rawcertificatei__ref (rawcertificatei__content rawcertificatei)))))
(define-fun rawcertificatei__ref___projection ((a rawcertificatei__ref)) rawcertificatei
  (rawcertificatei__content a))

(declare-const nullrawcertificate (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun certtypes__nullrawcertificate__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___150 Int))
  (forall ((temp___151 Int))
  (= (select (certtypes__nullrawcertificate__aggregate_def temp___150) temp___151)
  (of_rep temp___150)))))

(declare-fun privatekeypresent (us_private) Bool)

(declare-fun privatekeypresent__function_guard (Bool us_private) Bool)

;; privatekeypresent__post_axiom
  (assert true)

(declare-sort yearst 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (yearst yearst) Bool)

(declare-const dummy15 yearst)

(declare-datatypes ((yearst__ref 0))
(((mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep7 (yearst) Int)

(declare-fun of_rep7 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range11 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-sort monthst 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq16 (monthst monthst) Bool)

(declare-const dummy16 monthst)

(declare-datatypes ((monthst__ref 0))
(((mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep8 (monthst) Int)

(declare-fun of_rep8 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range12 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-sort dayst 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq17 (dayst dayst) Bool)

(declare-const dummy17 dayst)

(declare-datatypes ((dayst__ref 0))
(((mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep9 (dayst) Int)

(declare-fun of_rep9 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range13 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range13 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-sort millisecst 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq18 (millisecst millisecst) Bool)

(declare-const dummy18 millisecst)

(declare-datatypes ((millisecst__ref 0))
(((mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst
  (millisecst__content a))

(declare-fun to_rep10 (millisecst) Int)

(declare-fun of_rep10 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range14
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range14 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields4)) yearst
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields4)) monthst
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields4)) dayst
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields4)) millisecst
  (rec__clock__timet__millisec a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                               a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep7
                            (rec__clock__timet__year (us_split_fields5 a)))
                         (to_rep7
                         (rec__clock__timet__year (us_split_fields5 b))))
                         (= (to_rep8
                            (rec__clock__timet__month (us_split_fields5 a)))
                         (to_rep8
                         (rec__clock__timet__month (us_split_fields5 b)))))
                         (= (to_rep9
                            (rec__clock__timet__day (us_split_fields5 a)))
                         (to_rep9
                         (rec__clock__timet__day (us_split_fields5 b)))))
                         (= (to_rep10
                            (rec__clock__timet__millisec
                            (us_split_fields5 a))) (to_rep10
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun user_eq19 (us_rep3 us_rep3) Bool)

(declare-const dummy19 us_rep3)

(declare-datatypes ((timet__ref 0))
(((mk_timet__ref (timet__content us_rep3)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep3 (timet__content
                                                             a))

(declare-sort serialnumbert 0)

(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq20 (serialnumbert serialnumbert) Bool)

(declare-const dummy20 serialnumbert)

(declare-datatypes ((serialnumbert__ref 0))
(((mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert
  (serialnumbert__content a))

(declare-fun to_rep11 (serialnumbert) Int)

(declare-fun of_rep11 (Int) serialnumbert)

;; inversion_axiom
  (assert
  (forall ((x serialnumbert))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x serialnumbert)) (! (in_range15
  (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range15 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__certtypes__idt__issuer us_rep1)(rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields6)) us_rep1
  (rec__certtypes__idt__issuer a))

(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields6)) serialnumbert
  (rec__certtypes__idt__serialnumber a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep4 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___10__projection ((a us_rep4)) us_split_fields6 (us_split_fields7
                                                                   a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (bool_eq3
                            (rec__certtypes__idt__issuer
                            (us_split_fields7 a))
                            (rec__certtypes__idt__issuer
                            (us_split_fields7 b))) true)
                         (= (to_rep11
                            (rec__certtypes__idt__serialnumber
                            (us_split_fields7 a))) (to_rep11
                                                   (rec__certtypes__idt__serialnumber
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const certtypes__idt__issuer__first__bit Int)

(declare-const certtypes__idt__issuer__last__bit Int)

(declare-const certtypes__idt__issuer__position Int)

;; certtypes__idt__issuer__first__bit_axiom
  (assert (<= 0 certtypes__idt__issuer__first__bit))

;; certtypes__idt__issuer__last__bit_axiom
  (assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; certtypes__idt__issuer__position_axiom
  (assert (<= 0 certtypes__idt__issuer__position))

(declare-const certtypes__idt__serialnumber__first__bit Int)

(declare-const certtypes__idt__serialnumber__last__bit Int)

(declare-const certtypes__idt__serialnumber__position Int)

;; certtypes__idt__serialnumber__first__bit_axiom
  (assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; certtypes__idt__serialnumber__last__bit_axiom
  (assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; certtypes__idt__serialnumber__position_axiom
  (assert (<= 0 certtypes__idt__serialnumber__position))

(declare-fun user_eq21 (us_rep4 us_rep4) Bool)

(declare-const dummy21 us_rep4)

(declare-datatypes ((idt__ref 0)) (((mk_idt__ref (idt__content us_rep4)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep4 (idt__content a))

(declare-datatypes ((us_split_fields8 0))
(((mk___split_fields4
  (rec__cert__contentst__id us_rep4)(rec__cert__contentst__notbefore us_rep3)(rec__cert__contentst__notafter us_rep3)(rec__cert__contentst__mechanism algorithmt)))))
(define-fun us_split_fields_ID__3__projection ((a us_split_fields8)) us_rep4
  (rec__cert__contentst__id a))

(define-fun us_split_fields_NotBefore__projection ((a us_split_fields8)) us_rep3
  (rec__cert__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__projection ((a us_split_fields8)) us_rep3
  (rec__cert__contentst__notafter a))

(define-fun us_split_fields_Mechanism__projection ((a us_split_fields8)) algorithmt
  (rec__cert__contentst__mechanism a))

(declare-datatypes ((us_split_fields__ref4 0))
(((mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep5 0))
(((mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___11__projection ((a us_rep5)) us_split_fields8 (us_split_fields9
                                                                   a))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq6
                            (rec__cert__contentst__id (us_split_fields9 a))
                            (rec__cert__contentst__id (us_split_fields9 b))) true)
                         (= (bool_eq5
                            (rec__cert__contentst__notbefore
                            (us_split_fields9 a))
                            (rec__cert__contentst__notbefore
                            (us_split_fields9 b))) true))
                         (= (bool_eq5
                            (rec__cert__contentst__notafter
                            (us_split_fields9 a))
                            (rec__cert__contentst__notafter
                            (us_split_fields9 b))) true))
                         (= (to_rep4
                            (rec__cert__contentst__mechanism
                            (us_split_fields9 a))) (to_rep4
                                                   (rec__cert__contentst__mechanism
                                                   (us_split_fields9 b)))))
                    true false))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-const cert__contentst__id__first__bit Int)

(declare-const cert__contentst__id__last__bit Int)

(declare-const cert__contentst__id__position Int)

;; cert__contentst__id__first__bit_axiom
  (assert (<= 0 cert__contentst__id__first__bit))

;; cert__contentst__id__last__bit_axiom
  (assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))

;; cert__contentst__id__position_axiom
  (assert (<= 0 cert__contentst__id__position))

(declare-const cert__contentst__notbefore__first__bit Int)

(declare-const cert__contentst__notbefore__last__bit Int)

(declare-const cert__contentst__notbefore__position Int)

;; cert__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__contentst__notbefore__first__bit))

;; cert__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))

;; cert__contentst__notbefore__position_axiom
  (assert (<= 0 cert__contentst__notbefore__position))

(declare-const cert__contentst__notafter__first__bit Int)

(declare-const cert__contentst__notafter__last__bit Int)

(declare-const cert__contentst__notafter__position Int)

;; cert__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__contentst__notafter__first__bit))

;; cert__contentst__notafter__last__bit_axiom
  (assert
  (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))

;; cert__contentst__notafter__position_axiom
  (assert (<= 0 cert__contentst__notafter__position))

(declare-const cert__contentst__mechanism__first__bit Int)

(declare-const cert__contentst__mechanism__last__bit Int)

(declare-const cert__contentst__mechanism__position Int)

;; cert__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__contentst__mechanism__first__bit))

;; cert__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))

;; cert__contentst__mechanism__position_axiom
  (assert (<= 0 cert__contentst__mechanism__position))

(declare-fun user_eq22 (us_rep5 us_rep5) Bool)

(declare-const dummy22 us_rep5)

(declare-datatypes ((contentst__ref 0))
(((mk_contentst__ref (contentst__content us_rep5)))))
(define-fun contentst__ref___projection ((a contentst__ref)) us_rep5
  (contentst__content a))

(declare-fun theissuer (us_rep5) us_rep1)

(declare-fun theissuer__function_guard (us_rep1 us_rep5) Bool)

;; theissuer__post_axiom
  (assert true)

(declare-datatypes ((us_split_fields10 0))
(((mk___split_fields5
  (rec__cert__id__contentst__id us_rep4)(rec__cert__id__contentst__notbefore us_rep3)(rec__cert__id__contentst__notafter us_rep3)(rec__cert__id__contentst__mechanism algorithmt)(rec__cert__id__contentst__subject us_rep1)(rec__cert__id__contentst__subjectpublickey us_rep2)))))
(define-fun us_split_fields_ID__4__projection ((a us_split_fields10)) us_rep4
  (rec__cert__id__contentst__id a))

(define-fun us_split_fields_NotBefore__2__projection ((a us_split_fields10)) us_rep3
  (rec__cert__id__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__2__projection ((a us_split_fields10)) us_rep3
  (rec__cert__id__contentst__notafter a))

(define-fun us_split_fields_Mechanism__2__projection ((a us_split_fields10)) algorithmt
  (rec__cert__id__contentst__mechanism a))

(define-fun us_split_fields_Subject__projection ((a us_split_fields10)) us_rep1
  (rec__cert__id__contentst__subject a))

(define-fun us_split_fields_SubjectPublicKey__projection ((a us_split_fields10)) us_rep2
  (rec__cert__id__contentst__subjectpublickey a))

(declare-datatypes ((us_split_fields__ref5 0))
(((mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep6 0))
(((mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___12__projection ((a us_rep6)) us_split_fields10 (us_split_fields11
                                                                    a))

(define-fun bool_eq8 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq6
                            (rec__cert__id__contentst__id
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__id
                            (us_split_fields11 b))) true)
                         (= (bool_eq5
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields11 b))) true))
                         (= (bool_eq5
                            (rec__cert__id__contentst__notafter
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__notafter
                            (us_split_fields11 b))) true))
                         (= (to_rep4
                            (rec__cert__id__contentst__mechanism
                            (us_split_fields11 a))) (to_rep4
                                                    (rec__cert__id__contentst__mechanism
                                                    (us_split_fields11 b)))))
                         (= (bool_eq3
                            (rec__cert__id__contentst__subject
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__subject
                            (us_split_fields11 b))) true))
                         (= (bool_eq4
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields11 b))) true))
                    true false))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep6) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment8 a))))

(declare-const cert__id__contentst__id__first__bit Int)

(declare-const cert__id__contentst__id__last__bit Int)

(declare-const cert__id__contentst__id__position Int)

;; cert__id__contentst__id__first__bit_axiom
  (assert (<= 0 cert__id__contentst__id__first__bit))

;; cert__id__contentst__id__last__bit_axiom
  (assert
  (< cert__id__contentst__id__first__bit cert__id__contentst__id__last__bit))

;; cert__id__contentst__id__position_axiom
  (assert (<= 0 cert__id__contentst__id__position))

(declare-const cert__id__contentst__notbefore__first__bit Int)

(declare-const cert__id__contentst__notbefore__last__bit Int)

(declare-const cert__id__contentst__notbefore__position Int)

;; cert__id__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notbefore__first__bit))

;; cert__id__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__id__contentst__notbefore__first__bit cert__id__contentst__notbefore__last__bit))

;; cert__id__contentst__notbefore__position_axiom
  (assert (<= 0 cert__id__contentst__notbefore__position))

(declare-const cert__id__contentst__notafter__first__bit Int)

(declare-const cert__id__contentst__notafter__last__bit Int)

(declare-const cert__id__contentst__notafter__position Int)

;; cert__id__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notafter__first__bit))

;; cert__id__contentst__notafter__last__bit_axiom
  (assert
  (< cert__id__contentst__notafter__first__bit cert__id__contentst__notafter__last__bit))

;; cert__id__contentst__notafter__position_axiom
  (assert (<= 0 cert__id__contentst__notafter__position))

(declare-const cert__id__contentst__mechanism__first__bit Int)

(declare-const cert__id__contentst__mechanism__last__bit Int)

(declare-const cert__id__contentst__mechanism__position Int)

;; cert__id__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__id__contentst__mechanism__first__bit))

;; cert__id__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__id__contentst__mechanism__first__bit cert__id__contentst__mechanism__last__bit))

;; cert__id__contentst__mechanism__position_axiom
  (assert (<= 0 cert__id__contentst__mechanism__position))

(declare-const cert__id__contentst__subject__first__bit Int)

(declare-const cert__id__contentst__subject__last__bit Int)

(declare-const cert__id__contentst__subject__position Int)

;; cert__id__contentst__subject__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subject__first__bit))

;; cert__id__contentst__subject__last__bit_axiom
  (assert
  (< cert__id__contentst__subject__first__bit cert__id__contentst__subject__last__bit))

;; cert__id__contentst__subject__position_axiom
  (assert (<= 0 cert__id__contentst__subject__position))

(declare-const cert__id__contentst__subjectpublickey__first__bit Int)

(declare-const cert__id__contentst__subjectpublickey__last__bit Int)

(declare-const cert__id__contentst__subjectpublickey__position Int)

;; cert__id__contentst__subjectpublickey__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__first__bit))

;; cert__id__contentst__subjectpublickey__last__bit_axiom
  (assert
  (< cert__id__contentst__subjectpublickey__first__bit cert__id__contentst__subjectpublickey__last__bit))

;; cert__id__contentst__subjectpublickey__position_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__position))

(declare-fun user_eq23 (us_rep6 us_rep6) Bool)

(declare-const dummy23 us_rep6)

(declare-datatypes ((contentst__ref1 0))
(((mk_contentst__ref1 (contentst__content1 us_rep6)))))
(define-fun contentst__ref___2__projection ((a contentst__ref1)) us_rep6
  (contentst__content1 a))

(declare-fun thesubject (us_rep6) us_rep1)

(declare-fun thesubject__function_guard (us_rep1 us_rep6) Bool)

;; thesubject__post_axiom
  (assert true)

(declare-fun thepublickey (us_rep6) us_rep2)

(declare-fun thepublickey__function_guard (us_rep2 us_rep6) Bool)

;; thepublickey__post_axiom
  (assert true)

(declare-fun cert_id_to_cert (us_rep6) us_rep5)

(declare-fun cert_id_to_cert__function_guard (us_rep5 us_rep6) Bool)

;; cert_id_to_cert__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant2 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun makedescription (us_t Int) (Array Int character))

(declare-fun makedescription__function_guard ((Array Int character) us_t
  Int) Bool)

;; makedescription__post_axiom
  (assert true)

(declare-const istis Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-fun temp___String_Literal_1083 (tuple0) (Array Int character))

;; temp___String_Literal_1083__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 6)) 102))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 8)) 99))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 13)) 99))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 14)) 111))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 15)) 117))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 16)) 108))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 17)) 100))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 19)) 110))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 20)) 111))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 21)) 116))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 23)) 98))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 24)) 101))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 26)) 118))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 27)) 101))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 28)) 114))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 29)) 105))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 30)) 102))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 31)) 105))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 32)) 101))
     (= (to_rep (select (temp___String_Literal_1083 us_void_param) 33)) 100)) :pattern (
  (temp___String_Literal_1083 us_void_param)) )))

(declare-fun temp___String_Literal_1084 (tuple0) (Array Int character))

;; temp___String_Literal_1084__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 1)) 75)
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 3)) 121))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 5)) 99))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 7)) 117))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 8)) 108))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 9)) 100))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 11)) 110))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 12)) 111))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 15)) 98))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 18)) 97))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 19)) 100))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 20)) 100))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 21)) 101))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 22)) 100))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 25)) 111))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 27)) 116))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 28)) 104))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 29)) 101))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 31)) 75))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 32)) 101))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 33)) 121))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 35)) 83))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 36)) 116))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 37)) 111))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 38)) 114))
     (= (to_rep (select (temp___String_Literal_1084 us_void_param) 39)) 101)) :pattern (
  (temp___String_Literal_1084 us_void_param)) )))

(declare-fun temp___String_Literal_1085 (tuple0) (Array Int character))

;; temp___String_Literal_1085__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 6)) 102))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 8)) 99))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 13)) 99))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 14)) 111))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 15)) 110))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 16)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 17)) 101))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 18)) 110))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 19)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 20)) 115))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 22)) 99))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 23)) 111))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 24)) 117))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 25)) 108))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 26)) 100))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 28)) 110))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 29)) 111))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 30)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 32)) 98))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 33)) 101))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 35)) 101))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 36)) 120))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 37)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 38)) 114))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 39)) 97))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 40)) 99))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 41)) 116))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 42)) 101))
     (= (to_rep (select (temp___String_Literal_1085 us_void_param) 43)) 100)) :pattern (
  (temp___String_Literal_1085 us_void_param)) )))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; nodescription__def_axiom
  (assert (= nodescription (audittypes__nodescription__aggregate_def 32)))

(define-fun dynamic_invariant5 ((temp___expr_246 Int)
  (temp___is_init_243 Bool) (temp___skip_constant_244 Bool)
  (temp___do_toplevel_245 Bool)) Bool (=>
                                      (or (= temp___is_init_243 true)
                                      (<= 1901 2099)) (in_range11
                                      temp___expr_246)))

(define-fun dynamic_invariant6 ((temp___expr_252 Int)
  (temp___is_init_249 Bool) (temp___skip_constant_250 Bool)
  (temp___do_toplevel_251 Bool)) Bool (=>
                                      (or (= temp___is_init_249 true)
                                      (<= 1 12)) (in_range12
                                      temp___expr_252)))

(define-fun dynamic_invariant7 ((temp___expr_258 Int)
  (temp___is_init_255 Bool) (temp___skip_constant_256 Bool)
  (temp___do_toplevel_257 Bool)) Bool (=>
                                      (or (= temp___is_init_255 true)
                                      (<= 1 31)) (in_range13
                                      temp___expr_258)))

(define-fun dynamic_invariant8 ((temp___expr_282 Int)
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)) Bool (=>
                                      (or (= temp___is_init_279 true)
                                      (<= 0 86399999)) (in_range14
                                      temp___expr_282)))

(define-fun dynamic_invariant9 ((temp___expr_666 Int)
  (temp___is_init_663 Bool) (temp___skip_constant_664 Bool)
  (temp___do_toplevel_665 Bool)) Bool (=>
                                      (or (= temp___is_init_663 true)
                                      (<= 0 40)) (in_range6 temp___expr_666)))

(define-fun dynamic_invariant10 ((temp___expr_687 Int)
  (temp___is_init_684 Bool) (temp___skip_constant_685 Bool)
  (temp___do_toplevel_686 Bool)) Bool (=>
                                      (or (= temp___is_init_684 true)
                                      (<= 0 4294967295)) (in_range5
                                      temp___expr_687)))

(define-fun dynamic_invariant11 ((temp___expr_705 Int)
  (temp___is_init_702 Bool) (temp___skip_constant_703 Bool)
  (temp___do_toplevel_704 Bool)) Bool (=>
                                      (or (= temp___is_init_702 true)
                                      (<= 0 10)) (in_range7 temp___expr_705)))

(define-fun dynamic_invariant12 ((temp___expr_717 Int)
  (temp___is_init_714 Bool) (temp___skip_constant_715 Bool)
  (temp___do_toplevel_716 Bool)) Bool (=>
                                      (or (= temp___is_init_714 true)
                                      (<= 0 4294967295)) (in_range8
                                      temp___expr_717)))

(define-fun dynamic_invariant13 ((temp___expr_723 Int)
  (temp___is_init_720 Bool) (temp___skip_constant_721 Bool)
  (temp___do_toplevel_722 Bool)) Bool (=>
                                      (or (= temp___is_init_720 true)
                                      (<= 0 128)) (in_range9
                                      temp___expr_723)))

(define-fun dynamic_invariant14 ((temp___expr_843 Int)
  (temp___is_init_840 Bool) (temp___skip_constant_841 Bool)
  (temp___do_toplevel_842 Bool)) Bool (=>
                                      (or (= temp___is_init_840 true)
                                      (<= 1 4096)) (in_range10
                                      temp___expr_843)))

;; nullrawcertificate__def_axiom
  (assert
  (= nullrawcertificate (certtypes__nullrawcertificate__aggregate_def 32)))

(define-fun dynamic_invariant15 ((temp___expr_901 Int)
  (temp___is_init_898 Bool) (temp___skip_constant_899 Bool)
  (temp___do_toplevel_900 Bool)) Bool (=>
                                      (or (= temp___is_init_898 true)
                                      (<= 0 4294967295)) (in_range15
                                      temp___expr_901)))

(declare-const filestate us_private)

(declare-const state us_private)

(declare-const state1 us_private)

(declare-const store1 us_private)

(declare-const thefile us_rep)

(declare-const certno Int)

(declare-const keyadded Bool)

(declare-const description (Array Int character))

(declare-const thecert (Array Int character))

(declare-const thecontents__split_fields us_split_fields__ref5)

(declare-const thesubject__split_fields issueridt)

(declare-const thesubject__split_fields1 namecountt)

(declare-const thesubject__split_fields2 (Array Int character))

(declare-const theissuer__split_fields issueridt)

(declare-const theissuer__split_fields1 namecountt)

(declare-const theissuer__split_fields2 (Array Int character))

(declare-const thepublickey__split_fields algorithmt)

(declare-const thepublickey__split_fields1 keyidt)

(declare-const thepublickey__split_fields2 keylengtht)

(declare-const addedok Bool)

(declare-const verifiedok Bool)

(declare-const stop Int)

(declare-const o Bool)

(declare-const o1 Bool)

(declare-const temp___1079 Int)

(declare-const temp___1078 us_rep)

(declare-const temp___1077 (Array Int character))

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const o4 Bool)

(declare-const o5 Bool)

(declare-const o6 Bool)

(declare-const temp___1080 issueridt)

(declare-const temp___10801 namecountt)

(declare-const temp___10802 (Array Int character))

(declare-const o7 us_rep5)

(declare-const temp___1081 us_rep1)

(declare-const temp___1082 us_rep2)

(declare-const o8 us_rep5)

(declare-const o9 (Array Int character))

(declare-const o10 (Array Int character))

(declare-const o11 (Array Int character))

(declare-const filestate1 us_private)

(declare-const state2 us_private)

(declare-const state3 us_private)

(declare-const store2 us_private)

(declare-const thefile1 us_rep)

(declare-const result map__ref)

(declare-const thecert1 (Array Int character))

(declare-const result1 bool__ref)

(declare-const addedok1 Bool)

(declare-const result2 bool__ref)

(declare-const verifiedok1 Bool)

(declare-const result3 int__ref)

(declare-const stop1 Int)

(declare-const result4 map__ref)

(declare-const description1 (Array Int character))

(declare-const result5 Bool)

(declare-const thefile2 us_rep)

(declare-const thecert2 (Array Int character))

(declare-const stop2 Int)

(declare-const thefile3 us_rep)

(declare-const stop3 Int)

(declare-const file__getline__item (Array Int character))

(declare-const result6 map__ref)

(declare-const thecert3 (Array Int character))

(declare-const result7 Bool)

(declare-const thefile4 t__ref)

(declare-const thecert4 map__ref)

(declare-const stop4 int__ref)

(declare-const thefile5 us_rep)

(declare-const thecert5 (Array Int character))

(declare-const stop5 Int)

(declare-const thefile6 t__ref)

(declare-const thecert6 map__ref)

(declare-const stop6 int__ref)

(declare-const thefile7 us_rep)

(declare-const thecert7 (Array Int character))

(declare-const stop7 Int)

(declare-const thecontents__split_fields1 us_split_fields10)

(declare-const extracted Bool)

(declare-const result8 us_split_fields__ref)

(declare-const thesubject__split_fields3 us_split_fields)

(declare-const result9 us_split_fields__ref)

(declare-const theissuer__split_fields3 us_split_fields)

(declare-const result10 us_split_fields__ref1)

(declare-const thepublickey__split_fields3 us_split_fields2)

(declare-const filestate2 us_private)

(declare-const state4 us_private)

(declare-const state5 us_private)

(declare-const store3 us_private)

(declare-const addedok2 Bool)

(declare-const filestate3 us_private__ref)

(declare-const state6 us_private__ref)

(declare-const state7 us_private__ref)

(declare-const store4 us_private__ref)

(declare-const addedok3 bool__ref)

(declare-const filestate4 us_private)

(declare-const state8 us_private)

(declare-const state9 us_private)

(declare-const store5 us_private)

(declare-const addedok4 Bool)

(declare-const filestate5 us_private__ref)

(declare-const state10 us_private__ref)

(declare-const state11 us_private__ref)

(declare-const store6 us_private__ref)

(declare-const addedok5 bool__ref)

(declare-const filestate6 us_private)

(declare-const state12 us_private)

(declare-const state13 us_private)

(declare-const store7 us_private)

(declare-const addedok6 Bool)

(declare-const filestate7 us_private)

(declare-const state14 us_private)

(declare-const verifiedok2 Bool)

(declare-const filestate8 us_private__ref)

(declare-const state15 us_private__ref)

(declare-const verifiedok3 bool__ref)

(declare-const filestate9 us_private)

(declare-const state16 us_private)

(declare-const verifiedok4 Bool)

(declare-const filestate10 us_private)

(declare-const state17 us_private)

(declare-const state18 us_private)

(declare-const store8 us_private)

(declare-const addedok7 Bool)

(declare-const filestate11 us_private__ref)

(declare-const state19 us_private__ref)

(declare-const state20 us_private__ref)

(declare-const store9 us_private__ref)

(declare-const addedok8 bool__ref)

(declare-const filestate12 us_private)

(declare-const state21 us_private)

(declare-const state22 us_private)

(declare-const store10 us_private)

(declare-const addedok9 Bool)

(declare-const filestate13 us_private)

(declare-const state23 us_private)

(declare-const state24 us_private)

(declare-const store11 us_private)

(declare-const addedok10 Bool)

(declare-const filestate14 us_private__ref)

(declare-const state25 us_private__ref)

(declare-const state26 us_private__ref)

(declare-const store12 us_private__ref)

(declare-const addedok11 bool__ref)

(declare-const filestate15 us_private)

(declare-const state27 us_private)

(declare-const state28 us_private)

(declare-const store13 us_private)

(declare-const addedok12 Bool)

(declare-const result11 map__ref)

(declare-const description2 (Array Int character))

(declare-const result12 map__ref)

(declare-const description3 (Array Int character))

(declare-const result13 map__ref)

(declare-const description4 (Array Int character))

(declare-const description5 map__ref)

(declare-const description6 (Array Int character))

(declare-const description7 map__ref)

(declare-const description8 (Array Int character))

(declare-const description9 map__ref)

(declare-const description10 (Array Int character))

(declare-const result14 bool__ref)

(declare-const keyadded1 Bool)

(declare-const filestate16 us_private__ref)

(declare-const state29 us_private__ref)

(declare-const state30 us_private__ref)

(declare-const store14 us_private__ref)

(declare-const thefile8 t__ref)

(declare-const keyadded2 bool__ref)

(declare-const description11 map__ref)

(declare-const thecert8 map__ref)

(declare-const thecontents__split_fields2 us_split_fields__ref5)

(declare-const thesubject__split_fields4 us_split_fields__ref)

(declare-const theissuer__split_fields4 us_split_fields__ref)

(declare-const thepublickey__split_fields4 us_split_fields__ref1)

(declare-const extracted1 bool__ref)

(declare-const addedok13 bool__ref)

(declare-const verifiedok5 bool__ref)

(declare-const stop8 int__ref)

(declare-const filestate17 us_private)

(declare-const state31 us_private)

(declare-const state32 us_private)

(declare-const store15 us_private)

(declare-const thefile9 us_rep)

(declare-const keyadded3 Bool)

(declare-const description12 (Array Int character))

(declare-const thecert9 (Array Int character))

(declare-const thecontents__split_fields3 us_split_fields10)

(declare-const thesubject__split_fields5 us_split_fields)

(declare-const theissuer__split_fields5 us_split_fields)

(declare-const thepublickey__split_fields5 us_split_fields2)

(declare-const extracted2 Bool)

(declare-const addedok14 Bool)

(declare-const verifiedok6 Bool)

(declare-const stop9 Int)

(define-fun store16 () us_private__ref (mk___private__ref store1))

(define-fun state33 () us_private__ref (mk___private__ref state1))

(define-fun state34 () us_private__ref (mk___private__ref state))

(define-fun filestate18 () us_private__ref (mk___private__ref filestate))

;; H
  (assert (= (audittypes__nodescription__aggregate_def 32) nodescription))

;; H
  (assert
  (= (certtypes__nullrawcertificate__aggregate_def 32) nullrawcertificate))

;; H
  (assert (in_range2 certno))

;; H
  (assert (= result (mk_map__ref thecert)))

;; H
  (assert (= thecert1 nullrawcertificate))

;; H
  (assert (= result1 (mk_bool__ref addedok)))

;; H
  (assert (= addedok1 (of_int 1)))

;; H
  (assert (= result2 (mk_bool__ref verifiedok)))

;; H
  (assert (= verifiedok1 (of_int 0)))

;; H
  (assert (= result3 (mk_int__ref stop)))

;; H
  (assert (= stop1 0))

;; H
  (assert (in_range4 stop1))

;; H
  (assert (= result4 (mk_map__ref description)))

;; H
  (assert (= description1 nodescription))

;; H
  (assert (= o (endoffile thefile)))

;; H
  (assert (= o1 (ite (not (= o true)) true false)))

;; H
  (assert (= result5 (ite (= stop1 0) o1 false)))

;; H
  (assert (=> (= result5 true) (= temp___1079 stop1)))

;; H
  (assert (=> (= result5 true) (= temp___1078 thefile)))

;; H
  (assert (=> (= result5 true) (= temp___1077 thecert1)))

;; H
  (assert
  (=> (= result5 true)
  (and (=> (<= 0 2147483647) (in_range4 stop2))
  (and (= stop2 0) (not (= (endoffile thefile2) true))))))

;; H
  (assert (=> (= result5 true) (= (to_rep1 o3) 4096)))

;; H
  (assert (=> (= result5 true) (= (to_rep1 o2) 1)))

;; H
  (assert (=> (= result5 true) (in_range4 stop3)))

;; H
  (assert (=> (= result5 true) (= result6 (mk_map__ref thecert2))))

;; H
  (assert
  (=> (= result5 true)
  (= thecert3 (slide file__getline__item (to_rep1 (first (mk 1 4096))) 1))))

;; H
  (assert (=> (= result5 true) (= o4 (endoffile thefile3))))

;; H
  (assert (=> (= result5 true) (= o5 (ite (not (= o4 true)) true false))))

;; H
  (assert (=> (= result5 true) (= o6 (ite (= stop3 0) o5 false))))

;; H
  (assert
  (=> (= result5 true) (= result7 (ite (not (= o6 true)) true false))))

;; H
  (assert (=> (= result5 true) (= result7 true)))

;; H
  (assert (=> (= result5 true) (= stop4 (mk_int__ref stop3))))

;; H
  (assert (=> (= result5 true) (= thecert4 (mk_map__ref thecert3))))

;; H
  (assert (=> (= result5 true) (= thefile4 (mk_t__ref thefile3))))

;; H
  (assert (=> (= result5 true) (= stop5 stop3)))

;; H
  (assert (=> (= result5 true) (= thecert5 thecert3)))

;; H
  (assert (=> (= result5 true) (= thefile5 thefile3)))

;; H
  (assert (=> (= result5 true) (= stop6 stop4)))

;; H
  (assert (=> (= result5 true) (= thecert6 thecert4)))

;; H
  (assert (=> (= result5 true) (= thefile6 thefile4)))

;; H
  (assert (=> (= result5 true) (= stop7 stop5)))

;; H
  (assert (=> (= result5 true) (= thecert7 thecert5)))

;; H
  (assert (=> (= result5 true) (= thefile7 thefile5)))

;; H
  (assert (=> (not (= result5 true)) (= stop6 (mk_int__ref stop1))))

;; H
  (assert (=> (not (= result5 true)) (= thecert6 (mk_map__ref thecert1))))

;; H
  (assert (=> (not (= result5 true)) (= thefile6 (mk_t__ref thefile))))

;; H
  (assert (=> (not (= result5 true)) (= stop7 stop1)))

;; H
  (assert (=> (not (= result5 true)) (= thecert7 thecert1)))

;; H
  (assert (=> (not (= result5 true)) (= thefile7 thefile1)))

;; H
  (assert
  (= (mk___rep (mk___split_fields temp___1080 temp___10801 temp___10802))
  (thesubject
  (mk___rep5
  (let ((subject thecontents__split_fields)) thecontents__split_fields1)))))

;; H
  (assert
  (= result8 (mk___split_fields__ref
             (mk___split_fields thesubject__split_fields
             thesubject__split_fields1 thesubject__split_fields2))))

;; H
  (assert
  (= thesubject__split_fields3 (mk___split_fields temp___1080 temp___10801
                               temp___10802)))

;; H
  (assert
  (= o7 (cert_id_to_cert
        (mk___rep5
        (let ((subject thecontents__split_fields))
        thecontents__split_fields1)))))

;; H
  (assert (= temp___1081 (theissuer o7)))

;; H
  (assert
  (= result9 (mk___split_fields__ref
             (mk___split_fields theissuer__split_fields
             theissuer__split_fields1 theissuer__split_fields2))))

;; H
  (assert (= theissuer__split_fields3 (us_split_fields1 temp___1081)))

;; H
  (assert
  (= temp___1082 (thepublickey
                 (mk___rep5
                 (let ((subject thecontents__split_fields))
                 thecontents__split_fields1)))))

;; H
  (assert
  (= result10 (mk___split_fields__ref1
              (mk___split_fields1 thepublickey__split_fields
              thepublickey__split_fields1 thepublickey__split_fields2))))

;; H
  (assert (= thepublickey__split_fields3 (us_split_fields3 temp___1082)))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (ite (= (ite (= (ite (= addedok2 true) (ite (= (of_int 1) false) (privatekeypresent
                                                                   state5) false) false) false)
          (ite (= addedok2 true) (ite (= (of_int 1) false) false (= (to_int1
                                                                    (privatekeypresent
                                                                    state5))
                                 (to_int1 (privatekeypresent state1)))) (=
          (to_int1 (privatekeypresent state5)) (to_int1
                                               (privatekeypresent state1)))) true) true)
  (ite (= (ite (= (ite (= addedok2 true) (ite (= (of_int 1) false) (privatekeypresent
                                                                   state5) false) false) true)
          (ite (= addedok2 true) (ite (= (of_int 1) false) false (= (to_int1
                                                                    (privatekeypresent
                                                                    state5))
                                 (to_int1 (privatekeypresent state1)))) (=
          (to_int1 (privatekeypresent state5)) (to_int1
                                               (privatekeypresent state1)))) false) false) true false) true))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (ite (= (ite (= (ite (= addedok2 true) (ite (= (of_int 1) false) (privatekeypresent
                                                                   state5) false) false) false)
          (ite (= addedok2 true) (ite (= (of_int 1) false) false (= (to_int1
                                                                    (privatekeypresent
                                                                    state5))
                                 (to_int1 (privatekeypresent state1)))) (=
          (to_int1 (privatekeypresent state5)) (to_int1
                                               (privatekeypresent state1)))) true) true) true false))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= addedok3 (mk_bool__ref addedok2)))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= store4 (mk___private__ref store3)))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= state7 (mk___private__ref state5)))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= state6 (mk___private__ref state4)))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= filestate3 (mk___private__ref filestate2)))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= addedok4 addedok2))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= store5 store3))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= state9 state5))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= state8 state4))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3)))
  (= filestate4 filestate2))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= addedok3 (mk_bool__ref addedok1)))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= store4 store16))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= state7 state33))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= state6 state34))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= filestate3 filestate18))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= addedok4 addedok1))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= store5 store2))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= state9 state3))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= state8 state2))))

;; H
  (assert
  (=> (= extracted true)
  (=>
  (not
  (= (to_rep2 (rec__cryptotypes__issuert__id thesubject__split_fields3))
  (to_rep2 (rec__cryptotypes__issuert__id theissuer__split_fields3))))
  (= filestate4 filestate1))))

;; H
  (assert (=> (= extracted true) (= addedok5 addedok3)))

;; H
  (assert (=> (= extracted true) (= store6 store4)))

;; H
  (assert (=> (= extracted true) (= state11 state7)))

;; H
  (assert (=> (= extracted true) (= state10 state6)))

;; H
  (assert (=> (= extracted true) (= filestate5 filestate3)))

;; H
  (assert (=> (= extracted true) (= addedok6 addedok4)))

;; H
  (assert (=> (= extracted true) (= store7 store5)))

;; H
  (assert (=> (= extracted true) (= state13 state9)))

;; H
  (assert (=> (= extracted true) (= state12 state8)))

;; H
  (assert (=> (= extracted true) (= filestate6 filestate4)))

;; H
  (assert (=> (not (= extracted true)) (= addedok5 (mk_bool__ref addedok1))))

;; H
  (assert (=> (not (= extracted true)) (= store6 store16)))

;; H
  (assert (=> (not (= extracted true)) (= state11 state33)))

;; H
  (assert (=> (not (= extracted true)) (= state10 state34)))

;; H
  (assert (=> (not (= extracted true)) (= filestate5 filestate18)))

;; H
  (assert (=> (not (= extracted true)) (= addedok6 addedok1)))

;; H
  (assert (=> (not (= extracted true)) (= store7 store2)))

;; H
  (assert (=> (not (= extracted true)) (= state13 state3)))

;; H
  (assert (=> (not (= extracted true)) (= state12 state2)))

;; H
  (assert (=> (not (= extracted true)) (= filestate6 filestate1)))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= o8 (cert_id_to_cert
        (mk___rep5
        (let ((subject thecontents__split_fields))
        thecontents__split_fields1))))))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= verifiedok3 (mk_bool__ref verifiedok2))))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= state15 (mk___private__ref state14))))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= filestate8 (mk___private__ref filestate7))))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= verifiedok4 verifiedok2)))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= state16 state14)))

;; H
  (assert
  (=> (= (ite (= extracted true) (bool__content addedok5) false) true)
  (= filestate9 filestate7)))

;; H
  (assert
  (=> (not (= (ite (= extracted true) (bool__content addedok5) false) true))
  (= verifiedok3 (mk_bool__ref verifiedok1))))

;; H
  (assert
  (=> (not (= (ite (= extracted true) (bool__content addedok5) false) true))
  (= state15 state10)))

;; H
  (assert
  (=> (not (= (ite (= extracted true) (bool__content addedok5) false) true))
  (= filestate8 filestate5)))

;; H
  (assert
  (=> (not (= (ite (= extracted true) (bool__content addedok5) false) true))
  (= verifiedok4 verifiedok1)))

;; H
  (assert
  (=> (not (= (ite (= extracted true) (bool__content addedok5) false) true))
  (= state16 state12)))

;; H
  (assert
  (=> (not (= (ite (= extracted true) (bool__content addedok5) false) true))
  (= filestate9 filestate6)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (ite (= (ite (= (ite (= addedok7 true) (ite (= (of_int 1) false) (privatekeypresent
                                                                   state18) false) false) false)
          (ite (= addedok7 true) (ite (= (of_int 1) false) false (= (to_int1
                                                                    (privatekeypresent
                                                                    state18))
                                 (to_int1
                                 (privatekeypresent
                                 (us_private__content state11))))) (=
          (to_int1 (privatekeypresent state18)) (to_int1
                                                (privatekeypresent
                                                (us_private__content state11))))) true) true)
  (ite (= (ite (= (ite (= addedok7 true) (ite (= (of_int 1) false) (privatekeypresent
                                                                   state18) false) false) true)
          (ite (= addedok7 true) (ite (= (of_int 1) false) false (= (to_int1
                                                                    (privatekeypresent
                                                                    state18))
                                 (to_int1
                                 (privatekeypresent
                                 (us_private__content state11))))) (=
          (to_int1 (privatekeypresent state18)) (to_int1
                                                (privatekeypresent
                                                (us_private__content state11))))) false) false) true false) true)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (ite (= (ite (= (ite (= addedok7 true) (ite (= (of_int 1) false) (privatekeypresent
                                                                   state18) false) false) false)
          (ite (= addedok7 true) (ite (= (of_int 1) false) false (= (to_int1
                                                                    (privatekeypresent
                                                                    state18))
                                 (to_int1
                                 (privatekeypresent
                                 (us_private__content state11))))) (=
          (to_int1 (privatekeypresent state18)) (to_int1
                                                (privatekeypresent
                                                (us_private__content state11))))) true) true) true false)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= addedok8 (mk_bool__ref addedok7))))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= store9 (mk___private__ref store8))))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= state20 (mk___private__ref state18))))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= state19 (mk___private__ref state17))))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= filestate11 (mk___private__ref filestate10))))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= addedok9 addedok7)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= store10 store8)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= state22 state18)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= state21 state17)))

;; H
  (assert
  (=>
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false)
  (= filestate12 filestate10)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= addedok8 addedok5)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= store9 store6)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= state20 state11)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= state19 state15)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= filestate11 filestate8)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= addedok9 addedok6)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= store10 store7)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= state22 state13)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= state21 state16)))

;; H
  (assert
  (=>
  (not
  (ite (= (bool__content verifiedok3) true) (not
                                            (= (to_rep2
                                               (rec__cryptotypes__issuert__id
                                               thesubject__split_fields3))
                                            (to_rep2
                                            (rec__cryptotypes__issuert__id
                                            theissuer__split_fields3)))) false))
  (= filestate12 filestate9)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (ite (= (ite (= (ite (= addedok10 true) (ite (= (of_int 0) false) (privatekeypresent
                                                                    state24) false) false) false)
          (ite (= addedok10 true) (ite (= (of_int 0) false) false (=
                                  (to_int1 (privatekeypresent state24))
                                  (to_int1
                                  (privatekeypresent
                                  (us_private__content state20))))) (=
          (to_int1 (privatekeypresent state24)) (to_int1
                                                (privatekeypresent
                                                (us_private__content state20))))) true) true)
  (ite (= (ite (= (ite (= addedok10 true) (ite (= (of_int 0) false) (privatekeypresent
                                                                    state24) false) false) true)
          (ite (= addedok10 true) (ite (= (of_int 0) false) false (=
                                  (to_int1 (privatekeypresent state24))
                                  (to_int1
                                  (privatekeypresent
                                  (us_private__content state20))))) (=
          (to_int1 (privatekeypresent state24)) (to_int1
                                                (privatekeypresent
                                                (us_private__content state20))))) false) false) true false) true)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (ite (= (ite (= (ite (= addedok10 true) (ite (= (of_int 0) false) (privatekeypresent
                                                                    state24) false) false) false)
          (ite (= addedok10 true) (ite (= (of_int 0) false) false (=
                                  (to_int1 (privatekeypresent state24))
                                  (to_int1
                                  (privatekeypresent
                                  (us_private__content state20))))) (=
          (to_int1 (privatekeypresent state24)) (to_int1
                                                (privatekeypresent
                                                (us_private__content state20))))) true) true) true false)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= addedok11 (mk_bool__ref addedok10))))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= store12 (mk___private__ref store11))))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= state26 (mk___private__ref state24))))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= state25 (mk___private__ref state23))))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= filestate14 (mk___private__ref filestate13))))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= addedok12 addedok10)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= store13 store11)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= state28 state24)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= state27 state23)))

;; H
  (assert
  (=>
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true)
  (= filestate15 filestate13)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= addedok11 addedok8)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= store12 store9)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= state26 state20)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= state25 state19)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= filestate14 filestate11)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= addedok12 addedok9)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= store13 store10)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= state28 state22)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= state27 state21)))

;; H
  (assert
  (=>
  (not
  (= (ite (= (ite (= (bool__content verifiedok3) true) (bool__content
                                                       addedok8) false) true)
     istis false) true))
  (= filestate15 filestate12)))

;; H
  (assert
  (=> (not (= extracted true))
  (= o9 (makedescription
        (mk___t (temp___String_Literal_1085 Tuple0) (mk 1 43)) certno))))

;; H
  (assert
  (=> (not (= extracted true)) (= result11 (mk_map__ref description1))))

;; H
  (assert (=> (not (= extracted true)) (= description2 o9)))

;; H
  (assert
  (=> (not (= extracted true)) (= description9 (mk_map__ref description2))))

;; H
  (assert (=> (not (= extracted true)) (= description10 description2)))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (= (bool__content addedok11) true))
  (= o10 (makedescription
         (mk___t (temp___String_Literal_1084 Tuple0) (mk 1 39)) certno)))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (= (bool__content addedok11) true))
  (= result12 (mk_map__ref description1)))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (= (bool__content addedok11) true)) (= description3 o10))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (= (bool__content addedok11) true))
  (= description7 (mk_map__ref description3)))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (= (bool__content addedok11) true)) (= description8 description3))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (= (bool__content verifiedok3) true))
  (= o11 (makedescription
         (mk___t (temp___String_Literal_1083 Tuple0) (mk 1 33)) certno))))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (= (bool__content verifiedok3) true))
  (= result13 (mk_map__ref description1))))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (= (bool__content verifiedok3) true)) (= description4 o11)))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (= (bool__content verifiedok3) true))
  (= description5 (mk_map__ref description4))))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (= (bool__content verifiedok3) true))
  (= description6 description4)))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (not (= (bool__content verifiedok3) true)))
  (= description5 (mk_map__ref description1))))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (=> (not (not (= (bool__content verifiedok3) true)))
  (= description6 description1)))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (= description7 description5))))

;; H
  (assert
  (=> (not (not (= extracted true)))
  (=> (not (not (= (bool__content addedok11) true)))
  (= description8 description6))))

;; H
  (assert (=> (not (not (= extracted true))) (= description9 description7)))

;; H
  (assert (=> (not (not (= extracted true))) (= description10 description8)))

;; H
  (assert (= result14 (mk_bool__ref keyadded)))

;; H
  (assert
  (= keyadded1 (ite (= (bool__content verifiedok3) true) (bool__content
                                                         addedok11) false)))

;; H
  (assert (= stop8 stop6))

;; H
  (assert (= verifiedok5 verifiedok3))

;; H
  (assert (= addedok13 addedok11))

;; H
  (assert (= extracted1 (mk_bool__ref extracted)))

;; H
  (assert
  (= thepublickey__split_fields4 (mk___split_fields__ref1
                                 thepublickey__split_fields3)))

;; H
  (assert
  (= theissuer__split_fields4 (mk___split_fields__ref
                              theissuer__split_fields3)))

;; H
  (assert
  (= thesubject__split_fields4 (mk___split_fields__ref
                               thesubject__split_fields3)))

;; H
  (assert
  (= thecontents__split_fields2 (let ((subject thecontents__split_fields))
                                (mk___split_fields__ref5
                                thecontents__split_fields1))))

;; H
  (assert (= thecert8 thecert6))

;; H
  (assert (= description11 description9))

;; H
  (assert (= keyadded2 (mk_bool__ref keyadded1)))

;; H
  (assert (= thefile8 thefile6))

;; H
  (assert (= store14 store12))

;; H
  (assert (= state30 state26))

;; H
  (assert (= state29 state25))

;; H
  (assert (= filestate16 filestate14))

;; H
  (assert (= stop9 stop7))

;; H
  (assert (= verifiedok6 verifiedok4))

;; H
  (assert (= addedok14 addedok12))

;; H
  (assert (= extracted2 extracted))

;; H
  (assert (= thepublickey__split_fields5 thepublickey__split_fields3))

;; H
  (assert (= theissuer__split_fields5 theissuer__split_fields3))

;; H
  (assert (= thesubject__split_fields5 thesubject__split_fields3))

;; H
  (assert (= thecontents__split_fields3 thecontents__split_fields1))

;; H
  (assert (= thecert9 thecert7))

;; H
  (assert (= description12 description10))

;; H
  (assert (= keyadded3 keyadded1))

;; H
  (assert (= thefile9 thefile7))

;; H
  (assert (= store15 store13))

;; H
  (assert (= state32 state28))

;; H
  (assert (= state31 state27))

;; H
  (assert (= filestate17 filestate15))

(assert
;; WP_parameter_def
 ;; File "audittypes.ads", line 92, characters 0-0
  (not
  (<= (to_int1 (ite (= istis true) (bool__content keyadded2) false))
  (to_int1 (privatekeypresent (us_private__content state30))))))
(check-sat)
(exit)
