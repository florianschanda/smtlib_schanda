;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun power (Int Int) Int)

;; Power_0
  (assert (forall ((x Int)) (= (power x 0) 1)))

;; Power_s
  (assert
  (forall ((x Int) (n Int))
  (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))

;; Power_s_alt
  (assert
  (forall ((x Int) (n Int))
  (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))

;; Power_1
  (assert (forall ((x Int)) (= (power x 1) x)))

;; Power_sum
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n)
  (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; Power_mult
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
  (assert
  (forall ((x Int) (y Int) (n Int))
  (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))

;; Power_non_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))

;; Power_monotonic
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ((word32__ref 0))
(((mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x word32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort word64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (word64 word64) Bool)

(declare-const dummy3 word64)

(declare-datatypes ((word64__ref 0))
(((mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_223 (_ BitVec 64))
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)) Bool true)

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((math_int__ref 0))
(((mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

;; oadd__post_axiom
  (assert true)

(declare-fun osubtract (us_rep us_rep) us_rep)

(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)

;; osubtract__post_axiom
  (assert true)

(declare-fun omultiply (us_rep us_rep) us_rep)

(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)

;; omultiply__post_axiom
  (assert true)

(declare-fun odivide (us_rep us_rep) us_rep)

(declare-fun odivide__function_guard (us_rep us_rep us_rep) Bool)

;; odivide__post_axiom
  (assert true)

(declare-fun omod (us_rep us_rep) us_rep)

(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)

;; omod__post_axiom
  (assert true)

(declare-fun oexpon (us_rep Int) us_rep)

(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)

;; oexpon__post_axiom
  (assert true)

(declare-fun oexpon__2 (us_rep us_rep) us_rep)

(declare-fun oexpon__2__function_guard (us_rep us_rep us_rep) Bool)

;; oexpon__2__post_axiom
  (assert true)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun olt (us_rep us_rep) Bool)

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; olt__post_axiom
  (assert true)

(declare-fun ole (us_rep us_rep) Bool)

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

;; ole__post_axiom
  (assert true)

(declare-fun from_integer (Int) us_rep)

(declare-fun from_integer__function_guard (us_rep Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; from_integer__post_axiom
  (assert true)

(declare-fun from_word32 ((_ BitVec 32)) us_rep)

(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)

;; from_word32__post_axiom
  (assert true)

(declare-fun from_word64 ((_ BitVec 64)) us_rep)

(declare-fun from_word64__function_guard (us_rep (_ BitVec 64)) Bool)

;; from_word64__post_axiom
  (assert true)

(declare-fun base (tuple0) us_rep)

(declare-fun base__function_guard (us_rep tuple0) Bool)

;; base__post_axiom
  (assert true)

;; base__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern (
  (base us_void_param)) )))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (big_int_range big_int_range) Bool)

(declare-const dummy5 big_int_range)

(declare-datatypes ((big_int_range__ref 0))
(((mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int word32)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-const dummy6 us_t)

(declare-datatypes ((big_int__ref 0))
(((mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant4 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun num_of_big_int (us_t Int Int) us_rep)

(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)

;; num_of_big_int__post_axiom
  (assert true)

(declare-fun inverse (us_rep us_rep) us_rep)

(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const a_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const x_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const e us_t)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const e_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const e_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const m us_t)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const m_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const aux1__first integer)

(declare-const aux1__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const aux1_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const aux2__first integer)

(declare-const aux2__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const aux2_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const aux3__first integer)

(declare-const aux3__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const aux3_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const aux4__first integer)

(declare-const aux4__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const aux4_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const r us_t)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const r_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const m_inv (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun bit_set (us_t Int (_ BitVec 64)) Bool)

(declare-fun bit_set__function_guard (Bool us_t Int (_ BitVec 64)) Bool)

;; bit_set__post_axiom
  (assert
  (forall ((a us_t))
  (forall ((a_first1 Int))
  (forall ((i (_ BitVec 64)))
  (! (=>
     (and
     (and
     (and (dynamic_invariant4 a true true true) (dynamic_invariant a_first1
     true true true)) (dynamic_invariant2 i true true true))
     (and (and (<= (first1 a) a_first1) (<= a_first1 (last1 a)))
     (bvule (bvudiv i ((_ int2bv 64) 32)) ((_ int2bv 64) (- (last1 a) a_first1)))))
     (= (= (bit_set a a_first1 i) true)
     (not
     (= (bvand (to_rep1
               (select (to_array a) (+ a_first1 (bv2int (bvudiv i ((_ int2bv 64) 32))))))
     (let ((temp___456 (bv2int (bvurem i ((_ int2bv 64) 32)))))
     (ite (< temp___456 4294967296)
     (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) temp___456)) ((_ int2bv 32) 0)))) ((_ int2bv 32) 0))))) :pattern (
  (bit_set a a_first1 i)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((t79b__ref 0))
(((mk_t79b__ref (t79b__content integer)))))
(define-fun t79b__ref___projection ((a t79b__ref)) integer (t79b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const r94b Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ((t95b__ref 0))
(((mk_t95b__ref (t95b__content integer)))))
(define-fun t95b__ref___projection ((a t95b__ref)) integer (t95b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(define-fun dynamic_invariant5 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

;; inverse__post_axiom
  (assert true)

(declare-const a (Array Int word32))

(declare-const j Int)

(declare-const l Int)

(declare-const s Int)

(declare-const i (_ BitVec 64))

(declare-const w (_ BitVec 32))

(declare-const h Int)

(declare-const o us_rep)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 us_rep)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 us_rep)

(declare-const o11 us_rep)

(declare-const o12 us_rep)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 us_rep)

(declare-const o17 us_rep)

(declare-const o18 us_rep)

(declare-const o19 Int)

(declare-const o20 Int)

(declare-const o21 Int)

(declare-const o22 Int)

(declare-const o23 us_rep)

(declare-const o24 us_rep)

(declare-const o25 Int)

(declare-const o26 Int)

(declare-const o27 Int)

(declare-const o28 Int)

(declare-const o29 Int)

(declare-const o30 Int)

(declare-const o31 Bool)

(declare-const o32 Bool)

(declare-const o33 Int)

(declare-const o34 Int)

(declare-const o35 Int)

(declare-const o36 Int)

(declare-const o37 Int)

(declare-const o38 Int)

(declare-const o39 Int)

(declare-const o40 Int)

(declare-const o41 Int)

(declare-const o42 Int)

(declare-const o43 Int)

(declare-const o44 Int)

(declare-const o45 Int)

(declare-const o46 Int)

(declare-const o47 Int)

(declare-const o48 Int)

(declare-const o49 Int)

(declare-const o50 Int)

(declare-const o51 Int)

(declare-const o52 Int)

(declare-const o53 Bool)

(declare-const o54 Bool)

(declare-const o55 Int)

(declare-const o56 Int)

(declare-const o57 Int)

(declare-const o58 Int)

(declare-const o59 Int)

(declare-const o60 Int)

(declare-const o61 Bool)

(declare-const o62 Bool)

(declare-const o63 Int)

(declare-const o64 Int)

(declare-const o65 Int)

(declare-const o66 Int)

(declare-const o67 Int)

(declare-const o68 Int)

(declare-const o69 Bool)

(declare-const o70 Bool)

(declare-const o71 Int)

(declare-const o72 Int)

(declare-const o73 Int)

(declare-const o74 Int)

(declare-const o75 Int)

(declare-const o76 Int)

(declare-const o77 Bool)

(declare-const o78 Bool)

(declare-const o79 Int)

(declare-const o80 Int)

(declare-const o81 Int)

(declare-const o82 Int)

(declare-const o83 Int)

(declare-const o84 Int)

(declare-const o85 Bool)

(declare-const o86 Bool)

(declare-const o87 Int)

(declare-const o88 Int)

(declare-const o89 Int)

(declare-const o90 Int)

(declare-const o91 Int)

(declare-const o92 Int)

(declare-const o93 Bool)

(declare-const o94 Bool)

(declare-const o95 Int)

(declare-const o96 Int)

(declare-const o97 Int)

(declare-const o98 word32)

(declare-const o99 Int)

(declare-const o100 (Array Int word32))

(declare-const o101 Int)

(declare-const o102 Int)

(declare-const o103 Int)

(declare-const o104 Int)

(declare-const o105 Int)

(declare-const o106 us_rep)

(declare-const o107 us_rep)

(declare-const o108 Bool)

(declare-const o109 Int)

(declare-const o110 us_rep)

(declare-const o111 Int)

(declare-const o112 us_rep)

(declare-const o113 Int)

(declare-const o114 us_rep)

(declare-const o115 us_rep)

(declare-const o116 us_rep)

(declare-const o117 Int)

(declare-const o118 us_rep)

(declare-const o119 us_rep)

(declare-const o120 Int)

(declare-const o121 us_rep)

(declare-const o122 us_rep)

(declare-const o123 Bool)

(declare-const o124 Int)

(declare-const o125 us_rep)

(declare-const o126 us_rep)

(declare-const o127 Int)

(declare-const o128 us_rep)

(declare-const o129 Int)

(declare-const o130 us_rep)

(declare-const o131 us_rep)

(declare-const o132 Bool)

(declare-const o133 Int)

(declare-const o134 us_rep)

(declare-const o135 Int)

(declare-const o136 us_rep)

(declare-const o137 us_rep)

(declare-const o138 Int)

(declare-const o139 us_rep)

(declare-const o140 us_rep)

(declare-const o141 Int)

(declare-const o142 us_rep)

(declare-const o143 us_rep)

(declare-const o144 Bool)

(declare-const o145 Int)

(declare-const o146 Int)

(declare-const us Int)

(declare-const o147 Int)

(declare-const o148 Int)

(declare-const temp___638 Int)

(declare-const temp___636 Int)

(declare-const temp___633 (Array Int word32))

(declare-const temp___631 (Array Int word32))

(declare-const o149 Int)

(declare-const o150 Int)

(declare-const o151 us_rep)

(declare-const o152 us_rep)

(declare-const o153 Bool)

(declare-const o154 Int)

(declare-const o155 us_rep)

(declare-const o156 Int)

(declare-const o157 us_rep)

(declare-const o158 Int)

(declare-const o159 us_rep)

(declare-const o160 us_rep)

(declare-const o161 us_rep)

(declare-const o162 Int)

(declare-const o163 us_rep)

(declare-const o164 us_rep)

(declare-const o165 Int)

(declare-const o166 us_rep)

(declare-const o167 us_rep)

(declare-const o168 Bool)

(declare-const o169 Int)

(declare-const o170 us_rep)

(declare-const o171 us_rep)

(declare-const o172 Int)

(declare-const o173 us_rep)

(declare-const o174 Int)

(declare-const o175 us_rep)

(declare-const o176 us_rep)

(declare-const o177 Bool)

(declare-const n Int)

(declare-const o178 Int)

(declare-const o179 Int)

(declare-const o180 Int)

(declare-const o181 Int)

(declare-const o182 Int)

(declare-const o183 Int)

(declare-const o184 Int)

(declare-const o185 Int)

(declare-const o186 us_rep)

(declare-const o187 Int)

(declare-const o188 Int)

(declare-const o189 Int)

(declare-const o190 Int)

(declare-const o191 us_rep)

(declare-const o192 us_rep)

(declare-const o193 Int)

(declare-const o194 us_rep)

(declare-const o195 us_rep)

(declare-const o196 Int)

(declare-const o197 us_rep)

(declare-const o198 us_rep)

(declare-const o199 Bool)

(declare-const o200 Int)

(declare-const o201 Int)

(declare-const o202 Int)

(declare-const o203 Int)

(declare-const o204 Int)

(declare-const o205 Int)

(declare-const o206 Int)

(declare-const o207 Int)

(declare-const o208 Int)

(declare-const o209 Int)

(declare-const o210 Int)

(declare-const o211 Int)

(declare-const o212 Int)

(declare-const o213 Int)

(declare-const o214 us_rep)

(declare-const o215 us_rep)

(declare-const o216 Bool)

(declare-const o217 Int)

(declare-const o218 us_rep)

(declare-const o219 Int)

(declare-const o220 us_rep)

(declare-const o221 Int)

(declare-const o222 us_rep)

(declare-const o223 us_rep)

(declare-const o224 us_rep)

(declare-const o225 Int)

(declare-const o226 us_rep)

(declare-const o227 us_rep)

(declare-const o228 Int)

(declare-const o229 us_rep)

(declare-const o230 us_rep)

(declare-const o231 Bool)

(declare-const o232 Int)

(declare-const o233 us_rep)

(declare-const o234 us_rep)

(declare-const o235 Int)

(declare-const o236 us_rep)

(declare-const o237 Int)

(declare-const o238 us_rep)

(declare-const o239 us_rep)

(declare-const o240 Bool)

(declare-const n1 Int)

(declare-const o241 Int)

(declare-const o242 Int)

(declare-const o243 Int)

(declare-const o244 Int)

(declare-const o245 Int)

(declare-const o246 Int)

(declare-const o247 Int)

(declare-const o248 Int)

(declare-const o249 us_rep)

(declare-const o250 Int)

(declare-const o251 Int)

(declare-const o252 Int)

(declare-const o253 Int)

(declare-const o254 us_rep)

(declare-const o255 us_rep)

(declare-const o256 Int)

(declare-const o257 us_rep)

(declare-const o258 us_rep)

(declare-const o259 Int)

(declare-const o260 us_rep)

(declare-const o261 us_rep)

(declare-const o262 Bool)

(declare-const o263 Int)

(declare-const o264 Int)

(declare-const o265 (_ BitVec 64))

(declare-const o266 (_ BitVec 64))

(declare-const o267 (_ BitVec 64))

(declare-const o268 (_ BitVec 64))

(declare-const temp___700 Int)

(declare-const temp___699 Int)

(declare-const temp___698 (Array Int word32))

(declare-const temp___696 (_ BitVec 32))

(declare-const temp___695 (_ BitVec 64))

(declare-const temp___694 (Array Int word32))

(declare-const o269 Int)

(declare-const o270 Int)

(declare-const o271 us_rep)

(declare-const o272 us_rep)

(declare-const o273 Bool)

(declare-const o274 Int)

(declare-const o275 us_rep)

(declare-const o276 Int)

(declare-const o277 us_rep)

(declare-const o278 Int)

(declare-const o279 us_rep)

(declare-const o280 us_rep)

(declare-const o281 us_rep)

(declare-const o282 Int)

(declare-const o283 us_rep)

(declare-const o284 us_rep)

(declare-const o285 Int)

(declare-const o286 us_rep)

(declare-const o287 us_rep)

(declare-const o288 Bool)

(declare-const o289 Int)

(declare-const o290 us_rep)

(declare-const o291 Int)

(declare-const o292 us_rep)

(declare-const o293 Int)

(declare-const o294 Int)

(declare-const o295 Int)

(declare-const o296 Int)

(declare-const o297 us_rep)

(declare-const o298 us_rep)

(declare-const o299 us_rep)

(declare-const o300 us_rep)

(declare-const o301 us_rep)

(declare-const o302 us_rep)

(declare-const o303 us_rep)

(declare-const o304 us_rep)

(declare-const o305 us_rep)

(declare-const o306 Int)

(declare-const o307 us_rep)

(declare-const o308 us_rep)

(declare-const o309 Int)

(declare-const o310 us_rep)

(declare-const o311 us_rep)

(declare-const o312 Bool)

(declare-const n2 Int)

(declare-const o313 Int)

(declare-const o314 Int)

(declare-const us1 Int)

(declare-const o315 Int)

(declare-const o316 Int)

(declare-const o317 Int)

(declare-const o318 Bool)

(declare-const o319 Int)

(declare-const o320 Int)

(declare-const o321 Int)

(declare-const o322 Int)

(declare-const o323 Int)

(declare-const o324 Int)

(declare-const o325 Int)

(declare-const o326 Int)

(declare-const o327 us_rep)

(declare-const o328 Int)

(declare-const o329 Int)

(declare-const o330 Int)

(declare-const o331 Int)

(declare-const o332 us_rep)

(declare-const o333 us_rep)

(declare-const o334 Int)

(declare-const o335 us_rep)

(declare-const o336 us_rep)

(declare-const o337 Int)

(declare-const o338 us_rep)

(declare-const o339 us_rep)

(declare-const o340 Bool)

(declare-const o341 Int)

(declare-const o342 Int)

(declare-const o343 (_ BitVec 64))

(declare-const o344 (_ BitVec 64))

(declare-const o345 (_ BitVec 64))

(declare-const o346 Bool)

(declare-const temp___645 Int)

(declare-const temp___644 Int)

(declare-const temp___643 (_ BitVec 32))

(declare-const o347 Int)

(declare-const o348 Int)

(declare-const o349 us_rep)

(declare-const o350 us_rep)

(declare-const o351 Bool)

(declare-const o352 Int)

(declare-const o353 us_rep)

(declare-const o354 Int)

(declare-const o355 us_rep)

(declare-const o356 Int)

(declare-const o357 us_rep)

(declare-const o358 us_rep)

(declare-const o359 us_rep)

(declare-const o360 Int)

(declare-const o361 us_rep)

(declare-const o362 us_rep)

(declare-const o363 Int)

(declare-const o364 us_rep)

(declare-const o365 us_rep)

(declare-const o366 Bool)

(declare-const o367 Int)

(declare-const o368 us_rep)

(declare-const o369 Int)

(declare-const o370 us_rep)

(declare-const o371 Int)

(declare-const o372 Int)

(declare-const o373 Int)

(declare-const o374 Int)

(declare-const o375 us_rep)

(declare-const o376 us_rep)

(declare-const o377 us_rep)

(declare-const o378 us_rep)

(declare-const o379 us_rep)

(declare-const o380 us_rep)

(declare-const o381 us_rep)

(declare-const o382 us_rep)

(declare-const o383 us_rep)

(declare-const o384 Int)

(declare-const o385 us_rep)

(declare-const o386 us_rep)

(declare-const o387 Int)

(declare-const o388 us_rep)

(declare-const o389 us_rep)

(declare-const o390 Bool)

(declare-const n3 Int)

(declare-const o391 Int)

(declare-const o392 Int)

(declare-const us2 Int)

(declare-const o393 Int)

(declare-const o394 Int)

(declare-const o395 Int)

(declare-const o396 Bool)

(declare-const o397 Int)

(declare-const o398 Int)

(declare-const o399 Int)

(declare-const o400 Int)

(declare-const o401 Int)

(declare-const o402 Int)

(declare-const o403 Int)

(declare-const o404 Int)

(declare-const o405 us_rep)

(declare-const o406 Int)

(declare-const o407 Int)

(declare-const o408 Int)

(declare-const o409 Int)

(declare-const o410 us_rep)

(declare-const o411 us_rep)

(declare-const o412 Int)

(declare-const o413 us_rep)

(declare-const o414 us_rep)

(declare-const o415 Int)

(declare-const o416 us_rep)

(declare-const o417 us_rep)

(declare-const o418 Bool)

(declare-const o419 us_rep)

(declare-const o420 us_rep)

(declare-const o421 Int)

(declare-const o422 Int)

(declare-const o423 Int)

(declare-const o424 Int)

(declare-const o425 us_rep)

(declare-const o426 us_rep)

(declare-const o427 Int)

(declare-const o428 Int)

(declare-const o429 Int)

(declare-const o430 Int)

(declare-const o431 us_rep)

(declare-const o432 us_rep)

(declare-const o433 us_rep)

(declare-const o434 us_rep)

(declare-const o435 us_rep)

(declare-const o436 us_rep)

(declare-const o437 us_rep)

(declare-const o438 us_rep)

(declare-const o439 us_rep)

(declare-const o440 us_rep)

(declare-const o441 us_rep)

(declare-const o442 us_rep)

(declare-const o443 Bool)

(declare-const o444 Int)

(declare-const o445 Bool)

(declare-const o446 us_rep)

(declare-const o447 us_rep)

(declare-const o448 us_rep)

(declare-const o449 us_rep)

(declare-const o450 Bool)

(declare-const o451 Int)

(declare-const o452 Int)

(declare-const o453 (_ BitVec 64))

(declare-const o454 (_ BitVec 64))

(declare-const o455 (_ BitVec 64))

(declare-const o456 Bool)

(declare-const o457 Int)

(declare-const o458 Int)

(declare-const o459 (_ BitVec 32))

(declare-const o460 (_ BitVec 32))

(declare-const o461 (_ BitVec 32))

(declare-const o462 Int)

(declare-const o463 Int)

(declare-const temp___655 Int)

(declare-const temp___670 (Array Int word32))

(declare-const temp___668 (Array Int word32))

(declare-const temp___675 Int)

(declare-const temp___666 Int)

(declare-const o464 Int)

(declare-const o465 Int)

(declare-const o466 us_rep)

(declare-const o467 us_rep)

(declare-const o468 Bool)

(declare-const o469 Int)

(declare-const o470 us_rep)

(declare-const o471 Int)

(declare-const o472 us_rep)

(declare-const o473 Int)

(declare-const o474 us_rep)

(declare-const o475 us_rep)

(declare-const o476 us_rep)

(declare-const o477 Int)

(declare-const o478 us_rep)

(declare-const o479 us_rep)

(declare-const o480 Int)

(declare-const o481 us_rep)

(declare-const o482 us_rep)

(declare-const o483 Bool)

(declare-const o484 Int)

(declare-const o485 us_rep)

(declare-const o486 Int)

(declare-const o487 us_rep)

(declare-const o488 Int)

(declare-const o489 Int)

(declare-const o490 Int)

(declare-const o491 Int)

(declare-const o492 us_rep)

(declare-const o493 us_rep)

(declare-const o494 us_rep)

(declare-const o495 us_rep)

(declare-const o496 us_rep)

(declare-const o497 us_rep)

(declare-const o498 us_rep)

(declare-const o499 us_rep)

(declare-const o500 us_rep)

(declare-const o501 us_rep)

(declare-const o502 us_rep)

(declare-const o503 us_rep)

(declare-const o504 Int)

(declare-const o505 us_rep)

(declare-const o506 us_rep)

(declare-const o507 Int)

(declare-const o508 us_rep)

(declare-const o509 us_rep)

(declare-const o510 Bool)

(declare-const n4 Int)

(declare-const o511 Int)

(declare-const o512 Int)

(declare-const us3 Int)

(declare-const o513 Int)

(declare-const o514 Int)

(declare-const o515 Int)

(declare-const o516 Bool)

(declare-const o517 Int)

(declare-const o518 Int)

(declare-const o519 Int)

(declare-const o520 Int)

(declare-const o521 Int)

(declare-const o522 Int)

(declare-const o523 Int)

(declare-const o524 Int)

(declare-const o525 us_rep)

(declare-const o526 Int)

(declare-const o527 Int)

(declare-const o528 Int)

(declare-const o529 Int)

(declare-const o530 us_rep)

(declare-const o531 us_rep)

(declare-const o532 Int)

(declare-const o533 us_rep)

(declare-const o534 us_rep)

(declare-const o535 Int)

(declare-const o536 us_rep)

(declare-const o537 us_rep)

(declare-const o538 Bool)

(declare-const o539 us_rep)

(declare-const o540 Int)

(declare-const o541 Int)

(declare-const o542 Int)

(declare-const o543 Int)

(declare-const o544 us_rep)

(declare-const o545 us_rep)

(declare-const o546 us_rep)

(declare-const o547 us_rep)

(declare-const o548 us_rep)

(declare-const o549 us_rep)

(declare-const o550 us_rep)

(declare-const o551 us_rep)

(declare-const o552 us_rep)

(declare-const o553 us_rep)

(declare-const o554 us_rep)

(declare-const o555 us_rep)

(declare-const o556 Bool)

(declare-const o557 Int)

(declare-const o558 Bool)

(declare-const o559 us_rep)

(declare-const o560 us_rep)

(declare-const o561 us_rep)

(declare-const o562 us_rep)

(declare-const o563 Bool)

(declare-const o564 Int)

(declare-const o565 Int)

(declare-const o566 (_ BitVec 64))

(declare-const o567 (_ BitVec 64))

(declare-const o568 (_ BitVec 64))

(declare-const o569 Bool)

(declare-const o570 Int)

(declare-const o571 Int)

(declare-const o572 us_rep)

(declare-const o573 us_rep)

(declare-const o574 Bool)

(declare-const o575 Int)

(declare-const o576 us_rep)

(declare-const o577 Int)

(declare-const o578 us_rep)

(declare-const o579 Int)

(declare-const o580 us_rep)

(declare-const o581 us_rep)

(declare-const o582 us_rep)

(declare-const o583 Int)

(declare-const o584 us_rep)

(declare-const o585 us_rep)

(declare-const o586 Int)

(declare-const o587 us_rep)

(declare-const o588 us_rep)

(declare-const o589 Bool)

(declare-const o590 Int)

(declare-const o591 us_rep)

(declare-const o592 Int)

(declare-const o593 us_rep)

(declare-const o594 Int)

(declare-const o595 Int)

(declare-const o596 Int)

(declare-const o597 Int)

(declare-const o598 us_rep)

(declare-const o599 us_rep)

(declare-const o600 us_rep)

(declare-const o601 us_rep)

(declare-const o602 us_rep)

(declare-const o603 us_rep)

(declare-const o604 us_rep)

(declare-const o605 us_rep)

(declare-const o606 us_rep)

(declare-const o607 us_rep)

(declare-const o608 us_rep)

(declare-const o609 us_rep)

(declare-const o610 Int)

(declare-const o611 us_rep)

(declare-const o612 us_rep)

(declare-const o613 Int)

(declare-const o614 us_rep)

(declare-const o615 us_rep)

(declare-const o616 Bool)

(declare-const n5 Int)

(declare-const o617 Int)

(declare-const o618 Int)

(declare-const us4 Int)

(declare-const o619 Int)

(declare-const o620 Int)

(declare-const o621 Int)

(declare-const o622 Bool)

(declare-const o623 Int)

(declare-const o624 Int)

(declare-const o625 Int)

(declare-const o626 Int)

(declare-const o627 Int)

(declare-const o628 Int)

(declare-const o629 Int)

(declare-const o630 Int)

(declare-const o631 us_rep)

(declare-const o632 Int)

(declare-const o633 Int)

(declare-const o634 Int)

(declare-const o635 Int)

(declare-const o636 us_rep)

(declare-const o637 us_rep)

(declare-const o638 Int)

(declare-const o639 us_rep)

(declare-const o640 us_rep)

(declare-const o641 Int)

(declare-const o642 us_rep)

(declare-const o643 us_rep)

(declare-const o644 Bool)

(declare-const o645 us_rep)

(declare-const o646 Int)

(declare-const o647 Int)

(declare-const o648 Int)

(declare-const o649 Int)

(declare-const o650 us_rep)

(declare-const o651 us_rep)

(declare-const o652 us_rep)

(declare-const o653 us_rep)

(declare-const o654 us_rep)

(declare-const o655 us_rep)

(declare-const o656 us_rep)

(declare-const o657 us_rep)

(declare-const o658 us_rep)

(declare-const o659 us_rep)

(declare-const o660 us_rep)

(declare-const o661 us_rep)

(declare-const o662 Bool)

(declare-const o663 Int)

(declare-const o664 Bool)

(declare-const o665 us_rep)

(declare-const o666 us_rep)

(declare-const o667 us_rep)

(declare-const o668 us_rep)

(declare-const o669 Bool)

(declare-const o670 Int)

(declare-const o671 Int)

(declare-const o672 (_ BitVec 64))

(declare-const o673 (_ BitVec 64))

(declare-const o674 (_ BitVec 64))

(declare-const o675 Bool)

(declare-const o676 Int)

(declare-const o677 Int)

(declare-const o678 Int)

(declare-const o679 Int)

(declare-const o680 Int)

(declare-const o681 Int)

(declare-const o682 Int)

(declare-const o683 Int)

(declare-const o684 Int)

(declare-const o685 us_rep)

(declare-const o686 us_rep)

(declare-const o687 Bool)

(declare-const o688 Int)

(declare-const o689 us_rep)

(declare-const o690 Int)

(declare-const o691 us_rep)

(declare-const o692 Int)

(declare-const o693 us_rep)

(declare-const o694 us_rep)

(declare-const o695 us_rep)

(declare-const o696 Int)

(declare-const o697 us_rep)

(declare-const o698 us_rep)

(declare-const o699 Int)

(declare-const o700 us_rep)

(declare-const o701 us_rep)

(declare-const o702 Bool)

(declare-const o703 Int)

(declare-const o704 us_rep)

(declare-const o705 Int)

(declare-const o706 us_rep)

(declare-const o707 Int)

(declare-const o708 Int)

(declare-const o709 Int)

(declare-const o710 Int)

(declare-const o711 us_rep)

(declare-const o712 us_rep)

(declare-const o713 us_rep)

(declare-const o714 us_rep)

(declare-const o715 us_rep)

(declare-const o716 us_rep)

(declare-const o717 us_rep)

(declare-const o718 us_rep)

(declare-const o719 us_rep)

(declare-const o720 us_rep)

(declare-const o721 us_rep)

(declare-const o722 Int)

(declare-const o723 us_rep)

(declare-const o724 us_rep)

(declare-const o725 Int)

(declare-const o726 us_rep)

(declare-const o727 us_rep)

(declare-const o728 Bool)

(declare-const n6 Int)

(declare-const o729 Int)

(declare-const o730 Int)

(declare-const us5 Int)

(declare-const o731 Int)

(declare-const o732 Int)

(declare-const o733 Int)

(declare-const o734 Bool)

(declare-const o735 Int)

(declare-const o736 Int)

(declare-const o737 Int)

(declare-const o738 Int)

(declare-const o739 Int)

(declare-const o740 Int)

(declare-const o741 Int)

(declare-const o742 Int)

(declare-const o743 us_rep)

(declare-const o744 Int)

(declare-const o745 Int)

(declare-const o746 Int)

(declare-const o747 Int)

(declare-const o748 us_rep)

(declare-const o749 us_rep)

(declare-const o750 Int)

(declare-const o751 us_rep)

(declare-const o752 us_rep)

(declare-const o753 Int)

(declare-const o754 us_rep)

(declare-const o755 us_rep)

(declare-const o756 Bool)

(declare-const o757 us_rep)

(declare-const o758 us_rep)

(declare-const o759 us_rep)

(declare-const o760 us_rep)

(declare-const o761 Bool)

(declare-const o762 Int)

(declare-const o763 Int)

(declare-const o764 (_ BitVec 64))

(declare-const o765 (_ BitVec 64))

(declare-const o766 (_ BitVec 64))

(declare-const o767 Bool)

(declare-const o768 Int)

(declare-const o769 Int)

(declare-const o770 Int)

(declare-const o771 Int)

(declare-const o772 Int)

(declare-const o773 Int)

(declare-const o774 Int)

(declare-const o775 Int)

(declare-const o776 us_rep)

(declare-const o777 Int)

(declare-const o778 Int)

(declare-const o779 Int)

(declare-const o780 Int)

(declare-const o781 us_rep)

(declare-const o782 us_rep)

(declare-const o783 Int)

(declare-const o784 Int)

(declare-const o785 Int)

(declare-const o786 Int)

(declare-const o787 us_rep)

(declare-const o788 us_rep)

(declare-const a1 (Array Int word32))

(declare-const result Bool)

(declare-const result1 Bool)

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 Bool)

(declare-const result9 Int)

(declare-const l1 Int)

(declare-const aux1 (Array Int word32))

(declare-const result10 (Array Int word32))

(declare-const aux11 (Array Int word32))

(declare-const aux3 (Array Int word32))

(declare-const aux4 (Array Int word32))

(declare-const aux2 (Array Int word32))

(declare-const result11 Int)

(declare-const h1 Int)

(declare-const a2 (Array Int word32))

(declare-const aux41 (Array Int word32))

(declare-const h2 Int)

(declare-const a3 (Array Int word32))

(declare-const aux42 (Array Int word32))

(declare-const result12 Int)

(declare-const h3 Int)

(declare-const a4 (Array Int word32))

(declare-const aux43 (Array Int word32))

(declare-const h4 Int)

(declare-const a5 (Array Int word32))

(declare-const aux44 (Array Int word32))

(declare-const h5 Int)

(declare-const a6 (Array Int word32))

(declare-const aux45 (Array Int word32))

(declare-const h6 int__ref)

(declare-const a7 (Array Int word32))

(declare-const aux46 (Array Int word32))

(declare-const h7 Int)

(declare-const a8 map__ref)

(declare-const aux47 map__ref)

(declare-const h8 int__ref)

(declare-const a9 (Array Int word32))

(declare-const aux48 (Array Int word32))

(declare-const h9 Int)

(declare-const result13 t__ref1)

(declare-const i1 (_ BitVec 64))

(declare-const a10 (Array Int word32))

(declare-const aux31 (Array Int word32))

(declare-const j1 Int)

(declare-const s1 Int)

(declare-const i2 (_ BitVec 64))

(declare-const w1 (_ BitVec 32))

(declare-const h10 Int)

(declare-const result14 Bool)

(declare-const result15 Bool)

(declare-const result16 t__ref)

(declare-const w2 (_ BitVec 32))

(declare-const result17 int__ref)

(declare-const s2 Int)

(declare-const result18 int__ref)

(declare-const j2 Int)

(declare-const j3 Int)

(declare-const s3 Int)

(declare-const w3 (_ BitVec 32))

(declare-const result19 Bool)

(declare-const result20 Bool)

(declare-const result21 t__ref)

(declare-const w4 (_ BitVec 32))

(declare-const result22 int__ref)

(declare-const s4 Int)

(declare-const s5 int__ref)

(declare-const w5 t__ref)

(declare-const s6 Int)

(declare-const w6 (_ BitVec 32))

(declare-const result23 int__ref)

(declare-const j4 Int)

(declare-const j5 int__ref)

(declare-const s7 int__ref)

(declare-const w7 t__ref)

(declare-const j6 Int)

(declare-const s8 Int)

(declare-const w8 (_ BitVec 32))

(declare-const j7 int__ref)

(declare-const s9 int__ref)

(declare-const w9 t__ref)

(declare-const j8 Int)

(declare-const s10 Int)

(declare-const w10 (_ BitVec 32))

(declare-const j9 int__ref)

(declare-const s11 int__ref)

(declare-const w11 t__ref)

(declare-const j10 Int)

(declare-const s12 Int)

(declare-const w12 (_ BitVec 32))

(declare-const j11 int__ref)

(declare-const s13 int__ref)

(declare-const w13 t__ref)

(declare-const j12 Int)

(declare-const s14 Int)

(declare-const w14 (_ BitVec 32))

(declare-const j13 int__ref)

(declare-const s15 int__ref)

(declare-const w15 t__ref)

(declare-const j14 Int)

(declare-const s16 Int)

(declare-const w16 (_ BitVec 32))

(declare-const result24 int__ref)

(declare-const s17 Int)

(declare-const result25 int__ref)

(declare-const h11 Int)

(declare-const a11 (Array Int word32))

(declare-const aux32 (Array Int word32))

(declare-const h12 Int)

(declare-const result26 Bool)

(declare-const a12 (Array Int word32))

(declare-const aux33 (Array Int word32))

(declare-const result27 Bool)

(declare-const result28 int__ref)

(declare-const h13 Int)

(declare-const a13 map__ref)

(declare-const aux34 map__ref)

(declare-const h14 int__ref)

(declare-const a14 (Array Int word32))

(declare-const aux35 (Array Int word32))

(declare-const h15 Int)

(declare-const a15 map__ref)

(declare-const aux36 map__ref)

(declare-const h16 int__ref)

(declare-const a16 (Array Int word32))

(declare-const aux37 (Array Int word32))

(declare-const h17 Int)

(declare-const a17 map__ref)

(declare-const aux38 map__ref)

(declare-const h18 int__ref)

(declare-const a18 (Array Int word32))

(declare-const aux39 (Array Int word32))

(declare-const h19 Int)

(declare-const a19 map__ref)

(declare-const aux310 map__ref)

(declare-const h20 int__ref)

(declare-const a20 (Array Int word32))

(declare-const aux311 (Array Int word32))

(declare-const h21 Int)

(declare-const a21 (Array Int word32))

(declare-const aux312 (Array Int word32))

(declare-const result29 int__ref)

(declare-const s18 Int)

(declare-const a22 (Array Int word32))

(declare-const aux313 (Array Int word32))

(declare-const a23 map__ref)

(declare-const aux314 map__ref)

(declare-const j15 int__ref)

(declare-const s19 int__ref)

(declare-const w17 t__ref)

(declare-const h22 int__ref)

(declare-const a24 (Array Int word32))

(declare-const aux315 (Array Int word32))

(declare-const j16 Int)

(declare-const s20 Int)

(declare-const w18 (_ BitVec 32))

(declare-const h23 Int)

(declare-const result30 Bool)

(declare-const result31 t__ref1)

(declare-const i3 (_ BitVec 64))

(declare-const i4 t__ref1)

(declare-const i5 (_ BitVec 64))

(declare-const a25 map__ref)

(declare-const aux316 map__ref)

(declare-const j17 int__ref)

(declare-const s21 int__ref)

(declare-const i6 t__ref1)

(declare-const w19 t__ref)

(declare-const h24 int__ref)

(declare-const a26 (Array Int word32))

(declare-const aux317 (Array Int word32))

(declare-const j18 Int)

(declare-const s22 Int)

(declare-const i7 (_ BitVec 64))

(declare-const w20 (_ BitVec 32))

(declare-const h25 Int)

(declare-const a27 map__ref)

(declare-const aux318 map__ref)

(declare-const j19 int__ref)

(declare-const s23 int__ref)

(declare-const i8 t__ref1)

(declare-const w21 t__ref)

(declare-const h26 int__ref)

(declare-const a28 (Array Int word32))

(declare-const aux319 (Array Int word32))

(declare-const j20 Int)

(declare-const s24 Int)

(declare-const i9 (_ BitVec 64))

(declare-const w22 (_ BitVec 32))

(declare-const h27 Int)

(declare-const a29 map__ref)

(declare-const aux320 map__ref)

(declare-const j21 int__ref)

(declare-const s25 int__ref)

(declare-const i10 t__ref1)

(declare-const w23 t__ref)

(declare-const h28 int__ref)

(declare-const a30 (Array Int word32))

(declare-const aux321 (Array Int word32))

(declare-const j22 Int)

(declare-const s26 Int)

(declare-const i11 (_ BitVec 64))

(declare-const w24 (_ BitVec 32))

(declare-const h29 Int)

(declare-const a31 map__ref)

(declare-const aux322 map__ref)

(declare-const j23 int__ref)

(declare-const s27 int__ref)

(declare-const i12 t__ref1)

(declare-const w25 t__ref)

(declare-const h30 int__ref)

(declare-const a32 (Array Int word32))

(declare-const aux323 (Array Int word32))

(declare-const j24 Int)

(declare-const s28 Int)

(declare-const i13 (_ BitVec 64))

(declare-const w26 (_ BitVec 32))

(declare-const h31 Int)

(declare-const a33 (Array Int word32))

(declare-const a34 map__ref)

(declare-const aux12 map__ref)

(declare-const aux21 map__ref)

(declare-const aux324 map__ref)

(declare-const aux49 map__ref)

(declare-const j25 int__ref)

(declare-const l2 int__ref)

(declare-const s29 int__ref)

(declare-const i14 t__ref1)

(declare-const w27 t__ref)

(declare-const h32 int__ref)

(declare-const h33 int__ref)

(declare-const a35 (Array Int word32))

(declare-const aux13 (Array Int word32))

(declare-const aux22 (Array Int word32))

(declare-const aux325 (Array Int word32))

(declare-const aux410 (Array Int word32))

(declare-const j26 Int)

(declare-const l3 Int)

(declare-const s30 Int)

(declare-const i15 (_ BitVec 64))

(declare-const w28 (_ BitVec 32))

(declare-const h34 Int)

(declare-const h35 Int)

(define-fun aux411 () map__ref (mk_map__ref aux45))

(define-fun a36 () map__ref (mk_map__ref a6))

(define-fun h36 () int__ref (mk_int__ref h4))

(define-fun aux412 () map__ref (mk_map__ref aux43))

(define-fun a37 () map__ref (mk_map__ref a4))

(define-fun result32 () int__ref (mk_int__ref result11))

(define-fun result33 () int__ref (mk_int__ref result9))

(define-fun h37 () int__ref (mk_int__ref h))

(define-fun i16 () t__ref1 (mk_t__ref1 i))

(define-fun l4 () int__ref (mk_int__ref l))

(define-fun a38 () map__ref (mk_map__ref a))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_invariant4 x true false true))

;; H
  (assert (in_range2 x_first))

;; H
  (assert (dynamic_invariant4 e true false true))

;; H
  (assert (in_range2 e_first))

;; H
  (assert (in_range2 e_last))

;; H
  (assert (dynamic_invariant4 m true false true))

;; H
  (assert (in_range2 m_first))

;; H
  (assert (in_range2 k))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux1__first)
  (to_rep aux1__last)))

;; H
  (assert (in_range2 aux1_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux2__first)
  (to_rep aux2__last)))

;; H
  (assert (in_range2 aux2_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux3__first)
  (to_rep aux3__last)))

;; H
  (assert (in_range2 aux3_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux4__first)
  (to_rep aux4__last)))

;; H
  (assert (in_range2 aux4_first))

;; H
  (assert (dynamic_invariant4 r true false true))

;; H
  (assert (in_range2 r_first))

;; H
  (assert true)

;; H
  (assert
  (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last)))
  (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last)))
  (and (< a_first a_last)
  (and
  (and (<= (to_rep (first (rt x))) x_first)
  (<= x_first (to_rep (last (rt x)))))
  (and
  (and (<= (to_rep (first (rt x))) (+ x_first (- a_last a_first)))
  (<= (+ x_first (- a_last a_first)) (to_rep (last (rt x)))))
  (and
  (and (<= (to_rep (first (rt e))) e_first)
  (<= e_first (to_rep (last (rt e)))))
  (and
  (and (<= (to_rep (first (rt e))) e_last)
  (<= e_last (to_rep (last (rt e)))))
  (and (<= e_first e_last)
  (and
  (and (<= (to_rep (first (rt m))) m_first)
  (<= m_first (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first)))
  (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep aux1__first) aux1_first)
  (<= aux1_first (to_rep aux1__last)))
  (and
  (and (<= (to_rep aux1__first) (+ aux1_first (- a_last a_first)))
  (<= (+ aux1_first (- a_last a_first)) (to_rep aux1__last)))
  (and
  (and (<= (to_rep aux2__first) aux2_first)
  (<= aux2_first (to_rep aux2__last)))
  (and
  (and (<= (to_rep aux2__first) (+ aux2_first (- a_last a_first)))
  (<= (+ aux2_first (- a_last a_first)) (to_rep aux2__last)))
  (and
  (and (<= (to_rep aux3__first) aux3_first)
  (<= aux3_first (to_rep aux3__last)))
  (and
  (and (<= (to_rep aux3__first) (+ aux3_first (- a_last a_first)))
  (<= (+ aux3_first (- a_last a_first)) (to_rep aux3__last)))
  (and
  (and (<= (to_rep aux4__first) aux4_first)
  (<= aux4_first (to_rep aux4__last)))
  (and
  (and
  (<= (to_rep aux4__first) (+ aux4_first (- (* (power 2 k) (+ (- a_last
  a_first) 1)) 1)))
  (<= (+ aux4_first (- (* (power 2 k) (+ (- a_last a_first) 1)) 1)) (to_rep
                                                                    aux4__last)))
  (and (<= k 30)
  (and
  (and (<= (to_rep (first (rt r))) r_first)
  (<= r_first (to_rep (last (rt r)))))
  (and
  (and (<= (to_rep (first (rt r))) (+ r_first (- a_last a_first)))
  (<= (+ r_first (- a_last a_first)) (to_rep (last (rt r)))))
  (and
  (= (oeq (num_of_big_int r r_first (+ (- a_last a_first) 1))
     (omod
     (oexpon__2 (base Tuple0)
     (omultiply (from_integer 2) (from_integer (+ (- a_last a_first) 1))))
     (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true)
  (and
  (= (olt (from_word32 ((_ int2bv 32) 1))
     (num_of_big_int m m_first (+ (- a_last a_first) 1))) true)
  (= (bvadd ((_ int2bv 32) 1) (bvmul m_inv (to_rep1
                                           (select (elts m) m_first)))) ((_ int2bv 32) 0))))))))))))))))))))))))))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 j)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 l)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 s)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux4 (mk (to_rep aux4__first) (to_rep aux4__last))) aux4_first
     (+ l1 1))
     (omod
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 l1)))

;; H
  (assert (and (= o147 (power 2 k)) (in_range1 (power 2 k))))

;; H
  (assert (= o148 (- o147 1)))

;; H
  (assert (and (= temp___638 o148) (in_range1 o148)))

;; H
  (assert (= result32 h37))

;; H
  (assert (= h1 1))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (and
  (and (= temp___636 h1)
  (and (= temp___633 a)
  (and (= temp___631 aux4)
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- h2 1)))
  (= (oeq
     (num_of_big_int
     (mk___t aux41 (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (and
  (and
  (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))
  (and (<= 1 h2) (<= h2 (- (power 2 k) 1))))
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 h2))
  (= (oeq
     (num_of_big_int
     (mk___t aux42 (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (and (=> (<= 0 2147483647) (in_range2 l1))
  (and
  (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))
  (= h2 temp___638)))))))))
  (and (and (= h6 (mk_int__ref h2)) (and (= aux42 aux45) (= a3 a6)))
  (and (= h7 h2) (and (= aux46 aux42) (= a7 a3)))))))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h8 h6)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux47 aux411)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a8 a36)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h9 h7)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux48 aux46)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a9 a7)))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= h8 (mk_int__ref h1))))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= aux47 (mk_map__ref aux4))))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= a8 a38)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= h9 h1)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= aux48 aux4)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= a9 a1)))

;; H
  (assert (and (= o263 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (and (= o264 o263) (uint_in_range1 o263)))

;; H
  (assert (= o265 ((_ int2bv 64) o264)))

;; H
  (assert (= o266 (bvadd o265 ((_ int2bv 64) 1))))

;; H
  (assert (= o267 (bvmul o266 ((_ int2bv 64) 32))))

;; H
  (assert (= o268 (bvsub o267 ((_ int2bv 64) 1))))

;; H
  (assert (= result13 i16))

;; H
  (assert (= i1 o268))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux31 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod
     (omultiply
     (oexpon__2 (num_of_big_int x x_first (+ l1 1))
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux47)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) ((_ int2bv 64) 1)) ((_ int2bv 64) 32)))))

;; H
  (assert
  (and (=> (<= 0 2147483647) (in_range2 j1))
  (=> (<= 0 2147483647) (in_range2 s1))))

;; H
  (assert (and (= o341 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (and (= o342 o341) (uint_in_range1 o341)))

;; H
  (assert (= o343 ((_ int2bv 64) o342)))

;; H
  (assert (= o344 (bvadd o343 ((_ int2bv 64) 1))))

;; H
  (assert (= o345 (bvmul o344 ((_ int2bv 64) 32))))

;; H
  (assert (= o346 (ite (bvult i2 o345) true false)))

;; H
  (assert (and (= o315 (power 2 k)) (in_range1 (power 2 k))))

;; H
  (assert (= o316 (- o315 1)))

;; H
  (assert (and (= o317 o316) (in_range1 o316)))

;; H
  (assert (= o318 (ite (<= n2 o317) true false)))

;; H
  (assert (= result14 (ite (<= 0 n2) o318 false)))

;; H
  (assert (= result14 true))

;; H
  (assert (and (= o337 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o338 (num_of_big_int m m_first o337)))

;; H
  (assert (and (= o334 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (and (= o333 (base Tuple0))
  (= o333 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o335 (oexpon o333 o334)))

;; H
  (assert (and (= o328 (* 2 n2)) (in_range1 (* 2 n2))))

;; H
  (assert (= o329 (+ o328 1)))

;; H
  (assert (and (= o330 o329) (in_range1 o329)))

;; H
  (assert (and (= o331 o330) (in_range2 o330)))

;; H
  (assert (and (= o326 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o327 (num_of_big_int x x_first o326)))

;; H
  (assert (= o332 (oexpon o327 o331)))

;; H
  (assert (= o336 (omultiply o332 o335)))

;; H
  (assert (= o339 (omod o336 o338)))

;; H
  (assert (and (= o325 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (and (= o319 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o320 (* n2 o319)))

;; H
  (assert (and (= o321 o320) (in_range1 o320)))

;; H
  (assert (= o322 (+ aux4_first o321)))

;; H
  (assert (and (= o323 o322) (in_range1 o322)))

(assert
;; WP_parameter_def
 ;; File "lsc-bignum.ads", line 141, characters 0-0
  (not (in_range2 o323)))
(check-sat)
(exit)
