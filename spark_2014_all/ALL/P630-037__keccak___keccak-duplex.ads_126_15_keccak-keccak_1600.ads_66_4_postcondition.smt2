;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (byte byte) Bool)

(declare-const dummy2 byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-sort index_number 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (index_number index_number) Bool)

(declare-const dummy3 index_number)

(declare-datatypes ()
((index_number__ref
 (mk_index_number__ref (index_number__content index_number)))))
(define-fun index_number__ref___projection ((a index_number__ref)) index_number
  (index_number__content a))

(declare-fun to_rep1 (byte) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int2 ((x byte)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))

;; slide_eq
  (assert
  (forall ((a (Array Int byte)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int byte)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int byte) Int Int (Array Int byte) Int
  Int) (Array Int byte))

;; concat_def
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte Int) (Array Int byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int)
  (b (Array Int byte)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int byte) Int Int (Array Int byte) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))

(define-fun of_array ((a (Array Int byte)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int byte)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int byte)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_261 us_t)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (not (= temp___skip_constant_259 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_261)
                                      (last1 temp___expr_261))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int3 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort lane_type 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq5 (lane_type lane_type) Bool)

(declare-const dummy5 lane_type)

(declare-datatypes ()
((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type
  (lane_type__content a))

(declare-fun to_rep2 (lane_type) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) lane_type)

;; inversion_axiom
  (assert
  (forall ((x lane_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int4 ((x lane_type)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x lane_type)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)

(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (forall ((a lane_type))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8)))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((a lane_type))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8)))
  (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j)
  (get a (bvsub i (bvsub new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide1 a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1)
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8))
  (b__last_2 (_ BitVec 8))) Bool (ite (and
                                      (and
                                      (ite (bvule a__first a__last)
                                      (and (bvule b__first b__last)
                                      (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                      (bvugt b__first b__last))
                                      (ite (bvule a__first_2 a__last_2)
                                      (and (bvule b__first_2 b__last_2)
                                      (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                      (bvugt b__first_2 b__last_2)))
                                      (forall ((temp___idx_133 (_ BitVec 8))
                                      (temp___idx_134 (_ BitVec 8)))
                                      (=>
                                      (and
                                      (and (bvule a__first temp___idx_133)
                                      (bvule temp___idx_133 a__last))
                                      (and (bvule a__first_2 temp___idx_134)
                                      (bvule temp___idx_134 a__last_2)))
                                      (= (to_rep2
                                         (get a temp___idx_133
                                         temp___idx_134)) (to_rep2
                                                          (get b
                                                          (bvadd (bvsub b__first a__first) temp___idx_133)
                                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))
                                 true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_133 (_ BitVec 8)) (temp___idx_134 (_ BitVec 8)))
  (=>
  (and (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (and (bvule a__first_2 temp___idx_134) (bvule temp___idx_134 a__last_2)))
  (= (to_rep2 (get a temp___idx_133 temp___idx_134)) (to_rep2
                                                     (get b
                                                     (bvadd (bvsub b__first a__first) temp___idx_133)
                                                     (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-sort rate_number 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 3 x) (<= x 1599)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (rate_number rate_number) Bool)

(declare-const dummy6 rate_number)

(declare-datatypes ()
((rate_number__ref (mk_rate_number__ref (rate_number__content rate_number)))))
(define-fun rate_number__ref___2__projection ((a rate_number__ref)) rate_number
  (rate_number__content a))

(declare-fun to_rep3 (rate_number) Int)

(declare-fun of_rep3 (Int) rate_number)

;; inversion_axiom
  (assert
  (forall ((x rate_number))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x rate_number)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy7 map1)

(declare-const value__size1 Int)

(declare-fun object__size1 (map1) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 (map1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 (map1 map1) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__keccak__keccak_1600__duplex__context__state map1)(rec__keccak__keccak_1600__duplex__context__rate rate_number)))))
(define-fun us_split_fields_State__2__projection ((a us_split_fields)) map1
  (rec__keccak__keccak_1600__duplex__context__state a))

(define-fun us_split_fields_Rate__2__projection ((a us_split_fields)) rate_number
  (rec__keccak__keccak_1600__duplex__context__rate a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq2
                           (rec__keccak__keccak_1600__duplex__context__state
                           (us_split_fields1 a)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0) ((_ int2bv 8) 4)
                           (rec__keccak__keccak_1600__duplex__context__state
                           (us_split_fields1 b)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4)) true)
                        (= (to_rep3
                           (rec__keccak__keccak_1600__duplex__context__rate
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__keccak__keccak_1600__duplex__context__rate
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const keccak__keccak_1600__duplex__context__state__first__bit Int)

(declare-const keccak__keccak_1600__duplex__context__state__last__bit Int)

(declare-const keccak__keccak_1600__duplex__context__state__position Int)

;; keccak__keccak_1600__duplex__context__state__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__state__first__bit))

;; keccak__keccak_1600__duplex__context__state__last__bit_axiom
  (assert
  (< keccak__keccak_1600__duplex__context__state__first__bit keccak__keccak_1600__duplex__context__state__last__bit))

;; keccak__keccak_1600__duplex__context__state__position_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__state__position))

(declare-const keccak__keccak_1600__duplex__context__rate__first__bit Int)

(declare-const keccak__keccak_1600__duplex__context__rate__last__bit Int)

(declare-const keccak__keccak_1600__duplex__context__rate__position Int)

;; keccak__keccak_1600__duplex__context__rate__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__rate__first__bit))

;; keccak__keccak_1600__duplex__context__rate__last__bit_axiom
  (assert
  (< keccak__keccak_1600__duplex__context__rate__first__bit keccak__keccak_1600__duplex__context__rate__last__bit))

;; keccak__keccak_1600__duplex__context__rate__position_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__rate__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
((context__ref (mk_context__ref (context__content us_rep)))))
(define-fun context__ref___2__projection ((a context__ref)) us_rep (context__content
                                                                   a))

(declare-fun rate_of (us_rep) Int)

(declare-fun rate_of__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant3 ((temp___expr_511 Int)
  (temp___is_init_508 Bool) (temp___skip_constant_509 Bool)
  (temp___do_toplevel_510 Bool)) Bool (=>
                                      (or (= temp___is_init_508 true)
                                      (<= 3 1599)) (in_range3
                                      temp___expr_511)))

;; rate_of__post_axiom
  (assert
  (forall ((ctx us_rep)) (! (dynamic_invariant3 (rate_of ctx) true false
  true) :pattern ((rate_of ctx)) )))

;; rate_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (rate_of ctx) (to_rep3
                      (rec__keccak__keccak_1600__duplex__context__rate
                      (us_split_fields1 ctx)))) :pattern ((rate_of ctx)) )))

(declare-fun max_input_length (us_rep) Int)

(declare-fun max_input_length__function_guard (Int us_rep) Bool)

(declare-sort positive 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (positive positive) Bool)

(declare-const dummy9 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range4
                                     temp___expr_39)))

;; max_input_length__post_axiom
  (assert
  (forall ((ctx us_rep)) (! (dynamic_invariant4 (max_input_length ctx) true
  false true) :pattern ((max_input_length ctx)) )))

;; max_input_length__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (max_input_length ctx) (- (rate_of ctx) 2)) :pattern ((max_input_length
                                                              ctx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const in_data us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const in_data_bit_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const out_data__first integer)

(declare-const out_data__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const out_data_bit_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort tTblockSP1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (tTblockSP1 tTblockSP1) Bool)

(declare-const dummy10 tTblockSP1)

(declare-datatypes ()
((tTblockSP1__ref (mk_tTblockSP1__ref (tTblockSP1__content tTblockSP1)))))
(define-fun tTblockSP1__ref___projection ((a tTblockSP1__ref)) tTblockSP1
  (tTblockSP1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const num_bytes Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (integer integer) Bool)

(declare-const dummy11 integer)

(declare-datatypes ()
((t172s__ref (mk_t172s__ref (t172s__content integer)))))
(define-fun t172s__ref___projection ((a t172s__ref)) integer (t172s__content
                                                             a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int byte))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int byte) (elts1 a))

(define-fun of_array1 ((a (Array Int byte)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int byte)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int byte)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq12 (us_t1 us_t1) Bool)

(declare-const dummy12 us_t1)

(declare-datatypes () ((t173s__ref (mk_t173s__ref (t173s__content us_t1)))))
(define-fun t173s__ref___projection ((a t173s__ref)) us_t1 (t173s__content a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (integer integer) Bool)

(declare-const dummy13 integer)

(declare-datatypes ()
((t174s__ref (mk_t174s__ref (t174s__content integer)))))
(define-fun t174s__ref___projection ((a t174s__ref)) integer (t174s__content
                                                             a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int byte))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int byte) (elts2 a))

(define-fun of_array2 ((a (Array Int byte)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int byte)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int byte)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq14 (us_t2 us_t2) Bool)

(declare-const dummy14 us_t2)

(declare-datatypes () ((t175s__ref (mk_t175s__ref (t175s__content us_t2)))))
(define-fun t175s__ref___projection ((a t175s__ref)) us_t2 (t175s__content a))

(declare-const r176s Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq15 (integer integer) Bool)

(declare-const dummy15 integer)

(declare-datatypes ()
((t177s__ref (mk_t177s__ref (t177s__content integer)))))
(define-fun t177s__ref___projection ((a t177s__ref)) integer (t177s__content
                                                             a))

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last6 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last6 (mk3 f l))) l)))) :pattern (
  (mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array Int byte))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int byte) (elts3 a))

(define-fun of_array3 ((a (Array Int byte)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int byte)) Int)

(declare-const value__component__size4 Int)

(declare-fun object__component__size4 ((Array Int byte)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq6 ((x us_t3)
  (y us_t3)) Bool (bool_eq (elts3 x) (to_rep (first6 (rt3 x)))
                  (to_rep (last6 (rt3 x))) (elts3 y)
                  (to_rep (first6 (rt3 y))) (to_rep (last6 (rt3 y)))))

(declare-fun user_eq16 (us_t3 us_t3) Bool)

(declare-const dummy16 us_t3)

(declare-datatypes () ((t178s__ref (mk_t178s__ref (t178s__content us_t3)))))
(define-fun t178s__ref___projection ((a t178s__ref)) us_t3 (t178s__content a))

(declare-const r179s Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun dynamic_property7 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq17 (integer integer) Bool)

(declare-const dummy17 integer)

(declare-datatypes ()
((t180s__ref (mk_t180s__ref (t180s__content integer)))))
(define-fun t180s__ref___projection ((a t180s__ref)) integer (t180s__content
                                                             a))

(declare-sort t4 0)

(declare-fun first8 (t4) integer)

(declare-fun last8 (t4) integer)

(declare-fun mk4 (Int Int) t4)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first8 (mk4 f l))) f) (= (to_rep (last8 (mk4 f l))) l)))) :pattern (
  (mk4 f l)) )))

(define-fun dynamic_property8 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property7 range_first range_last low)
                   (dynamic_property7 range_first range_last high))))))

(declare-datatypes () ((us_t4 (mk___t4 (elts4 (Array Int byte))(rt4 t4)))))
(define-fun to_array4 ((a us_t4)) (Array Int byte) (elts4 a))

(define-fun of_array4 ((a (Array Int byte)) (f Int)
  (l Int)) us_t4 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t4)) Int (to_rep (first8 (rt4 a))))

(define-fun last9 ((a us_t4)) Int (to_rep (last8 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (<= (first9 a) (last9 a))
                                    (+ (- (last9 a) (first9 a)) 1) 0))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array Int byte)) Int)

(declare-const value__component__size5 Int)

(declare-fun object__component__size5 ((Array Int byte)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size5))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq7 ((x us_t4)
  (y us_t4)) Bool (bool_eq (elts4 x) (to_rep (first8 (rt4 x)))
                  (to_rep (last8 (rt4 x))) (elts4 y)
                  (to_rep (first8 (rt4 y))) (to_rep (last8 (rt4 y)))))

(declare-fun user_eq18 (us_t4 us_t4) Bool)

(declare-const dummy18 us_t4)

(declare-datatypes () ((t181s__ref (mk_t181s__ref (t181s__content us_t4)))))
(define-fun t181s__ref___projection ((a t181s__ref)) us_t4 (t181s__content a))

(declare-fun keccak__keccak_1600__duplex__duplex__block__aggregate_def ((_ BitVec 8)) (Array Int byte))

;; def_axiom
  (assert
  (forall ((temp___1051 (_ BitVec 8)))
  (forall ((temp___1052 Int))
  (= (select (keccak__keccak_1600__duplex__duplex__block__aggregate_def
             temp___1051) temp___1052) (of_rep1 temp___1051)))))

(define-fun dynamic_invariant5 ((temp___expr_249 (_ BitVec 8))
  (temp___is_init_246 Bool) (temp___skip_constant_247 Bool)
  (temp___do_toplevel_248 Bool)) Bool true)

(define-fun dynamic_invariant6 ((temp___expr_255 Int)
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool)) Bool (=>
                                      (or (= temp___is_init_252 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_255)))

;; num_bytes__def_axiom
  (assert (= num_bytes (div1 (+ in_data_bit_length 7) 8)))

(declare-const ctx__split_fields map1)

(declare-const ctx__split_fields1 rate_number)

(declare-const block (Array Int byte))

(declare-const o Int)

(declare-const o1 Int)

(declare-const keccak__keccak_1600__duplex__duplex__num_bytes__assume Int)

(declare-const temp___1054 Int)

(declare-const o2 (Array Int byte))

(declare-const temp___1055 (Array Int byte))

(declare-const temp___10551 t2)

(declare-const temp___1056 (Array Int byte))

(declare-const temp___10561 t1)

(declare-const o3 (Array Int byte))

(declare-const temp___1059 (Array Int byte))

(declare-const temp___10591 t1)

(declare-const temp___1060 (Array Int byte))

(declare-const temp___10601 t1)

(declare-const o4 (Array Int byte))

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const keccak__keccak_1600__duplex__duplex__R176s__assume Int)

(declare-const o8 (Array Int byte))

(declare-const keccak__padding__pad101_single_block__block__compl (Array Int byte))

(declare-const keccak__padding__pad101_single_block__block__compl1 t3)

(declare-const o9 integer)

(declare-const o10 integer)

(declare-const o11 Int)

(declare-const o12 (Array Int byte))

(declare-const o13 (Array Int byte))

(declare-const temp___1067 (Array Int byte))

(declare-const temp___10671 t4)

(declare-const o14 (Array Int byte))

(declare-const o15 t)

(declare-const o16 Int)

(declare-const result (Array Int byte))

(declare-const block1 (Array Int byte))

(declare-const result1 (Array Int byte))

(declare-const block2 (Array Int byte))

(declare-const keccak__padding__pad101_single_block__block (Array Int byte))

(declare-const result2 (Array Int byte))

(declare-const block3 (Array Int byte))

(declare-const keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a map1)

(declare-const result3 map1)

(declare-const result4 rate_number)

(declare-const ctx__split_fields2 map1)

(declare-const ctx__split_fields3 rate_number)

(declare-const keccak__keccak_1600__keccakf_1600_permutation__permute__a map1)

(declare-const result5 map1)

(declare-const result6 rate_number)

(declare-const ctx__split_fields4 map1)

(declare-const ctx__split_fields5 rate_number)

(declare-const out_data (Array Int byte))

(declare-const ctx__split_fields6 map1)

(declare-const ctx__split_fields7 rate_number)

(declare-const out_data1 map__ref)

(declare-const block4 map__ref)

(declare-const ctx__split_fields8 us_split_fields)

(declare-const out_data2 (Array Int byte))

(declare-const block5 (Array Int byte))

;; H
  (assert (dynamic_invariant2 in_data true false true))

;; H
  (assert (in_range1 in_data_bit_length))

;; H
  (assert (dynamic_property 0 2147483647 (to_rep out_data__first)
  (to_rep out_data__last)))

;; H
  (assert (in_range1 out_data_bit_length))

;; H
  (assert
  (and
  (<= in_data_bit_length (max_input_length
                         (mk___rep
                         (mk___split_fields ctx__split_fields
                         ctx__split_fields1))))
  (and (<= (div1 (+ in_data_bit_length 7) 8) (length in_data))
  (and
  (<= out_data_bit_length (rate_of
                          (mk___rep
                          (mk___split_fields ctx__split_fields
                          ctx__split_fields1))))
  (= (ite (<= (to_rep out_data__first) (to_rep out_data__last))
     (+ (- (to_rep out_data__last) (to_rep out_data__first)) 1) 0) (div1
                                                                   (+
                                                                   out_data_bit_length 7)
                                                                   8))))))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref block)))

;; H
  (assert
  (= block1 (keccak__keccak_1600__duplex__duplex__block__aggregate_def
            ((_ int2bv 8) 0))))

;; H
  (assert
  (and (= o (+ in_data_bit_length 7)) (in_range (+ in_data_bit_length 7))))

;; H
  (assert (= o1 (div1 o 8)))

;; H
  (assert
  (and (= keccak__keccak_1600__duplex__duplex__num_bytes__assume o1)
  (in_range1 o1)))

;; H
  (assert
  (= keccak__keccak_1600__duplex__duplex__num_bytes__assume num_bytes))

;; H
  (assert (in_range1 num_bytes))

;; H
  (assert
  (=> (< 0 num_bytes)
  (and (= temp___1054 (+ (to_rep (first (rt in_data))) (- num_bytes 1)))
  (in_range (+ (to_rep (first (rt in_data))) (- num_bytes 1))))))

;; H
  (assert
  (=> (< 0 num_bytes)
  (=> (<= (to_rep (first (rt in_data))) temp___1054)
  (and
  (and (<= (to_rep (first (rt in_data))) (to_rep (first (rt in_data))))
  (<= (to_rep (first (rt in_data))) (to_rep (last (rt in_data)))))
  (and (<= (to_rep (first (rt in_data))) temp___1054)
  (<= temp___1054 (to_rep (last (rt in_data)))))))))

;; H
  (assert (=> (< 0 num_bytes) (= o2 (elts in_data))))

;; H
  (assert (=> (< 0 num_bytes) (= o2 temp___1055)))

;; H
  (assert
  (=> (< 0 num_bytes)
  (= (mk2 (to_rep (first (rt in_data))) temp___1054) temp___10551)))

;; H
  (assert
  (=> (< 0 num_bytes)
  (= (ite (<= (to_rep (first4 temp___10551)) (to_rep (last4 temp___10551)))
     (+ (- (to_rep (last4 temp___10551)) (to_rep (first4 temp___10551))) 1)
     0) (ite (<= 0 (- num_bytes 1)) (+ (- (- num_bytes 1) 0) 1) 0))))

;; H
  (assert
  (=> (< 0 num_bytes)
  (= (slide temp___1055 (to_rep (first4 temp___10551)) 0) temp___1056)))

;; H
  (assert (=> (< 0 num_bytes) (= (mk1 0 (- num_bytes 1)) temp___10561)))

;; H
  (assert
  (=> (< 0 num_bytes)
  (=> (<= 0 (- num_bytes 1))
  (and (and (<= 0 0) (<= 0 199))
  (and (<= 0 (- num_bytes 1)) (<= (- num_bytes 1) 199))))))

;; H
  (assert (=> (< 0 num_bytes) (= o3 block1)))

;; H
  (assert (=> (< 0 num_bytes) (= o3 temp___1059)))

;; H
  (assert (=> (< 0 num_bytes) (= (mk1 0 (- num_bytes 1)) temp___10591)))

;; H
  (assert
  (=> (< 0 num_bytes)
  (= (ite (<= (to_rep (first2 temp___10561)) (to_rep (last2 temp___10561)))
     (+ (- (to_rep (last2 temp___10561)) (to_rep (first2 temp___10561))) 1)
     0) (ite (<= (to_rep (first2 temp___10591)) (to_rep (last2 temp___10591)))
        (+ (- (to_rep (last2 temp___10591)) (to_rep (first2 temp___10591))) 1)
        0))))

;; H
  (assert
  (=> (< 0 num_bytes)
  (= (mk___t1 temp___1060 temp___10601) (mk___t1 temp___1056 temp___10561))))

;; H
  (assert
  (=> (< 0 num_bytes)
  (forall ((temp___1061 Int))
  (ite (and (<= 0 temp___1061) (<= temp___1061 (- num_bytes 1)))
  (= (select o4 temp___1061) (select temp___1060 temp___1061))
  (= (select o4 temp___1061) (select block1 temp___1061))))))

;; H
  (assert (=> (< 0 num_bytes) (= block1 result1)))

;; H
  (assert (=> (< 0 num_bytes) (= block2 o4)))

;; H
  (assert (=> (not (< 0 num_bytes)) (= block2 block1)))

;; H
  (assert
  (and
  (= o5 (rate_of
        (mk___rep (mk___split_fields ctx__split_fields ctx__split_fields1))))
  (and (in_range3 o5) (= o5 (to_rep3 ctx__split_fields1)))))

;; H
  (assert (= o6 (+ o5 7)))

;; H
  (assert (= o7 (div1 o6 8)))

;; H
  (assert (= keccak__keccak_1600__duplex__duplex__R176s__assume (- o7 1)))

;; H
  (assert (= keccak__keccak_1600__duplex__duplex__R176s__assume r176s))

;; H
  (assert (in_range r176s))

;; H
  (assert
  (=> (<= 0 r176s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r176s) (<= r176s 199)))))

;; H
  (assert (= o8 block2))

;; H
  (assert (= o8 keccak__padding__pad101_single_block__block__compl))

;; H
  (assert
  (= (mk3 0 r176s) keccak__padding__pad101_single_block__block__compl1))

;; H
  (assert
  (and
  (= o11 (rate_of
         (mk___rep (mk___split_fields ctx__split_fields ctx__split_fields1))))
  (and (in_range3 o11) (= o11 (to_rep3 ctx__split_fields1)))))

;; H
  (assert
  (= (to_rep o10) (to_rep
                  (last6 keccak__padding__pad101_single_block__block__compl1))))

;; H
  (assert
  (= (to_rep o9) (to_rep
                 (first6 keccak__padding__pad101_single_block__block__compl1))))

;; H
  (assert
  (forall ((temp___1065 Int))
  (ite (and (<= 0 temp___1065) (<= temp___1065 r176s))
  (= (select o12 temp___1065) (select (slide
                                      keccak__padding__pad101_single_block__block
                                      (to_rep
                                      (first
                                      (mk
                                      (to_rep
                                      (first6
                                      keccak__padding__pad101_single_block__block__compl1))
                                      (to_rep
                                      (last6
                                      keccak__padding__pad101_single_block__block__compl1)))))
                                      0) temp___1065))
  (= (select o12 temp___1065) (select block2 temp___1065)))))

;; H
  (assert (= block2 result2))

;; H
  (assert (= block3 o12))

;; H
  (assert (= (- (div1 (+ (to_rep3 ctx__split_fields1) 7) 8) 1) r179s))

;; H
  (assert (in_range r179s))

;; H
  (assert
  (and
  (= o16 (rate_of
         (mk___rep (mk___split_fields ctx__split_fields ctx__split_fields1))))
  (and (in_range3 o16) (= o16 (to_rep3 ctx__split_fields1)))))

;; H
  (assert
  (=> (<= 0 r179s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r179s) (<= r179s 199)))))

;; H
  (assert (= o13 block3))

;; H
  (assert (= o13 temp___1067))

;; H
  (assert (= (mk4 0 r179s) temp___10671))

;; H
  (assert (= temp___1067 o14))

;; H
  (assert
  (= (mk (to_rep (first8 temp___10671)) (to_rep (last8 temp___10671)))
  o15))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result3 result4)) (mk___split_fields__ref
                                                                  (mk___split_fields
                                                                  ctx__split_fields
                                                                  ctx__split_fields1))))

;; H
  (assert
  (= keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a
  ctx__split_fields2))

;; H
  (assert (= ctx__split_fields1 ctx__split_fields3))

;; H
  (assert (= result5 ctx__split_fields2))

;; H
  (assert (= result6 ctx__split_fields3))

;; H
  (assert
  (= keccak__keccak_1600__keccakf_1600_permutation__permute__a ctx__split_fields4))

;; H
  (assert (= ctx__split_fields3 ctx__split_fields5))

;; H
  (assert (= block4 (mk_map__ref block3)))

;; H
  (assert (= out_data1 (mk_map__ref out_data)))

;; H
  (assert (= ctx__split_fields6 ctx__split_fields4))

;; H
  (assert (= ctx__split_fields7 ctx__split_fields5))

;; H
  (assert (= block5 block3))

;; H
  (assert (= out_data2 out_data))

;; H
  (assert
  (= ctx__split_fields8 (mk___split_fields ctx__split_fields4
                        ctx__split_fields5)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (= (rate_of
     (mk___rep (mk___split_fields ctx__split_fields6 ctx__split_fields7)))
  (rate_of
  (mk___rep (mk___split_fields ctx__split_fields ctx__split_fields1))))))
(check-sat)
(exit)
