;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ((array_type__ref 0))
(((mk_array_type__ref (array_type__content us_t)))))
(define-fun array_type__ref___projection ((a array_type__ref)) us_t (array_type__content
                                                                    a))

(declare-fun perm (us_t us_t) Bool)

(declare-fun perm__function_guard (Bool us_t us_t) Bool)

(define-fun dynamic_invariant1 ((temp___expr_136 us_t)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (not (= temp___skip_constant_134 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_136)
                                      (last1 temp___expr_136))))

;; perm__post_axiom
  (assert true)

(declare-const values__first integer)

(declare-const values__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun perm_transitive (us_t us_t us_t) Bool)

(declare-fun perm_transitive__function_guard (Bool us_t us_t us_t) Bool)

;; perm_transitive__post_axiom
  (assert
  (forall ((a us_t) (b us_t) (c us_t))
  (! (=>
     (and
     (and (dynamic_invariant1 a true true true) (dynamic_invariant1 b true
     true true)) (dynamic_invariant1 c true true true))
     (=>
     (and (and (= (perm_transitive a b c) true) (= (perm a b) true))
     (= (perm b c) true)) (= (perm a c) true))) :pattern ((perm_transitive a
                                                          b c)) )))

(declare-fun index_of_minimum (us_t) Int)

(declare-fun index_of_minimum__function_guard (Int us_t) Bool)

;; index_of_minimum__post_axiom
  (assert
  (forall ((unsorted us_t))
  (! (=>
     (and (dynamic_invariant1 unsorted true true true)
     (<= (first1 unsorted) (last1 unsorted)))
     (let ((result (index_of_minimum unsorted)))
     (and
     (and (and (<= (first1 unsorted) result) (<= result (last1 unsorted)))
     (forall ((j Int))
     (=> (and (<= (first1 unsorted) j) (<= j (last1 unsorted)))
     (<= (to_rep (select (to_array unsorted) result)) (to_rep
                                                      (select (to_array
                                                              unsorted) j))))))
     (dynamic_invariant result true false true)))) :pattern ((index_of_minimum
                                                             unsorted)) )))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((tTvalues_lastSP1__ref 0))
(((mk_tTvalues_lastSP1__ref (tTvalues_lastSP1__content integer)))))
(define-fun tTvalues_lastSP1__ref___projection ((a tTvalues_lastSP1__ref)) integer
  (tTvalues_lastSP1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int integer)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq4 (us_t1 us_t1) Bool)

(declare-const dummy4 us_t1)

(declare-datatypes ((tvalues_lastS__ref 0))
(((mk_tvalues_lastS__ref (tvalues_lastS__content us_t1)))))
(define-fun tvalues_lastS__ref___projection ((a tvalues_lastS__ref)) us_t1
  (tvalues_lastS__content a))

(define-fun dynamic_invariant2 ((temp___expr_179 us_t1)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (not (= temp___skip_constant_177 true))
                                      (and (dynamic_property2
                                      (to_rep values__first)
                                      (to_rep values__last)
                                      (first3 temp___expr_179)
                                      (last3 temp___expr_179))
                                      (and
                                      (= (first3 temp___expr_179) (to_rep
                                                                  values__first))
                                      (= (last3 temp___expr_179) (to_rep
                                                                 values__last))))))

(declare-const values_last__first integer)

(declare-const values_last__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes ((t25b__ref 0))
(((mk_t25b__ref (t25b__content integer)))))
(define-fun t25b__ref___projection ((a t25b__ref)) integer (t25b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property4 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t26b__ref 0))
(((mk_t26b__ref (t26b__content integer)))))
(define-fun t26b__ref___projection ((a t26b__ref)) integer (t26b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property5 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property4 range_first range_last low)
                   (dynamic_property4 range_first range_last high))))))

(declare-datatypes ((us_t2 0))
(((mk___t2 (elts2 (Array Int integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))

(define-fun of_array2 ((a (Array Int integer)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq3 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq7 (us_t2 us_t2) Bool)

(declare-const dummy7 us_t2)

(declare-datatypes ((t27b__ref 0)) (((mk_t27b__ref (t27b__content us_t2)))))
(define-fun t27b__ref___projection ((a t27b__ref)) us_t2 (t27b__content a))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const values (Array Int integer))

(declare-const values_last (Array Int integer))

(declare-const smallest Int)

(declare-const current Int)

(declare-const temp___202 Int)

(declare-const temp___189 (Array Int integer))

(declare-const temp___1891 t1)

(declare-const o (Array Int integer))

(declare-const o1 t1)

(declare-const o2 (Array Int integer))

(declare-const o3 (Array Int integer))

(declare-const temp___191 (Array Int integer))

(declare-const temp___1911 t2)

(declare-const o4 (Array Int integer))

(declare-const o5 t)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const j Int)

(declare-const values1 (Array Int integer))

(declare-const result Int)

(declare-const current1 Int)

(declare-const result1 (Array Int integer))

(declare-const values_last1 (Array Int integer))

(declare-const result2 Int)

(declare-const smallest1 Int)

(declare-const values2 (Array Int integer))

(declare-const values3 (Array Int integer))

(declare-const smallest2 Int)

(declare-const current2 Int)

;; H
  (assert (dynamic_property 1 2147483647 (to_rep values__first)
  (to_rep values__last)))

;; H
  (assert
  (and
  (<= 1 (ite (<= (to_rep values__first) (to_rep values__last))
        (+ (- (to_rep values__last) (to_rep values__first)) 1) 0))
  (<= (to_rep values__last) 2147483647)))

;; H
  (assert
  (and (dynamic_property2 (to_rep values__first) (to_rep values__last)
  (to_rep values_last__first) (to_rep values_last__last))
  (and (= (to_rep values_last__first) (to_rep values__first))
  (= (to_rep values_last__last) (to_rep values__last)))))

;; H
  (assert (=> (<= 1 2147483647) (in_range2 smallest)))

;; H
  (assert
  (= (perm (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values (mk (to_rep values__first) (to_rep values__last)))) true))

;; H
  (assert
  (and (= temp___202 (- (to_rep values__last) 1)) (in_range1
  (- (to_rep values__last) 1))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref current)))

;; H
  (assert (= current1 (to_rep values__first)))

;; H
  (assert (<= (to_rep values__first) current1))

;; H
  (assert (<= current1 temp___202))

;; H
  (assert
  (= (slide values (to_rep values__first) (to_rep values__first)) temp___189))

;; H
  (assert (= (mk1 (to_rep values__first) (to_rep values__last)) temp___1891))

;; H
  (assert
  (= (ite (<= (to_rep (first2 temp___1891)) (to_rep (last2 temp___1891)))
     (+ (- (to_rep (last2 temp___1891)) (to_rep (first2 temp___1891))) 1) 0)
  (ite (<= (to_rep values_last__first) (to_rep values_last__last))
  (+ (- (to_rep values_last__last) (to_rep values_last__first)) 1) 0)))

;; H
  (assert (= (mk___t1 o o1) (mk___t1 temp___189 temp___1891)))

;; H
  (assert (= o2 o))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref values_last)))

;; H
  (assert (= values_last1 o2))

;; H
  (assert
  (=> (<= current1 (to_rep values__last))
  (and
  (and (<= (to_rep values__first) current1)
  (<= current1 (to_rep values__last)))
  (and (<= (to_rep values__first) (to_rep values__last))
  (<= (to_rep values__last) (to_rep values__last))))))

;; H
  (assert (= o3 values))

;; H
  (assert (= o3 temp___191))

;; H
  (assert (= (mk2 current1 (to_rep values__last)) temp___1911))

;; H
  (assert (= temp___191 o4))

;; H
  (assert
  (= (mk (to_rep (first4 temp___1911)) (to_rep (last4 temp___1911)))
  o5))

;; H
  (assert
  (and (= o6 (index_of_minimum (mk___t o4 o5)))
  (and (in_range2 o6)
  (and (and (<= (to_rep (first o5)) o6) (<= o6 (to_rep (last o5))))
  (forall ((j1 Int))
  (=> (and (<= (to_rep (first o5)) j1) (<= j1 (to_rep (last o5))))
  (<= (to_rep (select o4 o6)) (to_rep (select o4 j1)))))))))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref smallest)))

;; H
  (assert (= smallest1 o6))

;; H
  (assert
  (=> (not (= smallest1 current1))
  (and (= o7 current1) (in_range2 current1))))

;; H
  (assert
  (=> (not (= smallest1 current1))
  (and
  (= (perm (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values2 (mk (to_rep values__first) (to_rep values__last)))) true)
  (and (= (to_rep (select values2 o7)) (to_rep (select values smallest1)))
  (and (= (to_rep (select values2 smallest1)) (to_rep (select values o7)))
  (forall ((j1 Int))
  (=> (and (<= (to_rep values__first) j1) (<= j1 (to_rep values__last)))
  (=> (and (not (= j1 o7)) (not (= j1 smallest1)))
  (= (to_rep (select values2 j1)) (to_rep (select values j1)))))))))))

;; H
  (assert (=> (not (not (= smallest1 current1))) (= values2 values)))

;; H
  (assert (=> (not (not (= smallest1 current1))) (= values2 values1)))

;; H
  (assert
  (= (perm_transitive
     (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values_last1
     (mk (to_rep values_last__first) (to_rep values_last__last)))
     (mk___t values2 (mk (to_rep values__first) (to_rep values__last)))) true))

;; H
  (assert
  (= (perm (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values3 (mk (to_rep values__first) (to_rep values__last)))) true))

;; H
  (assert
  (forall ((j1 Int))
  (=> (and (<= current2 j1) (<= j1 (to_rep values__last)))
  (<= (to_rep (select values3 current2)) (to_rep (select values3 j1))))))

;; H
  (assert
  (forall ((j1 Int))
  (=> (and (<= (to_rep values__first) j1) (<= j1 current2))
  (<= (to_rep (select values3 j1)) (to_rep (select values3 (+ j1 1)))))))

;; H
  (assert
  (and
  (and (=> (<= 1 2147483647) (in_range2 smallest2))
  (=> (<= (to_rep values__first) (- (to_rep values__last) 1))
  (dynamic_property3 (to_rep values__first) (- (to_rep values__last) 1)
  current2)))
  (and (<= (to_rep values__first) current2)
  (<= current2 (- (to_rep values__last) 1)))))

;; H
  (assert (<= current2 j))

;; H
  (assert (<= j (to_rep values__last)))

(assert
;; WP_parameter_def
 ;; File "sorters.ads", line 7, characters 0-0
  (not (<= (to_rep values__first) j)))
(check-sat)
(exit)
