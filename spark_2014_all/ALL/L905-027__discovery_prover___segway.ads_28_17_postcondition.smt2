;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort state_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (state_type state_type) Bool)

(declare-fun dummy () state_type)

(declare-datatypes ()
((state_type__ref (mk_state_type__ref (state_type__content state_type)))))
(define-fun state_type__ref___projection ((a state_type__ref)) state_type 
  (state_type__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 2)) (in_range1 temp___expr_135)))

(declare-sort speed_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 100) x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (speed_type speed_type) Bool)

(declare-fun dummy1 () speed_type)

(declare-datatypes ()
((speed_type__ref (mk_speed_type__ref (speed_type__content speed_type)))))
(define-fun speed_type__ref___projection ((a speed_type__ref)) speed_type 
  (speed_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_153 Int)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true)
                                      (<= (- 100) 100)) (in_range2
                                      temp___expr_153)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun speed_is_valid (Int Int) Bool)

(declare-fun speed_is_valid__function_guard (Bool Int Int) Bool)

;; speed_is_valid__post_axiom
  (assert true)

;; speed_is_valid__def_axiom
  (assert
  (forall ((segway__speed Int) (segway__state Int))
  (! (= (= (speed_is_valid segway__speed segway__state) true)
     (ite (= segway__state 0) (= segway__speed 0)
     (ite (= segway__state 1) (< 0 segway__speed) (< segway__speed 0)))) :pattern (
  (speed_is_valid segway__speed segway__state)) )))

(declare-fun speed () Int)

(declare-fun state () Int)

(declare-fun temp___157 () Int)

(declare-fun temp___156 () Int)

(declare-fun speed1 () Int)

(declare-fun state1 () Int)

(declare-fun speed2 () Int)

(declare-fun state2 () Int)

(declare-fun speed3 () Int)

(declare-fun state3 () Int)

(declare-fun speed4 () Int)

(declare-fun state4 () Int)

(declare-fun speed5 () Int)

(declare-fun state5 () Int)

(declare-fun speed6 () Int)

(declare-fun state6 () Int)

(declare-fun speed7 () Int)

(declare-fun state7 () Int)

(declare-fun speed8 () Int)

(declare-fun state8 () Int)

(declare-fun speed9 () Int)

(declare-fun state9 () Int)

(declare-fun speed10 () Int)

(declare-fun state10 () Int)

(define-fun state11 () int__ref (mk_int__ref state7))

(define-fun speed11 () int__ref (mk_int__ref speed7))

;; H
  (assert (in_range2 speed))

;; H
  (assert (in_range1 state))

;; H
  (assert (= (speed_is_valid speed state) true))

;; H
  (assert (=> (not (= state 0)) (= temp___157 state)))

;; H
  (assert (=> (not (= state 0)) (= temp___156 speed)))

;; H
  (assert (=> (not (= state 0)) (= (speed_is_valid speed2 state2) true)))

;; H
  (assert
  (=> (not (= state 0))
  (and (and (in_range2 speed2) (in_range1 state2)) (not (= state2 0)))))

;; H
  (assert
  (=> (not (= state 0))
  (=> (< 0 speed2)
  (and (= (speed_is_valid speed3 state3) true)
  (and (in_range2 speed3) (in_range1 state3))))))

;; H
  (assert
  (=> (not (= state 0))
  (=> (not (< 0 speed2))
  (and (= (speed_is_valid speed4 state4) true)
  (and (in_range2 speed4) (in_range1 state4))))))

;; H
  (assert (=> (not (= state 0)) (=> (not (< 0 speed2)) (= state3 state4))))

;; H
  (assert (=> (not (= state 0)) (=> (not (< 0 speed2)) (= speed3 speed4))))

;; H
  (assert (=> (not (= state 0)) (= state3 0)))

;; H
  (assert (=> (not (= state 0)) (= state3 state5)))

;; H
  (assert (=> (not (= state 0)) (= speed3 speed5)))

;; H
  (assert (=> (not (= state 0)) (= state6 state3)))

;; H
  (assert (=> (not (= state 0)) (= speed6 speed3)))

;; H
  (assert (=> (not (= state 0)) (= state11 (mk_int__ref state5))))

;; H
  (assert (=> (not (= state 0)) (= speed11 (mk_int__ref speed5))))

;; H
  (assert (=> (not (= state 0)) (= state8 state6)))

;; H
  (assert (=> (not (= state 0)) (= speed8 speed6)))

;; H
  (assert (=> (not (not (= state 0))) (= state11 (mk_int__ref state))))

;; H
  (assert (=> (not (not (= state 0))) (= speed11 (mk_int__ref speed))))

;; H
  (assert (=> (not (not (= state 0))) (= state8 state1)))

;; H
  (assert (=> (not (not (= state 0))) (= speed8 speed1)))

;; H
  (assert (= (mk_int__ref state9) state11))

;; H
  (assert (= (mk_int__ref speed9) speed11))

;; H
  (assert (= state10 state8))

;; H
  (assert (= speed10 speed8))

(assert
;; WP_parameter_def
 ;; File "segway.ads", line 16, characters 0-0
  (not (= state9 0)))
(check-sat)
