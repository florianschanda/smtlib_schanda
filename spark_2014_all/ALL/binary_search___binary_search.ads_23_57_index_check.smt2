;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort u 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (u u) Bool)

(declare-fun dummy1 () u)

(declare-datatypes () ((u__ref (mk_u__ref (u__content u)))))
(define-fun u__ref___projection ((a u__ref)) u (u__content a))

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 10)) (in_range2 temp___expr_142)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun a () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun left () Int)

(declare-fun right () Int)

(declare-fun med () Int)

(declare-fun binary_search__search__result () Int)

(declare-fun temp___158 () Int)

(declare-fun temp___157 () Int)

(declare-fun temp___156 () Int)

(declare-fun temp___159 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun med1 () Int)

(declare-fun binary_search__search__result1 () Int)

(declare-fun result () Int)

(declare-fun left1 () Int)

(declare-fun result1 () Int)

(declare-fun right1 () Int)

(declare-fun result2 () Int)

(declare-fun binary_search__search__result2 () Int)

(declare-fun left2 () Int)

(declare-fun right2 () Int)

(declare-fun med2 () Int)

(declare-fun binary_search__search__result3 () Int)

(declare-fun temp___1591 () Int)

(declare-fun result3 () Int)

(declare-fun temp___1592 () Int)

(declare-fun result4 () Int)

(declare-fun med3 () Int)

(declare-fun result5 () Int)

(declare-fun left3 () Int)

(declare-fun result6 () Int)

(declare-fun right3 () Int)

(declare-fun result7 () Int)

(declare-fun binary_search__search__result4 () Int)

(declare-fun left4 () Int)

(declare-fun right4 () Int)

(declare-fun med4 () Int)

(declare-fun binary_search__search__result5 () int__ref)

(declare-fun left5 () Int)

(declare-fun right5 () Int)

(declare-fun med5 () Int)

(declare-fun binary_search__search__result6 () Int)

(declare-fun left6 () int__ref)

(declare-fun right6 () int__ref)

(declare-fun med6 () int__ref)

(declare-fun binary_search__search__result7 () int__ref)

(declare-fun left7 () Int)

(declare-fun right7 () Int)

(declare-fun med7 () Int)

(declare-fun binary_search__search__result8 () Int)

(declare-fun result8 () int__ref)

(declare-fun binary_search__search__result9 () Int)

(declare-fun binary_search__search__result10 () int__ref)

(declare-fun binary_search__search__result11 () Int)

(declare-fun left8 () int__ref)

(declare-fun right8 () int__ref)

(declare-fun med8 () int__ref)

(declare-fun binary_search__search__result12 () int__ref)

(declare-fun left9 () Int)

(declare-fun right9 () Int)

(declare-fun med9 () Int)

(declare-fun binary_search__search__result13 () Int)

(declare-fun left10 () int__ref)

(declare-fun right10 () int__ref)

(declare-fun med10 () int__ref)

(declare-fun binary_search__search__result14 () int__ref)

(declare-fun left11 () Int)

(declare-fun right11 () Int)

(declare-fun med11 () Int)

(declare-fun binary_search__search__result15 () Int)

(declare-fun left12 () int__ref)

(declare-fun right12 () int__ref)

(declare-fun med12 () int__ref)

(declare-fun binary_search__search__result16 () int__ref)

(declare-fun left13 () Int)

(declare-fun right13 () Int)

(declare-fun med13 () Int)

(declare-fun binary_search__search__result17 () Int)

(define-fun med14 () int__ref (mk_int__ref med))

;; H
  (assert (in_range1 i))

;; H
  (assert
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 10))
  (forall ((i2 Int))
  (=> (and (<= i1 i2) (<= i2 10))
  (<= (to_rep (select a i1)) (to_rep (select a i2))))))))

;; H
  (assert (=> (<= 1 10) (in_range2 left)))

;; H
  (assert (=> (<= 1 10) (in_range2 right)))

;; H
  (assert (=> (<= 1 10) (in_range2 med)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref left)))

;; H
  (assert (= left1 1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref right)))

;; H
  (assert (= right1 10))

;; H
  (assert
  (or
  (and
  (and
  (and
  (= binary_search__search__result14 (mk_int__ref
                                     binary_search__search__result2))
  (and (= med10 med14)
  (and (= right10 (mk_int__ref right1)) (= left10 (mk_int__ref left1)))))
  (and (= binary_search__search__result15 binary_search__search__result2)
  (and (= med11 med1) (and (= right11 right1) (= left11 left1)))))
  (and (or (< i (to_rep (select a left1))) (< (to_rep (select a right1)) i))
  (and (= (mk_int__ref result2) (mk_int__ref binary_search__search__result))
  (= binary_search__search__result2 0))))
  (and
  (and
  (not (or (< i (to_rep (select a left1))) (< (to_rep (select a right1)) i)))
  (and (= binary_search__search__result2 binary_search__search__result)
  (= binary_search__search__result2 binary_search__search__result1)))
  (and
  (and
  (and (= binary_search__search__result14 binary_search__search__result12)
  (and (= med10 med8) (and (= right10 right8) (= left10 left8))))
  (and (= binary_search__search__result15 binary_search__search__result13)
  (and (= med11 med9) (and (= right11 right9) (= left11 left9)))))
  (or
  (and
  (and
  (and
  (= binary_search__search__result12 (mk_int__ref
                                     binary_search__search__result4))
  (and (= med8 (mk_int__ref med3))
  (and (= right8 (mk_int__ref right2)) (= left8 (mk_int__ref left2)))))
  (and (= binary_search__search__result13 binary_search__search__result4)
  (and (= med9 med3) (and (= right9 right2) (= left9 left2)))))
  (and (<= left1 right1)
  (and (= temp___158 med)
  (and (= temp___157 right1)
  (and (= temp___156 left1)
  (and (= 0 temp___159)
  (and
  (and
  (forall ((index Int))
  (=> (and (<= 1 index) (<= index (- left2 1)))
  (< (to_rep (select a index)) i)))
  (forall ((index Int))
  (=> (and (<= (+ right2 1) index) (<= index 10))
  (< i (to_rep (select a index))))))
  (and
  (and
  (and
  (and (=> (<= 1 10) (in_range2 left2)) (=> (<= 1 10) (in_range2 right2)))
  (=> (<= 1 10) (in_range2 med2))) (<= left2 right2))
  (and (and (= temp___1591 result3) (= temp___1592 (- right2 left2)))
  (and
  (and
  (and (= o (+ left2 (div1 (- right2 left2) 2))) (in_range2
  (+ left2 (div1 (- right2 left2) 2)))) (and (= med2 result4) (= med3 o)))
  (and (not (< (to_rep (select a med3)) i))
  (and (not (< i (to_rep (select a med3))))
  (and (= binary_search__search__result3 result7)
  (= binary_search__search__result4 med3))))))))))))))
  (and
  (ite (<= left1 right1)
  (and
  (and
  (and (= temp___158 med)
  (and (= temp___157 right1)
  (and (= temp___156 left1)
  (and (= 0 temp___159)
  (and
  (and
  (forall ((index Int))
  (=> (and (<= 1 index) (<= index (- left2 1)))
  (< (to_rep (select a index)) i)))
  (forall ((index Int))
  (=> (and (<= (+ right2 1) index) (<= index 10))
  (< i (to_rep (select a index))))))
  (and
  (and
  (and
  (and (=> (<= 1 10) (in_range2 left2)) (=> (<= 1 10) (in_range2 right2)))
  (=> (<= 1 10) (in_range2 med2))) (<= left2 right2))
  (and (and (= temp___1591 result3) (= temp___1592 (- right2 left2)))
  (and
  (and
  (and (= o (+ left2 (div1 (- right2 left2) 2))) (in_range2
  (+ left2 (div1 (- right2 left2) 2)))) (and (= med2 result4) (= med3 o)))
  (and
  (ite (< (to_rep (select a med3)) i)
  (and
  (and (and (= o1 (+ med3 1)) (in_range2 (+ med3 1)))
  (and (= left2 result5) (= left3 o1)))
  (and (= binary_search__search__result4 binary_search__search__result3)
  (= right3 right2)))
  (and
  (and (< i (to_rep (select a med3)))
  (and
  (and (and (= o2 (- med3 1)) (in_range2 (- med3 1)))
  (and (= right2 result6) (= right3 o2)))
  (= binary_search__search__result4 binary_search__search__result3)))
  (= left3 left2))) (not (<= left3 right3)))))))))))
  (and
  (and
  (= binary_search__search__result5 (mk_int__ref
                                    binary_search__search__result4))
  (and (= med3 med4) (and (= right3 right4) (= left3 left4))))
  (and (= binary_search__search__result6 binary_search__search__result4)
  (and (= med5 med3) (and (= right5 right3) (= left5 left3))))))
  (and
  (and (= binary_search__search__result7 binary_search__search__result5)
  (and (= med6 (mk_int__ref med4))
  (and (= right6 (mk_int__ref right4)) (= left6 (mk_int__ref left4)))))
  (and (= binary_search__search__result8 binary_search__search__result6)
  (and (= med7 med5) (and (= right7 right5) (= left7 left5))))))
  (and
  (and
  (= binary_search__search__result7 (mk_int__ref
                                    binary_search__search__result2))
  (and (= med6 med14)
  (and (= right6 (mk_int__ref right1)) (= left6 (mk_int__ref left1)))))
  (and (= binary_search__search__result8 binary_search__search__result2)
  (and (= med7 med1) (and (= right7 right1) (= left7 left1))))))
  (and
  (and
  (and (= binary_search__search__result12 binary_search__search__result10)
  (and (= med8 med6) (and (= right8 right6) (= left8 left6))))
  (and (= binary_search__search__result13 binary_search__search__result11)
  (and (= med9 med7) (and (= right9 right7) (= left9 left7)))))
  (and
  (and
  (= binary_search__search__result10 (mk_int__ref
                                     binary_search__search__result9))
  (= binary_search__search__result11 binary_search__search__result9))
  (and (= result8 binary_search__search__result7)
  (= binary_search__search__result9 0))))))))))

;; H
  (assert
  (= binary_search__search__result16 binary_search__search__result14))

;; H
  (assert (= med12 med10))

;; H
  (assert (= right12 right10))

;; H
  (assert (= left12 left10))

;; H
  (assert
  (= binary_search__search__result17 binary_search__search__result15))

;; H
  (assert (= med13 med11))

;; H
  (assert (= right13 right11))

;; H
  (assert (= left13 left11))

;; H
  (assert (<= 1 (int__content binary_search__search__result16)))

;; H
  (assert (<= (int__content binary_search__search__result16) 10))

(assert
;; WP_parameter_def
 ;; File "binary_search.ads", line 12, characters 0-0
  (not (<= 1 (int__content binary_search__search__result16))))
(check-sat)
(exit)
