;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort t1b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (t1b t1b) Bool)

(declare-const dummy1 t1b)

(declare-datatypes ((t1b__ref 0)) (((mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r (Array Int Bool))

(declare-const x Int)

(declare-const counterex_forall__single_char_set_broken__result (Array Int Bool))

(declare-const temp___157 Int)

(declare-const temp___155 (Array Int Bool))

(declare-const r1 (Array Int Bool))

(declare-const result Int)

(declare-const x1 Int)

(declare-const result1 (Array Int Bool))

(declare-const r2 (Array Int Bool))

(declare-const r3 (Array Int Bool))

(declare-const x2 Int)

(declare-const r4 (Array Int Bool))

(declare-const x3 Int)

(declare-const r5 (Array Int Bool))

(declare-const x4 Int)

(declare-const r6 (Array Int Bool))

(declare-const x5 Int)

(declare-const r7 (Array Int Bool))

(declare-const x6 Int)

(declare-const result2 (Array Int Bool))

(declare-const counterex_forall__single_char_set_broken__result1 (Array Int Bool))

(declare-const counterex_forall__single_char_set_broken__result2 (Array Int Bool))

(declare-const counterex_forall__single_char_set_broken__result3 (Array Int Bool))

(declare-const r8 (Array Int Bool))

(declare-const x7 Int)

(declare-const counterex_forall__single_char_set_broken__result4 (Array Int Bool))

(declare-const r9 (Array Int Bool))

(declare-const x8 Int)

(declare-const counterex_forall__single_char_set_broken__result5 (Array Int Bool))

(define-fun r10 () map__ref (mk_map__ref r6))

(define-fun r11 () map__ref (mk_map__ref r))

(declare-const result3 (Array Int Bool))

;; H
  (assert (in_range1 c))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref x)))

;; H
  (assert (= x1 1))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= temp___157 x1)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= temp___155 r)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= (mk_map__ref result1) r11)))

;; H
  (assert
  (=> (and (<= 1 x1) (<= x1 100))
  (= r2 (store r x1 (ite (= x1 c) true false)))))

;; H
  (assert
  (=> (and (<= 1 x1) (<= x1 100))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i x2)) (= (= (select r3 i) true) (= i (+ c 1)))))))

;; H
  (assert
  (=> (and (<= 1 x1) (<= x1 100))
  (and
  (and
  (forall ((temp___156 Int))
  (=> (and (<= (- 2147483648) temp___156) (<= temp___156 2147483647))
  (=> (< x2 temp___156)
  (= (select r3 temp___156) (select temp___155 temp___156)))))
  (=> (<= 1 100) (in_range2 x2))) (and (<= 1 x2) (<= x2 100)))))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= x2 100)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= x2 x3)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= r3 r4)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= x4 x2)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= r5 r3)))

;; H
  (assert
  (=> (and (<= 1 x1) (<= x1 100)) (= (mk_int__ref x5) (mk_int__ref x3))))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= r10 (mk_map__ref r4))))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= x6 x4)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 100)) (= r7 r5)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 100))) (= x1 x5)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 100))) (= r10 r11)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 100))) (= x6 x1)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 100))) (= r7 r1)))

;; H
  (assert
  (= counterex_forall__single_char_set_broken__result1 counterex_forall__single_char_set_broken__result2))

;; H
  (assert
  (= counterex_forall__single_char_set_broken__result3 counterex_forall__single_char_set_broken__result1))

;; H
  (assert (= result2 counterex_forall__single_char_set_broken__result))

;; H
  (assert (= counterex_forall__single_char_set_broken__result1 r6))

;; H
  (assert
  (= (mk_map__ref counterex_forall__single_char_set_broken__result4)
  (mk_map__ref counterex_forall__single_char_set_broken__result2)))

;; H
  (assert (= x7 x5))

;; H
  (assert (= r8 r6))

;; H
  (assert
  (= counterex_forall__single_char_set_broken__result5 counterex_forall__single_char_set_broken__result3))

;; H
  (assert (= x8 x6))

;; H
  (assert (= r9 r7))

;; H
  (assert (= result3 counterex_forall__single_char_set_broken__result4))

(declare-const i Int)

;; H
  (assert (<= (- 2147483648) i))

;; H
  (assert (<= i 2147483647))

;; H
  (assert
  (= (select counterex_forall__single_char_set_broken__result4 i) true))

(assert
;; WP_parameter_def
 ;; File "counterex_forall.ads", line 7, characters 0-0
  (not (< c i)))
(check-sat)
(exit)
