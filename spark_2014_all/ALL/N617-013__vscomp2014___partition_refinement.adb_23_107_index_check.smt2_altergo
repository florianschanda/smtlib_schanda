(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tindex_countB

predicate in_range1(x: int) = (((-128) <= x) and (x <= 127))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tindex_countB, tindex_countB -> bool

logic dummy : tindex_countB

type tindex_countB__ref = { tindex_countB__content : tindex_countB
}

function tindex_countB__ref___projection(a: tindex_countB__ref) : tindex_countB =
  (a).tindex_countB__content

type index_count

predicate in_range2(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_count, index_count -> bool

logic dummy1 : index_count

type index_count__ref = { index_count__content : index_count
}

function index_count__ref___projection(a: index_count__ref) : index_count =
  (a).index_count__content

logic to_rep : index_count -> int

logic of_rep : int -> index_count

axiom inversion_axiom :
  (forall x:index_count [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index_count [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range3(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : index -> int

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__partition_refinement__interval__first : index;
rec__partition_refinement__interval__last : index;
rec__partition_refinement__interval__count : index_count
}

function us_split_fields_First__projection(a: us_split_fields) : index =
  (a).rec__partition_refinement__interval__first

function us_split_fields_Last__projection(a: us_split_fields) : index =
  (a).rec__partition_refinement__interval__last

function us_split_fields_Count__projection(a: us_split_fields) : index_count =
  (a).rec__partition_refinement__interval__count

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__first) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__first)) and
  (to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__last) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__last))) and
  (to_rep(((a).us_split_fields1).rec__partition_refinement__interval__count) = to_rep(((b).us_split_fields1).rec__partition_refinement__interval__count))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__first) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__first)) and
  (to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__last) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__last))) and
  (to_rep(((a).us_split_fields1).rec__partition_refinement__interval__count) = to_rep(((b).us_split_fields1).rec__partition_refinement__interval__count)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__size({ us_split_fields1 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

logic partition_refinement__interval__first__first__bit : int

logic partition_refinement__interval__first__last__bit : int

logic partition_refinement__interval__first__position : int

axiom partition_refinement__interval__first__first__bit_axiom :
  (0 <= partition_refinement__interval__first__first__bit)

axiom partition_refinement__interval__first__last__bit_axiom :
  (partition_refinement__interval__first__first__bit <  partition_refinement__interval__first__last__bit)

axiom partition_refinement__interval__first__position_axiom :
  (0 <= partition_refinement__interval__first__position)

logic partition_refinement__interval__last__first__bit : int

logic partition_refinement__interval__last__last__bit : int

logic partition_refinement__interval__last__position : int

axiom partition_refinement__interval__last__first__bit_axiom :
  (0 <= partition_refinement__interval__last__first__bit)

axiom partition_refinement__interval__last__last__bit_axiom :
  (partition_refinement__interval__last__first__bit <  partition_refinement__interval__last__last__bit)

axiom partition_refinement__interval__last__position_axiom :
  (0 <= partition_refinement__interval__last__position)

logic partition_refinement__interval__count__first__bit : int

logic partition_refinement__interval__count__last__bit : int

logic partition_refinement__interval__count__position : int

axiom partition_refinement__interval__count__first__bit_axiom :
  (0 <= partition_refinement__interval__count__first__bit)

axiom partition_refinement__interval__count__last__bit_axiom :
  (partition_refinement__interval__count__first__bit <  partition_refinement__interval__count__last__bit)

axiom partition_refinement__interval__count__position_axiom :
  (0 <= partition_refinement__interval__count__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : index

logic dummy4 : index

logic dummy5 : index_count

type interval__ref = { interval__content : us_rep
}

function interval__ref___projection(a: interval__ref) : us_rep =
  (a).interval__content

type tpartition_indexB

predicate in_range4(x: int) = (((-32768) <= x) and (x <= 32767))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tpartition_indexB, tpartition_indexB -> bool

logic dummy6 : tpartition_indexB

type tpartition_indexB__ref = { tpartition_indexB__content :
tpartition_indexB
}

function tpartition_indexB__ref___projection(a: tpartition_indexB__ref) : tpartition_indexB =
  (a).tpartition_indexB__content

type partition_index

predicate in_range5(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : partition_index, partition_index -> bool

logic dummy7 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref___projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

logic to_rep2 : partition_index -> int

logic of_rep2 : int -> partition_index

axiom inversion_axiom2 :
  (forall x:partition_index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:partition_index [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref___projection(a: element_type__ref) : us_rep =
  (a).element_type__content

type capacity_range

predicate in_range6(x: int) = ((0 <= x) and (x <= 10001))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : capacity_range, capacity_range -> bool

logic dummy8 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__partitions__vector__capacity : capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__partition_refinement__partitions__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__partition_refinement__partitions__vector :
us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields2) : us_main_type =
  (a).rec__partition_refinement__partitions__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep_6__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_7__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit : int

logic partition_refinement__partitions__vector__capacity__last__bit : int

logic partition_refinement__partitions__vector__capacity__position : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom :
  (partition_refinement__partitions__vector__capacity__first__bit <  partition_refinement__partitions__vector__capacity__last__bit)

axiom partition_refinement__partitions__vector__capacity__position_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy9 : capacity_range

logic dummy10 : us_main_type

type vector__ref = { vector__content : us_rep1
}

function vector__ref___projection(a: vector__ref) : us_rep1 =
  (a).vector__content

logic to_rep3 : capacity_range -> int

logic of_rep3 : int -> capacity_range

axiom inversion_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic capacity__function_guard : int, us_rep1 -> prop

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })]. ((((of_int(1) = true) -> (length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= to_rep3(container))) and ((not (of_int(1) = true)) ->
  (length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= 10001))) and in_range6(length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } }))))

type element_type__ref1 = { element_type__content1 : us_rep
}

function element_type__ref_2__projection(a: element_type__ref1) : us_rep =
  (a).element_type__content1

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq9 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> us_rep

logic get__function_guard : us_rep, us_rep2, int -> prop

logic model__ : us_rep1 -> us_rep2

logic model____function_guard : us_rep2, us_rep1 -> prop

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic last_index__function_guard : int, us_rep1 -> prop

logic first_index__function_guard : int, us_rep1 -> prop

logic element__function_guard : us_rep, us_rep1, int -> prop

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size3({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit1 : int

logic partition_refinement__partitions__vector__capacity__last__bit1 : int

logic partition_refinement__partitions__vector__capacity__position1 : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit1)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom1 :
  (partition_refinement__partitions__vector__capacity__first__bit1 <  partition_refinement__partitions__vector__capacity__last__bit1)

axiom partition_refinement__partitions__vector__capacity__position_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy12 : capacity_range

logic dummy13 : us_main_type

type partition__ref = { partition__content : us_rep1
}

function partition__ref___projection(a: partition__ref) : us_rep1 =
  (a).partition__content

type map__ref = { map__content : (int,partition_index) farray
}

logic slide : (int,partition_index) farray, int,
  int -> (int,partition_index) farray

axiom slide_eq :
  (forall a:(int,partition_index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,partition_index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> (int,partition_index) farray

axiom concat_def :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : partition_index, int -> (int,partition_index) farray

axiom singleton_def :
  (forall v:partition_index.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq10 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> bool

axiom bool_eq_def8 :
  (forall a:(int,partition_index) farray. forall a__first:int.
  forall a__last:int. forall b:(int,partition_index) farray.
  forall b__first:int. forall b__last:int [bool_eq10(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq10(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq10(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq10(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic p__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r1b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r3b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r4b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic to_rep4 : tindex_countB -> int

logic of_rep4 : int -> tindex_countB

axiom inversion_axiom4 :
  (forall x:tindex_countB [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:tindex_countB [to_rep4(x)]. in_range1(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range1(x) ->
  (to_rep4(of_rep4(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : tindex_countB, tindex_countB -> bool

logic dummy14 : tindex_countB

type t5b__ref = { t5b__content : tindex_countB
}

function t5b__ref___projection(a: t5b__ref) : tindex_countB =
  (a).t5b__content

logic attr__ATTRIBUTE_ADDRESS9 : int

type count_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : count_type, count_type -> bool

logic dummy15 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type extended_index

predicate in_range8(x: int) = (((-1) <= x) and (x <= 10001))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy16 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq8(a, b)].
  (((forall n:int. (((0 <= n) and (n <= ((-1) + length1(a)))) ->
    (bool_eq5(get(a, n), get(b, n)) = true))) ->
  (user_eq8(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((0 <= n) and (n <= ((-1) + length1(a)))) ->
        (bool_eq5(get(a, n), get(b, n)) = true)))) ->
  (user_eq8(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })) = length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })))

type index_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : index_type, index_type -> bool

logic dummy17 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index1

predicate in_range10(x: int) = (((-1) <= x) and (x <= 10000))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : extended_index1, extended_index1 -> bool

logic dummy18 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  ((((-1) + length1(container)) <= 10000) and in_range7(length1(container))))

axiom get__post_axiom : true

 (* File "a-cofove.ads", line 807, characters 0-0 *)
goal WP_parameter_def :
  (forall p__split_fields:us_main_type. forall p_prime_index:int.
  forall j:int. forall o:int.
  forall partition_refinement__make_new_partitions__L_1__R1b__assume:int.
  forall temp___501:index. forall temp___5011:index.
  forall temp___5012:index_count. forall o1:int. forall o2:index_count.
  forall o3:index. forall o4:index. forall o5:index. forall o6:index_count.
  forall temp___502:index. forall temp___5021:index.
  forall temp___5022:index_count. forall o7:int. forall o8:int.
  forall o9:partition_index. forall o10:(int,partition_index) farray.
  forall j1:int. forall o11:int. forall o12:bool. forall result:int.
  forall j2:int. forall f:(int,partition_index) farray.
  forall p_elem__split_fields:index. forall p_elem__split_fields1:index.
  forall p_elem__split_fields2:index_count.
  forall p_prime__split_fields:index. forall p_prime__split_fields1:index.
  forall p_prime__split_fields2:index_count. forall p_prime_index1:int.
  forall j3:int. forall i:int. forall result1:index. forall result2:index.
  forall result3:index_count. forall p_elem__split_fields3:index.
  forall p_elem__split_fields4:index.
  forall p_elem__split_fields5:index_count. forall result4:index.
  forall result5:index. forall result6:index_count.
  forall p_prime__split_fields3:index. forall p_prime__split_fields4:index.
  forall p_prime__split_fields5:index_count. forall result7:int.
  forall p_prime_index2:int. forall result8:int. forall i1:int.
  forall result9:(int,partition_index) farray.
  forall f1:(int,partition_index) farray.
  forall f2:(int,partition_index) farray. forall i2:int.
  forall result10:bool. (((0 <= 10000) -> in_range5(p_prime_index)) ->
  ((((((o = length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) and (in_range6(o) and (((of_int(1) = true) and
  (o <= to_rep3(p__split_discrs))) or ((not (of_int(1) = true)) and
  (o <= 10001))))) and
  (partition_refinement__make_new_partitions__L_1__R1b__assume = (o - 1))) and
  (partition_refinement__make_new_partitions__L_1__R1b__assume = r1b)) and
  in_range4(r1b)) -> (((result = j) and (j2 = 0)) -> (((0 <= j2) and
  (j2 <= r1b)) -> ((((0 <= 10000) -> in_range5(p_prime_index1)) and
  ((0 <= j3) and (j3 <= r1b))) -> (((({ us_split_fields1 = {
  rec__partition_refinement__interval__first = temp___501;
  rec__partition_refinement__interval__last = temp___5011;
  rec__partition_refinement__interval__count = temp___5012 }
  } = get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }), j3)) and (bool_eq5({ us_split_fields1 = {
  rec__partition_refinement__interval__first = temp___501;
  rec__partition_refinement__interval__last = temp___5011;
  rec__partition_refinement__interval__count = temp___5012 } }, get(model__({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }), j3)) = true)) and
  (((result1 = p_elem__split_fields) and
  ((result2 = p_elem__split_fields1) and
  (result3 = p_elem__split_fields2))) and
  ((temp___501 = p_elem__split_fields3) and
  ((temp___5011 = p_elem__split_fields4) and
  (temp___5012 = p_elem__split_fields5))))) ->
  (((1 <= to_rep(p_elem__split_fields5)) and
  (to_rep(p_elem__split_fields5) <= (to_rep1(p_elem__split_fields4) - to_rep1(p_elem__split_fields3)))) ->
  (((((to_rep(o2) = 0) and
  ((((o1 = (to_rep1(p_elem__split_fields3) + to_rep(p_elem__split_fields5))) and
  in_range3((to_rep1(p_elem__split_fields3) + to_rep(p_elem__split_fields5)))) and
  (to_rep1(o3) = o1)) and ((o3 = o4) and ((p_elem__split_fields4 = o5) and
  (o2 = o6))))) and ((temp___502 = o4) and ((temp___5021 = o5) and
  (temp___5022 = o6)))) and (((result4 = p_prime__split_fields) and
  ((result5 = p_prime__split_fields1) and
  (result6 = p_prime__split_fields2))) and
  ((temp___502 = p_prime__split_fields3) and
  ((temp___5021 = p_prime__split_fields4) and
  (temp___5022 = p_prime__split_fields5))))) -> (((((o7 = length({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) and (in_range6(o7) and (((of_int(1) = true) and
  (o7 <= to_rep3(p__split_discrs))) or ((not (of_int(1) = true)) and
  (o7 <= 10001))))) and ((o8 = o7) and in_range5(o7))) and
  ((result7 = p_prime_index1) and (p_prime_index2 = o8))) ->
  (((to_rep1(p_prime__split_fields3) = r3b) and in_range3(r3b)) ->
  (((to_rep1(p_prime__split_fields4) = r4b) and in_range3(r4b)) ->
  (((result8 = i) and (i1 = r3b)) -> (((r3b <= i1) and (i1 <= r4b)) ->
  ((((to_rep2(o9) = p_prime_index2) and (o10 = (f[i1 <- o9]))) and
  ((result9 = f) and (f1 = o10))) ->
  (((forall j4:int. (((to_rep1(p_prime__split_fields3) <= j4) and
    (j4 <= i2)) -> (to_rep2((f2[j4])) = p_prime_index2))) and
  ((forall j4:int. (((0 <= j4) and
   (j4 <= (to_rep1(p_prime__split_fields3) - 1))) ->
   (to_rep2((f2[j4])) = to_rep2((f[j4]))))) and
  (forall j4:int. ((((i2 + 1) <= j4) and (j4 <= 5)) ->
  (to_rep2((f2[j4])) = to_rep2((f[j4]))))))) -> (((((r3b <= r4b) ->
  dynamic_property(r3b, r4b, i2)) and
  (forall temp___505:int. (((0 <= temp___505) and (temp___505 <= 5)) ->
  ((i2 <  temp___505) -> ((f2[temp___505]) = (f[temp___505])))))) and
  ((r3b <= i2) and (i2 <= r4b))) -> (((((o11 = (i2 + 1)) and
  in_range1((i2 + 1))) and (((o11 <= j1) and (o12 = true)) or
  ((not (o11 <= j1)) and (o12 = false)))) and (((j1 <= 5) and
  (result10 = match_bool(o12, true, false))) or ((not (j1 <= 5)) and
  (result10 = match_bool(o12, false, false))))) -> ((result10 = true) ->
  (0 <= j1))))))))))))))))))))
