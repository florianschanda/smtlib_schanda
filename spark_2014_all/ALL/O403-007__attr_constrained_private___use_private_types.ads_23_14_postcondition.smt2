;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__private_types__simple__d natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural
  (rec__private_types__simple__d a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__private_types__simple us_main_type)))))
(define-fun us_split_fields_Simple__projection ((a us_split_fields)) us_main_type
  (rec__private_types__simple a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__private_types__simple__d
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__private_types__simple__d
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__private_types__simple (us_split_fields1 a))
                           (rec__private_types__simple (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const private_types__simple__d__first__bit Int)

(declare-const private_types__simple__d__last__bit Int)

(declare-const private_types__simple__d__position Int)

;; private_types__simple__d__first__bit_axiom
  (assert (<= 0 private_types__simple__d__first__bit))

;; private_types__simple__d__last__bit_axiom
  (assert
  (< private_types__simple__d__first__bit private_types__simple__d__last__bit))

;; private_types__simple__d__position_axiom
  (assert (<= 0 private_types__simple__d__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((simple__ref 0))
(((mk_simple__ref (simple__content us_rep)))))
(define-fun simple__ref___projection ((a simple__ref)) us_rep (simple__content
                                                              a))

(define-fun default_initial_assumption ((temp___expr_137 us_rep)
  (temp___skip_top_level_138 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_137) false)
                                         (= (to_rep
                                            (rec__private_types__simple__d
                                            (us_split_discrs1
                                            temp___expr_137))) 0)))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const private_types__simple__d__first__bit1 Int)

(declare-const private_types__simple__d__last__bit1 Int)

(declare-const private_types__simple__d__position1 Int)

;; private_types__simple__d__first__bit_axiom
  (assert (<= 0 private_types__simple__d__first__bit1))

;; private_types__simple__d__last__bit_axiom
  (assert
  (< private_types__simple__d__first__bit1 private_types__simple__d__last__bit1))

;; private_types__simple__d__position_axiom
  (assert (<= 0 private_types__simple__d__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((p_simple__ref 0))
(((mk_p_simple__ref (p_simple__content us_rep)))))
(define-fun p_simple__ref___projection ((a p_simple__ref)) us_rep (p_simple__content
                                                                  a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__use_private_types__p_holder__content us_rep)))))
(define-fun us_split_fields_Content__2__projection ((a us_split_fields2)) us_rep
  (rec__use_private_types__p_holder__content a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (bool_eq
                            (rec__use_private_types__p_holder__content
                            (us_split_fields3 a))
                            (rec__use_private_types__p_holder__content
                            (us_split_fields3 b))) true)
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const use_private_types__p_holder__content__first__bit Int)

(declare-const use_private_types__p_holder__content__last__bit Int)

(declare-const use_private_types__p_holder__content__position Int)

;; use_private_types__p_holder__content__first__bit_axiom
  (assert (<= 0 use_private_types__p_holder__content__first__bit))

;; use_private_types__p_holder__content__last__bit_axiom
  (assert
  (< use_private_types__p_holder__content__first__bit use_private_types__p_holder__content__last__bit))

;; use_private_types__p_holder__content__position_axiom
  (assert (<= 0 use_private_types__p_holder__content__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((p_holder__ref 0))
(((mk_p_holder__ref (p_holder__content us_rep1)))))
(define-fun p_holder__ref___projection ((a p_holder__ref)) us_rep1 (p_holder__content
                                                                   a))

(define-fun dynamic_invariant ((temp___expr_186 us_rep1)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (= (attr__constrained
                                         (rec__use_private_types__p_holder__content
                                         (us_split_fields3 temp___expr_186))) false))

(define-fun default_initial_assumption1 ((temp___expr_188 us_rep1)
  (temp___skip_top_level_189 Bool)) Bool (and
                                         (= (attr__constrained
                                            (rec__use_private_types__p_holder__content
                                            (us_split_fields3
                                            temp___expr_188))) false)
                                         (= (to_rep
                                            (rec__private_types__simple__d
                                            (us_split_discrs1
                                            (rec__use_private_types__p_holder__content
                                            (us_split_fields3
                                            temp___expr_188))))) 0)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun d_zero__2 (us_rep1) Bool)

(declare-fun d_zero__2__function_guard (Bool us_rep1) Bool)

;; d_zero__2__post_axiom
  (assert true)

;; d_zero__2__def_axiom
  (assert
  (forall ((s us_rep1))
  (! (= (= (d_zero__2 s) true)
     (= (to_rep
        (rec__private_types__simple__d
        (us_split_discrs1
        (rec__use_private_types__p_holder__content (us_split_fields3 s))))) 0)) :pattern (
  (d_zero__2 s)) )))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(define-fun default_initial_assumption2 ((temp___expr_155 us_rep)
  (temp___skip_top_level_156 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_155) false)
                                         (= (to_rep
                                            (rec__private_types__simple__d
                                            (us_split_discrs1
                                            temp___expr_155))) 0)))

(declare-const s__split_fields natural)

(declare-const s__split_fields1 us_main_type)

(declare-const s__split_fields2 Bool)

(declare-const private_types__private_reinit__s__discrs natural)

(declare-const private_types__private_reinit__s__fields us_main_type)

(declare-const result natural)

(declare-const result1 us_main_type)

(declare-const result2 Bool)

(declare-const s__split_fields3 natural)

(declare-const s__split_fields4 us_main_type)

(declare-const s__split_fields5 Bool)

(declare-const s__split_fields6 natural)

(declare-const s__split_fields7 us_main_type)

(declare-const s__split_fields8 Bool)

(declare-const s__split_fields9 us_split_fields2)

;; H
  (assert (= s__split_fields2 false))

;; H
  (assert (= (to_rep private_types__private_reinit__s__discrs) 0))

;; H
  (assert (= result s__split_fields))

;; H
  (assert (= result1 s__split_fields1))

;; H
  (assert (= result2 s__split_fields2))

;; H
  (assert (= s__split_fields3 private_types__private_reinit__s__discrs))

;; H
  (assert (= s__split_fields4 private_types__private_reinit__s__fields))

;; H
  (assert (= s__split_fields2 s__split_fields5))

;; H
  (assert
  (=> (= s__split_fields2 true)
  (= s__split_fields private_types__private_reinit__s__discrs)))

;; H
  (assert (= s__split_fields6 s__split_fields3))

;; H
  (assert (= s__split_fields7 s__split_fields4))

;; H
  (assert (= s__split_fields8 s__split_fields5))

;; H
  (assert
  (= s__split_fields9 (mk___split_fields1
                      (mk___rep (mk___split_discrs s__split_fields3)
                      (mk___split_fields s__split_fields4) s__split_fields5))))

(assert
;; WP_parameter_def
 ;; File "use_private_types.ads", line 40, characters 0-0
  (not
  (= (d_zero__2
     (mk___rep1
     (mk___split_fields1
     (mk___rep (mk___split_discrs s__split_fields6)
     (mk___split_fields s__split_fields7) s__split_fields8)))) true)))
(check-sat)
(exit)
