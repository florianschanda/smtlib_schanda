;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort element_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (element_type element_type) Bool)

(declare-const dummy1 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__for_loops_on_lists__my_lists__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__for_loops_on_lists__my_lists__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__for_loops_on_lists__my_lists__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type
  (rec__for_loops_on_lists__my_lists__list a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__for_loops_on_lists__my_lists__list__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__for_loops_on_lists__my_lists__list__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__for_loops_on_lists__my_lists__list
                           (us_split_fields1 a))
                           (rec__for_loops_on_lists__my_lists__list
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const for_loops_on_lists__my_lists__list__capacity__first__bit Int)

(declare-const for_loops_on_lists__my_lists__list__capacity__last__bit Int)

(declare-const for_loops_on_lists__my_lists__list__capacity__position Int)

;; for_loops_on_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 for_loops_on_lists__my_lists__list__capacity__first__bit))

;; for_loops_on_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< for_loops_on_lists__my_lists__list__capacity__first__bit for_loops_on_lists__my_lists__list__capacity__last__bit))

;; for_loops_on_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 for_loops_on_lists__my_lists__list__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((list__ref 0)) (((mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__for_loops_on_lists__my_lists__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__for_loops_on_lists__my_lists__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__for_loops_on_lists__my_lists__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__for_loops_on_lists__my_lists__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const for_loops_on_lists__my_lists__cursor__node__first__bit Int)

(declare-const for_loops_on_lists__my_lists__cursor__node__last__bit Int)

(declare-const for_loops_on_lists__my_lists__cursor__node__position Int)

;; for_loops_on_lists__my_lists__cursor__node__first__bit_axiom
  (assert (<= 0 for_loops_on_lists__my_lists__cursor__node__first__bit))

;; for_loops_on_lists__my_lists__cursor__node__last__bit_axiom
  (assert
  (< for_loops_on_lists__my_lists__cursor__node__first__bit for_loops_on_lists__my_lists__cursor__node__last__bit))

;; for_loops_on_lists__my_lists__cursor__node__position_axiom
  (assert (<= 0 for_loops_on_lists__my_lists__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((cursor__ref 0))
(((mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(define-fun default_initial_assumption ((temp___expr_195 us_rep1)
  (temp___skip_top_level_196 Bool)) Bool (= (to_rep
                                            (rec__for_loops_on_lists__my_lists__cursor__node
                                            (us_split_fields3
                                            temp___expr_195))) 0))

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_141)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__for_loops_on_lists__my_lists__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

(declare-sort extended_index 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (extended_index extended_index) Bool)

(declare-const dummy4 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                   a))

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (element_type1 element_type1) Bool)

(declare-const dummy6 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_214 Int)
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_214)))

(define-fun dynamic_invariant2 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_220)))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_227 us_rep2)
  (temp___skip_top_level_228 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_228 true))
                                         (= (length1 temp___expr_227) 0)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant2 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant1 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))

(declare-datatypes ((key_type__ref 0))
(((mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep1 (key_type__content
                                                                   a))

(declare-fun get1 (us_rep3 us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep3 us_rep1) Bool)

(declare-sort element_type2 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (element_type2 element_type2) Bool)

(declare-const dummy8 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2
  (element_type__content2 a))

(define-fun dynamic_invariant3 ((temp___expr_239 Int)
  (temp___is_init_236 Bool) (temp___skip_constant_237 Bool)
  (temp___do_toplevel_238 Bool)) Bool (=>
                                      (or (= temp___is_init_236 true)
                                      (<= 1 2147483647)) (in_range5
                                      temp___expr_239)))

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-fun is_empty (us_rep3) Bool)

(declare-fun is_empty__function_guard (Bool us_rep3) Bool)

(define-fun default_initial_assumption2 ((temp___expr_246 us_rep3)
  (temp___skip_top_level_247 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_247 true))
                                         (and
                                         (= (is_empty temp___expr_246) true)
                                         (= (length2 temp___expr_246) 0))))

(declare-fun has_key (us_rep3 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep3 us_rep1) Bool)

(declare-fun witness (us_rep3 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep3 us_rep1) Bool)

(declare-fun w_get (us_rep3 Int) Int)

(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)

(define-fun default_initial_assumption3 ((temp___expr_234 us_rep1)
  (temp___skip_top_level_235 Bool)) Bool (= (to_rep
                                            (rec__for_loops_on_lists__my_lists__cursor__node
                                            (us_split_fields3
                                            temp___expr_234))) 0))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key container k) true)
     (= (= (bool_eq1 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant3 result true false true)))) :pattern ((get1 container
                                                              key)) ))))

(declare-fun model__ (us_rep) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep) Bool)

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-fun positions (us_rep) us_rep3)

(declare-fun positions__function_guard (us_rep3 us_rep) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get (model__ container)
                          (get1 (positions container) position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

(define-fun dynamic_invariant4 ((temp___expr_183 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool (=>
                                      (or (= temp___is_init_180 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_183)))

(define-fun equal_except ((left us_rep2) (right us_rep2)
  (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (get left
                                                                    i)
                                                                    (get
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)

(declare-fun oeq1 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep3 us_rep3) Bool)

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq1 position no_element) true)
          (= (get1 (positions container) position) (length container)))
     (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length1 container)) )))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key container k) true) (= (bool_eq1 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (dynamic_invariant (length2 container)
  true false true) :pattern ((length2 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key us_rep1))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (= (is_empty container) true)
     (forall ((key us_rep1)) (not (= (has_key container key) true)))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep3 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant3
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-const l__split_fields us_main_type)

(declare-const c__split_fields count_type)

(declare-const cu count_type)

(declare-const o count_type)

(declare-const o1 count_type)

(declare-const temp___499 count_type)

(declare-const o2 count_type)

(declare-const temp___490 count_type)

(declare-const temp___4901 us_main_type)

(declare-const temp___488 count_type)

(declare-const temp___487 count_type)

(declare-const temp___4871 us_main_type)

(declare-const temp___486 count_type)

(declare-const temp___489 us_rep)

(declare-const temp___491 us_rep)

(declare-const temp___492 us_rep)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 us_rep1)

(declare-const o8 Bool)

(declare-const o9 us_rep1)

(declare-const o10 Int)

(declare-const i Int)

(declare-const o11 us_rep3)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Bool)

(declare-const o15 us_rep2)

(declare-const o16 us_rep2)

(declare-const o17 Int)

(declare-const o18 Int)

(declare-const o19 Int)

(declare-const o20 Int)

(declare-const l__split_fields1 us_split_fields)

(declare-const c__split_fields1 us_split_fields2)

(declare-const result cursor__ref)

(declare-const cu1 us_rep1)

(declare-const result1 Bool)

(declare-const result2 Bool)

(declare-const result3 us_split_fields__ref1)

(declare-const c__split_fields2 us_split_fields2)

(declare-const l__split_fields2 us_split_fields)

(declare-const c__split_fields3 us_split_fields2)

(declare-const cu2 us_rep1)

(declare-const l__split_fields3 us_split_fields)

(declare-const result4 Bool)

(declare-const result5 cursor__ref)

(declare-const cu3 us_rep1)

(declare-const result6 Bool)

(declare-const result7 us_split_fields__ref1)

(declare-const c__split_fields4 us_split_fields2)

(declare-const l__split_fields4 us_split_fields__ref)

(declare-const c__split_fields5 us_split_fields__ref1)

(declare-const cu4 cursor__ref)

(declare-const l__split_fields5 us_split_fields)

(declare-const c__split_fields6 us_split_fields2)

(declare-const cu5 us_rep1)

(declare-const l__split_fields6 us_split_fields__ref)

(declare-const c__split_fields7 us_split_fields__ref1)

(declare-const cu6 cursor__ref)

(declare-const l__split_fields7 us_split_fields)

(declare-const c__split_fields8 us_split_fields2)

(declare-const cu7 us_rep1)

(declare-const l__split_fields8 us_split_fields__ref)

(declare-const c__split_fields9 us_split_fields__ref1)

(declare-const cu8 cursor__ref)

(declare-const l__split_fields9 us_split_fields)

(declare-const c__split_fields10 us_split_fields2)

(declare-const cu9 us_rep1)

(declare-const result8 us_split_fields__ref1)

(declare-const c__split_fields11 us_split_fields2)

(declare-const l__split_fields10 us_split_fields__ref)

(declare-const c__split_fields12 us_split_fields__ref1)

(declare-const cu10 cursor__ref)

(declare-const l__split_fields11 us_split_fields)

(declare-const c__split_fields13 us_split_fields2)

(declare-const cu11 us_rep1)

(declare-const l__split_fields12 us_split_fields__ref)

(declare-const c__split_fields14 us_split_fields__ref1)

(declare-const cu12 cursor__ref)

(declare-const l__split_fields13 us_split_fields)

(declare-const c__split_fields15 us_split_fields2)

(declare-const cu13 us_rep1)

(declare-const result9 Bool)

(declare-const result10 Bool)

(declare-const result11 Bool)

(declare-const result12 Bool)

(define-fun temp___4861 () us_rep1 (mk___rep1
                                   (mk___split_fields1 temp___486)))

(define-fun temp___4902 () us_rep (mk___rep (mk___split_discrs temp___490)
                                  (mk___split_fields temp___4901)))

(define-fun o21 () us_rep1 (mk___rep1 (mk___split_fields1 o2)))

(define-fun cu14 () cursor__ref (mk_cursor__ref
                                (mk___rep1 (mk___split_fields1 cu))))

(define-fun c__split_fields16 () us_split_fields__ref1 (mk___split_fields__ref1
                                                       (mk___split_fields1
                                                       c__split_fields)))

(define-fun l__split_fields14 () us_split_fields__ref (mk___split_fields__ref
                                                      (mk___split_fields
                                                      l__split_fields)))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___499 o1))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 temp___499)) no_element))

;; H
  (assert
  (or
  (and
  (and
  (and (= cu10 cu4)
  (and (= c__split_fields12 c__split_fields5)
  (= l__split_fields10 l__split_fields4)))
  (and (= cu11 cu5)
  (and (= c__split_fields13 c__split_fields6)
  (= l__split_fields11 l__split_fields5))))
  (and
  (and
  (and
  (= o21 (first
         (mk___rep l__split_discrs (mk___split_fields l__split_fields))))
  (ite (= (= (length
             (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 0) true)
  (= (bool_eq1 o21 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     o21) true)
  (= (get1
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     o21) 1))))
  (and (= result cu14) (= cu1 o21)))
  (and
  (and
  (= result1 (has_key
             (positions
             (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
             cu1))
  (= (= result1 true)
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     cu1) true)))
  (and (= result1 true)
  (and
  (and (= l__split_discrs (mk___split_discrs temp___490))
  (= l__split_fields temp___4901))
  (and (= c__split_fields temp___488)
  (and
  (and (= l__split_discrs (mk___split_discrs temp___487))
  (= l__split_fields temp___4871))
  (and (= temp___4861 cu1)
  (and
  (= temp___489 (mk___rep l__split_discrs
                (mk___split_fields l__split_fields)))
  (and
  (= temp___491 (mk___rep l__split_discrs
                (mk___split_fields l__split_fields)))
  (and
  (= temp___492 (mk___rep l__split_discrs
                (mk___split_fields l__split_fields)))
  (or
  (and
  (and
  (and (= cu4 (mk_cursor__ref cu1))
  (and (= c__split_fields5 (mk___split_fields__ref1 c__split_fields2))
  (= l__split_fields4 l__split_fields14)))
  (and (= cu5 cu1)
  (and (= c__split_fields6 c__split_fields2)
  (= l__split_fields5 l__split_fields1))))
  (and
  (and
  (and
  (= o3 (element
        (mk___rep l__split_discrs (mk___split_fields l__split_fields))
        cu1))
  (and (in_range2 o3)
  (= o3 (get
        (model__
        (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
        (get1
        (positions
        (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
        cu1)))))
  (= result2 (ite (= o3 0) true false)))
  (and (= result2 true)
  (and (= result3 c__split_fields16)
  (= c__split_fields2 (us_split_fields3 cu1))))))
  (and
  (and
  (and
  (and
  (= o3 (element
        (mk___rep l__split_discrs (mk___split_fields l__split_fields))
        cu1))
  (and (in_range2 o3)
  (= o3 (get
        (model__
        (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
        (get1
        (positions
        (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
        cu1)))))
  (= result2 (ite (= o3 0) true false)))
  (and (not (= result2 true))
  (and (= c__split_fields2 (mk___split_fields1 c__split_fields))
  (= c__split_fields2 c__split_fields1))))
  (and
  (and
  (and (= cu4 (mk_cursor__ref cu3))
  (and (= c__split_fields5 (mk___split_fields__ref1 c__split_fields4))
  (= l__split_fields4 (mk___split_fields__ref l__split_fields3))))
  (and (= cu5 cu3)
  (and (= c__split_fields6 c__split_fields4)
  (= l__split_fields5 l__split_fields3))))
  (and
  (and
  (= (length (mk___rep l__split_discrs l__split_fields2)) (length temp___489))
  (and
  (forall ((i1 Int))
  (=>
  (and (<= 1 i1)
  (<= i1 (- (get1 (positions (mk___rep l__split_discrs l__split_fields2))
            cu2) 1)))
  (and (< 0 (get (model__ temp___4902) i1))
  (= (get (model__ (mk___rep l__split_discrs l__split_fields2)) i1) (-
  (get (model__ temp___491) i1) 1)))))
  (and
  (forall ((i1 Int))
  (=>
  (and
  (<= (get1 (positions (mk___rep l__split_discrs l__split_fields2)) cu2) i1)
  (<= i1 (length (mk___rep l__split_discrs l__split_fields2))))
  (= (get (model__ (mk___rep l__split_discrs l__split_fields2)) i1) (get
                                                                    (model__
                                                                    temp___492)
                                                                    i1))))
  (not (= (element (mk___rep l__split_discrs l__split_fields2) cu2) 0)))))
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields2)) cu2) true)
  (and
  (and
  (and
  (and
  (and (= o4 (element (mk___rep l__split_discrs l__split_fields2) cu2))
  (and (in_range2 o4)
  (= o4 (get (model__ (mk___rep l__split_discrs l__split_fields2))
        (get1 (positions (mk___rep l__split_discrs l__split_fields2)) cu2)))))
  (= o5 (- o4 1))) (and (= o6 o5) (in_range2 o5)))
  (and
  (and
  (and
  (= (length (mk___rep l__split_discrs l__split_fields3)) (length
                                                          (mk___rep
                                                          l__split_discrs
                                                          l__split_fields2)))
  (= (oeq1 (positions (mk___rep l__split_discrs l__split_fields2))
     (positions (mk___rep l__split_discrs l__split_fields3))) true))
  (= (get (model__ (mk___rep l__split_discrs l__split_fields3))
     (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2))
  o6))
  (= (equal_except (model__ (mk___rep l__split_discrs l__split_fields2))
     (model__ (mk___rep l__split_discrs l__split_fields3))
     (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2)) true)))
  (and
  (and
  (and
  (and
  (and (= o7 (next (mk___rep l__split_discrs l__split_fields3) cu2))
  (ite (= (ite (= (bool_eq1 cu2 no_element) false) (= (get1
                                                      (positions
                                                      (mk___rep
                                                      l__split_discrs
                                                      l__split_fields3))
                                                      cu2) (length
                                                           (mk___rep
                                                           l__split_discrs
                                                           l__split_fields3))) true) true)
  (= (bool_eq1 o7 no_element) true)
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o7) true)
  (= (get1 (positions (mk___rep l__split_discrs l__split_fields3)) o7) (+
  (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2) 1)))))
  (and
  (= o8 (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o7))
  (= (= o8 true)
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o7) true))))
  (= result4 (ite (not (= o8 true)) true false))) (not (= result4 true)))
  (and
  (and
  (and (= o9 (next (mk___rep l__split_discrs l__split_fields3) cu2))
  (ite (= (ite (= (bool_eq1 cu2 no_element) false) (= (get1
                                                      (positions
                                                      (mk___rep
                                                      l__split_discrs
                                                      l__split_fields3))
                                                      cu2) (length
                                                           (mk___rep
                                                           l__split_discrs
                                                           l__split_fields3))) true) true)
  (= (bool_eq1 o9 no_element) true)
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o9) true)
  (= (get1 (positions (mk___rep l__split_discrs l__split_fields3)) o9) (+
  (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2) 1)))))
  (and (= result5 (mk_cursor__ref cu2)) (= cu3 o9)))
  (and
  (and
  (and (= o10 (element (mk___rep l__split_discrs l__split_fields3) cu3))
  (and (in_range2 o10)
  (= o10 (get (model__ (mk___rep l__split_discrs l__split_fields3))
         (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu3)))))
  (= result6 (ite (= o10 0) true false)))
  (and (= result6 true)
  (and (= result7 (mk___split_fields__ref1 c__split_fields3))
  (= c__split_fields4 (us_split_fields3 cu3))))))))))))))))))))))))
  (and
  (and
  (and
  (and
  (= o21 (first
         (mk___rep l__split_discrs (mk___split_fields l__split_fields))))
  (ite (= (= (length
             (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 0) true)
  (= (bool_eq1 o21 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     o21) true)
  (= (get1
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     o21) 1))))
  (and (= result cu14) (= cu1 o21)))
  (and
  (and
  (= result1 (has_key
             (positions
             (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
             cu1))
  (= (= result1 true)
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     cu1) true)))
  (ite (= result1 true)
  (and
  (and
  (and
  (and (= l__split_discrs (mk___split_discrs temp___490))
  (= l__split_fields temp___4901))
  (and (= c__split_fields temp___488)
  (and
  (and (= l__split_discrs (mk___split_discrs temp___487))
  (= l__split_fields temp___4871))
  (and (= temp___4861 cu1)
  (and
  (= temp___489 (mk___rep l__split_discrs
                (mk___split_fields l__split_fields)))
  (and
  (= temp___491 (mk___rep l__split_discrs
                (mk___split_fields l__split_fields)))
  (and
  (= temp___492 (mk___rep l__split_discrs
                (mk___split_fields l__split_fields)))
  (and
  (and
  (and
  (and
  (= o3 (element
        (mk___rep l__split_discrs (mk___split_fields l__split_fields))
        cu1))
  (and (in_range2 o3)
  (= o3 (get
        (model__
        (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
        (get1
        (positions
        (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
        cu1)))))
  (= result2 (ite (= o3 0) true false)))
  (and (not (= result2 true))
  (and (= c__split_fields2 (mk___split_fields1 c__split_fields))
  (= c__split_fields2 c__split_fields1))))
  (and
  (and
  (= (length (mk___rep l__split_discrs l__split_fields2)) (length temp___489))
  (and
  (forall ((i1 Int))
  (=>
  (and (<= 1 i1)
  (<= i1 (- (get1 (positions (mk___rep l__split_discrs l__split_fields2))
            cu2) 1)))
  (and (< 0 (get (model__ temp___4902) i1))
  (= (get (model__ (mk___rep l__split_discrs l__split_fields2)) i1) (-
  (get (model__ temp___491) i1) 1)))))
  (and
  (forall ((i1 Int))
  (=>
  (and
  (<= (get1 (positions (mk___rep l__split_discrs l__split_fields2)) cu2) i1)
  (<= i1 (length (mk___rep l__split_discrs l__split_fields2))))
  (= (get (model__ (mk___rep l__split_discrs l__split_fields2)) i1) (get
                                                                    (model__
                                                                    temp___492)
                                                                    i1))))
  (not (= (element (mk___rep l__split_discrs l__split_fields2) cu2) 0)))))
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields2)) cu2) true)
  (and
  (and
  (and
  (and
  (and (= o4 (element (mk___rep l__split_discrs l__split_fields2) cu2))
  (and (in_range2 o4)
  (= o4 (get (model__ (mk___rep l__split_discrs l__split_fields2))
        (get1 (positions (mk___rep l__split_discrs l__split_fields2)) cu2)))))
  (= o5 (- o4 1))) (and (= o6 o5) (in_range2 o5)))
  (and
  (and
  (and
  (= (length (mk___rep l__split_discrs l__split_fields3)) (length
                                                          (mk___rep
                                                          l__split_discrs
                                                          l__split_fields2)))
  (= (oeq1 (positions (mk___rep l__split_discrs l__split_fields2))
     (positions (mk___rep l__split_discrs l__split_fields3))) true))
  (= (get (model__ (mk___rep l__split_discrs l__split_fields3))
     (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2))
  o6))
  (= (equal_except (model__ (mk___rep l__split_discrs l__split_fields2))
     (model__ (mk___rep l__split_discrs l__split_fields3))
     (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2)) true)))
  (and
  (and
  (and
  (and (= o7 (next (mk___rep l__split_discrs l__split_fields3) cu2))
  (ite (= (ite (= (bool_eq1 cu2 no_element) false) (= (get1
                                                      (positions
                                                      (mk___rep
                                                      l__split_discrs
                                                      l__split_fields3))
                                                      cu2) (length
                                                           (mk___rep
                                                           l__split_discrs
                                                           l__split_fields3))) true) true)
  (= (bool_eq1 o7 no_element) true)
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o7) true)
  (= (get1 (positions (mk___rep l__split_discrs l__split_fields3)) o7) (+
  (get1 (positions (mk___rep l__split_discrs l__split_fields3)) cu2) 1)))))
  (and
  (= o8 (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o7))
  (= (= o8 true)
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o7) true))))
  (= result4 (ite (not (= o8 true)) true false))) (= result4 true)))))))))))))
  (and
  (and (= cu6 (mk_cursor__ref cu2))
  (and (= c__split_fields7 (mk___split_fields__ref1 c__split_fields3))
  (= l__split_fields6 (mk___split_fields__ref l__split_fields3))))
  (and (= cu7 cu2)
  (and (= c__split_fields8 c__split_fields3)
  (= l__split_fields7 l__split_fields3)))))
  (and
  (and (= cu8 cu6)
  (and (= c__split_fields9 c__split_fields7)
  (= l__split_fields8 l__split_fields6)))
  (and (= cu9 cu7)
  (and (= c__split_fields10 c__split_fields8)
  (= l__split_fields9 l__split_fields7)))))
  (and
  (and (= cu8 (mk_cursor__ref cu1))
  (and (= c__split_fields9 c__split_fields16)
  (= l__split_fields8 l__split_fields14)))
  (and (= cu9 cu1)
  (and (= c__split_fields10 c__split_fields1)
  (= l__split_fields9 l__split_fields1)))))))
  (and
  (and
  (and (= cu10 cu8)
  (and (= c__split_fields12 (mk___split_fields__ref1 c__split_fields11))
  (= l__split_fields10 l__split_fields8)))
  (and (= cu11 cu9)
  (and (= c__split_fields13 c__split_fields11)
  (= l__split_fields11 l__split_fields9))))
  (and (= result8 c__split_fields9)
  (= c__split_fields11 (us_split_fields3 no_element)))))))

;; H
  (assert (= cu12 cu10))

;; H
  (assert (= c__split_fields14 c__split_fields12))

;; H
  (assert (= l__split_fields12 l__split_fields10))

;; H
  (assert (= cu13 cu11))

;; H
  (assert (= c__split_fields15 c__split_fields13))

;; H
  (assert (= l__split_fields13 l__split_fields11))

;; H
  (assert
  (and
  (= result10 (has_key
              (positions
              (mk___rep l__split_discrs
              (us_split_fields__content l__split_fields12)))
              (mk___rep1 (us_split_fields__content1 c__split_fields14))))
  (= (= result10 true)
  (= (has_key
     (positions
     (mk___rep l__split_discrs (us_split_fields__content l__split_fields12)))
     (mk___rep1 (us_split_fields__content1 c__split_fields14))) true))))

;; H
  (assert
  (=> (= result10 true)
  (and
  (= o20 (element
         (mk___rep l__split_discrs
         (us_split_fields__content l__split_fields12))
         (mk___rep1 (us_split_fields__content1 c__split_fields14))))
  (and (in_range2 o20)
  (= o20 (get
         (model__
         (mk___rep l__split_discrs
         (us_split_fields__content l__split_fields12)))
         (get1
         (positions
         (mk___rep l__split_discrs
         (us_split_fields__content l__split_fields12)))
         (mk___rep1 (us_split_fields__content1 c__split_fields14)))))))))

;; H
  (assert (=> (= result10 true) (= result9 (ite (= o20 0) true false))))

;; H
  (assert (=> (not (= result10 true)) (= result9 (of_int 1))))

;; H
  (assert (= result9 true))

;; H
  (assert
  (=>
  (= (bool_eq1 (mk___rep1 (us_split_fields__content1 c__split_fields14))
     no_element) true)
  (and
  (= o13 (length
         (mk___rep l__split_discrs
         (us_split_fields__content l__split_fields12))))
  (and (in_range1 o13)
  (<= o13 (to_rep
          (rec__for_loops_on_lists__my_lists__list__capacity l__split_discrs)))))))

;; H
  (assert
  (=>
  (not
  (= (bool_eq1 (mk___rep1 (us_split_fields__content1 c__split_fields14))
     no_element) true))
  (and
  (= o11 (positions
         (mk___rep l__split_discrs
         (us_split_fields__content l__split_fields12))))
  (and (not (= (has_key o11 no_element) true))
  (forall ((i1 us_rep1))
  (=> (= (has_key o11 i1) true)
  (and
  (and (<= 1 (get1 o11 i1))
  (<= (get1 o11 i1) (length
                    (mk___rep l__split_discrs
                    (us_split_fields__content l__split_fields12)))))
  (forall ((j us_rep1))
  (=> (= (has_key o11 j) true)
  (=> (= (get1 o11 i1) (get1 o11 j)) (= (bool_eq1 i1 j) true)))))))))))

;; H
  (assert
  (=>
  (not
  (= (bool_eq1 (mk___rep1 (us_split_fields__content1 c__split_fields14))
     no_element) true))
  (and
  (= o12 (get1 o11 (mk___rep1 (us_split_fields__content1 c__split_fields14))))
  (and (in_range5 o12)
  (=> (= (of_int 0) true)
  (and
  (= o12 (w_get o11
         (witness o11
         (mk___rep1 (us_split_fields__content1 c__split_fields14)))))
  (forall ((k us_rep1))
  (=> (= (has_key o11 k) true)
  (=
  (= (bool_eq1 k (mk___rep1 (us_split_fields__content1 c__split_fields14))) true)
  (= (witness o11 (mk___rep1 (us_split_fields__content1 c__split_fields14)))
  (witness o11 k)))))))))))

;; H
  (assert
  (=>
  (not
  (= (bool_eq1 (mk___rep1 (us_split_fields__content1 c__split_fields14))
     no_element) true))
  (= o13 (- o12 1))))

;; H
  (assert (= o14 (ite (<= i o13) true false)))

;; H
  (assert (= result11 (ite (<= 1 i) o14 false)))

;; H
  (assert (= result11 true))

;; H
  (assert
  (and
  (= o19 (get
         (model__
         (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
         i))
  (in_range4 o19)))

;; H
  (assert (= result12 (ite (< 0 o19) true false)))

;; H
  (assert (= result12 true))

;; H
  (assert
  (and
  (= o16 (model__
         (mk___rep l__split_discrs (mk___split_fields l__split_fields))))
  (= (length1 o16) (length
                   (mk___rep l__split_discrs
                   (mk___split_fields l__split_fields))))))

;; H
  (assert (and (= o17 (get o16 i)) (in_range4 o17)))

;; H
  (assert (= o18 (- o17 1)))

;; H
  (assert
  (and
  (= o15 (model__
         (mk___rep l__split_discrs
         (us_split_fields__content l__split_fields12))))
  (= (length1 o15) (length
                   (mk___rep l__split_discrs
                   (us_split_fields__content l__split_fields12))))))

(assert
;; WP_parameter_def
 ;; File "for_loops_on_lists.adb", line 16, characters 0-0
  (not (<= 1 i)))
(check-sat)
(exit)
