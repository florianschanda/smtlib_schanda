;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-fun to_int1 (RoundingMode Float64) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float64) Bool)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content Float64)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort ft 0)

(declare-fun user_eq (ft ft) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-const dummy ft)

(declare-datatypes ((ft__ref 0)) (((mk_ft__ref (ft__content ft)))))
(define-fun ft__ref_2__projection ((a ft__ref)) ft (ft__content a))

(define-fun dynamic_invariant ((temp___expr_167 Float64)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool (=>
                                      (or (= temp___is_init_164 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_167) (fp.isNaN temp___expr_167)))))

(declare-const x Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const y Float64)

(declare-const result Float64)

(declare-const y1 Float64)

(declare-const y2 Float64)

(declare-const y3 Float64)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite y) (fp.isNaN y)))))

;; H
  (assert
  (and
  (fp.leq (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))
  x)
  (fp.leq x (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert (= result y))

;; H
  (assert (= y1 (fp.roundToIntegral RTZ x)))

;; H
  (assert (= y1 y2))

;; H
  (assert (= y3 y1))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111111 #b1001100110011001100110011001100110011001100110011010))) true)
  (fp.eq y2 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111111 #b1000000000000000000000000000000000000000000000000000))) true)
  (fp.eq y2 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111111 #b0110011001100110011001100110011001100110011001100110))) true)
  (fp.eq y2 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) true)
  (fp.eq y2 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) true)
  (fp.eq y2 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) true)
  (fp.eq y2 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp #b0 #b01111111111 #b0110011001100110011001100110011001100110011001100110)) true)
  (fp.eq y2 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (= (fp.eq x (fp #b0 #b01111111111 #b1000000000000000000000000000000000000000000000000000)) true))

(assert
;; WP_parameter_def
 ;; File "generic_float_tests.ads", line 2, characters 0-0
  (not
  (fp.eq y2 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(check-sat)
(exit)
