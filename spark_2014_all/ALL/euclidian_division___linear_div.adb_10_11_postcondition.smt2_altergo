(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic dividend : int

logic attr__ATTRIBUTE_ADDRESS : int

logic divisor : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "linear_div.adb", line 7, characters 0-0 *)
goal WP_parameter_def :
  (forall quotient:int. forall remainder:int. forall temp___133:int.
  forall temp___132:int. forall o:int. forall o1:int. forall result:int.
  forall quotient1:int. forall result1:int. forall remainder1:int.
  forall quotient2:int. forall remainder2:int. forall result2:int.
  forall quotient3:int. forall result3:int. forall remainder3:int.
  forall quotient4:int. forall remainder4:int. forall quotient5:int.
  forall remainder5:int. forall quotient6:int. forall remainder6:int.
  forall quotient7:int. forall remainder7:int. forall quotient8:int.
  forall remainder8:int. forall quotient9:int. forall remainder9:int.
  ((in_range1(dividend) and (in_range1(divisor) and
  ((((-2147483648) <= 2147483647) -> in_range1(quotient)) and
  ((((-2147483648) <= 2147483647) -> in_range1(remainder)) and
  (((0 <  divisor) and (0 <= dividend)) and (((({ int__content = result } = {
  int__content = quotient }) and (quotient1 = 0)) and ((({ int__content =
  result1 } = { int__content = remainder }) and (remainder1 = dividend)) and
  (((divisor <= remainder1) and ((((temp___133 = remainder1) and
  ((temp___132 = quotient1) and ((((0 <= remainder2) and
  (0 <= quotient2)) and
  (((divisor * quotient2) + remainder2) = dividend)) and
  ((((((-2147483648) <= 2147483647) -> in_range1(quotient2)) and
  (((-2147483648) <= 2147483647) -> in_range1(remainder2))) and
  (divisor <= remainder2)) and ((((o = (quotient2 + 1)) and
  in_range1((quotient2 + 1))) and ((quotient2 = result2) and
  (quotient3 = o))) and ((((o1 = (remainder2 - divisor)) and
  in_range1((remainder2 - divisor))) and ((remainder2 = result3) and
  (remainder3 = o1))) and (not (divisor <= remainder3)))))))) and
  (((remainder3 = remainder4) and (quotient3 = quotient4)) and
  ((remainder5 = remainder3) and (quotient5 = quotient3)))) and ((({
  int__content = remainder6 } = { int__content = remainder4 }) and ({
  int__content = quotient6 } = { int__content = quotient4 })) and
  ((remainder7 = remainder5) and (quotient7 = quotient5))))) or
  ((not (divisor <= remainder1)) and (((remainder1 = remainder6) and
  (quotient1 = quotient6)) and ((remainder7 = remainder1) and
  (quotient7 = quotient1))))))) and (((remainder8 = remainder6) and
  (quotient8 = quotient6)) and ((remainder9 = remainder7) and
  (quotient9 = quotient7))))))))) -> (0 <= quotient8)))
