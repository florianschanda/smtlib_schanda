(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)]. (bool_eq(a, b) = true))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__size({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__alignment({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_private

logic dummy1 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic attr__ATTRIBUTE_ADDRESS : int

logic get : us_rep, bool -> bool

logic get__function_guard : bool, us_rep, bool -> prop

logic get1 : int, us_rep, bool -> bool

logic get__function_guard1 : bool, int, us_rep, bool -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields2 = { rec__extension_pkg__ext__flag : bool; rec__ext__1 :
us_private
}

function us_split_fields_Flag__projection(a: us_split_fields2) : bool =
  (a).rec__extension_pkg__ext__flag

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : bool, us_private -> us_private

logic extract__flag : us_private -> bool

axiom extract__flag__conv :
  (forall flag:bool.
  (forall rec__ext__2:us_private. (to_int(extract__flag(hide_ext__(flag,
  rec__ext__2))) = to_int(flag))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__extension_pkg__ext__flag,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__extension_pkg__ext__flag =
  extract__flag(((r).us_split_fields1).rec__ext__); rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq2 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq2(a, b)].
  (((((a).us_split_fields3).rec__extension_pkg__ext__flag = ((b).us_split_fields3).rec__extension_pkg__ext__flag) ->
  (bool_eq2(a, b) = true)) and
  ((not (((a).us_split_fields3).rec__extension_pkg__ext__flag = ((b).us_split_fields3).rec__extension_pkg__ext__flag)) ->
  (bool_eq2(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:us_private. forall a2:int. (0 <= object__size1({
  us_split_fields3 = { rec__extension_pkg__ext__flag = a; rec__ext__1 = a1 };
  attr__tag1 = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:us_private. forall a2:int.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__extension_pkg__ext__flag = a; rec__ext__1 = a1 }; attr__tag1 = a2 })))

logic extension_pkg__ext__flag__first__bit : int

logic extension_pkg__ext__flag__last__bit : int

logic extension_pkg__ext__flag__position : int

axiom extension_pkg__ext__flag__first__bit_axiom :
  (0 <= extension_pkg__ext__flag__first__bit)

axiom extension_pkg__ext__flag__last__bit_axiom :
  (extension_pkg__ext__flag__first__bit <  extension_pkg__ext__flag__last__bit)

axiom extension_pkg__ext__flag__position_axiom :
  (0 <= extension_pkg__ext__flag__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy2 : bool

logic dummy3 : us_private

logic dummy4 : int

type ext__ref = { ext__content : us_rep1
}

function ext__ref___projection(a: ext__ref) : us_rep1 = (a).ext__content

logic get2 : us_rep1, bool -> bool

logic get__function_guard2 : bool, us_rep1, bool -> prop

logic get3 : int, us_rep1, bool -> bool

logic get__function_guard3 : bool, int, us_rep1, bool -> prop

axiom get__post_axiom : true

axiom get__post__dispatch_axiom : true

axiom root_pkg__root__compat_axiom :
  (forall x:us_private. forall x1:int.
  (forall extension_pkg__body_elaborated:bool [get1(us_tag, {
  us_split_fields1 = { rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)]. (to_int(get({ us_split_fields1 = {
  rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)) = to_int(get1(us_tag, { us_split_fields1 =
  { rec__ext__ = x }; attr__tag = x1 }, extension_pkg__body_elaborated)))))

axiom extension_pkg__ext__compat_axiom :
  (forall x:us_private. forall x1:int.
  (forall extension_pkg__body_elaborated:bool [get1(us_tag1, {
  us_split_fields1 = { rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)]. (to_int(get2(of_base({ us_split_fields1 =
  { rec__ext__ = x }; attr__tag = x1 }),
  extension_pkg__body_elaborated)) = to_int(get1(us_tag1, {
  us_split_fields1 = { rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)))))

axiom get__def_axiom :
  (forall x:us_private. forall x1:int.
  (forall extension_pkg__body_elaborated:bool [get({ us_split_fields1 = {
  rec__ext__ = x }; attr__tag = x1 }, extension_pkg__body_elaborated)].
  (get({ us_split_fields1 = { rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated) = true)))

logic op : us_rep, bool -> bool

logic op__function_guard : bool, us_rep, bool -> prop

logic op1 : int, us_rep, bool -> bool

logic op__function_guard1 : bool, int, us_rep, bool -> prop

logic op2 : us_rep1, bool -> bool

logic op__function_guard2 : bool, us_rep1, bool -> prop

logic op3 : int, us_rep1, bool -> bool

logic op__function_guard3 : bool, int, us_rep1, bool -> prop

axiom op__post_axiom : true

axiom op__post__dispatch_axiom : true

axiom root_pkg__root__compat_axiom1 :
  (forall x:us_private. forall x1:int.
  (forall extension_pkg__body_elaborated:bool [op1(us_tag, {
  us_split_fields1 = { rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)]. (to_int(op({ us_split_fields1 = {
  rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)) = to_int(op1(us_tag, { us_split_fields1 =
  { rec__ext__ = x }; attr__tag = x1 }, extension_pkg__body_elaborated)))))

axiom extension_pkg__ext__compat_axiom1 :
  (forall x:us_private. forall x1:int.
  (forall extension_pkg__body_elaborated:bool [op1(us_tag1, {
  us_split_fields1 = { rec__ext__ = x }; attr__tag = x1 },
  extension_pkg__body_elaborated)]. (to_int(op2(of_base({ us_split_fields1 =
  { rec__ext__ = x }; attr__tag = x1 }),
  extension_pkg__body_elaborated)) = to_int(op1(us_tag1, { us_split_fields1 =
  { rec__ext__ = x }; attr__tag = x1 }, extension_pkg__body_elaborated)))))

logic y : us_private

logic y1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom get__post_axiom1 : true

axiom get__post__dispatch_axiom1 : true

axiom extension_pkg__ext__compat_axiom2 :
  (forall x:bool. forall x1:us_private. forall x2:int.
  (forall extension_pkg__body_elaborated:bool [get3(us_tag1, {
  us_split_fields3 = { rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 };
  attr__tag1 = x2 }, extension_pkg__body_elaborated)]. (to_int(get2({
  us_split_fields3 = { rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 };
  attr__tag1 = x2 }, extension_pkg__body_elaborated)) = to_int(get3(us_tag1,
  { us_split_fields3 = { rec__extension_pkg__ext__flag = x; rec__ext__1 = x1
  }; attr__tag1 = x2 }, extension_pkg__body_elaborated)))))

axiom get__def_axiom1 :
  (forall x:bool. forall x1:us_private. forall x2:int.
  (forall extension_pkg__body_elaborated:bool [get2({ us_split_fields3 = {
  rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 }; attr__tag1 = x2 },
  extension_pkg__body_elaborated)]. ((get2({ us_split_fields3 = {
  rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 }; attr__tag1 = x2 },
  extension_pkg__body_elaborated) = true) <->
  (extension_pkg__body_elaborated = true))))

axiom op__post_axiom1 : true

axiom op__post__dispatch_axiom1 : true

axiom extension_pkg__ext__compat_axiom3 :
  (forall x:bool. forall x1:us_private. forall x2:int.
  (forall extension_pkg__body_elaborated:bool [op3(us_tag1, {
  us_split_fields3 = { rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 };
  attr__tag1 = x2 }, extension_pkg__body_elaborated)]. (to_int(op2({
  us_split_fields3 = { rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 };
  attr__tag1 = x2 }, extension_pkg__body_elaborated)) = to_int(op3(us_tag1, {
  us_split_fields3 = { rec__extension_pkg__ext__flag = x; rec__ext__1 = x1 };
  attr__tag1 = x2 }, extension_pkg__body_elaborated)))))

 (* File "root_pkg.ads", line 9, characters 0-0 *)
goal WP_parameter_def :
  (forall body_elaborated:bool. ((get1(y1, { us_split_fields1 = {
  rec__ext__ = y }; attr__tag = y1 }, body_elaborated) = true) -> (get1(y1, {
  us_split_fields1 = { rec__ext__ = y }; attr__tag = y1 },
  body_elaborated) = true)))
