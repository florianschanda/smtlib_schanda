;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_range 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index_range index_range) Bool)

(declare-const dummy1 index_range)

(declare-datatypes ()
((index_range__ref (mk_index_range__ref (index_range__content index_range)))))
(define-fun index_range__ref___projection ((a index_range__ref)) index_range
  (index_range__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort pointer_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (pointer_range pointer_range) Bool)

(declare-const dummy2 pointer_range)

(declare-datatypes ()
((pointer_range__ref
 (mk_pointer_range__ref (pointer_range__content pointer_range)))))
(define-fun pointer_range__ref___projection ((a pointer_range__ref)) pointer_range
  (pointer_range__content a))

(declare-fun to_rep1 (pointer_range) Int)

(declare-fun of_rep1 (Int) pointer_range)

;; inversion_axiom
  (assert
  (forall ((x pointer_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x pointer_range)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const dummy3 (Array Int integer))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__stack_functional_spec__stack_type__s (Array Int integer))(rec__stack_functional_spec__stack_type__pointer pointer_range)))))
(define-fun us_split_fields_S__projection ((a us_split_fields)) (Array Int integer)
  (rec__stack_functional_spec__stack_type__s a))

(define-fun us_split_fields_Pointer__projection ((a us_split_fields)) pointer_range
  (rec__stack_functional_spec__stack_type__pointer a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__stack_functional_spec__stack_type__s
                           (us_split_fields1 a)) 1 100
                           (rec__stack_functional_spec__stack_type__s
                           (us_split_fields1 b)) 1 100) true)
                        (= (to_rep1
                           (rec__stack_functional_spec__stack_type__pointer
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__stack_functional_spec__stack_type__pointer
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const stack_functional_spec__stack_type__s__first__bit Int)

(declare-const stack_functional_spec__stack_type__s__last__bit Int)

(declare-const stack_functional_spec__stack_type__s__position Int)

;; stack_functional_spec__stack_type__s__first__bit_axiom
  (assert (<= 0 stack_functional_spec__stack_type__s__first__bit))

;; stack_functional_spec__stack_type__s__last__bit_axiom
  (assert
  (< stack_functional_spec__stack_type__s__first__bit stack_functional_spec__stack_type__s__last__bit))

;; stack_functional_spec__stack_type__s__position_axiom
  (assert (<= 0 stack_functional_spec__stack_type__s__position))

(declare-const stack_functional_spec__stack_type__pointer__first__bit Int)

(declare-const stack_functional_spec__stack_type__pointer__last__bit Int)

(declare-const stack_functional_spec__stack_type__pointer__position Int)

;; stack_functional_spec__stack_type__pointer__first__bit_axiom
  (assert (<= 0 stack_functional_spec__stack_type__pointer__first__bit))

;; stack_functional_spec__stack_type__pointer__last__bit_axiom
  (assert
  (< stack_functional_spec__stack_type__pointer__first__bit stack_functional_spec__stack_type__pointer__last__bit))

;; stack_functional_spec__stack_type__pointer__position_axiom
  (assert (<= 0 stack_functional_spec__stack_type__pointer__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((stack_type__ref (mk_stack_type__ref (stack_type__content us_rep)))))
(define-fun stack_type__ref___projection ((a stack_type__ref)) us_rep
  (stack_type__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun state__2 (us_split_fields) us_rep)

(declare-fun state__2__function_guard (us_rep us_split_fields) Bool)

;; state__2__post_axiom
  (assert true)

;; state__2__def_axiom
  (assert
  (forall ((stack_functional_spec__my_stack__fields us_split_fields))
  (! (= (state__2 stack_functional_spec__my_stack__fields) (mk___rep
                                                           stack_functional_spec__my_stack__fields)) :pattern (
  (state__2 stack_functional_spec__my_stack__fields)) )))

(declare-fun max_stack_size (tuple0) Int)

(declare-fun max_stack_size__function_guard (Int tuple0) Bool)

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (natural natural) Bool)

(declare-const dummy5 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

;; max_stack_size__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant1
  (max_stack_size us_void_param) true false
  true) :pattern ((max_stack_size us_void_param)) )))

;; max_stack_size__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (max_stack_size us_void_param) 100) :pattern ((max_stack_size
                                                      us_void_param)) )))

(declare-fun count (us_rep) Int)

(declare-fun count__function_guard (Int us_rep) Bool)

;; count__post_axiom
  (assert
  (forall ((s us_rep)) (! (dynamic_invariant1 (count s) true false
  true) :pattern ((count s)) )))

;; count__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (count s) (to_rep1
                  (rec__stack_functional_spec__stack_type__pointer
                  (us_split_fields1 s)))) :pattern ((count s)) )))

(declare-fun stack_entry (us_rep Int) Int)

(declare-fun stack_entry__function_guard (Int us_rep Int) Bool)

;; stack_entry__post_axiom
  (assert
  (forall ((s us_rep))
  (forall ((n Int))
  (! (=>
     (and (dynamic_invariant1 n true true true)
     (and (<= 1 n) (<= n (count s)))) (dynamic_invariant (stack_entry s n)
     true false true)) :pattern ((stack_entry s n)) ))))

;; stack_entry__def_axiom
  (assert
  (forall ((s us_rep))
  (forall ((n Int))
  (! (=> (dynamic_invariant1 n true true true)
     (= (stack_entry s n) (to_rep
                          (let ((temp___178 (rec__stack_functional_spec__stack_type__s
                                            (us_split_fields1 s))))
                          (select temp___178 n))))) :pattern ((stack_entry s
                                                              n)) ))))

(declare-fun is_full (us_split_fields) Bool)

(declare-fun is_full__function_guard (Bool us_split_fields) Bool)

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((stack_functional_spec__my_stack__fields us_split_fields))
  (! (= (= (is_full stack_functional_spec__my_stack__fields) true)
     (= (count (state__2 stack_functional_spec__my_stack__fields)) (max_stack_size
                                                                   Tuple0))) :pattern (
  (is_full stack_functional_spec__my_stack__fields)) )))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_155 Int)
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (or (= temp___is_init_152 true)
                                      (<= 0 100)) (in_range3
                                      temp___expr_155)))

(define-fun dynamic_invariant3 ((temp___expr_140 Int)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_140)))

(declare-const my_stack__split_fields (Array Int integer))

(declare-const my_stack__split_fields1 pointer_range)

(declare-const o Int)

(declare-const o1 pointer_range)

(declare-const o2 (Array Int integer))

(declare-const o3 pointer_range)

(declare-const temp___201 (Array Int integer))

(declare-const temp___2011 pointer_range)

(declare-const o4 integer)

(declare-const o5 Int)

(declare-const o6 (Array Int integer))

(declare-const o7 (Array Int integer))

(declare-const o8 pointer_range)

(declare-const temp___205 (Array Int integer))

(declare-const temp___2051 pointer_range)

(declare-const result (Array Int integer))

(declare-const result1 pointer_range)

(declare-const my_stack__split_fields2 (Array Int integer))

(declare-const my_stack__split_fields3 pointer_range)

(declare-const result2 (Array Int integer))

(declare-const result3 pointer_range)

(declare-const my_stack__split_fields4 us_split_fields)

(declare-const my_stack__split_fields5 us_split_fields__ref)

(declare-const my_stack__split_fields6 us_split_fields)

;; H
  (assert (in_range1 x))

;; H
  (assert
  (not
  (= (is_full
     (mk___split_fields my_stack__split_fields my_stack__split_fields1)) true)))

;; H
  (assert
  (and (= o (+ (to_rep1 my_stack__split_fields1) 1)) (in_range3
  (+ (to_rep1 my_stack__split_fields1) 1))))

;; H
  (assert (= (to_rep1 o1) o))

;; H
  (assert (= my_stack__split_fields o2))

;; H
  (assert (= o1 o3))

;; H
  (assert (= temp___201 o2))

;; H
  (assert (= temp___2011 o3))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result result1)) (mk___split_fields__ref
                                                                 (mk___split_fields
                                                                 my_stack__split_fields
                                                                 my_stack__split_fields1))))

;; H
  (assert (= temp___201 my_stack__split_fields2))

;; H
  (assert (= temp___2011 my_stack__split_fields3))

;; H
  (assert (= (to_rep o4) x))

;; H
  (assert
  (and (<= 1 (to_rep1 my_stack__split_fields3))
  (<= (to_rep1 my_stack__split_fields3) 100)))

;; H
  (assert (= o5 (to_rep1 my_stack__split_fields3)))

;; H
  (assert (= o6 (store my_stack__split_fields2 o5 o4)))

;; H
  (assert (= o6 o7))

;; H
  (assert (= my_stack__split_fields3 o8))

;; H
  (assert (= temp___205 o7))

;; H
  (assert (= temp___2051 o8))

;; H
  (assert (= result2 my_stack__split_fields2))

;; H
  (assert (= result3 my_stack__split_fields3))

;; H
  (assert
  (= my_stack__split_fields4 (mk___split_fields temp___205 temp___2051)))

;; H
  (assert
  (= my_stack__split_fields5 (mk___split_fields__ref my_stack__split_fields4)))

;; H
  (assert (= my_stack__split_fields6 my_stack__split_fields4))

(assert
;; WP_parameter_def
 ;; File "stack_functional_spec.ads", line 43, characters 0-0
  (not
  (= (count (state__2 (us_split_fields__content my_stack__split_fields5))) (+
  (count
  (state__2
  (mk___split_fields my_stack__split_fields my_stack__split_fields1))) 1))))
(check-sat)
(exit)
