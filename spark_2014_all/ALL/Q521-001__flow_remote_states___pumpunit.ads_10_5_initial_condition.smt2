;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-sort nat_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (nat_type nat_type) Bool)

(declare-const dummy1 nat_type)

(declare-datatypes ()
((nat_type__ref (mk_nat_type__ref (nat_type__content nat_type)))))
(define-fun nat_type__ref___projection ((a nat_type__ref)) nat_type (nat_type__content
                                                                    a))

(declare-fun to_rep (nat_type) Int)

(declare-fun of_rep (Int) nat_type)

;; inversion_axiom
  (assert
  (forall ((x nat_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x nat_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy3 (Array Int character))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__pump__pump_record__name (Array Int character))(rec__pump__pump_record__resevoir nat_type)(rec__pump__pump_record__price nat_type)(rec__pump__pump_record__remaining nat_type)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__pump__pump_record__name a))

(define-fun us_split_fields_Resevoir__projection ((a us_split_fields)) nat_type
  (rec__pump__pump_record__resevoir a))

(define-fun us_split_fields_Price__projection ((a us_split_fields)) nat_type
  (rec__pump__pump_record__price a))

(define-fun us_split_fields_Remaining__projection ((a us_split_fields)) nat_type
  (rec__pump__pump_record__remaining a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (bool_eq
                           (rec__pump__pump_record__name
                           (us_split_fields1 a)) 1 10
                           (rec__pump__pump_record__name
                           (us_split_fields1 b)) 1 10) true)
                        (= (to_rep
                           (rec__pump__pump_record__resevoir
                           (us_split_fields1 a))) (to_rep
                                                  (rec__pump__pump_record__resevoir
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__pump__pump_record__price
                           (us_split_fields1 a))) (to_rep
                                                  (rec__pump__pump_record__price
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__pump__pump_record__remaining
                           (us_split_fields1 a))) (to_rep
                                                  (rec__pump__pump_record__remaining
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const pump__pump_record__name__first__bit Int)

(declare-const pump__pump_record__name__last__bit Int)

(declare-const pump__pump_record__name__position Int)

;; pump__pump_record__name__first__bit_axiom
  (assert (<= 0 pump__pump_record__name__first__bit))

;; pump__pump_record__name__last__bit_axiom
  (assert
  (< pump__pump_record__name__first__bit pump__pump_record__name__last__bit))

;; pump__pump_record__name__position_axiom
  (assert (<= 0 pump__pump_record__name__position))

(declare-const pump__pump_record__resevoir__first__bit Int)

(declare-const pump__pump_record__resevoir__last__bit Int)

(declare-const pump__pump_record__resevoir__position Int)

;; pump__pump_record__resevoir__first__bit_axiom
  (assert (<= 0 pump__pump_record__resevoir__first__bit))

;; pump__pump_record__resevoir__last__bit_axiom
  (assert
  (< pump__pump_record__resevoir__first__bit pump__pump_record__resevoir__last__bit))

;; pump__pump_record__resevoir__position_axiom
  (assert (<= 0 pump__pump_record__resevoir__position))

(declare-const pump__pump_record__price__first__bit Int)

(declare-const pump__pump_record__price__last__bit Int)

(declare-const pump__pump_record__price__position Int)

;; pump__pump_record__price__first__bit_axiom
  (assert (<= 0 pump__pump_record__price__first__bit))

;; pump__pump_record__price__last__bit_axiom
  (assert
  (< pump__pump_record__price__first__bit pump__pump_record__price__last__bit))

;; pump__pump_record__price__position_axiom
  (assert (<= 0 pump__pump_record__price__position))

(declare-const pump__pump_record__remaining__first__bit Int)

(declare-const pump__pump_record__remaining__last__bit Int)

(declare-const pump__pump_record__remaining__position Int)

;; pump__pump_record__remaining__first__bit_axiom
  (assert (<= 0 pump__pump_record__remaining__first__bit))

;; pump__pump_record__remaining__last__bit_axiom
  (assert
  (< pump__pump_record__remaining__first__bit pump__pump_record__remaining__last__bit))

;; pump__pump_record__remaining__position_axiom
  (assert (<= 0 pump__pump_record__remaining__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((pump_record__ref (mk_pump_record__ref (pump_record__content us_rep)))))
(define-fun pump_record__ref___projection ((a pump_record__ref)) us_rep
  (pump_record__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun is_base (Int) Bool)

(declare-fun is_base__function_guard (Bool Int) Bool)

(declare-sort internal_state 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (internal_state internal_state) Bool)

(declare-const dummy5 internal_state)

(declare-datatypes ()
((internal_state__ref
 (mk_internal_state__ref (internal_state__content internal_state)))))
(define-fun internal_state__ref___projection ((a internal_state__ref)) internal_state
  (internal_state__content a))

(define-fun dynamic_invariant1 ((temp___expr_563 Int)
  (temp___is_init_560 Bool) (temp___skip_constant_561 Bool)
  (temp___do_toplevel_562 Bool)) Bool (=>
                                      (or (= temp___is_init_560 true)
                                      (<= 0 3)) (in_range3 temp___expr_563)))

;; is_base__post_axiom
  (assert true)

;; is_base__def_axiom
  (assert
  (forall ((pumpunit__cur_state Int))
  (! (= (= (is_base pumpunit__cur_state) true) (= pumpunit__cur_state 3)) :pattern (
  (is_base pumpunit__cur_state)) )))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_516 Int)
  (temp___is_init_513 Bool) (temp___skip_constant_514 Bool)
  (temp___do_toplevel_515 Bool)) Bool (=>
                                      (or (= temp___is_init_513 true)
                                      (<= 0 1000)) (in_range1
                                      temp___expr_516)))

(declare-const cur_state Int)

(declare-const total_pay Int)

(declare-const outstanding Int)

(declare-const invariant_value Int)

(declare-const result Int)

(declare-const cur_state1 Int)

(declare-const result1 Bool)

;; H
  (assert (= result cur_state))

;; H
  (assert (= cur_state1 3))

;; H
  (assert (in_range3 cur_state1))

;; H
  (assert (=> (<= 0 2147483647) (in_range total_pay)))

;; H
  (assert (=> (<= 0 2147483647) (in_range outstanding)))

;; H
  (assert (=> (<= 0 2147483647) (in_range invariant_value)))

;; H
  (assert
  (and (= result1 (is_base cur_state1))
  (= (= result1 true) (= cur_state1 3))))

(assert
;; WP_parameter_def
 ;; File "pumpunit.adb", line 54, characters 0-0
  (not (= (is_base cur_state1) true)))
(check-sat)
(exit)
