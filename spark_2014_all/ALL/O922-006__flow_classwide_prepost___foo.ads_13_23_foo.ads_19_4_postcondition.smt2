;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__foo__point__x integer)(rec__foo__point__y integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__foo__point__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer
  (rec__foo__point__y a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__foo__point__x (us_split_fields1 a)))
                        (to_rep (rec__foo__point__x (us_split_fields1 b))))
                        (= (to_rep (rec__foo__point__y (us_split_fields1 a)))
                        (to_rep (rec__foo__point__y (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const foo__point__x__first__bit Int)

(declare-const foo__point__x__last__bit Int)

(declare-const foo__point__x__position Int)

;; foo__point__x__first__bit_axiom
  (assert (<= 0 foo__point__x__first__bit))

;; foo__point__x__last__bit_axiom
  (assert (< foo__point__x__first__bit foo__point__x__last__bit))

;; foo__point__x__position_axiom
  (assert (<= 0 foo__point__x__position))

(declare-const foo__point__y__first__bit Int)

(declare-const foo__point__y__last__bit Int)

(declare-const foo__point__y__position Int)

;; foo__point__y__first__bit_axiom
  (assert (<= 0 foo__point__y__first__bit))

;; foo__point__y__last__bit_axiom
  (assert (< foo__point__y__first__bit foo__point__y__last__bit))

;; foo__point__y__position_axiom
  (assert (<= 0 foo__point__y__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((point__ref (mk_point__ref (point__content us_rep)))))
(define-fun point__ref___projection ((a point__ref)) us_rep (point__content
                                                            a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__foo__blinking_point__annoyance_level positive)(rec__foo__point__x1 integer)(rec__foo__point__y1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_Annoyance_Level__projection ((a us_split_fields2)) positive
  (rec__foo__blinking_point__annoyance_level a))

(define-fun us_split_fields_X__2__projection ((a us_split_fields2)) integer
  (rec__foo__point__x1 a))

(define-fun us_split_fields_Y__2__projection ((a us_split_fields2)) integer
  (rec__foo__point__y1 a))

(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (positive us_private) us_private)

(declare-fun extract__annoyance_level (us_private) positive)

;; extract__annoyance_level__conv
  (assert
  (forall ((annoyance_level positive))
  (forall ((rec__ext__2 us_private))
  (= (extract__annoyance_level (hide_ext__ annoyance_level rec__ext__2)) annoyance_level))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep
                                         (mk___split_fields
                                         (rec__foo__point__x1
                                         (us_split_fields3 a))
                                         (rec__foo__point__y1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__foo__blinking_point__annoyance_level
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1
                                         (mk___split_fields1
                                         (extract__annoyance_level
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__foo__point__x
                                         (us_split_fields1 r))
                                         (rec__foo__point__y
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__foo__blinking_point__annoyance_level
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__foo__blinking_point__annoyance_level
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__foo__point__x1 (us_split_fields3 a)))
                         (to_rep (rec__foo__point__x1 (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__foo__point__y1 (us_split_fields3 a)))
                         (to_rep (rec__foo__point__y1 (us_split_fields3 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const foo__blinking_point__annoyance_level__first__bit Int)

(declare-const foo__blinking_point__annoyance_level__last__bit Int)

(declare-const foo__blinking_point__annoyance_level__position Int)

;; foo__blinking_point__annoyance_level__first__bit_axiom
  (assert (<= 0 foo__blinking_point__annoyance_level__first__bit))

;; foo__blinking_point__annoyance_level__last__bit_axiom
  (assert
  (< foo__blinking_point__annoyance_level__first__bit foo__blinking_point__annoyance_level__last__bit))

;; foo__blinking_point__annoyance_level__position_axiom
  (assert (<= 0 foo__blinking_point__annoyance_level__position))

(declare-const foo__point__x__first__bit1 Int)

(declare-const foo__point__x__last__bit1 Int)

(declare-const foo__point__x__position1 Int)

;; foo__point__x__first__bit_axiom
  (assert (<= 0 foo__point__x__first__bit1))

;; foo__point__x__last__bit_axiom
  (assert (< foo__point__x__first__bit1 foo__point__x__last__bit1))

;; foo__point__x__position_axiom
  (assert (<= 0 foo__point__x__position1))

(declare-const foo__point__y__first__bit1 Int)

(declare-const foo__point__y__last__bit1 Int)

(declare-const foo__point__y__position1 Int)

;; foo__point__y__first__bit_axiom
  (assert (<= 0 foo__point__y__first__bit1))

;; foo__point__y__last__bit_axiom
  (assert (< foo__point__y__first__bit1 foo__point__y__last__bit1))

;; foo__point__y__position_axiom
  (assert (<= 0 foo__point__y__position1))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((blinking_point__ref
 (mk_blinking_point__ref (blinking_point__content us_rep1)))))
(define-fun blinking_point__ref___projection ((a blinking_point__ref)) us_rep1
  (blinking_point__content a))

(define-fun default_initial_assumption ((temp___expr_150 us_rep1)
  (temp___skip_top_level_151 Bool)) Bool (= (attr__tag1 temp___expr_150)
  us_tag1))

(declare-const p__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun default_initial_assumption1 ((temp___expr_136 us_rep)
  (temp___skip_top_level_137 Bool)) Bool (= (attr__tag temp___expr_136)
  us_tag))

(declare-const limit Int)

(declare-const p__split_fields positive)

(declare-const p__split_fields1 integer)

(declare-const p__split_fields2 integer)

(declare-const p__split_fields3 us_private)

(declare-const o integer)

(declare-const o1 positive)

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const o4 us_private)

(declare-const temp___163 positive)

(declare-const temp___1631 integer)

(declare-const temp___1632 integer)

(declare-const temp___1633 us_private)

(declare-const temp___1634 Int)

(declare-const o5 positive)

(declare-const o6 positive)

(declare-const o7 integer)

(declare-const o8 integer)

(declare-const o9 us_private)

(declare-const temp___165 positive)

(declare-const temp___1651 integer)

(declare-const temp___1652 integer)

(declare-const temp___1653 us_private)

(declare-const temp___1654 Int)

(declare-const result positive)

(declare-const result1 integer)

(declare-const result2 integer)

(declare-const result3 us_private)

(declare-const p__split_fields4 positive)

(declare-const p__split_fields5 integer)

(declare-const p__split_fields6 integer)

(declare-const p__split_fields7 us_private)

(declare-const result4 positive)

(declare-const result5 integer)

(declare-const result6 integer)

(declare-const result7 us_private)

(declare-const p__split_fields8 positive)

(declare-const p__split_fields9 integer)

(declare-const p__split_fields10 integer)

(declare-const p__split_fields11 us_private)

(declare-const p__split_fields12 positive)

(declare-const p__split_fields13 integer)

(declare-const p__split_fields14 integer)

(declare-const p__split_fields15 us_private)

(declare-const p__split_fields16 positive)

(declare-const p__split_fields17 integer)

(declare-const p__split_fields18 integer)

(declare-const p__split_fields19 us_private)

;; H
  (assert (in_range1 limit))

;; H
  (assert (<= (to_rep p__split_fields1) limit))

;; H
  (assert
  (or (<= (to_rep p__split_fields1) limit)
  (<= (to_rep p__split_fields2) limit)))

;; H
  (assert (= (to_rep o) (to_rep p__split_fields2)))

;; H
  (assert (= p__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= p__split_fields2 o3))

;; H
  (assert (= p__split_fields3 o4))

;; H
  (assert (= temp___163 o1))

;; H
  (assert (= temp___1631 o2))

;; H
  (assert (= temp___1632 o3))

;; H
  (assert (= temp___1633 o4))

;; H
  (assert (= p__attr__tag temp___1634))

;; H
  (assert (= result p__split_fields))

;; H
  (assert (= result1 p__split_fields1))

;; H
  (assert (= result2 p__split_fields2))

;; H
  (assert (= result3 p__split_fields3))

;; H
  (assert (= temp___163 p__split_fields4))

;; H
  (assert (= temp___1631 p__split_fields5))

;; H
  (assert (= temp___1632 p__split_fields6))

;; H
  (assert (= temp___1633 p__split_fields7))

;; H
  (assert (= (to_rep1 o5) 9001))

;; H
  (assert (= o5 o6))

;; H
  (assert (= p__split_fields5 o7))

;; H
  (assert (= p__split_fields6 o8))

;; H
  (assert (= p__split_fields7 o9))

;; H
  (assert (= temp___165 o6))

;; H
  (assert (= temp___1651 o7))

;; H
  (assert (= temp___1652 o8))

;; H
  (assert (= temp___1653 o9))

;; H
  (assert (= p__attr__tag temp___1654))

;; H
  (assert (= result4 p__split_fields4))

;; H
  (assert (= result5 p__split_fields5))

;; H
  (assert (= result6 p__split_fields6))

;; H
  (assert (= result7 p__split_fields7))

;; H
  (assert (= temp___165 p__split_fields8))

;; H
  (assert (= temp___1651 p__split_fields9))

;; H
  (assert (= temp___1652 p__split_fields10))

;; H
  (assert (= temp___1653 p__split_fields11))

;; H
  (assert (= p__split_fields12 p__split_fields8))

;; H
  (assert (= p__split_fields13 p__split_fields9))

;; H
  (assert (= p__split_fields14 p__split_fields10))

;; H
  (assert (= p__split_fields15 p__split_fields11))

;; H
  (assert
  (= (mk___split_fields1 p__split_fields16 p__split_fields17
     p__split_fields18 p__split_fields19) (mk___split_fields1
                                          p__split_fields8 p__split_fields9
                                          p__split_fields10
                                          p__split_fields11)))

(assert
;; WP_parameter_def
 ;; File "foo.ads", line 10, characters 0-0
  (not (= (to_rep p__split_fields13) (to_rep p__split_fields14))))
(check-sat)
(exit)
