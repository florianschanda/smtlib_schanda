(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom :
  (forall c:int [is_digit(c)]. (in_range3(c) -> (((c = 48) ->
  (is_digit(c) = true)) and ((not (c = 48)) -> (((c = 49) ->
  (is_digit(c) = true)) and ((not (c = 49)) -> (((c = 50) ->
  (is_digit(c) = true)) and ((not (c = 50)) -> (((c = 51) ->
  (is_digit(c) = true)) and ((not (c = 51)) -> (((c = 52) ->
  (is_digit(c) = true)) and ((not (c = 52)) -> (((c = 53) ->
  (is_digit(c) = true)) and ((not (c = 53)) -> (((c = 54) ->
  (is_digit(c) = true)) and ((not (c = 54)) -> (((c = 55) ->
  (is_digit(c) = true)) and ((not (c = 55)) -> (((c = 56) ->
  (is_digit(c) = true)) and ((not (c = 56)) -> (((c = 57) ->
  (is_digit(c) = true)) and ((not (c = 57)) -> (((57 <  c) ->
  (not (is_digit(c) = true))) and ((not (57 <  c)) -> ((c <  48) ->
  (not (is_digit(c) = true)))))))))))))))))))))))))))

logic convert_character_digit_to_integer : int -> int

logic convert_character_digit_to_integer__function_guard : int, int -> prop

axiom convert_character_digit_to_integer__post_axiom :
  (forall source:int [convert_character_digit_to_integer(source)].
  ((in_range3(source) and (is_digit(source) = true)) ->
  ((((0 <= convert_character_digit_to_integer(source)) and
  (convert_character_digit_to_integer(source) <= 9)) and (((source = 48) ->
  (convert_character_digit_to_integer(source) = 0)) and
  ((not (source = 48)) -> (((source = 49) ->
  (convert_character_digit_to_integer(source) = 1)) and
  ((not (source = 49)) -> (((source = 50) ->
  (convert_character_digit_to_integer(source) = 2)) and
  ((not (source = 50)) -> (((source = 51) ->
  (convert_character_digit_to_integer(source) = 3)) and
  ((not (source = 51)) -> (((source = 52) ->
  (convert_character_digit_to_integer(source) = 4)) and
  ((not (source = 52)) -> (((source = 53) ->
  (convert_character_digit_to_integer(source) = 5)) and
  ((not (source = 53)) -> (((source = 54) ->
  (convert_character_digit_to_integer(source) = 6)) and
  ((not (source = 54)) -> (((source = 55) ->
  (convert_character_digit_to_integer(source) = 7)) and
  ((not (source = 55)) -> (((source = 56) ->
  (convert_character_digit_to_integer(source) = 8)) and
  ((not (source = 56)) -> ((source = 57) ->
  (convert_character_digit_to_integer(source) = 9))))))))))))))))))))) and
  in_range1(convert_character_digit_to_integer(source)))))

logic source : (int,character) farray

logic source1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "aida-conversion.adb", line 1093, characters 0-0 *)
goal WP_parameter_def :
  (forall target:int. forall has_failed:bool. forall temp___1798:int.
  forall o:int. forall o1:character. forall o2:int. forall o3:int.
  forall o4:int. forall o5:int. forall temp___1799:int. forall o6:int.
  forall o7:character. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall temp___1800:int. forall o12:int.
  forall o13:character. forall o14:int. forall o15:int. forall o16:int.
  forall o17:int. forall temp___1801:int. forall o18:int.
  forall o19:character. forall o20:int. forall o21:int. forall o22:int.
  forall o23:int. forall temp___1802:int. forall o24:int.
  forall o25:character. forall o26:int. forall o27:int. forall o28:int.
  forall o29:int. forall temp___1803:int. forall o30:int.
  forall o31:character. forall o32:int. forall o33:int. forall o34:int.
  forall o35:int. forall temp___1804:int. forall o36:int.
  forall o37:character. forall o38:int. forall o39:int. forall o40:int.
  forall o41:int. forall target1:int. forall has_failed1:bool.
  forall target2:int. forall has_failed2:bool. forall target3:int.
  forall has_failed3:bool. forall target4:int. forall has_failed4:bool.
  forall target5:int. forall has_failed5:bool. forall target6:int.
  forall has_failed6:bool. forall target7:int. forall has_failed7:bool.
  forall target8:int. forall has_failed8:bool. forall target9:int.
  forall has_failed9:bool. forall result:int. forall target10:int.
  forall result1:bool. forall has_failed10:bool. forall target11:int.
  forall has_failed11:bool. forall target12:int. forall has_failed12:bool.
  (dynamic_property(1, 2147483647, to_rep1(first(source1)),
  to_rep1(last(source1))) -> ((((-2147483648) <= 2147483647) ->
  in_range1(target)) -> ((((0 <  length({ elts = source; rt = source1 })) and
  (length({ elts = source; rt = source1 }) <  10)) and
  (forall index:int. (((to_rep1(first(source1)) <= index) and
  (index <= to_rep1(last(source1)))) ->
  (is_digit(to_rep((source[index]))) = true)))) -> (((((length({ elts =
  source; rt = source1 }) = 1) and (((not (has_failed1 = true)) and
  (target1 = convert_character_digit_to_integer(to_rep((source[to_rep1(first(source1))]))))) and
  in_range1(target1))) or ((not (length({ elts = source; rt = source1
  }) = 1)) and ((((length({ elts = source; rt = source1 }) = 2) and
  (((not (has_failed2 = true)) and
  (target2 = ((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10) + convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)])))))) and
  in_range1(target2))) or ((not (length({ elts = source; rt = source1
  }) = 2)) and ((((length({ elts = source; rt = source1 }) = 3) and
  (((not (has_failed3 = true)) and
  (target3 = (((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1)))) and
  in_range1(target3))) or ((not (length({ elts = source; rt = source1
  }) = 3)) and ((((length({ elts = source; rt = source1 }) = 4) and
  (((not (has_failed4 = true)) and
  (target4 = ((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1)))) and
  in_range1(target4))) or ((not (length({ elts = source; rt = source1
  }) = 4)) and ((((length({ elts = source; rt = source1 }) = 5) and
  (((not (has_failed5 = true)) and
  (target5 = (((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 1)))) and
  in_range1(target5))) or ((not (length({ elts = source; rt = source1
  }) = 5)) and ((((length({ elts = source; rt = source1 }) = 6) and
  (((not (has_failed6 = true)) and
  (target6 = ((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 1)))) and
  in_range1(target6))) or ((not (length({ elts = source; rt = source1
  }) = 6)) and ((((length({ elts = source; rt = source1 }) = 7) and
  (((not (has_failed7 = true)) and
  (target7 = (((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 1)))) and
  in_range1(target7))) or ((not (length({ elts = source; rt = source1
  }) = 7)) and ((((length({ elts = source; rt = source1 }) = 8) and
  (((not (has_failed8 = true)) and
  (target8 = ((((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 1000000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 7)]))) * 1)))) and
  in_range1(target8))) or ((not (length({ elts = source; rt = source1
  }) = 8)) and ((((length({ elts = source; rt = source1 }) = 9) and
  (((not (has_failed9 = true)) and
  (target9 = (((((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10000000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1000000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 7)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 8)]))) * 1)))) and
  in_range1(target9))) or ((not (length({ elts = source; rt = source1
  }) = 9)) and (((({ int__content = result } = { int__content = target }) and
  (target10 = 0)) and (({ bool__content = result1 } = { bool__content =
  has_failed }) and (has_failed10 = of_int(1)))) and
  ((has_failed9 = has_failed10) and (target9 = target10))))) and
  ((has_failed8 = has_failed9) and (target8 = target9))))) and
  ((has_failed7 = has_failed8) and (target7 = target8))))) and
  ((has_failed6 = has_failed7) and (target6 = target7))))) and
  ((has_failed5 = has_failed6) and (target5 = target6))))) and
  ((has_failed4 = has_failed5) and (target4 = target5))))) and
  ((has_failed3 = has_failed4) and (target3 = target4))))) and
  ((has_failed2 = has_failed3) and (target2 = target3))))) and
  ((has_failed1 = has_failed2) and (target1 = target2))))) and
  (((has_failed1 = has_failed11) and (target1 = target11)) and
  ((has_failed12 = has_failed1) and (target12 = target1)))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 1) = true) and
  (target11 = convert_character_digit_to_integer(to_rep((source[to_rep1(first(source1))]))))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 1) = true))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 2) = true) and
  (target11 = ((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10) + convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)])))))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 2) = true))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 3) = true) and
  (target11 = (((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1)))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 3) = true))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 4) = true) and
  (target11 = ((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1)))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 4) = true))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 5) = true) and
  (target11 = (((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 1)))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 5) = true))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 6) = true) and
  (target11 = ((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 1)))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 6) = true))) ->
  ((((bool_eq(length({ elts = source; rt = source1 }), 7) = true) and
  (target11 = (((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 1)))) or
  (not (bool_eq(length({ elts = source; rt = source1 }), 7) = true))) ->
  ((bool_eq(length({ elts = source; rt = source1 }), 8) = true) ->
  (((((((((temp___1804 = (to_rep1(first(source1)) + 7)) and
  in_range1((to_rep1(first(source1)) + 7))) and
  (((to_rep1(first(source1)) <= temp___1804) and
  (temp___1804 <= to_rep1(last(source1)))) and (o36 = temp___1804))) and
  (o37 = (source[o36]))) and (o38 = to_rep(o37))) and
  ((o39 = convert_character_digit_to_integer(o38)) and (in_range1(o39) and
  (((0 <= o39) and (o39 <= 9)) and (((bool_eq(o38, 48) = true) and
  (o39 = 0)) or ((not (bool_eq(o38, 48) = true)) and (((bool_eq(o38,
  49) = true) and (o39 = 1)) or ((not (bool_eq(o38, 49) = true)) and
  (((bool_eq(o38, 50) = true) and (o39 = 2)) or ((not (bool_eq(o38,
  50) = true)) and (((bool_eq(o38, 51) = true) and (o39 = 3)) or
  ((not (bool_eq(o38, 51) = true)) and (((bool_eq(o38, 52) = true) and
  (o39 = 4)) or ((not (bool_eq(o38, 52) = true)) and (((bool_eq(o38,
  53) = true) and (o39 = 5)) or ((not (bool_eq(o38, 53) = true)) and
  (((bool_eq(o38, 54) = true) and (o39 = 6)) or ((not (bool_eq(o38,
  54) = true)) and (((bool_eq(o38, 55) = true) and (o39 = 7)) or
  ((not (bool_eq(o38, 55) = true)) and (((bool_eq(o38, 56) = true) and
  (o39 = 8)) or ((not (bool_eq(o38, 56) = true)) and ((bool_eq(o38,
  57) = true) -> (o39 = 9)))))))))))))))))))))))) and (o40 = (o39 * 1))) and
  ((o41 = o40) and in_range1(o40))) ->
  (((((((((temp___1803 = (to_rep1(first(source1)) + 6)) and
  in_range1((to_rep1(first(source1)) + 6))) and
  (((to_rep1(first(source1)) <= temp___1803) and
  (temp___1803 <= to_rep1(last(source1)))) and (o30 = temp___1803))) and
  (o31 = (source[o30]))) and (o32 = to_rep(o31))) and
  ((o33 = convert_character_digit_to_integer(o32)) and (in_range1(o33) and
  (((0 <= o33) and (o33 <= 9)) and (((bool_eq(o32, 48) = true) and
  (o33 = 0)) or ((not (bool_eq(o32, 48) = true)) and (((bool_eq(o32,
  49) = true) and (o33 = 1)) or ((not (bool_eq(o32, 49) = true)) and
  (((bool_eq(o32, 50) = true) and (o33 = 2)) or ((not (bool_eq(o32,
  50) = true)) and (((bool_eq(o32, 51) = true) and (o33 = 3)) or
  ((not (bool_eq(o32, 51) = true)) and (((bool_eq(o32, 52) = true) and
  (o33 = 4)) or ((not (bool_eq(o32, 52) = true)) and (((bool_eq(o32,
  53) = true) and (o33 = 5)) or ((not (bool_eq(o32, 53) = true)) and
  (((bool_eq(o32, 54) = true) and (o33 = 6)) or ((not (bool_eq(o32,
  54) = true)) and (((bool_eq(o32, 55) = true) and (o33 = 7)) or
  ((not (bool_eq(o32, 55) = true)) and (((bool_eq(o32, 56) = true) and
  (o33 = 8)) or ((not (bool_eq(o32, 56) = true)) and ((bool_eq(o32,
  57) = true) -> (o33 = 9)))))))))))))))))))))))) and (o34 = (o33 * 10))) and
  ((o35 = o34) and in_range1(o34))) ->
  (((((((((temp___1802 = (to_rep1(first(source1)) + 5)) and
  in_range1((to_rep1(first(source1)) + 5))) and
  (((to_rep1(first(source1)) <= temp___1802) and
  (temp___1802 <= to_rep1(last(source1)))) and (o24 = temp___1802))) and
  (o25 = (source[o24]))) and (o26 = to_rep(o25))) and
  ((o27 = convert_character_digit_to_integer(o26)) and (in_range1(o27) and
  (((0 <= o27) and (o27 <= 9)) and (((bool_eq(o26, 48) = true) and
  (o27 = 0)) or ((not (bool_eq(o26, 48) = true)) and (((bool_eq(o26,
  49) = true) and (o27 = 1)) or ((not (bool_eq(o26, 49) = true)) and
  (((bool_eq(o26, 50) = true) and (o27 = 2)) or ((not (bool_eq(o26,
  50) = true)) and (((bool_eq(o26, 51) = true) and (o27 = 3)) or
  ((not (bool_eq(o26, 51) = true)) and (((bool_eq(o26, 52) = true) and
  (o27 = 4)) or ((not (bool_eq(o26, 52) = true)) and (((bool_eq(o26,
  53) = true) and (o27 = 5)) or ((not (bool_eq(o26, 53) = true)) and
  (((bool_eq(o26, 54) = true) and (o27 = 6)) or ((not (bool_eq(o26,
  54) = true)) and (((bool_eq(o26, 55) = true) and (o27 = 7)) or
  ((not (bool_eq(o26, 55) = true)) and (((bool_eq(o26, 56) = true) and
  (o27 = 8)) or ((not (bool_eq(o26, 56) = true)) and ((bool_eq(o26,
  57) = true) -> (o27 = 9)))))))))))))))))))))))) and
  (o28 = (o27 * 100))) and ((o29 = o28) and in_range1(o28))) ->
  (((((((((temp___1801 = (to_rep1(first(source1)) + 4)) and
  in_range1((to_rep1(first(source1)) + 4))) and
  (((to_rep1(first(source1)) <= temp___1801) and
  (temp___1801 <= to_rep1(last(source1)))) and (o18 = temp___1801))) and
  (o19 = (source[o18]))) and (o20 = to_rep(o19))) and
  ((o21 = convert_character_digit_to_integer(o20)) and (in_range1(o21) and
  (((0 <= o21) and (o21 <= 9)) and (((bool_eq(o20, 48) = true) and
  (o21 = 0)) or ((not (bool_eq(o20, 48) = true)) and (((bool_eq(o20,
  49) = true) and (o21 = 1)) or ((not (bool_eq(o20, 49) = true)) and
  (((bool_eq(o20, 50) = true) and (o21 = 2)) or ((not (bool_eq(o20,
  50) = true)) and (((bool_eq(o20, 51) = true) and (o21 = 3)) or
  ((not (bool_eq(o20, 51) = true)) and (((bool_eq(o20, 52) = true) and
  (o21 = 4)) or ((not (bool_eq(o20, 52) = true)) and (((bool_eq(o20,
  53) = true) and (o21 = 5)) or ((not (bool_eq(o20, 53) = true)) and
  (((bool_eq(o20, 54) = true) and (o21 = 6)) or ((not (bool_eq(o20,
  54) = true)) and (((bool_eq(o20, 55) = true) and (o21 = 7)) or
  ((not (bool_eq(o20, 55) = true)) and (((bool_eq(o20, 56) = true) and
  (o21 = 8)) or ((not (bool_eq(o20, 56) = true)) and ((bool_eq(o20,
  57) = true) -> (o21 = 9)))))))))))))))))))))))) and
  (o22 = (o21 * 1000))) and ((o23 = o22) and in_range1(o22))) ->
  (((((((((temp___1800 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3))) and
  (((to_rep1(first(source1)) <= temp___1800) and
  (temp___1800 <= to_rep1(last(source1)))) and (o12 = temp___1800))) and
  (o13 = (source[o12]))) and (o14 = to_rep(o13))) and
  ((o15 = convert_character_digit_to_integer(o14)) and (in_range1(o15) and
  (((0 <= o15) and (o15 <= 9)) and (((bool_eq(o14, 48) = true) and
  (o15 = 0)) or ((not (bool_eq(o14, 48) = true)) and (((bool_eq(o14,
  49) = true) and (o15 = 1)) or ((not (bool_eq(o14, 49) = true)) and
  (((bool_eq(o14, 50) = true) and (o15 = 2)) or ((not (bool_eq(o14,
  50) = true)) and (((bool_eq(o14, 51) = true) and (o15 = 3)) or
  ((not (bool_eq(o14, 51) = true)) and (((bool_eq(o14, 52) = true) and
  (o15 = 4)) or ((not (bool_eq(o14, 52) = true)) and (((bool_eq(o14,
  53) = true) and (o15 = 5)) or ((not (bool_eq(o14, 53) = true)) and
  (((bool_eq(o14, 54) = true) and (o15 = 6)) or ((not (bool_eq(o14,
  54) = true)) and (((bool_eq(o14, 55) = true) and (o15 = 7)) or
  ((not (bool_eq(o14, 55) = true)) and (((bool_eq(o14, 56) = true) and
  (o15 = 8)) or ((not (bool_eq(o14, 56) = true)) and ((bool_eq(o14,
  57) = true) -> (o15 = 9)))))))))))))))))))))))) and
  (o16 = (o15 * 10000))) and ((o17 = o16) and in_range1(o16))) ->
  (((((((((temp___1799 = (to_rep1(first(source1)) + 2)) and
  in_range1((to_rep1(first(source1)) + 2))) and
  (((to_rep1(first(source1)) <= temp___1799) and
  (temp___1799 <= to_rep1(last(source1)))) and (o6 = temp___1799))) and
  (o7 = (source[o6]))) and (o8 = to_rep(o7))) and
  ((o9 = convert_character_digit_to_integer(o8)) and (in_range1(o9) and
  (((0 <= o9) and (o9 <= 9)) and (((bool_eq(o8, 48) = true) and (o9 = 0)) or
  ((not (bool_eq(o8, 48) = true)) and (((bool_eq(o8, 49) = true) and
  (o9 = 1)) or ((not (bool_eq(o8, 49) = true)) and (((bool_eq(o8,
  50) = true) and (o9 = 2)) or ((not (bool_eq(o8, 50) = true)) and
  (((bool_eq(o8, 51) = true) and (o9 = 3)) or ((not (bool_eq(o8,
  51) = true)) and (((bool_eq(o8, 52) = true) and (o9 = 4)) or
  ((not (bool_eq(o8, 52) = true)) and (((bool_eq(o8, 53) = true) and
  (o9 = 5)) or ((not (bool_eq(o8, 53) = true)) and (((bool_eq(o8,
  54) = true) and (o9 = 6)) or ((not (bool_eq(o8, 54) = true)) and
  (((bool_eq(o8, 55) = true) and (o9 = 7)) or ((not (bool_eq(o8,
  55) = true)) and (((bool_eq(o8, 56) = true) and (o9 = 8)) or
  ((not (bool_eq(o8, 56) = true)) and ((bool_eq(o8, 57) = true) ->
  (o9 = 9)))))))))))))))))))))))) and (o10 = (o9 * 100000))) and
  ((o11 = o10) and in_range1(o10))) ->
  (((((((((temp___1798 = (to_rep1(first(source1)) + 1)) and
  in_range1((to_rep1(first(source1)) + 1))) and
  (((to_rep1(first(source1)) <= temp___1798) and
  (temp___1798 <= to_rep1(last(source1)))) and (o = temp___1798))) and
  (o1 = (source[o]))) and (o2 = to_rep(o1))) and
  ((o3 = convert_character_digit_to_integer(o2)) and (in_range1(o3) and
  (((0 <= o3) and (o3 <= 9)) and (((bool_eq(o2, 48) = true) and (o3 = 0)) or
  ((not (bool_eq(o2, 48) = true)) and (((bool_eq(o2, 49) = true) and
  (o3 = 1)) or ((not (bool_eq(o2, 49) = true)) and (((bool_eq(o2,
  50) = true) and (o3 = 2)) or ((not (bool_eq(o2, 50) = true)) and
  (((bool_eq(o2, 51) = true) and (o3 = 3)) or ((not (bool_eq(o2,
  51) = true)) and (((bool_eq(o2, 52) = true) and (o3 = 4)) or
  ((not (bool_eq(o2, 52) = true)) and (((bool_eq(o2, 53) = true) and
  (o3 = 5)) or ((not (bool_eq(o2, 53) = true)) and (((bool_eq(o2,
  54) = true) and (o3 = 6)) or ((not (bool_eq(o2, 54) = true)) and
  (((bool_eq(o2, 55) = true) and (o3 = 7)) or ((not (bool_eq(o2,
  55) = true)) and (((bool_eq(o2, 56) = true) and (o3 = 8)) or
  ((not (bool_eq(o2, 56) = true)) and ((bool_eq(o2, 57) = true) ->
  (o3 = 9)))))))))))))))))))))))) and (o4 = (o3 * 1000000))) and
  ((o5 = o4) and in_range1(o4))) ->
  in_range1((to_rep1(first(source1)) + 0))))))))))))))))))))))
