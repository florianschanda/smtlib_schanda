;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun f1 (Int) Bool)

(declare-fun f1__function_guard (Bool Int) Bool)

;; f1__post_axiom
  (assert true)

;; f1__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (f1 x) true) (< 0 x)) :pattern ((f1 x)) )))

(declare-fun f2 (Int) Bool)

(declare-fun f2__function_guard (Bool Int) Bool)

;; f2__post_axiom
  (assert true)

;; f2__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (f2 x) true) (< 0 x)) :pattern ((f2 x)) )))

(declare-fun f5 (Int) Bool)

(declare-fun f5__function_guard (Bool Int) Bool)

;; f5__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun g1 (Int Int) Bool)

(declare-fun g1__function_guard (Bool Int Int) Bool)

;; g1__post_axiom
  (assert true)

;; g1__def_axiom
  (assert
  (forall ((x Int) (funcs__g Int))
  (! (= (= (g1 x funcs__g) true) (< 0 funcs__g)) :pattern ((g1 x funcs__g)) )))

(declare-fun g2 (Int Int) Bool)

(declare-fun g2__function_guard (Bool Int Int) Bool)

;; g2__post_axiom
  (assert true)

;; g2__def_axiom
  (assert
  (forall ((x Int) (funcs__g Int))
  (! (= (= (g2 x funcs__g) true) (< 0 funcs__g)) :pattern ((g2 x funcs__g)) )))

(declare-fun g5 (Int Int) Bool)

(declare-fun g5__function_guard (Bool Int Int) Bool)

;; g5__post_axiom
  (assert true)

(declare-fun p2 (Int) Bool)

(declare-fun p2__function_guard (Bool Int) Bool)

;; p2__post_axiom
  (assert true)

;; p2__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (p2 x) true) (< 0 x)) :pattern ((p2 x)) )))

(declare-fun p5 (Int) Bool)

(declare-fun p5__function_guard (Bool Int) Bool)

;; p5__post_axiom
  (assert true)

(declare-fun q2 (Int) Bool)

(declare-fun q2__function_guard (Bool Int) Bool)

;; q2__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (= (= (q2 x) true) (< 0 x))) :pattern (
  (q2 x)) )))

;; q2__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (q2 x) true) (< 0 x)) :pattern ((q2 x)) )))

(declare-fun q5 (Int) Bool)

(declare-fun q5__function_guard (Bool Int) Bool)

;; q5__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (= (= (q5 x) true) (< 0 x))) :pattern (
  (q5 x)) )))

(declare-fun f3 (Int) Bool)

(declare-fun f3__function_guard (Bool Int) Bool)

;; f3__post_axiom
  (assert true)

;; f3__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (f3 x) true) (< 0 x)) :pattern ((f3 x)) )))

(declare-fun f4 (Int) Bool)

(declare-fun f4__function_guard (Bool Int) Bool)

;; f4__post_axiom
  (assert true)

;; f4__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (f4 x) true) (< 0 x)) :pattern ((f4 x)) )))

(declare-fun g3 (Int Int) Bool)

(declare-fun g3__function_guard (Bool Int Int) Bool)

;; g3__post_axiom
  (assert true)

;; g3__def_axiom
  (assert
  (forall ((x Int) (funcs__g Int))
  (! (= (= (g3 x funcs__g) true) (< 0 funcs__g)) :pattern ((g3 x funcs__g)) )))

(declare-fun g4 (Int Int) Bool)

(declare-fun g4__function_guard (Bool Int Int) Bool)

;; g4__post_axiom
  (assert true)

;; g4__def_axiom
  (assert
  (forall ((x Int) (funcs__g Int))
  (! (= (= (g4 x funcs__g) true) (< 0 funcs__g)) :pattern ((g4 x funcs__g)) )))

(declare-fun p4 (Int) Bool)

(declare-fun p4__function_guard (Bool Int) Bool)

;; p4__post_axiom
  (assert true)

;; p4__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (p4 x) true) (< 0 x)) :pattern ((p4 x)) )))

(declare-fun q4 (Int) Bool)

(declare-fun q4__function_guard (Bool Int) Bool)

;; q4__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (= (= (q4 x) true) (< 0 x))) :pattern (
  (q4 x)) )))

;; q4__def_axiom
  (assert
  (forall ((x Int)) (! (= (= (q4 x) true) (< 0 x)) :pattern ((q4 x)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const g Int)

(declare-const y Bool)

(declare-const o Bool)

(declare-const o1 Bool)

(declare-const o2 Bool)

(declare-const o3 Bool)

(declare-const o4 Bool)

(declare-const o5 Bool)

(declare-const o6 Bool)

(declare-const o7 Bool)

(declare-const o8 Bool)

(declare-const result Bool)

(declare-const y1 Bool)

(declare-const result1 Bool)

(declare-const y2 Bool)

(declare-const result2 Bool)

(declare-const y3 Bool)

(declare-const result3 Bool)

(declare-const y4 Bool)

(declare-const result4 Bool)

(declare-const y5 Bool)

(declare-const result5 Int)

(declare-const g6 Int)

(declare-const result6 Bool)

(declare-const y6 Bool)

(declare-const result7 Bool)

(declare-const y7 Bool)

(declare-const result8 Bool)

(declare-const y8 Bool)

(declare-const result9 Bool)

(declare-const y9 Bool)

;; H
  (assert (in_range1 g))

;; H
  (assert (= (f1 3) true))

;; H
  (assert (and (= o (f1 3)) (= (= o true) (< 0 3))))

;; H
  (assert (= result y))

;; H
  (assert (= y1 o))

;; H
  (assert (= (= y1 true) (= (f1 3) true)))

;; H
  (assert (= (f2 3) true))

;; H
  (assert (and (= o1 (f2 3)) (= (= o1 true) (< 0 3))))

;; H
  (assert (= result1 y1))

;; H
  (assert (= y2 o1))

;; H
  (assert (= (= y2 true) (= (f2 3) true)))

;; H
  (assert (= (f3 3) true))

;; H
  (assert (and (= o2 (f3 3)) (= (= o2 true) (< 0 3))))

;; H
  (assert (= result2 y2))

;; H
  (assert (= y3 o2))

;; H
  (assert (= (= y3 true) (= (f3 3) true)))

;; H
  (assert (= (f4 3) true))

;; H
  (assert (and (= o3 (f4 3)) (= (= o3 true) (< 0 3))))

;; H
  (assert (= result3 y3))

;; H
  (assert (= y4 o3))

;; H
  (assert (= (= y4 true) (= (f4 3) true)))

;; H
  (assert (= o4 (f5 3)))

;; H
  (assert (= result4 y4))

;; H
  (assert (= y5 o4))

;; H
  (assert (= (= y5 true) (= (f5 3) true)))

;; H
  (assert (= result5 g))

;; H
  (assert (= g6 3))

;; H
  (assert (= (g1 3 g6) true))

;; H
  (assert (and (= o5 (g1 3 g6)) (= (= o5 true) (< 0 g6))))

;; H
  (assert (= result6 y5))

;; H
  (assert (= y6 o5))

;; H
  (assert (= (= y6 true) (= (g1 3 g6) true)))

;; H
  (assert (= (g2 3 g6) true))

;; H
  (assert (and (= o6 (g2 3 g6)) (= (= o6 true) (< 0 g6))))

;; H
  (assert (= result7 y6))

;; H
  (assert (= y7 o6))

;; H
  (assert (= (= y7 true) (= (g2 3 g6) true)))

;; H
  (assert (= (g3 3 g6) true))

;; H
  (assert (and (= o7 (g3 3 g6)) (= (= o7 true) (< 0 g6))))

;; H
  (assert (= result8 y7))

;; H
  (assert (= y8 o7))

;; H
  (assert (= (= y8 true) (= (g3 3 g6) true)))

;; H
  (assert (= (g4 3 g6) true))

;; H
  (assert (and (= o8 (g4 3 g6)) (= (= o8 true) (< 0 g6))))

;; H
  (assert (= result9 y8))

;; H
  (assert (= y9 o8))

;; H
  (assert (= y9 true))

(assert
;; WP_parameter_def
 ;; File "funcs.adb", line 54, characters 0-0
  (not (= (g4 3 g6) true)))
(check-sat)
(exit)
