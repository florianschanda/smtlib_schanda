;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort content 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (content content) Bool)

(declare-const dummy1 content)

(declare-datatypes ()
((content__ref (mk_content__ref (content__content content)))))
(define-fun content__ref___projection ((a content__ref)) content (content__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_202 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_202)))

(declare-fun to_rep1 (content) Int)

(declare-fun of_rep1 (Int) content)

;; inversion_axiom
  (assert
  (forall ((x content))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x content)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int content))))))
(declare-fun slide ((Array Int content) Int Int) (Array Int content))

;; slide_eq
  (assert
  (forall ((a (Array Int content)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int content)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int content) Int Int (Array Int content) Int
  Int) (Array Int content))

;; concat_def
  (assert
  (forall ((a (Array Int content)) (b (Array Int content)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (content Int) (Array Int content))

;; singleton_def
  (assert
  (forall ((v content))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int content)) (a__first Int) (a__last Int)
  (b (Array Int content)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int content)) (b (Array Int content)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int content) Int Int (Array Int content) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int content)) (b (Array Int content)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int content)) (b (Array Int content)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int content)) (b (Array Int content)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int content))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int content) (elts a))

(define-fun of_array ((a (Array Int content)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int content)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int content)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int content)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int content))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int content))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int content))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ()
((h_type__ref (mk_h_type__ref (h_type__content us_t)))))
(define-fun h_type__ref___projection ((a h_type__ref)) us_t (h_type__content
                                                            a))

(declare-const h__first integer)

(declare-const h__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r30b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes () ((t31b__ref (mk_t31b__ref (t31b__content integer)))))
(define-fun t31b__ref___projection ((a t31b__ref)) integer (t31b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant2 ((temp___expr_208 us_t)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (not (= temp___skip_constant_206 true))
                                      (dynamic_property (- 2147483648)
                                      2147483647 (first1 temp___expr_208)
                                      (last1 temp___expr_208))))

(declare-const h (Array Int content))

(declare-const t1 Int)

(declare-const m Int)

(declare-const q Int)

(declare-const temp___483 (Array Int content))

(declare-const temp___481 (Array Int content))

(declare-const temp___479 Int)

(declare-const temp___487 (Array Int content))

(declare-const temp___478 Int)

(declare-const temp___485 (Array Int content))

(declare-const o Int)

(declare-const o1 content)

(declare-const o2 Int)

(declare-const temp___476 Int)

(declare-const o3 Int)

(declare-const o4 content)

(declare-const o5 Int)

(declare-const o6 content)

(declare-const o7 Int)

(declare-const o8 (Array Int content))

(declare-const temp___477 Int)

(declare-const o9 content)

(declare-const o10 Int)

(declare-const o11 (Array Int content))

(declare-const k Int)

(declare-const o12 Int)

(declare-const o13 content)

(declare-const o14 Int)

(declare-const h1 (Array Int content))

(declare-const t2 Int)

(declare-const result Int)

(declare-const m1 Int)

(declare-const result1 Int)

(declare-const q1 Int)

(declare-const h2 (Array Int content))

(declare-const t3 Int)

(declare-const q2 Int)

(declare-const result2 Int)

(declare-const t4 Int)

(declare-const result3 (Array Int content))

(declare-const h3 (Array Int content))

(declare-const result4 (Array Int content))

(declare-const h4 (Array Int content))

(declare-const h5 (Array Int content))

(declare-const t5 Int)

(declare-const q3 Int)

(declare-const h6 (Array Int content))

(declare-const t6 Int)

(declare-const q4 Int)

(declare-const h7 (Array Int content))

(declare-const t7 Int)

(declare-const q5 Int)

(declare-const h8 (Array Int content))

(declare-const t8 Int)

(declare-const q6 Int)

(declare-const h9 (Array Int content))

(declare-const t9 Int)

(declare-const m2 int__ref)

(declare-const q7 int__ref)

(declare-const h10 (Array Int content))

(declare-const t10 Int)

(declare-const m3 Int)

(declare-const q8 Int)

(define-fun q9 () int__ref (mk_int__ref q5))

(define-fun t11 () int__ref (mk_int__ref t7))

(define-fun h11 () map__ref (mk_map__ref h7))

;; H
  (assert (dynamic_property (- 2147483648) 2147483647 (to_rep h__first)
  (to_rep h__last)))

;; H
  (assert (and (= (to_rep h__first) 1) (<= 1 (to_rep h__last))))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 t1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 m)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref m)))

;; H
  (assert (= m1 (div1 (to_rep h__last) 2)))

;; H
  (assert (= m1 r30b))

;; H
  (assert (in_range1 r30b))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref q)))

;; H
  (assert (= q1 (to_rep h__first)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= temp___483 h)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= temp___481 h)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= temp___479 t1)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= temp___487 h)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= temp___478 q1)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= temp___485 h)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (forall ((k1 Int))
  (=> (and (<= (to_rep h__first) k1) (<= k1 (to_rep h__last)))
  (ite (< k1 q2)
  (= (to_rep1 (select h2 k1)) (to_rep1 (select temp___483 (+ k1 m1))))
  (ite (< (+ q2 m1) k1)
  (= (to_rep1 (select h2 k1)) (to_rep1 (select temp___485 (- k1 m1))))
  (= (to_rep1 (select h2 k1)) (to_rep1 (select temp___487 k1)))))))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and
  (and
  (=> (<= (to_rep h__first) r30b) (dynamic_property1 (to_rep h__first)
  r30b q2)) (=> (<= (- 2147483648) 2147483647) (in_range2 t3)))
  (and (<= (to_rep h__first) q2) (<= q2 r30b)))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and (<= (to_rep h__first) q2) (<= q2 (to_rep h__last)))))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o q2)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o1 (select h2 o))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o2 (to_rep1 o1))))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= t3 result2)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= t4 o2)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and (= temp___476 (+ q2 m1)) (in_range1 (+ q2 m1)))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and (<= (to_rep h__first) temp___476) (<= temp___476 (to_rep h__last)))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o3 temp___476)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o4 (select h2 o3))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o5 (to_rep1 o4))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= (to_rep1 o6) o5)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and (<= (to_rep h__first) q2) (<= q2 (to_rep h__last)))))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o7 q2)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o8 (store h2 o7 o6))))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h2 result3)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h3 o8)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= (to_rep1 o9) t4)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and (= temp___477 (+ q2 m1)) (in_range1 (+ q2 m1)))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b))
  (and (<= (to_rep h__first) temp___477) (<= temp___477 (to_rep h__last)))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o10 temp___477)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= o11 (store h3 o10 o9))))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h3 result4)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h4 o11)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= q2 r30b)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= q2 q3)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= t4 t5)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h4 h5)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= q4 q2)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= t6 t4)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h6 h4)))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= q9 (mk_int__ref q3))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= t11 (mk_int__ref t5))))

;; H
  (assert
  (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h11 (mk_map__ref h5))))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= q6 q4)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= t8 t6)))

;; H
  (assert (=> (and (<= (to_rep h__first) q1) (<= q1 r30b)) (= h8 h6)))

;; H
  (assert (=> (not (and (<= (to_rep h__first) q1) (<= q1 r30b))) (= q1 q5)))

;; H
  (assert
  (=> (not (and (<= (to_rep h__first) q1) (<= q1 r30b)))
  (= t11 (mk_int__ref t1))))

;; H
  (assert
  (=> (not (and (<= (to_rep h__first) q1) (<= q1 r30b)))
  (= h11 (mk_map__ref h))))

;; H
  (assert (=> (not (and (<= (to_rep h__first) q1) (<= q1 r30b))) (= q6 q1)))

;; H
  (assert (=> (not (and (<= (to_rep h__first) q1) (<= q1 r30b))) (= t8 t2)))

;; H
  (assert (=> (not (and (<= (to_rep h__first) q1) (<= q1 r30b))) (= h8 h1)))

;; H
  (assert (= q7 q9))

;; H
  (assert (= m2 (mk_int__ref m1)))

;; H
  (assert (= (mk_int__ref t9) t11))

;; H
  (assert (= (mk_map__ref h9) h11))

;; H
  (assert (= q8 q6))

;; H
  (assert (= m3 m1))

;; H
  (assert (= t10 t8))

;; H
  (assert (= h10 h8))

;; H
  (assert (<= (to_rep h__first) k))

;; H
  (assert (<= k (to_rep h__last)))

;; H
  (assert (<= k (div1 (to_rep h__last) 2)))

;; H
  (assert
  (and (<= (to_rep h__first) (+ k (div1 (to_rep h__last) 2)))
  (<= (+ k (div1 (to_rep h__last) 2)) (to_rep h__last))))

;; H
  (assert (= o12 (+ k (div1 (to_rep h__last) 2))))

;; H
  (assert (= o13 (select h o12)))

;; H
  (assert (= o14 (to_rep1 o13)))

(assert
;; WP_parameter_def
 ;; File "infoflow.ads", line 114, characters 0-0
  (not (<= (to_rep h__first) k)))
(check-sat)
(exit)
