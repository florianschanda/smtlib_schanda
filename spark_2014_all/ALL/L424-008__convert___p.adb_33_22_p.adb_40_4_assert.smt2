;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort tTmy_s1SP1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (tTmy_s1SP1 tTmy_s1SP1) Bool)

(declare-fun dummy1 () tTmy_s1SP1)

(declare-datatypes ()
((tTmy_s1SP1__ref (mk_tTmy_s1SP1__ref (tTmy_s1SP1__content tTmy_s1SP1)))))
(define-fun tTmy_s1SP1__ref_5__projection ((a tTmy_s1SP1__ref)) tTmy_s1SP1
  (tTmy_s1SP1__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort tTmy_s2SP1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 2 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tTmy_s2SP1 tTmy_s2SP1) Bool)

(declare-fun dummy2 () tTmy_s2SP1)

(declare-datatypes ()
((tTmy_s2SP1__ref (mk_tTmy_s2SP1__ref (tTmy_s2SP1__content tTmy_s2SP1)))))
(define-fun tTmy_s2SP1__ref_5__projection ((a tTmy_s2SP1__ref)) tTmy_s2SP1
  (tTmy_s2SP1__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort tTmy_s1SP11 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (tTmy_s1SP11 tTmy_s1SP11) Bool)

(declare-fun dummy3 () tTmy_s1SP11)

(declare-datatypes ()
((tTmy_s1SP1__ref1 (mk_tTmy_s1SP1__ref1 (tTmy_s1SP1__content1 tTmy_s1SP11)))))
(define-fun tTmy_s1SP1__ref_6__projection ((a tTmy_s1SP1__ref1)) tTmy_s1SP11
  (tTmy_s1SP1__content1 a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort tTmy_s2SP11 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tTmy_s2SP11 tTmy_s2SP11) Bool)

(declare-fun dummy4 () tTmy_s2SP11)

(declare-datatypes ()
((tTmy_s2SP1__ref1 (mk_tTmy_s2SP1__ref1 (tTmy_s2SP1__content1 tTmy_s2SP11)))))
(define-fun tTmy_s2SP1__ref_6__projection ((a tTmy_s2SP1__ref1)) tTmy_s2SP11
  (tTmy_s2SP1__content1 a))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-sort tTmy_s1SP12 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (tTmy_s1SP12 tTmy_s1SP12) Bool)

(declare-fun dummy5 () tTmy_s1SP12)

(declare-datatypes ()
((tTmy_s1SP1__ref2 (mk_tTmy_s1SP1__ref2 (tTmy_s1SP1__content2 tTmy_s1SP12)))))
(define-fun tTmy_s1SP1__ref_7__projection ((a tTmy_s1SP1__ref2)) tTmy_s1SP12
  (tTmy_s1SP1__content2 a))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort tTmy_s2SP12 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 2 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (tTmy_s2SP12 tTmy_s2SP12) Bool)

(declare-fun dummy6 () tTmy_s2SP12)

(declare-datatypes ()
((tTmy_s2SP1__ref2 (mk_tTmy_s2SP1__ref2 (tTmy_s2SP1__content2 tTmy_s2SP12)))))
(define-fun tTmy_s2SP1__ref_7__projection ((a tTmy_s2SP1__ref2)) tTmy_s2SP12
  (tTmy_s2SP1__content2 a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-sort tTmy_s1SP13 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (tTmy_s1SP13 tTmy_s1SP13) Bool)

(declare-fun dummy7 () tTmy_s1SP13)

(declare-datatypes ()
((tTmy_s1SP1__ref3 (mk_tTmy_s1SP1__ref3 (tTmy_s1SP1__content3 tTmy_s1SP13)))))
(define-fun tTmy_s1SP1__ref_8__projection ((a tTmy_s1SP1__ref3)) tTmy_s1SP13
  (tTmy_s1SP1__content3 a))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-sort tTmy_s2SP13 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 2 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (tTmy_s2SP13 tTmy_s2SP13) Bool)

(declare-fun dummy8 () tTmy_s2SP13)

(declare-datatypes ()
((tTmy_s2SP1__ref3 (mk_tTmy_s2SP1__ref3 (tTmy_s2SP1__content3 tTmy_s2SP13)))))
(define-fun tTmy_s2SP1__ref_8__projection ((a tTmy_s2SP1__ref3)) tTmy_s2SP13
  (tTmy_s2SP1__content3 a))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun p__B19b__my_s1__aggregate_def (Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___319 Int) (temp___320 Int) (temp___321 Int))
  (let ((temp___318 (p__B19b__my_s1__aggregate_def temp___319 temp___320
                    temp___321)))
  (and
  (and (= (select temp___318 1) (of_rep temp___319))
  (= (select temp___318 2) (of_rep temp___320)))
  (= (select temp___318 3) (of_rep temp___321))))))

(declare-fun p__B22b__my_s1__aggregate_def (Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___324 Int) (temp___325 Int) (temp___326 Int))
  (let ((temp___323 (p__B22b__my_s1__aggregate_def temp___324 temp___325
                    temp___326)))
  (and
  (and (= (select temp___323 1) (of_rep temp___324))
  (= (select temp___323 2) (of_rep temp___325)))
  (= (select temp___323 3) (of_rep temp___326))))))

(declare-fun p__B25b__my_s1__aggregate_def (Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___329 Int) (temp___330 Int) (temp___331 Int))
  (let ((temp___328 (p__B25b__my_s1__aggregate_def temp___329 temp___330
                    temp___331)))
  (and
  (and (= (select temp___328 1) (of_rep temp___329))
  (= (select temp___328 2) (of_rep temp___330)))
  (= (select temp___328 3) (of_rep temp___331))))))

(declare-fun p__B28b__my_s1__aggregate_def (Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___334 Int) (temp___335 Int) (temp___336 Int))
  (let ((temp___333 (p__B28b__my_s1__aggregate_def temp___334 temp___335
                    temp___336)))
  (and
  (and (= (select temp___333 1) (of_rep temp___334))
  (= (select temp___333 2) (of_rep temp___335)))
  (= (select temp___333 3) (of_rep temp___336))))))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun my_s1 () (Array Int integer))

(declare-fun my_s2 () (Array Int integer))

(declare-fun my_s11 () (Array Int integer))

(declare-fun my_s21 () (Array Int integer))

(declare-fun my_s12 () (Array Int integer))

(declare-fun my_s22 () (Array Int integer))

(declare-fun my_s13 () (Array Int integer))

(declare-fun my_s23 () (Array Int integer))

(declare-fun result () (Array Int integer))

(declare-fun my_s14 () (Array Int integer))

(declare-fun result1 () (Array Int integer))

(declare-fun my_s24 () (Array Int integer))

(declare-fun result2 () (Array Int integer))

(declare-fun my_s15 () (Array Int integer))

(declare-fun result3 () (Array Int integer))

(declare-fun my_s25 () (Array Int integer))

(declare-fun result4 () (Array Int integer))

(declare-fun my_s16 () (Array Int integer))

(declare-fun result5 () (Array Int integer))

(declare-fun my_s26 () (Array Int integer))

(declare-fun result6 () (Array Int integer))

(declare-fun my_s17 () (Array Int integer))

(declare-fun result7 () (Array Int integer))

(declare-fun my_s27 () (Array Int integer))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref my_s1)))

;; H
  (assert (= my_s14 (p__B19b__my_s1__aggregate_def 1 2 3)))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref my_s2)))

;; H
  (assert (= my_s24 (slide my_s14 1 2)))

;; H
  (assert (= (to_rep (select my_s24 2)) 1))

;; H
  (assert (= (mk_map__ref result2) (mk_map__ref my_s11)))

;; H
  (assert (= my_s15 (p__B22b__my_s1__aggregate_def 1 2 3)))

;; H
  (assert (= (mk_map__ref result3) (mk_map__ref my_s21)))

;; H
  (assert (= my_s25 (slide my_s15 1 2)))

;; H
  (assert (not (= (to_rep (select my_s25 2)) 1)))

;; H
  (assert (= (mk_map__ref result4) (mk_map__ref my_s12)))

;; H
  (assert (= my_s16 (p__B25b__my_s1__aggregate_def 1 2 3)))

;; H
  (assert (= (mk_map__ref result5) (mk_map__ref my_s22)))

;; H
  (assert (= my_s26 (slide my_s16 1 2)))

;; H
  (assert (= (to_rep (select my_s26 2)) 2))

;; H
  (assert (= result6 my_s13))

;; H
  (assert (= my_s17 (p__B28b__my_s1__aggregate_def 1 2 3)))

;; H
  (assert (= result7 my_s23))

;; H
  (assert (= my_s27 (slide my_s17 1 2)))

(assert
;; WP_parameter_def
 ;; File "p.adb", line 1, characters 0-0
  (not (not (= (to_rep (select my_s27 2)) 2))))
(check-sat)
(exit)
