;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned16 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))

(declare-fun user_eq (unsigned16 unsigned16) Bool)

(declare-fun dummy () unsigned16)

(declare-datatypes ()
((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-fun dummy1 () unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(define-fun dynamic_invariant1 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun val__ () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun retval () (_ BitVec 16))

(declare-fun x86__signextend8to16__result () (_ BitVec 16))

(declare-fun result () (_ BitVec 16))

(declare-fun retval1 () (_ BitVec 16))

(declare-fun result1 () (_ BitVec 16))

(declare-fun retval2 () (_ BitVec 16))

(declare-fun result2 () (_ BitVec 16))

(declare-fun x86__signextend8to16__result1 () (_ BitVec 16))

(declare-fun x86__signextend8to16__result2 () (_ BitVec 16))

(declare-fun x86__signextend8to16__result3 () (_ BitVec 16))

(declare-fun retval3 () (_ BitVec 16))

(declare-fun x86__signextend8to16__result4 () (_ BitVec 16))

(declare-fun retval4 () (_ BitVec 16))

(declare-fun x86__signextend8to16__result5 () (_ BitVec 16))

(define-fun x86__signextend8to16__result6 () t__ref1 (mk_t__ref1
                                                     x86__signextend8to16__result4))

(define-fun x86__signextend8to16__result7 () t__ref1 (mk_t__ref1
                                                     x86__signextend8to16__result2))

(define-fun result3 () t__ref1 (mk_t__ref1 result2))

(define-fun result4 () t__ref1 (mk_t__ref1 result1))

(define-fun result5 () t__ref1 (mk_t__ref1 result))

(define-fun x86__signextend8to16__result8 () t__ref1 (mk_t__ref1
                                                     x86__signextend8to16__result))

(define-fun retval5 () t__ref1 (mk_t__ref1 retval))

(declare-fun result6 () (_ BitVec 16))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (=> (bvugt val__ ((_ int2bv 8) 127)) (= result5 retval5)))

;; H
  (assert
  (=> (bvugt val__ ((_ int2bv 8) 127))
  (= retval1 (bvor ((_ int2bv 16) 65280) ((_ zero_extend 8) val__)))))

;; H
  (assert (=> (not (bvugt val__ ((_ int2bv 8) 127))) (= result4 retval5)))

;; H
  (assert
  (=> (not (bvugt val__ ((_ int2bv 8) 127)))
  (= retval2 ((_ zero_extend 8) val__))))

;; H
  (assert (=> (not (bvugt val__ ((_ int2bv 8) 127))) (= retval1 retval2)))

;; H
  (assert (= x86__signextend8to16__result1 x86__signextend8to16__result2))

;; H
  (assert (= x86__signextend8to16__result3 x86__signextend8to16__result1))

;; H
  (assert (= result3 x86__signextend8to16__result8))

;; H
  (assert (= x86__signextend8to16__result1 retval1))

;; H
  (assert (= x86__signextend8to16__result6 x86__signextend8to16__result7))

;; H
  (assert (= retval1 retval3))

;; H
  (assert (= x86__signextend8to16__result5 x86__signextend8to16__result3))

;; H
  (assert (= retval4 retval1))

;; H
  (assert (= result6 x86__signextend8to16__result4))

;; H
  (assert (bvugt val__ ((_ int2bv 8) 127)))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 9, characters 0-0
  (not
  (= x86__signextend8to16__result4 (bvor ((_ int2bv 16) 65280) ((_ zero_extend 8)
  val__)))))
(check-sat)
(exit)
