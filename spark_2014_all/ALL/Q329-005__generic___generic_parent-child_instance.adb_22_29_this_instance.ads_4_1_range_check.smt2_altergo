(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type element

predicate in_range(x: int) = ((0 <= x) and (x <= 9))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : element, element -> bool

logic dummy : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

logic to_rep : element -> int

logic of_rep : int -> element

axiom inversion_axiom :
  (forall x:element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__this_parent__object__a : element; rec__ext__ :
us_private
}

function us_split_fields_A__projection(a: us_split_fields) : element =
  (a).rec__this_parent__object__a

function us_split_fields_2__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep_3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_4__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__this_parent__object__a) = to_rep(((b).us_split_fields1).rec__this_parent__object__a)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__this_parent__object__a) = to_rep(((b).us_split_fields1).rec__this_parent__object__a))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:element. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = { rec__this_parent__object__a = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:element. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__this_parent__object__a = a; rec__ext__ = a1 }; attr__tag = a2 })))

logic this_parent__object__a__first__bit : int

logic this_parent__object__a__last__bit : int

logic this_parent__object__a__position : int

axiom this_parent__object__a__first__bit_axiom :
  (0 <= this_parent__object__a__first__bit)

axiom this_parent__object__a__last__bit_axiom :
  (this_parent__object__a__first__bit <  this_parent__object__a__last__bit)

axiom this_parent__object__a__position_axiom :
  (0 <= this_parent__object__a__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : element

logic dummy2 : us_private

logic dummy3 : int

type object__ref = { object__content : us_rep
}

function object__ref___projection(a: object__ref) : us_rep =
  (a).object__content

type us_split_fields2 = { rec__this_instance__object__b : element;
rec__this_parent__object__a1 : element; rec__ext__1 : us_private
}

function us_split_fields_B__projection(a: us_split_fields2) : element =
  (a).rec__this_instance__object__b

function us_split_fields_A2__projection(a: us_split_fields2) : element =
  (a).rec__this_parent__object__a1

function us_split_fields_3__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep_5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_6__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : element, us_private -> us_private

logic extract__b : us_private -> element

axiom extract__b__conv :
  (forall b:element.
  (forall rec__ext__2:us_private. (extract__b(hide_ext__(b,
  rec__ext__2)) = b)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__this_parent__object__a =
  ((a).us_split_fields3).rec__this_parent__object__a1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__this_instance__object__b,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__this_instance__object__b =
  extract__b(((r).us_split_fields1).rec__ext__);
  rec__this_parent__object__a1 =
  ((r).us_split_fields1).rec__this_parent__object__a; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__this_instance__object__b) = to_rep(((b).us_split_fields3).rec__this_instance__object__b)) and
  (to_rep(((a).us_split_fields3).rec__this_parent__object__a1) = to_rep(((b).us_split_fields3).rec__this_parent__object__a1))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__this_instance__object__b) = to_rep(((b).us_split_fields3).rec__this_instance__object__b)) and
  (to_rep(((a).us_split_fields3).rec__this_parent__object__a1) = to_rep(((b).us_split_fields3).rec__this_parent__object__a1)))) ->
  (bool_eq3(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:element. forall a1:element. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = { rec__this_instance__object__b =
  a; rec__this_parent__object__a1 = a1; rec__ext__1 = a2 }; attr__tag1 = a3
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:element. forall a1:element. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__this_instance__object__b = a; rec__this_parent__object__a1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic this_instance__object__b__first__bit : int

logic this_instance__object__b__last__bit : int

logic this_instance__object__b__position : int

axiom this_instance__object__b__first__bit_axiom :
  (0 <= this_instance__object__b__first__bit)

axiom this_instance__object__b__last__bit_axiom :
  (this_instance__object__b__first__bit <  this_instance__object__b__last__bit)

axiom this_instance__object__b__position_axiom :
  (0 <= this_instance__object__b__position)

logic this_parent__object__a__first__bit1 : int

logic this_parent__object__a__last__bit1 : int

logic this_parent__object__a__position1 : int

axiom this_parent__object__a__first__bit_axiom1 :
  (0 <= this_parent__object__a__first__bit1)

axiom this_parent__object__a__last__bit_axiom1 :
  (this_parent__object__a__first__bit1 <  this_parent__object__a__last__bit1)

axiom this_parent__object__a__position_axiom1 :
  (0 <= this_parent__object__a__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : element

logic dummy5 : element

logic dummy6 : us_private

logic dummy7 : int

type object__ref1 = { object__content1 : us_rep1
}

function object__ref_2__projection(a: object__ref1) : us_rep1 =
  (a).object__content1

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "generic_parent-child_instance.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall this__split_fields:element. forall step:int. forall result:int.
  forall step1:int. (((result = step) and (step1 = 1)) -> (in_range(step1) ->
  ((to_rep(this__split_fields) <= (9 - step1)) ->
  in_range((to_rep(this__split_fields) + step1))))))
