(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type enum

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : enum, enum -> bool

logic dummy5 : enum

type enum__ref = { enum__content : enum
}

function enum__ref___projection(a: enum__ref) : enum = (a).enum__content

logic to_rep2 : enum -> int

logic of_rep2 : int -> enum

axiom inversion_axiom2 :
  (forall x:enum [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:enum [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__p_init__t__e : enum
}

function us_split_discrs___projection(a: us_split_discrs) : enum =
  (a).rec__p_init__t__e

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p_init__t__x1 : integer; rec__p_init__t__x2 :
integer
}

function us_split_fields_X1__projection(a: us_split_fields) : integer =
  (a).rec__p_init__t__x1

function us_split_fields_X2__projection(a: us_split_fields) : integer =
  (a).rec__p_init__t__x2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate p_init__t__x2__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__p_init__t__e) = 1)

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  (((((to_rep2(((a).us_split_discrs1).rec__p_init__t__e) = to_rep2(((b).us_split_discrs1).rec__p_init__t__e)) and
  (to_rep1(((a).us_split_fields1).rec__p_init__t__x1) = to_rep1(((b).us_split_fields1).rec__p_init__t__x1))) and
  (p_init__t__x2__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__p_init__t__x2) = to_rep1(((b).us_split_fields1).rec__p_init__t__x2)))) ->
  (bool_eq7(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_discrs1).rec__p_init__t__e) = to_rep2(((b).us_split_discrs1).rec__p_init__t__e)) and
  (to_rep1(((a).us_split_fields1).rec__p_init__t__x1) = to_rep1(((b).us_split_fields1).rec__p_init__t__x1))) and
  (p_init__t__x2__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__p_init__t__x2) = to_rep1(((b).us_split_fields1).rec__p_init__t__x2))))) ->
  (bool_eq7(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size1({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit : int

logic p_init__t__e__last__bit : int

logic p_init__t__e__position : int

axiom p_init__t__e__first__bit_axiom : (0 <= p_init__t__e__first__bit)

axiom p_init__t__e__last__bit_axiom :
  (p_init__t__e__first__bit <  p_init__t__e__last__bit)

axiom p_init__t__e__position_axiom : (0 <= p_init__t__e__position)

logic p_init__t__x1__first__bit : int

logic p_init__t__x1__last__bit : int

logic p_init__t__x1__position : int

axiom p_init__t__x1__first__bit_axiom : (0 <= p_init__t__x1__first__bit)

axiom p_init__t__x1__last__bit_axiom :
  (p_init__t__x1__first__bit <  p_init__t__x1__last__bit)

axiom p_init__t__x1__position_axiom : (0 <= p_init__t__x1__position)

logic p_init__t__x2__first__bit : int

logic p_init__t__x2__last__bit : int

logic p_init__t__x2__position : int

axiom p_init__t__x2__first__bit_axiom : (0 <= p_init__t__x2__first__bit)

axiom p_init__t__x2__last__bit_axiom :
  (p_init__t__x2__first__bit <  p_init__t__x2__last__bit)

axiom p_init__t__x2__position_axiom : (0 <= p_init__t__x2__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : enum

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : bool

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic init : unit -> us_rep

logic init__function_guard : us_rep, unit -> prop

axiom init__post_axiom : true

logic y1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic y2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range4(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep2(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size2({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit1 : int

logic p_init__t__e__last__bit1 : int

logic p_init__t__e__position1 : int

axiom p_init__t__e__first__bit_axiom1 : (0 <= p_init__t__e__first__bit1)

axiom p_init__t__e__last__bit_axiom1 :
  (p_init__t__e__first__bit1 <  p_init__t__e__last__bit1)

axiom p_init__t__e__position_axiom1 : (0 <= p_init__t__e__position1)

logic p_init__t__x2__first__bit1 : int

logic p_init__t__x2__last__bit1 : int

logic p_init__t__x2__position1 : int

axiom p_init__t__x2__first__bit_axiom1 : (0 <= p_init__t__x2__first__bit1)

axiom p_init__t__x2__last__bit_axiom1 :
  (p_init__t__x2__first__bit1 <  p_init__t__x2__last__bit1)

axiom p_init__t__x2__position_axiom1 : (0 <= p_init__t__x2__position1)

logic p_init__t__x1__first__bit1 : int

logic p_init__t__x1__last__bit1 : int

logic p_init__t__x1__position1 : int

axiom p_init__t__x1__first__bit_axiom1 : (0 <= p_init__t__x1__first__bit1)

axiom p_init__t__x1__last__bit_axiom1 :
  (p_init__t__x1__first__bit1 <  p_init__t__x1__last__bit1)

axiom p_init__t__x1__position_axiom1 : (0 <= p_init__t__x1__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy10 : enum

logic dummy11 : integer

logic dummy12 : integer

logic dummy13 : bool

type tz1S__ref = { tz1S__content : us_rep
}

function tz1S__ref___projection(a: tz1S__ref) : us_rep = (a).tz1S__content

logic z1__split_discrs : enum

logic z1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range5(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep2(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size3({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment3({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit2 : int

logic p_init__t__e__last__bit2 : int

logic p_init__t__e__position2 : int

axiom p_init__t__e__first__bit_axiom2 : (0 <= p_init__t__e__first__bit2)

axiom p_init__t__e__last__bit_axiom2 :
  (p_init__t__e__first__bit2 <  p_init__t__e__last__bit2)

axiom p_init__t__e__position_axiom2 : (0 <= p_init__t__e__position2)

logic p_init__t__x1__first__bit2 : int

logic p_init__t__x1__last__bit2 : int

logic p_init__t__x1__position2 : int

axiom p_init__t__x1__first__bit_axiom2 : (0 <= p_init__t__x1__first__bit2)

axiom p_init__t__x1__last__bit_axiom2 :
  (p_init__t__x1__first__bit2 <  p_init__t__x1__last__bit2)

axiom p_init__t__x1__position_axiom2 : (0 <= p_init__t__x1__position2)

logic p_init__t__x2__first__bit2 : int

logic p_init__t__x2__last__bit2 : int

logic p_init__t__x2__position2 : int

axiom p_init__t__x2__first__bit_axiom2 : (0 <= p_init__t__x2__first__bit2)

axiom p_init__t__x2__last__bit_axiom2 :
  (p_init__t__x2__first__bit2 <  p_init__t__x2__last__bit2)

axiom p_init__t__x2__position_axiom2 : (0 <= p_init__t__x2__position2)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy14 : enum

logic dummy15 : integer

logic dummy16 : integer

logic dummy17 : bool

type tz2S__ref = { tz2S__content : us_rep
}

function tz2S__ref___projection(a: tz2S__ref) : us_rep = (a).tz2S__content

logic z2__split_discrs : enum

logic z2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range6(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep2(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size4({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment4({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit3 : int

logic p_init__t__e__last__bit3 : int

logic p_init__t__e__position3 : int

axiom p_init__t__e__first__bit_axiom3 : (0 <= p_init__t__e__first__bit3)

axiom p_init__t__e__last__bit_axiom3 :
  (p_init__t__e__first__bit3 <  p_init__t__e__last__bit3)

axiom p_init__t__e__position_axiom3 : (0 <= p_init__t__e__position3)

logic p_init__t__x2__first__bit3 : int

logic p_init__t__x2__last__bit3 : int

logic p_init__t__x2__position3 : int

axiom p_init__t__x2__first__bit_axiom3 : (0 <= p_init__t__x2__first__bit3)

axiom p_init__t__x2__last__bit_axiom3 :
  (p_init__t__x2__first__bit3 <  p_init__t__x2__last__bit3)

axiom p_init__t__x2__position_axiom3 : (0 <= p_init__t__x2__position3)

logic p_init__t__x1__first__bit3 : int

logic p_init__t__x1__last__bit3 : int

logic p_init__t__x1__position3 : int

axiom p_init__t__x1__first__bit_axiom3 : (0 <= p_init__t__x1__first__bit3)

axiom p_init__t__x1__last__bit_axiom3 :
  (p_init__t__x1__first__bit3 <  p_init__t__x1__last__bit3)

axiom p_init__t__x1__position_axiom3 : (0 <= p_init__t__x1__position3)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy18 : enum

logic dummy19 : integer

logic dummy20 : integer

logic dummy21 : bool

type tc1S__ref = { tc1S__content : us_rep
}

function tc1S__ref___projection(a: tc1S__ref) : us_rep = (a).tc1S__content

predicate in_range7(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep2(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size5({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment5({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit4 : int

logic p_init__t__e__last__bit4 : int

logic p_init__t__e__position4 : int

axiom p_init__t__e__first__bit_axiom4 : (0 <= p_init__t__e__first__bit4)

axiom p_init__t__e__last__bit_axiom4 :
  (p_init__t__e__first__bit4 <  p_init__t__e__last__bit4)

axiom p_init__t__e__position_axiom4 : (0 <= p_init__t__e__position4)

logic p_init__t__x2__first__bit4 : int

logic p_init__t__x2__last__bit4 : int

logic p_init__t__x2__position4 : int

axiom p_init__t__x2__first__bit_axiom4 : (0 <= p_init__t__x2__first__bit4)

axiom p_init__t__x2__last__bit_axiom4 :
  (p_init__t__x2__first__bit4 <  p_init__t__x2__last__bit4)

axiom p_init__t__x2__position_axiom4 : (0 <= p_init__t__x2__position4)

logic p_init__t__x1__first__bit4 : int

logic p_init__t__x1__last__bit4 : int

logic p_init__t__x1__position4 : int

axiom p_init__t__x1__first__bit_axiom4 : (0 <= p_init__t__x1__first__bit4)

axiom p_init__t__x1__last__bit_axiom4 :
  (p_init__t__x1__first__bit4 <  p_init__t__x1__last__bit4)

axiom p_init__t__x1__position_axiom4 : (0 <= p_init__t__x1__position4)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy22 : enum

logic dummy23 : integer

logic dummy24 : integer

logic dummy25 : bool

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref___projection(a: t1b__ref) : us_rep = (a).t1b__content

logic c1 : enum

logic c11 : integer

logic c12 : integer

logic c13 : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___String_Literal_223 : unit -> (int,character) farray

axiom temp___String_Literal_223__def_axiom :
  ((to_rep((temp___String_Literal_223(void)[1])) = 89) and
  (to_rep((temp___String_Literal_223(void)[2])) = 50))

logic temp___String_Literal_225 : unit -> (int,character) farray

axiom temp___String_Literal_225__def_axiom :
  ((to_rep((temp___String_Literal_225(void)[1])) = 90) and
  (to_rep((temp___String_Literal_225(void)[2])) = 50))

logic temp___String_Literal_229 : unit -> (int,character) farray

axiom temp___String_Literal_229__def_axiom :
  ((to_rep((temp___String_Literal_229(void)[1])) = 89) and
  (to_rep((temp___String_Literal_229(void)[2])) = 49))

logic temp___String_Literal_233 : unit -> (int,character) farray

axiom temp___String_Literal_233__def_axiom :
  ((to_rep((temp___String_Literal_233(void)[1])) = 90) and
  (to_rep((temp___String_Literal_233(void)[2])) = 49))

axiom c1__def_axiom : ((c1 = of_rep2(0)) and (((c11 = of_rep1(1)) and
  (c12 = dummy)) and (c13 = true)))

 (* File "run.adb", line 15, characters 0-0 *)
goal WP_parameter_def :
  (forall y1__split_discrs:enum. forall y2__split_fields:integer.
  forall y2__split_fields1:integer. forall y2__split_discrs:enum.
  forall z2__split_fields:integer. forall z2__split_fields1:integer.
  forall o:enum. forall o1:integer. forall o2:integer. forall o3:integer.
  forall o4:enum. forall o5:enum. forall o6:integer. forall o7:integer.
  forall o8:bool. forall o9:enum. forall o10:integer. forall o11:integer.
  forall o12:bool. forall temp___238:enum. forall temp___2381:integer.
  forall temp___2382:integer. forall temp___2383:bool.
  forall temp___220:enum. forall temp___2201:integer.
  forall temp___2202:integer. forall temp___2203:bool. forall usq_:enum.
  forall usq_1:integer. forall usq_2:integer. forall usq_3:bool.
  forall temp___222:enum. forall temp___2221:integer.
  forall temp___2222:integer. forall temp___2223:bool. forall o13:enum.
  forall o14:integer. forall o15:integer. forall o16:bool. forall o17:enum.
  forall o18:integer. forall o19:integer. forall o20:bool.
  forall temp___224:enum. forall temp___2241:integer.
  forall temp___2242:integer. forall temp___2243:bool.
  forall temp___226:enum. forall temp___2261:integer.
  forall temp___2262:integer. forall temp___2263:bool.
  forall result:us_split_fields__ref.
  forall y2__split_fields2:us_split_fields.
  forall result1:us_split_discrs__ref.
  forall y2__split_discrs1:us_split_discrs.
  forall result2:us_split_fields__ref.
  forall z2__split_fields2:us_split_fields. (((0 = to_rep2(c1)) and
  (c13 = true)) -> (((((((to_rep1(o1) = 1) and ((o1 = o2) and
  (dummy = o3))) and (((to_rep2(o) = 0) and (o = o4)) and ((o5 = o4) and
  (((o6 = o2) and (o7 = o3)) and (true = o8))))) and ((o5 = o9) and
  (((o6 = o10) and (o7 = o11)) and (o8 = o12)))) and ({ us_split_discrs1 = {
  rec__p_init__t__e = temp___238 }; us_split_fields1 = { rec__p_init__t__x1 =
  temp___2381; rec__p_init__t__x2 = temp___2382 }; attr__constrained =
  temp___2383 } = { us_split_discrs1 = { rec__p_init__t__e = o9 };
  us_split_fields1 = { rec__p_init__t__x1 = o10; rec__p_init__t__x2 = o11 };
  attr__constrained = o12 })) and ((c1 = temp___238) and
  (((c11 = temp___2381) and (c12 = temp___2382)) and
  (c13 = temp___2383)))) -> ((y1__attr__constrained = false) ->
  ((y2__attr__constrained = false) -> (((0 = to_rep2(z1__split_discrs)) and
  (z1__attr__constrained = true)) -> (((1 = to_rep2(z2__split_discrs)) and
  (z2__attr__constrained = true)) -> ((((({ us_split_discrs1 = {
  rec__p_init__t__e = temp___220 }; us_split_fields1 = { rec__p_init__t__x1 =
  temp___2201; rec__p_init__t__x2 = temp___2202 }; attr__constrained =
  temp___2203 } = init(void)) and ((((y2__attr__constrained = true) and
  (temp___220 = y2__split_discrs)) or
  (not (y2__attr__constrained = true))) and ({ us_split_discrs1 = {
  rec__p_init__t__e = usq_ }; us_split_fields1 = { rec__p_init__t__x1 =
  usq_1; rec__p_init__t__x2 = usq_2 }; attr__constrained = usq_3 } = {
  us_split_discrs1 = { rec__p_init__t__e = temp___220 }; us_split_fields1 = {
  rec__p_init__t__x1 = temp___2201; rec__p_init__t__x2 = temp___2202 };
  attr__constrained = temp___2203 }))) and ((usq_ = temp___222) and
  (((usq_1 = temp___2221) and (usq_2 = temp___2222)) and
  (y2__attr__constrained = temp___2223)))) and (((result = {
  us_split_fields__content = { rec__p_init__t__x1 = y2__split_fields;
  rec__p_init__t__x2 = y2__split_fields1 } }) and (y2__split_fields2 = {
  rec__p_init__t__x1 = temp___2221; rec__p_init__t__x2 = temp___2222 })) and
  ((result1 = { us_split_discrs__content = { rec__p_init__t__e =
  y2__split_discrs } }) and (y2__split_discrs1 = { rec__p_init__t__e =
  temp___222 })))) -> ((((({ us_split_discrs1 = { rec__p_init__t__e = o13 };
  us_split_fields1 = { rec__p_init__t__x1 = o14; rec__p_init__t__x2 = o15 };
  attr__constrained = o16 } = init(void)) and ({ us_split_discrs1 = {
  rec__p_init__t__e = o17 }; us_split_fields1 = { rec__p_init__t__x1 = o18;
  rec__p_init__t__x2 = o19 }; attr__constrained = o20 } = {
  us_split_discrs1 = { rec__p_init__t__e = o13 }; us_split_fields1 = {
  rec__p_init__t__x1 = o14; rec__p_init__t__x2 = o15 }; attr__constrained =
  o16 })) and ({ us_split_discrs1 = { rec__p_init__t__e = temp___224 };
  us_split_fields1 = { rec__p_init__t__x1 = temp___2241; rec__p_init__t__x2 =
  temp___2242 }; attr__constrained = temp___2243 } = { us_split_discrs1 = {
  rec__p_init__t__e = o17 }; us_split_fields1 = { rec__p_init__t__x1 = o18;
  rec__p_init__t__x2 = o19 }; attr__constrained = o20 })) and (((result2 = {
  us_split_fields__content = { rec__p_init__t__x1 = z2__split_fields;
  rec__p_init__t__x2 = z2__split_fields1 } }) and (z2__split_fields2 = {
  rec__p_init__t__x1 = temp___2241; rec__p_init__t__x2 = temp___2242 })) and
  (z2__split_discrs = temp___224))) -> (({ us_split_discrs1 = {
  rec__p_init__t__e = temp___226 }; us_split_fields1 = { rec__p_init__t__x1 =
  temp___2261; rec__p_init__t__x2 = temp___2262 }; attr__constrained =
  temp___2263 } = init(void)) -> ((y1__attr__constrained = true) ->
  (temp___226 = y1__split_discrs))))))))))))
