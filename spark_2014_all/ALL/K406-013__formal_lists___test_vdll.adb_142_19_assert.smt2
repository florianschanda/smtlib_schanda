;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__formal_container__vdll__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__formal_container__vdll__list__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__formal_container__vdll__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type
  (rec__formal_container__vdll__list a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__formal_container__vdll__list__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__formal_container__vdll__list__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__formal_container__vdll__list
                           (us_split_fields1 a))
                           (rec__formal_container__vdll__list
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const formal_container__vdll__list__capacity__first__bit Int)

(declare-const formal_container__vdll__list__capacity__last__bit Int)

(declare-const formal_container__vdll__list__capacity__position Int)

;; formal_container__vdll__list__capacity__first__bit_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__first__bit))

;; formal_container__vdll__list__capacity__last__bit_axiom
  (assert
  (< formal_container__vdll__list__capacity__first__bit formal_container__vdll__list__capacity__last__bit))

;; formal_container__vdll__list__capacity__position_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__formal_container__vdll__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__formal_container__vdll__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__formal_container__vdll__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__formal_container__vdll__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const formal_container__vdll__cursor__node__first__bit Int)

(declare-const formal_container__vdll__cursor__node__last__bit Int)

(declare-const formal_container__vdll__cursor__node__position Int)

;; formal_container__vdll__cursor__node__first__bit_axiom
  (assert (<= 0 formal_container__vdll__cursor__node__first__bit))

;; formal_container__vdll__cursor__node__last__bit_axiom
  (assert
  (< formal_container__vdll__cursor__node__first__bit formal_container__vdll__cursor__node__last__bit))

;; formal_container__vdll__cursor__node__position_axiom
  (assert (<= 0 formal_container__vdll__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(define-fun default_initial_assumption ((temp___expr_159 us_rep1)
  (temp___skip_top_level_160 Bool)) Bool (= (to_rep
                                            (rec__formal_container__vdll__cursor__node
                                            (us_split_fields3
                                            temp___expr_159))) 0))

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_141)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__formal_container__vdll__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant1 result true false true))) :pattern ((length
                                                             container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                   a))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))

(declare-fun oeq1 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep3 us_rep3) Bool)

(declare-fun model__ (us_rep) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep) Bool)

(declare-fun positions (us_rep) us_rep3)

(declare-fun positions__function_guard (us_rep3 us_rep) Bool)

(declare-fun copy (us_rep Int) us_rep)

(declare-fun copy__function_guard (us_rep us_rep Int) Bool)

;; copy__post_axiom
  (assert
  (forall ((source us_rep))
  (forall ((capacity Int))
  (! (=>
     (and (dynamic_invariant1 capacity true true true)
     (or (= capacity 0)
     (<= (to_rep
         (rec__formal_container__vdll__list__capacity
         (us_split_discrs1 source))) capacity)))
     (let ((result (copy source capacity)))
     (and
     (and (= (oeq (model__ result) (model__ source)) true)
     (= (oeq1 (positions result) (positions source)) true))
     (ite (= capacity 0)
     (= (to_rep
        (rec__formal_container__vdll__list__capacity
        (us_split_discrs1 result))) (to_rep
                                    (rec__formal_container__vdll__list__capacity
                                    (us_split_discrs1 source))))
     (= (to_rep
        (rec__formal_container__vdll__list__capacity
        (us_split_discrs1 result))) capacity))))) :pattern ((copy source
                                                            capacity)) ))))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep1 (key_type__content
                                                                   a))

(declare-fun has_key (us_rep3 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep3 us_rep1) Bool)

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun last1 (us_rep) us_rep1)

(declare-fun last__function_guard1 (us_rep1 us_rep) Bool)

(declare-fun get1 (us_rep3 us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep3 us_rep1) Bool)

;; last__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (last1 container)))
     (ite (= (length container) 0) (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (length container))))) :pattern (
  (last1 container)) )))

(define-fun ole ((left us_rep2)
  (right us_rep2)) Bool (and (<= (length1 left) (length1 right)) (ite
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n
                                                                 (last left)))
                                                                 (= (get left
                                                                    n)
                                                                 (get right
                                                                 n)))) true
                                                                 false)))

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

(define-fun range_equal ((left us_rep2) (right us_rep2) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (get left i) (get right i))))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)

(define-fun range_shifted ((left us_rep2) (right us_rep2) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get left i) (get right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get left (- i offset))
                                           (get right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep2 us_rep2 Int Int
  Int) Bool)

(declare-fun ole1 (us_rep3 us_rep3) Bool)

(declare-fun ole__function_guard1 (Bool us_rep3 us_rep3) Bool)

(declare-fun keys_included_except (us_rep3 us_rep3 us_rep1) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep3 us_rep3
  us_rep1) Bool)

(declare-fun p_positions_shifted (us_rep3 us_rep3 Int Int) Bool)

(declare-fun p_positions_shifted__function_guard (Bool us_rep3 us_rep3 Int
  Int) Bool)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun p_positions_truncated (us_rep3 us_rep3 Int Int) Bool)

(declare-fun p_positions_truncated__function_guard (Bool us_rep3 us_rep3 Int
  Int) Bool)

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

(declare-sort element_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq6 (element_type element_type) Bool)

(declare-const dummy6 element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_147)))

(declare-fun first_element (us_rep) Int)

(declare-fun first_element__function_guard (Int us_rep) Bool)

;; first_element__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (not (= (is_empty container) true))
     (let ((result (first_element container)))
     (and (= result (get (model__ container) 1)) (dynamic_invariant2 result
     true false true)))) :pattern ((first_element container)) )))

(declare-fun last_element (us_rep) Int)

(declare-fun last_element__function_guard (Int us_rep) Bool)

;; last_element__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (not (= (is_empty container) true))
     (let ((result (last_element container)))
     (and (= result (get (model__ container) (length container)))
     (dynamic_invariant2 result true false true)))) :pattern ((last_element
                                                              container)) )))

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq1 position no_element) true)
          (= (get1 (positions container) position) (length container)))
     (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

(declare-fun previous (us_rep us_rep1) us_rep1)

(declare-fun previous__function_guard (us_rep1 us_rep us_rep1) Bool)

;; previous__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true))
     (let ((result (previous container position)))
     (ite (or (= (bool_eq1 position no_element) true)
          (= (get1 (positions container) position) 1))
     (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (- (get1 (positions container)
                                               position) 1)))))) :pattern (
  (previous container position)) ))))

(declare-fun find (us_rep Int us_rep1) us_rep1)

(declare-fun find__function_guard (us_rep1 us_rep Int us_rep1) Bool)

(define-fun contains ((container us_rep2) (fst Int) (lst Int)
  (item Int)) Bool (ite (exists ((i Int))
                        (and (and (<= fst i) (<= i lst))
                        (= (get container i) item)))
                   true false))

(declare-fun contains__function_guard (Bool us_rep2 Int Int Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (forall ((position us_rep1))
  (! (=>
     (and (dynamic_invariant2 item true true true)
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true)))
     (let ((result (find container item position)))
     (ite (not
          (= (contains (model__ container)
             (ite (= (bool_eq1 position no_element) true) 1
             (get1 (positions container) position)) (length container) item) true))
     (= (bool_eq1 result no_element) true)
     (and
     (and
     (and (= (has_key (positions container) result) true)
     (= (get (model__ container) (get1 (positions container) result)) item))
     (=> (not (= (bool_eq1 position no_element) true))
     (<= (get1 (positions container) position) (get1 (positions container)
                                               result))))
     (not
     (= (contains (model__ container)
        (ite (= (bool_eq1 position no_element) true) 1
        (get1 (positions container) position))
        (- (get1 (positions container) result) 1) item) true)))))) :pattern (
  (find container item position)) )))))

(define-fun in_range4 ((rec__formal_container__vdll__list__capacity1 Int)
  (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep
                                                                   (rec__formal_container__vdll__list__capacity
                                                                   (us_split_discrs1
                                                                   a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-const formal_container__vdll__list__capacity__first__bit1 Int)

(declare-const formal_container__vdll__list__capacity__last__bit1 Int)

(declare-const formal_container__vdll__list__capacity__position1 Int)

;; formal_container__vdll__list__capacity__first__bit_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__first__bit1))

;; formal_container__vdll__list__capacity__last__bit_axiom
  (assert
  (< formal_container__vdll__list__capacity__first__bit1 formal_container__vdll__list__capacity__last__bit1))

;; formal_container__vdll__list__capacity__position_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__position1))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((tl1S__ref (mk_tl1S__ref (tl1S__content us_rep)))))
(define-fun tl1S__ref___projection ((a tl1S__ref)) us_rep (tl1S__content a))

(define-fun dynamic_invariant3 ((temp___expr_355 us_rep)
  (temp___is_init_352 Bool) (temp___skip_constant_353 Bool)
  (temp___do_toplevel_354 Bool)) Bool (=>
                                      (not (= temp___skip_constant_353 true))
                                      (in_range4 3 temp___expr_355)))

(define-fun default_initial_assumption1 ((temp___expr_357 us_rep)
  (temp___skip_top_level_358 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__formal_container__vdll__list__capacity
                                            (us_split_discrs1
                                            temp___expr_357))) 3)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_358 true))
                                         (= (is_empty temp___expr_357) true))))

(declare-const l1__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range5 ((rec__formal_container__vdll__list__capacity1 Int)
  (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep
                                                                   (rec__formal_container__vdll__list__capacity
                                                                   (us_split_discrs1
                                                                   a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const formal_container__vdll__list__capacity__first__bit2 Int)

(declare-const formal_container__vdll__list__capacity__last__bit2 Int)

(declare-const formal_container__vdll__list__capacity__position2 Int)

;; formal_container__vdll__list__capacity__first__bit_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__first__bit2))

;; formal_container__vdll__list__capacity__last__bit_axiom
  (assert
  (< formal_container__vdll__list__capacity__first__bit2 formal_container__vdll__list__capacity__last__bit2))

;; formal_container__vdll__list__capacity__position_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__position2))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes () ((tl2S__ref (mk_tl2S__ref (tl2S__content us_rep)))))
(define-fun tl2S__ref___projection ((a tl2S__ref)) us_rep (tl2S__content a))

(define-fun dynamic_invariant4 ((temp___expr_364 us_rep)
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)) Bool (=>
                                      (not (= temp___skip_constant_362 true))
                                      (in_range5 3 temp___expr_364)))

(define-fun default_initial_assumption2 ((temp___expr_366 us_rep)
  (temp___skip_top_level_367 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__formal_container__vdll__list__capacity
                                            (us_split_discrs1
                                            temp___expr_366))) 3)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_367 true))
                                         (= (is_empty temp___expr_366) true))))

(declare-const l2__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun in_range6 ((rec__formal_container__vdll__list__capacity1 Int)
  (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep
                                                                   (rec__formal_container__vdll__list__capacity
                                                                   (us_split_discrs1
                                                                   a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const formal_container__vdll__list__capacity__first__bit3 Int)

(declare-const formal_container__vdll__list__capacity__last__bit3 Int)

(declare-const formal_container__vdll__list__capacity__position3 Int)

;; formal_container__vdll__list__capacity__first__bit_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__first__bit3))

;; formal_container__vdll__list__capacity__last__bit_axiom
  (assert
  (< formal_container__vdll__list__capacity__first__bit3 formal_container__vdll__list__capacity__last__bit3))

;; formal_container__vdll__list__capacity__position_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__position3))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes () ((tl3S__ref (mk_tl3S__ref (tl3S__content us_rep)))))
(define-fun tl3S__ref___projection ((a tl3S__ref)) us_rep (tl3S__content a))

(define-fun dynamic_invariant5 ((temp___expr_373 us_rep)
  (temp___is_init_370 Bool) (temp___skip_constant_371 Bool)
  (temp___do_toplevel_372 Bool)) Bool (=>
                                      (not (= temp___skip_constant_371 true))
                                      (in_range6 3 temp___expr_373)))

(define-fun default_initial_assumption3 ((temp___expr_375 us_rep)
  (temp___skip_top_level_376 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__formal_container__vdll__list__capacity
                                            (us_split_discrs1
                                            temp___expr_375))) 3)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_376 true))
                                         (= (is_empty temp___expr_375) true))))

(declare-const l3__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun in_range7 ((rec__formal_container__vdll__list__capacity1 Int)
  (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep
                                                                   (rec__formal_container__vdll__list__capacity
                                                                   (us_split_discrs1
                                                                   a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment7 a))))

(declare-const formal_container__vdll__list__capacity__first__bit4 Int)

(declare-const formal_container__vdll__list__capacity__last__bit4 Int)

(declare-const formal_container__vdll__list__capacity__position4 Int)

;; formal_container__vdll__list__capacity__first__bit_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__first__bit4))

;; formal_container__vdll__list__capacity__last__bit_axiom
  (assert
  (< formal_container__vdll__list__capacity__first__bit4 formal_container__vdll__list__capacity__last__bit4))

;; formal_container__vdll__list__capacity__position_axiom
  (assert (<= 0 formal_container__vdll__list__capacity__position4))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes () ((tl4S__ref (mk_tl4S__ref (tl4S__content us_rep)))))
(define-fun tl4S__ref___projection ((a tl4S__ref)) us_rep (tl4S__content a))

(define-fun dynamic_invariant6 ((temp___expr_382 us_rep)
  (temp___is_init_379 Bool) (temp___skip_constant_380 Bool)
  (temp___do_toplevel_381 Bool)) Bool (=>
                                      (not (= temp___skip_constant_380 true))
                                      (in_range7 5 temp___expr_382)))

(define-fun default_initial_assumption4 ((temp___expr_384 us_rep)
  (temp___skip_top_level_385 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__formal_container__vdll__list__capacity
                                            (us_split_discrs1
                                            temp___expr_384))) 5)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_385 true))
                                         (= (is_empty temp___expr_384) true))))

(declare-const l4__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun test_element (us_rep us_rep1 Int) Bool)

(declare-fun test_element__function_guard (Bool us_rep us_rep1 Int) Bool)

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get (model__ container)
                          (get1 (positions container) position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

;; test_element__post_axiom
  (assert true)

;; test_element__def_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (forall ((result__ Int))
  (! (= (= (test_element container position result__) true)
     (= (element container position) result__)) :pattern ((test_element
                                                          container position
                                                          result__)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-sort t7b 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq11 (t7b t7b) Bool)

(declare-const dummy11 t7b)

(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content t7b)))))
(define-fun t7b__ref___projection ((a t7b__ref)) t7b (t7b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

(declare-sort positive_count_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq12 (positive_count_type positive_count_type) Bool)

(declare-const dummy12 positive_count_type)

(declare-datatypes ()
((positive_count_type__ref
 (mk_positive_count_type__ref
 (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type
  (positive_count_type__content a))

(define-fun dynamic_invariant7 ((temp___expr_166 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool (=>
                                      (or (= temp___is_init_163 true)
                                      (<= 1 2147483647)) (in_range9
                                      temp___expr_166)))

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-fun is_empty1 (us_rep3) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep3) Bool)

(define-fun default_initial_assumption5 ((temp___expr_210 us_rep3)
  (temp___skip_top_level_211 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_211 true))
                                         (and
                                         (= (is_empty1 temp___expr_210) true)
                                         (= (length2 temp___expr_210) 0))))

(declare-fun keys_included (us_rep3 us_rep3) Bool)

(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

(define-fun default_initial_assumption6 ((temp___expr_198 us_rep1)
  (temp___skip_top_level_199 Bool)) Bool (= (to_rep
                                            (rec__formal_container__vdll__cursor__node
                                            (us_split_fields3
                                            temp___expr_198))) 0))

;; p_positions_shifted__post_axiom
  (assert
  (forall ((small us_rep3) (big us_rep3))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant7 cut true true true) (dynamic_invariant1 count
     true true true))
     (= (= (p_positions_shifted small big cut count) true)
     (and
     (and (= (keys_included small big) true)
     (forall ((i us_rep1))
     (=> (= (has_key small i) true)
     (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i))
     (= (- (get1 big i) count) (get1 small i))))))
     (forall ((i us_rep1))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get1 big i) count))
     (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted
                                                            small big cut
                                                            count)) ))))

;; p_positions_truncated__post_axiom
  (assert
  (forall ((small us_rep3) (big us_rep3))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant7 cut true true true) (dynamic_invariant1 count
     true true true))
     (= (= (p_positions_truncated small big cut count) true)
     (and (= (ole1 small big) true)
     (forall ((i us_rep1))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get1 big i) count))
     (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_truncated
                                                            small big cut
                                                            count)) ))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_191 us_rep2)
  (temp___skip_top_level_192 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_192 true))
                                         (= (length1 temp___expr_191) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq13 (extended_index extended_index) Bool)

(declare-const dummy13 extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant8 ((temp___expr_184 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)) Bool (=>
                                      (or (= temp___is_init_181 true)
                                      (<= 0 2147483647)) (in_range10
                                      temp___expr_184)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true))) :pattern ((length1 container)) )))

(declare-sort element_type1 0)

(define-fun in_range11 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq14 (element_type1 element_type1) Bool)

(declare-const dummy14 element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant9 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range11 temp___expr_178)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant8 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant9 (get container position) true false true)) :pattern (
  (get container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key container k) true) (= (bool_eq1 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-sort element_type2 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq15 (element_type2 element_type2) Bool)

(declare-const dummy15 element_type2)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2
  (element_type__content2 a))

(define-fun dynamic_invariant10 ((temp___expr_203 Int)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)) Bool (=>
                                      (or (= temp___is_init_200 true)
                                      (<= 1 2147483647)) (in_range12
                                      temp___expr_203)))

(declare-fun witness (us_rep3 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep3 us_rep1) Bool)

(declare-fun w_get (us_rep3 Int) Int)

(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key container k) true)
     (= (= (bool_eq1 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant10 result true false true)))) :pattern ((get1
                                                               container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (dynamic_invariant1 (length2 container)
  true false true) :pattern ((length2 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (ole1 left right) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))) :pattern (
  (ole1 left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key us_rep1))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (= (is_empty1 container) true)
     (forall ((key us_rep1)) (not (= (has_key container key) true)))) :pattern (
  (is_empty1 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (keys_included left right) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern (
  (keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (forall ((new_key us_rep1))
  (! (= (= (keys_included_except left right new_key) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (=> (not (= (bool_eq1 key new_key) true)) (= (has_key right key) true))))) :pattern (
  (keys_included_except left right new_key)) ))))

(declare-fun has_witness (us_rep3 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant1 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant1 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant10
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-const l1__split_fields us_main_type)

(declare-const l2__split_fields us_main_type)

(declare-const l3__split_fields us_main_type)

(declare-const l4__split_fields us_main_type)

(declare-const c__split_fields count_type)

(declare-const e__split_fields count_type)

(declare-const e__split_fields1 count_type)

(declare-const o count_type)

(declare-const o1 us_split_fields2)

(declare-const temp___443 us_rep1)

(declare-const us Int)

(declare-const us1 Int)

(declare-const us2 Int)

(declare-const us3 Int)

(declare-const o2 us_rep)

(declare-const o3 us_rep)

(declare-const temp___405 us_rep)

(declare-const o4 us_rep)

(declare-const o5 us_rep)

(declare-const temp___408 us_rep)

(declare-const o6 us_rep1)

(declare-const temp___409 us_rep1)

(declare-const o7 us_rep)

(declare-const o8 us_rep)

(declare-const temp___411 us_rep)

(declare-const o9 us_rep)

(declare-const o10 us_rep)

(declare-const temp___418 us_rep)

(declare-const o11 us_rep)

(declare-const o12 us_rep)

(declare-const temp___423 us_rep)

(declare-const formal_container__vdll__insert__container__fields us_split_fields)

(declare-const result us_split_fields__ref)

(declare-const l1__split_fields1 us_split_fields)

(declare-const result1 us_split_fields__ref)

(declare-const l2__split_fields1 us_split_fields)

(declare-const formal_container__vdll__append__container__fields us_split_fields)

(declare-const result2 us_split_fields__ref)

(declare-const l2__split_fields2 us_split_fields)

(declare-const formal_container__vdll__append__container__fields1 us_split_fields)

(declare-const result3 us_split_fields__ref)

(declare-const l2__split_fields3 us_split_fields)

(declare-const result4 us_split_fields__ref)

(declare-const l1__split_fields2 us_split_fields)

(declare-const result5 us_split_fields__ref1)

(declare-const c__split_fields1 us_split_fields2)

(declare-const c__split_fields2 us_split_fields2)

(declare-const formal_container__vdll__delete__container__fields us_split_fields)

(declare-const result6 us_split_fields__ref)

(declare-const l2__split_fields4 us_split_fields)

(declare-const result7 us_split_fields__ref)

(declare-const l1__split_fields3 us_split_fields)

(declare-const formal_container__vdll__append__container__fields2 us_split_fields)

(declare-const result8 us_split_fields__ref)

(declare-const l1__split_fields4 us_split_fields)

(declare-const result9 us_split_fields__ref)

(declare-const l3__split_fields1 us_split_fields)

(declare-const formal_container__vdll__delete_last__container__fields us_split_fields)

(declare-const result10 us_split_fields__ref)

(declare-const l3__split_fields2 us_split_fields)

(declare-const result11 us_split_fields__ref)

(declare-const l4__split_fields1 us_split_fields)

(declare-const formal_container__vdll__delete_last__2__container__fields us_split_fields)

(declare-const result12 us_split_fields__ref)

(declare-const l4__split_fields2 us_split_fields)

(declare-const result13 us_split_fields__ref)

(declare-const l2__split_fields5 us_split_fields)

(declare-const formal_container__vdll__delete_last__container__fields1 us_split_fields)

(declare-const result14 us_split_fields__ref)

(declare-const l2__split_fields6 us_split_fields)

(declare-const result15 us_split_fields__ref)

(declare-const l3__split_fields3 us_split_fields)

(declare-const formal_container__vdll__delete_first__container__fields us_split_fields)

(declare-const result16 us_split_fields__ref)

(declare-const l3__split_fields4 us_split_fields)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o1 (mk___split_fields1 o)))

;; H
  (assert (= temp___443 (mk___rep1 o1)))

;; H
  (assert (= temp___443 no_element))

;; H
  (assert (and (= us 3) (in_range2 3)))

;; H
  (assert (default_initial_assumption1
  (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)) false))

;; H
  (assert
  (= 3 (to_rep
       (rec__formal_container__vdll__list__capacity l1__split_discrs))))

;; H
  (assert (and (= us1 3) (in_range2 3)))

;; H
  (assert (default_initial_assumption2
  (mk___rep l2__split_discrs (mk___split_fields l2__split_fields)) false))

;; H
  (assert
  (= 3 (to_rep
       (rec__formal_container__vdll__list__capacity l2__split_discrs))))

;; H
  (assert (and (= us2 3) (in_range2 3)))

;; H
  (assert (default_initial_assumption3
  (mk___rep l3__split_discrs (mk___split_fields l3__split_fields)) false))

;; H
  (assert
  (= 3 (to_rep
       (rec__formal_container__vdll__list__capacity l3__split_discrs))))

;; H
  (assert (and (= us3 5) (in_range2 5)))

;; H
  (assert (default_initial_assumption4
  (mk___rep l4__split_discrs (mk___split_fields l4__split_fields)) false))

;; H
  (assert
  (= 5 (to_rep
       (rec__formal_container__vdll__list__capacity l4__split_discrs))))

;; H
  (assert (= (to_rep c__split_fields) 0))

;; H
  (assert
  (not
  (= (has_key
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (first (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))) true)))

;; H
  (assert
  (and
  (= (length
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields)) (+ (length
                                                            (mk___rep
                                                            l1__split_discrs
                                                            (mk___split_fields
                                                            l1__split_fields))) 1))
  (ite (= (bool_eq1 no_element no_element) true)
  (and
  (and
  (and
  (and
  (= (get1
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))
     (last1
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))) (length
                                                          (mk___rep
                                                          l1__split_discrs
                                                          formal_container__vdll__insert__container__fields)))
  (= (keys_included_except
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (last1
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))) true))
  (= (ole1
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))) true))
  (= (get
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))
     (length
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))) 1))
  (= (ole
     (model__
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))) true))
  (and
  (and
  (and
  (= (range_equal
     (model__
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields)) 1
     (- (get1
        (positions
        (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
        no_element) 1)) true)
  (= (range_shifted
     (model__
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))
     (get1
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     no_element)
     (length
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) 1) true))
  (= (get
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))
     (get1
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     no_element)) 1))
  (= (p_positions_shifted
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__insert__container__fields))
     (get1
     (positions
     (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))
     no_element) 1) true)))))

;; H
  (assert
  (= result (mk___split_fields__ref (mk___split_fields l1__split_fields))))

;; H
  (assert
  (= l1__split_fields1 formal_container__vdll__insert__container__fields))

;; H
  (assert
  (= (has_key (positions (mk___rep l1__split_discrs l1__split_fields1))
     (first (mk___rep l1__split_discrs l1__split_fields1))) true))

;; H
  (assert
  (and (= o2 (copy (mk___rep l1__split_discrs l1__split_fields1) 3))
  (and
  (and
  (= (oeq (model__ o2)
     (model__ (mk___rep l1__split_discrs l1__split_fields1))) true)
  (= (oeq1 (positions o2)
     (positions (mk___rep l1__split_discrs l1__split_fields1))) true))
  (ite (= 3 0)
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o2)))
  (to_rep (rec__formal_container__vdll__list__capacity l1__split_discrs)))
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o2))) 3)))))

;; H
  (assert (= o3 o2))

;; H
  (assert (= temp___405 o3))

;; H
  (assert
  (= result1 (mk___split_fields__ref (mk___split_fields l2__split_fields))))

;; H
  (assert (= l2__split_fields1 (us_split_fields1 temp___405)))

;; H
  (assert (= l2__split_discrs (us_split_discrs1 temp___405)))

;; H
  (assert
  (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields1))
     (first (mk___rep l1__split_discrs l1__split_fields1))) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields)) (+ (length
                                                            (mk___rep
                                                            l2__split_discrs
                                                            l2__split_fields1)) 1))
  (= (get1
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))
     (last1
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))) (length
                                                          (mk___rep
                                                          l2__split_discrs
                                                          formal_container__vdll__append__container__fields))))
  (= (keys_included_except
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))
     (positions (mk___rep l2__split_discrs l2__split_fields1))
     (last1
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))) true))
  (= (ole1 (positions (mk___rep l2__split_discrs l2__split_fields1))
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))) true))
  (= (get
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))
     (length
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))) 2))
  (= (ole (model__ (mk___rep l2__split_discrs l2__split_fields1))
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields))) true)))

;; H
  (assert (= result2 (mk___split_fields__ref l2__split_fields1)))

;; H
  (assert
  (= l2__split_fields2 formal_container__vdll__append__container__fields))

;; H
  (assert
  (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields2))
     (next (mk___rep l2__split_discrs l2__split_fields2)
     (first (mk___rep l1__split_discrs l1__split_fields1)))) true))

;; H
  (assert
  (= (test_element (mk___rep l2__split_discrs l2__split_fields2)
     (next (mk___rep l2__split_discrs l2__split_fields2)
     (first (mk___rep l1__split_discrs l1__split_fields1))) 2) true))

;; H
  (assert
  (not
  (= (has_key (positions (mk___rep l1__split_discrs l1__split_fields1))
     (next (mk___rep l2__split_discrs l2__split_fields2)
     (first (mk___rep l1__split_discrs l1__split_fields1)))) true)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1)) (+ (length
                                                             (mk___rep
                                                             l2__split_discrs
                                                             l2__split_fields2)) 1))
  (= (get1
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))
     (last1
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))) (length
                                                           (mk___rep
                                                           l2__split_discrs
                                                           formal_container__vdll__append__container__fields1))))
  (= (keys_included_except
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))
     (positions (mk___rep l2__split_discrs l2__split_fields2))
     (last1
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))) true))
  (= (ole1 (positions (mk___rep l2__split_discrs l2__split_fields2))
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))) true))
  (= (get
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))
     (length
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))) 3))
  (= (ole (model__ (mk___rep l2__split_discrs l2__split_fields2))
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__append__container__fields1))) true)))

;; H
  (assert (= result3 (mk___split_fields__ref l2__split_fields2)))

;; H
  (assert
  (= l2__split_fields3 formal_container__vdll__append__container__fields1))

;; H
  (assert
  (and (= o4 (copy (mk___rep l2__split_discrs l2__split_fields3) 3))
  (and
  (and
  (= (oeq (model__ o4)
     (model__ (mk___rep l2__split_discrs l2__split_fields3))) true)
  (= (oeq1 (positions o4)
     (positions (mk___rep l2__split_discrs l2__split_fields3))) true))
  (ite (= 3 0)
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o4)))
  (to_rep (rec__formal_container__vdll__list__capacity l2__split_discrs)))
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o4))) 3)))))

;; H
  (assert (= o5 o4))

;; H
  (assert (= temp___408 o5))

;; H
  (assert (= result4 (mk___split_fields__ref l1__split_fields1)))

;; H
  (assert (= l1__split_fields2 (us_split_fields1 temp___408)))

;; H
  (assert (= l1__split_discrs (us_split_discrs1 temp___408)))

;; H
  (assert
  (and (= o6 (first (mk___rep l2__split_discrs l2__split_fields3)))
  (ite (= (= (length (mk___rep l2__split_discrs l2__split_fields3)) 0) true)
  (= (bool_eq1 o6 no_element) true)
  (and
  (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields3)) o6) true)
  (= (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) o6) 1)))))

;; H
  (assert
  (and (= temp___409 (next (mk___rep l2__split_discrs l2__split_fields3) o6))
  (ite (= (ite (= (bool_eq1 o6 no_element) false) (= (get1
                                                     (positions
                                                     (mk___rep
                                                     l2__split_discrs
                                                     l2__split_fields3))
                                                     o6) (length
                                                         (mk___rep
                                                         l2__split_discrs
                                                         l2__split_fields3))) true) true)
  (= (bool_eq1 temp___409 no_element) true)
  (and
  (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields3))
     temp___409) true)
  (= (get1 (positions (mk___rep l2__split_discrs l2__split_fields3))
     temp___409) (+ (get1
                    (positions (mk___rep l2__split_discrs l2__split_fields3))
                    o6) 1))))))

;; H
  (assert
  (= result5 (mk___split_fields__ref1 (mk___split_fields1 c__split_fields))))

;; H
  (assert (= c__split_fields1 (us_split_fields3 temp___409)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l2__split_discrs
     formal_container__vdll__delete__container__fields)) (- (length
                                                            (mk___rep
                                                            l2__split_discrs
                                                            l2__split_fields3)) 1))
  (= (bool_eq1 (mk___rep1 c__split_fields2) no_element) true))
  (= (range_equal (model__ (mk___rep l2__split_discrs l2__split_fields3))
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__delete__container__fields)) 1
     (- (get1 (positions (mk___rep l2__split_discrs l2__split_fields3))
        (mk___rep1 c__split_fields1)) 1)) true))
  (= (range_shifted
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__delete__container__fields))
     (model__ (mk___rep l2__split_discrs l2__split_fields3))
     (get1 (positions (mk___rep l2__split_discrs l2__split_fields3))
     (mk___rep1 c__split_fields1))
     (length
     (mk___rep l2__split_discrs
     formal_container__vdll__delete__container__fields)) 1) true))
  (= (p_positions_shifted
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__delete__container__fields))
     (positions (mk___rep l2__split_discrs l2__split_fields3))
     (get1 (positions (mk___rep l2__split_discrs l2__split_fields3))
     (mk___rep1 c__split_fields1)) 1) true)))

;; H
  (assert (= result6 (mk___split_fields__ref l2__split_fields3)))

;; H
  (assert
  (= l2__split_fields4 formal_container__vdll__delete__container__fields))

;; H
  (assert
  (not
  (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields4))
     (next (mk___rep l1__split_discrs l1__split_fields2)
     (first (mk___rep l1__split_discrs l1__split_fields2)))) true)))

;; H
  (assert
  (and (= o7 (copy (mk___rep l2__split_discrs l2__split_fields4) 3))
  (and
  (and
  (= (oeq (model__ o7)
     (model__ (mk___rep l2__split_discrs l2__split_fields4))) true)
  (= (oeq1 (positions o7)
     (positions (mk___rep l2__split_discrs l2__split_fields4))) true))
  (ite (= 3 0)
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o7)))
  (to_rep (rec__formal_container__vdll__list__capacity l2__split_discrs)))
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o7))) 3)))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= temp___411 o8))

;; H
  (assert (= result7 (mk___split_fields__ref l1__split_fields2)))

;; H
  (assert (= l1__split_fields3 (us_split_fields1 temp___411)))

;; H
  (assert (= l1__split_discrs (us_split_discrs1 temp___411)))

;; H
  (assert
  (= (has_key (positions (mk___rep l1__split_discrs l1__split_fields3))
     (next (mk___rep l2__split_discrs l2__split_fields4)
     (first (mk___rep l2__split_discrs l2__split_fields4)))) true))

;; H
  (assert
  (= (test_element (mk___rep l1__split_discrs l1__split_fields3)
     (next (mk___rep l2__split_discrs l2__split_fields4)
     (first (mk___rep l2__split_discrs l2__split_fields4))) 3) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2)) (+ (length
                                                             (mk___rep
                                                             l1__split_discrs
                                                             l1__split_fields3)) 1))
  (= (get1
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))
     (last1
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))) (length
                                                           (mk___rep
                                                           l1__split_discrs
                                                           formal_container__vdll__append__container__fields2))))
  (= (keys_included_except
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))
     (positions (mk___rep l1__split_discrs l1__split_fields3))
     (last1
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))) true))
  (= (ole1 (positions (mk___rep l1__split_discrs l1__split_fields3))
     (positions
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))) true))
  (= (get
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))
     (length
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))) 4))
  (= (ole (model__ (mk___rep l1__split_discrs l1__split_fields3))
     (model__
     (mk___rep l1__split_discrs
     formal_container__vdll__append__container__fields2))) true)))

;; H
  (assert (= result8 (mk___split_fields__ref l1__split_fields3)))

;; H
  (assert
  (= l1__split_fields4 formal_container__vdll__append__container__fields2))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l1__split_discrs l1__split_fields4) 3 no_element)
     (next (mk___rep l1__split_discrs l1__split_fields4)
     (first (mk___rep l1__split_discrs l1__split_fields4)))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l1__split_discrs l1__split_fields4) 4 no_element)
     (last1 (mk___rep l1__split_discrs l1__split_fields4))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l1__split_discrs l1__split_fields4) 3 no_element)
     (previous (mk___rep l1__split_discrs l1__split_fields4)
     (last1 (mk___rep l1__split_discrs l1__split_fields4)))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l1__split_discrs l1__split_fields4) 1
     (next (mk___rep l1__split_discrs l1__split_fields4)
     (first (mk___rep l1__split_discrs l1__split_fields4)))) no_element) true))

;; H
  (assert
  (= result9 (mk___split_fields__ref (mk___split_fields l3__split_fields))))

;; H
  (assert (= l3__split_fields1 l1__split_fields4))

;; H
  (assert (= l3__split_discrs l1__split_discrs))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_last__container__fields)) (- (length
                                                                 (mk___rep
                                                                 l3__split_discrs
                                                                 l3__split_fields1)) 1))
  (= (ole
     (model__
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_last__container__fields))
     (model__ (mk___rep l3__split_discrs l3__split_fields1))) true))
  (not
  (= (has_key
     (positions
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_last__container__fields))
     (last1 (mk___rep l3__split_discrs l3__split_fields1))) true)))
  (= (keys_included_except
     (positions (mk___rep l3__split_discrs l3__split_fields1))
     (positions (mk___rep l3__split_discrs l3__split_fields1))
     (last1 (mk___rep l3__split_discrs l3__split_fields1))) true))
  (= (ole1
     (positions
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_last__container__fields))
     (positions (mk___rep l3__split_discrs l3__split_fields1))) true)))

;; H
  (assert (= result10 (mk___split_fields__ref l3__split_fields1)))

;; H
  (assert
  (= l3__split_fields2 formal_container__vdll__delete_last__container__fields))

;; H
  (assert (= (length (mk___rep l3__split_discrs l3__split_fields2)) 2))

;; H
  (assert
  (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields2))
     (first (mk___rep l3__split_discrs l3__split_fields2))) true))

;; H
  (assert
  (= (test_element (mk___rep l3__split_discrs l3__split_fields2)
     (first (mk___rep l3__split_discrs l3__split_fields2)) 1) true))

;; H
  (assert
  (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields2))
     (next (mk___rep l3__split_discrs l3__split_fields2)
     (first (mk___rep l3__split_discrs l3__split_fields2)))) true))

;; H
  (assert
  (= (test_element (mk___rep l3__split_discrs l3__split_fields2)
     (next (mk___rep l3__split_discrs l3__split_fields2)
     (first (mk___rep l3__split_discrs l3__split_fields2))) 3) true))

;; H
  (assert
  (not
  (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields2))
     (next (mk___rep l1__split_discrs l1__split_fields4)
     (next (mk___rep l3__split_discrs l3__split_fields2)
     (first (mk___rep l3__split_discrs l3__split_fields2))))) true)))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l3__split_discrs l3__split_fields2) 3 no_element)
     (next (mk___rep l3__split_discrs l3__split_fields2)
     (first (mk___rep l3__split_discrs l3__split_fields2)))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l3__split_discrs l3__split_fields2) 3 no_element)
     (last1 (mk___rep l3__split_discrs l3__split_fields2))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l3__split_discrs l3__split_fields2) 1 no_element)
     (first (mk___rep l3__split_discrs l3__split_fields2))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l3__split_discrs l3__split_fields2) 1 no_element)
     (previous (mk___rep l3__split_discrs l3__split_fields2)
     (last1 (mk___rep l3__split_discrs l3__split_fields2)))) true))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l3__split_discrs l3__split_fields2) 1
     (next (mk___rep l3__split_discrs l3__split_fields2)
     (first (mk___rep l3__split_discrs l3__split_fields2)))) no_element) true))

;; H
  (assert (= (to_rep e__split_fields) 0))

;; H
  (assert
  (and
  (= o9 (copy (mk___rep l1__split_discrs l1__split_fields4)
        (to_rep
        (rec__formal_container__vdll__list__capacity l4__split_discrs))))
  (and
  (and
  (= (oeq (model__ o9)
     (model__ (mk___rep l1__split_discrs l1__split_fields4))) true)
  (= (oeq1 (positions o9)
     (positions (mk___rep l1__split_discrs l1__split_fields4))) true))
  (ite (= (to_rep
          (rec__formal_container__vdll__list__capacity l4__split_discrs)) 0)
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o9)))
  (to_rep (rec__formal_container__vdll__list__capacity l1__split_discrs)))
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o9)))
  (to_rep (rec__formal_container__vdll__list__capacity l4__split_discrs)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= temp___418 o10))

;; H
  (assert
  (= result11 (mk___split_fields__ref (mk___split_fields l4__split_fields))))

;; H
  (assert (= l4__split_fields1 (us_split_fields1 temp___418)))

;; H
  (assert (= l4__split_discrs (us_split_discrs1 temp___418)))

;; H
  (assert
  (ite (= (<= (length (mk___rep l4__split_discrs l4__split_fields1)) 2) true)
  (= (length
     (mk___rep l4__split_discrs
     formal_container__vdll__delete_last__2__container__fields)) 0)
  (and
  (and
  (= (length
     (mk___rep l4__split_discrs
     formal_container__vdll__delete_last__2__container__fields)) (- (length
                                                                    (mk___rep
                                                                    l4__split_discrs
                                                                    l4__split_fields1)) 2))
  (= (ole
     (model__
     (mk___rep l4__split_discrs
     formal_container__vdll__delete_last__2__container__fields))
     (model__ (mk___rep l4__split_discrs l4__split_fields1))) true))
  (= (p_positions_truncated
     (positions
     (mk___rep l4__split_discrs
     formal_container__vdll__delete_last__2__container__fields))
     (positions (mk___rep l4__split_discrs l4__split_fields1))
     (+ (length
        (mk___rep l4__split_discrs
        formal_container__vdll__delete_last__2__container__fields)) 1)
     2) true))))

;; H
  (assert (= result12 (mk___split_fields__ref l4__split_fields1)))

;; H
  (assert
  (= l4__split_fields2 formal_container__vdll__delete_last__2__container__fields))

;; H
  (assert
  (= (has_key (positions (mk___rep l4__split_discrs l4__split_fields2))
     (first (mk___rep l4__split_discrs l4__split_fields2))) true))

;; H
  (assert
  (= (test_element (mk___rep l4__split_discrs l4__split_fields2)
     (first (mk___rep l4__split_discrs l4__split_fields2)) 1) true))

;; H
  (assert
  (not
  (= (has_key (positions (mk___rep l4__split_discrs l4__split_fields2))
     (next (mk___rep l1__split_discrs l1__split_fields4)
     (first (mk___rep l4__split_discrs l4__split_fields2)))) true)))

;; H
  (assert
  (= (bool_eq1
     (find (mk___rep l4__split_discrs l4__split_fields2) 1 no_element)
     (first (mk___rep l4__split_discrs l4__split_fields2))) true))

;; H
  (assert (= (to_rep e__split_fields1) 0))

;; H
  (assert
  (and (= o11 (copy (mk___rep l1__split_discrs l1__split_fields4) 3))
  (and
  (and
  (= (oeq (model__ o11)
     (model__ (mk___rep l1__split_discrs l1__split_fields4))) true)
  (= (oeq1 (positions o11)
     (positions (mk___rep l1__split_discrs l1__split_fields4))) true))
  (ite (= 3 0)
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o11)))
  (to_rep (rec__formal_container__vdll__list__capacity l1__split_discrs)))
  (= (to_rep
     (rec__formal_container__vdll__list__capacity (us_split_discrs1 o11))) 3)))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= temp___423 o12))

;; H
  (assert (= result13 (mk___split_fields__ref l2__split_fields4)))

;; H
  (assert (= l2__split_fields5 (us_split_fields1 temp___423)))

;; H
  (assert (= l2__split_discrs (us_split_discrs1 temp___423)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l2__split_discrs
     formal_container__vdll__delete_last__container__fields1)) (- (length
                                                                  (mk___rep
                                                                  l2__split_discrs
                                                                  l2__split_fields5)) 1))
  (= (ole
     (model__
     (mk___rep l2__split_discrs
     formal_container__vdll__delete_last__container__fields1))
     (model__ (mk___rep l2__split_discrs l2__split_fields5))) true))
  (not
  (= (has_key
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__delete_last__container__fields1))
     (last1 (mk___rep l2__split_discrs l2__split_fields5))) true)))
  (= (keys_included_except
     (positions (mk___rep l2__split_discrs l2__split_fields5))
     (positions (mk___rep l2__split_discrs l2__split_fields5))
     (last1 (mk___rep l2__split_discrs l2__split_fields5))) true))
  (= (ole1
     (positions
     (mk___rep l2__split_discrs
     formal_container__vdll__delete_last__container__fields1))
     (positions (mk___rep l2__split_discrs l2__split_fields5))) true)))

;; H
  (assert (= result14 (mk___split_fields__ref l2__split_fields5)))

;; H
  (assert
  (= l2__split_fields6 formal_container__vdll__delete_last__container__fields1))

;; H
  (assert (= result15 (mk___split_fields__ref l3__split_fields2)))

;; H
  (assert (= l3__split_fields3 l1__split_fields4))

;; H
  (assert (= l3__split_discrs l1__split_discrs))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_first__container__fields)) (- (length
                                                                  (mk___rep
                                                                  l3__split_discrs
                                                                  l3__split_fields3)) 1))
  (= (range_shifted
     (model__
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_first__container__fields))
     (model__ (mk___rep l3__split_discrs l3__split_fields3)) 1
     (length
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_first__container__fields)) 1) true))
  (= (p_positions_shifted
     (positions
     (mk___rep l3__split_discrs
     formal_container__vdll__delete_first__container__fields))
     (positions (mk___rep l3__split_discrs l3__split_fields3)) 1 1) true)))

;; H
  (assert (= result16 (mk___split_fields__ref l3__split_fields3)))

;; H
  (assert
  (= l3__split_fields4 formal_container__vdll__delete_first__container__fields))

;; H
  (assert (= (length (mk___rep l3__split_discrs l3__split_fields4)) 2))

;; H
  (assert
  (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields4))
     (first (mk___rep l3__split_discrs l3__split_fields4))) true))

;; H
  (assert
  (= (test_element (mk___rep l3__split_discrs l3__split_fields4)
     (first (mk___rep l3__split_discrs l3__split_fields4)) 3) true))

(assert
;; WP_parameter_def
 ;; File "test_vdll.adb", line 18, characters 0-0
  (not
  (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields4))
     (next (mk___rep l3__split_discrs l3__split_fields4)
     (first (mk___rep l3__split_discrs l3__split_fields4)))) true)))
(check-sat)
(exit)
