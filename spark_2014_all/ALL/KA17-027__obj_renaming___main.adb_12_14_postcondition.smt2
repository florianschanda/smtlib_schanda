;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__main__rec__comp natural)))))
(define-fun us_split_fields_Comp__projection ((a us_split_fields)) natural
  (rec__main__rec__comp a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__main__rec__comp (us_split_fields1 a)))
                   (to_rep (rec__main__rec__comp (us_split_fields1 b)))) true
                   false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const main__rec__comp__first__bit Int)

(declare-const main__rec__comp__last__bit Int)

(declare-const main__rec__comp__position Int)

;; main__rec__comp__first__bit_axiom
  (assert (<= 0 main__rec__comp__first__bit))

;; main__rec__comp__last__bit_axiom
  (assert (< main__rec__comp__first__bit main__rec__comp__last__bit))

;; main__rec__comp__position_axiom
  (assert (<= 0 main__rec__comp__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((rec____ref 0))
(((mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(define-fun default_initial_assumption ((temp___expr_140 us_rep)
  (temp___skip_top_level_141 Bool)) Bool (= (to_rep
                                            (rec__main__rec__comp
                                            (us_split_fields1
                                            temp___expr_140))) 1234))

(declare-const result__ us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

;; result____def_axiom
  (assert (= result__ (mk___rep (mk___split_fields (of_rep 5678)))))

(declare-const main__get_rec__result natural)

(declare-const o natural)

(declare-const o1 natural)

(declare-const main__get_rec__result__assume natural)

(declare-const result natural)

(declare-const main__get_rec__result1 natural)

(declare-const main__get_rec__result2 natural)

(declare-const main__get_rec__result3 natural)

(declare-const main__get_rec__result4 natural)

(declare-const main__get_rec__result5 natural)

(define-fun main__get_rec__result6 () us_rep (mk___rep
                                             (mk___split_fields
                                             main__get_rec__result1)))

(declare-const result1 natural)

;; H
  (assert (= (to_rep o) 5678))

;; H
  (assert (= o o1))

;; H
  (assert (= main__get_rec__result__assume o1))

;; H
  (assert
  (= (mk___rep (mk___split_fields main__get_rec__result__assume)) result__))

;; H
  (assert (= main__get_rec__result2 main__get_rec__result1))

;; H
  (assert
  (= (mk___rep (mk___split_fields main__get_rec__result3)) main__get_rec__result6))

;; H
  (assert (= result main__get_rec__result))

;; H
  (assert (= main__get_rec__result6 result__))

;; H
  (assert
  (= (mk_rec____ref (mk___rep (mk___split_fields main__get_rec__result4)))
  (mk_rec____ref (mk___rep (mk___split_fields main__get_rec__result2)))))

;; H
  (assert (= main__get_rec__result5 main__get_rec__result3))

;; H
  (assert (= result1 main__get_rec__result4))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 2, characters 0-0
  (not
  (= (bool_eq (mk___rep (mk___split_fields main__get_rec__result4))
     (mk___rep (mk___split_fields (of_rep 5678)))) true)))
(check-sat)
(exit)
