;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__p__pt__j integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer
  (rec__p__pt__j a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__p__pt__x positive)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) positive
  (rec__p__pt__x a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const p__pt__j__first__bit Int)

(declare-const p__pt__j__last__bit Int)

(declare-const p__pt__j__position Int)

;; p__pt__j__first__bit_axiom
  (assert (<= 0 p__pt__j__first__bit))

;; p__pt__j__last__bit_axiom
  (assert (< p__pt__j__first__bit p__pt__j__last__bit))

;; p__pt__j__position_axiom
  (assert (<= 0 p__pt__j__position))

(declare-const p__pt__x__first__bit Int)

(declare-const p__pt__x__last__bit Int)

(declare-const p__pt__x__position Int)

;; p__pt__x__first__bit_axiom
  (assert (<= 0 p__pt__x__first__bit))

;; p__pt__x__last__bit_axiom
  (assert (< p__pt__x__first__bit p__pt__x__last__bit))

;; p__pt__x__position_axiom
  (assert (<= 0 p__pt__x__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-datatypes () ((pt__ref (mk_pt__ref (pt__content us_rep)))))
(define-fun pt__ref___projection ((a pt__ref)) us_rep (pt__content a))

(declare-datatypes ()
((us_split_fields2 (mk___split_fields1 (rec__p__pt__x1 positive)))))
(define-fun us_split_fields_X__2__projection ((a us_split_fields2)) positive
  (rec__p__pt__x1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                                 a))

(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (rec__p__pt__x1
                                         (us_split_fields3 a)))))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (rec__p__pt__x (us_split_fields1 r)))))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun in_range2 ((rec__p__pt__j1 Int)
  (a us_rep)) Bool (= rec__p__pt__j1 (to_rep
                                     (rec__p__pt__j (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const p__pt__j__first__bit1 Int)

(declare-const p__pt__j__last__bit1 Int)

(declare-const p__pt__j__position1 Int)

;; p__pt__j__first__bit_axiom
  (assert (<= 0 p__pt__j__first__bit1))

;; p__pt__j__last__bit_axiom
  (assert (< p__pt__j__first__bit1 p__pt__j__last__bit1))

;; p__pt__j__position_axiom
  (assert (<= 0 p__pt__j__position1))

(declare-const p__pt__x__first__bit1 Int)

(declare-const p__pt__x__last__bit1 Int)

(declare-const p__pt__x__position1 Int)

;; p__pt__x__first__bit_axiom
  (assert (<= 0 p__pt__x__first__bit1))

;; p__pt__x__last__bit_axiom
  (assert (< p__pt__x__first__bit1 p__pt__x__last__bit1))

;; p__pt__x__position_axiom
  (assert (<= 0 p__pt__x__position1))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-datatypes () ((tpoS__ref (mk_tpoS__ref (tpoS__content us_rep1)))))
(define-fun tpoS__ref___projection ((a tpoS__ref)) us_rep1 (tpoS__content a))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun zero (tuple0) Int)

(declare-fun zero__function_guard (Int tuple0) Bool)

(define-fun dynamic_invariant ((temp___expr_176 us_rep1)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (not (= temp___skip_constant_174 true))
                                      (in_range2 (- 1)
                                      (to_base temp___expr_176))))

(define-fun default_initial_assumption ((temp___expr_178 us_rep1)
  (temp___skip_top_level_179 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__p__pt__j
                                            (us_split_discrs2
                                            temp___expr_178))) (- 1))
                                         (= (to_rep1
                                            (rec__p__pt__x1
                                            (us_split_fields3
                                            temp___expr_178))) (zero Tuple0))))

(declare-const po__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

;; zero__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant1
  (zero us_void_param) true false true) :pattern ((zero us_void_param)) )))

;; zero__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (zero us_void_param) 0) :pattern ((zero us_void_param)) )))

(assert
;; WP_parameter_def
 ;; File "p.ads", line 3, characters 0-0
  (not (in_range (- 1))))
(check-sat)
(exit)
