;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-const e Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun f (tuple0) Bool)

(declare-fun f__function_guard (Bool tuple0) Bool)

;; f__post_axiom
  (assert true)

;; f__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (f us_void_param) true) :pattern ((f us_void_param)) )))

(declare-fun h (tuple0) Bool)

(declare-fun h__function_guard (Bool tuple0) Bool)

(declare-const m Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun g (tuple0) Bool)

(declare-fun g__function_guard (Bool tuple0) Bool)

;; e__def_axiom
  (assert (= e (g Tuple0)))

(declare-fun k (tuple0) Bool)

(declare-fun k__function_guard (Bool tuple0) Bool)

;; k__post_axiom
  (assert true)

;; k__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (k us_void_param) true) :pattern ((k us_void_param)) )))

;; h__post_axiom
  (assert true)

;; h__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (h us_void_param) true) (= (k Tuple0) true)) :pattern ((h
                                                                  us_void_param)) )))

;; m__def_axiom
  (assert (= m (h Tuple0)))

;; g__post_axiom
  (assert true)

;; g__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (g us_void_param) true) (= (f Tuple0) true)) :pattern ((g
                                                                  us_void_param)) )))

;; H
  (assert (= (g Tuple0) e))

;; H
  (assert (= (h Tuple0) m))

;; H
  (assert (= (f Tuple0) true))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 2, characters 0-0
  (not (= e true)))
(check-sat)
(exit)
