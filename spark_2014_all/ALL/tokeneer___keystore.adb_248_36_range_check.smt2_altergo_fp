(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type descriptioni

predicate in_range4(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : descriptioni, descriptioni -> bool

logic dummy5 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___133:int.
  (forall temp___134:int.
  ((audittypes__nodescription__aggregate_def(temp___133)[temp___134]) = of_rep(temp___133))))

logic nouser : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___String_Literal_135 : unit -> (int,character) farray

axiom temp___String_Literal_135__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_135(void)[1])) = 78) and
  (to_rep((temp___String_Literal_135(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_135(void)[3])) = 85)) and
  (to_rep((temp___String_Literal_135(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_135(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_135(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_135(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[31])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[33])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[43])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[44])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[47])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[50])) = 32))

type unsigned32t

predicate in_range5(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : unsigned32t, unsigned32t -> bool

logic dummy6 : unsigned32t

type unsigned32t__ref = { unsigned32t__content : unsigned32t
}

function unsigned32t__ref___projection(a: unsigned32t__ref) : unsigned32t =
  (a).unsigned32t__content

logic to_rep2 : unsigned32t -> int

logic of_rep2 : int -> unsigned32t

axiom inversion_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type algorithmt

predicate in_range6(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : algorithmt, algorithmt -> bool

logic dummy7 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic valid_numberlogentries : us_private -> bool

logic valid_numberlogentries__function_guard : bool, us_private -> prop

type rawcertificatei

predicate in_range7(x: int) = ((1 <= x) and (x <= 4096))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : rawcertificatei, rawcertificatei -> bool

logic dummy8 : rawcertificatei

type rawcertificatei__ref = { rawcertificatei__content : rawcertificatei
}

function rawcertificatei__ref___projection(a: rawcertificatei__ref) : rawcertificatei =
  (a).rawcertificatei__content

logic to_rep3 : rawcertificatei -> int

logic of_rep3 : int -> rawcertificatei

axiom inversion_axiom3 :
  (forall x:rawcertificatei [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:rawcertificatei [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic dummy9 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq8 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__certtypes__rawdatat__rawdata :
(int,character) farray; rec__certtypes__rawdatat__datalength :
rawcertificatei
}

function us_split_fields_RawData__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__certtypes__rawdatat__rawdata

function us_split_fields_DataLength__projection(a: us_split_fields) : rawcertificatei =
  (a).rec__certtypes__rawdatat__datalength

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((bool_eq5(((a).us_split_fields1).rec__certtypes__rawdatat__rawdata, 1,
  4096, ((b).us_split_fields1).rec__certtypes__rawdatat__rawdata, 1,
  4096) = true) and
  (to_rep3(((a).us_split_fields1).rec__certtypes__rawdatat__datalength) = to_rep3(((b).us_split_fields1).rec__certtypes__rawdatat__datalength))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields1).rec__certtypes__rawdatat__rawdata,
  1, 4096, ((b).us_split_fields1).rec__certtypes__rawdatat__rawdata, 1,
  4096) = true) and
  (to_rep3(((a).us_split_fields1).rec__certtypes__rawdatat__datalength) = to_rep3(((b).us_split_fields1).rec__certtypes__rawdatat__datalength)))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. forall a1:rawcertificatei.
  (0 <= object__size2({ us_split_fields1 = {
  rec__certtypes__rawdatat__rawdata = a;
  rec__certtypes__rawdatat__datalength = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. forall a1:rawcertificatei.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__certtypes__rawdatat__rawdata = a;
  rec__certtypes__rawdatat__datalength = a1 } })))

logic certtypes__rawdatat__rawdata__first__bit : int

logic certtypes__rawdatat__rawdata__last__bit : int

logic certtypes__rawdatat__rawdata__position : int

axiom certtypes__rawdatat__rawdata__first__bit_axiom :
  (0 <= certtypes__rawdatat__rawdata__first__bit)

axiom certtypes__rawdatat__rawdata__last__bit_axiom :
  (certtypes__rawdatat__rawdata__first__bit <  certtypes__rawdatat__rawdata__last__bit)

axiom certtypes__rawdatat__rawdata__position_axiom :
  (0 <= certtypes__rawdatat__rawdata__position)

logic certtypes__rawdatat__datalength__first__bit : int

logic certtypes__rawdatat__datalength__last__bit : int

logic certtypes__rawdatat__datalength__position : int

axiom certtypes__rawdatat__datalength__first__bit_axiom :
  (0 <= certtypes__rawdatat__datalength__first__bit)

axiom certtypes__rawdatat__datalength__last__bit_axiom :
  (certtypes__rawdatat__datalength__first__bit <  certtypes__rawdatat__datalength__last__bit)

axiom certtypes__rawdatat__datalength__position_axiom :
  (0 <= certtypes__rawdatat__datalength__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy10 : (int,character) farray

logic dummy11 : rawcertificatei

type rawdatat__ref = { rawdatat__content : us_rep
}

function rawdatat__ref___projection(a: rawdatat__ref) : us_rep =
  (a).rawdatat__content

type returnvaluet

predicate in_range8(x: int) = ((0 <= x) and (x <= 28))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : returnvaluet, returnvaluet -> bool

logic dummy12 : returnvaluet

type returnvaluet__ref = { returnvaluet__content : returnvaluet
}

function returnvaluet__ref___projection(a: returnvaluet__ref) : returnvaluet =
  (a).returnvaluet__content

logic to_rep4 : returnvaluet -> int

logic of_rep4 : int -> returnvaluet

axiom inversion_axiom4 :
  (forall x:returnvaluet [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:returnvaluet [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

type bytet

predicate in_range9(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : bytet, bytet -> bool

logic dummy13 : bytet

type bytet__ref = { bytet__content : bytet
}

function bytet__ref___projection(a: bytet__ref) : bytet = (a).bytet__content

logic to_rep5 : bytet -> int

logic of_rep5 : int -> bytet

axiom inversion_axiom5 :
  (forall x:bytet [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:bytet [to_rep5(x)]. in_range9(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range9(x) ->
  (to_rep5(of_rep5(x)) = x)))

type map__ref1 = { map__content1 : (int,bytet) farray
}

logic slide1 : (int,bytet) farray, int, int -> (int,bytet) farray

axiom slide_eq1 :
  (forall a:(int,bytet) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,bytet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> (int,bytet) farray

axiom concat_def1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : bytet, int -> (int,bytet) farray

axiom singleton_def1 :
  (forall v:bytet.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq14 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,bytet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bytet) farray. forall b__first:int. forall b__last:int
  [bool_eq14(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_141:int. ((((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) and
  (to_rep5((a[temp___idx_141])) = to_rep5((b[((b__first - a__first) + temp___idx_141)])))) or
  (not ((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) ->
  (to_rep5((a[temp___idx_141])) = to_rep5((b[((b__first - a__first) + temp___idx_141)]))))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) ->
  (to_rep5((a[temp___idx_141])) = to_rep5((b[((b__first - a__first) + temp___idx_141)])))))))))

logic compare1 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq14(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq14(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep5((a[(i + 1)])) <  to_rep5((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq14(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep5((b[(i + 1)])) <  to_rep5((a[(j + 1)]))))))))))))

logic dummy14 : (int,bytet) farray

logic value__size3 : int

logic object__size3 : (int,bytet) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,bytet) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,bytet) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,bytet) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,bytet) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,bytet) farray. (0 <= object__alignment3(a)))

logic user_eq12 : (int,bytet) farray, (int,bytet) farray -> bool

type us_split_fields2 = { rec__keystore__interfac__digestt__digestid :
unsigned32t; rec__keystore__interfac__digestt__signreturn : returnvaluet;
rec__keystore__interfac__digestt__verifyreturn : returnvaluet;
rec__keystore__interfac__digestt__pad : (int,bytet) farray
}

function us_split_fields_DigestID__projection(a: us_split_fields2) : unsigned32t =
  (a).rec__keystore__interfac__digestt__digestid

function us_split_fields_SignReturn__projection(a: us_split_fields2) : returnvaluet =
  (a).rec__keystore__interfac__digestt__signreturn

function us_split_fields_VerifyReturn__projection(a: us_split_fields2) : returnvaluet =
  (a).rec__keystore__interfac__digestt__verifyreturn

function us_split_fields_Pad__2__projection(a: us_split_fields2) : (int,bytet) farray =
  (a).rec__keystore__interfac__digestt__pad

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___12__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq15 : us_rep1, us_rep1 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq15(a, b)].
  ((((((to_rep2(((a).us_split_fields3).rec__keystore__interfac__digestt__digestid) = to_rep2(((b).us_split_fields3).rec__keystore__interfac__digestt__digestid)) and
  (to_rep4(((a).us_split_fields3).rec__keystore__interfac__digestt__signreturn) = to_rep4(((b).us_split_fields3).rec__keystore__interfac__digestt__signreturn))) and
  (to_rep4(((a).us_split_fields3).rec__keystore__interfac__digestt__verifyreturn) = to_rep4(((b).us_split_fields3).rec__keystore__interfac__digestt__verifyreturn))) and
  (bool_eq14(((a).us_split_fields3).rec__keystore__interfac__digestt__pad, 1,
  20, ((b).us_split_fields3).rec__keystore__interfac__digestt__pad, 1,
  20) = true)) -> (bool_eq15(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields3).rec__keystore__interfac__digestt__digestid) = to_rep2(((b).us_split_fields3).rec__keystore__interfac__digestt__digestid)) and
  (to_rep4(((a).us_split_fields3).rec__keystore__interfac__digestt__signreturn) = to_rep4(((b).us_split_fields3).rec__keystore__interfac__digestt__signreturn))) and
  (to_rep4(((a).us_split_fields3).rec__keystore__interfac__digestt__verifyreturn) = to_rep4(((b).us_split_fields3).rec__keystore__interfac__digestt__verifyreturn))) and
  (bool_eq14(((a).us_split_fields3).rec__keystore__interfac__digestt__pad, 1,
  20, ((b).us_split_fields3).rec__keystore__interfac__digestt__pad, 1,
  20) = true))) -> (bool_eq15(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:unsigned32t. forall a1:returnvaluet. forall a2:returnvaluet.
  forall a3:(int,bytet) farray. (0 <= object__size4({ us_split_fields3 = {
  rec__keystore__interfac__digestt__digestid = a;
  rec__keystore__interfac__digestt__signreturn = a1;
  rec__keystore__interfac__digestt__verifyreturn = a2;
  rec__keystore__interfac__digestt__pad = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:unsigned32t. forall a1:returnvaluet. forall a2:returnvaluet.
  forall a3:(int,bytet) farray. (0 <= object__alignment4({ us_split_fields3 =
  { rec__keystore__interfac__digestt__digestid = a;
  rec__keystore__interfac__digestt__signreturn = a1;
  rec__keystore__interfac__digestt__verifyreturn = a2;
  rec__keystore__interfac__digestt__pad = a3 } })))

logic keystore__interfac__digestt__digestid__first__bit : int

logic keystore__interfac__digestt__digestid__last__bit : int

logic keystore__interfac__digestt__digestid__position : int

axiom keystore__interfac__digestt__digestid__first__bit_axiom :
  (0 <= keystore__interfac__digestt__digestid__first__bit)

axiom keystore__interfac__digestt__digestid__last__bit_axiom :
  (keystore__interfac__digestt__digestid__first__bit <  keystore__interfac__digestt__digestid__last__bit)

axiom keystore__interfac__digestt__digestid__position_axiom :
  (0 <= keystore__interfac__digestt__digestid__position)

logic keystore__interfac__digestt__signreturn__first__bit : int

logic keystore__interfac__digestt__signreturn__last__bit : int

logic keystore__interfac__digestt__signreturn__position : int

axiom keystore__interfac__digestt__signreturn__first__bit_axiom :
  (0 <= keystore__interfac__digestt__signreturn__first__bit)

axiom keystore__interfac__digestt__signreturn__last__bit_axiom :
  (keystore__interfac__digestt__signreturn__first__bit <  keystore__interfac__digestt__signreturn__last__bit)

axiom keystore__interfac__digestt__signreturn__position_axiom :
  (0 <= keystore__interfac__digestt__signreturn__position)

logic keystore__interfac__digestt__verifyreturn__first__bit : int

logic keystore__interfac__digestt__verifyreturn__last__bit : int

logic keystore__interfac__digestt__verifyreturn__position : int

axiom keystore__interfac__digestt__verifyreturn__first__bit_axiom :
  (0 <= keystore__interfac__digestt__verifyreturn__first__bit)

axiom keystore__interfac__digestt__verifyreturn__last__bit_axiom :
  (keystore__interfac__digestt__verifyreturn__first__bit <  keystore__interfac__digestt__verifyreturn__last__bit)

axiom keystore__interfac__digestt__verifyreturn__position_axiom :
  (0 <= keystore__interfac__digestt__verifyreturn__position)

logic keystore__interfac__digestt__pad__first__bit : int

logic keystore__interfac__digestt__pad__last__bit : int

logic keystore__interfac__digestt__pad__position : int

axiom keystore__interfac__digestt__pad__first__bit_axiom :
  (0 <= keystore__interfac__digestt__pad__first__bit)

axiom keystore__interfac__digestt__pad__last__bit_axiom :
  (keystore__interfac__digestt__pad__first__bit <  keystore__interfac__digestt__pad__last__bit)

axiom keystore__interfac__digestt__pad__position_axiom :
  (0 <= keystore__interfac__digestt__pad__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy15 : unsigned32t

logic dummy16 : returnvaluet

logic dummy17 : returnvaluet

logic dummy18 : (int,bytet) farray

type digestt__ref = { digestt__content : us_rep1
}

function digestt__ref___projection(a: digestt__ref) : us_rep1 =
  (a).digestt__content

logic nulldigest : unsigned32t

logic nulldigest1 : returnvaluet

logic nulldigest2 : returnvaluet

logic nulldigest3 : (int,bytet) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___153 : int -> (int,bytet) farray

axiom def_axiom1 :
  (forall temp___155:int.
  (forall temp___156:int.
  ((temp___153(temp___155)[temp___156]) = of_rep5(temp___155))))

type map__ref2 = { map__content2 : (int,bool) farray
}

logic slide2 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq2 :
  (forall a:(int,bool) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : bool, int -> (int,bool) farray

axiom singleton_def2 :
  (forall v:bool.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq16 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq16(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. ((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and
  ((a[temp___idx_157]) = (b[((b__first - a__first) + temp___idx_157)]))) or
  (not ((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  ((a[temp___idx_157]) = (b[((b__first - a__first) + temp___idx_157)])))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  ((a[temp___idx_157]) = (b[((b__first - a__first) + temp___idx_157)]))))))))

logic compare2 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq16(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq16(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq16(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic issystem : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic keystore__issystem__aggregate_def : bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> (int,bool) farray

axiom def_axiom2 :
  (forall temp___159:bool. forall temp___160:bool. forall temp___161:bool.
  forall temp___162:bool. forall temp___163:bool. forall temp___164:bool.
  forall temp___165:bool. forall temp___166:bool. forall temp___167:bool.
  forall temp___168:bool. forall temp___169:bool. forall temp___170:bool.
  forall temp___171:bool. forall temp___172:bool. forall temp___173:bool.
  forall temp___174:bool. forall temp___175:bool. forall temp___176:bool.
  forall temp___177:bool. forall temp___178:bool. forall temp___179:bool.
  forall temp___180:bool. forall temp___181:bool. forall temp___182:bool.
  forall temp___183:bool. forall temp___184:bool. forall temp___185:bool.
  forall temp___186:bool. forall temp___187:bool.
  ((((((((((((((((((((((((((((((keystore__issystem__aggregate_def(temp___159,
  temp___160, temp___161, temp___162, temp___163, temp___164, temp___165,
  temp___166, temp___167, temp___168, temp___169, temp___170, temp___171,
  temp___172, temp___173, temp___174, temp___175, temp___176, temp___177,
  temp___178, temp___179, temp___180, temp___181, temp___182, temp___183,
  temp___184, temp___185, temp___186, temp___187)[0]) = temp___159) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[1]) = temp___160)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[2]) = temp___161)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[3]) = temp___162)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[4]) = temp___163)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[5]) = temp___164)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[6]) = temp___165)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[7]) = temp___166)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[8]) = temp___167)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[9]) = temp___168)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[10]) = temp___169)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[11]) = temp___170)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[12]) = temp___171)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[13]) = temp___172)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[14]) = temp___173)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[15]) = temp___174)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[16]) = temp___175)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[17]) = temp___176)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[18]) = temp___177)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[19]) = temp___178)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[20]) = temp___179)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[21]) = temp___180)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[22]) = temp___181)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[23]) = temp___182)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[24]) = temp___183)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[25]) = temp___184)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[26]) = temp___185)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[27]) = temp___186)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[28]) = temp___187)))

logic mechanism : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic rawcertdata : (int,character) farray

logic rawcertdata1 : rawcertificatei

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic getblock : (int,character) farray, int, int -> (int,character) farray

logic getblock__function_guard : (int,character) farray,
  (int,character) farray, int, int -> prop

axiom getblock__post_axiom : true

logic r29b : int

logic attr__ATTRIBUTE_ADDRESS15 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy19 : integer

type t30b__ref = { t30b__content : integer
}

function t30b__ref___projection(a: t30b__ref) : integer = (a).t30b__content

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c32b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic thestring : (int,character) farray

logic thestring1 : t

logic attr__ATTRIBUTE_ADDRESS20 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : integer, integer -> bool

logic dummy20 : integer

type t38b__ref = { t38b__content : integer
}

function t38b__ref___projection(a: t38b__ref) : integer = (a).t38b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq19(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq16 : us_t1, us_t1 -> bool

logic dummy21 : (int,character) farray

logic dummy22 : t1

type t39b__ref = { t39b__content : us_t1
}

function t39b__ref___projection(a: t39b__ref) : us_t1 = (a).t39b__content

logic c44b : int

logic attr__ATTRIBUTE_ADDRESS21 : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic thestring2 : (int,character) farray

logic thestring3 : t

logic attr__ATTRIBUTE_ADDRESS24 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq17 : integer, integer -> bool

logic dummy23 : integer

type t50b__ref = { t50b__content : integer
}

function t50b__ref___projection(a: t50b__ref) : integer = (a).t50b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,character) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,character) farray. (0 <= object__alignment6(a)))

function bool_eq21(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq18 : us_t2, us_t2 -> bool

logic dummy24 : (int,character) farray

logic dummy25 : t2

type t51b__ref = { t51b__content : us_t2
}

function t51b__ref___projection(a: t51b__ref) : us_t2 = (a).t51b__content

logic c56b : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic attr__ATTRIBUTE_ADDRESS26 : int

logic attr__ATTRIBUTE_ADDRESS27 : int

logic thestring4 : (int,character) farray

logic thestring5 : t

logic attr__ATTRIBUTE_ADDRESS28 : int

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq19 : integer, integer -> bool

logic dummy26 : integer

type t62b__ref = { t62b__content : integer
}

function t62b__ref___projection(a: t62b__ref) : integer = (a).t62b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,character) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,character) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,character) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,character) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,character) farray. (0 <= object__alignment7(a)))

function bool_eq23(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq20 : us_t3, us_t3 -> bool

logic dummy27 : (int,character) farray

logic dummy28 : t3

type t63b__ref = { t63b__content : us_t3
}

function t63b__ref___projection(a: t63b__ref) : us_t3 = (a).t63b__content

logic temp___String_Literal_1218 : unit -> (int,character) farray

axiom temp___String_Literal_1218__def_axiom :
  ((((((((((to_rep((temp___String_Literal_1218(void)[1])) = 68) and
  (to_rep((temp___String_Literal_1218(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1218(void)[3])) = 103)) and
  (to_rep((temp___String_Literal_1218(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1218(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_1218(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_1218(void)[7])) = 73)) and
  (to_rep((temp___String_Literal_1218(void)[8])) = 110)) and
  (to_rep((temp___String_Literal_1218(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1218(void)[10])) = 116))

logic temp___String_Literal_1228 : unit -> (int,character) farray

axiom temp___String_Literal_1228__def_axiom :
  (((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1228(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1228(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1228(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1228(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1228(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1228(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1228(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1228(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1228(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1228(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1228(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1228(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1228(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1228(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1228(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1228(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1228(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1228(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1228(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1228(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1228(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1228(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1228(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1228(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1228(void)[25])) = 68)) and
  (to_rep((temp___String_Literal_1228(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_1228(void)[27])) = 103)) and
  (to_rep((temp___String_Literal_1228(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_1228(void)[29])) = 115)) and
  (to_rep((temp___String_Literal_1228(void)[30])) = 116)) and
  (to_rep((temp___String_Literal_1228(void)[31])) = 73)) and
  (to_rep((temp___String_Literal_1228(void)[32])) = 110)) and
  (to_rep((temp___String_Literal_1228(void)[33])) = 105)) and
  (to_rep((temp___String_Literal_1228(void)[34])) = 116)) and
  (to_rep((temp___String_Literal_1228(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_1228(void)[36])) = 58)) and
  (to_rep((temp___String_Literal_1228(void)[37])) = 32))

logic temp___String_Literal_1231 : unit -> (int,character) farray

axiom temp___String_Literal_1231__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_1231(void)[1])) = 68) and
  (to_rep((temp___String_Literal_1231(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1231(void)[3])) = 103)) and
  (to_rep((temp___String_Literal_1231(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1231(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_1231(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_1231(void)[7])) = 85)) and
  (to_rep((temp___String_Literal_1231(void)[8])) = 112)) and
  (to_rep((temp___String_Literal_1231(void)[9])) = 100)) and
  (to_rep((temp___String_Literal_1231(void)[10])) = 97)) and
  (to_rep((temp___String_Literal_1231(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_1231(void)[12])) = 101))

logic temp___String_Literal_1241 : unit -> (int,character) farray

axiom temp___String_Literal_1241__def_axiom :
  (((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1241(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1241(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1241(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1241(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1241(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1241(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1241(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1241(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1241(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1241(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1241(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1241(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1241(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1241(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1241(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1241(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1241(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1241(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1241(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1241(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1241(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1241(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1241(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1241(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1241(void)[25])) = 68)) and
  (to_rep((temp___String_Literal_1241(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_1241(void)[27])) = 103)) and
  (to_rep((temp___String_Literal_1241(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_1241(void)[29])) = 115)) and
  (to_rep((temp___String_Literal_1241(void)[30])) = 116)) and
  (to_rep((temp___String_Literal_1241(void)[31])) = 85)) and
  (to_rep((temp___String_Literal_1241(void)[32])) = 112)) and
  (to_rep((temp___String_Literal_1241(void)[33])) = 100)) and
  (to_rep((temp___String_Literal_1241(void)[34])) = 97)) and
  (to_rep((temp___String_Literal_1241(void)[35])) = 116)) and
  (to_rep((temp___String_Literal_1241(void)[36])) = 101)) and
  (to_rep((temp___String_Literal_1241(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_1241(void)[38])) = 58)) and
  (to_rep((temp___String_Literal_1241(void)[39])) = 32))

logic temp___String_Literal_1244 : unit -> (int,character) farray

axiom temp___String_Literal_1244__def_axiom :
  (((((((((((to_rep((temp___String_Literal_1244(void)[1])) = 68) and
  (to_rep((temp___String_Literal_1244(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1244(void)[3])) = 103)) and
  (to_rep((temp___String_Literal_1244(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1244(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_1244(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_1244(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_1244(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_1244(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_1244(void)[10])) = 97)) and
  (to_rep((temp___String_Literal_1244(void)[11])) = 108))

logic temp___String_Literal_1254 : unit -> (int,character) farray

axiom temp___String_Literal_1254__def_axiom :
  ((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1254(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1254(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1254(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1254(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1254(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1254(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1254(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1254(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1254(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1254(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1254(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1254(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1254(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1254(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1254(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1254(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1254(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1254(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1254(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1254(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1254(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1254(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1254(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1254(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1254(void)[25])) = 68)) and
  (to_rep((temp___String_Literal_1254(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_1254(void)[27])) = 103)) and
  (to_rep((temp___String_Literal_1254(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_1254(void)[29])) = 115)) and
  (to_rep((temp___String_Literal_1254(void)[30])) = 116)) and
  (to_rep((temp___String_Literal_1254(void)[31])) = 70)) and
  (to_rep((temp___String_Literal_1254(void)[32])) = 105)) and
  (to_rep((temp___String_Literal_1254(void)[33])) = 110)) and
  (to_rep((temp___String_Literal_1254(void)[34])) = 97)) and
  (to_rep((temp___String_Literal_1254(void)[35])) = 108)) and
  (to_rep((temp___String_Literal_1254(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_1254(void)[37])) = 58)) and
  (to_rep((temp___String_Literal_1254(void)[38])) = 32))

axiom issystem__def_axiom :
  (issystem = keystore__issystem__aggregate_def(of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(1), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(1), of_int(1)))

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

axiom nouser__def_axiom : (nouser = temp___String_Literal_135(void))

axiom valid_numberlogentries__post_axiom : true

axiom nulldigest__def_axiom : ((nulldigest = of_rep2(0)) and
  ((nulldigest1 = of_rep4(3)) and ((nulldigest2 = of_rep4(3)) and
  (nulldigest3 = temp___153(0)))))

 (* File "keystore.ads", line 100, characters 0-0 *)
goal WP_parameter_def :
  (forall thedigest__split_fields:unsigned32t.
  forall thedigest__split_fields1:returnvaluet.
  forall thedigest__split_fields2:returnvaluet.
  forall thedigest__split_fields3:(int,bytet) farray. forall retvalini:int.
  forall retvalupd:int. forall retvalfin:int. forall loopmax:int.
  forall bytesleft:int. forall size:int. forall j:int. forall o:returnvaluet.
  forall o1:returnvaluet. forall o2:unsigned32t. forall o3:unsigned32t.
  forall o4:returnvaluet. forall o5:returnvaluet.
  forall o6:(int,bytet) farray. forall temp___1260:unsigned32t.
  forall temp___12601:returnvaluet. forall temp___12602:returnvaluet.
  forall temp___12603:(int,bytet) farray. forall o7:(int,character) farray.
  forall result:int. forall retvalupd1:int. forall result1:int.
  forall retvalfin1:int. forall result2:int. forall size1:int.
  forall result3:unsigned32t. forall result4:returnvaluet.
  forall result5:returnvaluet. forall result6:(int,bytet) farray.
  forall thedigest__split_fields4:unsigned32t.
  forall thedigest__split_fields5:returnvaluet.
  forall thedigest__split_fields6:returnvaluet.
  forall thedigest__split_fields7:(int,bytet) farray. forall retvalini1:int.
  forall result7:int. forall loopmax1:int. forall result8:int.
  forall bytesleft1:int. forall result9:int. forall j1:int.
  forall retvalupd2:int. forall bytesleft2:int.
  forall block:(int,character) farray. forall size2:int. forall j2:int.
  forall result10:int__ref. forall size3:int. forall result11:map__ref.
  forall block1:(int,character) farray. forall retvalupd3:int.
  ((keystore__issystem__aggregate_def(of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1)) = issystem) ->
  ((audittypes__nodescription__aggregate_def(32) = nodescription) ->
  ((temp___String_Literal_135(void) = nouser) -> (((((to_rep4(o) = 3) and
  ((to_rep4(o1) = 3) and ((to_rep2(o2) = 0) and ((o2 = o3) and ((o1 = o4) and
  ((o = o5) and (temp___153(0) = o6))))))) and ((temp___1260 = o3) and
  ((temp___12601 = o4) and ((temp___12602 = o5) and
  (temp___12603 = o6))))) and ((temp___1260 = nulldigest) and
  ((temp___12601 = nulldigest1) and ((temp___12602 = nulldigest2) and
  (temp___12603 = nulldigest3))))) -> (in_range6(mechanism) -> (((0 <= 28) ->
  in_range8(retvalini)) -> (((result = retvalupd) and (retvalupd1 = 0)) ->
  (in_range8(retvalupd1) -> (((result1 = retvalfin) and (retvalfin1 = 0)) ->
  (in_range8(retvalfin1) -> (((1 <= 2147483647) -> in_range2(loopmax)) ->
  (((1 <= 2147483647) -> in_range2(bytesleft)) -> (((result2 = size) and
  (size1 = 100)) -> (in_range5(size1) ->
  ((((result3 = thedigest__split_fields) and
  ((result4 = thedigest__split_fields1) and
  ((result5 = thedigest__split_fields2) and
  (result6 = thedigest__split_fields3)))) and
  ((thedigest__split_fields4 = nulldigest) and
  ((thedigest__split_fields5 = nulldigest1) and
  ((thedigest__split_fields6 = nulldigest2) and
  (thedigest__split_fields7 = nulldigest3))))) -> (in_range8(retvalini1) ->
  ((retvalini1 = 0) -> (((result7 = loopmax) and
  (loopmax1 = (comp_div((to_rep3(rawcertdata1) - 1),100) + 1))) ->
  (((result8 = bytesleft) and (bytesleft1 = to_rep3(rawcertdata1))) ->
  (((loopmax1 = r29b) and in_range2(r29b)) -> (((result9 = j) and
  (j1 = 1)) -> (((1 <= j1) and (j1 <= r29b)) ->
  ((((((((loopmax1 = (comp_div((to_rep3(rawcertdata1) - 1),100) + 1)) and
  ((1 <= j2) and (j2 <= loopmax1))) and
  (bytesleft2 = (to_rep3(rawcertdata1) - ((j2 - 1) * 100)))) and
  ((1 <= to_rep3(rawcertdata1)) and (to_rep3(rawcertdata1) <= 4096))) and
  ((1 <= size2) and (size2 <= 100))) and (retvalini1 = 0)) and
  (retvalfin1 = 0)) -> (((((((1 <= 2147483647) -> in_range2(bytesleft2)) and
  ((0 <= 28) -> in_range8(retvalupd2))) and ((0 <= 4294967295) ->
  in_range5(size2))) and ((1 <= r29b) -> dynamic_property1(1, r29b, j2))) and
  ((1 <= j2) and (j2 <= r29b))) -> ((((bytesleft2 <  100) and ((result10 = {
  int__content = size2 }) and (size3 = bytesleft2))) or
  ((not (bytesleft2 <  100)) and (size3 = size2))) ->
  (((o7 = getblock(rawcertdata, j2, size3)) and ((result11 = { map__content =
  block }) and (block1 = o7))) -> (in_range8(retvalupd3) ->
  ((not ((retvalupd3 = 0) -> (j2 = loopmax1))) ->
  in_range2((bytesleft2 - 100)))))))))))))))))))))))))))))))
