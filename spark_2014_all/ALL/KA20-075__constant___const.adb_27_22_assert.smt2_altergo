(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq2 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq2(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq2(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq2(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic c : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic const__c__aggregate_def : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___134:int.
  (forall temp___135:int.
  ((const__c__aggregate_def(temp___134)[temp___135]) = of_rep(temp___134))))

logic c2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic const__c2__aggregate_def : int -> (int,integer) farray

axiom def_axiom1 :
  (forall temp___137:int.
  (forall temp___138:int.
  ((const__c2__aggregate_def(temp___137)[temp___138]) = of_rep(temp___137))))

logic d2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic const__d2__aggregate_def : int, int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___144:int. forall temp___145:int.
  (((const__d2__aggregate_def(temp___144,
  temp___145)[1]) = of_rep(temp___144)) and
  ((const__d2__aggregate_def(temp___144,
  temp___145)[2]) = of_rep(temp___145))))

type us_split_fields = { rec__const__te__x : integer; rec__const__te__y :
integer
}

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__const__te__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__const__te__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__const__te__x) = to_rep(((b).us_split_fields1).rec__const__te__x)) and
  (to_rep(((a).us_split_fields1).rec__const__te__y) = to_rep(((b).us_split_fields1).rec__const__te__y))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__const__te__x) = to_rep(((b).us_split_fields1).rec__const__te__x)) and
  (to_rep(((a).us_split_fields1).rec__const__te__y) = to_rep(((b).us_split_fields1).rec__const__te__y)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__const__te__x = a; rec__const__te__y = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__const__te__x = a; rec__const__te__y = a1 } })))

logic const__te__x__first__bit : int

logic const__te__x__last__bit : int

logic const__te__x__position : int

axiom const__te__x__first__bit_axiom : (0 <= const__te__x__first__bit)

axiom const__te__x__last__bit_axiom :
  (const__te__x__first__bit <  const__te__x__last__bit)

axiom const__te__x__position_axiom : (0 <= const__te__x__position)

logic const__te__y__first__bit : int

logic const__te__y__last__bit : int

logic const__te__y__position : int

axiom const__te__y__first__bit_axiom : (0 <= const__te__y__first__bit)

axiom const__te__y__last__bit_axiom :
  (const__te__y__first__bit <  const__te__y__last__bit)

axiom const__te__y__position_axiom : (0 <= const__te__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type te__ref = { te__content : us_rep
}

function te__ref___projection(a: te__ref) : us_rep = (a).te__content

logic e : integer

logic e1 : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic f : integer

logic f1 : integer

logic attr__ATTRIBUTE_ADDRESS4 : int

logic g : integer

logic g1 : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

logic fi : unit -> int

logic fi__function_guard : int, unit -> prop

logic i : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic fk : unit -> int

logic fk__function_guard : int, unit -> prop

logic k : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic fm : int -> int

logic fm__function_guard : int, int -> prop

logic m : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic p : int

logic attr__ATTRIBUTE_ADDRESS13 : int

axiom c__def_axiom : (c = const__c__aggregate_def(1))

axiom c2__def_axiom : (c2 = const__c2__aggregate_def(1))

axiom d2__def_axiom : (d2 = const__d2__aggregate_def(1, 1))

axiom e__def_axiom : ((e = of_rep(1)) and (e1 = of_rep(1)))

axiom f__def_axiom : ((f = of_rep(1)) and (f1 = of_rep(1)))

axiom g__def_axiom : ((g = of_rep(1)) and (g1 = of_rep(1)))

axiom fi__post_axiom : in_range(fi(void))

axiom fi__def_axiom : (fi(void) = 1)

axiom i__def_axiom : (i = fi(void))

axiom j__def_axiom : (j = ((2 * fi(void)) - 1))

axiom fk__post_axiom : in_range(fk(void))

axiom fk__def_axiom : (fk(void) = 1)

axiom k__def_axiom : (k = fk(void))

axiom l__def_axiom : (l = ((2 * fk(void)) - 1))

axiom fm__post_axiom :
  (forall x:int [fm(x)]. (in_range(x) -> in_range(fm(x))))

axiom fm__def_axiom : (forall x:int [fm(x)]. (in_range(x) -> (fm(x) = x)))

axiom m__def_axiom : (m = fm(1))

axiom n__def_axiom : (n = ((2 * fm(1)) - 1))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall o1:integer. forall o2:integer. forall o3:integer.
  forall o4:integer. forall temp___168:integer. forall temp___1681:integer.
  forall o5:integer. forall o6:integer. forall o7:integer. forall o8:integer.
  forall temp___169:integer. forall temp___1691:integer. forall o9:integer.
  forall o10:integer. forall o11:integer. forall o12:integer.
  forall temp___170:integer. forall temp___1701:integer.
  ((const__c__aggregate_def(1) = c) -> ((const__c2__aggregate_def(1) = c2) ->
  ((const__d2__aggregate_def(1, 1) = d2) -> (((((to_rep(o1) = 1) and
  ((to_rep(o2) = 1) and ((o2 = o3) and (o1 = o4)))) and
  ((temp___168 = o3) and (temp___1681 = o4))) and ((temp___168 = e) and
  (temp___1681 = e1))) -> (((((to_rep(o5) = 1) and ((to_rep(o6) = 1) and
  ((o6 = o7) and (o5 = o8)))) and ((temp___169 = o7) and
  (temp___1691 = o8))) and ((temp___169 = f) and (temp___1691 = f1))) ->
  (((((to_rep(o9) = 1) and ((to_rep(o10) = 1) and ((o10 = o11) and
  (o9 = o12)))) and ((temp___170 = o11) and (temp___1701 = o12))) and
  ((temp___170 = g) and (temp___1701 = g1))) -> (in_range(i) ->
  ((fi(void) = i) -> (in_range(j) -> ((((2 * fi(void)) - 1) = j) ->
  (in_range(k) -> ((fk(void) = k) -> (in_range(l) ->
  ((((2 * fk(void)) - 1) = l) -> (in_range(m) -> ((fm(1) = m) ->
  (in_range(n) -> ((((2 * fm(1)) - 1) = n) -> (in_range(o) -> (in_range(p) ->
  ((to_rep((c[1])) = 1) -> ((to_rep((c[2])) = 1) -> ((to_rep((c2[1])) = 1) ->
  ((to_rep((c2[2])) = 1) -> ((to_rep((d2[1])) = 1) ->
  ((to_rep((d2[2])) = 1) -> ((to_rep(e) = 1) -> ((to_rep(e1) = 1) ->
  ((to_rep(f) = 1) -> ((to_rep(f1) = 1) ->
  (to_rep(g) = 1))))))))))))))))))))))))))))))))
