;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort x_coord 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (x_coord x_coord) Bool)

(declare-fun dummy () x_coord)

(declare-datatypes ()
((x_coord__ref (mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a x_coord__ref)) x_coord (x_coord__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_137 Int)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (<= 1 8)) (in_range1 temp___expr_137)))

(declare-fun to_rep (x_coord) Int)

(declare-fun of_rep (Int) x_coord)

;; inversion_axiom
  (assert
  (forall ((x x_coord)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x x_coord)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort y_coord 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (y_coord y_coord) Bool)

(declare-fun dummy1 () y_coord)

(declare-datatypes ()
((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_143 Int)
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool (=>
                                      (or (= temp___is_init_140 true)
                                      (<= 1 16)) (in_range2 temp___expr_143)))

(declare-fun to_rep1 (y_coord) Int)

(declare-fun of_rep1 (Int) y_coord)

;; inversion_axiom
  (assert
  (forall ((x y_coord))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x y_coord)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort action_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (action_type action_type) Bool)

(declare-fun dummy2 () action_type)

(declare-datatypes ()
((action_type__ref (mk_action_type__ref (action_type__content action_type)))))
(define-fun action_type__ref___projection ((a action_type__ref)) action_type
  (action_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_149 Int)
  (temp___is_init_146 Bool) (temp___skip_constant_147 Bool)
  (temp___do_toplevel_148 Bool)) Bool (=>
                                      (or (= temp___is_init_146 true)
                                      (<= 0 3)) (in_range3 temp___expr_149)))

(declare-sort piece_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (piece_type piece_type) Bool)

(declare-fun dummy3 () piece_type)

(declare-datatypes ()
((piece_type__ref (mk_piece_type__ref (piece_type__content piece_type)))))
(define-fun piece_type__ref___projection ((a piece_type__ref)) piece_type
  (piece_type__content a))

(declare-fun to_rep2 (piece_type) Int)

(declare-fun of_rep2 (Int) piece_type)

;; inversion_axiom
  (assert
  (forall ((x piece_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x piece_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tetris__piece__kind piece_type)(rec__tetris__piece__y y_coord)(rec__tetris__piece__x x_coord)))))
(define-fun us_split_fields_Kind2__projection ((a us_split_fields)) piece_type
  (rec__tetris__piece__kind a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) y_coord
  (rec__tetris__piece__y a))

(define-fun us_split_fields_X__projection ((a us_split_fields)) x_coord
  (rec__tetris__piece__x a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__tetris__piece__kind (us_split_fields1 a)))
                        (to_rep2
                        (rec__tetris__piece__kind (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__tetris__piece__y (us_split_fields1 a)))
                        (to_rep1
                        (rec__tetris__piece__y (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__tetris__piece__x (us_split_fields1 a)))
                        (to_rep (rec__tetris__piece__x (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun tetris__piece__kind__first__bit () Int)

(declare-fun tetris__piece__kind__last__bit () Int)

(declare-fun tetris__piece__kind__position () Int)

;; tetris__piece__kind__first__bit_axiom
  (assert (<= 0 tetris__piece__kind__first__bit))

;; tetris__piece__kind__last__bit_axiom
  (assert (< tetris__piece__kind__first__bit tetris__piece__kind__last__bit))

;; tetris__piece__kind__position_axiom
  (assert (<= 0 tetris__piece__kind__position))

(declare-fun tetris__piece__y__first__bit () Int)

(declare-fun tetris__piece__y__last__bit () Int)

(declare-fun tetris__piece__y__position () Int)

;; tetris__piece__y__first__bit_axiom
  (assert (<= 0 tetris__piece__y__first__bit))

;; tetris__piece__y__last__bit_axiom
  (assert (< tetris__piece__y__first__bit tetris__piece__y__last__bit))

;; tetris__piece__y__position_axiom
  (assert (<= 0 tetris__piece__y__position))

(declare-fun tetris__piece__x__first__bit () Int)

(declare-fun tetris__piece__x__last__bit () Int)

(declare-fun tetris__piece__x__position () Int)

;; tetris__piece__x__first__bit_axiom
  (assert (<= 0 tetris__piece__x__first__bit))

;; tetris__piece__x__last__bit_axiom
  (assert (< tetris__piece__x__first__bit tetris__piece__x__last__bit))

;; tetris__piece__x__position_axiom
  (assert (<= 0 tetris__piece__x__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((piece__ref (mk_piece__ref (piece__content us_rep)))))
(define-fun piece__ref___projection ((a piece__ref)) us_rep (piece__content
                                                            a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun direction () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun is_valid_move (us_rep Int) Bool)

(declare-fun is_valid_move__function_guard (Bool us_rep Int) Bool)

;; is_valid_move__post_axiom
  (assert true)

;; is_valid_move__def_axiom
  (assert
  (forall ((the_piece us_rep))
  (forall ((direction1 Int))
  (! (= (= (is_valid_move the_piece direction1) true)
     (not
     (and (= direction1 3)
     (= (to_rep1 (rec__tetris__piece__y (us_split_fields1 the_piece))) 16)))) :pattern (
  (is_valid_move the_piece direction1)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant3 ((temp___expr_167 Int)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool (=>
                                      (or (= temp___is_init_164 true)
                                      (<= 1 7)) (in_range4 temp___expr_167)))

(declare-fun the_piece__split_fields () piece_type)

(declare-fun the_piece__split_fields1 () y_coord)

(declare-fun the_piece__split_fields2 () x_coord)

(declare-fun xnew () Int)

(declare-fun ynew () Int)

(declare-fun result () Int)

(declare-fun xnew1 () Int)

(declare-fun result1 () Int)

(declare-fun ynew1 () Int)

;; H
  (assert (in_range3 direction))

;; H
  (assert
  (= (is_valid_move
     (mk___rep
     (mk___split_fields the_piece__split_fields the_piece__split_fields1
     the_piece__split_fields2)) direction) true))

;; H
  (assert (= result xnew))

;; H
  (assert (= xnew1 (to_rep the_piece__split_fields2)))

;; H
  (assert (in_range1 xnew1))

;; H
  (assert (= result1 ynew))

;; H
  (assert (= ynew1 (to_rep1 the_piece__split_fields1)))

;; H
  (assert (in_range2 ynew1))

;; H
  (assert (not (= direction 1)))

;; H
  (assert (not (= direction 2)))

;; H
  (assert (= direction 3))

(assert
;; WP_parameter_def
 ;; File "tetris.ads", line 59, characters 0-0
  (not (in_range2 (+ ynew1 1))))
(check-sat)
(exit)
