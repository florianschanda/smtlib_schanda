;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun x () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun y () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun z () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun tmp1 () Int)

(declare-fun tmp2 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun result () Int)

(declare-fun tmp11 () Int)

(declare-fun result1 () Int)

(declare-fun tmp21 () Int)

(declare-fun result2 () Int)

(declare-fun tmp12 () Int)

(declare-fun result3 () Int)

(declare-fun tmp22 () Int)

(declare-fun result4 () Int)

(declare-fun tmp13 () Int)

(declare-fun result5 () Int)

(declare-fun tmp23 () Int)

(declare-fun result6 () Int)

(declare-fun tmp14 () Int)

;; H
  (assert (in_range x))

;; H
  (assert (in_range y))

;; H
  (assert (in_range z))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range tmp1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range tmp2)))

;; H
  (assert (and (= o (+ x y)) (in_range (+ x y))))

;; H
  (assert (= o1 (+ o z)))

;; H
  (assert (and (= o2 o1) (in_range o1)))

;; H
  (assert (= result tmp1))

;; H
  (assert (= tmp11 o2))

;; H
  (assert (and (= o3 (+ x y)) (in_range (+ x y))))

;; H
  (assert (= o4 (- o3 z)))

;; H
  (assert (and (= o5 o4) (in_range o4)))

;; H
  (assert (= result1 tmp2))

;; H
  (assert (= tmp21 o5))

;; H
  (assert (and (= o6 (+ x y)) (in_range (+ x y))))

;; H
  (assert (= o7 (+ o6 z)))

;; H
  (assert (and (= o8 o7) (in_range o7)))

;; H
  (assert (= result2 tmp11))

;; H
  (assert (= tmp12 o8))

;; H
  (assert (and (= o9 (- y z)) (in_range (- y z))))

;; H
  (assert (= o10 (+ x o9)))

;; H
  (assert (and (= o11 o10) (in_range o10)))

;; H
  (assert (= result3 tmp21))

;; H
  (assert (= tmp22 o11))

;; H
  (assert (and (= o12 (* x y)) (in_range (* x y))))

;; H
  (assert (= o13 (mod2 o12 z)))

;; H
  (assert (= result4 tmp12))

;; H
  (assert (= tmp13 o13))

;; H
  (assert (and (= o14 (div1 x y)) (in_range (div1 x y))))

;; H
  (assert (= o15 (* o14 z)))

;; H
  (assert (and (= o16 o15) (in_range o15)))

;; H
  (assert (= result5 tmp22))

;; H
  (assert (= tmp23 o16))

;; H
  (assert (and (= o17 (* x y)) (in_range (* x y))))

;; H
  (assert (= o18 (+ o17 z)))

;; H
  (assert (and (= o19 o18) (in_range o18)))

;; H
  (assert (= result6 tmp13))

;; H
  (assert (= tmp14 o19))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range (div1 x y))))
(check-sat)
(exit)
