;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort unsigned_32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)

(declare-const dummy1 unsigned_32)

(declare-datatypes ((unsigned_32__ref 0))
(((mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32
  (unsigned_32__content a))

(define-fun dynamic_invariant1 ((temp___expr_177 (_ BitVec 32))
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool true)

(declare-const val__ (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const exp Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort titerS 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (titerS titerS) Bool)

(declare-const dummy2 titerS)

(declare-datatypes ((titerS__ref 0))
(((mk_titerS__ref (titerS__content titerS)))))
(define-fun titerS__ref___projection ((a titerS__ref)) titerS (titerS__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_201 Int)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=>
                                      (or (= temp___is_init_198 true)
                                      (<= 0 31)) (in_range2 temp___expr_201)))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun pow21 (Int) (_ BitVec 32))

(declare-fun pow2__function_guard ((_ BitVec 32) Int) Bool)

;; pow2__post_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true) (dynamic_invariant1 (pow21 i)
     true false true)) :pattern ((pow21 i)) )))

;; pow2__def_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true)
     (= (pow21 i) (ite (< i 4294967296)
                  (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) i))
                  ((_ int2bv 32) 0)))) :pattern ((pow21 i)) )))

(declare-const cur_exp (_ BitVec 32))

(declare-const cur_val (_ BitVec 32))

(declare-const result__ (_ BitVec 32))

(declare-const iter Int)

(declare-const exponentiate__result (_ BitVec 32))

(declare-const temp___207 (_ BitVec 32))

(declare-const temp___208 (_ BitVec 32))

(declare-const temp___206 (_ BitVec 32))

(declare-const temp___205 (_ BitVec 32))

(declare-const temp___204 Int)

(declare-const o (_ BitVec 32))

(declare-const o1 (_ BitVec 32))

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 (_ BitVec 32))

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 (_ BitVec 32))

(declare-const o8 (_ BitVec 32))

(declare-const o9 Int)

(declare-const exponentiate__result1 (_ BitVec 32))

(declare-const result (_ BitVec 32))

(declare-const cur_exp1 (_ BitVec 32))

(declare-const result1 (_ BitVec 32))

(declare-const cur_val1 (_ BitVec 32))

(declare-const result2 (_ BitVec 32))

(declare-const result__1 (_ BitVec 32))

(declare-const result3 Int)

(declare-const iter1 Int)

(declare-const result4 (_ BitVec 32))

(declare-const exponentiate__result2 (_ BitVec 32))

(declare-const cur_exp2 (_ BitVec 32))

(declare-const cur_val2 (_ BitVec 32))

(declare-const result__2 (_ BitVec 32))

(declare-const iter2 Int)

(declare-const result5 (_ BitVec 32))

(declare-const result__3 (_ BitVec 32))

(declare-const result6 (_ BitVec 32))

(declare-const cur_exp3 (_ BitVec 32))

(declare-const result7 (_ BitVec 32))

(declare-const cur_val3 (_ BitVec 32))

(declare-const result8 Int)

(declare-const iter3 Int)

(declare-const cur_exp4 (_ BitVec 32))

(declare-const cur_val4 (_ BitVec 32))

(declare-const result__4 (_ BitVec 32))

(declare-const iter4 int__ref)

(declare-const cur_exp5 (_ BitVec 32))

(declare-const cur_val5 (_ BitVec 32))

(declare-const result__5 (_ BitVec 32))

(declare-const iter5 Int)

(declare-const cur_exp6 t__ref)

(declare-const cur_val6 t__ref)

(declare-const result__6 t__ref)

(declare-const iter6 int__ref)

(declare-const cur_exp7 (_ BitVec 32))

(declare-const cur_val7 (_ BitVec 32))

(declare-const result__7 (_ BitVec 32))

(declare-const iter7 Int)

(declare-const result9 t__ref)

(declare-const exponentiate__result3 (_ BitVec 32))

(declare-const exponentiate__result4 t__ref)

(declare-const exponentiate__result5 (_ BitVec 32))

(declare-const cur_exp8 t__ref)

(declare-const cur_val8 t__ref)

(declare-const result__8 t__ref)

(declare-const iter8 int__ref)

(declare-const exponentiate__result6 t__ref)

(declare-const cur_exp9 (_ BitVec 32))

(declare-const cur_val9 (_ BitVec 32))

(declare-const result__9 (_ BitVec 32))

(declare-const iter9 Int)

(declare-const exponentiate__result7 (_ BitVec 32))

(declare-const cur_exp10 t__ref)

(declare-const cur_val10 t__ref)

(declare-const result__10 t__ref)

(declare-const iter10 int__ref)

(declare-const exponentiate__result8 t__ref)

(declare-const cur_exp11 (_ BitVec 32))

(declare-const cur_val11 (_ BitVec 32))

(declare-const result__11 (_ BitVec 32))

(declare-const iter11 Int)

(declare-const exponentiate__result9 (_ BitVec 32))

(define-fun result10 () int__ref (mk_int__ref result3))

(define-fun result11 () t__ref (mk_t__ref result2))

(define-fun result12 () t__ref (mk_t__ref result1))

(define-fun result13 () t__ref (mk_t__ref result))

(define-fun iter12 () int__ref (mk_int__ref iter))

(define-fun result__12 () t__ref (mk_t__ref result__))

(define-fun cur_val12 () t__ref (mk_t__ref cur_val))

(define-fun cur_exp12 () t__ref (mk_t__ref cur_exp))

;; H
  (assert true)

;; H
  (assert (in_range1 exp))

;; H
  (assert (= result13 cur_exp12))

;; H
  (assert (= cur_exp1 ((_ int2bv 32) exp)))

;; H
  (assert true)

;; H
  (assert (= result12 cur_val12))

;; H
  (assert (= cur_val1 val__))

;; H
  (assert true)

;; H
  (assert (= result11 result__12))

;; H
  (assert (= result__1 ((_ int2bv 32) 1)))

;; H
  (assert true)

;; H
  (assert (= result10 iter12))

;; H
  (assert (= iter1 0))

;; H
  (assert (in_range2 iter1))

;; H
  (assert (not (= exp 0)))

;; H
  (assert (= exponentiate__result2 exponentiate__result))

;; H
  (assert (= exponentiate__result2 exponentiate__result1))

;; H
  (assert (not (= cur_exp1 ((_ int2bv 32) 0))))

;; H
  (assert
  (= result__2 (power val__
               (bv2int (bvurem ((_ int2bv 32) exp) (pow21 iter2))))))

;; H
  (assert (= cur_val2 (power val__ (bv2int (pow21 iter2)))))

;; H
  (assert (= cur_exp2 (bvudiv cur_exp1 (pow21 iter2))))

;; H
  (assert
  (and (=> (<= 0 31) (in_range2 iter2)) (not (= cur_exp2 ((_ int2bv 32) 0)))))

;; H
  (assert
  (=> (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1))
  (= result__2 result5)))

;; H
  (assert
  (=> (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1))
  (= result__3 (bvmul result__2 cur_val2))))

;; H
  (assert
  (=> (not (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1)))
  (= result__3 result__2)))

(assert
;; WP_parameter_def
 ;; File "interfac.ads", line 74, characters 0-0
  (not (not (= ((_ int2bv 32) 2) #x00000000))))
(check-sat)
(exit)
