;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort resource 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (resource resource) Bool)

(declare-const dummy2 resource)

(declare-datatypes ((resource__ref 0))
(((mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_284 Int)
  (temp___is_init_281 Bool) (temp___skip_constant_282 Bool)
  (temp___do_toplevel_283 Bool)) Bool (=>
                                      (or (= temp___is_init_281 true)
                                      (<= 0 3)) (in_range3 temp___expr_284)))

(declare-fun to_rep (resource) Int)

(declare-fun of_rep (Int) resource)

;; inversion_axiom
  (assert
  (forall ((x resource))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x resource)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort valid_resource 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (valid_resource valid_resource) Bool)

(declare-const dummy3 valid_resource)

(declare-datatypes ((valid_resource__ref 0))
(((mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource
  (valid_resource__content a))

(declare-sort status 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (status status) Bool)

(declare-const dummy4 status)

(declare-datatypes ((status__ref 0))
(((mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content
                                                              a))

(declare-fun to_rep1 (status) Int)

(declare-fun of_rep1 (Int) status)

;; inversion_axiom
  (assert
  (forall ((x status))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x status)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__list_allocator__cell__stat status)(rec__list_allocator__cell__prev resource)(rec__list_allocator__cell__next resource)))))
(define-fun us_split_fields_Stat__projection ((a us_split_fields)) status
  (rec__list_allocator__cell__stat a))

(define-fun us_split_fields_Prev__projection ((a us_split_fields)) resource
  (rec__list_allocator__cell__prev a))

(define-fun us_split_fields_Next__projection ((a us_split_fields)) resource
  (rec__list_allocator__cell__next a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__list_allocator__cell__stat
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__list_allocator__cell__stat
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__list_allocator__cell__prev
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_allocator__cell__prev
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__list_allocator__cell__next
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_allocator__cell__next
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const list_allocator__cell__stat__first__bit Int)

(declare-const list_allocator__cell__stat__last__bit Int)

(declare-const list_allocator__cell__stat__position Int)

;; list_allocator__cell__stat__first__bit_axiom
  (assert (<= 0 list_allocator__cell__stat__first__bit))

;; list_allocator__cell__stat__last__bit_axiom
  (assert
  (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))

;; list_allocator__cell__stat__position_axiom
  (assert (<= 0 list_allocator__cell__stat__position))

(declare-const list_allocator__cell__prev__first__bit Int)

(declare-const list_allocator__cell__prev__last__bit Int)

(declare-const list_allocator__cell__prev__position Int)

;; list_allocator__cell__prev__first__bit_axiom
  (assert (<= 0 list_allocator__cell__prev__first__bit))

;; list_allocator__cell__prev__last__bit_axiom
  (assert
  (< list_allocator__cell__prev__first__bit list_allocator__cell__prev__last__bit))

;; list_allocator__cell__prev__position_axiom
  (assert (<= 0 list_allocator__cell__prev__position))

(declare-const list_allocator__cell__next__first__bit Int)

(declare-const list_allocator__cell__next__last__bit Int)

(declare-const list_allocator__cell__next__position Int)

;; list_allocator__cell__next__first__bit_axiom
  (assert (<= 0 list_allocator__cell__next__first__bit))

;; list_allocator__cell__next__last__bit_axiom
  (assert
  (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))

;; list_allocator__cell__next__position_axiom
  (assert (<= 0 list_allocator__cell__next__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((cell__ref 0)) (((mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq2 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content
                                                                   a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun length1 (Int us_rep1) Int)

(declare-fun length__function_guard1 (Int Int us_rep1) Bool)

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun oeq1 (Int us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption ((temp___expr_309 us_rep1)
  (temp___skip_top_level_310 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_310 true))
                                         (= (length temp___expr_309) 0)))

(declare-sort natural 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (natural natural) Bool)

(declare-const dummy7 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_33)))

;; length__post_axiom
  (assert
  (forall ((s us_rep1)) (! (dynamic_invariant1 (length s) true false
  true) :pattern ((length s)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((s us_rep1)) (! (dynamic_invariant1 (length1 attr__tag s) true
  false true) :pattern ((length1 attr__tag s)) ))))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-fun get1 (Int us_rep1 Int) Int)

(declare-fun get__function_guard1 (Int Int us_rep1 Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-sort element_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (element_type element_type) Bool)

(declare-const dummy8 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_302 Int)
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool (=>
                                      (or (= temp___is_init_299 true)
                                      (<= 0 3)) (in_range7 temp___expr_302)))

;; get__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((n Int))
  (! (=>
     (and (dynamic_invariant2 n true true true)
     (and (<= 1 n) (<= n (length s)))) (dynamic_invariant3 (get s n) true
     false true)) :pattern ((get s n)) ))))

;; get__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (n Int))
  (forall ((s us_rep1))
  (! (=> (dynamic_invariant2 n true true true) (dynamic_invariant3
     (get1 attr__tag s n) true false true)) :pattern ((get1 attr__tag s n)) ))))

(declare-fun is_prepend (us_rep1 Int us_rep1) Bool)

(declare-fun is_prepend__function_guard (Bool us_rep1 Int us_rep1) Bool)

(declare-fun is_prepend1 (Int us_rep1 Int us_rep1) Bool)

(declare-fun is_prepend__function_guard1 (Bool Int us_rep1 Int us_rep1) Bool)

;; is_prepend__post_axiom
  (assert
  (forall ((s us_rep1) (result__ us_rep1))
  (forall ((e Int))
  (! (=> (dynamic_invariant3 e true true true)
     (= (= (is_prepend s e result__) true)
     (and (and (= (length result__) (+ (length s) 1)) (= (get result__ 1) e))
     (forall ((m Int))
     (=> (and (<= 2 m) (<= m (length result__)))
     (= (get result__ m) (get s (- m 1)))))))) :pattern ((is_prepend s e
                                                         result__)) ))))

;; is_prepend__post__dispatch_axiom
  (assert true)

(declare-fun prepend (us_rep1 Int) us_rep1)

(declare-fun prepend__function_guard (us_rep1 us_rep1 Int) Bool)

(declare-fun prepend1 (Int us_rep1 Int) us_rep1)

(declare-fun prepend__function_guard1 (us_rep1 Int us_rep1 Int) Bool)

;; prepend__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((e Int))
  (! (=> (dynamic_invariant3 e true true true)
     (= (is_prepend s e (prepend s e)) true)) :pattern ((prepend s e)) ))))

;; prepend__post__dispatch_axiom
  (assert true)

(declare-fun is_removed_at (us_rep1 Int us_rep1) Bool)

(declare-fun is_removed_at__function_guard (Bool us_rep1 Int us_rep1) Bool)

(declare-fun is_removed_at1 (Int us_rep1 Int us_rep1) Bool)

(declare-fun is_removed_at__function_guard1 (Bool Int us_rep1 Int
  us_rep1) Bool)

(declare-fun remove_at (us_rep1 Int) us_rep1)

(declare-fun remove_at__function_guard (us_rep1 us_rep1 Int) Bool)

(declare-fun remove_at1 (Int us_rep1 Int) us_rep1)

(declare-fun remove_at__function_guard1 (us_rep1 Int us_rep1 Int) Bool)

;; remove_at__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((n Int))
  (! (=>
     (and (dynamic_invariant2 n true true true)
     (and (<= 1 n) (<= n (length s))))
     (= (is_removed_at s n (remove_at s n)) true)) :pattern ((remove_at s n)) ))))

;; remove_at__post__dispatch_axiom
  (assert true)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__list_allocator__m__t__available us_rep1)(rec__list_allocator__m__t__allocated us_rep1)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields2)) us_rep1
  (rec__list_allocator__m__t__available a))

(define-fun us_split_fields_Allocated__projection ((a us_split_fields2)) us_rep1
  (rec__list_allocator__m__t__allocated a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_7__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (user_eq6
                            (rec__list_allocator__m__t__available
                            (us_split_fields3 a))
                            (rec__list_allocator__m__t__available
                            (us_split_fields3 b))) true)
                         (= (user_eq6
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields3 a))
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const list_allocator__m__t__available__first__bit Int)

(declare-const list_allocator__m__t__available__last__bit Int)

(declare-const list_allocator__m__t__available__position Int)

;; list_allocator__m__t__available__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__available__first__bit))

;; list_allocator__m__t__available__last__bit_axiom
  (assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; list_allocator__m__t__available__position_axiom
  (assert (<= 0 list_allocator__m__t__available__position))

(declare-const list_allocator__m__t__allocated__first__bit Int)

(declare-const list_allocator__m__t__allocated__last__bit Int)

(declare-const list_allocator__m__t__allocated__position Int)

;; list_allocator__m__t__allocated__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; list_allocator__m__t__allocated__last__bit_axiom
  (assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; list_allocator__m__t__allocated__position_axiom
  (assert (<= 0 list_allocator__m__t__allocated__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep2)))))
(define-fun t__ref___projection ((a t__ref)) us_rep2 (t__content a))

(declare-fun oeq2 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq9 a b) (oeq2 a b)) :pattern ((user_eq9 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_316 us_rep2)
  (temp___skip_top_level_317 Bool)) Bool (and
                                         (= (length
                                            (rec__list_allocator__m__t__available
                                            (us_split_fields3
                                            temp___expr_316))) 0)
                                         (= (length
                                            (rec__list_allocator__m__t__allocated
                                            (us_split_fields3
                                            temp___expr_316))) 0)))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep2) (y us_rep2))
  (! (= (= (oeq2 x y) true)
     (and
     (= (oeq (rec__list_allocator__m__t__available (us_split_fields3 x))
        (rec__list_allocator__m__t__available (us_split_fields3 y))) true)
     (= (oeq (rec__list_allocator__m__t__allocated (us_split_fields3 x))
        (rec__list_allocator__m__t__allocated (us_split_fields3 y))) true))) :pattern (
  (oeq2 x y)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun mem (us_rep1 Int) Bool)

(declare-fun mem__function_guard (Bool us_rep1 Int) Bool)

;; mem__post_axiom
  (assert true)

;; mem__def_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((r Int))
  (! (= (= (mem s r) true)
     (exists ((j Int))
     (and (and (<= 1 j) (<= j (length s))) (= (get s j) r)))) :pattern (
  (mem s r)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun is_valid (us_split_fields2 (Array Int us_rep) Int Int) Bool)

(declare-fun is_valid__function_guard (Bool us_split_fields2
  (Array Int us_rep) Int Int) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((list_allocator__m__model__fields us_split_fields2))
  (forall ((list_allocator__data (Array Int us_rep)))
  (forall ((list_allocator__first_available Int)
  (list_allocator__first_allocated Int))
  (! (=
     (= (is_valid list_allocator__m__model__fields list_allocator__data
        list_allocator__first_available list_allocator__first_allocated) true)
     (and
     (and
     (and
     (and
     (ite (not (= list_allocator__first_available 0))
     (and
     (< 0 (length
          (rec__list_allocator__m__t__available
          (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))))
     (= (get
        (rec__list_allocator__m__t__available
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) 1) list_allocator__first_available))
     (= (length
        (rec__list_allocator__m__t__available
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))) 0))
     (ite (not (= list_allocator__first_allocated 0))
     (and
     (< 0 (length
          (rec__list_allocator__m__t__allocated
          (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))))
     (= (get
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) 1) list_allocator__first_allocated))
     (= (length
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))) 0)))
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (length
           (rec__list_allocator__m__t__available
           (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))))
     (and
     (and
     (and (in_range4
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j))
     (= (to_rep
        (rec__list_allocator__cell__next
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__available
                                     (us_split_fields3
                                     (mk___rep1
                                     list_allocator__m__model__fields))) j)))))
     (ite (< j (length
               (rec__list_allocator__m__t__available
               (us_split_fields3
               (mk___rep1 list_allocator__m__model__fields)))))
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))
     (+ j 1)) 0)))
     (= (to_rep
        (rec__list_allocator__cell__prev
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__available
                                     (us_split_fields3
                                     (mk___rep1
                                     list_allocator__m__model__fields))) j)))))
     (ite (< 1 j)
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))
     (- j 1)) 0)))
     (forall ((k Int))
     (=>
     (and (<= 1 k)
     (<= k (length
           (rec__list_allocator__m__t__available
           (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))))
     (=> (not (= j k))
     (not
     (= (get
        (rec__list_allocator__m__t__available
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j)
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) k))))))))))
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (length
           (rec__list_allocator__m__t__allocated
           (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))))
     (and
     (and
     (and (in_range4
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j))
     (= (to_rep
        (rec__list_allocator__cell__next
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__allocated
                                     (us_split_fields3
                                     (mk___rep1
                                     list_allocator__m__model__fields))) j)))))
     (ite (< j (length
               (rec__list_allocator__m__t__allocated
               (us_split_fields3
               (mk___rep1 list_allocator__m__model__fields)))))
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))
     (+ j 1)) 0)))
     (= (to_rep
        (rec__list_allocator__cell__prev
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__allocated
                                     (us_split_fields3
                                     (mk___rep1
                                     list_allocator__m__model__fields))) j)))))
     (ite (< 1 j)
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))
     (- j 1)) 0)))
     (forall ((k Int))
     (=>
     (and (<= 1 k)
     (<= k (length
           (rec__list_allocator__m__t__allocated
           (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))))
     (=> (not (= j k))
     (not
     (= (get
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j)
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) k))))))))))
     (forall ((r Int))
     (=> (and (<= 1 r) (<= r 3))
     (ite (= (to_rep1
             (rec__list_allocator__cell__stat
             (us_split_fields1 (select list_allocator__data r)))) 0)
     (and
     (= (mem
        (rec__list_allocator__m__t__available
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true)
     (not
     (= (mem
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true)))
     (and
     (not
     (= (mem
        (rec__list_allocator__m__t__available
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true))
     (= (mem
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true))))))) :pattern (
  (is_valid list_allocator__m__model__fields list_allocator__data
  list_allocator__first_available list_allocator__first_allocated)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_331 Int)
  (temp___is_init_328 Bool) (temp___skip_constant_329 Bool)
  (temp___do_toplevel_330 Bool)) Bool (=>
                                      (or (= temp___is_init_328 true)
                                      (<= 0 1)) (in_range5 temp___expr_331)))

(define-fun dynamic_invariant6 ((temp___expr_290 Int)
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)) Bool (=>
                                      (or (= temp___is_init_287 true)
                                      (<= 1 3)) (in_range4 temp___expr_290)))

;; oeq__post_axiom
  (assert
  (forall ((s1 us_rep1) (s2 us_rep1))
  (! (= (= (oeq s1 s2) true)
     (and (= (length s1) (length s2))
     (forall ((n Int))
     (=> (and (<= 1 n) (<= n (length s1))) (= (get s1 n) (get s2 n)))))) :pattern (
  (oeq s1 s2)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; is_removed_at__post_axiom
  (assert
  (forall ((s us_rep1) (result__ us_rep1))
  (forall ((n Int))
  (! (=>
     (and (dynamic_invariant2 n true true true)
     (and (<= 1 n) (<= n (length s))))
     (= (= (is_removed_at s n result__) true)
     (and (= (length result__) (- (length s) 1))
     (forall ((m Int))
     (=> (and (<= 1 m) (<= m (length result__)))
     (ite (< m n) (= (get result__ m) (get s m))
     (=> (<= n m) (= (get result__ m) (get s (+ m 1)))))))))) :pattern (
  (is_removed_at s n result__)) ))))

;; is_removed_at__post__dispatch_axiom
  (assert true)

(declare-const model____split_fields us_rep1)

(declare-const model____split_fields1 us_rep1)

(declare-const res Int)

(declare-const data (Array Int us_rep))

(declare-const first_available Int)

(declare-const first_allocated Int)

(declare-const next_avail Int)

(declare-const ma us_rep1)

(declare-const o Int)

(declare-const o1 status)

(declare-const o2 resource)

(declare-const o3 resource)

(declare-const o4 status)

(declare-const o5 resource)

(declare-const o6 resource)

(declare-const o7 resource)

(declare-const o8 Int)

(declare-const o9 resource)

(declare-const o10 resource)

(declare-const o11 status)

(declare-const o12 status)

(declare-const o13 resource)

(declare-const o14 resource)

(declare-const o15 status)

(declare-const o16 resource)

(declare-const o17 resource)

(declare-const o18 Int)

(declare-const o19 (Array Int us_rep))

(declare-const o20 resource)

(declare-const o21 status)

(declare-const o22 resource)

(declare-const o23 resource)

(declare-const o24 status)

(declare-const o25 resource)

(declare-const o26 resource)

(declare-const o27 Int)

(declare-const o28 (Array Int us_rep))

(declare-const o29 resource)

(declare-const o30 status)

(declare-const o31 resource)

(declare-const o32 resource)

(declare-const o33 status)

(declare-const o34 resource)

(declare-const o35 resource)

(declare-const o36 Int)

(declare-const o37 (Array Int us_rep))

(declare-const o38 us_rep1)

(declare-const o39 us_rep1)

(declare-const o40 us_rep1)

(declare-const temp___395 us_rep2)

(declare-const o41 us_rep1)

(declare-const o42 us_split_fields2)

(declare-const temp___397 us_rep2)

(declare-const j Int)

(declare-const o43 Int)

(declare-const o44 Bool)

(declare-const o45 Int)

(declare-const o46 Int)

(declare-const o47 Int)

(declare-const o48 Int)

(declare-const result sequence__ref)

(declare-const ma1 us_rep1)

(declare-const result1 int__ref)

(declare-const res1 Int)

(declare-const result2 int__ref)

(declare-const next_avail1 Int)

(declare-const result3 map__ref)

(declare-const data1 (Array Int us_rep))

(declare-const result4 map__ref)

(declare-const data2 (Array Int us_rep))

(declare-const result5 map__ref)

(declare-const data3 (Array Int us_rep))

(declare-const result6 int__ref)

(declare-const first_allocated1 Int)

(declare-const result7 int__ref)

(declare-const first_available1 Int)

(declare-const result8 us_split_fields__ref1)

(declare-const model____split_fields2 us_split_fields2)

(declare-const result9 us_split_fields__ref1)

(declare-const model____split_fields3 us_split_fields2)

(declare-const result10 Bool)

(declare-const result11 Bool)

(declare-const result12 Bool)

;; H
  (assert (in_range3 first_available))

;; H
  (assert (in_range3 first_allocated))

;; H
  (assert (=> (<= 0 3) (in_range3 res)))

;; H
  (assert
  (= (is_valid
     (mk___split_fields1 model____split_fields model____split_fields1)
     data first_available first_allocated) true))

;; H
  (assert (=> (<= 0 3) (in_range3 next_avail)))

;; H
  (assert (= result (mk_sequence__ref ma)))

;; H
  (assert (= ma1 model____split_fields))

;; H
  (assert (not (= first_available 0)))

;; H
  (assert (= result1 (mk_int__ref res)))

;; H
  (assert (= res1 first_available))

;; H
  (assert (and (<= 1 first_available) (<= first_available 3)))

;; H
  (assert (= o first_available))

;; H
  (assert (= (mk___rep (mk___split_fields o1 o2 o3)) (select data o)))

;; H
  (assert (= o1 o4))

;; H
  (assert (= o2 o5))

;; H
  (assert (= o3 o6))

;; H
  (assert (= o7 o6))

;; H
  (assert (= o8 (to_rep o7)))

;; H
  (assert (= result2 (mk_int__ref next_avail)))

;; H
  (assert (= next_avail1 o8))

;; H
  (assert (= (to_rep o9) first_allocated))

;; H
  (assert (= (to_rep o10) 0))

;; H
  (assert (= (to_rep1 o11) 1))

;; H
  (assert (= o11 o12))

;; H
  (assert (= o10 o13))

;; H
  (assert (= o9 o14))

;; H
  (assert (= o15 o12))

;; H
  (assert (= o16 o13))

;; H
  (assert (= o17 o14))

;; H
  (assert (and (<= 1 res1) (<= res1 3)))

;; H
  (assert (= o18 res1))

;; H
  (assert
  (= o19 (store data o18 (mk___rep (mk___split_fields o15 o16 o17)))))

;; H
  (assert (= result3 (mk_map__ref data)))

;; H
  (assert (= data1 o19))

;; H
  (assert (=> (not (= next_avail1 0)) (= (to_rep o20) 0)))

;; H
  (assert
  (=> (not (= next_avail1 0))
  (= (rec__list_allocator__cell__stat
     (us_split_fields1 (select data1 next_avail1))) o21)))

;; H
  (assert (=> (not (= next_avail1 0)) (= o20 o22)))

;; H
  (assert
  (=> (not (= next_avail1 0))
  (= (rec__list_allocator__cell__next
     (us_split_fields1 (select data1 next_avail1))) o23)))

;; H
  (assert (=> (not (= next_avail1 0)) (= o24 o21)))

;; H
  (assert (=> (not (= next_avail1 0)) (= o25 o22)))

;; H
  (assert (=> (not (= next_avail1 0)) (= o26 o23)))

;; H
  (assert
  (=> (not (= next_avail1 0)) (and (<= 1 next_avail1) (<= next_avail1 3))))

;; H
  (assert (=> (not (= next_avail1 0)) (= o27 next_avail1)))

;; H
  (assert
  (=> (not (= next_avail1 0))
  (= o28 (store data1 o27 (mk___rep (mk___split_fields o24 o25 o26))))))

;; H
  (assert (=> (not (= next_avail1 0)) (= result4 (mk_map__ref data1))))

;; H
  (assert (=> (not (= next_avail1 0)) (= data2 o28)))

;; H
  (assert (=> (not (not (= next_avail1 0))) (= data2 data1)))

;; H
  (assert (=> (not (= first_allocated 0)) (= (to_rep o29) first_available)))

;; H
  (assert
  (=> (not (= first_allocated 0))
  (= (rec__list_allocator__cell__stat
     (us_split_fields1 (select data2 first_allocated))) o30)))

;; H
  (assert (=> (not (= first_allocated 0)) (= o29 o31)))

;; H
  (assert
  (=> (not (= first_allocated 0))
  (= (rec__list_allocator__cell__next
     (us_split_fields1 (select data2 first_allocated))) o32)))

;; H
  (assert (=> (not (= first_allocated 0)) (= o33 o30)))

;; H
  (assert (=> (not (= first_allocated 0)) (= o34 o31)))

;; H
  (assert (=> (not (= first_allocated 0)) (= o35 o32)))

;; H
  (assert
  (=> (not (= first_allocated 0))
  (and (<= 1 first_allocated) (<= first_allocated 3))))

;; H
  (assert (=> (not (= first_allocated 0)) (= o36 first_allocated)))

;; H
  (assert
  (=> (not (= first_allocated 0))
  (= o37 (store data2 o36 (mk___rep (mk___split_fields o33 o34 o35))))))

;; H
  (assert (=> (not (= first_allocated 0)) (= result5 (mk_map__ref data2))))

;; H
  (assert (=> (not (= first_allocated 0)) (= data3 o37)))

;; H
  (assert (=> (not (not (= first_allocated 0))) (= data3 data2)))

;; H
  (assert (= result6 (mk_int__ref first_allocated)))

;; H
  (assert (= first_allocated1 first_available))

;; H
  (assert (= result7 (mk_int__ref first_available)))

;; H
  (assert (= first_available1 next_avail1))

;; H
  (assert
  (and (= o38 (remove_at model____split_fields 1))
  (= (is_removed_at model____split_fields 1 o38) true)))

;; H
  (assert (= o38 o39))

;; H
  (assert (= model____split_fields1 o40))

;; H
  (assert (= temp___395 (mk___rep1 (mk___split_fields1 o39 o40))))

;; H
  (assert
  (= result8 (mk___split_fields__ref1
             (mk___split_fields1 model____split_fields
             model____split_fields1))))

;; H
  (assert (= model____split_fields2 (us_split_fields3 temp___395)))

;; H
  (assert
  (and
  (= o41 (prepend
         (rec__list_allocator__m__t__allocated model____split_fields2)
         res1))
  (= (is_prepend
     (rec__list_allocator__m__t__allocated model____split_fields2) res1
     o41) true)))

;; H
  (assert
  (= o42 (mk___split_fields1
         (rec__list_allocator__m__t__available model____split_fields2)
         o41)))

;; H
  (assert (= temp___397 (mk___rep1 o42)))

;; H
  (assert (= result9 (mk___split_fields__ref1 model____split_fields2)))

;; H
  (assert (= model____split_fields3 (us_split_fields3 temp___397)))

;; H
  (assert
  (forall ((j1 Int))
  (=>
  (and (<= 1 j1)
  (<= j1 (length
         (rec__list_allocator__m__t__available model____split_fields3))))
  (and
  (and
  (and (in_range4
  (get (rec__list_allocator__m__t__available model____split_fields3) j1))
  (= (to_rep
     (rec__list_allocator__cell__next
     (us_split_fields1
     (select data3 (get
                   (rec__list_allocator__m__t__available
                   model____split_fields3) j1))))) (ite (< j1 (length
                                                              (rec__list_allocator__m__t__available
                                                              model____split_fields3)))
                                                   (get
                                                   (rec__list_allocator__m__t__available
                                                   model____split_fields3)
                                                   (+ j1 1)) 0)))
  (= (to_rep
     (rec__list_allocator__cell__prev
     (us_split_fields1
     (select data3 (get
                   (rec__list_allocator__m__t__available
                   model____split_fields3) j1))))) (ite (< 1 j1)
                                                   (get
                                                   (rec__list_allocator__m__t__available
                                                   model____split_fields3)
                                                   (- j1 1)) 0)))
  (forall ((k Int))
  (=>
  (and (<= 1 k)
  (<= k (length
        (rec__list_allocator__m__t__available model____split_fields3))))
  (=> (not (= j1 k))
  (not
  (= (get (rec__list_allocator__m__t__available model____split_fields3) j1)
  (get (rec__list_allocator__m__t__available model____split_fields3) k))))))))))

;; H
  (assert
  (and
  (= o43 (length
         (rec__list_allocator__m__t__allocated model____split_fields3)))
  (in_range6 o43)))

;; H
  (assert (= o44 (ite (<= j o43) true false)))

;; H
  (assert (= result10 (ite (<= 1 j) o44 false)))

;; H
  (assert (= result10 true))

;; H
  (assert
  (and
  (= o48 (get (rec__list_allocator__m__t__allocated model____split_fields3)
         j))
  (in_range7 o48)))

;; H
  (assert (= result11 (ite (in_range4 o48) true false)))

;; H
  (assert (= result11 true))

;; H
  (assert
  (and
  (= o45 (length
         (rec__list_allocator__m__t__allocated model____split_fields3)))
  (in_range6 o45)))

;; H
  (assert (= result12 (ite (< j o45) true false)))

;; H
  (assert (=> (= result12 true) (and (= o46 (+ j 1)) (in_range1 (+ j 1)))))

;; H
  (assert
  (=> (= result12 true)
  (and
  (= o47 (get (rec__list_allocator__m__t__allocated model____split_fields3)
         o46))
  (in_range7 o47))))

;; H
  (assert (=> (not (= result12 true)) (= o47 0)))

(assert
;; WP_parameter_def
 ;; File "list_allocator.adb", line 27, characters 0-0
  (not (<= 1 j)))
(check-sat)
(exit)
