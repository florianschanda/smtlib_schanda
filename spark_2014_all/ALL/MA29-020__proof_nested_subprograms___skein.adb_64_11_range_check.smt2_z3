;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (byte byte) Bool)

(declare-const dummy byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep (byte) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x byte)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) byte))))))
(declare-fun slide ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) byte)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort skein_512_block_bytes_index 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(define-fun in_range1 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 63))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (skein_512_block_bytes_index
  skein_512_block_bytes_index) Bool)

(declare-const dummy1 skein_512_block_bytes_index)

(declare-datatypes ()
((skein_512_block_bytes_index__ref
 (mk_skein_512_block_bytes_index__ref
 (skein_512_block_bytes_index__content skein_512_block_bytes_index)))))
(define-fun skein_512_block_bytes_index__ref___projection ((a skein_512_block_bytes_index__ref)) skein_512_block_bytes_index
  (skein_512_block_bytes_index__content a))

(define-fun dynamic_invariant ((temp___expr_493 (_ BitVec 64))
  (temp___is_init_490 Bool) (temp___skip_constant_491 Bool)
  (temp___do_toplevel_492 Bool)) Bool (=>
                                      (or (= temp___is_init_490 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)))
                                      (in_range1 temp___expr_493)))

(declare-sort u64 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (u64 u64) Bool)

(declare-const dummy2 u64)

(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))

(declare-fun to_rep1 (u64) (_ BitVec 64))

(declare-fun of_rep1 ((_ BitVec 64)) u64)

;; inversion_axiom
  (assert
  (forall ((x u64)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int5 ((x u64)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x u64)) (! (uint_in_range1 (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort hash_bit_length 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(define-fun in_range2 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x)
                                         (<= x 18446744073709551608)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (hash_bit_length hash_bit_length) Bool)

(declare-const dummy3 hash_bit_length)

(declare-datatypes ()
((hash_bit_length__ref
 (mk_hash_bit_length__ref (hash_bit_length__content hash_bit_length)))))
(define-fun hash_bit_length__ref___projection ((a hash_bit_length__ref)) hash_bit_length
  (hash_bit_length__content a))

(declare-fun to_rep2 (hash_bit_length) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x hash_bit_length))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun to_int6 ((x hash_bit_length)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range_int1
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-fun nth2 ((_ BitVec 16) Int) Bool)

(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left3 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int7 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv2 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 16))))))
(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 32) Int) Bool)

(declare-fun lsr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right4 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left4 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int8 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv3 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 32))))))
(declare-fun power3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq4 (u16 u16) Bool)

(declare-const dummy4 u16)

(declare-datatypes () ((u16__ref (mk_u16__ref (u16__content u16)))))
(define-fun u16__ref___projection ((a u16__ref)) u16 (u16__content a))

(declare-fun to_rep3 (u16) (_ BitVec 16))

(declare-fun of_rep3 ((_ BitVec 16)) u16)

;; inversion_axiom
  (assert
  (forall ((x u16)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int9 ((x u16)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x u16)) (! (uint_in_range2 (to_int9 x)) :pattern ((to_int9 x)) )))

(declare-sort u32 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 32))

(declare-fun user_eq5 (u32 u32) Bool)

(declare-const dummy5 u32)

(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))

(declare-fun to_rep4 (u32) (_ BitVec 32))

(declare-fun of_rep4 ((_ BitVec 32)) u32)

;; inversion_axiom
  (assert
  (forall ((x u32)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int10 ((x u32)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x u32)) (! (uint_in_range3
  (to_int10 x)) :pattern ((to_int10 x)) )))

(declare-sort u7 0)

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 127))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq6 (u7 u7) Bool)

(declare-const dummy6 u7)

(declare-datatypes () ((u7__ref (mk_u7__ref (u7__content u7)))))
(define-fun u7__ref___projection ((a u7__ref)) u7 (u7__content a))

(declare-fun to_rep5 (u7) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) u7)

;; inversion_axiom
  (assert
  (forall ((x u7)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x u7)) (! (in_range3 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 128))))
     (=> (in_range3 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(define-fun to_int11 ((x u7)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x u7)) (! (in_range_int2 (to_int11 x)) :pattern ((to_int11 x)) )))

(declare-sort u6 0)

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 63))))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 8))

(declare-fun user_eq7 (u6 u6) Bool)

(declare-const dummy7 u6)

(declare-datatypes () ((u6__ref (mk_u6__ref (u6__content u6)))))
(define-fun u6__ref___projection ((a u6__ref)) u6 (u6__content a))

(declare-fun to_rep6 (u6) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) u6)

;; inversion_axiom
  (assert
  (forall ((x u6)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x u6)) (! (in_range4 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 64))))
     (=> (in_range4 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int12 ((x u6)) Int (bv2int (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x u6)) (! (in_range_int3 (to_int12 x)) :pattern ((to_int12 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__skein__tweak_value__byte_count_lsb u64)(rec__skein__tweak_value__byte_count_msb u32)(rec__skein__tweak_value__reserved u16)(rec__skein__tweak_value__tree_level u7)(rec__skein__tweak_value__bit_pad Bool)(rec__skein__tweak_value__field_type u6)(rec__skein__tweak_value__first_block Bool)(rec__skein__tweak_value__final_block Bool)))))
(define-fun us_split_fields_Byte_Count_LSB__projection ((a us_split_fields)) u64
  (rec__skein__tweak_value__byte_count_lsb a))

(define-fun us_split_fields_Byte_Count_MSB__projection ((a us_split_fields)) u32
  (rec__skein__tweak_value__byte_count_msb a))

(define-fun us_split_fields_Reserved__projection ((a us_split_fields)) u16
  (rec__skein__tweak_value__reserved a))

(define-fun us_split_fields_Tree_Level__projection ((a us_split_fields)) u7
  (rec__skein__tweak_value__tree_level a))

(define-fun us_split_fields_Bit_Pad__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__bit_pad a))

(define-fun us_split_fields_Field_Type__projection ((a us_split_fields)) u6
  (rec__skein__tweak_value__field_type a))

(define-fun us_split_fields_First_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__first_block a))

(define-fun us_split_fields_Final_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__final_block a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__skein__tweak_value__byte_count_lsb
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skein__tweak_value__byte_count_lsb
                                                  (us_split_fields1 b))))
                        (= (to_rep4
                           (rec__skein__tweak_value__byte_count_msb
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__skein__tweak_value__byte_count_msb
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__skein__tweak_value__reserved
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__skein__tweak_value__reserved
                                                  (us_split_fields1 b)))))
                        (= (to_rep5
                           (rec__skein__tweak_value__tree_level
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__skein__tweak_value__tree_level
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__bit_pad
                           (us_split_fields1 a)) (rec__skein__tweak_value__bit_pad
                                                 (us_split_fields1 b))))
                        (= (to_rep6
                           (rec__skein__tweak_value__field_type
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__skein__tweak_value__field_type
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__first_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__first_block
                                                 (us_split_fields1 b))))
                        (= (rec__skein__tweak_value__final_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__final_block
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const skein__tweak_value__byte_count_lsb__first__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__last__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__position Int)

;; skein__tweak_value__byte_count_lsb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))

;; skein__tweak_value__byte_count_lsb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))

;; skein__tweak_value__byte_count_lsb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__position))

(declare-const skein__tweak_value__byte_count_msb__first__bit Int)

(declare-const skein__tweak_value__byte_count_msb__last__bit Int)

(declare-const skein__tweak_value__byte_count_msb__position Int)

;; skein__tweak_value__byte_count_msb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))

;; skein__tweak_value__byte_count_msb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))

;; skein__tweak_value__byte_count_msb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__position))

(declare-const skein__tweak_value__reserved__first__bit Int)

(declare-const skein__tweak_value__reserved__last__bit Int)

(declare-const skein__tweak_value__reserved__position Int)

;; skein__tweak_value__reserved__first__bit_axiom
  (assert (<= 0 skein__tweak_value__reserved__first__bit))

;; skein__tweak_value__reserved__last__bit_axiom
  (assert
  (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))

;; skein__tweak_value__reserved__position_axiom
  (assert (<= 0 skein__tweak_value__reserved__position))

(declare-const skein__tweak_value__tree_level__first__bit Int)

(declare-const skein__tweak_value__tree_level__last__bit Int)

(declare-const skein__tweak_value__tree_level__position Int)

;; skein__tweak_value__tree_level__first__bit_axiom
  (assert (<= 0 skein__tweak_value__tree_level__first__bit))

;; skein__tweak_value__tree_level__last__bit_axiom
  (assert
  (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))

;; skein__tweak_value__tree_level__position_axiom
  (assert (<= 0 skein__tweak_value__tree_level__position))

(declare-const skein__tweak_value__bit_pad__first__bit Int)

(declare-const skein__tweak_value__bit_pad__last__bit Int)

(declare-const skein__tweak_value__bit_pad__position Int)

;; skein__tweak_value__bit_pad__first__bit_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__first__bit))

;; skein__tweak_value__bit_pad__last__bit_axiom
  (assert
  (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))

;; skein__tweak_value__bit_pad__position_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__position))

(declare-const skein__tweak_value__field_type__first__bit Int)

(declare-const skein__tweak_value__field_type__last__bit Int)

(declare-const skein__tweak_value__field_type__position Int)

;; skein__tweak_value__field_type__first__bit_axiom
  (assert (<= 0 skein__tweak_value__field_type__first__bit))

;; skein__tweak_value__field_type__last__bit_axiom
  (assert
  (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))

;; skein__tweak_value__field_type__position_axiom
  (assert (<= 0 skein__tweak_value__field_type__position))

(declare-const skein__tweak_value__first_block__first__bit Int)

(declare-const skein__tweak_value__first_block__last__bit Int)

(declare-const skein__tweak_value__first_block__position Int)

;; skein__tweak_value__first_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__first_block__first__bit))

;; skein__tweak_value__first_block__last__bit_axiom
  (assert
  (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))

;; skein__tweak_value__first_block__position_axiom
  (assert (<= 0 skein__tweak_value__first_block__position))

(declare-const skein__tweak_value__final_block__first__bit Int)

(declare-const skein__tweak_value__final_block__last__bit Int)

(declare-const skein__tweak_value__final_block__position Int)

;; skein__tweak_value__final_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__final_block__first__bit))

;; skein__tweak_value__final_block__last__bit_axiom
  (assert
  (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))

;; skein__tweak_value__final_block__position_axiom
  (assert (<= 0 skein__tweak_value__final_block__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
((tweak_value__ref (mk_tweak_value__ref (tweak_value__content us_rep)))))
(define-fun tweak_value__ref___projection ((a tweak_value__ref)) us_rep
  (tweak_value__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__skein__context_header__tweak_words us_rep)(rec__skein__context_header__hash_bit_len hash_bit_length)(rec__skein__context_header__byte_count u64)))))
(define-fun us_split_fields_Tweak_Words__projection ((a us_split_fields2)) us_rep
  (rec__skein__context_header__tweak_words a))

(define-fun us_split_fields_Hash_Bit_Len__projection ((a us_split_fields2)) hash_bit_length
  (rec__skein__context_header__hash_bit_len a))

(define-fun us_split_fields_Byte_Count__projection ((a us_split_fields2)) u64
  (rec__skein__context_header__byte_count a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq1
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 a))
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 b))) true)
                         (= (to_rep2
                            (rec__skein__context_header__hash_bit_len
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__skein__context_header__hash_bit_len
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__skein__context_header__byte_count
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__skein__context_header__byte_count
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const skein__context_header__tweak_words__first__bit Int)

(declare-const skein__context_header__tweak_words__last__bit Int)

(declare-const skein__context_header__tweak_words__position Int)

;; skein__context_header__tweak_words__first__bit_axiom
  (assert (<= 0 skein__context_header__tweak_words__first__bit))

;; skein__context_header__tweak_words__last__bit_axiom
  (assert
  (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))

;; skein__context_header__tweak_words__position_axiom
  (assert (<= 0 skein__context_header__tweak_words__position))

(declare-const skein__context_header__hash_bit_len__first__bit Int)

(declare-const skein__context_header__hash_bit_len__last__bit Int)

(declare-const skein__context_header__hash_bit_len__position Int)

;; skein__context_header__hash_bit_len__first__bit_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__first__bit))

;; skein__context_header__hash_bit_len__last__bit_axiom
  (assert
  (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))

;; skein__context_header__hash_bit_len__position_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__position))

(declare-const skein__context_header__byte_count__first__bit Int)

(declare-const skein__context_header__byte_count__last__bit Int)

(declare-const skein__context_header__byte_count__position Int)

;; skein__context_header__byte_count__first__bit_axiom
  (assert (<= 0 skein__context_header__byte_count__first__bit))

;; skein__context_header__byte_count__last__bit_axiom
  (assert
  (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))

;; skein__context_header__byte_count__position_axiom
  (assert (<= 0 skein__context_header__byte_count__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ()
((context_header__ref
 (mk_context_header__ref (context_header__content us_rep1)))))
(define-fun context_header__ref___projection ((a context_header__ref)) us_rep1
  (context_header__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 64) u64))))))
(declare-fun slide1 ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (u64 (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; singleton_def
  (assert
  (forall ((v u64))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq3 ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_133 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_133)
                                     (bvule temp___idx_133 a__last))
                                     (= (to_rep1 (select a temp___idx_133))
                                     (to_rep1
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_133 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep1 (select a (bvadd i #x0000000000000001))) (to_rep1
                                                              (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep1 (select a (bvadd j #x0000000000000001))) (to_rep1
                                                              (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const dummy10 (Array (_ BitVec 64) u64))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array (_ BitVec 64) u64)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array (_ BitVec 64) u64)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array (_ BitVec 64) u64)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 ((Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) u64)) Bool)

(declare-const dummy11 (Array (_ BitVec 64) byte))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq11 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__skein__skein_512_context__h us_rep1)(rec__skein__skein_512_context__x (Array (_ BitVec 64) u64))(rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))
(define-fun us_split_fields_H__projection ((a us_split_fields4)) us_rep1
  (rec__skein__skein_512_context__h a))

(define-fun us_split_fields_X__projection ((a us_split_fields4)) (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x a))

(define-fun us_split_fields_B__projection ((a us_split_fields4)) (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 a))
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 b))) true)
                         (= (bool_eq3
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)) true))
                         (= (bool_eq
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)) true))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const skein__skein_512_context__h__first__bit Int)

(declare-const skein__skein_512_context__h__last__bit Int)

(declare-const skein__skein_512_context__h__position Int)

;; skein__skein_512_context__h__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__h__first__bit))

;; skein__skein_512_context__h__last__bit_axiom
  (assert
  (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))

;; skein__skein_512_context__h__position_axiom
  (assert (<= 0 skein__skein_512_context__h__position))

(declare-const skein__skein_512_context__x__first__bit Int)

(declare-const skein__skein_512_context__x__last__bit Int)

(declare-const skein__skein_512_context__x__position Int)

;; skein__skein_512_context__x__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__x__first__bit))

;; skein__skein_512_context__x__last__bit_axiom
  (assert
  (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))

;; skein__skein_512_context__x__position_axiom
  (assert (<= 0 skein__skein_512_context__x__position))

(declare-const skein__skein_512_context__b__first__bit Int)

(declare-const skein__skein_512_context__b__last__bit Int)

(declare-const skein__skein_512_context__b__position Int)

;; skein__skein_512_context__b__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__b__first__bit))

;; skein__skein_512_context__b__last__bit_axiom
  (assert
  (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))

;; skein__skein_512_context__b__position_axiom
  (assert (<= 0 skein__skein_512_context__b__position))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ()
((skein_512_context__ref
 (mk_skein_512_context__ref (skein_512_context__content us_rep2)))))
(define-fun skein_512_context__ref___projection ((a skein_512_context__ref)) us_rep2
  (skein_512_context__content a))

(declare-const start_index (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_270 (_ BitVec 8))
  (temp___is_init_267 Bool) (temp___skip_constant_268 Bool)
  (temp___do_toplevel_269 Bool)) Bool true)

(define-fun dynamic_invariant2 ((temp___expr_276 (_ BitVec 16))
  (temp___is_init_273 Bool) (temp___skip_constant_274 Bool)
  (temp___do_toplevel_275 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_282 (_ BitVec 32))
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_288 (_ BitVec 64))
  (temp___is_init_285 Bool) (temp___skip_constant_286 Bool)
  (temp___do_toplevel_287 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_460 (_ BitVec 64))
  (temp___is_init_457 Bool) (temp___skip_constant_458 Bool)
  (temp___do_toplevel_459 Bool)) Bool (=>
                                      (or (= temp___is_init_457 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 18446744073709551608)))
                                      (in_range2 temp___expr_460)))

(define-fun dynamic_invariant6 ((temp___expr_541 (_ BitVec 8))
  (temp___is_init_538 Bool) (temp___skip_constant_539 Bool)
  (temp___do_toplevel_540 Bool)) Bool (=>
                                      (or (= temp___is_init_538 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 63)))
                                      (in_range4 temp___expr_541)))

(define-fun dynamic_invariant7 ((temp___expr_535 (_ BitVec 8))
  (temp___is_init_532 Bool) (temp___skip_constant_533 Bool)
  (temp___do_toplevel_534 Bool)) Bool (=>
                                      (or (= temp___is_init_532 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 127)))
                                      (in_range3 temp___expr_535)))

;; H
  (assert (in_range1 start_index))

;; H
  (assert (bvule start_index ((_ int2bv 64) 63)))

(assert
;; WP_parameter_def
 ;; File "skein.adb", line 69, characters 0-0
  (not (bvuge start_index ((_ int2bv 64) 0))))
(check-sat)
(exit)
