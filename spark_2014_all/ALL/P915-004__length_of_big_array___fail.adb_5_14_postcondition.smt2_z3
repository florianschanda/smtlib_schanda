;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort my_index 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (my_index my_index) Bool)

(declare-fun dummy () my_index)

(declare-datatypes ()
((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_286 (_ BitVec 64))
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool true)

(declare-fun to_rep (my_index) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) my_index)

;; inversion_axiom
  (assert
  (forall ((x my_index))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x my_index)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x my_index)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) Bool))))))
(declare-fun slide ((Array (_ BitVec 64) Bool) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) Bool))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) Bool) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) Bool))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool (_ BitVec 64)) (Array (_ BitVec 64) Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) Bool)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) Bool))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_133 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_133)
                                     (bvule temp___idx_133 a__last))
                                     (= (select a temp___idx_133) (select b (bvadd (bvsub b__first a__first) temp___idx_133))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_133 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (= (select a temp___idx_133) (select b (bvadd (bvsub b__first a__first) temp___idx_133))))))))))

(declare-fun compare ((Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (< (to_int2 (select a (bvadd i #x0000000000000001))) (to_int2
                                                          (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (< (to_int2 (select b (bvadd i #x0000000000000001))) (to_int2
                                                          (select a (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) Bool) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) Bool))

(declare-fun andb ((Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) Bool) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) Bool))

(declare-fun orb ((Array (_ BitVec 64) Bool) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) Bool) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) Bool))

(declare-fun notb ((Array (_ BitVec 64) Bool) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) Bool))

;; op_def
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)) (b (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-sort t 0)

(declare-fun first (t) my_index)

(declare-fun last (t) my_index)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool true)

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 64) Bool))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) Bool) (elts a))

(define-fun of_array ((a (Array (_ BitVec 64) Bool)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2int (last1 a)) (bv2int (first1 a))) 1)
                                  0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array (_ BitVec 64) Bool)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array (_ BitVec 64) Bool)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array (_ BitVec 64) Bool)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq1 (us_t us_t) Bool)

(declare-fun dummy1 () us_t)

(declare-datatypes () ((a__ref (mk_a__ref (a__content us_t)))))
(define-fun a__ref___projection ((a a__ref)) us_t (a__content a))

(declare-fun last2 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 64))

(define-fun dynamic_property1 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (my_index my_index) Bool)

(declare-fun dummy2 () my_index)

(declare-datatypes ()
((tTrSP1__ref (mk_tTrSP1__ref (tTrSP1__content my_index)))))
(define-fun tTrSP1__ref___projection ((a tTrSP1__ref)) my_index (tTrSP1__content
                                                                a))

(declare-sort t1 0)

(declare-fun first2 (t1) my_index)

(declare-fun last3 (t1) my_index)

(declare-fun mk1 ((_ BitVec 64) (_ BitVec 64)) t1)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last3 (mk1 f l))) l)) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (=> (bvule low high)
                             (and (dynamic_property1 range_first range_last
                             low) (dynamic_property1 range_first range_last
                             high))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array (_ BitVec 64) Bool))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 64) Bool) (elts1 a))

(define-fun of_array1 ((a (Array (_ BitVec 64) Bool)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) (_ BitVec 64) (to_rep (first2 (rt1 a))))

(define-fun last4 ((a us_t1)) (_ BitVec 64) (to_rep (last3 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last4 a))
                                    (+ (- (bv2int (last4 a)) (bv2int
                                    (first3 a))) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array (_ BitVec 64) Bool)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array (_ BitVec 64) Bool)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array (_ BitVec 64) Bool)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last3 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last3 (rt1 y)))))

(declare-fun user_eq3 (us_t1 us_t1) Bool)

(declare-fun dummy3 () us_t1)

(declare-datatypes () ((trS__ref (mk_trS__ref (trS__content us_t1)))))
(define-fun trS__ref___projection ((a trS__ref)) us_t1 (trS__content a))

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 64))

(define-fun dynamic_property3 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (my_index my_index) Bool)

(declare-fun dummy4 () my_index)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content my_index)))))
(define-fun t2b__ref___projection ((a t2b__ref)) my_index (t2b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) my_index)

(declare-fun last5 (t2) my_index)

(declare-fun mk2 ((_ BitVec 64) (_ BitVec 64)) t2)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last5 (mk2 f l))) l)) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (=> (bvule low high)
                             (and (dynamic_property3 range_first range_last
                             low) (dynamic_property3 range_first range_last
                             high))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array (_ BitVec 64) Bool))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array (_ BitVec 64) Bool) (elts2 a))

(define-fun of_array2 ((a (Array (_ BitVec 64) Bool)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) (_ BitVec 64) (to_rep (first4 (rt2 a))))

(define-fun last6 ((a us_t2)) (_ BitVec 64) (to_rep (last5 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (bvule (first5 a) (last6 a))
                                    (+ (- (bv2int (last6 a)) (bv2int
                                    (first5 a))) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array (_ BitVec 64) Bool)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array (_ BitVec 64) Bool)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array (_ BitVec 64) Bool)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) Bool)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) Bool))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq3 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last5 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last5 (rt2 y)))))

(declare-fun user_eq5 (us_t2 us_t2) Bool)

(declare-fun dummy5 () us_t2)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_t2)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_t2 (t3b__content a))

(declare-fun r__first () my_index)

(declare-fun r__last () my_index)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun fail__create__r__aggregate_def (Bool (_ BitVec 64)
  (_ BitVec 64)) us_t2)

;; def_axiom
  (assert
  (forall ((temp___632 Bool))
  (forall ((temp___633 (_ BitVec 64)) (temp___634 (_ BitVec 64)))
  (let ((temp___631 (fail__create__r__aggregate_def temp___632 temp___633
                    temp___634)))
  (and
  (=> (dynamic_property ((_ int2bv 64) 0)
  ((_ int2bv 64) 18446744073709551615) temp___633 temp___634)
  (and (= (first5 temp___631) temp___633) (= (last6 temp___631) temp___634)))
  (forall ((temp___635 (_ BitVec 64)))
  (= (select (to_array2 temp___631) temp___635) temp___632)))))))

(define-fun dynamic_invariant1 ((temp___expr_292 us_t)
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool (=>
                                      (not (= temp___skip_constant_290 true))
                                      (dynamic_property ((_ int2bv 64) 0)
                                      ((_ int2bv 64) 18446744073709551615)
                                      (first1 temp___expr_292)
                                      (last1 temp___expr_292))))

(define-fun dynamic_invariant2 ((temp___expr_625 us_t1)
  (temp___is_init_622 Bool) (temp___skip_constant_623 Bool)
  (temp___do_toplevel_624 Bool)) Bool (=>
                                      (not (= temp___skip_constant_623 true))
                                      (and (dynamic_property2
                                      ((_ int2bv 64) 0) last2
                                      (first3 temp___expr_625)
                                      (last4 temp___expr_625))
                                      (and
                                      (= (first3 temp___expr_625) ((_ int2bv 64) 0))
                                      (= (last4 temp___expr_625) last2)))))

(declare-fun r () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result1 () t)

(declare-fun temp___637 () (Array (_ BitVec 64) Bool))

(declare-fun temp___6371 () t2)

(declare-fun fail__create__r__assume () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__r__assume1 () t1)

(declare-fun result () (Array (_ BitVec 64) Bool))

(declare-fun r1 () (Array (_ BitVec 64) Bool))

(declare-fun result1 () (Array (_ BitVec 64) Bool))

(declare-fun result2 () t)

(declare-fun fail__create__result2 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result3 () t)

(declare-fun fail__create__result4 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result5 () t)

(declare-fun fail__create__result6 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result7 () t)

(declare-fun r2 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result8 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result9 () t)

(declare-fun r3 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result10 () (Array (_ BitVec 64) Bool))

(declare-fun fail__create__result11 () t)

(define-fun temp___6372 () us_t2 (mk___t2 temp___637 temp___6371))

(declare-fun result3 () (Array (_ BitVec 64) Bool))

(declare-fun result4 () t)

;; H
  (assert true)

;; H
  (assert
  (= (to_rep
     (first4
     (rt2
     (fail__create__r__aggregate_def (of_int 0) ((_ int2bv 64) 0) last2)))) ((_ int2bv 64) 0)))

;; H
  (assert
  (= (to_rep
     (last5
     (rt2
     (fail__create__r__aggregate_def (of_int 0) ((_ int2bv 64) 0) last2))))
  last2))

;; H
  (assert
  (= temp___6372 (fail__create__r__aggregate_def (of_int 0) ((_ int2bv 64) 0)
                 last2)))

;; H
  (assert
  (= (ite (<= (bv2int (to_rep (first4 temp___6371))) (bv2int (to_rep
                                                             (last5
                                                             temp___6371))))
     (+ (- (bv2int (to_rep (last5 temp___6371))) (bv2int (to_rep
                                                         (first4 temp___6371)))) 1)
     0) (ite (<= (bv2int ((_ int2bv 64) 0)) (bv2int last2))
        (+ (- (bv2int last2) (bv2int ((_ int2bv 64) 0))) 1) 0)))

;; H
  (assert (= temp___637 fail__create__r__assume))

;; H
  (assert
  (= (mk1 (to_rep (first4 temp___6371)) (to_rep (last5 temp___6371)))
  fail__create__r__assume1))

;; H
  (assert (= result r))

;; H
  (assert (= r1 fail__create__r__assume))

;; H
  (assert (= (to_rep r__first) (to_rep (first2 fail__create__r__assume1))))

;; H
  (assert (= (to_rep r__last) (to_rep (last3 fail__create__r__assume1))))

;; H
  (assert
  (and (dynamic_property2 ((_ int2bv 64) 0) last2 (to_rep r__first)
  (to_rep r__last))
  (and (= (to_rep r__first) ((_ int2bv 64) 0)) (= (to_rep r__last) last2))))

;; H
  (assert (= fail__create__result4 fail__create__result2))

;; H
  (assert (= fail__create__result5 fail__create__result3))

;; H
  (assert
  (= (mk___t fail__create__result6 fail__create__result7) (mk___t
                                                          fail__create__result2
                                                          fail__create__result3)))

;; H
  (assert (= result1 fail__create__result))

;; H
  (assert (= result2 fail__create__result1))

;; H
  (assert (= r1 fail__create__result2))

;; H
  (assert (= (mk (to_rep r__first) (to_rep r__last)) fail__create__result3))

;; H
  (assert
  (= (mk_a__ref (mk___t fail__create__result8 fail__create__result9))
  (mk_a__ref (mk___t fail__create__result4 fail__create__result5))))

;; H
  (assert (= r2 r1))

;; H
  (assert (= fail__create__result10 fail__create__result6))

;; H
  (assert (= fail__create__result11 fail__create__result7))

;; H
  (assert (= r3 r1))

;; H
  (assert (= result3 fail__create__result8))

;; H
  (assert (= result4 fail__create__result9))

(assert
;; WP_parameter_def
 ;; File "mod_array.ads", line 4, characters 0-0
  (not (= (to_rep (last fail__create__result9)) last2)))
(check-sat)
(exit)
