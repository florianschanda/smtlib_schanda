;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index_type index_type) Bool)

(declare-fun dummy1 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 64)) (in_range2 temp___expr_142)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun limit () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun index_of_minimum (Int Int (Array Int integer)) Int)

(declare-fun index_of_minimum__function_guard (Int Int Int
  (Array Int integer)) Bool)

;; index_of_minimum__post_axiom
  (assert
  (forall ((starting_at Int) (limit1 Int))
  (forall ((values (Array Int integer)))
  (! (=>
     (and
     (and (dynamic_invariant starting_at true true true) (dynamic_invariant
     limit1 true true true)) (<= starting_at limit1))
     (let ((result (index_of_minimum starting_at limit1 values)))
     (and
     (and (and (<= starting_at result) (<= result limit1))
     (forall ((j Int))
     (=> (and (<= starting_at j) (<= j limit1))
     (<= (to_rep (select values result)) (to_rep (select values j))))))
     (dynamic_invariant result true false true)))) :pattern ((index_of_minimum
                                                             starting_at
                                                             limit1 values)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-fun dummy2 () integer)

(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content integer)))))
(define-fun t15b__ref___projection ((a t15b__ref)) integer (t15b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun values () (Array Int integer))

(declare-fun smallest () Int)

(declare-fun current () Int)

(declare-fun temp___161 () Int)

(declare-fun temp___160 () Int)

(declare-fun temp___159 () (Array Int integer))

(declare-fun o () Int)

(declare-fun values1 () (Array Int integer))

(declare-fun smallest1 () Int)

(declare-fun result () Int)

(declare-fun current1 () Int)

(declare-fun result1 () Int)

(declare-fun smallest2 () Int)

(declare-fun values2 () (Array Int integer))

(declare-fun values3 () (Array Int integer))

(declare-fun smallest3 () Int)

(declare-fun current2 () Int)

(declare-fun values4 () (Array Int integer))

(declare-fun smallest4 () Int)

(declare-fun current3 () Int)

(declare-fun values5 () (Array Int integer))

(declare-fun smallest5 () Int)

(declare-fun current4 () Int)

(declare-fun values6 () (Array Int integer))

(declare-fun smallest6 () Int)

(declare-fun current5 () Int)

(declare-fun values7 () (Array Int integer))

(declare-fun smallest7 () Int)

(declare-fun current6 () Int)

(declare-fun values8 () (Array Int integer))

(declare-fun smallest8 () Int)

(declare-fun current7 () Int)

(declare-fun values9 () (Array Int integer))

(declare-fun smallest9 () Int)

(declare-fun current8 () Int)

(define-fun current9 () int__ref (mk_int__ref current5))

(define-fun smallest10 () int__ref (mk_int__ref smallest6))

(define-fun values10 () map__ref (mk_map__ref values6))

(define-fun smallest11 () int__ref (mk_int__ref smallest))

;; H
  (assert (in_range2 limit))

;; H
  (assert (=> (<= 1 64) (in_range2 smallest)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref current)))

;; H
  (assert (= current1 1))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= temp___161 current1)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= temp___160 smallest)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= temp___159 values)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (and (= o (index_of_minimum current1 limit values))
  (and (in_range2 o)
  (and (and (<= current1 o) (<= o limit))
  (forall ((j Int))
  (=> (and (<= current1 j) (<= j limit))
  (<= (to_rep (select values o)) (to_rep (select values j))))))))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (= (mk_int__ref result1) smallest11)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 limit)) (= smallest2 o)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (=> (not (= smallest2 current1))
  (and
  (and
  (= (to_rep (select values2 current1)) (to_rep (select values smallest2)))
  (= (to_rep (select values2 smallest2)) (to_rep (select values current1))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 64))
  (=> (and (not (= j current1)) (not (= j smallest2)))
  (= (to_rep (select values2 j)) (to_rep (select values j))))))))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (=> (not (not (= smallest2 current1))) (= values2 values))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (=> (not (not (= smallest2 current1))) (= values2 values1))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j (- current2 1)))
  (<= (to_rep (select values3 j)) (to_rep (select values3 (+ j 1))))))
  (forall ((j Int))
  (=> (and (<= current2 j) (<= j limit))
  (<= (to_rep (select values3 current2)) (to_rep (select values3 j))))))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (and
  (and (=> (<= 1 64) (in_range2 smallest3))
  (=> (<= 1 limit) (dynamic_property 1 limit current2)))
  (and (<= 1 current2) (<= current2 limit)))))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 limit)) (= current2 limit)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= current2 current3)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= smallest3 smallest4)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 limit)) (= values3 values4)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= current4 current2)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= smallest5 smallest3)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 limit)) (= values5 values3)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (= current9 (mk_int__ref current3))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (= smallest10 (mk_int__ref smallest4))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit))
  (= values10 (mk_map__ref values4))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= current6 current4)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 limit)) (= smallest7 smallest5)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 limit)) (= values7 values5)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 limit))) (= current1 current5)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 limit)))
  (= smallest10 smallest11)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 limit)))
  (= values10 (mk_map__ref values))))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 limit))) (= current6 current1)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 limit)))
  (= smallest7 smallest1)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 limit))) (= values7 values1)))

;; H
  (assert (= (mk_int__ref current7) current9))

;; H
  (assert (= (mk_int__ref smallest8) smallest10))

;; H
  (assert (= (mk_map__ref values8) values10))

;; H
  (assert (= current8 current6))

;; H
  (assert (= smallest9 smallest7))

;; H
  (assert (= values9 values7))

;; H
  (assert (<= 1 (- limit 1)))

(assert
;; WP_parameter_def
 ;; File "sorters_not_global.adb", line 30, characters 0-0
  (not (<= 1 1)))
(check-sat)
(exit)
