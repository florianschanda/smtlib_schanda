;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort t3s 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (t3s t3s) Bool)

(declare-const dummy5 t3s)

(declare-datatypes ((t3s__ref 0)) (((mk_t3s__ref (t3s__content t3s)))))
(define-fun t3s__ref___projection ((a t3s__ref)) t3s (t3s__content a))

(declare-fun to_rep3 (positive) Int)

(declare-fun of_rep3 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort data 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (data data) Bool)

(declare-const dummy6 data)

(declare-datatypes ((data__ref 0)) (((mk_data__ref (data__content data)))))
(define-fun data__ref___projection ((a data__ref)) data (data__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((tdata_arrayD1__ref 0))
(((mk_tdata_arrayD1__ref (tdata_arrayD1__content integer)))))
(define-fun tdata_arrayD1__ref___projection ((a tdata_arrayD1__ref)) integer
  (tdata_arrayD1__content a))

(declare-fun to_rep4 (data) Int)

(declare-fun of_rep4 (Int) data)

;; inversion_axiom
  (assert
  (forall ((x data)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x data)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int data))))))
(declare-fun slide1 ((Array Int data) Int Int) (Array Int data))

;; slide_eq
  (assert
  (forall ((a (Array Int data)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int data)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int data) Int Int (Array Int data) Int
  Int) (Array Int data))

;; concat_def
  (assert
  (forall ((a (Array Int data)) (b (Array Int data)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (data Int) (Array Int data))

;; singleton_def
  (assert
  (forall ((v data))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int data)) (a__first Int) (a__last Int)
  (b (Array Int data)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int data)) (b (Array Int data)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int data) Int Int (Array Int data) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int data)) (b (Array Int data)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int data)) (b (Array Int data)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int data)) (b (Array Int data)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int data))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int data) (elts1 a))

(define-fun of_array1 ((a (Array Int data)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int data)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int data)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int data)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int data))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int data))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int data))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq8 (us_t1 us_t1) Bool)

(declare-const dummy8 us_t1)

(declare-datatypes ((data_array__ref 0))
(((mk_data_array__ref (data_array__content us_t1)))))
(define-fun data_array__ref___projection ((a data_array__ref)) us_t1
  (data_array__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__communication__ring_buffer__buffer__content us_t1)(rec__communication__ring_buffer__buffer__first positive)(rec__communication__ring_buffer__buffer__length natural)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) us_t1
  (rec__communication__ring_buffer__buffer__content a))

(define-fun us_split_fields_First__projection ((a us_split_fields)) positive
  (rec__communication__ring_buffer__buffer__first a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) natural
  (rec__communication__ring_buffer__buffer__length a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (bool_eq3
                           (rec__communication__ring_buffer__buffer__content
                           (us_split_fields1 a))
                           (rec__communication__ring_buffer__buffer__content
                           (us_split_fields1 b))) true)
                        (= (to_rep3
                           (rec__communication__ring_buffer__buffer__first
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__communication__ring_buffer__buffer__first
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__communication__ring_buffer__buffer__length
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__communication__ring_buffer__buffer__length
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const communication__ring_buffer__buffer__content__first__bit Int)

(declare-const communication__ring_buffer__buffer__content__last__bit Int)

(declare-const communication__ring_buffer__buffer__content__position Int)

;; communication__ring_buffer__buffer__content__first__bit_axiom
  (assert (<= 0 communication__ring_buffer__buffer__content__first__bit))

;; communication__ring_buffer__buffer__content__last__bit_axiom
  (assert
  (< communication__ring_buffer__buffer__content__first__bit communication__ring_buffer__buffer__content__last__bit))

;; communication__ring_buffer__buffer__content__position_axiom
  (assert (<= 0 communication__ring_buffer__buffer__content__position))

(declare-const communication__ring_buffer__buffer__first__first__bit Int)

(declare-const communication__ring_buffer__buffer__first__last__bit Int)

(declare-const communication__ring_buffer__buffer__first__position Int)

;; communication__ring_buffer__buffer__first__first__bit_axiom
  (assert (<= 0 communication__ring_buffer__buffer__first__first__bit))

;; communication__ring_buffer__buffer__first__last__bit_axiom
  (assert
  (< communication__ring_buffer__buffer__first__first__bit communication__ring_buffer__buffer__first__last__bit))

;; communication__ring_buffer__buffer__first__position_axiom
  (assert (<= 0 communication__ring_buffer__buffer__first__position))

(declare-const communication__ring_buffer__buffer__length__first__bit Int)

(declare-const communication__ring_buffer__buffer__length__last__bit Int)

(declare-const communication__ring_buffer__buffer__length__position Int)

;; communication__ring_buffer__buffer__length__first__bit_axiom
  (assert (<= 0 communication__ring_buffer__buffer__length__first__bit))

;; communication__ring_buffer__buffer__length__last__bit_axiom
  (assert
  (< communication__ring_buffer__buffer__length__first__bit communication__ring_buffer__buffer__length__last__bit))

;; communication__ring_buffer__buffer__length__position_axiom
  (assert (<= 0 communication__ring_buffer__buffer__length__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((buffer__ref 0))
(((mk_buffer__ref (buffer__content us_rep)))))
(define-fun buffer__ref___projection ((a buffer__ref)) us_rep (buffer__content
                                                              a))

(declare-const dummy10 (Array Int character))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int character)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq10 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__communication__mailbox__address (Array Int character))(rec__communication__mailbox__port natural)(rec__communication__mailbox__in_buffer us_rep)(rec__communication__mailbox__out_buffer us_rep)))))
(define-fun us_split_fields_Address__projection ((a us_split_fields2)) (Array Int character)
  (rec__communication__mailbox__address a))

(define-fun us_split_fields_Port__projection ((a us_split_fields2)) natural
  (rec__communication__mailbox__port a))

(define-fun us_split_fields_In_Buffer__projection ((a us_split_fields2)) us_rep
  (rec__communication__mailbox__in_buffer a))

(define-fun us_split_fields_Out_Buffer__projection ((a us_split_fields2)) us_rep
  (rec__communication__mailbox__out_buffer a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq
                            (rec__communication__mailbox__address
                            (us_split_fields3 a)) 1 15
                            (rec__communication__mailbox__address
                            (us_split_fields3 b)) 1 15) true)
                         (= (to_rep2
                            (rec__communication__mailbox__port
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__communication__mailbox__port
                                                   (us_split_fields3 b)))))
                         (= (bool_eq4
                            (rec__communication__mailbox__in_buffer
                            (us_split_fields3 a))
                            (rec__communication__mailbox__in_buffer
                            (us_split_fields3 b))) true))
                         (= (bool_eq4
                            (rec__communication__mailbox__out_buffer
                            (us_split_fields3 a))
                            (rec__communication__mailbox__out_buffer
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-const communication__mailbox__address__first__bit Int)

(declare-const communication__mailbox__address__last__bit Int)

(declare-const communication__mailbox__address__position Int)

;; communication__mailbox__address__first__bit_axiom
  (assert (<= 0 communication__mailbox__address__first__bit))

;; communication__mailbox__address__last__bit_axiom
  (assert
  (< communication__mailbox__address__first__bit communication__mailbox__address__last__bit))

;; communication__mailbox__address__position_axiom
  (assert (<= 0 communication__mailbox__address__position))

(declare-const communication__mailbox__port__first__bit Int)

(declare-const communication__mailbox__port__last__bit Int)

(declare-const communication__mailbox__port__position Int)

;; communication__mailbox__port__first__bit_axiom
  (assert (<= 0 communication__mailbox__port__first__bit))

;; communication__mailbox__port__last__bit_axiom
  (assert
  (< communication__mailbox__port__first__bit communication__mailbox__port__last__bit))

;; communication__mailbox__port__position_axiom
  (assert (<= 0 communication__mailbox__port__position))

(declare-const communication__mailbox__in_buffer__first__bit Int)

(declare-const communication__mailbox__in_buffer__last__bit Int)

(declare-const communication__mailbox__in_buffer__position Int)

;; communication__mailbox__in_buffer__first__bit_axiom
  (assert (<= 0 communication__mailbox__in_buffer__first__bit))

;; communication__mailbox__in_buffer__last__bit_axiom
  (assert
  (< communication__mailbox__in_buffer__first__bit communication__mailbox__in_buffer__last__bit))

;; communication__mailbox__in_buffer__position_axiom
  (assert (<= 0 communication__mailbox__in_buffer__position))

(declare-const communication__mailbox__out_buffer__first__bit Int)

(declare-const communication__mailbox__out_buffer__last__bit Int)

(declare-const communication__mailbox__out_buffer__position Int)

;; communication__mailbox__out_buffer__first__bit_axiom
  (assert (<= 0 communication__mailbox__out_buffer__first__bit))

;; communication__mailbox__out_buffer__last__bit_axiom
  (assert
  (< communication__mailbox__out_buffer__first__bit communication__mailbox__out_buffer__last__bit))

;; communication__mailbox__out_buffer__position_axiom
  (assert (<= 0 communication__mailbox__out_buffer__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-const dummy11 us_rep1)

(declare-datatypes ((mailbox__ref 0))
(((mk_mailbox__ref (mailbox__content us_rep1)))))
(define-fun mailbox__ref___projection ((a mailbox__ref)) us_rep1 (mailbox__content
                                                                 a))

(declare-const address us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const port Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_136)))

(declare-const max Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant6 ((temp___expr_142 us_t1)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (not (= temp___skip_constant_140 true))
                                      (and (dynamic_property2 1 max
                                      (first3 temp___expr_142)
                                      (last3 temp___expr_142))
                                      (and (= (first3 temp___expr_142) 1)
                                      (= (last3 temp___expr_142) max)))))

(define-fun dynamic_invariant7 ((temp___expr_151 us_rep)
  (temp___is_init_148 Bool) (temp___skip_constant_149 Bool)
  (temp___do_toplevel_150 Bool)) Bool (and (dynamic_property2 1 max
                                      (first3
                                      (rec__communication__ring_buffer__buffer__content
                                      (us_split_fields1 temp___expr_151)))
                                      (last3
                                      (rec__communication__ring_buffer__buffer__content
                                      (us_split_fields1 temp___expr_151))))
                                      (and
                                      (= (first3
                                         (rec__communication__ring_buffer__buffer__content
                                         (us_split_fields1 temp___expr_151))) 1)
                                      (= (last3
                                         (rec__communication__ring_buffer__buffer__content
                                         (us_split_fields1 temp___expr_151)))
                                      max))))

(define-fun default_initial_assumption ((temp___expr_153 us_rep)
  (temp___skip_top_level_154 Bool)) Bool (and
                                         (= (to_rep3
                                            (rec__communication__ring_buffer__buffer__first
                                            (us_split_fields1
                                            temp___expr_153))) 1)
                                         (= (to_rep2
                                            (rec__communication__ring_buffer__buffer__length
                                            (us_split_fields1
                                            temp___expr_153))) 0)))

(declare-fun temp___String_Literal_167 (tuple0) (Array Int character))

;; temp___String_Literal_167__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 1)) 48)
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 2)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 3)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 4)) 46))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 5)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 6)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 7)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 8)) 46))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 9)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 10)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 11)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 12)) 46))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 13)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 14)) 48))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 15)) 48)) :pattern (
  (temp___String_Literal_167 us_void_param)) )))

(define-fun dynamic_invariant8 ((temp___expr_161 us_rep1)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)) Bool (and
                                      (and (dynamic_property2 1 max
                                      (first3
                                      (rec__communication__ring_buffer__buffer__content
                                      (us_split_fields1
                                      (rec__communication__mailbox__in_buffer
                                      (us_split_fields3 temp___expr_161)))))
                                      (last3
                                      (rec__communication__ring_buffer__buffer__content
                                      (us_split_fields1
                                      (rec__communication__mailbox__in_buffer
                                      (us_split_fields3 temp___expr_161))))))
                                      (and
                                      (= (first3
                                         (rec__communication__ring_buffer__buffer__content
                                         (us_split_fields1
                                         (rec__communication__mailbox__in_buffer
                                         (us_split_fields3 temp___expr_161))))) 1)
                                      (= (last3
                                         (rec__communication__ring_buffer__buffer__content
                                         (us_split_fields1
                                         (rec__communication__mailbox__in_buffer
                                         (us_split_fields3 temp___expr_161)))))
                                      max)))
                                      (and (dynamic_property2 1 max
                                      (first3
                                      (rec__communication__ring_buffer__buffer__content
                                      (us_split_fields1
                                      (rec__communication__mailbox__out_buffer
                                      (us_split_fields3 temp___expr_161)))))
                                      (last3
                                      (rec__communication__ring_buffer__buffer__content
                                      (us_split_fields1
                                      (rec__communication__mailbox__out_buffer
                                      (us_split_fields3 temp___expr_161))))))
                                      (and
                                      (= (first3
                                         (rec__communication__ring_buffer__buffer__content
                                         (us_split_fields1
                                         (rec__communication__mailbox__out_buffer
                                         (us_split_fields3 temp___expr_161))))) 1)
                                      (= (last3
                                         (rec__communication__ring_buffer__buffer__content
                                         (us_split_fields1
                                         (rec__communication__mailbox__out_buffer
                                         (us_split_fields3 temp___expr_161)))))
                                      max)))))

(define-fun default_initial_assumption1 ((temp___expr_165 us_rep1)
  (temp___skip_top_level_166 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (rec__communication__mailbox__address
                                            (us_split_fields3
                                            temp___expr_165)) (temp___String_Literal_167
                                                              Tuple0))
                                         (= (to_rep2
                                            (rec__communication__mailbox__port
                                            (us_split_fields3
                                            temp___expr_165))) 0))
                                         (and
                                         (= (to_rep3
                                            (rec__communication__ring_buffer__buffer__first
                                            (us_split_fields1
                                            (rec__communication__mailbox__in_buffer
                                            (us_split_fields3
                                            temp___expr_165))))) 1)
                                         (= (to_rep2
                                            (rec__communication__ring_buffer__buffer__length
                                            (us_split_fields1
                                            (rec__communication__mailbox__in_buffer
                                            (us_split_fields3
                                            temp___expr_165))))) 0)))
                                         (and
                                         (= (to_rep3
                                            (rec__communication__ring_buffer__buffer__first
                                            (us_split_fields1
                                            (rec__communication__mailbox__out_buffer
                                            (us_split_fields3
                                            temp___expr_165))))) 1)
                                         (= (to_rep2
                                            (rec__communication__ring_buffer__buffer__length
                                            (us_split_fields1
                                            (rec__communication__mailbox__out_buffer
                                            (us_split_fields3
                                            temp___expr_165))))) 0))))

(declare-const o natural)

;; H
  (assert (dynamic_invariant1 address true false true))

;; H
  (assert (in_range3 port))

;; H
  (assert (= (to_rep2 o) port))

(assert
;; WP_parameter_def
 ;; File "communication.ads", line 27, characters 0-0
  (not
  (= (ite (<= (to_rep1 (first (rt address))) (to_rep1 (last (rt address))))
     (+ (- (to_rep1 (last (rt address))) (to_rep1 (first (rt address)))) 1)
     0) (ite (<= 1 15) (+ (- 15 1) 1) 0))))
(check-sat)
(exit)
