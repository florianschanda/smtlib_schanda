(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type state_t

predicate in_range(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : state_t, state_t -> bool

logic dummy : state_t

type state_t__ref = { state_t__content : state_t
}

function state_t__ref___projection(a: state_t__ref) : state_t =
  (a).state_t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic cur_state : int -> int

logic cur_state__function_guard : int, int -> prop

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom cur_state__post_axiom :
  (forall ghost_example__state:int [cur_state(ghost_example__state)].
  (in_range(ghost_example__state) ->
  in_range(cur_state(ghost_example__state))))

axiom cur_state__def_axiom :
  (forall ghost_example__state:int [cur_state(ghost_example__state)].
  (in_range(ghost_example__state) ->
  (cur_state(ghost_example__state) = ghost_example__state)))

 (* File "client_unit.adb", line 42, characters 0-0 *)
goal WP_parameter_def :
  (forall state:int. forall state1:int. forall state2:int.
  forall item_done:bool. (in_range(state) -> (((cur_state(state1) = 0) and
  in_range(state1)) -> (((((item_done = true) and (cur_state(state2) = 1)) or
  ((not (item_done = true)) and (cur_state(state2) = 0))) and
  in_range(state2)) -> ((item_done = true) -> (cur_state(state2) = 1))))))
