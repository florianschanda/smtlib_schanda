(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type my_nat__ref = { my_nat__content : integer
}

function my_nat__ref___projection(a: my_nat__ref) : integer =
  (a).my_nat__content

type us_split_discrs = { rec__dynamic_array__rec__b : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__dynamic_array__rec__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__dynamic_array__rec__f1 : integer;
rec__dynamic_array__rec__f2 : integer
}

function us_split_fields_F1__projection(a: us_split_fields) : integer =
  (a).rec__dynamic_array__rec__f1

function us_split_fields_F2__projection(a: us_split_fields) : integer =
  (a).rec__dynamic_array__rec__f2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_3__projection(a: us_rep) : bool = (a).attr__constrained

predicate dynamic_array__rec__f1__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__dynamic_array__rec__b) = 1)

predicate dynamic_array__rec__f2__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__dynamic_array__rec__b) = 0)

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((((a).us_split_discrs1).rec__dynamic_array__rec__b = ((b).us_split_discrs1).rec__dynamic_array__rec__b) and
  (dynamic_array__rec__f1__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__dynamic_array__rec__f1) = to_rep1(((b).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  (dynamic_array__rec__f2__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__dynamic_array__rec__f2) = to_rep1(((b).us_split_fields1).rec__dynamic_array__rec__f2)))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((((a).us_split_discrs1).rec__dynamic_array__rec__b = ((b).us_split_discrs1).rec__dynamic_array__rec__b) and
  (dynamic_array__rec__f1__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__dynamic_array__rec__f1) = to_rep1(((b).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  (dynamic_array__rec__f2__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__dynamic_array__rec__f2) = to_rep1(((b).us_split_fields1).rec__dynamic_array__rec__f2))))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size({ us_split_discrs1 = { rec__dynamic_array__rec__b = a };
  us_split_fields1 = { rec__dynamic_array__rec__f1 = a1;
  rec__dynamic_array__rec__f2 = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__dynamic_array__rec__b =
  a }; us_split_fields1 = { rec__dynamic_array__rec__f1 = a1;
  rec__dynamic_array__rec__f2 = a2 }; attr__constrained = a3 })))

logic dynamic_array__rec__b__first__bit : int

logic dynamic_array__rec__b__last__bit : int

logic dynamic_array__rec__b__position : int

axiom dynamic_array__rec__b__first__bit_axiom :
  (0 <= dynamic_array__rec__b__first__bit)

axiom dynamic_array__rec__b__last__bit_axiom :
  (dynamic_array__rec__b__first__bit <  dynamic_array__rec__b__last__bit)

axiom dynamic_array__rec__b__position_axiom :
  (0 <= dynamic_array__rec__b__position)

logic dynamic_array__rec__f1__first__bit : int

logic dynamic_array__rec__f1__last__bit : int

logic dynamic_array__rec__f1__position : int

axiom dynamic_array__rec__f1__first__bit_axiom :
  (0 <= dynamic_array__rec__f1__first__bit)

axiom dynamic_array__rec__f1__last__bit_axiom :
  (dynamic_array__rec__f1__first__bit <  dynamic_array__rec__f1__last__bit)

axiom dynamic_array__rec__f1__position_axiom :
  (0 <= dynamic_array__rec__f1__position)

logic dynamic_array__rec__f2__first__bit : int

logic dynamic_array__rec__f2__last__bit : int

logic dynamic_array__rec__f2__position : int

axiom dynamic_array__rec__f2__first__bit_axiom :
  (0 <= dynamic_array__rec__f2__first__bit)

axiom dynamic_array__rec__f2__last__bit_axiom :
  (dynamic_array__rec__f2__first__bit <  dynamic_array__rec__f2__last__bit)

axiom dynamic_array__rec__f2__position_axiom :
  (0 <= dynamic_array__rec__f2__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : bool

logic dummy5 : integer

logic dummy6 : integer

logic dummy7 : bool

type rec____ref = { rec____content : us_rep
}

function rec____ref___projection(a: rec____ref) : us_rep = (a).rec____content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:bool. forall v1:integer. forall v2:integer. forall v3:bool.
  (forall i:int [(singleton({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = v }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = v1; rec__dynamic_array__rec__f2 = v2 };
  attr__constrained = v3 }, i)[i])]. ((singleton({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = v }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = v1; rec__dynamic_array__rec__f2 = v2 };
  attr__constrained = v3 }, i)[i]) = { us_split_discrs1 = {
  rec__dynamic_array__rec__b = v }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = v1; rec__dynamic_array__rec__f2 = v2 };
  attr__constrained = v3 })))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy8 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last1(mk(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last1((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last2(a)) ->
  (length(a) = ((last2(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last2(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq7((x).elts,
  to_rep1(first((x).rt)), to_rep1(last1((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last1((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy9 : (int,us_rep) farray

logic dummy10 : t

type t4b__ref = { t4b__content : us_t
}

function t4b__ref___projection(a: t4b__ref) : us_t = (a).t4b__content

type us_split_discrs2 = { rec__dynamic_array__holder__d : natural
}

function us_split_discrs_2__projection(a: us_split_discrs2) : natural =
  (a).rec__dynamic_array__holder__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref_2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__dynamic_array__holder__content : us_t
}

function us_split_fields_Content__projection(a: us_split_fields2) : us_t =
  (a).rec__dynamic_array__holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep_4__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep_5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq10(a, b)].
  ((((to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs3).rec__dynamic_array__holder__d)) and
  (bool_eq9(((a).us_split_fields3).rec__dynamic_array__holder__content,
  ((b).us_split_fields3).rec__dynamic_array__holder__content) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs3).rec__dynamic_array__holder__d)) and
  (bool_eq9(((a).us_split_fields3).rec__dynamic_array__holder__content,
  ((b).us_split_fields3).rec__dynamic_array__holder__content) = true))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t.
  (0 <= object__size2({ us_split_discrs3 = { rec__dynamic_array__holder__d =
  a }; us_split_fields3 = { rec__dynamic_array__holder__content = { elts =
  a1; rt = a2 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t.
  (0 <= object__alignment2({ us_split_discrs3 = {
  rec__dynamic_array__holder__d = a }; us_split_fields3 = {
  rec__dynamic_array__holder__content = { elts = a1; rt = a2 } } })))

logic dynamic_array__holder__d__first__bit : int

logic dynamic_array__holder__d__last__bit : int

logic dynamic_array__holder__d__position : int

axiom dynamic_array__holder__d__first__bit_axiom :
  (0 <= dynamic_array__holder__d__first__bit)

axiom dynamic_array__holder__d__last__bit_axiom :
  (dynamic_array__holder__d__first__bit <  dynamic_array__holder__d__last__bit)

axiom dynamic_array__holder__d__position_axiom :
  (0 <= dynamic_array__holder__d__position)

logic dynamic_array__holder__content__first__bit : int

logic dynamic_array__holder__content__last__bit : int

logic dynamic_array__holder__content__position : int

axiom dynamic_array__holder__content__first__bit_axiom :
  (0 <= dynamic_array__holder__content__first__bit)

axiom dynamic_array__holder__content__last__bit_axiom :
  (dynamic_array__holder__content__first__bit <  dynamic_array__holder__content__last__bit)

axiom dynamic_array__holder__content__position_axiom :
  (0 <= dynamic_array__holder__content__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy11 : natural

logic dummy12 : (int,us_rep) farray

logic dummy13 : t

type holder__ref = { holder__content : us_rep1
}

function holder__ref___projection(a: holder__ref) : us_rep1 =
  (a).holder__content

logic new_holder : int -> us_rep1

logic new_holder__function_guard : us_rep1, int -> prop

axiom new_holder__post_axiom :
  (forall d:int [new_holder(d)]. (in_range2(d) -> ((((c = 0) ->
  (to_rep(((new_holder(d)).us_split_discrs3).rec__dynamic_array__holder__d) = 0)) and
  ((not (c = 0)) ->
  (to_rep(((new_holder(d)).us_split_discrs3).rec__dynamic_array__holder__d) = d))) and
  ((dynamic_property2(1,
  to_rep(((new_holder(d)).us_split_discrs3).rec__dynamic_array__holder__d),
  to_rep1(first((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).rt)),
  to_rep1(last1((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).rt))) and
  ((to_rep1(first((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).rt)) = 1) and
  (to_rep1(last1((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).rt)) = to_rep(((new_holder(d)).us_split_discrs3).rec__dynamic_array__holder__d)))) and
  (forall temp___168:int.
  (((to_rep1(first((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).rt)) <= temp___168) and
  (temp___168 <= to_rep1(last1((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).rt)))) ->
  ((((to_int(((((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_discrs1).rec__dynamic_array__rec__b) = 1) ->
  dynamic_property(0, last,
  to_rep1(((((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_fields1).rec__dynamic_array__rec__f1))) and
  ((to_int(((((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_discrs1).rec__dynamic_array__rec__b) = 0) ->
  dynamic_property(0, last,
  to_rep1(((((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_fields1).rec__dynamic_array__rec__f2)))) and
  ((((((new_holder(d)).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).attr__constrained = false))))))))

logic increment : us_rep -> int

logic increment__function_guard : int, us_rep -> prop

axiom increment__post_axiom :
  (forall r:bool. forall r1:integer. forall r2:integer. forall r3:bool
  [increment({ us_split_discrs1 = { rec__dynamic_array__rec__b = r };
  us_split_fields1 = { rec__dynamic_array__rec__f1 = r1;
  rec__dynamic_array__rec__f2 = r2 }; attr__constrained = r3 })].
  ((((to_int(r) = 1) -> dynamic_property(0, last, to_rep1(r1))) and
  ((to_int(r) = 0) -> dynamic_property(0, last, to_rep1(r2)))) ->
  in_range2(increment({ us_split_discrs1 = { rec__dynamic_array__rec__b = r
  }; us_split_fields1 = { rec__dynamic_array__rec__f1 = r1;
  rec__dynamic_array__rec__f2 = r2 }; attr__constrained = r3 }))))

axiom increment__def_axiom :
  (forall r:bool. forall r1:integer. forall r2:integer. forall r3:bool
  [increment({ us_split_discrs1 = { rec__dynamic_array__rec__b = r };
  us_split_fields1 = { rec__dynamic_array__rec__f1 = r1;
  rec__dynamic_array__rec__f2 = r2 }; attr__constrained = r3 })].
  ((((to_int(r) = 1) -> dynamic_property(0, last, to_rep1(r1))) and
  ((to_int(r) = 0) -> dynamic_property(0, last, to_rep1(r2)))) ->
  (((r = true) -> (((to_rep1(r1) <  c) -> (increment({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = r }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = r1; rec__dynamic_array__rec__f2 = r2 };
  attr__constrained = r3 }) = (to_rep1(r1) + 1))) and
  ((not (to_rep1(r1) <  c)) -> (increment({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = r }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = r1; rec__dynamic_array__rec__f2 = r2 };
  attr__constrained = r3 }) = to_rep1(r1))))) and ((not (r = true)) ->
  (((to_rep1(r2) <  c) -> (increment({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = r }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = r1; rec__dynamic_array__rec__f2 = r2 };
  attr__constrained = r3 }) = (to_rep1(r2) + 1))) and
  ((not (to_rep1(r2) <  c)) -> (increment({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = r }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = r1; rec__dynamic_array__rec__f2 = r2 };
  attr__constrained = r3 }) = to_rep1(r2))))))))

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy14 : integer

type tT18bP1__ref = { tT18bP1__content : integer
}

function tT18bP1__ref___projection(a: tT18bP1__ref) : integer =
  (a).tT18bP1__content

type t1

logic first2 : t1 -> integer

logic last3 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last3(mk1(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,us_rep) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,us_rep) farray = (a).elts1

function of_array1(a: (int,us_rep) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last4(a: us_t1) : int = to_rep1(last3((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last4(a)) ->
  (length1(a) = ((last4(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last4(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,us_rep) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,us_rep) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment3(a)))

function bool_eq12(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last3((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last3((y).rt1)))

logic user_eq9 : us_t1, us_t1 -> bool

logic dummy15 : (int,us_rep) farray

logic dummy16 : t1

type t18b__ref = { t18b__content : us_t1
}

function t18b__ref___projection(a: t18b__ref) : us_t1 = (a).t18b__content

type us_split_fields4 = { rec__dynamic_array__holder__content1 : us_t1
}

function us_split_fields_Content4__projection(a: us_split_fields4) : us_t1 =
  (a).rec__dynamic_array__holder__content1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep_10__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep_11__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep2) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = {
  rec__dynamic_array__holder__content =
  of_array(to_array1(((a).us_split_fields5).rec__dynamic_array__holder__content1),
  first3(((a).us_split_fields5).rec__dynamic_array__holder__content1),
  last4(((a).us_split_fields5).rec__dynamic_array__holder__content1)) } }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields5 = {
  rec__dynamic_array__holder__content1 =
  of_array1(to_array(((r).us_split_fields3).rec__dynamic_array__holder__content),
  first1(((r).us_split_fields3).rec__dynamic_array__holder__content),
  last2(((r).us_split_fields3).rec__dynamic_array__holder__content)) } }

logic bool_eq13 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq13(a, b)].
  ((((to_rep(((a).us_split_discrs4).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs4).rec__dynamic_array__holder__d)) and
  (bool_eq12(((a).us_split_fields5).rec__dynamic_array__holder__content1,
  ((b).us_split_fields5).rec__dynamic_array__holder__content1) = true)) ->
  (bool_eq13(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs4).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs4).rec__dynamic_array__holder__d)) and
  (bool_eq12(((a).us_split_fields5).rec__dynamic_array__holder__content1,
  ((b).us_split_fields5).rec__dynamic_array__holder__content1) = true))) ->
  (bool_eq13(a, b) = false))))

predicate in_range4(rec__dynamic_array__holder__d1: int, a: us_rep1) =
  (rec__dynamic_array__holder__d1 = to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t1.
  (0 <= object__size4({ us_split_discrs4 = { rec__dynamic_array__holder__d =
  a }; us_split_fields5 = { rec__dynamic_array__holder__content1 = { elts1 =
  a1; rt1 = a2 } } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t1.
  (0 <= object__alignment4({ us_split_discrs4 = {
  rec__dynamic_array__holder__d = a }; us_split_fields5 = {
  rec__dynamic_array__holder__content1 = { elts1 = a1; rt1 = a2 } } })))

logic dynamic_array__holder__d__first__bit1 : int

logic dynamic_array__holder__d__last__bit1 : int

logic dynamic_array__holder__d__position1 : int

axiom dynamic_array__holder__d__first__bit_axiom1 :
  (0 <= dynamic_array__holder__d__first__bit1)

axiom dynamic_array__holder__d__last__bit_axiom1 :
  (dynamic_array__holder__d__first__bit1 <  dynamic_array__holder__d__last__bit1)

axiom dynamic_array__holder__d__position_axiom1 :
  (0 <= dynamic_array__holder__d__position1)

logic dynamic_array__holder__content__first__bit1 : int

logic dynamic_array__holder__content__last__bit1 : int

logic dynamic_array__holder__content__position1 : int

axiom dynamic_array__holder__content__first__bit_axiom1 :
  (0 <= dynamic_array__holder__content__first__bit1)

axiom dynamic_array__holder__content__last__bit_axiom1 :
  (dynamic_array__holder__content__first__bit1 <  dynamic_array__holder__content__last__bit1)

axiom dynamic_array__holder__content__position_axiom1 :
  (0 <= dynamic_array__holder__content__position1)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy17 : natural

logic dummy18 : (int,us_rep) farray

logic dummy19 : t1

type thS__ref = { thS__content : us_rep2
}

function thS__ref___projection(a: thS__ref) : us_rep2 = (a).thS__content

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy20 : integer

type tT20bP1__ref = { tT20bP1__content : integer
}

function tT20bP1__ref___projection(a: tT20bP1__ref) : integer =
  (a).tT20bP1__content

type t2

logic first4 : t2 -> integer

logic last5 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last5(mk2(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,us_rep) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,us_rep) farray = (a).elts2

function of_array2(a: (int,us_rep) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last6(a: us_t2) : int = to_rep1(last5((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last6(a)) ->
  (length2(a) = ((last6(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last6(a))) -> (length2(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,us_rep) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,us_rep) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,us_rep) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,us_rep) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment5(a)))

function bool_eq15(x: us_t2, y: us_t2) : bool = bool_eq7((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last5((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last5((y).rt2)))

logic user_eq12 : us_t2, us_t2 -> bool

logic dummy21 : (int,us_rep) farray

logic dummy22 : t2

type t20b__ref = { t20b__content : us_t2
}

function t20b__ref___projection(a: t20b__ref) : us_t2 = (a).t20b__content

type us_split_fields6 = { rec__dynamic_array__holder__content2 : us_t2
}

function us_split_fields_Content5__projection(a: us_split_fields6) : us_t2 =
  (a).rec__dynamic_array__holder__content2

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref_6__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs5 : us_split_discrs2; us_split_fields7 :
us_split_fields6
}

function us_rep_12__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs5

function us_rep_13__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base1(a: us_rep3) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs5; us_split_fields3 = {
  rec__dynamic_array__holder__content =
  of_array(to_array2(((a).us_split_fields7).rec__dynamic_array__holder__content2),
  first5(((a).us_split_fields7).rec__dynamic_array__holder__content2),
  last6(((a).us_split_fields7).rec__dynamic_array__holder__content2)) } }

function of_base1(r: us_rep1) : us_rep3 = { us_split_discrs5 =
  (r).us_split_discrs3; us_split_fields7 = {
  rec__dynamic_array__holder__content2 =
  of_array2(to_array(((r).us_split_fields3).rec__dynamic_array__holder__content),
  first1(((r).us_split_fields3).rec__dynamic_array__holder__content),
  last2(((r).us_split_fields3).rec__dynamic_array__holder__content)) } }

logic bool_eq16 : us_rep3, us_rep3 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq16(a, b)].
  ((((to_rep(((a).us_split_discrs5).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs5).rec__dynamic_array__holder__d)) and
  (bool_eq15(((a).us_split_fields7).rec__dynamic_array__holder__content2,
  ((b).us_split_fields7).rec__dynamic_array__holder__content2) = true)) ->
  (bool_eq16(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs5).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs5).rec__dynamic_array__holder__d)) and
  (bool_eq15(((a).us_split_fields7).rec__dynamic_array__holder__content2,
  ((b).us_split_fields7).rec__dynamic_array__holder__content2) = true))) ->
  (bool_eq16(a, b) = false))))

predicate in_range5(rec__dynamic_array__holder__d1: int, a: us_rep1) =
  (rec__dynamic_array__holder__d1 = to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d))

logic value__size6 : int

logic object__size6 : us_rep3 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep3 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t2.
  (0 <= object__size6({ us_split_discrs5 = { rec__dynamic_array__holder__d =
  a }; us_split_fields7 = { rec__dynamic_array__holder__content2 = { elts2 =
  a1; rt2 = a2 } } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t2.
  (0 <= object__alignment6({ us_split_discrs5 = {
  rec__dynamic_array__holder__d = a }; us_split_fields7 = {
  rec__dynamic_array__holder__content2 = { elts2 = a1; rt2 = a2 } } })))

logic dynamic_array__holder__d__first__bit2 : int

logic dynamic_array__holder__d__last__bit2 : int

logic dynamic_array__holder__d__position2 : int

axiom dynamic_array__holder__d__first__bit_axiom2 :
  (0 <= dynamic_array__holder__d__first__bit2)

axiom dynamic_array__holder__d__last__bit_axiom2 :
  (dynamic_array__holder__d__first__bit2 <  dynamic_array__holder__d__last__bit2)

axiom dynamic_array__holder__d__position_axiom2 :
  (0 <= dynamic_array__holder__d__position2)

logic dynamic_array__holder__content__first__bit2 : int

logic dynamic_array__holder__content__last__bit2 : int

logic dynamic_array__holder__content__position2 : int

axiom dynamic_array__holder__content__first__bit_axiom2 :
  (0 <= dynamic_array__holder__content__first__bit2)

axiom dynamic_array__holder__content__last__bit_axiom2 :
  (dynamic_array__holder__content__first__bit2 <  dynamic_array__holder__content__last__bit2)

axiom dynamic_array__holder__content__position_axiom2 :
  (0 <= dynamic_array__holder__content__position2)

logic user_eq13 : us_rep3, us_rep3 -> bool

logic dummy23 : natural

logic dummy24 : (int,us_rep) farray

logic dummy25 : t2

type t19b__ref = { t19b__content : us_rep3
}

function t19b__ref___projection(a: t19b__ref) : us_rep3 = (a).t19b__content

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy26 : integer

type t22b__ref = { t22b__content : integer
}

function t22b__ref___projection(a: t22b__ref) : integer = (a).t22b__content

type t3

logic first6 : t3 -> integer

logic last7 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last7(mk3(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,us_rep) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,us_rep) farray = (a).elts3

function of_array3(a: (int,us_rep) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last8(a: us_t3) : int = to_rep1(last7((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last8(a)) ->
  (length3(a) = ((last8(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last8(a))) -> (length3(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,us_rep) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,us_rep) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,us_rep) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,us_rep) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment7(a)))

function bool_eq18(x: us_t3, y: us_t3) : bool = bool_eq7((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last7((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last7((y).rt3)))

logic user_eq15 : us_t3, us_t3 -> bool

logic dummy27 : (int,us_rep) farray

logic dummy28 : t3

type t23b__ref = { t23b__content : us_t3
}

function t23b__ref___projection(a: t23b__ref) : us_t3 = (a).t23b__content

predicate in_range6(rec__dynamic_array__rec__b1: bool, a: us_rep) =
  (rec__dynamic_array__rec__b1 = ((a).us_split_discrs1).rec__dynamic_array__rec__b)

logic value__size8 : int

logic object__size8 : us_rep -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size8({ us_split_discrs1 = { rec__dynamic_array__rec__b = a
  }; us_split_fields1 = { rec__dynamic_array__rec__f1 = a1;
  rec__dynamic_array__rec__f2 = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment8({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = a }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = a1; rec__dynamic_array__rec__f2 = a2 };
  attr__constrained = a3 })))

logic dynamic_array__rec__b__first__bit1 : int

logic dynamic_array__rec__b__last__bit1 : int

logic dynamic_array__rec__b__position1 : int

axiom dynamic_array__rec__b__first__bit_axiom1 :
  (0 <= dynamic_array__rec__b__first__bit1)

axiom dynamic_array__rec__b__last__bit_axiom1 :
  (dynamic_array__rec__b__first__bit1 <  dynamic_array__rec__b__last__bit1)

axiom dynamic_array__rec__b__position_axiom1 :
  (0 <= dynamic_array__rec__b__position1)

logic dynamic_array__rec__f1__first__bit1 : int

logic dynamic_array__rec__f1__last__bit1 : int

logic dynamic_array__rec__f1__position1 : int

axiom dynamic_array__rec__f1__first__bit_axiom1 :
  (0 <= dynamic_array__rec__f1__first__bit1)

axiom dynamic_array__rec__f1__last__bit_axiom1 :
  (dynamic_array__rec__f1__first__bit1 <  dynamic_array__rec__f1__last__bit1)

axiom dynamic_array__rec__f1__position_axiom1 :
  (0 <= dynamic_array__rec__f1__position1)

logic dynamic_array__rec__f2__first__bit1 : int

logic dynamic_array__rec__f2__last__bit1 : int

logic dynamic_array__rec__f2__position1 : int

axiom dynamic_array__rec__f2__first__bit_axiom1 :
  (0 <= dynamic_array__rec__f2__first__bit1)

axiom dynamic_array__rec__f2__last__bit_axiom1 :
  (dynamic_array__rec__f2__first__bit1 <  dynamic_array__rec__f2__last__bit1)

axiom dynamic_array__rec__f2__position_axiom1 :
  (0 <= dynamic_array__rec__f2__position1)

logic user_eq16 : us_rep, us_rep -> bool

logic dummy29 : bool

logic dummy30 : integer

logic dummy31 : integer

logic dummy32 : bool

type t21b__ref = { t21b__content : us_rep
}

function t21b__ref___projection(a: t21b__ref) : us_rep = (a).t21b__content

logic h__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property9(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq17 : integer, integer -> bool

logic dummy33 : integer

type t25b__ref = { t25b__content : integer
}

function t25b__ref___projection(a: t25b__ref) : integer = (a).t25b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic hh : natural

logic hh1 : (int,us_rep) farray

logic hh2 : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r : bool

logic r1 : integer

logic r2 : integer

logic r3 : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range7(rec__dynamic_array__rec__b1: bool, a: us_rep) =
  (rec__dynamic_array__rec__b1 = ((a).us_split_discrs1).rec__dynamic_array__rec__b)

logic value__size9 : int

logic object__size9 : us_rep -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size9({ us_split_discrs1 = { rec__dynamic_array__rec__b = a
  }; us_split_fields1 = { rec__dynamic_array__rec__f1 = a1;
  rec__dynamic_array__rec__f2 = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment9({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = a }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = a1; rec__dynamic_array__rec__f2 = a2 };
  attr__constrained = a3 })))

logic dynamic_array__rec__b__first__bit2 : int

logic dynamic_array__rec__b__last__bit2 : int

logic dynamic_array__rec__b__position2 : int

axiom dynamic_array__rec__b__first__bit_axiom2 :
  (0 <= dynamic_array__rec__b__first__bit2)

axiom dynamic_array__rec__b__last__bit_axiom2 :
  (dynamic_array__rec__b__first__bit2 <  dynamic_array__rec__b__last__bit2)

axiom dynamic_array__rec__b__position_axiom2 :
  (0 <= dynamic_array__rec__b__position2)

logic dynamic_array__rec__f2__first__bit2 : int

logic dynamic_array__rec__f2__last__bit2 : int

logic dynamic_array__rec__f2__position2 : int

axiom dynamic_array__rec__f2__first__bit_axiom2 :
  (0 <= dynamic_array__rec__f2__first__bit2)

axiom dynamic_array__rec__f2__last__bit_axiom2 :
  (dynamic_array__rec__f2__first__bit2 <  dynamic_array__rec__f2__last__bit2)

axiom dynamic_array__rec__f2__position_axiom2 :
  (0 <= dynamic_array__rec__f2__position2)

logic dynamic_array__rec__f1__first__bit2 : int

logic dynamic_array__rec__f1__last__bit2 : int

logic dynamic_array__rec__f1__position2 : int

axiom dynamic_array__rec__f1__first__bit_axiom2 :
  (0 <= dynamic_array__rec__f1__first__bit2)

axiom dynamic_array__rec__f1__last__bit_axiom2 :
  (dynamic_array__rec__f1__first__bit2 <  dynamic_array__rec__f1__last__bit2)

axiom dynamic_array__rec__f1__position_axiom2 :
  (0 <= dynamic_array__rec__f1__position2)

logic user_eq18 : us_rep, us_rep -> bool

logic dummy34 : bool

logic dummy35 : integer

logic dummy36 : integer

logic dummy37 : bool

type t34b__ref = { t34b__content : us_rep
}

function t34b__ref___projection(a: t34b__ref) : us_rep = (a).t34b__content

type t4

logic first8 : t4 -> integer

logic last9 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last9(mk4(f, l))) = l)))))

predicate dynamic_property10(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t4 = { elts4 : (int,us_rep) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,us_rep) farray = (a).elts4

function of_array4(a: (int,us_rep) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last10(a: us_t4) : int = to_rep1(last9((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last10(a)) ->
  (length4(a) = ((last10(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last10(a))) -> (length4(a) = 0))))

logic value__size10 : int

logic object__size10 : (int,us_rep) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,us_rep) farray -> int

logic value__alignment10 : int

logic object__alignment10 : (int,us_rep) farray -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:(int,us_rep) farray. (0 <= object__size10(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment10(a)))

function bool_eq20(x: us_t4, y: us_t4) : bool = bool_eq7((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last9((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last9((y).rt4)))

logic user_eq19 : us_t4, us_t4 -> bool

logic dummy38 : (int,us_rep) farray

logic dummy39 : t4

type rec_array__ref = { rec_array__content : us_t4
}

function rec_array__ref___projection(a: rec_array__ref) : us_t4 =
  (a).rec_array__content

logic temp___196 : us_rep, int, int -> us_t3

axiom def_axiom :
  (forall temp___198:bool. forall temp___1981:integer.
  forall temp___1982:integer. forall temp___1983:bool.
  (forall temp___199:int. forall temp___200:int. ((dynamic_property10(1,
  2147483647, temp___199, temp___200) -> ((to_rep1(first6((temp___196({
  us_split_discrs1 = { rec__dynamic_array__rec__b = temp___198 };
  us_split_fields1 = { rec__dynamic_array__rec__f1 = temp___1981;
  rec__dynamic_array__rec__f2 = temp___1982 }; attr__constrained =
  temp___1983 }, temp___199, temp___200)).rt3)) = temp___199) and
  (to_rep1(last7((temp___196({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = temp___198 }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = temp___1981; rec__dynamic_array__rec__f2 =
  temp___1982 }; attr__constrained = temp___1983 }, temp___199,
  temp___200)).rt3)) = temp___200))) and
  (forall temp___201:int. (((temp___196({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = temp___198 }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = temp___1981; rec__dynamic_array__rec__f2 =
  temp___1982 }; attr__constrained = temp___1983 }, temp___199,
  temp___200)).elts3[temp___201]) = { us_split_discrs1 = {
  rec__dynamic_array__rec__b = temp___198 }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = temp___1981; rec__dynamic_array__rec__f2 =
  temp___1982 }; attr__constrained = temp___1983 })))))

axiom last__def_axiom : (last = c)

axiom hh__def_axiom : ({ us_split_discrs3 = { rec__dynamic_array__holder__d =
  hh }; us_split_fields3 = { rec__dynamic_array__holder__content = { elts =
  hh1; rt = hh2 } } } = new_holder(c))

 (* File "dynamic_array.adb", line 31, characters 0-0 *)
goal WP_parameter_def :
  (forall h__split_fields:(int,us_rep) farray. forall h__split_fields1:t1.
  forall i:int. forall temp___d_195:int. forall us:int. forall o:natural.
  forall us1:int. forall o1:int. forall o2:integer. forall o3:integer.
  forall o4:integer. forall usq_:bool. forall usq_1:integer.
  forall usq_2:integer. forall usq_3:bool. forall o5:bool. forall o6:integer.
  forall o7:integer. forall o8:bool. forall temp___202:(int,us_rep) farray.
  forall temp___2021:t3. forall temp___203:(int,us_rep) farray.
  forall temp___2031:t3. forall o9:(int,us_rep) farray. forall o10:t2.
  forall o11:(int,us_rep) farray. forall o12:t2. forall o13:natural.
  forall o14:natural. forall o15:(int,us_rep) farray. forall o16:t2.
  forall o17:natural. forall o18:(int,us_rep) farray. forall o19:t.
  forall o20:natural. forall o21:(int,us_rep) farray. forall o22:t.
  forall dynamic_array__h__assume:natural.
  forall dynamic_array__h__assume1:(int,us_rep) farray.
  forall dynamic_array__h__assume2:t1.
  forall dynamic_array__B_2__hh__assume:us_rep1. forall o23:int.
  forall dynamic_array__B_2__r__assume:us_rep.
  forall result:us_split_fields__ref2.
  forall h__split_fields2:us_split_fields4. forall result1:int__ref.
  forall i1:int. forall h__split_fields3:us_split_fields4. forall i2:int.
  forall f:int. (in_range2(c) -> (in_range2(temp___d_195) -> (((us = c) and
  in_range2(c)) -> (((((((((((((((((us1 = c) and dynamic_property(0, last,
  c)) and (o1 = c)) and (o2 = of_rep1(o1))) and ((dummy3 = o3) and
  (o2 = o4))) and ((of_int(0) = usq_) and (((usq_1 = o3) and
  (usq_2 = o4)) and (true = usq_3)))) and ((usq_ = o5) and (((usq_1 = o6) and
  (usq_2 = o7)) and (false = o8)))) and ({ elts3 = temp___202; rt3 =
  temp___2021 } = temp___196({ us_split_discrs1 = {
  rec__dynamic_array__rec__b = o5 }; us_split_fields1 = {
  rec__dynamic_array__rec__f1 = o6; rec__dynamic_array__rec__f2 = o7 };
  attr__constrained = o8 }, 1, c))) and
  ((to_rep1(first6(temp___2021)) = 1) and
  ((to_rep1(last7(temp___2021)) = c) and ({ elts3 = temp___203; rt3 =
  temp___2031 } = { elts3 = temp___202; rt3 = temp___2021 })))) and
  ((((to_rep1(first6(temp___2031)) <= to_rep1(last7(temp___2031))) and
  (((1 <= c) and
  (((to_rep1(last7(temp___2031)) - to_rep1(first6(temp___2031))) + 1) = ((c - 1) + 1))) or
  ((not (1 <= c)) and
  (((to_rep1(last7(temp___2031)) - to_rep1(first6(temp___2031))) + 1) = 0)))) or
  ((not (to_rep1(first6(temp___2031)) <= to_rep1(last7(temp___2031)))) and
  (((1 <= c) and (0 = ((c - 1) + 1))) or (not (1 <= c))))) and
  ((temp___203 = o9) and (mk2(to_rep1(first6(temp___2031)),
  to_rep1(last7(temp___2031))) = o10)))) and ((o11 = o9) and
  (o12 = o10))) and (((to_rep(o) = c) and (o = o13)) and ((o14 = o13) and
  ((o15 = o11) and (o16 = o12))))) and ({ us_split_discrs3 = {
  rec__dynamic_array__holder__d = o17 }; us_split_fields3 = {
  rec__dynamic_array__holder__content = { elts = o18; rt = o19 } }
  } = to_base1({ us_split_discrs5 = { rec__dynamic_array__holder__d = o14 };
  us_split_fields7 = { rec__dynamic_array__holder__content2 = { elts2 = o15;
  rt2 = o16 } } }))) and ({ us_split_discrs3 = {
  rec__dynamic_array__holder__d = o20 }; us_split_fields3 = {
  rec__dynamic_array__holder__content = { elts = o21; rt = o22 } } } = {
  us_split_discrs3 = { rec__dynamic_array__holder__d = o17 };
  us_split_fields3 = { rec__dynamic_array__holder__content = { elts = o18;
  rt = o19 } } })) and ({ us_split_discrs4 = {
  rec__dynamic_array__holder__d = dynamic_array__h__assume };
  us_split_fields5 = { rec__dynamic_array__holder__content1 = { elts1 =
  dynamic_array__h__assume1; rt1 = dynamic_array__h__assume2 } }
  } = of_base({ us_split_discrs3 = { rec__dynamic_array__holder__d = o20 };
  us_split_fields3 = { rec__dynamic_array__holder__content = { elts = o21;
  rt = o22 } } }))) and (((result = { us_split_fields__content2 = {
  rec__dynamic_array__holder__content1 = { elts1 = h__split_fields; rt1 =
  h__split_fields1 } } }) and (h__split_fields2 = {
  rec__dynamic_array__holder__content1 = { elts1 = dynamic_array__h__assume1;
  rt1 = dynamic_array__h__assume2 } })) and
  (h__split_discrs = dynamic_array__h__assume))) -> (((c = to_rep(((to_base({
  us_split_discrs4 = { rec__dynamic_array__holder__d = h__split_discrs };
  us_split_fields5 = h__split_fields2
  })).us_split_discrs3).rec__dynamic_array__holder__d)) and
  ((dynamic_property4(1, c,
  to_rep1(first2(((h__split_fields2).rec__dynamic_array__holder__content1).rt1)),
  to_rep1(last3(((h__split_fields2).rec__dynamic_array__holder__content1).rt1))) and
  ((to_rep1(first2(((h__split_fields2).rec__dynamic_array__holder__content1).rt1)) = 1) and
  (to_rep1(last3(((h__split_fields2).rec__dynamic_array__holder__content1).rt1)) = c))) and
  (forall temp___183:int.
  (((to_rep1(first2(((h__split_fields2).rec__dynamic_array__holder__content1).rt1)) <= temp___183) and
  (temp___183 <= to_rep1(last3(((h__split_fields2).rec__dynamic_array__holder__content1).rt1)))) ->
  ((((to_int((((((h__split_fields2).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_discrs1).rec__dynamic_array__rec__b) = 1) ->
  dynamic_property(0, last,
  to_rep1((((((h__split_fields2).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_fields1).rec__dynamic_array__rec__f1))) and
  ((to_int((((((h__split_fields2).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_discrs1).rec__dynamic_array__rec__b) = 0) ->
  dynamic_property(0, last,
  to_rep1((((((h__split_fields2).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_fields1).rec__dynamic_array__rec__f2)))) and
  (((((h__split_fields2).rec__dynamic_array__holder__content1).elts1[temp___183])).attr__constrained = false)))))) ->
  ((to_rep(h__split_discrs) = to_rep(((new_holder(c)).us_split_discrs3).rec__dynamic_array__holder__d)) ->
  (((result1 = { int__content = i }) and (i1 = 1)) -> (((1 <= i1) and
  (i1 <= c)) ->
  (((forall j:int. (((1 <= j) and (j <= (i2 - 1))) ->
    (((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[j])).us_split_discrs1).rec__dynamic_array__rec__b = true) and
    (to_rep1((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[j])).us_split_fields1).rec__dynamic_array__rec__f1) = increment(((((new_holder(c)).us_split_fields3).rec__dynamic_array__holder__content).elts[j])))))) and
  (forall j:int. (((i2 <= j) and (j <= c)) ->
  (not ((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[j])).us_split_discrs1).rec__dynamic_array__rec__b = true))))) ->
  ((((((1 <= c) -> dynamic_property9(1, c, i2)) and ((dynamic_property4(1, c,
  to_rep1(first2(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)),
  to_rep1(last3(((h__split_fields3).rec__dynamic_array__holder__content1).rt1))) and
  ((to_rep1(first2(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)) = 1) and
  (to_rep1(last3(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)) = c))) and
  (forall temp___183:int.
  (((to_rep1(first2(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)) <= temp___183) and
  (temp___183 <= to_rep1(last3(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)))) ->
  ((((to_int((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_discrs1).rec__dynamic_array__rec__b) = 1) ->
  ((0 <= last) -> dynamic_property(0, last,
  to_rep1((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  ((to_int((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_discrs1).rec__dynamic_array__rec__b) = 0) ->
  ((0 <= last) -> dynamic_property(0, last,
  to_rep1((((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[temp___183])).us_split_fields1).rec__dynamic_array__rec__f2))))) and
  (((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[temp___183])).attr__constrained = false)))))) and
  (forall temp___215:int.
  (((to_rep1(first2(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)) <= temp___215) and
  (temp___215 <= to_rep1(last3(((h__split_fields3).rec__dynamic_array__holder__content1).rt1)))) ->
  ((i2 <= temp___215) ->
  ((((h__split_fields3).rec__dynamic_array__holder__content1).elts1[temp___215]) = (((h__split_fields2).rec__dynamic_array__holder__content1).elts1[temp___215])))))) and
  ((1 <= i2) and (i2 <= c))) ->
  (((((dynamic_array__B_2__hh__assume = new_holder(c)) and
  (((dynamic_property2(1,
  to_rep(((dynamic_array__B_2__hh__assume).us_split_discrs3).rec__dynamic_array__holder__d),
  to_rep1(first((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).rt)),
  to_rep1(last1((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).rt))) and
  ((to_rep1(first((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).rt)) = 1) and
  (to_rep1(last1((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).rt)) = to_rep(((dynamic_array__B_2__hh__assume).us_split_discrs3).rec__dynamic_array__holder__d)))) and
  (forall temp___168:int.
  (((to_rep1(first((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).rt)) <= temp___168) and
  (temp___168 <= to_rep1(last1((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).rt)))) ->
  ((((to_int(((((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_discrs1).rec__dynamic_array__rec__b) = 1) ->
  dynamic_property(0, last,
  to_rep1(((((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_fields1).rec__dynamic_array__rec__f1))) and
  ((to_int(((((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_discrs1).rec__dynamic_array__rec__b) = 0) ->
  dynamic_property(0, last,
  to_rep1(((((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).us_split_fields1).rec__dynamic_array__rec__f2)))) and
  ((((((dynamic_array__B_2__hh__assume).us_split_fields3).rec__dynamic_array__holder__content).elts[temp___168])).attr__constrained = false))))) and
  (((c = 0) and
  (to_rep(((dynamic_array__B_2__hh__assume).us_split_discrs3).rec__dynamic_array__holder__d) = 0)) or
  ((not (c = 0)) and
  (to_rep(((dynamic_array__B_2__hh__assume).us_split_discrs3).rec__dynamic_array__holder__d) = c))))) and
  (dynamic_array__B_2__hh__assume = { us_split_discrs3 = {
  rec__dynamic_array__holder__d = hh }; us_split_fields3 = {
  rec__dynamic_array__holder__content = { elts = hh1; rt = hh2 } } })) and
  ((dynamic_property2(1, to_rep(hh), to_rep1(first(hh2)),
  to_rep1(last1(hh2))) and ((to_rep1(first(hh2)) = 1) and
  (to_rep1(last1(hh2)) = to_rep(hh)))) and
  (forall temp___168:int. (((to_rep1(first(hh2)) <= temp___168) and
  (temp___168 <= to_rep1(last1(hh2)))) ->
  ((((to_int((((hh1[temp___168])).us_split_discrs1).rec__dynamic_array__rec__b) = 1) ->
  dynamic_property(0, last,
  to_rep1((((hh1[temp___168])).us_split_fields1).rec__dynamic_array__rec__f1))) and
  ((to_int((((hh1[temp___168])).us_split_discrs1).rec__dynamic_array__rec__b) = 0) ->
  dynamic_property(0, last,
  to_rep1((((hh1[temp___168])).us_split_fields1).rec__dynamic_array__rec__f2)))) and
  (((hh1[temp___168])).attr__constrained = false)))))) ->
  (((((((to_rep1(first(hh2)) <= i2) and (i2 <= to_rep1(last1(hh2)))) and
  (o23 = i2)) and (dynamic_array__B_2__r__assume = (hh1[o23]))) and
  (((dynamic_array__B_2__r__assume).us_split_discrs1 = {
  rec__dynamic_array__rec__b = r }) and
  (((dynamic_array__B_2__r__assume).us_split_fields1 = {
  rec__dynamic_array__rec__f1 = r1; rec__dynamic_array__rec__f2 = r2 }) and
  (false = r3)))) and (((to_int(r) = 1) -> dynamic_property(0, last,
  to_rep1(r1))) and ((to_int(r) = 0) -> dynamic_property(0, last,
  to_rep1(r2))))) -> (((0 <= 2147483647) -> in_range2(f)) -> ((r = true) ->
  (to_int(r) = 1))))))))))))))))
