(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,natural) farray

logic dummy4 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep1(first(a1)) = 1) and (0 <= to_rep1(last(a1))))))

logic a : (int,natural) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type tresult_tyP1__ref = { tresult_tyP1__content : integer
}

function tresult_tyP1__ref___projection(a2: tresult_tyP1__ref) : integer =
  (a2).tresult_tyP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a2: us_t1) : (int,natural) farray = (a2).elts1

function of_array1(a2: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a2; rt1 = mk1(f, l) }

function first3(a2: us_t1) : int = to_rep1(first2((a2).rt1))

function last3(a2: us_t1) : int = to_rep1(last2((a2).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a2:us_t1 [length1(a2)]. (((first3(a2) <= last3(a2)) ->
  (length1(a2) = ((last3(a2) - first3(a2)) + 1))) and
  ((not (first3(a2) <= last3(a2))) -> (length1(a2) = 0))))

logic value__size1 : int

logic object__size1 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,natural) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a2:(int,natural) farray. (0 <= object__size1(a2)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a2:(int,natural) farray. (0 <= object__component__size1(a2)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a2:(int,natural) farray. (0 <= object__alignment1(a2)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,natural) farray

logic dummy7 : t1

type result_ty__ref = { result_ty__content : us_t1
}

function result_ty__ref___projection(a2: result_ty__ref) : us_t1 =
  (a2).result_ty__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref___projection(a2: t2b__ref) : integer = (a2).t2b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,natural) farray; rt2 : t2
}

function to_array2(a2: us_t2) : (int,natural) farray = (a2).elts2

function of_array2(a2: (int,natural) farray, f: int, l: int) : us_t2 = {
  elts2 = a2; rt2 = mk2(f, l) }

function first5(a2: us_t2) : int = to_rep1(first4((a2).rt2))

function last5(a2: us_t2) : int = to_rep1(last4((a2).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a2:us_t2 [length2(a2)]. (((first5(a2) <= last5(a2)) ->
  (length2(a2) = ((last5(a2) - first5(a2)) + 1))) and
  ((not (first5(a2) <= last5(a2))) -> (length2(a2) = 0))))

logic value__size2 : int

logic object__size2 : (int,natural) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,natural) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,natural) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a2:(int,natural) farray. (0 <= object__size2(a2)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a2:(int,natural) farray. (0 <= object__component__size2(a2)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a2:(int,natural) farray. (0 <= object__alignment2(a2)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,natural) farray

logic dummy10 : t2

type t3b__ref = { t3b__content : us_t2
}

function t3b__ref___projection(a2: t3b__ref) : us_t2 = (a2).t3b__content

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type t4b__ref = { t4b__content : integer
}

function t4b__ref___projection(a2: t4b__ref) : integer = (a2).t4b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,natural) farray; rt3 : t3
}

function to_array3(a2: us_t3) : (int,natural) farray = (a2).elts3

function of_array3(a2: (int,natural) farray, f: int, l: int) : us_t3 = {
  elts3 = a2; rt3 = mk3(f, l) }

function first7(a2: us_t3) : int = to_rep1(first6((a2).rt3))

function last7(a2: us_t3) : int = to_rep1(last6((a2).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a2:us_t3 [length3(a2)]. (((first7(a2) <= last7(a2)) ->
  (length3(a2) = ((last7(a2) - first7(a2)) + 1))) and
  ((not (first7(a2) <= last7(a2))) -> (length3(a2) = 0))))

logic value__size3 : int

logic object__size3 : (int,natural) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,natural) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,natural) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a2:(int,natural) farray. (0 <= object__size3(a2)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a2:(int,natural) farray. (0 <= object__component__size3(a2)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a2:(int,natural) farray. (0 <= object__alignment3(a2)))

function bool_eq12(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,natural) farray

logic dummy13 : t3

type t5b__ref = { t5b__content : us_t3
}

function t5b__ref___projection(a2: t5b__ref) : us_t3 = (a2).t5b__content

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "perm.ads", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall result__:(int,natural) farray.
  forall perm__remove__result:(int,natural) farray.
  forall perm__remove__result1:t. forall o:(int,natural) farray.
  forall temp___546:(int,natural) farray. forall temp___5461:t3.
  forall o1:(int,natural) farray. forall temp___545:(int,natural) farray.
  forall temp___5451:t2. forall o2:int. forall o3:int. forall o4:int.
  forall o5:int. forall o6:int. forall o7:int.
  forall temp___547:(int,natural) farray. forall temp___5471:t.
  forall perm__remove__result__assume:(int,natural) farray.
  forall perm__remove__result__assume1:t1. forall k:int. forall o8:int.
  forall o9:bool. forall temp___550:int. forall o10:int. forall o11:natural.
  forall o12:int. forall o13:int. forall result:(int,natural) farray.
  forall result__1:(int,natural) farray. forall result1:(int,natural) farray.
  forall result2:t. forall perm__remove__result2:(int,natural) farray.
  forall perm__remove__result3:t.
  forall perm__remove__result4:(int,natural) farray.
  forall perm__remove__result5:t.
  forall perm__remove__result6:(int,natural) farray.
  forall perm__remove__result7:t. forall result__2:(int,natural) farray.
  forall perm__remove__result8:(int,natural) farray.
  forall perm__remove__result9:t. forall result__3:(int,natural) farray.
  forall perm__remove__result10:(int,natural) farray.
  forall perm__remove__result11:t. forall result3:bool. forall result4:bool.
  forall result5:bool. forall result6:bool. forall result7:bool.
  (dynamic_property(1, 100, to_rep1(first(a1)), to_rep1(last(a1))) ->
  (in_range3(i) -> (((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep1(first(a1)) <= i) and (i <= to_rep1(last(a1))))) ->
  (((((((((((i + 1) <= to_rep1(last(a1))) ->
  (((to_rep1(first(a1)) <= (i + 1)) and ((i + 1) <= to_rep1(last(a1)))) and
  ((to_rep1(first(a1)) <= to_rep1(last(a1))) and
  (to_rep1(last(a1)) <= to_rep1(last(a1)))))) and (o = a)) and
  ((o = temp___546) and (mk3((i + 1), to_rep1(last(a1))) = temp___5461))) and
  (((((1 <= (i - 1)) -> (((to_rep1(first(a1)) <= 1) and
  (1 <= to_rep1(last(a1)))) and ((to_rep1(first(a1)) <= (i - 1)) and
  ((i - 1) <= to_rep1(last(a1)))))) and (o1 = a)) and ((o1 = temp___545) and
  (mk2(1, (i - 1)) = temp___5451))) and (((length2({ elts2 = temp___545;
  rt2 = temp___5451 }) = 0) and ((temp___546 = temp___547) and
  (mk(to_rep1(first6(temp___5461)),
  to_rep1(last6(temp___5461))) = temp___5471))) or ((not (length2({ elts2 =
  temp___545; rt2 = temp___5451 }) = 0)) and
  ((((((((to_rep1(first6(temp___5461)) <= to_rep1(last6(temp___5461))) and
  (o2 = ((to_rep1(last6(temp___5461)) - to_rep1(first6(temp___5461))) + 1))) or
  ((not (to_rep1(first6(temp___5461)) <= to_rep1(last6(temp___5461)))) and
  (o2 = 0))) and
  ((((to_rep1(first4(temp___5451)) <= to_rep1(last4(temp___5451))) and
  (o3 = ((to_rep1(last4(temp___5451)) - to_rep1(first4(temp___5451))) + 1))) or
  ((not (to_rep1(first4(temp___5451)) <= to_rep1(last4(temp___5451)))) and
  (o3 = 0))) and (o4 = (o3 + o2)))) and
  (o5 = (to_rep1(first4(temp___5451)) + o4))) and (o6 = (o5 - 1))) and
  ((o7 = o6) and in_range3(o6))) and ((concat(temp___545,
  to_rep1(first4(temp___5451)), to_rep1(last4(temp___5451)), temp___546,
  to_rep1(first6(temp___5461)),
  to_rep1(last6(temp___5461))) = temp___547) and
  (mk(to_rep1(first4(temp___5451)), o7) = temp___5471))))))) and
  ((((to_rep1(first(temp___5471)) <= to_rep1(last(temp___5471))) and
  (((1 <= (to_rep1(last(a1)) - 1)) and
  (((to_rep1(last(temp___5471)) - to_rep1(first(temp___5471))) + 1) = (((to_rep1(last(a1)) - 1) - 1) + 1))) or
  ((not (1 <= (to_rep1(last(a1)) - 1))) and
  (((to_rep1(last(temp___5471)) - to_rep1(first(temp___5471))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___5471)) <= to_rep1(last(temp___5471)))) and
  (((1 <= (to_rep1(last(a1)) - 1)) and
  (0 = (((to_rep1(last(a1)) - 1) - 1) + 1))) or
  (not (1 <= (to_rep1(last(a1)) - 1)))))) and ((slide(temp___547,
  to_rep1(first(temp___5471)), 1) = perm__remove__result__assume) and (mk1(1,
  (to_rep1(last(a1)) - 1)) = perm__remove__result__assume1)))) and ((({
  map__content = result } = { map__content = result__ }) and
  (result__1 = perm__remove__result__assume)) and
  ((to_rep1(result____first) = to_rep1(first2(perm__remove__result__assume1))) and
  (to_rep1(result____last) = to_rep1(last2(perm__remove__result__assume1)))))) and
  ((dynamic_property2(1, (to_rep1(last(a1)) - 1), to_rep1(result____first),
  to_rep1(result____last)) and ((to_rep1(result____first) = 1) and
  (to_rep1(result____last) = (to_rep1(last(a1)) - 1)))) and
  ((((perm__remove__result4 = perm__remove__result2) and
  (perm__remove__result5 = perm__remove__result3)) and ({ elts =
  perm__remove__result6; rt = perm__remove__result7 } = { elts =
  perm__remove__result2; rt = perm__remove__result3 })) and (({
  nat_array__content = { elts = result1; rt = result2 } } = {
  nat_array__content = { elts = perm__remove__result; rt =
  perm__remove__result1 } }) and ((result__1 = perm__remove__result2) and
  (mk(to_rep1(result____first),
  to_rep1(result____last)) = perm__remove__result3)))))) and ((({
  nat_array__content = { elts = perm__remove__result8; rt =
  perm__remove__result9 } } = { nat_array__content = { elts =
  perm__remove__result4; rt = perm__remove__result5 } }) and
  (result__1 = result__2)) and (({ elts = perm__remove__result10; rt =
  perm__remove__result11 } = { elts = perm__remove__result6; rt =
  perm__remove__result7 }) and (result__3 = result__1)))) ->
  (((result3 = invariant__({ elts = perm__remove__result8; rt =
  perm__remove__result9 })) and ((result3 = true) <->
  ((to_rep1(first(perm__remove__result9)) = 1) and
  (0 <= to_rep1(last(perm__remove__result9)))))) -> ((result3 = true) ->
  ((((o13 = (to_rep1(last(a1)) - 1)) and
  in_range1((to_rep1(last(a1)) - 1))) and
  (((to_rep1(last(perm__remove__result9)) = o13) and (result4 = true)) or
  ((not (to_rep1(last(perm__remove__result9)) = o13)) and
  (result4 = false)))) -> ((result4 = true) -> (((result5 = true) <->
  (forall k1:int. (((1 <= k1) and (k1 <= (i - 1))) ->
  (to_rep((a[k1])) = to_rep((perm__remove__result8[k1])))))) ->
  ((result5 = true) -> (((result6 = true) <->
  (forall k1:int. ((((i + 1) <= k1) and (k1 <= to_rep1(last(a1)))) ->
  (to_rep((a[k1])) = to_rep((perm__remove__result8[(k1 - 1)])))))) ->
  ((result6 = true) -> (((((o8 = (to_rep1(last(a1)) - 1)) and
  in_range1((to_rep1(last(a1)) - 1))) and (((k <= o8) and (o9 = true)) or
  ((not (k <= o8)) and (o9 = false)))) and (((i <= k) and (result7 = o9)) or
  ((not (i <= k)) and (result7 = false)))) -> ((result7 = true) ->
  ((((((to_rep1(first(perm__remove__result9)) <= k) and
  (k <= to_rep1(last(perm__remove__result9)))) and (o10 = k)) and
  (o11 = (perm__remove__result8[o10]))) and (o12 = to_rep(o11))) ->
  (((temp___550 = (k + 1)) and in_range1((k + 1))) ->
  (to_rep1(first(a1)) <= temp___550))))))))))))))))))
