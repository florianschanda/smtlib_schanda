;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-const dummy character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort tryt 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tryt tryt) Bool)

(declare-const dummy1 tryt)

(declare-datatypes () ((tryt__ref (mk_tryt__ref (tryt__content tryt)))))
(define-fun tryt__ref___projection ((a tryt__ref)) tryt (tryt__content a))

(define-fun dynamic_invariant ((temp___expr_257 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool (=>
                                      (or (= temp___is_init_254 true)
                                      (<= 0 2)) (in_range2 temp___expr_257)))

(declare-sort descriptioni 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 150)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (descriptioni descriptioni) Bool)

(declare-const dummy2 descriptioni)

(declare-datatypes ()
((descriptioni__ref
 (mk_descriptioni__ref (descriptioni__content descriptioni)))))
(define-fun descriptioni__ref___projection ((a descriptioni__ref)) descriptioni
  (descriptioni__content a))

(declare-const nodescription (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___139 Int))
  (forall ((temp___140 Int))
  (= (select (audittypes__nodescription__aggregate_def temp___139) temp___140)
  (of_rep temp___139)))))

(declare-sort algorithmt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (algorithmt algorithmt) Bool)

(declare-const dummy3 algorithmt)

(declare-datatypes ()
((algorithmt__ref (mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt
  (algorithmt__content a))

(declare-fun to_rep1 (algorithmt) Int)

(declare-fun of_rep1 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort namecountt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (namecountt namecountt) Bool)

(declare-const dummy4 namecountt)

(declare-datatypes ()
((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt
  (namecountt__content a))

(declare-fun to_rep2 (namecountt) Int)

(declare-fun of_rep2 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-const dummy5 (Array Int character))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq5 ((Array Int character) (Array Int character)) Bool)

(declare-sort issueridt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (issueridt issueridt) Bool)

(declare-const dummy6 issueridt)

(declare-datatypes ()
((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt
  (issueridt__content a))

(declare-fun to_rep3 (issueridt) Int)

(declare-fun of_rep3 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ()
((issuert__ref (mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-sort serialnumbert 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (serialnumbert serialnumbert) Bool)

(declare-const dummy8 serialnumbert)

(declare-datatypes ()
((serialnumbert__ref
 (mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert
  (serialnumbert__content a))

(declare-fun to_rep4 (serialnumbert) Int)

(declare-fun of_rep4 (Int) serialnumbert)

;; inversion_axiom
  (assert
  (forall ((x serialnumbert))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x serialnumbert)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__certtypes__idt__issuer us_rep)(rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields2)) us_rep
  (rec__certtypes__idt__issuer a))

(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields2)) serialnumbert
  (rec__certtypes__idt__serialnumber a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq1
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 a))
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 b))) true)
                         (= (to_rep4
                            (rec__certtypes__idt__serialnumber
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__certtypes__idt__serialnumber
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const certtypes__idt__issuer__first__bit Int)

(declare-const certtypes__idt__issuer__last__bit Int)

(declare-const certtypes__idt__issuer__position Int)

;; certtypes__idt__issuer__first__bit_axiom
  (assert (<= 0 certtypes__idt__issuer__first__bit))

;; certtypes__idt__issuer__last__bit_axiom
  (assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; certtypes__idt__issuer__position_axiom
  (assert (<= 0 certtypes__idt__issuer__position))

(declare-const certtypes__idt__serialnumber__first__bit Int)

(declare-const certtypes__idt__serialnumber__last__bit Int)

(declare-const certtypes__idt__serialnumber__position Int)

;; certtypes__idt__serialnumber__first__bit_axiom
  (assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; certtypes__idt__serialnumber__last__bit_axiom
  (assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; certtypes__idt__serialnumber__position_axiom
  (assert (<= 0 certtypes__idt__serialnumber__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes () ((idt__ref (mk_idt__ref (idt__content us_rep1)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep1 (idt__content a))

(declare-sort privileget 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (privileget privileget) Bool)

(declare-const dummy10 privileget)

(declare-datatypes ()
((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget
  (privileget__content a))

(declare-fun to_rep5 (privileget) Int)

(declare-fun of_rep5 (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range8
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort classt 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (classt classt) Bool)

(declare-const dummy11 classt)

(declare-datatypes ()
((classt__ref (mk_classt__ref (classt__content classt)))))
(define-fun classt__ref___projection ((a classt__ref)) classt (classt__content
                                                              a))

(declare-fun to_rep6 (classt) Int)

(declare-fun of_rep6 (Int) classt)

;; inversion_axiom
  (assert
  (forall ((x classt))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x classt)) (! (in_range9 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2 (rec__privtypes__clearancet__class classt)))))
(define-fun us_split_fields_Class__projection ((a us_split_fields4)) classt
  (rec__privtypes__clearancet__class a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep6
                            (rec__privtypes__clearancet__class
                            (us_split_fields5 a))) (to_rep6
                                                   (rec__privtypes__clearancet__class
                                                   (us_split_fields5 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const privtypes__clearancet__class__first__bit Int)

(declare-const privtypes__clearancet__class__last__bit Int)

(declare-const privtypes__clearancet__class__position Int)

;; privtypes__clearancet__class__first__bit_axiom
  (assert (<= 0 privtypes__clearancet__class__first__bit))

;; privtypes__clearancet__class__last__bit_axiom
  (assert
  (< privtypes__clearancet__class__first__bit privtypes__clearancet__class__last__bit))

;; privtypes__clearancet__class__position_axiom
  (assert (<= 0 privtypes__clearancet__class__position))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ()
((clearancet__ref (mk_clearancet__ref (clearancet__content us_rep2)))))
(define-fun clearancet__ref___projection ((a clearancet__ref)) us_rep2
  (clearancet__content a))

(declare-sort yearst 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (yearst yearst) Bool)

(declare-const dummy13 yearst)

(declare-datatypes ()
((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep7 (yearst) Int)

(declare-fun of_rep7 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range10 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-sort monthst 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (monthst monthst) Bool)

(declare-const dummy14 monthst)

(declare-datatypes ()
((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep8 (monthst) Int)

(declare-fun of_rep8 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range11 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-sort dayst 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq15 (dayst dayst) Bool)

(declare-const dummy15 dayst)

(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep9 (dayst) Int)

(declare-fun of_rep9 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range12 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-sort millisecst 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq16 (millisecst millisecst) Bool)

(declare-const dummy16 millisecst)

(declare-datatypes ()
((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst
  (millisecst__content a))

(declare-fun to_rep10 (millisecst) Int)

(declare-fun of_rep10 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range13
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range13 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields6)) yearst
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields6)) monthst
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields6)) dayst
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields6)) millisecst
  (rec__clock__timet__millisec a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___7__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                  a))

(define-fun bool_eq4 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep7
                            (rec__clock__timet__year (us_split_fields7 a)))
                         (to_rep7
                         (rec__clock__timet__year (us_split_fields7 b))))
                         (= (to_rep8
                            (rec__clock__timet__month (us_split_fields7 a)))
                         (to_rep8
                         (rec__clock__timet__month (us_split_fields7 b)))))
                         (= (to_rep9
                            (rec__clock__timet__day (us_split_fields7 a)))
                         (to_rep9
                         (rec__clock__timet__day (us_split_fields7 b)))))
                         (= (to_rep10
                            (rec__clock__timet__millisec
                            (us_split_fields7 a))) (to_rep10
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun user_eq17 (us_rep3 us_rep3) Bool)

(declare-const dummy17 us_rep3)

(declare-datatypes ()
((timet__ref (mk_timet__ref (timet__content us_rep3)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep3 (timet__content
                                                             a))

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__cert__attr__priv__contentst__id us_rep1)(rec__cert__attr__priv__contentst__notbefore us_rep3)(rec__cert__attr__priv__contentst__notafter us_rep3)(rec__cert__attr__priv__contentst__mechanism algorithmt)(rec__cert__attr__priv__contentst__basecertid us_rep1)(rec__cert__attr__priv__contentst__role privileget)(rec__cert__attr__priv__contentst__clearance us_rep2)))))
(define-fun us_split_fields_ID__6__projection ((a us_split_fields8)) us_rep1
  (rec__cert__attr__priv__contentst__id a))

(define-fun us_split_fields_NotBefore__4__projection ((a us_split_fields8)) us_rep3
  (rec__cert__attr__priv__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__4__projection ((a us_split_fields8)) us_rep3
  (rec__cert__attr__priv__contentst__notafter a))

(define-fun us_split_fields_Mechanism__4__projection ((a us_split_fields8)) algorithmt
  (rec__cert__attr__priv__contentst__mechanism a))

(define-fun us_split_fields_BaseCertID__2__projection ((a us_split_fields8)) us_rep1
  (rec__cert__attr__priv__contentst__basecertid a))

(define-fun us_split_fields_Role__projection ((a us_split_fields8)) privileget
  (rec__cert__attr__priv__contentst__role a))

(define-fun us_split_fields_Clearance__projection ((a us_split_fields8)) us_rep2
  (rec__cert__attr__priv__contentst__clearance a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___13__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___14__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                   a))

(define-fun bool_eq5 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq2
                            (rec__cert__attr__priv__contentst__id
                            (us_split_fields9 a))
                            (rec__cert__attr__priv__contentst__id
                            (us_split_fields9 b))) true)
                         (= (bool_eq4
                            (rec__cert__attr__priv__contentst__notbefore
                            (us_split_fields9 a))
                            (rec__cert__attr__priv__contentst__notbefore
                            (us_split_fields9 b))) true))
                         (= (bool_eq4
                            (rec__cert__attr__priv__contentst__notafter
                            (us_split_fields9 a))
                            (rec__cert__attr__priv__contentst__notafter
                            (us_split_fields9 b))) true))
                         (= (to_rep1
                            (rec__cert__attr__priv__contentst__mechanism
                            (us_split_fields9 a))) (to_rep1
                                                   (rec__cert__attr__priv__contentst__mechanism
                                                   (us_split_fields9 b)))))
                         (= (bool_eq2
                            (rec__cert__attr__priv__contentst__basecertid
                            (us_split_fields9 a))
                            (rec__cert__attr__priv__contentst__basecertid
                            (us_split_fields9 b))) true))
                         (= (to_rep5
                            (rec__cert__attr__priv__contentst__role
                            (us_split_fields9 a))) (to_rep5
                                                   (rec__cert__attr__priv__contentst__role
                                                   (us_split_fields9 b)))))
                         (= (bool_eq3
                            (rec__cert__attr__priv__contentst__clearance
                            (us_split_fields9 a))
                            (rec__cert__attr__priv__contentst__clearance
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-const cert__attr__priv__contentst__id__first__bit Int)

(declare-const cert__attr__priv__contentst__id__last__bit Int)

(declare-const cert__attr__priv__contentst__id__position Int)

;; cert__attr__priv__contentst__id__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__id__first__bit))

;; cert__attr__priv__contentst__id__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__id__first__bit cert__attr__priv__contentst__id__last__bit))

;; cert__attr__priv__contentst__id__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__id__position))

(declare-const cert__attr__priv__contentst__notbefore__first__bit Int)

(declare-const cert__attr__priv__contentst__notbefore__last__bit Int)

(declare-const cert__attr__priv__contentst__notbefore__position Int)

;; cert__attr__priv__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__notbefore__first__bit))

;; cert__attr__priv__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__notbefore__first__bit cert__attr__priv__contentst__notbefore__last__bit))

;; cert__attr__priv__contentst__notbefore__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__notbefore__position))

(declare-const cert__attr__priv__contentst__notafter__first__bit Int)

(declare-const cert__attr__priv__contentst__notafter__last__bit Int)

(declare-const cert__attr__priv__contentst__notafter__position Int)

;; cert__attr__priv__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__notafter__first__bit))

;; cert__attr__priv__contentst__notafter__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__notafter__first__bit cert__attr__priv__contentst__notafter__last__bit))

;; cert__attr__priv__contentst__notafter__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__notafter__position))

(declare-const cert__attr__priv__contentst__mechanism__first__bit Int)

(declare-const cert__attr__priv__contentst__mechanism__last__bit Int)

(declare-const cert__attr__priv__contentst__mechanism__position Int)

;; cert__attr__priv__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__mechanism__first__bit))

;; cert__attr__priv__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__mechanism__first__bit cert__attr__priv__contentst__mechanism__last__bit))

;; cert__attr__priv__contentst__mechanism__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__mechanism__position))

(declare-const cert__attr__priv__contentst__basecertid__first__bit Int)

(declare-const cert__attr__priv__contentst__basecertid__last__bit Int)

(declare-const cert__attr__priv__contentst__basecertid__position Int)

;; cert__attr__priv__contentst__basecertid__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__basecertid__first__bit))

;; cert__attr__priv__contentst__basecertid__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__basecertid__first__bit cert__attr__priv__contentst__basecertid__last__bit))

;; cert__attr__priv__contentst__basecertid__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__basecertid__position))

(declare-const cert__attr__priv__contentst__role__first__bit Int)

(declare-const cert__attr__priv__contentst__role__last__bit Int)

(declare-const cert__attr__priv__contentst__role__position Int)

;; cert__attr__priv__contentst__role__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__role__first__bit))

;; cert__attr__priv__contentst__role__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__role__first__bit cert__attr__priv__contentst__role__last__bit))

;; cert__attr__priv__contentst__role__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__role__position))

(declare-const cert__attr__priv__contentst__clearance__first__bit Int)

(declare-const cert__attr__priv__contentst__clearance__last__bit Int)

(declare-const cert__attr__priv__contentst__clearance__position Int)

;; cert__attr__priv__contentst__clearance__first__bit_axiom
  (assert (<= 0 cert__attr__priv__contentst__clearance__first__bit))

;; cert__attr__priv__contentst__clearance__last__bit_axiom
  (assert
  (< cert__attr__priv__contentst__clearance__first__bit cert__attr__priv__contentst__clearance__last__bit))

;; cert__attr__priv__contentst__clearance__position_axiom
  (assert (<= 0 cert__attr__priv__contentst__clearance__position))

(declare-fun user_eq18 (us_rep4 us_rep4) Bool)

(declare-const dummy18 us_rep4)

(declare-datatypes ()
((contentst__ref (mk_contentst__ref (contentst__content us_rep4)))))
(define-fun contentst__ref___4__projection ((a contentst__ref)) us_rep4
  (contentst__content a))

(declare-sort fart 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq19 (fart fart) Bool)

(declare-const dummy19 fart)

(declare-datatypes () ((fart__ref (mk_fart__ref (fart__content fart)))))
(define-fun fart__ref___projection ((a fart__ref)) fart (fart__content a))

(declare-fun to_rep11 (fart) Int)

(declare-fun of_rep11 (Int) fart)

;; inversion_axiom
  (assert
  (forall ((x fart))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x fart)) (! (in_range14 (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range14 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-sort bytet 0)

(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq20 (bytet bytet) Bool)

(declare-const dummy20 bytet)

(declare-datatypes () ((bytet__ref (mk_bytet__ref (bytet__content bytet)))))
(define-fun bytet__ref___projection ((a bytet__ref)) bytet (bytet__content a))

(declare-fun to_rep12 (bytet) Int)

(declare-fun of_rep12 (Int) bytet)

;; inversion_axiom
  (assert
  (forall ((x bytet))
  (! (= (of_rep12 (to_rep12 x)) x) :pattern ((to_rep12 x)) )))

;; range_axiom
  (assert
  (forall ((x bytet)) (! (in_range15 (to_rep12 x)) :pattern ((to_rep12 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range15 x) (= (to_rep12 (of_rep12 x)) x)) :pattern ((to_rep12
                                                                 (of_rep12 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int bytet))))))
(declare-fun slide1 ((Array Int bytet) Int Int) (Array Int bytet))

;; slide_eq
  (assert
  (forall ((a (Array Int bytet)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bytet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int bytet) Int Int (Array Int bytet) Int
  Int) (Array Int bytet))

;; concat_def
  (assert
  (forall ((a (Array Int bytet)) (b (Array Int bytet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (bytet Int) (Array Int bytet))

;; singleton_def
  (assert
  (forall ((v bytet))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int bytet)) (a__first Int) (a__last Int)
  (b (Array Int bytet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_144 Int))
                           (=>
                           (and (<= a__first temp___idx_144)
                           (<= temp___idx_144 a__last))
                           (= (to_rep12 (select a temp___idx_144)) (to_rep12
                                                                   (select b (+ (- b__first a__first) temp___idx_144)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bytet)) (b (Array Int bytet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_144 Int))
  (=> (and (<= a__first temp___idx_144) (<= temp___idx_144 a__last))
  (= (to_rep12 (select a temp___idx_144)) (to_rep12
                                          (select b (+ (- b__first a__first) temp___idx_144)))))))))))

(declare-fun compare1 ((Array Int bytet) Int Int (Array Int bytet) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int bytet)) (b (Array Int bytet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int bytet)) (b (Array Int bytet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq6 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep12 (select a (+ i 1))) (to_rep12 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int bytet)) (b (Array Int bytet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq6 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep12 (select b (+ i 1))) (to_rep12 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const dummy21 (Array Int bytet))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array Int bytet)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int bytet)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array Int bytet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int bytet))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bytet))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bytet))) (<= 0 (object__alignment6 a))))

(declare-fun user_eq21 ((Array Int bytet) (Array Int bytet)) Bool)

(declare-sort templatelengtht 0)

(define-fun in_range16 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq22 (templatelengtht templatelengtht) Bool)

(declare-const dummy22 templatelengtht)

(declare-datatypes ()
((templatelengtht__ref
 (mk_templatelengtht__ref (templatelengtht__content templatelengtht)))))
(define-fun templatelengtht__ref___projection ((a templatelengtht__ref)) templatelengtht
  (templatelengtht__content a))

(declare-fun to_rep13 (templatelengtht) Int)

(declare-fun of_rep13 (Int) templatelengtht)

;; inversion_axiom
  (assert
  (forall ((x templatelengtht))
  (! (= (of_rep13 (to_rep13 x)) x) :pattern ((to_rep13 x)) )))

;; range_axiom
  (assert
  (forall ((x templatelengtht)) (! (in_range16
  (to_rep13 x)) :pattern ((to_rep13 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range16 x) (= (to_rep13 (of_rep13 x)) x)) :pattern ((to_rep13
                                                                 (of_rep13 x))) )))

(declare-const dummy23 (Array Int character))

(declare-const value__size7 Int)

(declare-fun object__size7 ((Array Int character)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment7 a))))

(declare-fun user_eq23 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields10
 (mk___split_fields5
 (rec__iandatypes__templatet__length templatelengtht)(rec__iandatypes__templatet__requiredmaxfar fart)(rec__iandatypes__templatet__id (Array Int character))(rec__iandatypes__templatet__pad (Array Int bytet))))))
(define-fun us_split_fields_Length__projection ((a us_split_fields10)) templatelengtht
  (rec__iandatypes__templatet__length a))

(define-fun us_split_fields_RequiredMaxFAR__projection ((a us_split_fields10)) fart
  (rec__iandatypes__templatet__requiredmaxfar a))

(define-fun us_split_fields_ID__2__projection ((a us_split_fields10)) (Array Int character)
  (rec__iandatypes__templatet__id a))

(define-fun us_split_fields_Pad__projection ((a us_split_fields10)) (Array Int bytet)
  (rec__iandatypes__templatet__pad a))

(declare-datatypes ()
((us_split_fields__ref5
 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___10__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                    a))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep13
                            (rec__iandatypes__templatet__length
                            (us_split_fields11 a))) (to_rep13
                                                    (rec__iandatypes__templatet__length
                                                    (us_split_fields11 b))))
                         (= (to_rep11
                            (rec__iandatypes__templatet__requiredmaxfar
                            (us_split_fields11 a))) (to_rep11
                                                    (rec__iandatypes__templatet__requiredmaxfar
                                                    (us_split_fields11 b)))))
                         (= (bool_eq
                            (rec__iandatypes__templatet__id
                            (us_split_fields11 a)) 1 40
                            (rec__iandatypes__templatet__id
                            (us_split_fields11 b)) 1 40) true))
                         (= (bool_eq6
                            (rec__iandatypes__templatet__pad
                            (us_split_fields11 a)) 1 452
                            (rec__iandatypes__templatet__pad
                            (us_split_fields11 b)) 1 452) true))
                    true false))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep5) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment8 a))))

(declare-const iandatypes__templatet__length__first__bit Int)

(declare-const iandatypes__templatet__length__last__bit Int)

(declare-const iandatypes__templatet__length__position Int)

;; iandatypes__templatet__length__first__bit_axiom
  (assert (<= 0 iandatypes__templatet__length__first__bit))

;; iandatypes__templatet__length__last__bit_axiom
  (assert
  (< iandatypes__templatet__length__first__bit iandatypes__templatet__length__last__bit))

;; iandatypes__templatet__length__position_axiom
  (assert (<= 0 iandatypes__templatet__length__position))

(declare-const iandatypes__templatet__requiredmaxfar__first__bit Int)

(declare-const iandatypes__templatet__requiredmaxfar__last__bit Int)

(declare-const iandatypes__templatet__requiredmaxfar__position Int)

;; iandatypes__templatet__requiredmaxfar__first__bit_axiom
  (assert (<= 0 iandatypes__templatet__requiredmaxfar__first__bit))

;; iandatypes__templatet__requiredmaxfar__last__bit_axiom
  (assert
  (< iandatypes__templatet__requiredmaxfar__first__bit iandatypes__templatet__requiredmaxfar__last__bit))

;; iandatypes__templatet__requiredmaxfar__position_axiom
  (assert (<= 0 iandatypes__templatet__requiredmaxfar__position))

(declare-const iandatypes__templatet__id__first__bit Int)

(declare-const iandatypes__templatet__id__last__bit Int)

(declare-const iandatypes__templatet__id__position Int)

;; iandatypes__templatet__id__first__bit_axiom
  (assert (<= 0 iandatypes__templatet__id__first__bit))

;; iandatypes__templatet__id__last__bit_axiom
  (assert
  (< iandatypes__templatet__id__first__bit iandatypes__templatet__id__last__bit))

;; iandatypes__templatet__id__position_axiom
  (assert (<= 0 iandatypes__templatet__id__position))

(declare-const iandatypes__templatet__pad__first__bit Int)

(declare-const iandatypes__templatet__pad__last__bit Int)

(declare-const iandatypes__templatet__pad__position Int)

;; iandatypes__templatet__pad__first__bit_axiom
  (assert (<= 0 iandatypes__templatet__pad__first__bit))

;; iandatypes__templatet__pad__last__bit_axiom
  (assert
  (< iandatypes__templatet__pad__first__bit iandatypes__templatet__pad__last__bit))

;; iandatypes__templatet__pad__position_axiom
  (assert (<= 0 iandatypes__templatet__pad__position))

(declare-fun user_eq24 (us_rep5 us_rep5) Bool)

(declare-const dummy24 us_rep5)

(declare-datatypes ()
((templatet__ref (mk_templatet__ref (templatet__content us_rep5)))))
(define-fun templatet__ref___projection ((a templatet__ref)) us_rep5
  (templatet__content a))

(declare-datatypes ()
((us_split_fields12
 (mk___split_fields6
 (rec__cert__attr__ianda__contentst__id us_rep1)(rec__cert__attr__ianda__contentst__notbefore us_rep3)(rec__cert__attr__ianda__contentst__notafter us_rep3)(rec__cert__attr__ianda__contentst__mechanism algorithmt)(rec__cert__attr__ianda__contentst__basecertid us_rep1)(rec__cert__attr__ianda__contentst__template us_rep5)))))
(define-fun us_split_fields_ID__8__projection ((a us_split_fields12)) us_rep1
  (rec__cert__attr__ianda__contentst__id a))

(define-fun us_split_fields_NotBefore__6__projection ((a us_split_fields12)) us_rep3
  (rec__cert__attr__ianda__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__6__projection ((a us_split_fields12)) us_rep3
  (rec__cert__attr__ianda__contentst__notafter a))

(define-fun us_split_fields_Mechanism__6__projection ((a us_split_fields12)) algorithmt
  (rec__cert__attr__ianda__contentst__mechanism a))

(define-fun us_split_fields_BaseCertID__4__projection ((a us_split_fields12)) us_rep1
  (rec__cert__attr__ianda__contentst__basecertid a))

(define-fun us_split_fields_Template__projection ((a us_split_fields12)) us_rep5
  (rec__cert__attr__ianda__contentst__template a))

(declare-datatypes ()
((us_split_fields__ref6
 (mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref___15__projection ((a us_split_fields__ref6)) us_split_fields12
  (us_split_fields__content6 a))

(declare-datatypes ()
((us_rep6 (mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep___16__projection ((a us_rep6)) us_split_fields12 (us_split_fields13
                                                                    a))

(define-fun bool_eq8 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq2
                            (rec__cert__attr__ianda__contentst__id
                            (us_split_fields13 a))
                            (rec__cert__attr__ianda__contentst__id
                            (us_split_fields13 b))) true)
                         (= (bool_eq4
                            (rec__cert__attr__ianda__contentst__notbefore
                            (us_split_fields13 a))
                            (rec__cert__attr__ianda__contentst__notbefore
                            (us_split_fields13 b))) true))
                         (= (bool_eq4
                            (rec__cert__attr__ianda__contentst__notafter
                            (us_split_fields13 a))
                            (rec__cert__attr__ianda__contentst__notafter
                            (us_split_fields13 b))) true))
                         (= (to_rep1
                            (rec__cert__attr__ianda__contentst__mechanism
                            (us_split_fields13 a))) (to_rep1
                                                    (rec__cert__attr__ianda__contentst__mechanism
                                                    (us_split_fields13 b)))))
                         (= (bool_eq2
                            (rec__cert__attr__ianda__contentst__basecertid
                            (us_split_fields13 a))
                            (rec__cert__attr__ianda__contentst__basecertid
                            (us_split_fields13 b))) true))
                         (= (bool_eq7
                            (rec__cert__attr__ianda__contentst__template
                            (us_split_fields13 a))
                            (rec__cert__attr__ianda__contentst__template
                            (us_split_fields13 b))) true))
                    true false))

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep6) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment9 a))))

(declare-const cert__attr__ianda__contentst__id__first__bit Int)

(declare-const cert__attr__ianda__contentst__id__last__bit Int)

(declare-const cert__attr__ianda__contentst__id__position Int)

;; cert__attr__ianda__contentst__id__first__bit_axiom
  (assert (<= 0 cert__attr__ianda__contentst__id__first__bit))

;; cert__attr__ianda__contentst__id__last__bit_axiom
  (assert
  (< cert__attr__ianda__contentst__id__first__bit cert__attr__ianda__contentst__id__last__bit))

;; cert__attr__ianda__contentst__id__position_axiom
  (assert (<= 0 cert__attr__ianda__contentst__id__position))

(declare-const cert__attr__ianda__contentst__notbefore__first__bit Int)

(declare-const cert__attr__ianda__contentst__notbefore__last__bit Int)

(declare-const cert__attr__ianda__contentst__notbefore__position Int)

;; cert__attr__ianda__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__attr__ianda__contentst__notbefore__first__bit))

;; cert__attr__ianda__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__attr__ianda__contentst__notbefore__first__bit cert__attr__ianda__contentst__notbefore__last__bit))

;; cert__attr__ianda__contentst__notbefore__position_axiom
  (assert (<= 0 cert__attr__ianda__contentst__notbefore__position))

(declare-const cert__attr__ianda__contentst__notafter__first__bit Int)

(declare-const cert__attr__ianda__contentst__notafter__last__bit Int)

(declare-const cert__attr__ianda__contentst__notafter__position Int)

;; cert__attr__ianda__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__attr__ianda__contentst__notafter__first__bit))

;; cert__attr__ianda__contentst__notafter__last__bit_axiom
  (assert
  (< cert__attr__ianda__contentst__notafter__first__bit cert__attr__ianda__contentst__notafter__last__bit))

;; cert__attr__ianda__contentst__notafter__position_axiom
  (assert (<= 0 cert__attr__ianda__contentst__notafter__position))

(declare-const cert__attr__ianda__contentst__mechanism__first__bit Int)

(declare-const cert__attr__ianda__contentst__mechanism__last__bit Int)

(declare-const cert__attr__ianda__contentst__mechanism__position Int)

;; cert__attr__ianda__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__attr__ianda__contentst__mechanism__first__bit))

;; cert__attr__ianda__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__attr__ianda__contentst__mechanism__first__bit cert__attr__ianda__contentst__mechanism__last__bit))

;; cert__attr__ianda__contentst__mechanism__position_axiom
  (assert (<= 0 cert__attr__ianda__contentst__mechanism__position))

(declare-const cert__attr__ianda__contentst__basecertid__first__bit Int)

(declare-const cert__attr__ianda__contentst__basecertid__last__bit Int)

(declare-const cert__attr__ianda__contentst__basecertid__position Int)

;; cert__attr__ianda__contentst__basecertid__first__bit_axiom
  (assert (<= 0 cert__attr__ianda__contentst__basecertid__first__bit))

;; cert__attr__ianda__contentst__basecertid__last__bit_axiom
  (assert
  (< cert__attr__ianda__contentst__basecertid__first__bit cert__attr__ianda__contentst__basecertid__last__bit))

;; cert__attr__ianda__contentst__basecertid__position_axiom
  (assert (<= 0 cert__attr__ianda__contentst__basecertid__position))

(declare-const cert__attr__ianda__contentst__template__first__bit Int)

(declare-const cert__attr__ianda__contentst__template__last__bit Int)

(declare-const cert__attr__ianda__contentst__template__position Int)

;; cert__attr__ianda__contentst__template__first__bit_axiom
  (assert (<= 0 cert__attr__ianda__contentst__template__first__bit))

;; cert__attr__ianda__contentst__template__last__bit_axiom
  (assert
  (< cert__attr__ianda__contentst__template__first__bit cert__attr__ianda__contentst__template__last__bit))

;; cert__attr__ianda__contentst__template__position_axiom
  (assert (<= 0 cert__attr__ianda__contentst__template__position))

(declare-fun user_eq25 (us_rep6 us_rep6) Bool)

(declare-const dummy25 us_rep6)

(declare-datatypes ()
((contentst__ref1 (mk_contentst__ref1 (contentst__content1 us_rep6)))))
(define-fun contentst__ref___6__projection ((a contentst__ref1)) us_rep6
  (contentst__content1 a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort keyidt 0)

(define-fun in_range17 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)

(declare-fun user_eq26 (keyidt keyidt) Bool)

(declare-const dummy26 keyidt)

(declare-datatypes ()
((keyidt__ref (mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content
                                                              a))

(declare-fun to_rep14 (keyidt) Int)

(declare-fun of_rep14 (Int) keyidt)

;; inversion_axiom
  (assert
  (forall ((x keyidt))
  (! (= (of_rep14 (to_rep14 x)) x) :pattern ((to_rep14 x)) )))

;; range_axiom
  (assert
  (forall ((x keyidt)) (! (in_range17
  (to_rep14 x)) :pattern ((to_rep14 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range17 x) (= (to_rep14 (of_rep14 x)) x)) :pattern ((to_rep14
                                                                 (of_rep14 x))) )))

(declare-sort keylengtht 0)

(define-fun in_range18 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)

(declare-fun user_eq27 (keylengtht keylengtht) Bool)

(declare-const dummy27 keylengtht)

(declare-datatypes ()
((keylengtht__ref (mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht
  (keylengtht__content a))

(declare-fun to_rep15 (keylengtht) Int)

(declare-fun of_rep15 (Int) keylengtht)

;; inversion_axiom
  (assert
  (forall ((x keylengtht))
  (! (= (of_rep15 (to_rep15 x)) x) :pattern ((to_rep15 x)) )))

;; range_axiom
  (assert
  (forall ((x keylengtht)) (! (in_range18
  (to_rep15 x)) :pattern ((to_rep15 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range18 x) (= (to_rep15 (of_rep15 x)) x)) :pattern ((to_rep15
                                                                 (of_rep15 x))) )))

(declare-datatypes ()
((us_split_fields14
 (mk___split_fields7
 (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields14)) algorithmt
  (rec__cryptotypes__keypartt__algorithmid a))

(define-fun us_split_fields_KeyID__projection ((a us_split_fields14)) keyidt
  (rec__cryptotypes__keypartt__keyid a))

(define-fun us_split_fields_KeyLength__projection ((a us_split_fields14)) keylengtht
  (rec__cryptotypes__keypartt__keylength a))

(declare-datatypes ()
((us_split_fields__ref7
 (mk___split_fields__ref7 (us_split_fields__content7 us_split_fields14)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref7)) us_split_fields14
  (us_split_fields__content7 a))

(declare-datatypes ()
((us_rep7 (mk___rep7 (us_split_fields15 us_split_fields14)))))
(define-fun us_rep___2__projection ((a us_rep7)) us_split_fields14 (us_split_fields15
                                                                   a))

(define-fun bool_eq9 ((a us_rep7)
  (b us_rep7)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__cryptotypes__keypartt__algorithmid
                            (us_split_fields15 a))) (to_rep1
                                                    (rec__cryptotypes__keypartt__algorithmid
                                                    (us_split_fields15 b))))
                         (= (to_rep14
                            (rec__cryptotypes__keypartt__keyid
                            (us_split_fields15 a))) (to_rep14
                                                    (rec__cryptotypes__keypartt__keyid
                                                    (us_split_fields15 b)))))
                         (= (to_rep15
                            (rec__cryptotypes__keypartt__keylength
                            (us_split_fields15 a))) (to_rep15
                                                    (rec__cryptotypes__keypartt__keylength
                                                    (us_split_fields15 b)))))
                    true false))

(declare-const value__size10 Int)

(declare-fun object__size10 (us_rep7) Int)

(declare-const value__alignment10 Int)

(declare-fun object__alignment10 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment10 a))))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; cryptotypes__keypartt__algorithmid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; cryptotypes__keypartt__algorithmid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; cryptotypes__keypartt__algorithmid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; cryptotypes__keypartt__keyid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; cryptotypes__keypartt__keyid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; cryptotypes__keypartt__keyid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; cryptotypes__keypartt__keylength__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; cryptotypes__keypartt__keylength__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; cryptotypes__keypartt__keylength__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-fun user_eq28 (us_rep7 us_rep7) Bool)

(declare-const dummy28 us_rep7)

(declare-datatypes ()
((keypartt__ref (mk_keypartt__ref (keypartt__content us_rep7)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep7 (keypartt__content
                                                                   a))

(declare-datatypes ()
((us_split_fields16
 (mk___split_fields8
 (rec__cert__id__contentst__id us_rep1)(rec__cert__id__contentst__notbefore us_rep3)(rec__cert__id__contentst__notafter us_rep3)(rec__cert__id__contentst__mechanism algorithmt)(rec__cert__id__contentst__subject us_rep)(rec__cert__id__contentst__subjectpublickey us_rep7)))))
(define-fun us_split_fields_ID__4__projection ((a us_split_fields16)) us_rep1
  (rec__cert__id__contentst__id a))

(define-fun us_split_fields_NotBefore__2__projection ((a us_split_fields16)) us_rep3
  (rec__cert__id__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__2__projection ((a us_split_fields16)) us_rep3
  (rec__cert__id__contentst__notafter a))

(define-fun us_split_fields_Mechanism__2__projection ((a us_split_fields16)) algorithmt
  (rec__cert__id__contentst__mechanism a))

(define-fun us_split_fields_Subject__projection ((a us_split_fields16)) us_rep
  (rec__cert__id__contentst__subject a))

(define-fun us_split_fields_SubjectPublicKey__projection ((a us_split_fields16)) us_rep7
  (rec__cert__id__contentst__subjectpublickey a))

(declare-datatypes ()
((us_split_fields__ref8
 (mk___split_fields__ref8 (us_split_fields__content8 us_split_fields16)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref8)) us_split_fields16
  (us_split_fields__content8 a))

(declare-datatypes ()
((us_rep8 (mk___rep8 (us_split_fields17 us_split_fields16)))))
(define-fun us_rep___12__projection ((a us_rep8)) us_split_fields16 (us_split_fields17
                                                                    a))

(define-fun bool_eq10 ((a us_rep8)
  (b us_rep8)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq2
                            (rec__cert__id__contentst__id
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__id
                            (us_split_fields17 b))) true)
                         (= (bool_eq4
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields17 b))) true))
                         (= (bool_eq4
                            (rec__cert__id__contentst__notafter
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__notafter
                            (us_split_fields17 b))) true))
                         (= (to_rep1
                            (rec__cert__id__contentst__mechanism
                            (us_split_fields17 a))) (to_rep1
                                                    (rec__cert__id__contentst__mechanism
                                                    (us_split_fields17 b)))))
                         (= (bool_eq1
                            (rec__cert__id__contentst__subject
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__subject
                            (us_split_fields17 b))) true))
                         (= (bool_eq9
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields17 b))) true))
                    true false))

(declare-const value__size11 Int)

(declare-fun object__size11 (us_rep8) Int)

(declare-const value__alignment11 Int)

(declare-fun object__alignment11 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size11 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment11))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment11 a))))

(declare-const cert__id__contentst__id__first__bit Int)

(declare-const cert__id__contentst__id__last__bit Int)

(declare-const cert__id__contentst__id__position Int)

;; cert__id__contentst__id__first__bit_axiom
  (assert (<= 0 cert__id__contentst__id__first__bit))

;; cert__id__contentst__id__last__bit_axiom
  (assert
  (< cert__id__contentst__id__first__bit cert__id__contentst__id__last__bit))

;; cert__id__contentst__id__position_axiom
  (assert (<= 0 cert__id__contentst__id__position))

(declare-const cert__id__contentst__notbefore__first__bit Int)

(declare-const cert__id__contentst__notbefore__last__bit Int)

(declare-const cert__id__contentst__notbefore__position Int)

;; cert__id__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notbefore__first__bit))

;; cert__id__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__id__contentst__notbefore__first__bit cert__id__contentst__notbefore__last__bit))

;; cert__id__contentst__notbefore__position_axiom
  (assert (<= 0 cert__id__contentst__notbefore__position))

(declare-const cert__id__contentst__notafter__first__bit Int)

(declare-const cert__id__contentst__notafter__last__bit Int)

(declare-const cert__id__contentst__notafter__position Int)

;; cert__id__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notafter__first__bit))

;; cert__id__contentst__notafter__last__bit_axiom
  (assert
  (< cert__id__contentst__notafter__first__bit cert__id__contentst__notafter__last__bit))

;; cert__id__contentst__notafter__position_axiom
  (assert (<= 0 cert__id__contentst__notafter__position))

(declare-const cert__id__contentst__mechanism__first__bit Int)

(declare-const cert__id__contentst__mechanism__last__bit Int)

(declare-const cert__id__contentst__mechanism__position Int)

;; cert__id__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__id__contentst__mechanism__first__bit))

;; cert__id__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__id__contentst__mechanism__first__bit cert__id__contentst__mechanism__last__bit))

;; cert__id__contentst__mechanism__position_axiom
  (assert (<= 0 cert__id__contentst__mechanism__position))

(declare-const cert__id__contentst__subject__first__bit Int)

(declare-const cert__id__contentst__subject__last__bit Int)

(declare-const cert__id__contentst__subject__position Int)

;; cert__id__contentst__subject__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subject__first__bit))

;; cert__id__contentst__subject__last__bit_axiom
  (assert
  (< cert__id__contentst__subject__first__bit cert__id__contentst__subject__last__bit))

;; cert__id__contentst__subject__position_axiom
  (assert (<= 0 cert__id__contentst__subject__position))

(declare-const cert__id__contentst__subjectpublickey__first__bit Int)

(declare-const cert__id__contentst__subjectpublickey__last__bit Int)

(declare-const cert__id__contentst__subjectpublickey__position Int)

;; cert__id__contentst__subjectpublickey__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__first__bit))

;; cert__id__contentst__subjectpublickey__last__bit_axiom
  (assert
  (< cert__id__contentst__subjectpublickey__first__bit cert__id__contentst__subjectpublickey__last__bit))

;; cert__id__contentst__subjectpublickey__position_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__position))

(declare-fun user_eq29 (us_rep8 us_rep8) Bool)

(declare-const dummy29 us_rep8)

(declare-datatypes ()
((contentst__ref2 (mk_contentst__ref2 (contentst__content2 us_rep8)))))
(define-fun contentst__ref___2__projection ((a contentst__ref2)) us_rep8
  (contentst__content2 a))

(declare-sort certificatestatus 0)

(define-fun in_range19 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE19 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check19 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE19 (us_image) Int)

(declare-fun user_eq30 (certificatestatus certificatestatus) Bool)

(declare-const dummy30 certificatestatus)

(declare-datatypes ()
((certificatestatus__ref
 (mk_certificatestatus__ref (certificatestatus__content certificatestatus)))))
(define-fun certificatestatus__ref___projection ((a certificatestatus__ref)) certificatestatus
  (certificatestatus__content a))

(declare-fun to_rep16 (certificatestatus) Int)

(declare-fun of_rep16 (Int) certificatestatus)

;; inversion_axiom
  (assert
  (forall ((x certificatestatus))
  (! (= (of_rep16 (to_rep16 x)) x) :pattern ((to_rep16 x)) )))

;; range_axiom
  (assert
  (forall ((x certificatestatus)) (! (in_range19
  (to_rep16 x)) :pattern ((to_rep16 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range19 x) (= (to_rep16 (of_rep16 x)) x)) :pattern ((to_rep16
                                                                 (of_rep16 x))) )))

(declare-datatypes ()
((us_split_fields18
 (mk___split_fields9
 (rec__usertoken__valididcertt__valid Bool)(rec__usertoken__valididcertt__idstatus certificatestatus)(rec__usertoken__valididcertt__contents us_rep8)))))
(define-fun us_split_fields_Valid__projection ((a us_split_fields18)) Bool
  (rec__usertoken__valididcertt__valid a))

(define-fun us_split_fields_IDStatus__projection ((a us_split_fields18)) certificatestatus
  (rec__usertoken__valididcertt__idstatus a))

(define-fun us_split_fields_Contents__projection ((a us_split_fields18)) us_rep8
  (rec__usertoken__valididcertt__contents a))

(declare-datatypes ()
((us_split_fields__ref9
 (mk___split_fields__ref9 (us_split_fields__content9 us_split_fields18)))))
(define-fun us_split_fields__ref___24__projection ((a us_split_fields__ref9)) us_split_fields18
  (us_split_fields__content9 a))

(declare-datatypes ()
((us_rep9 (mk___rep9 (us_split_fields19 us_split_fields18)))))
(define-fun us_rep___25__projection ((a us_rep9)) us_split_fields18 (us_split_fields19
                                                                    a))

(define-fun bool_eq11 ((a us_rep9)
  (b us_rep9)) Bool (ite (and
                         (and
                         (= (rec__usertoken__valididcertt__valid
                            (us_split_fields19 a)) (rec__usertoken__valididcertt__valid
                                                   (us_split_fields19 b)))
                         (= (to_rep16
                            (rec__usertoken__valididcertt__idstatus
                            (us_split_fields19 a))) (to_rep16
                                                    (rec__usertoken__valididcertt__idstatus
                                                    (us_split_fields19 b)))))
                         (= (bool_eq10
                            (rec__usertoken__valididcertt__contents
                            (us_split_fields19 a))
                            (rec__usertoken__valididcertt__contents
                            (us_split_fields19 b))) true))
                    true false))

(declare-const value__size12 Int)

(declare-fun object__size12 (us_rep9) Int)

(declare-const value__alignment12 Int)

(declare-fun object__alignment12 (us_rep9) Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__size12 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment12))

;; object__alignment_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__alignment12 a))))

(declare-const usertoken__valididcertt__valid__first__bit Int)

(declare-const usertoken__valididcertt__valid__last__bit Int)

(declare-const usertoken__valididcertt__valid__position Int)

;; usertoken__valididcertt__valid__first__bit_axiom
  (assert (<= 0 usertoken__valididcertt__valid__first__bit))

;; usertoken__valididcertt__valid__last__bit_axiom
  (assert
  (< usertoken__valididcertt__valid__first__bit usertoken__valididcertt__valid__last__bit))

;; usertoken__valididcertt__valid__position_axiom
  (assert (<= 0 usertoken__valididcertt__valid__position))

(declare-const usertoken__valididcertt__idstatus__first__bit Int)

(declare-const usertoken__valididcertt__idstatus__last__bit Int)

(declare-const usertoken__valididcertt__idstatus__position Int)

;; usertoken__valididcertt__idstatus__first__bit_axiom
  (assert (<= 0 usertoken__valididcertt__idstatus__first__bit))

;; usertoken__valididcertt__idstatus__last__bit_axiom
  (assert
  (< usertoken__valididcertt__idstatus__first__bit usertoken__valididcertt__idstatus__last__bit))

;; usertoken__valididcertt__idstatus__position_axiom
  (assert (<= 0 usertoken__valididcertt__idstatus__position))

(declare-const usertoken__valididcertt__contents__first__bit Int)

(declare-const usertoken__valididcertt__contents__last__bit Int)

(declare-const usertoken__valididcertt__contents__position Int)

;; usertoken__valididcertt__contents__first__bit_axiom
  (assert (<= 0 usertoken__valididcertt__contents__first__bit))

;; usertoken__valididcertt__contents__last__bit_axiom
  (assert
  (< usertoken__valididcertt__contents__first__bit usertoken__valididcertt__contents__last__bit))

;; usertoken__valididcertt__contents__position_axiom
  (assert (<= 0 usertoken__valididcertt__contents__position))

(declare-fun user_eq31 (us_rep9 us_rep9) Bool)

(declare-const dummy31 us_rep9)

(declare-datatypes ()
((valididcertt__ref (mk_valididcertt__ref (valididcertt__content us_rep9)))))
(define-fun valididcertt__ref___projection ((a valididcertt__ref)) us_rep9
  (valididcertt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-datatypes ()
((us_split_fields20
 (mk___split_fields10
 (rec__usertoken__validiandacertt__valid Bool)(rec__usertoken__validiandacertt__contents us_rep6)))))
(define-fun us_split_fields_Valid__4__projection ((a us_split_fields20)) Bool
  (rec__usertoken__validiandacertt__valid a))

(define-fun us_split_fields_Contents__4__projection ((a us_split_fields20)) us_rep6
  (rec__usertoken__validiandacertt__contents a))

(declare-datatypes ()
((us_split_fields__ref10
 (mk___split_fields__ref10 (us_split_fields__content10 us_split_fields20)))))
(define-fun us_split_fields__ref___27__projection ((a us_split_fields__ref10)) us_split_fields20
  (us_split_fields__content10 a))

(declare-datatypes ()
((us_rep10 (mk___rep10 (us_split_fields21 us_split_fields20)))))
(define-fun us_rep___28__projection ((a us_rep10)) us_split_fields20
  (us_split_fields21 a))

(define-fun bool_eq12 ((a us_rep10)
  (b us_rep10)) Bool (ite (and
                          (= (rec__usertoken__validiandacertt__valid
                             (us_split_fields21 a)) (rec__usertoken__validiandacertt__valid
                                                    (us_split_fields21 b)))
                          (= (bool_eq8
                             (rec__usertoken__validiandacertt__contents
                             (us_split_fields21 a))
                             (rec__usertoken__validiandacertt__contents
                             (us_split_fields21 b))) true))
                     true false))

(declare-const value__size13 Int)

(declare-fun object__size13 (us_rep10) Int)

(declare-const value__alignment13 Int)

(declare-fun object__alignment13 (us_rep10) Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__size13 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment13))

;; object__alignment_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__alignment13 a))))

(declare-const usertoken__validiandacertt__valid__first__bit Int)

(declare-const usertoken__validiandacertt__valid__last__bit Int)

(declare-const usertoken__validiandacertt__valid__position Int)

;; usertoken__validiandacertt__valid__first__bit_axiom
  (assert (<= 0 usertoken__validiandacertt__valid__first__bit))

;; usertoken__validiandacertt__valid__last__bit_axiom
  (assert
  (< usertoken__validiandacertt__valid__first__bit usertoken__validiandacertt__valid__last__bit))

;; usertoken__validiandacertt__valid__position_axiom
  (assert (<= 0 usertoken__validiandacertt__valid__position))

(declare-const usertoken__validiandacertt__contents__first__bit Int)

(declare-const usertoken__validiandacertt__contents__last__bit Int)

(declare-const usertoken__validiandacertt__contents__position Int)

;; usertoken__validiandacertt__contents__first__bit_axiom
  (assert (<= 0 usertoken__validiandacertt__contents__first__bit))

;; usertoken__validiandacertt__contents__last__bit_axiom
  (assert
  (< usertoken__validiandacertt__contents__first__bit usertoken__validiandacertt__contents__last__bit))

;; usertoken__validiandacertt__contents__position_axiom
  (assert (<= 0 usertoken__validiandacertt__contents__position))

(declare-fun user_eq32 (us_rep10 us_rep10) Bool)

(declare-const dummy32 us_rep10)

(declare-datatypes ()
((validiandacertt__ref
 (mk_validiandacertt__ref (validiandacertt__content us_rep10)))))
(define-fun validiandacertt__ref___projection ((a validiandacertt__ref)) us_rep10
  (validiandacertt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-datatypes ()
((us_split_fields22
 (mk___split_fields11
 (rec__usertoken__validprivcertt__valid Bool)(rec__usertoken__validprivcertt__contents us_rep4)))))
(define-fun us_split_fields_Valid__2__projection ((a us_split_fields22)) Bool
  (rec__usertoken__validprivcertt__valid a))

(define-fun us_split_fields_Contents__2__projection ((a us_split_fields22)) us_rep4
  (rec__usertoken__validprivcertt__contents a))

(declare-datatypes ()
((us_split_fields__ref11
 (mk___split_fields__ref11 (us_split_fields__content11 us_split_fields22)))))
(define-fun us_split_fields__ref___25__projection ((a us_split_fields__ref11)) us_split_fields22
  (us_split_fields__content11 a))

(declare-datatypes ()
((us_rep11 (mk___rep11 (us_split_fields23 us_split_fields22)))))
(define-fun us_rep___26__projection ((a us_rep11)) us_split_fields22
  (us_split_fields23 a))

(define-fun bool_eq13 ((a us_rep11)
  (b us_rep11)) Bool (ite (and
                          (= (rec__usertoken__validprivcertt__valid
                             (us_split_fields23 a)) (rec__usertoken__validprivcertt__valid
                                                    (us_split_fields23 b)))
                          (= (bool_eq5
                             (rec__usertoken__validprivcertt__contents
                             (us_split_fields23 a))
                             (rec__usertoken__validprivcertt__contents
                             (us_split_fields23 b))) true))
                     true false))

(declare-const value__size14 Int)

(declare-fun object__size14 (us_rep11) Int)

(declare-const value__alignment14 Int)

(declare-fun object__alignment14 (us_rep11) Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (forall ((a us_rep11)) (<= 0 (object__size14 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment14))

;; object__alignment_axiom
  (assert (forall ((a us_rep11)) (<= 0 (object__alignment14 a))))

(declare-const usertoken__validprivcertt__valid__first__bit Int)

(declare-const usertoken__validprivcertt__valid__last__bit Int)

(declare-const usertoken__validprivcertt__valid__position Int)

;; usertoken__validprivcertt__valid__first__bit_axiom
  (assert (<= 0 usertoken__validprivcertt__valid__first__bit))

;; usertoken__validprivcertt__valid__last__bit_axiom
  (assert
  (< usertoken__validprivcertt__valid__first__bit usertoken__validprivcertt__valid__last__bit))

;; usertoken__validprivcertt__valid__position_axiom
  (assert (<= 0 usertoken__validprivcertt__valid__position))

(declare-const usertoken__validprivcertt__contents__first__bit Int)

(declare-const usertoken__validprivcertt__contents__last__bit Int)

(declare-const usertoken__validprivcertt__contents__position Int)

;; usertoken__validprivcertt__contents__first__bit_axiom
  (assert (<= 0 usertoken__validprivcertt__contents__first__bit))

;; usertoken__validprivcertt__contents__last__bit_axiom
  (assert
  (< usertoken__validprivcertt__contents__first__bit usertoken__validprivcertt__contents__last__bit))

;; usertoken__validprivcertt__contents__position_axiom
  (assert (<= 0 usertoken__validprivcertt__contents__position))

(declare-fun user_eq33 (us_rep11 us_rep11) Bool)

(declare-const dummy33 us_rep11)

(declare-datatypes ()
((validprivcertt__ref
 (mk_validprivcertt__ref (validprivcertt__content us_rep11)))))
(define-fun validprivcertt__ref___projection ((a validprivcertt__ref)) us_rep11
  (validprivcertt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const c88b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-fun temp___String_Literal_1902 (tuple0) (Array Int character))

;; temp___String_Literal_1902__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 3)) 107))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 7)) 66))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 8)) 97))
     (= (to_rep (select (temp___String_Literal_1902 us_void_param) 9)) 100)) :pattern (
  (temp___String_Literal_1902 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range1 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_1638 Int)
  (temp___is_init_1635 Bool) (temp___skip_constant_1636 Bool)
  (temp___do_toplevel_1637 Bool)) Bool (=>
                                       (or (= temp___is_init_1635 true)
                                       (<= 0 3)) (in_range19
                                       temp___expr_1638)))

(define-fun dynamic_invariant3 ((temp___expr_384 Int)
  (temp___is_init_381 Bool) (temp___skip_constant_382 Bool)
  (temp___do_toplevel_383 Bool)) Bool (=>
                                      (or (= temp___is_init_381 true)
                                      (<= 1 150)) (in_range3
                                      temp___expr_384)))

;; nodescription__def_axiom
  (assert (= nodescription (audittypes__nodescription__aggregate_def 32)))

(define-fun dynamic_invariant4 ((temp___expr_426 Int)
  (temp___is_init_423 Bool) (temp___skip_constant_424 Bool)
  (temp___do_toplevel_425 Bool)) Bool (=>
                                      (or (= temp___is_init_423 true)
                                      (<= 1901 2099)) (in_range10
                                      temp___expr_426)))

(define-fun dynamic_invariant5 ((temp___expr_432 Int)
  (temp___is_init_429 Bool) (temp___skip_constant_430 Bool)
  (temp___do_toplevel_431 Bool)) Bool (=>
                                      (or (= temp___is_init_429 true)
                                      (<= 1 12)) (in_range11
                                      temp___expr_432)))

(define-fun dynamic_invariant6 ((temp___expr_438 Int)
  (temp___is_init_435 Bool) (temp___skip_constant_436 Bool)
  (temp___do_toplevel_437 Bool)) Bool (=>
                                      (or (= temp___is_init_435 true)
                                      (<= 1 31)) (in_range12
                                      temp___expr_438)))

(define-fun dynamic_invariant7 ((temp___expr_462 Int)
  (temp___is_init_459 Bool) (temp___skip_constant_460 Bool)
  (temp___do_toplevel_461 Bool)) Bool (=>
                                      (or (= temp___is_init_459 true)
                                      (<= 0 86399999)) (in_range13
                                      temp___expr_462)))

(define-fun dynamic_invariant8 ((temp___expr_167 Int)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool (=>
                                      (or (= temp___is_init_164 true)
                                      (<= 0 255)) (in_range15
                                      temp___expr_167)))

(define-fun dynamic_invariant9 ((temp___expr_846 Int)
  (temp___is_init_843 Bool) (temp___skip_constant_844 Bool)
  (temp___do_toplevel_845 Bool)) Bool (=>
                                      (or (= temp___is_init_843 true)
                                      (<= 0 2147483647)) (in_range14
                                      temp___expr_846)))

(define-fun dynamic_invariant10 ((temp___expr_873 Int)
  (temp___is_init_870 Bool) (temp___skip_constant_871 Bool)
  (temp___do_toplevel_872 Bool)) Bool (=>
                                      (or (= temp___is_init_870 true)
                                      (<= 0 4294967295)) (in_range16
                                      temp___expr_873)))

(define-fun dynamic_invariant11 ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 40)) (in_range5 temp___expr_179)))

(define-fun dynamic_invariant12 ((temp___expr_200 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)) Bool (=>
                                      (or (= temp___is_init_197 true)
                                      (<= 0 4294967295)) (in_range6
                                      temp___expr_200)))

(define-fun dynamic_invariant13 ((temp___expr_218 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (=>
                                      (or (= temp___is_init_215 true)
                                      (<= 0 10)) (in_range4 temp___expr_218)))

(define-fun dynamic_invariant14 ((temp___expr_230 Int)
  (temp___is_init_227 Bool) (temp___skip_constant_228 Bool)
  (temp___do_toplevel_229 Bool)) Bool (=>
                                      (or (= temp___is_init_227 true)
                                      (<= 0 4294967295)) (in_range17
                                      temp___expr_230)))

(define-fun dynamic_invariant15 ((temp___expr_236 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (or (= temp___is_init_233 true)
                                      (<= 0 128)) (in_range18
                                      temp___expr_236)))

(define-fun dynamic_invariant16 ((temp___expr_341 Int)
  (temp___is_init_338 Bool) (temp___skip_constant_339 Bool)
  (temp___do_toplevel_340 Bool)) Bool (=>
                                      (or (= temp___is_init_338 true)
                                      (<= 0 3)) (in_range8 temp___expr_341)))

(define-fun dynamic_invariant17 ((temp___expr_353 Int)
  (temp___is_init_350 Bool) (temp___skip_constant_351 Bool)
  (temp___do_toplevel_352 Bool)) Bool (=>
                                      (or (= temp___is_init_350 true)
                                      (<= 0 5)) (in_range9 temp___expr_353)))

(define-fun dynamic_invariant18 ((temp___expr_321 Int)
  (temp___is_init_318 Bool) (temp___skip_constant_319 Bool)
  (temp___do_toplevel_320 Bool)) Bool (=>
                                      (or (= temp___is_init_318 true)
                                      (<= 0 4294967295)) (in_range7
                                      temp___expr_321)))

(declare-const tokentry Int)

(declare-const privvalid Bool)

(declare-const iandavalid Bool)

(declare-const result__ (Array Int character))

(declare-const result Bool)

(declare-const privvalid1 Bool)

(declare-const result1 Bool)

(declare-const iandavalid1 Bool)

(declare-const result2 (Array Int character))

(declare-const result__1 (Array Int character))

;; H
  (assert (= (audittypes__nodescription__aggregate_def 32) nodescription))

;; H
  (assert (in_range2 tokentry))

;; H
  (assert (not (= tokentry 2)))

;; H
  (assert (= result privvalid))

;; H
  (assert (= privvalid1 (of_int 0)))

;; H
  (assert (= result1 iandavalid))

;; H
  (assert (= iandavalid1 (of_int 0)))

;; H
  (assert (= result2 result__))

;; H
  (assert (= result__1 nodescription))

;; H
  (assert (not (= (of_int 1) true)))

;; H
  (assert (<= 1 150))

(assert
;; WP_parameter_def
 ;; File "usertoken.adb", line 368, characters 0-0
  (not (<= 1 1)))
(check-sat)
(exit)
