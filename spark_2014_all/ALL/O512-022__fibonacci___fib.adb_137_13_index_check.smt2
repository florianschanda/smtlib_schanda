;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort tintarrayD1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tintarrayD1 tintarrayD1) Bool)

(declare-const dummy2 tintarrayD1)

(declare-datatypes ((tintarrayD1__ref 0))
(((mk_tintarrayD1__ref (tintarrayD1__content tintarrayD1)))))
(define-fun tintarrayD1__ref___projection ((a tintarrayD1__ref)) tintarrayD1
  (tintarrayD1__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const b1 (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const b2 (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c1 (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c2 (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const k1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const k2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const a1 (Array Int integer))

(declare-const a2 (Array Int integer))

(declare-const i Int)

(declare-const i1 Int)

(declare-const i2 Int)

(declare-const temp___195 (Array Int integer))

(declare-const o Int)

(declare-const o1 integer)

(declare-const o2 Int)

(declare-const o3 integer)

(declare-const o4 Int)

(declare-const o5 (Array Int integer))

(declare-const temp___202 Int)

(declare-const temp___200 (Array Int integer))

(declare-const temp___199 Int)

(declare-const o6 Int)

(declare-const o7 integer)

(declare-const o8 Int)

(declare-const o9 integer)

(declare-const o10 Int)

(declare-const o11 (Array Int integer))

(declare-const o12 Int)

(declare-const o13 integer)

(declare-const o14 Int)

(declare-const o15 integer)

(declare-const a11 (Array Int integer))

(declare-const result Int)

(declare-const i3 Int)

(declare-const a12 (Array Int integer))

(declare-const i4 Int)

(declare-const result1 (Array Int integer))

(declare-const a13 (Array Int integer))

(declare-const a14 (Array Int integer))

(declare-const i5 Int)

(declare-const a15 (Array Int integer))

(declare-const i6 Int)

(declare-const a16 (Array Int integer))

(declare-const i7 Int)

(declare-const a17 (Array Int integer))

(declare-const i8 Int)

(declare-const result2 Int)

(declare-const i9 Int)

(declare-const a18 (Array Int integer))

(declare-const i10 Int)

(declare-const result3 (Array Int integer))

(declare-const a19 (Array Int integer))

(declare-const a110 (Array Int integer))

(declare-const i11 Int)

(declare-const a111 (Array Int integer))

(declare-const i12 Int)

(declare-const a112 (Array Int integer))

(declare-const i13 int__ref)

(declare-const a113 (Array Int integer))

(declare-const i14 Int)

(declare-const result4 int__ref)

(declare-const i15 Int)

(declare-const a21 (Array Int integer))

(declare-const i16 Int)

(define-fun a114 () map__ref (mk_map__ref a112))

(define-fun a115 () map__ref (mk_map__ref a16))

;; H
  (assert (in_range2 k1))

;; H
  (assert (in_range2 k2))

;; H
  (assert
  (and (= k1 k2)
  (and (<= 0 k1)
  (and (<= k1 100)
  (and (<= 0 k2)
  (and (<= k2 100)
  (and
  (forall ((i17 Int))
  (=> (and (<= 0 i17) (<= i17 k1))
  (= (to_rep (select b1 i17)) (to_rep (select b2 i17)))))
  (forall ((i17 Int))
  (=> (and (<= (+ k1 1) i17) (<= i17 100))
  (= (to_rep (select c1 (- i17 k1))) (to_rep (select c2 (- i17 k2)))))))))))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i3 0))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= temp___195 a1)))

;; H
  (assert
  (=> (and (<= 0 i3) (<= i3 k1))
  (and
  (forall ((temp___196 Int))
  (=> (and (<= 0 temp___196) (<= temp___196 100))
  (=> (<= i4 temp___196)
  (= (select a12 temp___196) (select temp___195 temp___196)))))
  (and (<= 0 i4) (<= i4 k1)))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (and (<= 0 i4) (<= i4 100))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= o i4)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= o1 (select b1 o))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= o2 (to_rep o1))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= (to_rep o3) o2)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (and (<= 0 i4) (<= i4 100))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= o4 i4)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= o5 (store a12 o4 o3))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= a12 result1)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= a13 o5)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= i4 k1)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= i4 i5)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= a13 a14)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= i6 i4)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= a15 a13)))

;; H
  (assert
  (=> (and (<= 0 i3) (<= i3 k1)) (= (mk_int__ref i7) (mk_int__ref i5))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= a115 (mk_map__ref a14))))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= i8 i6)))

;; H
  (assert (=> (and (<= 0 i3) (<= i3 k1)) (= a17 a15)))

;; H
  (assert (=> (not (and (<= 0 i3) (<= i3 k1))) (= i3 i7)))

;; H
  (assert (=> (not (and (<= 0 i3) (<= i3 k1))) (= a115 (mk_map__ref a1))))

;; H
  (assert (=> (not (and (<= 0 i3) (<= i3 k1))) (= i8 i3)))

;; H
  (assert (=> (not (and (<= 0 i3) (<= i3 k1))) (= a17 a11)))

;; H
  (assert (and (= temp___202 (+ k1 1)) (in_range1 (+ k1 1))))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref i1)))

;; H
  (assert (= i9 temp___202))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= temp___200 a16)))

;; H
  (assert
  (=> (and (<= temp___202 i9) (<= i9 0))
  (and
  (forall ((temp___201 Int))
  (=> (and (<= 0 temp___201) (<= temp___201 100))
  (=> (<= i10 temp___201)
  (= (select a18 temp___201) (select temp___200 temp___201)))))
  (and (<= (+ k1 1) i10) (<= i10 0)))))

;; H
  (assert
  (=> (and (<= temp___202 i9) (<= i9 0))
  (and (= temp___199 (- i10 k1)) (in_range1 (- i10 k1)))))

;; H
  (assert
  (=> (and (<= temp___202 i9) (<= i9 0))
  (and (<= 0 temp___199) (<= temp___199 100))))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= o6 temp___199)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= o7 (select c1 o6))))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= o8 (to_rep o7))))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= (to_rep o9) o8)))

;; H
  (assert
  (=> (and (<= temp___202 i9) (<= i9 0)) (and (<= 0 i10) (<= i10 100))))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= o10 i10)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= o11 (store a18 o10 o9))))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= a18 result3)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= a19 o11)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= i10 0)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= i10 i11)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= a19 a110)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= i12 i10)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= a111 a19)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= i13 (mk_int__ref i11))))

;; H
  (assert
  (=> (and (<= temp___202 i9) (<= i9 0)) (= a114 (mk_map__ref a110))))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= i14 i12)))

;; H
  (assert (=> (and (<= temp___202 i9) (<= i9 0)) (= a113 a111)))

;; H
  (assert
  (=> (not (and (<= temp___202 i9) (<= i9 0))) (= i13 (mk_int__ref i9))))

;; H
  (assert (=> (not (and (<= temp___202 i9) (<= i9 0))) (= a114 a115)))

;; H
  (assert (=> (not (and (<= temp___202 i9) (<= i9 0))) (= i14 i9)))

;; H
  (assert (=> (not (and (<= temp___202 i9) (<= i9 0))) (= a113 a17)))

;; H
  (assert (= result4 (mk_int__ref i2)))

;; H
  (assert (= i15 0))

;; H
  (assert (<= 0 i15))

;; H
  (assert (<= i15 k2))

;; H
  (assert
  (and
  (forall ((temp___205 Int))
  (=> (and (<= 0 temp___205) (<= temp___205 100))
  (=> (<= i16 temp___205) (= (select a21 temp___205) (select a2 temp___205)))))
  (and (<= 0 i16) (<= i16 k2))))

;; H
  (assert (and (<= 0 i16) (<= i16 100)))

;; H
  (assert (= o12 i16))

;; H
  (assert (= o13 (select b2 o12)))

;; H
  (assert (= o14 (to_rep o13)))

;; H
  (assert (= (to_rep o15) o14))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= 0 i16)))
(check-sat)
(exit)
