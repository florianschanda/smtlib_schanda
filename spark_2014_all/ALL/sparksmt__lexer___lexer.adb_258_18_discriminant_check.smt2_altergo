(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type name_id

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : name_id, name_id -> bool

logic dummy1 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref___projection(a: name_id__ref) : name_id =
  (a).name_id__content

type token_kind

predicate in_range3(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : token_kind, token_kind -> bool

logic dummy2 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref___projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep1 : token_kind -> int

logic of_rep1 : int -> token_kind

axiom inversion_axiom1 :
  (forall x:token_kind [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:token_kind [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic to_rep2 : name_id -> int

logic of_rep2 : int -> name_id

axiom inversion_axiom2 :
  (forall x:name_id [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:name_id [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__lexer__token__kind : token_kind
}

function us_split_discrs_3__projection(a: us_split_discrs) : token_kind =
  (a).rec__lexer__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__lexer__token__line : natural;
rec__lexer__token__col : natural; rec__lexer__token__length : natural;
rec__lexer__token__value : name_id
}

function us_split_fields_Line__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__line

function us_split_fields_Col__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__col

function us_split_fields_Length__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__length

function us_split_fields_Value__projection(a: us_split_fields) : name_id =
  (a).rec__lexer__token__value

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep_8__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_9__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_10__projection(a: us_rep) : bool = (a).attr__constrained

predicate lexer__token__value__pred(a: us_rep) =
  ((3 <= to_rep1(((a).us_split_discrs1).rec__lexer__token__kind)) and
  (to_rep1(((a).us_split_discrs1).rec__lexer__token__kind) <= 8))

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((((to_rep1(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep1(((b).us_split_discrs1).rec__lexer__token__kind)) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__line) = to_rep(((b).us_split_fields1).rec__lexer__token__line))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__col) = to_rep(((b).us_split_fields1).rec__lexer__token__col))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__length) = to_rep(((b).us_split_fields1).rec__lexer__token__length))) and
  (lexer__token__value__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__lexer__token__value) = to_rep2(((b).us_split_fields1).rec__lexer__token__value)))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((((to_rep1(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep1(((b).us_split_discrs1).rec__lexer__token__kind)) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__line) = to_rep(((b).us_split_fields1).rec__lexer__token__line))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__col) = to_rep(((b).us_split_fields1).rec__lexer__token__col))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__length) = to_rep(((b).us_split_fields1).rec__lexer__token__length))) and
  (lexer__token__value__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__lexer__token__value) = to_rep2(((b).us_split_fields1).rec__lexer__token__value))))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit : int

logic lexer__token__kind__last__bit : int

logic lexer__token__kind__position : int

axiom lexer__token__kind__first__bit_axiom :
  (0 <= lexer__token__kind__first__bit)

axiom lexer__token__kind__last__bit_axiom :
  (lexer__token__kind__first__bit <  lexer__token__kind__last__bit)

axiom lexer__token__kind__position_axiom :
  (0 <= lexer__token__kind__position)

logic lexer__token__line__first__bit : int

logic lexer__token__line__last__bit : int

logic lexer__token__line__position : int

axiom lexer__token__line__first__bit_axiom :
  (0 <= lexer__token__line__first__bit)

axiom lexer__token__line__last__bit_axiom :
  (lexer__token__line__first__bit <  lexer__token__line__last__bit)

axiom lexer__token__line__position_axiom :
  (0 <= lexer__token__line__position)

logic lexer__token__col__first__bit : int

logic lexer__token__col__last__bit : int

logic lexer__token__col__position : int

axiom lexer__token__col__first__bit_axiom :
  (0 <= lexer__token__col__first__bit)

axiom lexer__token__col__last__bit_axiom :
  (lexer__token__col__first__bit <  lexer__token__col__last__bit)

axiom lexer__token__col__position_axiom : (0 <= lexer__token__col__position)

logic lexer__token__length__first__bit : int

logic lexer__token__length__last__bit : int

logic lexer__token__length__position : int

axiom lexer__token__length__first__bit_axiom :
  (0 <= lexer__token__length__first__bit)

axiom lexer__token__length__last__bit_axiom :
  (lexer__token__length__first__bit <  lexer__token__length__last__bit)

axiom lexer__token__length__position_axiom :
  (0 <= lexer__token__length__position)

logic lexer__token__value__first__bit : int

logic lexer__token__value__last__bit : int

logic lexer__token__value__position : int

axiom lexer__token__value__first__bit_axiom :
  (0 <= lexer__token__value__first__bit)

axiom lexer__token__value__last__bit_axiom :
  (lexer__token__value__first__bit <  lexer__token__value__last__bit)

axiom lexer__token__value__position_axiom :
  (0 <= lexer__token__value__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : token_kind

logic dummy4 : natural

logic dummy5 : natural

logic dummy6 : natural

logic dummy7 : name_id

logic dummy8 : bool

type token__ref = { token__content : us_rep
}

function token__ref___projection(a: token__ref) : us_rep = (a).token__content

logic t__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic kind : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r19b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range4(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep1(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit1 : int

logic lexer__token__kind__last__bit1 : int

logic lexer__token__kind__position1 : int

axiom lexer__token__kind__first__bit_axiom1 :
  (0 <= lexer__token__kind__first__bit1)

axiom lexer__token__kind__last__bit_axiom1 :
  (lexer__token__kind__first__bit1 <  lexer__token__kind__last__bit1)

axiom lexer__token__kind__position_axiom1 :
  (0 <= lexer__token__kind__position1)

logic lexer__token__value__first__bit1 : int

logic lexer__token__value__last__bit1 : int

logic lexer__token__value__position1 : int

axiom lexer__token__value__first__bit_axiom1 :
  (0 <= lexer__token__value__first__bit1)

axiom lexer__token__value__last__bit_axiom1 :
  (lexer__token__value__first__bit1 <  lexer__token__value__last__bit1)

axiom lexer__token__value__position_axiom1 :
  (0 <= lexer__token__value__position1)

logic lexer__token__line__first__bit1 : int

logic lexer__token__line__last__bit1 : int

logic lexer__token__line__position1 : int

axiom lexer__token__line__first__bit_axiom1 :
  (0 <= lexer__token__line__first__bit1)

axiom lexer__token__line__last__bit_axiom1 :
  (lexer__token__line__first__bit1 <  lexer__token__line__last__bit1)

axiom lexer__token__line__position_axiom1 :
  (0 <= lexer__token__line__position1)

logic lexer__token__col__first__bit1 : int

logic lexer__token__col__last__bit1 : int

logic lexer__token__col__position1 : int

axiom lexer__token__col__first__bit_axiom1 :
  (0 <= lexer__token__col__first__bit1)

axiom lexer__token__col__last__bit_axiom1 :
  (lexer__token__col__first__bit1 <  lexer__token__col__last__bit1)

axiom lexer__token__col__position_axiom1 :
  (0 <= lexer__token__col__position1)

logic lexer__token__length__first__bit1 : int

logic lexer__token__length__last__bit1 : int

logic lexer__token__length__position1 : int

axiom lexer__token__length__first__bit_axiom1 :
  (0 <= lexer__token__length__first__bit1)

axiom lexer__token__length__last__bit_axiom1 :
  (lexer__token__length__first__bit1 <  lexer__token__length__last__bit1)

axiom lexer__token__length__position_axiom1 :
  (0 <= lexer__token__length__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy9 : token_kind

logic dummy10 : natural

logic dummy11 : natural

logic dummy12 : natural

logic dummy13 : name_id

logic dummy14 : bool

type t20b__ref = { t20b__content : us_rep
}

function t20b__ref___projection(a: t20b__ref) : us_rep = (a).t20b__content

logic r22b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range5(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep1(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit2 : int

logic lexer__token__kind__last__bit2 : int

logic lexer__token__kind__position2 : int

axiom lexer__token__kind__first__bit_axiom2 :
  (0 <= lexer__token__kind__first__bit2)

axiom lexer__token__kind__last__bit_axiom2 :
  (lexer__token__kind__first__bit2 <  lexer__token__kind__last__bit2)

axiom lexer__token__kind__position_axiom2 :
  (0 <= lexer__token__kind__position2)

logic lexer__token__value__first__bit2 : int

logic lexer__token__value__last__bit2 : int

logic lexer__token__value__position2 : int

axiom lexer__token__value__first__bit_axiom2 :
  (0 <= lexer__token__value__first__bit2)

axiom lexer__token__value__last__bit_axiom2 :
  (lexer__token__value__first__bit2 <  lexer__token__value__last__bit2)

axiom lexer__token__value__position_axiom2 :
  (0 <= lexer__token__value__position2)

logic lexer__token__line__first__bit2 : int

logic lexer__token__line__last__bit2 : int

logic lexer__token__line__position2 : int

axiom lexer__token__line__first__bit_axiom2 :
  (0 <= lexer__token__line__first__bit2)

axiom lexer__token__line__last__bit_axiom2 :
  (lexer__token__line__first__bit2 <  lexer__token__line__last__bit2)

axiom lexer__token__line__position_axiom2 :
  (0 <= lexer__token__line__position2)

logic lexer__token__col__first__bit2 : int

logic lexer__token__col__last__bit2 : int

logic lexer__token__col__position2 : int

axiom lexer__token__col__first__bit_axiom2 :
  (0 <= lexer__token__col__first__bit2)

axiom lexer__token__col__last__bit_axiom2 :
  (lexer__token__col__first__bit2 <  lexer__token__col__last__bit2)

axiom lexer__token__col__position_axiom2 :
  (0 <= lexer__token__col__position2)

logic lexer__token__length__first__bit2 : int

logic lexer__token__length__last__bit2 : int

logic lexer__token__length__position2 : int

axiom lexer__token__length__first__bit_axiom2 :
  (0 <= lexer__token__length__first__bit2)

axiom lexer__token__length__last__bit_axiom2 :
  (lexer__token__length__first__bit2 <  lexer__token__length__last__bit2)

axiom lexer__token__length__position_axiom2 :
  (0 <= lexer__token__length__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy15 : token_kind

logic dummy16 : natural

logic dummy17 : natural

logic dummy18 : natural

logic dummy19 : name_id

logic dummy20 : bool

type t23b__ref = { t23b__content : us_rep
}

function t23b__ref___projection(a: t23b__ref) : us_rep = (a).t23b__content

 (* File "lexer.adb", line 220, characters 0-0 *)
goal WP_parameter_def :
  (forall t__split_discrs:token_kind. forall first_line:int.
  forall first_col:int. forall o:token_kind. forall o1:natural.
  forall o2:natural. forall o3:natural. forall o4:natural. forall o5:natural.
  forall o6:natural. forall o7:name_id. forall o8:token_kind.
  forall temp___856:token_kind. forall temp___8561:natural.
  forall temp___8562:natural. forall temp___8563:natural.
  forall temp___8564:name_id. forall temp___8565:bool.
  (in_range1(first_line) -> (in_range1(first_col) -> (in_range3(kind) ->
  (((not (t__attr__constrained = true)) and ((kind = 1) or (kind = 2))) ->
  ((kind = 1) -> (((to_rep1(t__split_discrs) = r19b) and in_range3(r19b)) ->
  ((((to_rep(o1) = 1) and ((to_rep(o2) = first_col) and
  ((to_rep(o3) = first_line) and ((o3 = o4) and ((o2 = o5) and ((o1 = o6) and
  (dummy1 = o7))))))) and (((to_rep1(o) = 1) and (o = o8)) and
  ((temp___856 = o8) and (((temp___8561 = o4) and ((temp___8562 = o5) and
  ((temp___8563 = o6) and (temp___8564 = o7)))) and
  (true = temp___8565))))) -> ((t__attr__constrained = true) ->
  (temp___856 = t__split_discrs))))))))))
