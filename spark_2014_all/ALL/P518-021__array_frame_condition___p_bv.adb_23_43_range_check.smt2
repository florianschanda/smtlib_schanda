;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 16)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (bv2nat ((_ int2bv 16) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int2 ((_ BitVec 32)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 4294967296)) (= (bv2nat ((_ int2bv 32) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index1 index1) Bool)

(declare-fun dummy1 () index1)

(declare-datatypes ()
((index1__ref (mk_index1__ref (index1__content index1)))))
(define-fun index1__ref___projection ((a index1__ref)) index1 (index1__content
                                                              a))

(declare-sort index2 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(define-fun in_range3 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 1) x)
                                               (bvule x ((_ int2bv 16) 3))))

(define-fun in_range_int ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(define-fun bool_eq2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))

(declare-fun user_eq2 (index2 index2) Bool)

(declare-fun dummy2 () index2)

(declare-datatypes ()
((index2__ref (mk_index2__ref (index2__content index2)))))
(define-fun index2__ref___projection ((a index2__ref)) index2 (index2__content
                                                              a))

(declare-sort index3 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 32))

(define-fun in_range4 ((x (_ BitVec 32))) Bool (and
                                               (bvule ((_ int2bv 32) 1) x)
                                               (bvule x ((_ int2bv 32) 3))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(define-fun bool_eq3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (index3 index3) Bool)

(declare-fun dummy3 () index3)

(declare-datatypes ()
((index3__ref (mk_index3__ref (index3__content index3)))))
(define-fun index3__ref___projection ((a index3__ref)) index3 (index3__content
                                                              a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy4 () (Array Int integer))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int integer) (Array Int integer)) Bool)

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int (_ BitVec 16)) (Array Int integer))

(declare-fun set (map1 Int (_ BitVec 16) (Array Int integer)) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j (_ BitVec 16)))
  (forall ((a (Array Int integer)))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j (_ BitVec 16)) (j2 (_ BitVec 16)))
  (forall ((a (Array Int integer)))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int (_ BitVec 16) (_ BitVec 16)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 (_ BitVec 16)) (old_first_2 (_ BitVec 16)))
  (forall ((i Int))
  (forall ((j (_ BitVec 16)))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide1 a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq5 ((a map1) (a__first Int) (a__last Int)
  (a__first_2 (_ BitVec 16)) (a__last_2 (_ BitVec 16)) (b map1)
  (b__first Int) (b__last Int) (b__first_2 (_ BitVec 16))
  (b__last_2 (_ BitVec 16))) Bool (ite (and
                                       (and
                                       (ite (<= a__first a__last)
                                       (and (<= b__first b__last)
                                       (= (- a__last a__first) (- b__last b__first)))
                                       (< b__last b__first))
                                       (ite (bvule a__first_2 a__last_2)
                                       (and (bvule b__first_2 b__last_2)
                                       (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                       (bvugt b__first_2 b__last_2)))
                                       (forall ((temp___idx_133 Int))
                                       (forall
                                       ((temp___idx_134 (_ BitVec 16)))
                                       (=>
                                       (and
                                       (and (<= a__first temp___idx_133)
                                       (<= temp___idx_133 a__last))
                                       (and (bvule a__first_2 temp___idx_134)
                                       (bvule temp___idx_134 a__last_2)))
                                       (= (bool_eq4
                                          (get a temp___idx_133
                                          temp___idx_134) 1 3
                                          (get b
                                          (+ (- b__first a__first) temp___idx_133)
                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_134))
                                          1 3) true)))))
                                  true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (forall ((a__first_2 (_ BitVec 16)) (a__last_2 (_ BitVec 16))
  (b__first_2 (_ BitVec 16)) (b__last_2 (_ BitVec 16)))
  (=>
  (= (bool_eq5 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_133 Int))
  (forall ((temp___idx_134 (_ BitVec 16)))
  (=>
  (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (and (bvule a__first_2 temp___idx_134) (bvule temp___idx_134 a__last_2)))
  (= (bool_eq4 (get a temp___idx_133 temp___idx_134) 1 3
     (get b (+ (- b__first a__first) temp___idx_133)
     (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)) 1 3) true))))))))))

(declare-fun dummy5 () map1)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (map1) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 (map1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 (map1 map1) Bool)

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array (_ BitVec 32) map1))))))
(declare-fun slide2 ((Array (_ BitVec 32) map1) (_ BitVec 32)
  (_ BitVec 32)) (Array (_ BitVec 32) map1))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 32) map1)))
  (forall ((first (_ BitVec 32)))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 32) map1)))
  (forall ((old_first (_ BitVec 32)))
  (forall ((new_first (_ BitVec 32)))
  (forall ((i (_ BitVec 32)))
  (! (= (select (slide2 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 32) map1) (_ BitVec 32) (_ BitVec 32)
  (Array (_ BitVec 32) map1) (_ BitVec 32)
  (_ BitVec 32)) (Array (_ BitVec 32) map1))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 32) map1)) (b (Array (_ BitVec 32) map1)))
  (forall ((a_first (_ BitVec 32)) (a_last (_ BitVec 32))
  (b_first (_ BitVec 32)) (b_last (_ BitVec 32)))
  (forall ((i (_ BitVec 32)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x00000001)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (map1 (_ BitVec 32)) (Array (_ BitVec 32) map1))

;; singleton_def
  (assert
  (forall ((v map1))
  (forall ((i (_ BitVec 32)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array (_ BitVec 32) map1)) (a__first (_ BitVec 32))
  (a__last (_ BitVec 32)) (b (Array (_ BitVec 32) map1))
  (b__first (_ BitVec 32))
  (b__last (_ BitVec 32))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_135 (_ BitVec 32)))
                                     (=>
                                     (and (bvule a__first temp___idx_135)
                                     (bvule temp___idx_135 a__last))
                                     (= (bool_eq5 (select a temp___idx_135) 1
                                        3 ((_ int2bv 16) 1) ((_ int2bv 16) 3)
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_135))
                                        1 3 ((_ int2bv 16) 1)
                                        ((_ int2bv 16) 3)) true))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 32) map1)) (b (Array (_ BitVec 32) map1)))
  (forall ((a__first (_ BitVec 32)) (a__last (_ BitVec 32))
  (b__first (_ BitVec 32)) (b__last (_ BitVec 32)))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_135 (_ BitVec 32)))
  (=> (and (bvule a__first temp___idx_135) (bvule temp___idx_135 a__last))
  (= (bool_eq5 (select a temp___idx_135) 1 3 ((_ int2bv 16) 1)
     ((_ int2bv 16) 3)
     (select b (bvadd (bvsub b__first a__first) temp___idx_135)) 1 3
     ((_ int2bv 16) 1) ((_ int2bv 16) 3)) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun y () (Array (_ BitVec 32) map1))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-sort u32 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 32))

(define-fun bool_eq7 ((x (_ BitVec 32))
  (y1 (_ BitVec 32))) Bool (ite (= x y1) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 32))

(declare-fun user_eq6 (u32 u32) Bool)

(declare-fun dummy6 () u32)

(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))

(declare-fun to_rep1 (u32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) u32)

;; inversion_axiom
  (assert
  (forall ((x u32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x u32)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x u32)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 32))

(define-fun dynamic_property ((first_int (_ BitVec 32))
  (last_int (_ BitVec 32))
  (x (_ BitVec 32))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq8 ((x (_ BitVec 32))
  (y1 (_ BitVec 32))) Bool (ite (= x y1) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 32))

(declare-fun user_eq7 (u32 u32) Bool)

(declare-fun dummy7 () u32)

(declare-datatypes () ((t12b__ref (mk_t12b__ref (t12b__content u32)))))
(define-fun t12b__ref___projection ((a t12b__ref)) u32 (t12b__content a))

(declare-sort t 0)

(declare-fun first (t) u32)

(declare-fun last (t) u32)

(declare-fun mk ((_ BitVec 32) (_ BitVec 32)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 32)) (l (_ BitVec 32)))
  (! (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first (_ BitVec 32))
  (range_last (_ BitVec 32)) (low (_ BitVec 32))
  (high (_ BitVec 32))) Bool (=> (bvule low high)
                             (and (dynamic_property range_first range_last
                             low) (dynamic_property range_first range_last
                             high))))

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 32) map1))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 32) map1) (elts a))

(define-fun of_array ((a (Array (_ BitVec 32) map1)) (f (_ BitVec 32))
  (l (_ BitVec 32))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 32) (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 32) (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array (_ BitVec 32) map1)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array (_ BitVec 32) map1)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array (_ BitVec 32) map1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 32) map1)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq9 ((x us_t)
  (y1 us_t)) Bool (bool_eq6 (elts x) (to_rep1 (first (rt x)))
                  (to_rep1 (last (rt x))) (elts y1) (to_rep1 (first (rt y1)))
                  (to_rep1 (last (rt y1)))))

(declare-fun user_eq8 (us_t us_t) Bool)

(declare-fun dummy8 () us_t)

(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content us_t)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_t (t13b__content a))

(declare-fun attr__ATTRIBUTE_MODULUS4 () (_ BitVec 32))

(define-fun dynamic_property2 ((first_int (_ BitVec 32))
  (last_int (_ BitVec 32))
  (x (_ BitVec 32))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq10 ((x (_ BitVec 32))
  (y1 (_ BitVec 32))) Bool (ite (= x y1) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 32))

(declare-fun user_eq9 (u32 u32) Bool)

(declare-fun dummy9 () u32)

(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content u32)))))
(define-fun t14b__ref___projection ((a t14b__ref)) u32 (t14b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) u32)

(declare-fun last2 (t1) u32)

(declare-fun mk1 ((_ BitVec 32) (_ BitVec 32)) t1)

;; mk_def
  (assert
  (forall ((f (_ BitVec 32)) (l (_ BitVec 32)))
  (! (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)) :pattern ((mk1 f l)) )))

(define-fun dynamic_property3 ((range_first (_ BitVec 32))
  (range_last (_ BitVec 32)) (low (_ BitVec 32))
  (high (_ BitVec 32))) Bool (=> (bvule low high)
                             (and (dynamic_property2 range_first range_last
                             low) (dynamic_property2 range_first range_last
                             high))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array (_ BitVec 32) map1))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 32) map1) (elts1 a))

(define-fun of_array1 ((a (Array (_ BitVec 32) map1)) (f (_ BitVec 32))
  (l (_ BitVec 32))) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) (_ BitVec 32) (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) (_ BitVec 32) (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a))
                                    (+ (- (bv2nat (last3 a)) (bv2nat 
                                    (first3 a))) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array (_ BitVec 32) map1)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array (_ BitVec 32) map1)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array (_ BitVec 32) map1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 32) map1)))
  (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 32) map1))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq11 ((x us_t1)
  (y1 us_t1)) Bool (bool_eq6 (elts1 x) (to_rep1 (first2 (rt1 x)))
                   (to_rep1 (last2 (rt1 x))) (elts1 y1)
                   (to_rep1 (first2 (rt1 y1))) (to_rep1 (last2 (rt1 y1)))))

(declare-fun user_eq10 (us_t1 us_t1) Bool)

(declare-fun dummy10 () us_t1)

(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))

(declare-fun p_bv__x__aggregate_def (map1) (Array (_ BitVec 32) map1))

;; def_axiom
  (assert
  (forall ((temp___243 map1))
  (forall ((temp___244 (_ BitVec 32)))
  (= (select (p_bv__x__aggregate_def temp___243) temp___244) temp___243))))

(declare-fun temp___245 ((Array Int integer)) map1)

;; def_axiom
  (assert
  (forall ((temp___247 (Array Int integer)))
  (forall ((temp___248 Int))
  (forall ((temp___249 (_ BitVec 16)))
  (= (get (temp___245 temp___247) temp___248 temp___249) temp___247)))))

(declare-fun temp___250 (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___252 Int))
  (forall ((temp___253 Int))
  (= (select (temp___250 temp___252) temp___253) (of_rep temp___252)))))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_175 Int)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)) Bool (=>
                                      (or (= temp___is_init_172 true)
                                      (<= 1 3)) (in_range2 temp___expr_175)))

(define-fun dynamic_invariant2 ((temp___expr_187 (_ BitVec 32))
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_193 (_ BitVec 16))
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)) Bool (=>
                                      (or (= temp___is_init_190 true)
                                      (bvule ((_ int2bv 16) 1) ((_ int2bv 16) 3)))
                                      (in_range3 temp___expr_193)))

(define-fun dynamic_invariant4 ((temp___expr_199 (_ BitVec 32))
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)) Bool (=>
                                      (or (= temp___is_init_196 true)
                                      (bvule ((_ int2bv 32) 1) ((_ int2bv 32) 3)))
                                      (in_range4 temp___expr_199)))

(declare-fun x () (Array (_ BitVec 32) map1))

(declare-fun i3 () (_ BitVec 32))

(declare-fun temp___271 () (Array (_ BitVec 32) map1))

(declare-fun temp___264 () (Array (_ BitVec 32) map1))

(declare-fun temp___257 () (Array (_ BitVec 32) map1))

(declare-fun o () integer)

(declare-fun o1 () (Array Int integer))

(declare-fun o2 () map1)

(declare-fun o3 () (Array (_ BitVec 32) map1))

(declare-fun result () (Array (_ BitVec 32) map1))

(declare-fun x1 () (Array (_ BitVec 32) map1))

(declare-fun result1 () (_ BitVec 32))

(declare-fun i31 () (_ BitVec 32))

(declare-fun x2 () (Array (_ BitVec 32) map1))

(declare-fun i32 () (_ BitVec 32))

(declare-fun i21 () Int)

(declare-fun i22 () (_ BitVec 16))

(declare-fun i1 () Int)

(declare-fun result2 () Int)

(declare-fun i211 () Int)

(declare-fun x3 () (Array (_ BitVec 32) map1))

(declare-fun i212 () Int)

(declare-fun i221 () (_ BitVec 16))

(declare-fun i11 () Int)

(declare-fun result3 () (_ BitVec 16))

(declare-fun i222 () (_ BitVec 16))

(declare-fun x4 () (Array (_ BitVec 32) map1))

(declare-fun i223 () (_ BitVec 16))

(declare-fun i12 () Int)

(declare-fun result4 () Int)

(declare-fun i13 () Int)

(declare-fun x5 () (Array (_ BitVec 32) map1))

(declare-fun i14 () Int)

(declare-fun result5 () (Array (_ BitVec 32) map1))

(declare-fun x6 () (Array (_ BitVec 32) map1))

(declare-fun x7 () (Array (_ BitVec 32) map1))

(declare-fun i15 () Int)

(declare-fun x8 () (Array (_ BitVec 32) map1))

(declare-fun i16 () Int)

(declare-fun x9 () (Array (_ BitVec 32) map1))

(declare-fun i17 () Int)

(declare-fun x10 () (Array (_ BitVec 32) map1))

(declare-fun i18 () Int)

(declare-fun x11 () map__ref2)

(declare-fun i224 () t__ref)

(declare-fun i19 () int__ref)

(declare-fun x12 () (Array (_ BitVec 32) map1))

(declare-fun i225 () (_ BitVec 16))

(declare-fun i110 () Int)

(declare-fun x13 () map__ref2)

(declare-fun i226 () t__ref)

(declare-fun i111 () int__ref)

(declare-fun x14 () (Array (_ BitVec 32) map1))

(declare-fun i227 () (_ BitVec 16))

(declare-fun i112 () Int)

(declare-fun x15 () map__ref2)

(declare-fun i213 () int__ref)

(declare-fun i228 () t__ref)

(declare-fun i113 () int__ref)

(declare-fun x16 () (Array (_ BitVec 32) map1))

(declare-fun i214 () Int)

(declare-fun i229 () (_ BitVec 16))

(declare-fun i114 () Int)

(declare-fun x17 () map__ref2)

(declare-fun i215 () int__ref)

(declare-fun i2210 () t__ref)

(declare-fun i115 () int__ref)

(declare-fun x18 () (Array (_ BitVec 32) map1))

(declare-fun i216 () Int)

(declare-fun i2211 () (_ BitVec 16))

(declare-fun i116 () Int)

(define-fun i117 () int__ref (mk_int__ref i17))

(define-fun x19 () map__ref2 (mk_map__ref2 x9))

;; H
  (assert (= result x))

;; H
  (assert (= x1 (p_bv__x__aggregate_def (temp___245 (temp___250 0)))))

;; H
  (assert (= x1 y))

;; H
  (assert (= result1 i3))

;; H
  (assert (= i31 ((_ int2bv 32) 1)))

;; H
  (assert (bvule ((_ int2bv 32) 1) i31))

;; H
  (assert (bvule i31 ((_ int2bv 32) 3)))

;; H
  (assert
  (and
  (forall ((temp___291 (_ BitVec 32)))
  (=>
  (and (bvule ((_ int2bv 32) 1) temp___291)
  (bvule temp___291 ((_ int2bv 32) 3)))
  (=> (bvule i32 temp___291)
  (= (select x2 temp___291) (select x1 temp___291)))))
  (and (bvule ((_ int2bv 32) 1) i32) (bvule i32 ((_ int2bv 32) 3)))))

;; H
  (assert (= result2 i21))

;; H
  (assert (= i211 1))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= temp___271 x2)))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (and
  (forall ((temp___272 (_ BitVec 32)))
  (=>
  (and (bvule ((_ int2bv 32) 1) temp___272)
  (bvule temp___272 ((_ int2bv 32) 3)))
  (ite (not (= i32 temp___272))
  (= (select x3 temp___272) (select temp___271 temp___272))
  (forall ((temp___273 Int))
  (forall ((temp___274 (_ BitVec 16)))
  (=>
  (and (and (<= 1 temp___273) (<= temp___273 3))
  (and (bvule ((_ int2bv 16) 1) temp___274)
  (bvule temp___274 ((_ int2bv 16) 3))))
  (=> (<= i212 temp___273)
  (= (get (select x3 temp___272) temp___273 temp___274) (get
                                                        (select temp___271 temp___272)
                                                        temp___273
                                                        temp___274)))))))))
  (and (<= 1 i212) (<= i212 3)))))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= result3 i221)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i222 ((_ int2bv 16) 1))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= temp___264 x3))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (and
  (forall ((temp___265 (_ BitVec 32)))
  (=>
  (and (bvule ((_ int2bv 32) 1) temp___265)
  (bvule temp___265 ((_ int2bv 32) 3)))
  (ite (not (= i32 temp___265))
  (= (select x4 temp___265) (select temp___264 temp___265))
  (forall ((temp___266 Int))
  (forall ((temp___267 (_ BitVec 16)))
  (=>
  (and (and (<= 1 temp___266) (<= temp___266 3))
  (and (bvule ((_ int2bv 16) 1) temp___267)
  (bvule temp___267 ((_ int2bv 16) 3))))
  (=> (or (bvule i223 temp___267) (not (= i212 temp___266)))
  (= (get (select x4 temp___265) temp___266 temp___267) (get
                                                        (select temp___264 temp___265)
                                                        temp___266
                                                        temp___267)))))))))
  (and (bvule ((_ int2bv 16) 1) i223) (bvule i223 ((_ int2bv 16) 3)))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= result4 i12))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i13 1))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= temp___257 x4)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3))
  (and
  (forall ((temp___258 (_ BitVec 32)))
  (=>
  (and (bvule ((_ int2bv 32) 1) temp___258)
  (bvule temp___258 ((_ int2bv 32) 3)))
  (ite (not (= i32 temp___258))
  (= (select x5 temp___258) (select temp___257 temp___258))
  (forall ((temp___259 Int))
  (forall ((temp___260 (_ BitVec 16)))
  (=>
  (and (and (<= 1 temp___259) (<= temp___259 3))
  (and (bvule ((_ int2bv 16) 1) temp___260)
  (bvule temp___260 ((_ int2bv 16) 3))))
  (ite (or (not (= i223 temp___260)) (not (= i212 temp___259)))
  (= (get (select x5 temp___258) temp___259 temp___260) (get
                                                        (select temp___257 temp___258)
                                                        temp___259
                                                        temp___260))
  (forall ((temp___261 Int))
  (=> (and (<= 1 temp___261) (<= temp___261 3))
  (=> (<= i14 temp___261)
  (= (select (get (select x5 temp___258) temp___259 temp___260) temp___261) (select 
  (get (select temp___257 temp___258) temp___259 temp___260) temp___261))))))))))))
  (and (<= 1 i14) (<= i14 3)))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= (to_rep o) 1)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3))
  (= o1 (store (get (select x5 i32) i212 i223) i14 o))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= o2 (set (select x5 i32) i212 i223 o1))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= o3 (store x5 i32 o2))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= result5 x5)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= x6 o3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= i14 3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= i14 i15)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= x6 x7)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= i16 i14)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= x8 x6)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= i117 (mk_int__ref i15))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= x19 (mk_map__ref2 x7))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= i18 i16)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (and (<= 1 i13) (<= i13 3)) (= x10 x8)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= i13 i17)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= x4 x9)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= i18 i13)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= x10 x4)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i223 ((_ int2bv 16) 3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i19 i117))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i224 (mk_t__ref i223)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= x11 x19))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i110 i18))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i225 i223))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= x12 x10))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i111 i19))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i226 i224))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= x13 x11))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i112 i110))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= i227 i225))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3)))
  (= x14 x12))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=>
  (not (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3))))
  (= i111 (mk_int__ref i11)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=>
  (not (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3))))
  (= i226 (mk_t__ref i222)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=>
  (not (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3))))
  (= x13 (mk_map__ref2 x3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=>
  (not (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3))))
  (= i112 i11))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=>
  (not (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3))))
  (= i227 i222))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=>
  (not (and (bvule ((_ int2bv 16) 1) i222) (bvule i222 ((_ int2bv 16) 3))))
  (= x14 x3))))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i212 3)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i113 i111)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i228 i226)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i213 (mk_int__ref i212))))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x15 x13)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i114 i112)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i229 i227)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i214 i212)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x16 x14)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i115 i113)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i2210 i228)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i215 i213)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x17 x15)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i116 i114)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i2211 i229)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i216 i214)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x18 x16)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i115 (mk_int__ref i1))))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i2210 (mk_t__ref i22))))

;; H
  (assert
  (=> (not (and (<= 1 i211) (<= i211 3))) (= i215 (mk_int__ref i211))))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= x17 (mk_map__ref2 x2))))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i116 i1)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i2211 i22)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i216 i211)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= x18 x2)))

;; H
  (assert (bvule (bvadd i32 ((_ int2bv 32) 1)) ((_ int2bv 32) 3)))

(assert
;; WP_parameter_def
 ;; File "p_bv.adb", line 1, characters 0-0
  (not (bvule ((_ int2bv 32) 1) (bvadd i32 ((_ int2bv 32) 1)))))
(check-sat)
