(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type instruction

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : instruction, instruction -> bool

logic dummy : instruction

type instruction__ref = { instruction__content : instruction
}

function instruction__ref___projection(a: instruction__ref) : instruction =
  (a).instruction__content

logic to_rep : instruction -> int

logic of_rep : int -> instruction

axiom inversion_axiom :
  (forall x:instruction [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:instruction [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type tlastS

predicate in_range2(x: int) = ((0 <= x) and (x <= 200))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tlastS, tlastS -> bool

logic dummy1 : tlastS

type tlastS__ref = { tlastS__content : tlastS
}

function tlastS__ref___projection(a: tlastS__ref) : tlastS =
  (a).tlastS__content

type integer

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__types__value__e : integer
}

function us_split_fields_E__projection(a: us_split_fields) : integer =
  (a).rec__types__value__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((to_rep1(((a).us_split_fields1).rec__types__value__e) = to_rep1(((b).us_split_fields1).rec__types__value__e)) ->
  (bool_eq5(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields1).rec__types__value__e) = to_rep1(((b).us_split_fields1).rec__types__value__e))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. (0 <= object__size({ us_split_fields1 = {
  rec__types__value__e = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. (0 <= object__alignment({ us_split_fields1 = {
  rec__types__value__e = a } })))

logic types__value__e__first__bit : int

logic types__value__e__last__bit : int

logic types__value__e__position : int

axiom types__value__e__first__bit_axiom : (0 <= types__value__e__first__bit)

axiom types__value__e__last__bit_axiom :
  (types__value__e__first__bit <  types__value__e__last__bit)

axiom types__value__e__position_axiom : (0 <= types__value__e__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : integer

type value__ref = { value__content : us_rep
}

function value__ref___projection(a: value__ref) : us_rep = (a).value__content

logic size : int -> int

logic size__function_guard : int, int -> prop

axiom size__post_axiom :
  (forall stack__last:int [size(stack__last)]. (in_range2(stack__last) ->
  in_range3(size(stack__last))))

axiom size__def_axiom :
  (forall stack__last:int [size(stack__last)]. (in_range2(stack__last) ->
  (size(stack__last) = stack__last)))

logic full : int -> bool

logic full__function_guard : bool, int -> prop

axiom full__post_axiom : true

axiom full__def_axiom :
  (forall stack__last:int [full(stack__last)].
  ((full(stack__last) = true) <-> (200 <= stack__last)))

type operation

predicate in_range4(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : operation, operation -> bool

logic dummy4 : operation

type operation__ref = { operation__content : operation
}

function operation__ref___projection(a: operation__ref) : operation =
  (a).operation__content

logic to_rep2 : operation -> int

logic of_rep2 : int -> operation

axiom inversion_axiom2 :
  (forall x:operation [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:operation [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type token_kind

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : token_kind, token_kind -> bool

logic dummy5 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref___projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep3 : token_kind -> int

logic of_rep3 : int -> token_kind

axiom inversion_axiom3 :
  (forall x:token_kind [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:token_kind [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_discrs = { rec__tokens__token__kind : token_kind
}

function us_split_discrs___projection(a: us_split_discrs) : token_kind =
  (a).rec__tokens__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__tokens__token__val : us_rep;
rec__tokens__token__op : operation; rec__tokens__token__instr : instruction
}

function us_split_fields_Val__projection(a: us_split_fields2) : us_rep =
  (a).rec__tokens__token__val

function us_split_fields_Op__projection(a: us_split_fields2) : operation =
  (a).rec__tokens__token__op

function us_split_fields_Instr__projection(a: us_split_fields2) : instruction =
  (a).rec__tokens__token__instr

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__constrained : bool
}

function us_rep_2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_4__projection(a: us_rep1) : bool = (a).attr__constrained

predicate tokens__token__val__pred(a: us_rep1) =
  (to_rep3(((a).us_split_discrs1).rec__tokens__token__kind) = 0)

predicate tokens__token__op__pred(a: us_rep1) =
  (to_rep3(((a).us_split_discrs1).rec__tokens__token__kind) = 1)

predicate tokens__token__instr__pred(a: us_rep1) =
  (to_rep3(((a).us_split_discrs1).rec__tokens__token__kind) = 2)

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((((to_rep3(((a).us_split_discrs1).rec__tokens__token__kind) = to_rep3(((b).us_split_discrs1).rec__tokens__token__kind)) and
  (tokens__token__val__pred(a) ->
  (bool_eq5(((a).us_split_fields3).rec__tokens__token__val,
  ((b).us_split_fields3).rec__tokens__token__val) = true))) and
  (tokens__token__op__pred(a) ->
  (to_rep2(((a).us_split_fields3).rec__tokens__token__op) = to_rep2(((b).us_split_fields3).rec__tokens__token__op)))) and
  (tokens__token__instr__pred(a) ->
  (to_rep(((a).us_split_fields3).rec__tokens__token__instr) = to_rep(((b).us_split_fields3).rec__tokens__token__instr)))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((((to_rep3(((a).us_split_discrs1).rec__tokens__token__kind) = to_rep3(((b).us_split_discrs1).rec__tokens__token__kind)) and
  (tokens__token__val__pred(a) ->
  (bool_eq5(((a).us_split_fields3).rec__tokens__token__val,
  ((b).us_split_fields3).rec__tokens__token__val) = true))) and
  (tokens__token__op__pred(a) ->
  (to_rep2(((a).us_split_fields3).rec__tokens__token__op) = to_rep2(((b).us_split_fields3).rec__tokens__token__op)))) and
  (tokens__token__instr__pred(a) ->
  (to_rep(((a).us_split_fields3).rec__tokens__token__instr) = to_rep(((b).us_split_fields3).rec__tokens__token__instr))))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:token_kind. forall a1:integer. forall a2:operation.
  forall a3:instruction. forall a4:bool. (0 <= object__alignment1({
  us_split_discrs1 = { rec__tokens__token__kind = a }; us_split_fields3 = {
  rec__tokens__token__val = { us_split_fields1 = { rec__types__value__e = a1
  } }; rec__tokens__token__op = a2; rec__tokens__token__instr = a3 };
  attr__constrained = a4 })))

logic tokens__token__kind__first__bit : int

logic tokens__token__kind__last__bit : int

logic tokens__token__kind__position : int

axiom tokens__token__kind__first__bit_axiom :
  (0 <= tokens__token__kind__first__bit)

axiom tokens__token__kind__last__bit_axiom :
  (tokens__token__kind__first__bit <  tokens__token__kind__last__bit)

axiom tokens__token__kind__position_axiom :
  (0 <= tokens__token__kind__position)

logic tokens__token__val__first__bit : int

logic tokens__token__val__last__bit : int

logic tokens__token__val__position : int

axiom tokens__token__val__first__bit_axiom :
  (0 <= tokens__token__val__first__bit)

axiom tokens__token__val__last__bit_axiom :
  (tokens__token__val__first__bit <  tokens__token__val__last__bit)

axiom tokens__token__val__position_axiom :
  (0 <= tokens__token__val__position)

logic tokens__token__op__first__bit : int

logic tokens__token__op__last__bit : int

logic tokens__token__op__position : int

axiom tokens__token__op__first__bit_axiom :
  (0 <= tokens__token__op__first__bit)

axiom tokens__token__op__last__bit_axiom :
  (tokens__token__op__first__bit <  tokens__token__op__last__bit)

axiom tokens__token__op__position_axiom : (0 <= tokens__token__op__position)

logic tokens__token__instr__first__bit : int

logic tokens__token__instr__last__bit : int

logic tokens__token__instr__position : int

axiom tokens__token__instr__first__bit_axiom :
  (0 <= tokens__token__instr__first__bit)

axiom tokens__token__instr__last__bit_axiom :
  (tokens__token__instr__first__bit <  tokens__token__instr__last__bit)

axiom tokens__token__instr__position_axiom :
  (0 <= tokens__token__instr__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : token_kind

logic dummy7 : integer

logic dummy8 : operation

logic dummy9 : instruction

logic dummy10 : bool

type token__ref = { token__content : us_rep1
}

function token__ref___projection(a: token__ref) : us_rep1 =
  (a).token__content

logic t : token_kind

logic t1 : integer

logic t2 : operation

logic t3 : instruction

logic t4 : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "tokens.adb", line 13, characters 0-0 *)
goal WP_parameter_def :
  (forall last:int. forall us:int. (in_range2(last) -> (((to_rep3(t) = 0) ->
  ((not (full(last) = true)) and ((to_rep3(t) = 1) -> (2 <= size(last))))) ->
  (((us = to_rep3(t)) and in_range5(to_rep3(t))) ->
  ((not (to_rep3(t) = 0)) -> ((not (to_rep3(t) = 1)) ->
  (to_rep3(t) = 2)))))))
