(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__union_init__basic_record__length : integer;
rec__union_init__basic_record__basic_array : (int,integer) farray
}

function us_split_fields_length__projection(a: us_split_fields) : integer =
  (a).rec__union_init__basic_record__length

function us_split_fields_basic_array__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__union_init__basic_record__basic_array

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__union_init__basic_record__length) = to_rep(((b).us_split_fields1).rec__union_init__basic_record__length)) and
  (bool_eq3(((a).us_split_fields1).rec__union_init__basic_record__basic_array,
  0, 2, ((b).us_split_fields1).rec__union_init__basic_record__basic_array, 0,
  2) = true)) -> (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__union_init__basic_record__length) = to_rep(((b).us_split_fields1).rec__union_init__basic_record__length)) and
  (bool_eq3(((a).us_split_fields1).rec__union_init__basic_record__basic_array,
  0, 2, ((b).us_split_fields1).rec__union_init__basic_record__basic_array, 0,
  2) = true))) -> (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:(int,integer) farray. (0 <= object__size1({
  us_split_fields1 = { rec__union_init__basic_record__length = a;
  rec__union_init__basic_record__basic_array = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:(int,integer) farray.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__union_init__basic_record__length = a;
  rec__union_init__basic_record__basic_array = a1 } })))

logic union_init__basic_record__length__first__bit : int

logic union_init__basic_record__length__last__bit : int

logic union_init__basic_record__length__position : int

axiom union_init__basic_record__length__first__bit_axiom :
  (0 <= union_init__basic_record__length__first__bit)

axiom union_init__basic_record__length__last__bit_axiom :
  (union_init__basic_record__length__first__bit <  union_init__basic_record__length__last__bit)

axiom union_init__basic_record__length__position_axiom :
  (0 <= union_init__basic_record__length__position)

logic union_init__basic_record__basic_array__first__bit : int

logic union_init__basic_record__basic_array__last__bit : int

logic union_init__basic_record__basic_array__position : int

axiom union_init__basic_record__basic_array__first__bit_axiom :
  (0 <= union_init__basic_record__basic_array__first__bit)

axiom union_init__basic_record__basic_array__last__bit_axiom :
  (union_init__basic_record__basic_array__first__bit <  union_init__basic_record__basic_array__last__bit)

axiom union_init__basic_record__basic_array__position_axiom :
  (0 <= union_init__basic_record__basic_array__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : integer

logic dummy4 : (int,integer) farray

type basic_record__ref = { basic_record__content : us_rep
}

function basic_record__ref___projection(a: basic_record__ref) : us_rep =
  (a).basic_record__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__union_init__union_test__discr : integer
}

function us_split_discrs___projection(a: us_split_discrs) : integer =
  (a).rec__union_init__union_test__discr

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__union_init__union_test__field1 : integer;
rec__union_init__union_test__field2 : us_rep;
rec__union_init__union_test__field3 : natural
}

function us_split_fields_field1__projection(a: us_split_fields2) : integer =
  (a).rec__union_init__union_test__field1

function us_split_fields_field2__projection(a: us_split_fields2) : us_rep =
  (a).rec__union_init__union_test__field2

function us_split_fields_field3__projection(a: us_split_fields2) : natural =
  (a).rec__union_init__union_test__field3

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__constrained : bool
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : bool = (a).attr__constrained

predicate union_init__union_test__field1__pred(a: us_rep1) =
  (to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr) = 0)

predicate union_init__union_test__field2__pred(a: us_rep1) =
  (to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr) = 1)

predicate union_init__union_test__field3__pred(a: us_rep1) =
  ((not (to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr) = 0)) and
  (not (to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr) = 1)))

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  ((((((to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr) = to_rep(((b).us_split_discrs1).rec__union_init__union_test__discr)) and
  (union_init__union_test__field1__pred(a) ->
  (to_rep(((a).us_split_fields3).rec__union_init__union_test__field1) = to_rep(((b).us_split_fields3).rec__union_init__union_test__field1)))) and
  (union_init__union_test__field2__pred(a) ->
  (bool_eq4(((a).us_split_fields3).rec__union_init__union_test__field2,
  ((b).us_split_fields3).rec__union_init__union_test__field2) = true))) and
  (union_init__union_test__field3__pred(a) ->
  (to_rep1(((a).us_split_fields3).rec__union_init__union_test__field3) = to_rep1(((b).us_split_fields3).rec__union_init__union_test__field3)))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr) = to_rep(((b).us_split_discrs1).rec__union_init__union_test__discr)) and
  (union_init__union_test__field1__pred(a) ->
  (to_rep(((a).us_split_fields3).rec__union_init__union_test__field1) = to_rep(((b).us_split_fields3).rec__union_init__union_test__field1)))) and
  (union_init__union_test__field2__pred(a) ->
  (bool_eq4(((a).us_split_fields3).rec__union_init__union_test__field2,
  ((b).us_split_fields3).rec__union_init__union_test__field2) = true))) and
  (union_init__union_test__field3__pred(a) ->
  (to_rep1(((a).us_split_fields3).rec__union_init__union_test__field3) = to_rep1(((b).us_split_fields3).rec__union_init__union_test__field3))))) ->
  (bool_eq5(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. forall a1:integer. forall a2:integer.
  forall a3:(int,integer) farray. forall a4:natural. forall a5:bool.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__union_init__union_test__discr = a }; us_split_fields3 = {
  rec__union_init__union_test__field1 = a1;
  rec__union_init__union_test__field2 = { us_split_fields1 = {
  rec__union_init__basic_record__length = a2;
  rec__union_init__basic_record__basic_array = a3 } };
  rec__union_init__union_test__field3 = a4 }; attr__constrained = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. forall a1:integer. forall a2:integer.
  forall a3:(int,integer) farray. forall a4:natural. forall a5:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__union_init__union_test__discr = a }; us_split_fields3 = {
  rec__union_init__union_test__field1 = a1;
  rec__union_init__union_test__field2 = { us_split_fields1 = {
  rec__union_init__basic_record__length = a2;
  rec__union_init__basic_record__basic_array = a3 } };
  rec__union_init__union_test__field3 = a4 }; attr__constrained = a5 })))

logic union_init__union_test__discr__first__bit : int

logic union_init__union_test__discr__last__bit : int

logic union_init__union_test__discr__position : int

axiom union_init__union_test__discr__first__bit_axiom :
  (0 <= union_init__union_test__discr__first__bit)

axiom union_init__union_test__discr__last__bit_axiom :
  (union_init__union_test__discr__first__bit <  union_init__union_test__discr__last__bit)

axiom union_init__union_test__discr__position_axiom :
  (0 <= union_init__union_test__discr__position)

logic union_init__union_test__field1__first__bit : int

logic union_init__union_test__field1__last__bit : int

logic union_init__union_test__field1__position : int

axiom union_init__union_test__field1__first__bit_axiom :
  (0 <= union_init__union_test__field1__first__bit)

axiom union_init__union_test__field1__last__bit_axiom :
  (union_init__union_test__field1__first__bit <  union_init__union_test__field1__last__bit)

axiom union_init__union_test__field1__position_axiom :
  (0 <= union_init__union_test__field1__position)

logic union_init__union_test__field2__first__bit : int

logic union_init__union_test__field2__last__bit : int

logic union_init__union_test__field2__position : int

axiom union_init__union_test__field2__first__bit_axiom :
  (0 <= union_init__union_test__field2__first__bit)

axiom union_init__union_test__field2__last__bit_axiom :
  (union_init__union_test__field2__first__bit <  union_init__union_test__field2__last__bit)

axiom union_init__union_test__field2__position_axiom :
  (0 <= union_init__union_test__field2__position)

logic union_init__union_test__field3__first__bit : int

logic union_init__union_test__field3__last__bit : int

logic union_init__union_test__field3__position : int

axiom union_init__union_test__field3__first__bit_axiom :
  (0 <= union_init__union_test__field3__first__bit)

axiom union_init__union_test__field3__last__bit_axiom :
  (union_init__union_test__field3__first__bit <  union_init__union_test__field3__last__bit)

axiom union_init__union_test__field3__position_axiom :
  (0 <= union_init__union_test__field3__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : integer

logic dummy6 : integer

logic dummy7 : integer

logic dummy8 : (int,integer) farray

logic dummy9 : natural

logic dummy10 : bool

type union_test__ref = { union_test__content : us_rep1
}

function union_test__ref___projection(a: union_test__ref) : us_rep1 =
  (a).union_test__content

logic temp___149 : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___151:int.
  (forall temp___152:int.
  ((temp___149(temp___151)[temp___152]) = of_rep(temp___151))))

logic test__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic r2b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range2(rec__union_init__union_test__discr1: int, a: us_rep1) =
  (rec__union_init__union_test__discr1 = to_rep(((a).us_split_discrs1).rec__union_init__union_test__discr))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:integer. forall a1:integer. forall a2:integer.
  forall a3:(int,integer) farray. forall a4:natural. forall a5:bool.
  (0 <= object__size3({ us_split_discrs1 = {
  rec__union_init__union_test__discr = a }; us_split_fields3 = {
  rec__union_init__union_test__field1 = a1;
  rec__union_init__union_test__field2 = { us_split_fields1 = {
  rec__union_init__basic_record__length = a2;
  rec__union_init__basic_record__basic_array = a3 } };
  rec__union_init__union_test__field3 = a4 }; attr__constrained = a5 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:integer. forall a1:integer. forall a2:integer.
  forall a3:(int,integer) farray. forall a4:natural. forall a5:bool.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__union_init__union_test__discr = a }; us_split_fields3 = {
  rec__union_init__union_test__field1 = a1;
  rec__union_init__union_test__field2 = { us_split_fields1 = {
  rec__union_init__basic_record__length = a2;
  rec__union_init__basic_record__basic_array = a3 } };
  rec__union_init__union_test__field3 = a4 }; attr__constrained = a5 })))

logic union_init__union_test__discr__first__bit1 : int

logic union_init__union_test__discr__last__bit1 : int

logic union_init__union_test__discr__position1 : int

axiom union_init__union_test__discr__first__bit_axiom1 :
  (0 <= union_init__union_test__discr__first__bit1)

axiom union_init__union_test__discr__last__bit_axiom1 :
  (union_init__union_test__discr__first__bit1 <  union_init__union_test__discr__last__bit1)

axiom union_init__union_test__discr__position_axiom1 :
  (0 <= union_init__union_test__discr__position1)

logic union_init__union_test__field1__first__bit1 : int

logic union_init__union_test__field1__last__bit1 : int

logic union_init__union_test__field1__position1 : int

axiom union_init__union_test__field1__first__bit_axiom1 :
  (0 <= union_init__union_test__field1__first__bit1)

axiom union_init__union_test__field1__last__bit_axiom1 :
  (union_init__union_test__field1__first__bit1 <  union_init__union_test__field1__last__bit1)

axiom union_init__union_test__field1__position_axiom1 :
  (0 <= union_init__union_test__field1__position1)

logic union_init__union_test__field3__first__bit1 : int

logic union_init__union_test__field3__last__bit1 : int

logic union_init__union_test__field3__position1 : int

axiom union_init__union_test__field3__first__bit_axiom1 :
  (0 <= union_init__union_test__field3__first__bit1)

axiom union_init__union_test__field3__last__bit_axiom1 :
  (union_init__union_test__field3__first__bit1 <  union_init__union_test__field3__last__bit1)

axiom union_init__union_test__field3__position_axiom1 :
  (0 <= union_init__union_test__field3__position1)

logic union_init__union_test__field2__first__bit1 : int

logic union_init__union_test__field2__last__bit1 : int

logic union_init__union_test__field2__position1 : int

axiom union_init__union_test__field2__first__bit_axiom1 :
  (0 <= union_init__union_test__field2__first__bit1)

axiom union_init__union_test__field2__last__bit_axiom1 :
  (union_init__union_test__field2__first__bit1 <  union_init__union_test__field2__last__bit1)

axiom union_init__union_test__field2__position_axiom1 :
  (0 <= union_init__union_test__field2__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy11 : integer

logic dummy12 : integer

logic dummy13 : integer

logic dummy14 : (int,integer) farray

logic dummy15 : natural

logic dummy16 : bool

type t3b__ref = { t3b__content : us_rep1
}

function t3b__ref___projection(a: t3b__ref) : us_rep1 = (a).t3b__content

 (* File "union_init.ads", line 23, characters 0-0 *)
goal WP_parameter_def :
  (forall test__split_discrs:integer. forall o:integer. forall o1:integer.
  forall o2:(int,integer) farray. forall o3:integer.
  forall temp___166:integer. forall temp___1661:integer.
  forall temp___1662:integer. forall temp___1663:(int,integer) farray.
  forall temp___1664:natural. forall temp___1665:bool.
  (((to_rep(test__split_discrs) = r2b) and in_range(r2b)) ->
  ((((to_rep(o) = 1) and (o = o3)) and ((temp___166 = o3) and
  (((dummy = temp___1661) and (((o1 = temp___1662) and
  (o2 = temp___1663)) and (dummy1 = temp___1664))) and
  (true = temp___1665)))) -> ((test__attr__constrained = true) ->
  (temp___166 = test__split_discrs)))))
