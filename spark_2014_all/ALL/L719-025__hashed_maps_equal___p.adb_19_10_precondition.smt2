;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort element_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (element_type element_type) Bool)

(declare-const dummy1 element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant ((temp___expr_319 Int)
  (temp___is_init_316 Bool) (temp___skip_constant_317 Bool)
  (temp___do_toplevel_318 Bool)) Bool (=>
                                      (or (= temp___is_init_316 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_319)))

(declare-sort key_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (key_type key_type) Bool)

(declare-const dummy2 key_type)

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___projection ((a key_type__ref)) key_type (key_type__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_325 Int)
  (temp___is_init_322 Bool) (temp___skip_constant_323 Bool)
  (temp___do_toplevel_324 Bool)) Bool (=>
                                      (or (= temp___is_init_322 true)
                                      (<= 1 100)) (in_range3
                                      temp___expr_325)))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (hash_type hash_type) Bool)

(declare-const dummy3 hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(declare-fun to_rep1 (hash_type) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x hash_type)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__p__my_maps__map__capacity count_type)(rec__p__my_maps__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__p__my_maps__map__capacity a))

(define-fun us_split_discrs___2__projection ((a us_split_discrs)) hash_type
  (rec__p__my_maps__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__p__my_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__p__my_maps__map a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__p__my_maps__map__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__p__my_maps__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__p__my_maps__map__modulus
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__p__my_maps__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__p__my_maps__map (us_split_fields1 a))
                           (rec__p__my_maps__map (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const p__my_maps__map__capacity__first__bit Int)

(declare-const p__my_maps__map__capacity__last__bit Int)

(declare-const p__my_maps__map__capacity__position Int)

;; p__my_maps__map__capacity__first__bit_axiom
  (assert (<= 0 p__my_maps__map__capacity__first__bit))

;; p__my_maps__map__capacity__last__bit_axiom
  (assert
  (< p__my_maps__map__capacity__first__bit p__my_maps__map__capacity__last__bit))

;; p__my_maps__map__capacity__position_axiom
  (assert (<= 0 p__my_maps__map__capacity__position))

(declare-const p__my_maps__map__modulus__first__bit Int)

(declare-const p__my_maps__map__modulus__last__bit Int)

(declare-const p__my_maps__map__modulus__position Int)

;; p__my_maps__map__modulus__first__bit_axiom
  (assert (<= 0 p__my_maps__map__modulus__first__bit))

;; p__my_maps__map__modulus__last__bit_axiom
  (assert
  (< p__my_maps__map__modulus__first__bit p__my_maps__map__modulus__last__bit))

;; p__my_maps__map__modulus__position_axiom
  (assert (<= 0 p__my_maps__map__modulus__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_173 Int)
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool)) Bool (=>
                                      (or (= temp___is_init_170 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_173)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__p__my_maps__map__capacity (us_split_discrs1 container))))
     (dynamic_invariant2 result true false true))) :pattern ((length
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant2
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep1)))))
(define-fun map__ref___2__projection ((a map__ref1)) us_rep1 (map__content1
                                                             a))

(declare-fun has_key (us_rep1 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep1 Int) Bool)

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

(define-fun contains ((container us_rep)
  (key Int)) Bool (has_key (model__ container) key))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun contains1 (Int us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)

(declare-sort key_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (key_type1 key_type1) Bool)

(declare-const dummy6 key_type1)

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 key_type1)))))
(define-fun key_type__ref___2__projection ((a key_type__ref1)) key_type1
  (key_type__content1 a))

(define-fun dynamic_invariant3 ((temp___expr_331 Int)
  (temp___is_init_328 Bool) (temp___skip_constant_329 Bool)
  (temp___do_toplevel_330 Bool)) Bool (=>
                                      (or (= temp___is_init_328 true)
                                      (<= 1 100)) (in_range4
                                      temp___expr_331)))

;; contains__post__dispatch_axiom
  (assert true)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__p__my_maps__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__p__my_maps__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep
                            (rec__p__my_maps__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__p__my_maps__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const p__my_maps__cursor__node__first__bit Int)

(declare-const p__my_maps__cursor__node__last__bit Int)

(declare-const p__my_maps__cursor__node__position Int)

;; p__my_maps__cursor__node__first__bit_axiom
  (assert (<= 0 p__my_maps__cursor__node__first__bit))

;; p__my_maps__cursor__node__last__bit_axiom
  (assert
  (< p__my_maps__cursor__node__first__bit p__my_maps__cursor__node__last__bit))

;; p__my_maps__cursor__node__position_axiom
  (assert (<= 0 p__my_maps__cursor__node__position))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep2 (cursor__content
                                                               a))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-fun ole (us_rep1 us_rep1) Bool)

(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun keys_included_except (us_rep1 us_rep1 Int) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep1 us_rep1
  Int) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq8 (us_rep3 us_rep3) Bool)

(declare-const dummy8 us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-const dummy9 us_rep4)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep4 (map__content2
                                                             a))

(declare-datatypes ()
((key_type__ref2 (mk_key_type__ref2 (key_type__content2 us_rep2)))))
(define-fun key_type__ref___4__projection ((a key_type__ref2)) us_rep2
  (key_type__content2 a))

(declare-fun keys_included_except1 (us_rep4 us_rep4 us_rep2) Bool)

(declare-fun keys_included_except__function_guard1 (Bool us_rep4 us_rep4
  us_rep2) Bool)

(declare-fun mapping_preserved (us_rep3 us_rep3 us_rep4 us_rep4) Bool)

(declare-fun mapping_preserved__function_guard (Bool us_rep3 us_rep3 us_rep4
  us_rep4) Bool)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-fun positions (us_rep) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep) Bool)

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun get2 (us_rep4 us_rep2) Int)

(declare-fun get__function_guard2 (Int us_rep4 us_rep2) Bool)

(define-fun key ((container us_rep)
  (position us_rep2)) Int (get1 (keys container)
                          (get2 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep2) Bool)

(declare-fun key1 (Int us_rep us_rep2) Int)

(declare-fun key__function_guard1 (Int Int us_rep us_rep2) Bool)

(declare-fun find (us_rep Int) us_rep2)

(declare-fun find__function_guard (us_rep2 us_rep Int) Bool)

(declare-fun find1 (Int us_rep Int) us_rep2)

(declare-fun find__function_guard1 (us_rep2 Int us_rep Int) Bool)

(declare-fun insert__2__specific_post (Int us_split_fields us_split_discrs
  Int Int us_split_fields) Bool)

(define-fun element__2 ((container us_rep)
  (key2 Int)) Int (get (model__ container) key2))

(declare-fun element__2__function_guard (Int us_rep Int) Bool)

(declare-fun element__21 (Int us_rep Int) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (element_type1 element_type1) Bool)

(declare-const dummy10 element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_337 Int)
  (temp___is_init_334 Bool) (temp___skip_constant_335 Bool)
  (temp___do_toplevel_336 Bool)) Bool (=>
                                      (or (= temp___is_init_334 true)
                                      (<= 1 100)) (in_range5
                                      temp___expr_337)))

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (key2 Int))
  (forall ((container us_rep))
  (! (=> (dynamic_invariant3 key2 true true true) (dynamic_invariant4
     (element__21 attr__tag container key2) true false true)) :pattern (
  (element__21 attr__tag container key2)) ))))

(declare-fun keys_included (us_rep1 us_rep1) Bool)

(declare-fun keys_included__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun same_keys ((left us_rep1)
  (right us_rep1)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun elements_equal_except (us_rep1 us_rep1 Int) Bool)

(declare-fun elements_equal_except__function_guard (Bool us_rep1 us_rep1
  Int) Bool)

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (get1
                                                                    left i)
                                                                    (get1
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(declare-fun oeq2 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep4 us_rep4) Bool)

(declare-fun replace__specific_post (Int us_split_fields us_split_discrs Int
  Int us_split_fields) Bool)

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun my_eq (Int Int) Bool)

(declare-fun my_eq__function_guard (Bool Int Int) Bool)

;; my_eq__post_axiom
  (assert true)

;; my_eq__def_axiom
  (assert
  (forall ((i1 Int) (i2 Int))
  (! (= (= (my_eq i1 i2) true) (= i1 i2)) :pattern ((my_eq i1 i2)) )))

(define-fun dynamic_invariant5 ((temp___expr_167 (_ BitVec 32))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool true)

(declare-const no_element us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

(define-fun oeq3 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length2 left) (length2 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get1 left
                                                                   n)
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq8 a b) (oeq3 a b)) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption ((temp___expr_410 us_rep3)
  (temp___skip_top_level_411 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_411 true))
                                         (= (length2 temp___expr_410) 0)))

(declare-fun find2 (us_rep3 Int) Int)

(declare-fun find__function_guard2 (Int us_rep3 Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (find2 container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length2 container))
     (= (my_eq key2 (get1 container result)) true))) (dynamic_invariant2
     result true false true)))) :pattern ((find2 container key2)) ))))

(declare-fun k_keys_included (us_rep3 us_rep3) Bool)

(declare-fun k_keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

;; k_keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (k_keys_included left right) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length2 left)))
     (and (< 0 (find2 right (get1 left i)))
     (= (get1 right (find2 right (get1 left i))) (get1 left i)))))) :pattern (
  (k_keys_included left right)) )))

(declare-fun length3 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun is_empty (us_rep4) Bool)

(declare-fun is_empty__function_guard (Bool us_rep4) Bool)

(define-fun default_initial_assumption1 ((temp___expr_430 us_rep4)
  (temp___skip_top_level_431 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_431 true))
                                         (and
                                         (= (is_empty temp___expr_430) true)
                                         (= (length3 temp___expr_430) 0))))

(declare-fun has_key1 (us_rep4 us_rep2) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep2) Bool)

(declare-fun keys_included1 (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard1 (Bool us_rep4 us_rep4) Bool)

;; mapping_preserved__post_axiom
  (assert
  (forall ((k_left us_rep3) (k_right us_rep3))
  (forall ((p_left us_rep4) (p_right us_rep4))
  (! (=> (= (mapping_preserved k_left k_right p_left p_right) true)
     (and
     (and (= (keys_included1 p_left p_right) true)
     (= (k_keys_included k_left k_right) true))
     (forall ((c us_rep2))
     (=> (= (has_key1 p_left c) true)
     (= (get1 k_left (get2 p_left c)) (get1 k_right (get2 p_right c))))))) :pattern (
  (mapping_preserved k_left k_right p_left p_right)) ))))

(declare-fun length4 (us_rep1) Int)

(declare-fun length__function_guard4 (Int us_rep1) Bool)

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

(define-fun default_initial_assumption2 ((temp___expr_379 us_rep1)
  (temp___skip_top_level_380 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_380 true))
                                         (and
                                         (= (is_empty1 temp___expr_379) true)
                                         (= (length4 temp___expr_379) 0))))

;; model____post_axiom
  (assert true)

(declare-sort key_type2 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (key_type2 key_type2) Bool)

(declare-const dummy11 key_type2)

(declare-datatypes ()
((key_type__ref3 (mk_key_type__ref3 (key_type__content3 key_type2)))))
(define-fun key_type__ref___3__projection ((a key_type__ref3)) key_type2
  (key_type__content3 a))

(declare-sort extended_index 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (extended_index extended_index) Bool)

(declare-const dummy12 extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and
     (and (= (length2 result) (length container))
     (forall ((temp___447 Int))
     (=>
     (and (in_range7 temp___447)
     (= (iter_has_element result temp___447) true))
     (= (has_key (model__ container) (get1 result temp___447)) true))))
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key (model__ container) key2) true))
     (and (< 0 (find2 result key2))
     (= (my_eq (get1 result (find2 result key2)) key2) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (= (find2 result (get1 result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length container)))
     (=> (= (my_eq (get1 result i) (get1 result j)) true) (= i j)))))))) :pattern (
  (keys container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key1 result no_element) true))
     (forall ((i us_rep2))
     (=> (= (has_key1 result i) true)
     (and
     (and (<= 1 (get2 result i)) (<= (get2 result i) (length container)))
     (forall ((j us_rep2))
     (=> (= (has_key1 result j) true)
     (=> (= (get2 result i) (get2 result j)) (= (bool_eq2 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-fun oeq4 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep1 us_rep1) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq4 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(define-fun has_element ((container us_rep)
  (position us_rep2)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep2) Bool)

(declare-fun has_element1 (Int us_rep us_rep2) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep2) Bool)

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep2)) (! (dynamic_invariant3
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (find container key2)))
     (ite (not (= (has_key (model__ container) key2) true))
     (= (bool_eq2 result no_element) true)
     (and
     (and (= (has_key1 (positions container) result) true)
     (= (get2 (positions container) result) (find2 (keys container) key2)))
     (= (my_eq (key container result) key2) true))))) :pattern ((find
                                                                container
                                                                key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

;; has_element__post__dispatch_axiom
  (assert true)

(define-fun dynamic_invariant6 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 1 100)) (in_range6
                                      temp___expr_366)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant6 key2 true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k1 Int))
     (and (and (in_range6 k1) (= (has_key container k1) true))
     (= (my_eq k1 key2) true))) (= (has_key container key2) true)))) :pattern (
  (has_key container key2)) ))))

(declare-sort element_type2 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (element_type2 element_type2) Bool)

(declare-const dummy13 element_type2)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2
  (element_type__content2 a))

(define-fun dynamic_invariant7 ((temp___expr_372 Int)
  (temp___is_init_369 Bool) (temp___skip_constant_370 Bool)
  (temp___do_toplevel_371 Bool)) Bool (=>
                                      (or (= temp___is_init_369 true)
                                      (<= 1 100)) (in_range8
                                      temp___expr_372)))

(declare-fun witness (us_rep1 Int) Int)

(declare-fun witness__function_guard (Int us_rep1 Int) Bool)

(declare-fun w_get (us_rep1 Int) Int)

(declare-fun w_get__function_guard (Int us_rep1 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant6 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (get container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get container (witness container key2)))
     (forall ((k1 Int))
     (=> (and (in_range6 k1) (= (has_key container k1) true))
     (= (= (my_eq k1 key2) true)
     (= (witness container key2) (witness container k1)))))))
     (dynamic_invariant7 result true false true)))) :pattern ((get container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1)) (! (dynamic_invariant2 (length4 container)
  true false true) :pattern ((length4 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (ole left right) true)
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))) :pattern (
  (ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key right key2) true))
     (= (has_key left key2) true))))) :pattern ((oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true)
     (forall ((key2 Int))
     (not (and (in_range6 key2) (= (has_key container key2) true))))) :pattern (
  (is_empty1 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (keys_included left right) true)
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key left key2) true))
     (= (has_key right key2) true)))) :pattern ((keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant6 new_key true true true)
     (= (= (keys_included_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key left key2) true))
     (=> (not (= (my_eq key2 new_key) true)) (= (has_key right key2) true)))))) :pattern (
  (keys_included_except left right new_key)) ))))

;; elements_equal_except__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant6 new_key true true true)
     (= (= (elements_equal_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range6 key2) (= (has_key left key2) true))
     (=> (not (= (my_eq key2 new_key) true))
     (and (= (has_key right key2) true) (= (get left key2) (get right key2)))))))) :pattern (
  (elements_equal_except left right new_key)) ))))

(declare-fun has_witness (us_rep1 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep1 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant6 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (witness container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant2 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant7
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(define-fun dynamic_invariant8 ((temp___expr_403 Int)
  (temp___is_init_400 Bool) (temp___skip_constant_401 Bool)
  (temp___do_toplevel_402 Bool)) Bool (=>
                                      (or (= temp___is_init_400 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_403)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length2 container)) )))

(declare-sort element_type3 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (element_type3 element_type3) Bool)

(declare-const dummy14 element_type3)

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___4__projection ((a element_type__ref3)) element_type3
  (element_type__content3 a))

(define-fun dynamic_invariant9 ((temp___expr_397 Int)
  (temp___is_init_394 Bool) (temp___skip_constant_395 Bool)
  (temp___do_toplevel_396 Bool)) Bool (=>
                                      (or (= temp___is_init_394 true)
                                      (<= 1 100)) (in_range9
                                      temp___expr_397)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant8 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant9 (get1 container position) true false true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k1 us_rep2))
     (and (= (has_key1 container k1) true) (= (bool_eq2 k1 key2) true)))
     (= (has_key1 container key2) true))) :pattern ((has_key1 container key2)) ))))

(declare-sort element_type4 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (element_type4 element_type4) Bool)

(declare-const dummy15 element_type4)

(declare-datatypes ()
((element_type__ref4
 (mk_element_type__ref4 (element_type__content4 element_type4)))))
(define-fun element_type__ref___5__projection ((a element_type__ref4)) element_type4
  (element_type__content4 a))

(define-fun dynamic_invariant10 ((temp___expr_423 Int)
  (temp___is_init_420 Bool) (temp___skip_constant_421 Bool)
  (temp___do_toplevel_422 Bool)) Bool (=>
                                      (or (= temp___is_init_420 true)
                                      (<= 1 2147483647)) (in_range10
                                      temp___expr_423)))

(declare-fun witness1 (us_rep4 us_rep2) Int)

(declare-fun witness__function_guard1 (Int us_rep4 us_rep2) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (get2 container key2)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k1 us_rep2))
     (=> (= (has_key1 container k1) true)
     (= (= (bool_eq2 k1 key2) true)
     (= (witness1 container key2) (witness1 container k1)))))))
     (dynamic_invariant10 result true false true)))) :pattern ((get2
                                                               container
                                                               key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant2 (length3 container)
  true false true) :pattern ((length3 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key2 us_rep2))
     (=> (= (has_key1 left key2) true)
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))
     (forall ((key2 us_rep2))
     (=> (= (has_key1 right key2) true) (= (has_key1 left key2) true))))) :pattern (
  (oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty container) true)
     (forall ((key2 us_rep2)) (not (= (has_key1 container key2) true)))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included1 left right) true)
     (forall ((key2 us_rep2))
     (=> (= (has_key1 left key2) true) (= (has_key1 right key2) true)))) :pattern (
  (keys_included1 left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key us_rep2))
  (! (= (= (keys_included_except1 left right new_key) true)
     (forall ((key2 us_rep2))
     (=> (= (has_key1 left key2) true)
     (=> (not (= (bool_eq2 key2 new_key) true))
     (= (has_key1 right key2) true))))) :pattern ((keys_included_except1 left
                                                  right new_key)) ))))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (witness1 container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant2 witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant10
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(declare-const l__split_fields us_main_type)

(declare-const result Bool)

;; H
  (assert (in_range3 k))

;; H
  (assert (in_range2 e))

;; H
  (assert
  (or
  (= (has_key
     (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     k) true)
  (< (length (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
  (to_rep (rec__p__my_maps__map__capacity l__split_discrs)))))

;; H
  (assert
  (and
  (= result (has_key
            (model__
            (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
            k))
  (= (= result true)
  (= (has_key
     (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     k) true))))

;; H
  (assert (= result true))

(assert
;; WP_parameter_def
 ;; File "a-cfhama.ads", line 781, characters 0-0
  (not
  (= (has_key
     (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     k) true)))
(check-sat)
(exit)
