;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort t 0)

(declare-fun user_eq (t t) Bool)

(declare-const value__size Int)

(declare-fun object__size (t) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (t) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a t)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a t)) (<= 0 (object__alignment a))))

(declare-const dummy t)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__eq_null_record__s__x t)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) t (rec__eq_null_record__s__x
                                                                  a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const eq_null_record__s__x__first__bit Int)

(declare-const eq_null_record__s__x__last__bit Int)

(declare-const eq_null_record__s__x__position Int)

;; eq_null_record__s__x__first__bit_axiom
  (assert (<= 0 eq_null_record__s__x__first__bit))

;; eq_null_record__s__x__last__bit_axiom
  (assert
  (< eq_null_record__s__x__first__bit eq_null_record__s__x__last__bit))

;; eq_null_record__s__x__position_axiom
  (assert (<= 0 eq_null_record__s__x__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((s__ref 0)) (((mk_s__ref (s__content us_rep)))))
(define-fun s__ref___projection ((a s__ref)) us_rep (s__content a))

(declare-const x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const eq_null_record__always_true__result Bool)

(declare-const result Bool)

(declare-const eq_null_record__always_true__result1 Bool)

(declare-const eq_null_record__always_true__result2 Bool)

(declare-const eq_null_record__always_true__result3 Bool)

(declare-const eq_null_record__always_true__result4 Bool)

(declare-const eq_null_record__always_true__result5 Bool)

(declare-const result1 Bool)

;; H
  (assert
  (= eq_null_record__always_true__result1 eq_null_record__always_true__result2))

;; H
  (assert
  (= eq_null_record__always_true__result3 eq_null_record__always_true__result1))

;; H
  (assert (= result eq_null_record__always_true__result))

;; H
  (assert (= eq_null_record__always_true__result1 (of_int 1)))

;; H
  (assert
  (= (mk_bool__ref eq_null_record__always_true__result4) (mk_bool__ref
                                                         eq_null_record__always_true__result2)))

;; H
  (assert
  (= eq_null_record__always_true__result5 eq_null_record__always_true__result3))

;; H
  (assert (= result1 eq_null_record__always_true__result4))

(assert
;; WP_parameter_def
 ;; File "eq_null_record.ads", line 13, characters 0-0
  (not (= eq_null_record__always_true__result4 true)))
(check-sat)
(exit)
