;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort character 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-const dummy character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range temp___expr_63)))

(declare-sort wide_character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (wide_character wide_character) Bool)

(declare-const dummy1 wide_character)

(declare-datatypes ()
((wide_character__ref
 (mk_wide_character__ref (wide_character__content wide_character)))))
(define-fun wide_character__ref___projection ((a wide_character__ref)) wide_character
  (wide_character__content a))

(define-fun dynamic_invariant1 ((temp___expr_69 Int) (temp___is_init_66 Bool)
  (temp___skip_constant_67 Bool)
  (temp___do_toplevel_68 Bool)) Bool (=>
                                     (or (= temp___is_init_66 true)
                                     (<= 0 65535)) (in_range1
                                     temp___expr_69)))

(declare-sort wide_wide_character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (wide_wide_character wide_wide_character) Bool)

(declare-const dummy2 wide_wide_character)

(declare-datatypes ()
((wide_wide_character__ref
 (mk_wide_wide_character__ref
 (wide_wide_character__content wide_wide_character)))))
(define-fun wide_wide_character__ref___projection ((a wide_wide_character__ref)) wide_wide_character
  (wide_wide_character__content a))

(define-fun dynamic_invariant2 ((temp___expr_75 Int) (temp___is_init_72 Bool)
  (temp___skip_constant_73 Bool)
  (temp___do_toplevel_74 Bool)) Bool (=>
                                     (or (= temp___is_init_72 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_75)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const x Int)

(declare-const y Int)

(declare-const wx Int)

(declare-const wy Int)

(declare-const wwx Int)

(declare-const wwy Int)

(declare-const z Bool)

(declare-const wz Bool)

(declare-const wwz Bool)

(declare-const f Int)

(declare-const wf Int)

(declare-const wwf Int)

(declare-const chars__doit__result Bool)

(declare-const result Int)

(declare-const x1 Int)

(declare-const result1 Int)

(declare-const y1 Int)

(declare-const result2 Int)

(declare-const wx1 Int)

(declare-const result3 Int)

(declare-const wy1 Int)

(declare-const result4 Int)

(declare-const wwx1 Int)

(declare-const result5 Int)

(declare-const wwy1 Int)

(declare-const result6 Bool)

(declare-const z1 Bool)

(declare-const result7 Bool)

(declare-const wz1 Bool)

(declare-const result8 bool__ref)

(declare-const wwz1 Bool)

(declare-const result9 int__ref)

(declare-const f1 Int)

(declare-const result10 int__ref)

(declare-const wf1 Int)

(declare-const result11 int__ref)

(declare-const wwf1 Int)

(declare-const result12 bool__ref)

(declare-const chars__doit__result1 Bool)

(declare-const chars__doit__result2 bool__ref)

(declare-const chars__doit__result3 Bool)

(declare-const x2 int__ref)

(declare-const y2 int__ref)

(declare-const wx2 int__ref)

(declare-const wy2 int__ref)

(declare-const wwx2 int__ref)

(declare-const wwy2 int__ref)

(declare-const z2 bool__ref)

(declare-const wz2 bool__ref)

(declare-const wwz2 bool__ref)

(declare-const f2 int__ref)

(declare-const wf2 int__ref)

(declare-const wwf2 int__ref)

(declare-const chars__doit__result4 bool__ref)

(declare-const x3 Int)

(declare-const y3 Int)

(declare-const wx3 Int)

(declare-const wy3 Int)

(declare-const wwx3 Int)

(declare-const wwy3 Int)

(declare-const z3 Bool)

(declare-const wz3 Bool)

(declare-const wwz3 Bool)

(declare-const f3 Int)

(declare-const wf3 Int)

(declare-const wwf3 Int)

(declare-const chars__doit__result5 Bool)

(declare-const result13 Bool)

;; H
  (assert (= result x))

;; H
  (assert (= x1 65))

;; H
  (assert (in_range x1))

;; H
  (assert (= result1 y))

;; H
  (assert (= y1 97))

;; H
  (assert (in_range y1))

;; H
  (assert (= result2 wx))

;; H
  (assert (= wx1 65))

;; H
  (assert (in_range1 wx1))

;; H
  (assert (= result3 wy))

;; H
  (assert (= wy1 97))

;; H
  (assert (in_range1 wy1))

;; H
  (assert (= result4 wwx))

;; H
  (assert (= wwx1 65))

;; H
  (assert (in_range2 wwx1))

;; H
  (assert (= result5 wwy))

;; H
  (assert (= wwy1 97))

;; H
  (assert (in_range2 wwy1))

;; H
  (assert (= result6 z))

;; H
  (assert (= z1 (ite (< x1 y1) true false)))

;; H
  (assert (= result7 wz))

;; H
  (assert (= wz1 (ite (< wx1 wy1) true false)))

;; H
  (assert (= result8 (mk_bool__ref wwz)))

;; H
  (assert (= wwz1 (ite (< wwx1 wwy1) true false)))

;; H
  (assert (= result9 (mk_int__ref f)))

;; H
  (assert (= f1 0))

;; H
  (assert (in_range f1))

;; H
  (assert (= result10 (mk_int__ref wf)))

;; H
  (assert (= wf1 0))

;; H
  (assert (in_range1 wf1))

;; H
  (assert (= result11 (mk_int__ref wwf)))

;; H
  (assert (= wwf1 0))

;; H
  (assert (in_range2 wwf1))

;; H
  (assert (= chars__doit__result2 (mk_bool__ref chars__doit__result1)))

;; H
  (assert (= chars__doit__result3 chars__doit__result1))

;; H
  (assert (= result12 (mk_bool__ref chars__doit__result)))

;; H
  (assert
  (= chars__doit__result1 (ite (and (and (= z1 true) (= wz1 true))
                               (= wwz1 true))
                          true false)))

;; H
  (assert (= chars__doit__result4 chars__doit__result2))

;; H
  (assert (= wwf2 (mk_int__ref wwf1)))

;; H
  (assert (= wf2 (mk_int__ref wf1)))

;; H
  (assert (= f2 (mk_int__ref f1)))

;; H
  (assert (= wwz2 (mk_bool__ref wwz1)))

;; H
  (assert (= wz2 (mk_bool__ref wz1)))

;; H
  (assert (= z2 (mk_bool__ref z1)))

;; H
  (assert (= wwy2 (mk_int__ref wwy1)))

;; H
  (assert (= wwx2 (mk_int__ref wwx1)))

;; H
  (assert (= wy2 (mk_int__ref wy1)))

;; H
  (assert (= wx2 (mk_int__ref wx1)))

;; H
  (assert (= y2 (mk_int__ref y1)))

;; H
  (assert (= x2 (mk_int__ref x1)))

;; H
  (assert (= chars__doit__result5 chars__doit__result3))

;; H
  (assert (= wwf3 wwf1))

;; H
  (assert (= wf3 wf1))

;; H
  (assert (= f3 f1))

;; H
  (assert (= wwz3 wwz1))

;; H
  (assert (= wz3 wz1))

;; H
  (assert (= z3 z1))

;; H
  (assert (= wwy3 wwy1))

;; H
  (assert (= wwx3 wwx1))

;; H
  (assert (= wy3 wy1))

;; H
  (assert (= wx3 wx1))

;; H
  (assert (= y3 y1))

;; H
  (assert (= x3 x1))

;; H
  (assert (= result13 (bool__content chars__doit__result4)))

(assert
;; WP_parameter_def
 ;; File "chars.ads", line 2, characters 0-0
  (not (= (bool__content chars__doit__result4) true)))
(check-sat)
(exit)
