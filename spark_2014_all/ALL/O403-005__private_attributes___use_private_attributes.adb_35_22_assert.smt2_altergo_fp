(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__private_with_attributes__root__f : natural;
rec__ext__ : us_private
}

function us_split_fields_F__projection(a: us_split_fields) : natural =
  (a).rec__private_with_attributes__root__f

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep(((a).us_split_fields1).rec__private_with_attributes__root__f) = to_rep(((b).us_split_fields1).rec__private_with_attributes__root__f)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__private_with_attributes__root__f) = to_rep(((b).us_split_fields1).rec__private_with_attributes__root__f))) ->
  (bool_eq3(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = {
  rec__private_with_attributes__root__f = a; rec__ext__ = a1 }; attr__tag =
  a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__private_with_attributes__root__f = a; rec__ext__ = a1 }; attr__tag =
  a2 })))

logic private_with_attributes__root__f__first__bit : int

logic private_with_attributes__root__f__last__bit : int

logic private_with_attributes__root__f__position : int

axiom private_with_attributes__root__f__first__bit_axiom :
  (0 <= private_with_attributes__root__f__first__bit)

axiom private_with_attributes__root__f__last__bit_axiom :
  (private_with_attributes__root__f__first__bit <  private_with_attributes__root__f__last__bit)

axiom private_with_attributes__root__f__position_axiom :
  (0 <= private_with_attributes__root__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields2 = { rec__private_with_attributes__child : us_main_type;
rec__private_with_attributes__root__f1 : natural; rec__ext__1 : us_private
}

function us_split_fields_Child__projection(a: us_split_fields2) : us_main_type =
  (a).rec__private_with_attributes__child

function us_split_fields_F__2__projection(a: us_split_fields2) : natural =
  (a).rec__private_with_attributes__root__f1

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_main_type, us_private -> us_private

logic extract__child : us_private -> us_main_type

axiom extract__child__conv :
  (forall child:us_main_type.
  (forall rec__ext__2:us_private. (extract__child(hide_ext__(child,
  rec__ext__2)) = child)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__private_with_attributes__root__f =
  ((a).us_split_fields3).rec__private_with_attributes__root__f1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__private_with_attributes__child,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__private_with_attributes__child =
  extract__child(((r).us_split_fields1).rec__ext__);
  rec__private_with_attributes__root__f1 =
  ((r).us_split_fields1).rec__private_with_attributes__root__f; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((us_main_eq(((a).us_split_fields3).rec__private_with_attributes__child,
  ((b).us_split_fields3).rec__private_with_attributes__child) = true) and
  (to_rep(((a).us_split_fields3).rec__private_with_attributes__root__f1) = to_rep(((b).us_split_fields3).rec__private_with_attributes__root__f1))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((us_main_eq(((a).us_split_fields3).rec__private_with_attributes__child,
  ((b).us_split_fields3).rec__private_with_attributes__child) = true) and
  (to_rep(((a).us_split_fields3).rec__private_with_attributes__root__f1) = to_rep(((b).us_split_fields3).rec__private_with_attributes__root__f1)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_main_type. forall a1:natural. forall a2:us_private.
  forall a3:int. (0 <= object__size1({ us_split_fields3 = {
  rec__private_with_attributes__child = a;
  rec__private_with_attributes__root__f1 = a1; rec__ext__1 = a2 };
  attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_main_type. forall a1:natural. forall a2:us_private.
  forall a3:int. (0 <= object__alignment1({ us_split_fields3 = {
  rec__private_with_attributes__child = a;
  rec__private_with_attributes__root__f1 = a1; rec__ext__1 = a2 };
  attr__tag1 = a3 })))

logic private_with_attributes__root__f__first__bit1 : int

logic private_with_attributes__root__f__last__bit1 : int

logic private_with_attributes__root__f__position1 : int

axiom private_with_attributes__root__f__first__bit_axiom1 :
  (0 <= private_with_attributes__root__f__first__bit1)

axiom private_with_attributes__root__f__last__bit_axiom1 :
  (private_with_attributes__root__f__first__bit1 <  private_with_attributes__root__f__last__bit1)

axiom private_with_attributes__root__f__position_axiom1 :
  (0 <= private_with_attributes__root__f__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : us_main_type

logic dummy5 : natural

logic dummy6 : us_private

logic dummy7 : int

type child__ref = { child__content : us_rep1
}

function child__ref___projection(a: child__ref) : us_rep1 =
  (a).child__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_fields4 = { rec__private_with_attributes__root_private_tagged :
us_main_type1; rec__ext__2 : us_private
}

function us_split_fields_Root_Private_Tagged__projection(a: us_split_fields4) : us_main_type1 =
  (a).rec__private_with_attributes__root_private_tagged

function us_split_fields___3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___6__projection(a: us_rep2) : int = (a).attr__tag2

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  (((us_main_eq1(((a).us_split_fields5).rec__private_with_attributes__root_private_tagged,
  ((b).us_split_fields5).rec__private_with_attributes__root_private_tagged) = true) ->
  (bool_eq5(a, b) = true)) and
  ((not (us_main_eq1(((a).us_split_fields5).rec__private_with_attributes__root_private_tagged,
  ((b).us_split_fields5).rec__private_with_attributes__root_private_tagged) = true)) ->
  (bool_eq5(a, b) = false))))

logic us_dispatch_eq1 : us_rep2, us_rep2 -> bool

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_main_type1. forall a1:us_private. forall a2:int.
  (0 <= object__size2({ us_split_fields5 = {
  rec__private_with_attributes__root_private_tagged = a; rec__ext__2 = a1 };
  attr__tag2 = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_main_type1. forall a1:us_private. forall a2:int.
  (0 <= object__alignment2({ us_split_fields5 = {
  rec__private_with_attributes__root_private_tagged = a; rec__ext__2 = a1 };
  attr__tag2 = a2 })))

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy8 : us_main_type1

logic dummy9 : us_private

logic dummy10 : int

type root_private_tagged__ref = { root_private_tagged__content : us_rep2
}

function root_private_tagged__ref___projection(a: root_private_tagged__ref) : us_rep2 =
  (a).root_private_tagged__content

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_fields6 = { rec__private_with_attributes__root_private_tagged1
: us_main_type1; rec__private_with_attributes__child_private_tagged :
us_main_type2; rec__ext__3 : us_private
}

function us_split_fields_Root_Private_Tagged__2__projection(a: us_split_fields6) : us_main_type1 =
  (a).rec__private_with_attributes__root_private_tagged1

function us_split_fields_Child_Private_Tagged__projection(a: us_split_fields6) : us_main_type2 =
  (a).rec__private_with_attributes__child_private_tagged

function us_split_fields___4__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6; attr__tag3 : int
}

function us_rep___7__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep___8__projection(a: us_rep3) : int = (a).attr__tag3

logic hide_ext__1 : us_main_type2, us_private -> us_private

logic extract__child_private_tagged : us_private -> us_main_type2

axiom extract__child_private_tagged__conv :
  (forall child_private_tagged:us_main_type2.
  (forall rec__ext__4:us_private.
  (extract__child_private_tagged(hide_ext__1(child_private_tagged,
  rec__ext__4)) = child_private_tagged)))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep3) : us_rep2 = { us_split_fields5 = {
  rec__private_with_attributes__root_private_tagged =
  ((a).us_split_fields7).rec__private_with_attributes__root_private_tagged1;
  rec__ext__2 =
  hide_ext__1(((a).us_split_fields7).rec__private_with_attributes__child_private_tagged,
  ((a).us_split_fields7).rec__ext__3) }; attr__tag2 = (a).attr__tag3 }

function of_base1(r: us_rep2) : us_rep3 = { us_split_fields7 = {
  rec__private_with_attributes__root_private_tagged1 =
  ((r).us_split_fields5).rec__private_with_attributes__root_private_tagged;
  rec__private_with_attributes__child_private_tagged =
  extract__child_private_tagged(((r).us_split_fields5).rec__ext__2);
  rec__ext__3 = extract__ext__1(((r).us_split_fields5).rec__ext__2) };
  attr__tag3 = (r).attr__tag2 }

logic bool_eq6 : us_rep3, us_rep3 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq6(a, b)].
  ((((us_main_eq1(((a).us_split_fields7).rec__private_with_attributes__root_private_tagged1,
  ((b).us_split_fields7).rec__private_with_attributes__root_private_tagged1) = true) and
  (us_main_eq2(((a).us_split_fields7).rec__private_with_attributes__child_private_tagged,
  ((b).us_split_fields7).rec__private_with_attributes__child_private_tagged) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((us_main_eq1(((a).us_split_fields7).rec__private_with_attributes__root_private_tagged1,
  ((b).us_split_fields7).rec__private_with_attributes__root_private_tagged1) = true) and
  (us_main_eq2(((a).us_split_fields7).rec__private_with_attributes__child_private_tagged,
  ((b).us_split_fields7).rec__private_with_attributes__child_private_tagged) = true))) ->
  (bool_eq6(a, b) = false))))

logic us_tag3 : int

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:us_main_type1. forall a1:us_main_type2. forall a2:us_private.
  forall a3:int. (0 <= object__size3({ us_split_fields7 = {
  rec__private_with_attributes__root_private_tagged1 = a;
  rec__private_with_attributes__child_private_tagged = a1; rec__ext__3 = a2
  }; attr__tag3 = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_main_type1. forall a1:us_main_type2. forall a2:us_private.
  forall a3:int. (0 <= object__alignment3({ us_split_fields7 = {
  rec__private_with_attributes__root_private_tagged1 = a;
  rec__private_with_attributes__child_private_tagged = a1; rec__ext__3 = a2
  }; attr__tag3 = a3 })))

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy11 : us_main_type1

logic dummy12 : us_main_type2

logic dummy13 : us_private

logic dummy14 : int

type child_private_tagged__ref = { child_private_tagged__content : us_rep3
}

function child_private_tagged__ref___projection(a: child_private_tagged__ref) : us_rep3 =
  (a).child_private_tagged__content

logic c1 : us_main_type

logic c11 : natural

logic c12 : us_private

logic c13 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic c2 : us_main_type

logic c21 : natural

logic c22 : us_private

logic c23 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields8 = { rec__private_with_attributes__root_private_tagged2
: us_main_type1; rec__private_with_attributes__child_private_tagged1 :
us_main_type2; rec__public_derives_private__grand_child_private_tagged__f2 :
natural; rec__ext__4 : us_private
}

function us_split_fields_Root_Private_Tagged__3__projection(a: us_split_fields8) : us_main_type1 =
  (a).rec__private_with_attributes__root_private_tagged2

function us_split_fields_Child_Private_Tagged__2__projection(a: us_split_fields8) : us_main_type2 =
  (a).rec__private_with_attributes__child_private_tagged1

function us_split_fields_F2__projection(a: us_split_fields8) : natural =
  (a).rec__public_derives_private__grand_child_private_tagged__f2

function us_split_fields___6__projection(a: us_split_fields8) : us_private =
  (a).rec__ext__4

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8; attr__tag4 : int
}

function us_rep___15__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function us_rep___16__projection(a: us_rep4) : int = (a).attr__tag4

logic hide_ext__2 : us_main_type2, natural, us_private -> us_private

axiom extract__child_private_tagged__conv1 :
  (forall child_private_tagged:us_main_type2.
  (forall f2:natural.
  (forall rec__ext__5:us_private.
  (extract__child_private_tagged(hide_ext__2(child_private_tagged, f2,
  rec__ext__5)) = child_private_tagged))))

logic extract__f2 : us_private -> natural

axiom extract__f2__conv :
  (forall child_private_tagged:us_main_type2.
  (forall f2:natural.
  (forall rec__ext__5:us_private.
  (extract__f2(hide_ext__2(child_private_tagged, f2, rec__ext__5)) = f2))))

logic extract__ext__2 : us_private -> us_private

function to_base2(a: us_rep4) : us_rep2 = { us_split_fields5 = {
  rec__private_with_attributes__root_private_tagged =
  ((a).us_split_fields9).rec__private_with_attributes__root_private_tagged2;
  rec__ext__2 =
  hide_ext__2(((a).us_split_fields9).rec__private_with_attributes__child_private_tagged1,
  ((a).us_split_fields9).rec__public_derives_private__grand_child_private_tagged__f2,
  ((a).us_split_fields9).rec__ext__4) }; attr__tag2 = (a).attr__tag4 }

function of_base2(r: us_rep2) : us_rep4 = { us_split_fields9 = {
  rec__private_with_attributes__root_private_tagged2 =
  ((r).us_split_fields5).rec__private_with_attributes__root_private_tagged;
  rec__private_with_attributes__child_private_tagged1 =
  extract__child_private_tagged(((r).us_split_fields5).rec__ext__2);
  rec__public_derives_private__grand_child_private_tagged__f2 =
  extract__f2(((r).us_split_fields5).rec__ext__2); rec__ext__4 =
  extract__ext__2(((r).us_split_fields5).rec__ext__2) }; attr__tag4 =
  (r).attr__tag2 }

logic bool_eq7 : us_rep4, us_rep4 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq7(a, b)].
  (((((us_main_eq1(((a).us_split_fields9).rec__private_with_attributes__root_private_tagged2,
  ((b).us_split_fields9).rec__private_with_attributes__root_private_tagged2) = true) and
  (us_main_eq2(((a).us_split_fields9).rec__private_with_attributes__child_private_tagged1,
  ((b).us_split_fields9).rec__private_with_attributes__child_private_tagged1) = true)) and
  (to_rep(((a).us_split_fields9).rec__public_derives_private__grand_child_private_tagged__f2) = to_rep(((b).us_split_fields9).rec__public_derives_private__grand_child_private_tagged__f2))) ->
  (bool_eq7(a, b) = true)) and
  ((not (((us_main_eq1(((a).us_split_fields9).rec__private_with_attributes__root_private_tagged2,
  ((b).us_split_fields9).rec__private_with_attributes__root_private_tagged2) = true) and
  (us_main_eq2(((a).us_split_fields9).rec__private_with_attributes__child_private_tagged1,
  ((b).us_split_fields9).rec__private_with_attributes__child_private_tagged1) = true)) and
  (to_rep(((a).us_split_fields9).rec__public_derives_private__grand_child_private_tagged__f2) = to_rep(((b).us_split_fields9).rec__public_derives_private__grand_child_private_tagged__f2)))) ->
  (bool_eq7(a, b) = false))))

logic us_tag4 : int

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:us_main_type1. forall a1:us_main_type2. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__size4({
  us_split_fields9 = { rec__private_with_attributes__root_private_tagged2 =
  a; rec__private_with_attributes__child_private_tagged1 = a1;
  rec__public_derives_private__grand_child_private_tagged__f2 = a2;
  rec__ext__4 = a3 }; attr__tag4 = a4 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_main_type1. forall a1:us_main_type2. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__alignment4({
  us_split_fields9 = { rec__private_with_attributes__root_private_tagged2 =
  a; rec__private_with_attributes__child_private_tagged1 = a1;
  rec__public_derives_private__grand_child_private_tagged__f2 = a2;
  rec__ext__4 = a3 }; attr__tag4 = a4 })))

logic public_derives_private__grand_child_private_tagged__f2__first__bit : int

logic public_derives_private__grand_child_private_tagged__f2__last__bit : int

logic public_derives_private__grand_child_private_tagged__f2__position : int

axiom public_derives_private__grand_child_private_tagged__f2__first__bit_axiom :
  (0 <= public_derives_private__grand_child_private_tagged__f2__first__bit)

axiom public_derives_private__grand_child_private_tagged__f2__last__bit_axiom :
  (public_derives_private__grand_child_private_tagged__f2__first__bit <  public_derives_private__grand_child_private_tagged__f2__last__bit)

axiom public_derives_private__grand_child_private_tagged__f2__position_axiom :
  (0 <= public_derives_private__grand_child_private_tagged__f2__position)

logic user_eq5 : us_rep4, us_rep4 -> bool

logic dummy15 : us_main_type1

logic dummy16 : us_main_type2

logic dummy17 : natural

logic dummy18 : us_private

logic dummy19 : int

type grand_child_private_tagged__ref = { grand_child_private_tagged__content
: us_rep4
}

function grand_child_private_tagged__ref___projection(a: grand_child_private_tagged__ref) : us_rep4 =
  (a).grand_child_private_tagged__content

type us_split_fields10 = { rec__private_with_attributes__child1 :
us_main_type; rec__public_derives_private__grand_child__f2 : natural;
rec__private_with_attributes__root__f2 : natural; rec__ext__5 : us_private
}

function us_split_fields_Child__2__projection(a: us_split_fields10) : us_main_type =
  (a).rec__private_with_attributes__child1

function us_split_fields_F2__3__projection(a: us_split_fields10) : natural =
  (a).rec__public_derives_private__grand_child__f2

function us_split_fields_F__3__projection(a: us_split_fields10) : natural =
  (a).rec__private_with_attributes__root__f2

function us_split_fields___8__projection(a: us_split_fields10) : us_private =
  (a).rec__ext__5

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10; attr__tag5 : int
}

function us_rep___19__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

function us_rep___20__projection(a: us_rep5) : int = (a).attr__tag5

logic hide_ext__3 : us_main_type, natural, us_private -> us_private

axiom extract__child__conv1 :
  (forall child:us_main_type.
  (forall f2:natural.
  (forall rec__ext__6:us_private. (extract__child(hide_ext__3(child, f2,
  rec__ext__6)) = child))))

logic extract__f21 : us_private -> natural

axiom extract__f2__conv1 :
  (forall child:us_main_type.
  (forall f2:natural.
  (forall rec__ext__6:us_private. (extract__f21(hide_ext__3(child, f2,
  rec__ext__6)) = f2))))

logic extract__ext__3 : us_private -> us_private

function to_base3(a: us_rep5) : us_rep = { us_split_fields1 = {
  rec__private_with_attributes__root__f =
  ((a).us_split_fields11).rec__private_with_attributes__root__f2;
  rec__ext__ =
  hide_ext__3(((a).us_split_fields11).rec__private_with_attributes__child1,
  ((a).us_split_fields11).rec__public_derives_private__grand_child__f2,
  ((a).us_split_fields11).rec__ext__5) }; attr__tag = (a).attr__tag5 }

function of_base3(r: us_rep) : us_rep5 = { us_split_fields11 = {
  rec__private_with_attributes__child1 =
  extract__child(((r).us_split_fields1).rec__ext__);
  rec__public_derives_private__grand_child__f2 =
  extract__f21(((r).us_split_fields1).rec__ext__);
  rec__private_with_attributes__root__f2 =
  ((r).us_split_fields1).rec__private_with_attributes__root__f; rec__ext__5 =
  extract__ext__3(((r).us_split_fields1).rec__ext__) }; attr__tag5 =
  (r).attr__tag }

logic bool_eq8 : us_rep5, us_rep5 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq8(a, b)].
  (((((us_main_eq(((a).us_split_fields11).rec__private_with_attributes__child1,
  ((b).us_split_fields11).rec__private_with_attributes__child1) = true) and
  (to_rep(((a).us_split_fields11).rec__public_derives_private__grand_child__f2) = to_rep(((b).us_split_fields11).rec__public_derives_private__grand_child__f2))) and
  (to_rep(((a).us_split_fields11).rec__private_with_attributes__root__f2) = to_rep(((b).us_split_fields11).rec__private_with_attributes__root__f2))) ->
  (bool_eq8(a, b) = true)) and
  ((not (((us_main_eq(((a).us_split_fields11).rec__private_with_attributes__child1,
  ((b).us_split_fields11).rec__private_with_attributes__child1) = true) and
  (to_rep(((a).us_split_fields11).rec__public_derives_private__grand_child__f2) = to_rep(((b).us_split_fields11).rec__public_derives_private__grand_child__f2))) and
  (to_rep(((a).us_split_fields11).rec__private_with_attributes__root__f2) = to_rep(((b).us_split_fields11).rec__private_with_attributes__root__f2)))) ->
  (bool_eq8(a, b) = false))))

logic us_tag5 : int

logic value__size5 : int

logic object__size5 : us_rep5 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep5 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:us_main_type. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__size5({
  us_split_fields11 = { rec__private_with_attributes__child1 = a;
  rec__public_derives_private__grand_child__f2 = a1;
  rec__private_with_attributes__root__f2 = a2; rec__ext__5 = a3 };
  attr__tag5 = a4 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_main_type. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__alignment5({
  us_split_fields11 = { rec__private_with_attributes__child1 = a;
  rec__public_derives_private__grand_child__f2 = a1;
  rec__private_with_attributes__root__f2 = a2; rec__ext__5 = a3 };
  attr__tag5 = a4 })))

logic public_derives_private__grand_child__f2__first__bit : int

logic public_derives_private__grand_child__f2__last__bit : int

logic public_derives_private__grand_child__f2__position : int

axiom public_derives_private__grand_child__f2__first__bit_axiom :
  (0 <= public_derives_private__grand_child__f2__first__bit)

axiom public_derives_private__grand_child__f2__last__bit_axiom :
  (public_derives_private__grand_child__f2__first__bit <  public_derives_private__grand_child__f2__last__bit)

axiom public_derives_private__grand_child__f2__position_axiom :
  (0 <= public_derives_private__grand_child__f2__position)

logic private_with_attributes__root__f__first__bit2 : int

logic private_with_attributes__root__f__last__bit2 : int

logic private_with_attributes__root__f__position2 : int

axiom private_with_attributes__root__f__first__bit_axiom2 :
  (0 <= private_with_attributes__root__f__first__bit2)

axiom private_with_attributes__root__f__last__bit_axiom2 :
  (private_with_attributes__root__f__first__bit2 <  private_with_attributes__root__f__last__bit2)

axiom private_with_attributes__root__f__position_axiom2 :
  (0 <= private_with_attributes__root__f__position2)

logic user_eq6 : us_rep5, us_rep5 -> bool

logic dummy20 : us_main_type

logic dummy21 : natural

logic dummy22 : natural

logic dummy23 : us_private

logic dummy24 : int

type grand_child__ref = { grand_child__content : us_rep5
}

function grand_child__ref___projection(a: grand_child__ref) : us_rep5 =
  (a).grand_child__content

type us_split_fields12 = { rec__private_with_attributes__root_private_tagged3
: us_main_type1; rec__private_with_attributes__child_private_tagged2 :
us_main_type2;
rec__public_derives_private__private_grand_child_private_tagged__f2 :
natural; rec__ext__6 : us_private
}

function us_split_fields_Root_Private_Tagged__5__projection(a: us_split_fields12) : us_main_type1 =
  (a).rec__private_with_attributes__root_private_tagged3

function us_split_fields_Child_Private_Tagged__4__projection(a: us_split_fields12) : us_main_type2 =
  (a).rec__private_with_attributes__child_private_tagged2

function us_split_fields_F2__4__projection(a: us_split_fields12) : natural =
  (a).rec__public_derives_private__private_grand_child_private_tagged__f2

function us_split_fields___10__projection(a: us_split_fields12) : us_private =
  (a).rec__ext__6

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_fields13 : us_split_fields12; attr__tag6 : int
}

function us_rep___24__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

function us_rep___25__projection(a: us_rep6) : int = (a).attr__tag6

logic hide_ext__4 : us_main_type2, natural, us_private -> us_private

axiom extract__child_private_tagged__conv2 :
  (forall child_private_tagged:us_main_type2.
  (forall f2:natural.
  (forall rec__ext__7:us_private.
  (extract__child_private_tagged(hide_ext__4(child_private_tagged, f2,
  rec__ext__7)) = child_private_tagged))))

logic extract__f22 : us_private -> natural

axiom extract__f2__conv2 :
  (forall child_private_tagged:us_main_type2.
  (forall f2:natural.
  (forall rec__ext__7:us_private.
  (extract__f22(hide_ext__4(child_private_tagged, f2, rec__ext__7)) = f2))))

logic extract__ext__4 : us_private -> us_private

function to_base4(a: us_rep6) : us_rep2 = { us_split_fields5 = {
  rec__private_with_attributes__root_private_tagged =
  ((a).us_split_fields13).rec__private_with_attributes__root_private_tagged3;
  rec__ext__2 =
  hide_ext__4(((a).us_split_fields13).rec__private_with_attributes__child_private_tagged2,
  ((a).us_split_fields13).rec__public_derives_private__private_grand_child_private_tagged__f2,
  ((a).us_split_fields13).rec__ext__6) }; attr__tag2 = (a).attr__tag6 }

function of_base4(r: us_rep2) : us_rep6 = { us_split_fields13 = {
  rec__private_with_attributes__root_private_tagged3 =
  ((r).us_split_fields5).rec__private_with_attributes__root_private_tagged;
  rec__private_with_attributes__child_private_tagged2 =
  extract__child_private_tagged(((r).us_split_fields5).rec__ext__2);
  rec__public_derives_private__private_grand_child_private_tagged__f2 =
  extract__f22(((r).us_split_fields5).rec__ext__2); rec__ext__6 =
  extract__ext__4(((r).us_split_fields5).rec__ext__2) }; attr__tag6 =
  (r).attr__tag2 }

logic bool_eq9 : us_rep6, us_rep6 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq9(a, b)].
  (((((us_main_eq1(((a).us_split_fields13).rec__private_with_attributes__root_private_tagged3,
  ((b).us_split_fields13).rec__private_with_attributes__root_private_tagged3) = true) and
  (us_main_eq2(((a).us_split_fields13).rec__private_with_attributes__child_private_tagged2,
  ((b).us_split_fields13).rec__private_with_attributes__child_private_tagged2) = true)) and
  (to_rep(((a).us_split_fields13).rec__public_derives_private__private_grand_child_private_tagged__f2) = to_rep(((b).us_split_fields13).rec__public_derives_private__private_grand_child_private_tagged__f2))) ->
  (bool_eq9(a, b) = true)) and
  ((not (((us_main_eq1(((a).us_split_fields13).rec__private_with_attributes__root_private_tagged3,
  ((b).us_split_fields13).rec__private_with_attributes__root_private_tagged3) = true) and
  (us_main_eq2(((a).us_split_fields13).rec__private_with_attributes__child_private_tagged2,
  ((b).us_split_fields13).rec__private_with_attributes__child_private_tagged2) = true)) and
  (to_rep(((a).us_split_fields13).rec__public_derives_private__private_grand_child_private_tagged__f2) = to_rep(((b).us_split_fields13).rec__public_derives_private__private_grand_child_private_tagged__f2)))) ->
  (bool_eq9(a, b) = false))))

logic us_tag6 : int

logic value__size6 : int

logic object__size6 : us_rep6 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep6 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:us_main_type1. forall a1:us_main_type2. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__size6({
  us_split_fields13 = { rec__private_with_attributes__root_private_tagged3 =
  a; rec__private_with_attributes__child_private_tagged2 = a1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = a2;
  rec__ext__6 = a3 }; attr__tag6 = a4 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_main_type1. forall a1:us_main_type2. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__alignment6({
  us_split_fields13 = { rec__private_with_attributes__root_private_tagged3 =
  a; rec__private_with_attributes__child_private_tagged2 = a1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = a2;
  rec__ext__6 = a3 }; attr__tag6 = a4 })))

logic public_derives_private__private_grand_child_private_tagged__f2__first__bit : int

logic public_derives_private__private_grand_child_private_tagged__f2__last__bit : int

logic public_derives_private__private_grand_child_private_tagged__f2__position : int

axiom public_derives_private__private_grand_child_private_tagged__f2__first__bit_axiom :
  (0 <= public_derives_private__private_grand_child_private_tagged__f2__first__bit)

axiom public_derives_private__private_grand_child_private_tagged__f2__last__bit_axiom :
  (public_derives_private__private_grand_child_private_tagged__f2__first__bit <  public_derives_private__private_grand_child_private_tagged__f2__last__bit)

axiom public_derives_private__private_grand_child_private_tagged__f2__position_axiom :
  (0 <= public_derives_private__private_grand_child_private_tagged__f2__position)

logic user_eq7 : us_rep6, us_rep6 -> bool

logic dummy25 : us_main_type1

logic dummy26 : us_main_type2

logic dummy27 : natural

logic dummy28 : us_private

logic dummy29 : int

type private_grand_child_private_tagged__ref = {
private_grand_child_private_tagged__content : us_rep6
}

function private_grand_child_private_tagged__ref___projection(a: private_grand_child_private_tagged__ref) : us_rep6 =
  (a).private_grand_child_private_tagged__content

logic get_f2 : us_rep6 -> int

logic get_f2__function_guard : int, us_rep6 -> prop

logic get_f21 : int, us_rep6 -> int

logic get_f2__function_guard1 : int, int, us_rep6 -> prop

axiom get_f2__post_axiom :
  (forall g:us_main_type1. forall g1:us_main_type2. forall g2:natural.
  forall g3:us_private. forall g4:int [get_f2({ us_split_fields13 = {
  rec__private_with_attributes__root_private_tagged3 = g;
  rec__private_with_attributes__child_private_tagged2 = g1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = g2;
  rec__ext__6 = g3 }; attr__tag6 = g4 })]. in_range1(get_f2({
  us_split_fields13 = { rec__private_with_attributes__root_private_tagged3 =
  g; rec__private_with_attributes__child_private_tagged2 = g1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = g2;
  rec__ext__6 = g3 }; attr__tag6 = g4 })))

axiom get_f2__post__dispatch_axiom :
  (forall attr__tag7:int.
  (forall g:us_main_type1. forall g1:us_main_type2. forall g2:natural.
  forall g3:us_private. forall g4:int [get_f21(attr__tag7, {
  us_split_fields13 = { rec__private_with_attributes__root_private_tagged3 =
  g; rec__private_with_attributes__child_private_tagged2 = g1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = g2;
  rec__ext__6 = g3 }; attr__tag6 = g4 })]. in_range1(get_f21(attr__tag7, {
  us_split_fields13 = { rec__private_with_attributes__root_private_tagged3 =
  g; rec__private_with_attributes__child_private_tagged2 = g1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = g2;
  rec__ext__6 = g3 }; attr__tag6 = g4 }))))

axiom get_f2__def_axiom :
  (forall g:us_main_type1. forall g1:us_main_type2. forall g2:natural.
  forall g3:us_private. forall g4:int [get_f2({ us_split_fields13 = {
  rec__private_with_attributes__root_private_tagged3 = g;
  rec__private_with_attributes__child_private_tagged2 = g1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = g2;
  rec__ext__6 = g3 }; attr__tag6 = g4 })]. (get_f2({ us_split_fields13 = {
  rec__private_with_attributes__root_private_tagged3 = g;
  rec__private_with_attributes__child_private_tagged2 = g1;
  rec__public_derives_private__private_grand_child_private_tagged__f2 = g2;
  rec__ext__6 = g3 }; attr__tag6 = g4 }) = to_rep(g2)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic f__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic g__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic p__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic rc__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic fc__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic g1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic g2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS10 : int

 (* File "use_private_attributes.adb", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall r__split_fields:us_main_type1. forall r__split_fields1:us_private.
  forall f__split_fields:us_main_type1.
  forall f__split_fields1:us_main_type2. forall f__split_fields2:us_private.
  forall g__split_fields:natural. forall p__split_fields:natural.
  forall rc__split_fields:us_main_type1. forall rc__split_fields1:us_private.
  forall fc__split_fields:us_main_type1. forall fc__split_fields1:us_private.
  forall g1__split_fields:us_main_type. forall g1__split_fields1:natural.
  forall g1__split_fields2:natural. forall g1__split_fields3:us_private.
  forall g2__split_fields:us_main_type. forall g2__split_fields1:natural.
  forall g2__split_fields2:natural. forall g2__split_fields3:us_private.
  forall o:natural. forall o1:us_main_type. forall o2:natural.
  forall o3:natural. forall o4:us_private.
  forall use_private_attributes__test_tag__g1__assume:us_main_type.
  forall use_private_attributes__test_tag__g1__assume1:natural.
  forall use_private_attributes__test_tag__g1__assume2:natural.
  forall use_private_attributes__test_tag__g1__assume3:us_private.
  forall use_private_attributes__test_tag__g1__assume4:int.
  forall o5:natural. forall o6:us_main_type. forall o7:natural.
  forall o8:natural. forall o9:us_private.
  forall use_private_attributes__test_tag__g2__assume:us_main_type.
  forall use_private_attributes__test_tag__g2__assume1:natural.
  forall use_private_attributes__test_tag__g2__assume2:natural.
  forall use_private_attributes__test_tag__g2__assume3:us_private.
  forall use_private_attributes__test_tag__g2__assume4:int.
  forall result:us_main_type1. forall result1:us_private.
  forall rc__split_fields2:us_main_type1.
  forall rc__split_fields3:us_private. forall result2:us_main_type1.
  forall result3:us_private. forall fc__split_fields2:us_main_type1.
  forall fc__split_fields3:us_private. forall result4:us_main_type.
  forall result5:natural. forall result6:natural. forall result7:us_private.
  forall g1__split_fields4:us_main_type. forall g1__split_fields5:natural.
  forall g1__split_fields6:natural. forall g1__split_fields7:us_private.
  forall result8:us_main_type. forall result9:natural.
  forall result10:natural. forall result11:us_private.
  forall g2__split_fields4:us_main_type. forall g2__split_fields5:natural.
  forall g2__split_fields6:natural. forall g2__split_fields7:us_private.
  (in_range1(c) -> ((r__attr__tag = us_tag2) -> ((f__attr__tag = us_tag3) ->
  (((g__attr__tag = us_tag4) and (to_rep(g__split_fields) = 0)) ->
  (((p__attr__tag = us_tag6) and (to_rep(p__split_fields) = 0)) ->
  (((((result = rc__split_fields) and (result1 = rc__split_fields1)) and
  ((r__split_fields = rc__split_fields2) and
  (r__split_fields1 = rc__split_fields3))) and
  (rc__attr__tag = r__attr__tag)) -> (((((result2 = fc__split_fields) and
  (result3 = fc__split_fields1)) and
  ((f__split_fields = fc__split_fields2) and (hide_ext__1(f__split_fields1,
  f__split_fields2) = fc__split_fields3))) and
  (fc__attr__tag = f__attr__tag)) -> (((((to_rep(o) = 1) and ((c1 = o1) and
  ((o = o2) and ((c11 = o3) and (us_null_ext__ = o4))))) and
  (((use_private_attributes__test_tag__g1__assume = o1) and
  ((use_private_attributes__test_tag__g1__assume1 = o2) and
  ((use_private_attributes__test_tag__g1__assume2 = o3) and
  (use_private_attributes__test_tag__g1__assume3 = o4)))) and
  (us_tag5 = use_private_attributes__test_tag__g1__assume4))) and
  ((((result4 = g1__split_fields) and ((result5 = g1__split_fields1) and
  ((result6 = g1__split_fields2) and (result7 = g1__split_fields3)))) and
  ((use_private_attributes__test_tag__g1__assume = g1__split_fields4) and
  ((use_private_attributes__test_tag__g1__assume1 = g1__split_fields5) and
  ((use_private_attributes__test_tag__g1__assume2 = g1__split_fields6) and
  (use_private_attributes__test_tag__g1__assume3 = g1__split_fields7))))) and
  (g1__attr__tag = us_tag5))) -> (((((to_rep(o5) = 1) and ((c2 = o6) and
  ((o5 = o7) and ((c21 = o8) and (us_null_ext__ = o9))))) and
  (((use_private_attributes__test_tag__g2__assume = o6) and
  ((use_private_attributes__test_tag__g2__assume1 = o7) and
  ((use_private_attributes__test_tag__g2__assume2 = o8) and
  (use_private_attributes__test_tag__g2__assume3 = o9)))) and
  (us_tag5 = use_private_attributes__test_tag__g2__assume4))) and
  ((((result8 = g2__split_fields) and ((result9 = g2__split_fields1) and
  ((result10 = g2__split_fields2) and (result11 = g2__split_fields3)))) and
  ((use_private_attributes__test_tag__g2__assume = g2__split_fields4) and
  ((use_private_attributes__test_tag__g2__assume1 = g2__split_fields5) and
  ((use_private_attributes__test_tag__g2__assume2 = g2__split_fields6) and
  (use_private_attributes__test_tag__g2__assume3 = g2__split_fields7))))) and
  (g2__attr__tag = us_tag5))) -> ((not (bool_eq4({ us_split_fields3 = {
  rec__private_with_attributes__child = c1;
  rec__private_with_attributes__root__f1 = c11; rec__ext__1 = c12 };
  attr__tag1 = c13 }, { us_split_fields3 = {
  rec__private_with_attributes__child = c2;
  rec__private_with_attributes__root__f1 = c21; rec__ext__1 = c22 };
  attr__tag1 = c23 }) = true)) -> ((to_rep(c11) = to_rep(c21)) ->
  ((not (((rc__attr__tag = fc__attr__tag) -> (us_dispatch_eq1({
  us_split_fields5 = { rec__private_with_attributes__root_private_tagged =
  rc__split_fields2; rec__ext__2 = rc__split_fields3 }; attr__tag2 =
  rc__attr__tag }, { us_split_fields5 = {
  rec__private_with_attributes__root_private_tagged = fc__split_fields2;
  rec__ext__2 = fc__split_fields3 }; attr__tag2 = fc__attr__tag
  }) = true)) and ((not (rc__attr__tag = fc__attr__tag)) ->
  (false = true)))) -> (bool_eq3({ us_split_fields1 = {
  rec__private_with_attributes__root__f = g1__split_fields6; rec__ext__ =
  hide_ext__3(g1__split_fields4, g1__split_fields5, g1__split_fields7) };
  attr__tag = g1__attr__tag }, { us_split_fields1 = {
  rec__private_with_attributes__root__f = g2__split_fields6; rec__ext__ =
  hide_ext__3(g2__split_fields4, g2__split_fields5, g2__split_fields7) };
  attr__tag = g2__attr__tag }) = true))))))))))))))
