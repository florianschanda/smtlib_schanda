;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-const dummy1 unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun insaferegion64 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun insaferegion64__function_guard (Bool (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; insaferegion64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (rsp (_ BitVec 64)))
  (! (=>
     (and (dynamic_invariant var true true true) (dynamic_invariant rsp true
     true true))
     (= (= (insaferegion64 var rsp) true)
     (or
     (and (bvule var ((_ int2bv 64) 14987979559889010687))
     (bvuge var (bvadd rsp ((_ int2bv 64) 8))))
     (and (bvule var ((_ int2bv 64) 4611686018427387903))
     (bvuge var ((_ int2bv 64) 0)))))) :pattern ((insaferegion64 var rsp)) )))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-fun readmem64ghost ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64ghost__function_guard ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64ghost__post_axiom
  (assert
  (forall ((mem (Array (_ BitVec 64) unsigned8))
  (x86__memory (Array (_ BitVec 64) unsigned8)))
  (forall ((addr (_ BitVec 64)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64ghost mem addr x86__memory)))
     (and
     (= result (bvor (bvor (bvor (bvor (bvor (bvor (bvor ((_ zero_extend 56)
     (to_rep (select mem addr))) (bvshl ((_ zero_extend 56) (to_rep
                                                            (select mem (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 8))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 16))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 24))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 32))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 40))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 48))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 56))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64ghost
                                                             mem addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned641 unsigned641) Bool)

(declare-const dummy2 unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(define-fun dynamic_invariant2 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const rax (_ BitVec 64))

(declare-const rsp (_ BitVec 64))

(declare-const rbp (_ BitVec 64))

(declare-const memory (Array (_ BitVec 64) unsigned8))

(declare-const saved_rbp_16 (_ BitVec 64))

(declare-const saved_rbp_72 (_ BitVec 64))

(declare-const tmp_register (_ BitVec 64))

(declare-const saved_rbp (_ BitVec 64))

(declare-const saved_ra (_ BitVec 64))

(declare-const saved_mem (Array (_ BitVec 64) unsigned8))

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 (_ BitVec 64))

(declare-const o3 (_ BitVec 64))

(declare-const o4 (_ BitVec 64))

(declare-const o5 (_ BitVec 64))

(declare-const o6 (_ BitVec 64))

(declare-const o7 (_ BitVec 64))

(declare-const o8 (_ BitVec 64))

(declare-const o9 (_ BitVec 64))

(declare-const o10 (_ BitVec 64))

(declare-const o11 (_ BitVec 64))

(declare-const o12 (_ BitVec 64))

(declare-const o13 (_ BitVec 64))

(declare-const o14 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const saved_rbp_161 (_ BitVec 64))

(declare-const result1 (_ BitVec 64))

(declare-const saved_rbp_721 (_ BitVec 64))

(declare-const result2 (_ BitVec 64))

(declare-const tmp_register1 (_ BitVec 64))

(declare-const result3 (_ BitVec 64))

(declare-const saved_rbp1 (_ BitVec 64))

(declare-const result4 (_ BitVec 64))

(declare-const saved_ra1 (_ BitVec 64))

(declare-const result5 map__ref)

(declare-const saved_mem1 (Array (_ BitVec 64) unsigned8))

(declare-const result6 t__ref1)

(declare-const rax1 (_ BitVec 64))

(declare-const result7 t__ref1)

(declare-const rax2 (_ BitVec 64))

(declare-const result8 bool__ref)

(declare-const zeroflag1 Bool)

(declare-const result9 bool__ref)

(declare-const signflag1 Bool)

(declare-const result10 bool__ref)

(declare-const carryflag1 Bool)

(declare-const result11 bool__ref)

(declare-const overflowflag1 Bool)

(declare-const zeroflag2 Bool)

(declare-const carryflag2 Bool)

(declare-const signflag2 Bool)

(declare-const overflowflag2 Bool)

(declare-const rax3 (_ BitVec 64))

(declare-const rcx (_ BitVec 64))

(declare-const rdx (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const tmp_register2 (_ BitVec 64))

(declare-const result12 t__ref1)

(declare-const rax4 (_ BitVec 64))

(declare-const result13 t__ref1)

(declare-const rdx1 (_ BitVec 64))

(declare-const result14 t__ref1)

(declare-const rax5 (_ BitVec 64))

(declare-const result15 bool__ref)

(declare-const zeroflag3 Bool)

(declare-const result16 bool__ref)

(declare-const signflag3 Bool)

(declare-const result17 t__ref1)

(declare-const rdx2 (_ BitVec 64))

(declare-const result18 t__ref1)

(declare-const rax6 (_ BitVec 64))

(declare-const result19 t__ref1)

(declare-const rcx1 (_ BitVec 64))

(declare-const result20 t__ref1)

(declare-const rax7 (_ BitVec 64))

(declare-const result21 bool__ref)

(declare-const zeroflag4 Bool)

(declare-const result22 bool__ref)

(declare-const signflag4 Bool)

(declare-const result23 t__ref1)

(declare-const rax8 (_ BitVec 64))

(declare-const result24 t__ref1)

(declare-const rax9 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const result25 t__ref1)

(declare-const tmp_register3 (_ BitVec 64))

(declare-const result26 t__ref1)

(declare-const rax10 (_ BitVec 64))

(declare-const result27 t__ref1)

(declare-const rax11 (_ BitVec 64))

(declare-const result28 bool__ref)

(declare-const zeroflag5 Bool)

(declare-const result29 bool__ref)

(declare-const signflag5 Bool)

(declare-const result30 bool__ref)

(declare-const carryflag3 Bool)

(declare-const result31 bool__ref)

(declare-const overflowflag3 Bool)

;; H
  (assert
  (and
  (and (= rbp rsp)
  (= (readmem64 (bvsub rbp ((_ int2bv 64) 8)) memory) ((_ int2bv 64) 0)))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (= (inrange64 i (readmem64 (bvsub rbp ((_ int2bv 64) 16)) memory)
     (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory)) true)
  (= (insaferegion64 i (bvadd rsp ((_ int2bv 64) 8))) true))))))

;; H
  (assert
  (and (= o (readmem64 (bvsub rbp ((_ int2bv 64) 16)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                       (select memory (bvsub
                                                       rbp ((_ int2bv 64) 16))))))
  (= (bvand o ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select
                                                                memory (bvadd (bvsub
                                                                rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   memory (bvadd (bvsub
                                                                   rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o1 o))

;; H
  (assert (= (mk_t__ref1 result) (mk_t__ref1 saved_rbp_16)))

;; H
  (assert (= saved_rbp_161 o1))

;; H
  (assert
  (and (= o2 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o2 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory (bvsub
                                                        rbp ((_ int2bv 64) 72))))))
  (= (bvand o2 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvsub
                                                                 rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o2 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvsub
                                                                    rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o2 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o2 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o2 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o2 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o2 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o3 o2))

;; H
  (assert (= (mk_t__ref1 result1) (mk_t__ref1 saved_rbp_72)))

;; H
  (assert (= saved_rbp_721 o3))

;; H
  (assert
  (and (= o4 (readmem64 (bvsub rbp ((_ int2bv 64) 8)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o4 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory (bvsub
                                                        rbp ((_ int2bv 64) 8))))))
  (= (bvand o4 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvsub
                                                                 rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o4 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvsub
                                                                    rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o4 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o4 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o4 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o4 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o4 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o5 o4))

;; H
  (assert (= (mk_t__ref1 result2) (mk_t__ref1 tmp_register)))

;; H
  (assert (= tmp_register1 o5))

;; H
  (assert
  (and (= o6 (readmem64 rbp memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o6 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory
                                                        rbp))))
  (= (bvand o6 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd
                                                                 rbp ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o6 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd
                                                                    rbp ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o6 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o6 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o6 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o6 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o6 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o7 o6))

;; H
  (assert (= (mk_t__ref1 result3) (mk_t__ref1 saved_rbp)))

;; H
  (assert (= saved_rbp1 o7))

;; H
  (assert
  (and (= o8 (readmem64 (bvadd rsp ((_ int2bv 64) 8)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory (bvadd
                                                        rsp ((_ int2bv 64) 8))))))
  (= (bvand o8 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvadd
                                                                 rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o8 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvadd
                                                                    rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o8 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvadd rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o8 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvadd rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o8 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvadd rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o8 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvadd rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o8 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvadd rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o9 o8))

;; H
  (assert (= (mk_t__ref1 result4) (mk_t__ref1 saved_ra)))

;; H
  (assert (= saved_ra1 o9))

;; H
  (assert (= result5 (mk_map__ref saved_mem)))

;; H
  (assert (= saved_mem1 memory))

;; H
  (assert (= rsp ((_ int2bv 64) 12105675798371893255)))

;; H
  (assert
  (and (= o10 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o10 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select memory (bvsub
                                                         rbp ((_ int2bv 64) 72))))))
  (= (bvand o10 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  memory (bvadd (bvsub
                                                                  rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o10 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o10 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o10 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o10 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o10 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o10 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result6 (mk_t__ref1 rax)))

;; H
  (assert (= rax1 o10))

;; H
  (assert (= result7 (mk_t__ref1 rax1)))

;; H
  (assert (= rax2 (bvudiv rax1 ((_ int2bv 64) 8))))

;; H
  (assert (= result8 (mk_bool__ref zeroflag)))

;; H
  (assert
  (= zeroflag1 (ite (= (bvsub rax2 tmp_register1) ((_ int2bv 64) 0)) true
               false)))

;; H
  (assert (= result9 (mk_bool__ref signflag)))

;; H
  (assert
  (= signflag1 (ite (bvugt (bvsub rax2 tmp_register1) ((_ int2bv 64) 9223372036854775807))
               true false)))

;; H
  (assert (= result10 (mk_bool__ref carryflag)))

;; H
  (assert (= carryflag1 (ite (bvult rax2 tmp_register1) true false)))

;; H
  (assert (= result11 (mk_bool__ref overflowflag)))

;; H
  (assert
  (= overflowflag1 (ite (and
                        (and (= signflag1 true)
                        (bvugt tmp_register1 ((_ int2bv 64) 9223372036854775807)))
                        (bvule rax2 ((_ int2bv 64) 9223372036854775807)))
                   true
                   (ite (and
                        (and (not (= signflag1 true))
                        (bvugt rax2 ((_ int2bv 64) 9223372036854775807)))
                        (bvule tmp_register1 ((_ int2bv 64) 9223372036854775807)))
                   true false))))

;; H
  (assert (not (= (ite (= carryflag1 false) zeroflag1 true) true)))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule saved_rbp_161 i)
  (bvule i (bvsub (bvadd saved_rbp_161 saved_rbp_721) ((_ int2bv 64) 1))))
  (= (insaferegion64 i (bvadd rsp ((_ int2bv 64) 8))) true))))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and (not (= (inrange64 i saved_rbp_161 saved_rbp_721) true))
  (not
  (= (inrange64 i (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 8)) true)))
  (= (to_rep (select memory1 i)) (to_rep (select memory i)))))))

;; H
  (assert
  (= saved_rbp_161 (readmem64 (bvsub rbp ((_ int2bv 64) 16)) memory1)))

;; H
  (assert
  (= saved_rbp_721 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory1)))

;; H
  (assert (bvult tmp_register2 (bvudiv saved_rbp_721 ((_ int2bv 64) 8))))

;; H
  (assert (= (readmem64 rbp memory1) saved_rbp1))

;; H
  (assert (= (readmem64 (bvadd rsp ((_ int2bv 64) 8)) memory1) saved_ra1))

;; H
  (assert (= result12 (mk_t__ref1 rax3)))

;; H
  (assert (= rax4 tmp_register2))

;; H
  (assert (= result13 (mk_t__ref1 rdx)))

;; H
  (assert (= rdx1 (bvmul rax4 ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o11 (readmem64 (bvsub rbp ((_ int2bv 64) 16)) memory1))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o11 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select memory1 (bvsub
                                                         rbp ((_ int2bv 64) 16))))))
  (= (bvand o11 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  memory1 (bvadd (bvsub
                                                                  rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o11 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o11 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o11 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o11 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o11 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o11 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 16)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result14 (mk_t__ref1 rax4)))

;; H
  (assert (= rax5 o11))

;; H
  (assert (= result15 (mk_bool__ref zeroflag2)))

;; H
  (assert
  (= zeroflag3 (ite (= (bvadd rdx1 rax5) ((_ int2bv 64) 0)) true false)))

;; H
  (assert (= result16 (mk_bool__ref signflag2)))

;; H
  (assert
  (= signflag3 (ite (bvugt (bvadd rdx1 rax5) ((_ int2bv 64) 9223372036854775807))
               true false)))

;; H
  (assert (= result17 (mk_t__ref1 rdx1)))

;; H
  (assert (= rdx2 (bvadd rdx1 rax5)))

;; H
  (assert (= result18 (mk_t__ref1 rax5)))

;; H
  (assert (= rax6 tmp_register2))

;; H
  (assert (= result19 (mk_t__ref1 rcx)))

;; H
  (assert (= rcx1 (bvmul rax6 ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o12 (readmem64 (bvsub rbp ((_ int2bv 64) 24)) memory1))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o12 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select memory1 (bvsub
                                                         rbp ((_ int2bv 64) 24))))))
  (= (bvand o12 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  memory1 (bvadd (bvsub
                                                                  rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o12 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o12 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o12 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o12 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o12 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o12 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rbp ((_ int2bv 64) 24)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result20 (mk_t__ref1 rax6)))

;; H
  (assert (= rax7 o12))

;; H
  (assert (= result21 (mk_bool__ref zeroflag3)))

;; H
  (assert
  (= zeroflag4 (ite (= (bvadd rax7 rcx1) ((_ int2bv 64) 0)) true false)))

;; H
  (assert (= result22 (mk_bool__ref signflag3)))

;; H
  (assert
  (= signflag4 (ite (bvugt (bvadd rax7 rcx1) ((_ int2bv 64) 9223372036854775807))
               true false)))

;; H
  (assert (= result23 (mk_t__ref1 rax7)))

;; H
  (assert (= rax8 (bvadd rax7 rcx1)))

;; H
  (assert
  (and (= o13 (readmem64 rax8 memory1))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o13 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select memory1
                                                         rax8))))
  (= (bvand o13 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  memory1 (bvadd
                                                                  rax8 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o13 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd rax8 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o13 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd rax8 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o13 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd rax8 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o13 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd rax8 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o13 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd rax8 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o13 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd rax8 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result24 (mk_t__ref1 rax8)))

;; H
  (assert (= rax9 o13))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule saved_rbp_161 i)
  (bvule i (bvsub (bvadd saved_rbp_161 saved_rbp_721) ((_ int2bv 64) 1))))
  (= (insaferegion64 i (bvadd rsp ((_ int2bv 64) 8))) true))))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and (not (= (inrange64 i saved_rbp_161 saved_rbp_721) true))
  (not
  (= (inrange64 i (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 8)) true)))
  (= (to_rep (select memory1 i)) (to_rep (select memory i)))))))

;; H
  (assert
  (= saved_rbp_161 (readmem64 (bvsub rbp ((_ int2bv 64) 16)) memory1)))

;; H
  (assert
  (= saved_rbp_721 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory1)))

;; H
  (assert (bvult tmp_register2 (bvudiv saved_rbp_721 ((_ int2bv 64) 8))))

;; H
  (assert (= (inrange64 rdx2 saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 1)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 2)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 3)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 4)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 5)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 6)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (= (inrange64 (bvadd rdx2 ((_ int2bv 64) 7)) saved_rbp_161 saved_rbp_721) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax9 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select memory2
                                                          rdx2))))
  (= (bvand rax9 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   memory2 (bvadd
                                                                   rdx2 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rax9 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rdx2 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rax9 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rdx2 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rax9 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rdx2 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rax9 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rdx2 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rax9 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rdx2 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rax9 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rdx2 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i rdx2)) (not (= i (bvadd rdx2 ((_ int2bv 64) 1)))))
  (not (= i (bvadd rdx2 ((_ int2bv 64) 2)))))
  (not (= i (bvadd rdx2 ((_ int2bv 64) 3)))))
  (not (= i (bvadd rdx2 ((_ int2bv 64) 4)))))
  (not (= i (bvadd rdx2 ((_ int2bv 64) 5)))))
  (not (= i (bvadd rdx2 ((_ int2bv 64) 6)))))
  (not (= i (bvadd rdx2 ((_ int2bv 64) 7)))))
  (= (to_rep (select memory2 i)) (to_rep (select memory1 i))))))))

;; H
  (assert (= result25 (mk_t__ref1 tmp_register2)))

;; H
  (assert (= tmp_register3 (bvadd tmp_register2 ((_ int2bv 64) 1))))

;; H
  (assert
  (and (= o14 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory2))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o14 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select memory2 (bvsub
                                                         rbp ((_ int2bv 64) 72))))))
  (= (bvand o14 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  memory2 (bvadd (bvsub
                                                                  rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o14 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory2 (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o14 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory2 (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o14 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory2 (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o14 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory2 (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o14 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory2 (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o14 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory2 (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result26 (mk_t__ref1 rax9)))

;; H
  (assert (= rax10 o14))

;; H
  (assert (= result27 (mk_t__ref1 rax10)))

;; H
  (assert (= rax11 (bvudiv rax10 ((_ int2bv 64) 8))))

;; H
  (assert (= result28 (mk_bool__ref zeroflag4)))

;; H
  (assert
  (= zeroflag5 (ite (= (bvsub rax11 tmp_register3) ((_ int2bv 64) 0)) true
               false)))

;; H
  (assert (= result29 (mk_bool__ref signflag4)))

;; H
  (assert
  (= signflag5 (ite (bvugt (bvsub rax11 tmp_register3) ((_ int2bv 64) 9223372036854775807))
               true false)))

;; H
  (assert (= result30 (mk_bool__ref carryflag2)))

;; H
  (assert (= carryflag3 (ite (bvult rax11 tmp_register3) true false)))

;; H
  (assert (= result31 (mk_bool__ref overflowflag2)))

;; H
  (assert
  (= overflowflag3 (ite (and
                        (and (= signflag5 true)
                        (bvugt tmp_register3 ((_ int2bv 64) 9223372036854775807)))
                        (bvule rax11 ((_ int2bv 64) 9223372036854775807)))
                   true
                   (ite (and
                        (and (not (= signflag5 true))
                        (bvugt rax11 ((_ int2bv 64) 9223372036854775807)))
                        (bvule tmp_register3 ((_ int2bv 64) 9223372036854775807)))
                   true false))))

;; H
  (assert (not (= (ite (= carryflag3 false) zeroflag5 true) true)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= saved_rbp_721 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory2))))
(check-sat)
(exit)
