;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-sort modular 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (modular modular) Bool)

(declare-const dummy1 modular)

(declare-datatypes ((modular__ref 0))
(((mk_modular__ref (modular__content modular)))))
(define-fun modular__ref___8__projection ((a modular__ref)) modular (modular__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_351 (_ BitVec 64))
  (temp___is_init_348 Bool) (temp___skip_constant_349 Bool)
  (temp___do_toplevel_350 Bool)) Bool true)

(declare-sort bit_position 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (bit_position bit_position) Bool)

(declare-const dummy2 bit_position)

(declare-datatypes ((bit_position__ref 0))
(((mk_bit_position__ref (bit_position__content bit_position)))))
(define-fun bit_position__ref___7__projection ((a bit_position__ref)) bit_position
  (bit_position__content a))

(define-fun dynamic_invariant2 ((temp___expr_357 Int)
  (temp___is_init_354 Bool) (temp___skip_constant_355 Bool)
  (temp___do_toplevel_356 Bool)) Bool (=>
                                      (or (= temp___is_init_354 true)
                                      (<= 0 63)) (in_range1 temp___expr_357)))

(declare-sort mask_size 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (mask_size mask_size) Bool)

(declare-const dummy3 mask_size)

(declare-datatypes ((mask_size__ref 0))
(((mk_mask_size__ref (mask_size__content mask_size)))))
(define-fun mask_size__ref___7__projection ((a mask_size__ref)) mask_size
  (mask_size__content a))

(declare-fun shift_right ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun shift_right__function_guard ((_ BitVec 64) (_ BitVec 64)
  Int) Bool)

(declare-fun nth1 ((_ BitVec 8) Int) Bool)

(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun to_int2 ((_ BitVec 8)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0)) (((mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 16) Int) Bool)

(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int3 ((_ BitVec 16)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv2 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes ((t__ref2 0))
(((mk_t__ref2 (t__content2 (_ BitVec 16))))))
(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 32) Int) Bool)

(declare-fun lsr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right4 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left4 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int4 ((_ BitVec 32)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv3 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes ((t__ref3 0))
(((mk_t__ref3 (t__content3 (_ BitVec 32))))))
(declare-fun power3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

;; shift_right__post_axiom
  (assert
  (forall ((v (_ BitVec 64)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 v true true true) (dynamic_invariant amount
     true true true)) (dynamic_invariant1 (shift_right v amount) true false
     true)) :pattern ((shift_right v amount)) ))))

;; shift_right__def_axiom
  (assert
  (forall ((v (_ BitVec 64)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 v true true true) (dynamic_invariant amount
     true true true))
     (= (shift_right v amount) (ite (and (<= 1 64) (<= 64 8))
                               ((_ zero_extend 56) (ite (< amount 8)
                                                   (bvlshr ((_ extract 7 0) v) ((_ int2bv 8) amount))
                                                   ((_ int2bv 8) 0)))
                               (ite (and (<= 9 64) (<= 64 16))
                               ((_ zero_extend 48) (ite (< amount 16)
                                                   (bvlshr ((_ extract 15 0) v) ((_ int2bv 16) amount))
                                                   ((_ int2bv 16) 0)))
                               (ite (and (<= 17 64) (<= 64 32))
                               ((_ zero_extend 32) (bvlshr ((_ extract 31 0) v) ((_ int2bv 32) amount)))
                               (bvlshr v ((_ int2bv 64) amount))))))) :pattern (
  (shift_right v amount)) ))))

(declare-fun shift_left ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun shift_left__function_guard ((_ BitVec 64) (_ BitVec 64)
  Int) Bool)

;; shift_left__post_axiom
  (assert
  (forall ((v (_ BitVec 64)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 v true true true) (dynamic_invariant amount
     true true true)) (dynamic_invariant1 (shift_left v amount) true false
     true)) :pattern ((shift_left v amount)) ))))

;; shift_left__def_axiom
  (assert
  (forall ((v (_ BitVec 64)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 v true true true) (dynamic_invariant amount
     true true true))
     (= (shift_left v amount) (ite (and (<= 1 64) (<= 64 8))
                              ((_ zero_extend 56) (ite (< amount 8)
                                                  (bvshl ((_ extract 7 0) v) ((_ int2bv 8) amount))
                                                  ((_ int2bv 8) 0)))
                              (ite (and (<= 9 64) (<= 64 16))
                              ((_ zero_extend 48) (ite (< amount 16)
                                                  (bvshl ((_ extract 15 0) v) ((_ int2bv 16) amount))
                                                  ((_ int2bv 16) 0)))
                              (ite (and (<= 17 64) (<= 64 32))
                              ((_ zero_extend 32) (bvshl ((_ extract 31 0) v) ((_ int2bv 32) amount)))
                              (bvshl v ((_ int2bv 64) amount))))))) :pattern (
  (shift_left v amount)) ))))

(declare-fun make_mask (Int) (_ BitVec 64))

(declare-fun make_mask__function_guard ((_ BitVec 64) Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_363 Int)
  (temp___is_init_360 Bool) (temp___skip_constant_361 Bool)
  (temp___do_toplevel_362 Bool)) Bool (=>
                                      (or (= temp___is_init_360 true)
                                      (<= 1 64)) (in_range2 temp___expr_363)))

;; make_mask__post_axiom
  (assert
  (forall ((num_bits Int))
  (! (=> (dynamic_invariant3 num_bits true true true) (dynamic_invariant1
     (make_mask num_bits) true false true)) :pattern ((make_mask num_bits)) )))

;; make_mask__def_axiom
  (assert
  (forall ((num_bits Int))
  (! (=> (dynamic_invariant3 num_bits true true true)
     (= (make_mask num_bits) (shift_right
                             ((_ int2bv 64) 18446744073709551615)
                             (- 64 num_bits)))) :pattern ((make_mask
                                                          num_bits)) )))

(declare-const value (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const from Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const to__ Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const len Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const mask (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

;; len__def_axiom
  (assert (= len (+ (- to__ from) 1)))

;; mask__def_axiom
  (assert (= mask (make_mask len)))

(declare-const result__ (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__len__assume Int)

(declare-const o Int)

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__mask__assume (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 (_ BitVec 64))

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 (_ BitVec 64))

(declare-const o6 Int)

(declare-const o7 (_ BitVec 64))

(declare-const o8 (_ BitVec 64))

(declare-const o9 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const result__1 (_ BitVec 64))

(declare-const result1 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result1 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result2 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result3 (_ BitVec 64))

(declare-const result__2 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result4 (_ BitVec 64))

(declare-const result__3 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result5 (_ BitVec 64))

(declare-const result2 Bool)

(declare-const result3 Bool)

(define-fun bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result6 () t__ref
  (mk_t__ref
  bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result4))

(define-fun bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result7 () t__ref
  (mk_t__ref
  bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result2))

(define-fun result4 () t__ref (mk_t__ref result1))

(define-fun result5 () t__ref (mk_t__ref result))

(define-fun bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result8 () t__ref
  (mk_t__ref
  bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__result))

(define-fun result__4 () t__ref (mk_t__ref result__))

;; H
  (assert true)

;; H
  (assert (in_range1 from))

;; H
  (assert (in_range1 to__))

;; H
  (assert (<= from to__))

;; H
  (assert
  (and
  (= bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__len__assume (+ (-
  to__ from) 1)) (in_range (+ (- to__ from) 1))))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__len__assume
  len))

;; H
  (assert (in_range len))

;; H
  (assert (and (= o len) (in_range2 len)))

;; H
  (assert
  (and
  (= bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__mask__assume
  (make_mask o))
  (= bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__mask__assume
  (shift_right ((_ int2bv 64) 18446744073709551615) (- 64 o)))))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_64__functions__extract_bits_inline_always__mask__assume
  mask))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and (= o1 (shift_right value from))
  (= o1 (ite (and (<= 1 64) (<= 64 8))
        ((_ zero_extend 56) (ite (< from 8)
                            (bvlshr ((_ extract 7 0) value) ((_ int2bv 8)
                            from)) ((_ int2bv 8) 0)))
        (ite (and (<= 9 64) (<= 64 16))
        ((_ zero_extend 48) (ite (< from 16)
                            (bvlshr ((_ extract 15 0) value) ((_ int2bv 16)
                            from)) ((_ int2bv 16) 0)))
        (ite (and (<= 17 64) (<= 64 32))
        ((_ zero_extend 32) (bvlshr ((_ extract 31 0) value) ((_ int2bv 32)
        from))) (bvlshr value ((_ int2bv 64) from))))))))

;; H
  (assert (= o2 (bvand o1 mask)))

;; H
  (assert (= result5 result__4))

;; H
  (assert (= result__1 o2))

(assert
;; WP_parameter_def
 ;; File "bits_manipulation.ads", line 3, characters 0-0
  (not (bvule result__1 mask)))
(check-sat)
(exit)
