;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort index 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (index index) Bool)

(declare-const dummy index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-fun to_rep (index) Int)

(declare-fun of_rep (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__sum_elem__interval__first index)(rec__sum_elem__interval__last index)))))
(define-fun us_split_fields_First__projection ((a us_split_fields)) index
  (rec__sum_elem__interval__first a))

(define-fun us_split_fields_Last__projection ((a us_split_fields)) index
  (rec__sum_elem__interval__last a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__sum_elem__interval__first
                           (us_split_fields1 a))) (to_rep
                                                  (rec__sum_elem__interval__first
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__sum_elem__interval__last
                           (us_split_fields1 a))) (to_rep
                                                  (rec__sum_elem__interval__last
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const sum_elem__interval__first__first__bit Int)

(declare-const sum_elem__interval__first__last__bit Int)

(declare-const sum_elem__interval__first__position Int)

;; sum_elem__interval__first__first__bit_axiom
  (assert (<= 0 sum_elem__interval__first__first__bit))

;; sum_elem__interval__first__last__bit_axiom
  (assert
  (< sum_elem__interval__first__first__bit sum_elem__interval__first__last__bit))

;; sum_elem__interval__first__position_axiom
  (assert (<= 0 sum_elem__interval__first__position))

(declare-const sum_elem__interval__last__first__bit Int)

(declare-const sum_elem__interval__last__last__bit Int)

(declare-const sum_elem__interval__last__position Int)

;; sum_elem__interval__last__first__bit_axiom
  (assert (<= 0 sum_elem__interval__last__first__bit))

;; sum_elem__interval__last__last__bit_axiom
  (assert
  (< sum_elem__interval__last__first__bit sum_elem__interval__last__last__bit))

;; sum_elem__interval__last__position_axiom
  (assert (<= 0 sum_elem__interval__last__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((interval__ref (mk_interval__ref (interval__content us_rep)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep (interval__content
                                                                  a))

(declare-sort capacity_range 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (capacity_range capacity_range) Bool)

(declare-const dummy2 capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__sum_elem__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range
  (rec__sum_elem__partitions__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__sum_elem__partitions__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type
  (rec__sum_elem__partitions__vector a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                 a))

(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const sum_elem__partitions__vector__capacity__first__bit Int)

(declare-const sum_elem__partitions__vector__capacity__last__bit Int)

(declare-const sum_elem__partitions__vector__capacity__position Int)

;; sum_elem__partitions__vector__capacity__first__bit_axiom
  (assert (<= 0 sum_elem__partitions__vector__capacity__first__bit))

;; sum_elem__partitions__vector__capacity__last__bit_axiom
  (assert
  (< sum_elem__partitions__vector__capacity__first__bit sum_elem__partitions__vector__capacity__last__bit))

;; sum_elem__partitions__vector__capacity__position_axiom
  (assert (<= 0 sum_elem__partitions__vector__capacity__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content
                                                               a))

(declare-datatypes ()
((element_type__ref (mk_element_type__ref (element_type__content us_rep)))))
(define-fun element_type__ref___projection ((a element_type__ref)) us_rep
  (element_type__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(declare-fun to_rep1 (capacity_range) Int)

(declare-fun of_rep1 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun capacity ((container us_rep1)) Int (ite (= (of_int 1) true)
                                               (to_rep1
                                               (rec__sum_elem__partitions__vector__capacity
                                               (us_split_discrs1 container)))
                                               10001))

(declare-fun capacity__function_guard (Int us_rep1) Bool)

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-datatypes ()
((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) us_rep
  (element_type__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq1 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                   a))

(declare-fun get (us_rep2 Int) us_rep)

(declare-fun get__function_guard (us_rep us_rep2 Int) Bool)

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ (- 1) (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(define-fun olt ((left us_rep2)
  (right us_rep2)) Bool (and (< (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 0 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (bool_eq
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun model__ (us_rep1) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep1) Bool)

(define-fun last_index ((container us_rep1)) Int (last (model__ container)))

(declare-fun last_index__function_guard (Int us_rep1) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const sum_elem__partitions__vector__capacity__first__bit1 Int)

(declare-const sum_elem__partitions__vector__capacity__last__bit1 Int)

(declare-const sum_elem__partitions__vector__capacity__position1 Int)

;; sum_elem__partitions__vector__capacity__first__bit_axiom
  (assert (<= 0 sum_elem__partitions__vector__capacity__first__bit1))

;; sum_elem__partitions__vector__capacity__last__bit_axiom
  (assert
  (< sum_elem__partitions__vector__capacity__first__bit1 sum_elem__partitions__vector__capacity__last__bit1))

;; sum_elem__partitions__vector__capacity__position_axiom
  (assert (<= 0 sum_elem__partitions__vector__capacity__position1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ()
((partition__ref (mk_partition__ref (partition__content us_rep1)))))
(define-fun partition__ref___projection ((a partition__ref)) us_rep1
  (partition__content a))

(declare-fun first_index__function_guard (Int us_rep1) Bool)

(define-fun element ((container us_rep1)
  (index1 Int)) us_rep (get (model__ container) index1))

(declare-fun element__function_guard (us_rep us_rep1 Int) Bool)

(define-fun in_range3 ((rec__sum_elem__partitions__vector__capacity1 Int)
  (a us_rep1)) Bool (= rec__sum_elem__partitions__vector__capacity1 (to_rep1
                                                                    (rec__sum_elem__partitions__vector__capacity
                                                                    (us_split_discrs1
                                                                    a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-const sum_elem__partitions__vector__capacity__first__bit2 Int)

(declare-const sum_elem__partitions__vector__capacity__last__bit2 Int)

(declare-const sum_elem__partitions__vector__capacity__position2 Int)

;; sum_elem__partitions__vector__capacity__first__bit_axiom
  (assert (<= 0 sum_elem__partitions__vector__capacity__first__bit2))

;; sum_elem__partitions__vector__capacity__last__bit_axiom
  (assert
  (< sum_elem__partitions__vector__capacity__first__bit2 sum_elem__partitions__vector__capacity__last__bit2))

;; sum_elem__partitions__vector__capacity__position_axiom
  (assert (<= 0 sum_elem__partitions__vector__capacity__position2))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes () ((tpS__ref (mk_tpS__ref (tpS__content us_rep1)))))
(define-fun tpS__ref___projection ((a tpS__ref)) us_rep1 (tpS__content a))

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

(define-fun dynamic_invariant ((temp___expr_361 us_rep1)
  (temp___is_init_358 Bool) (temp___skip_constant_359 Bool)
  (temp___do_toplevel_360 Bool)) Bool (=>
                                      (not (= temp___skip_constant_359 true))
                                      (in_range3 10 temp___expr_361)))

(define-fun default_initial_assumption ((temp___expr_363 us_rep1)
  (temp___skip_top_level_364 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__sum_elem__partitions__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_363))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_364 true))
                                         (= (is_empty temp___expr_363) true))))

(declare-const p__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_189 Int)
  (temp___is_init_186 Bool) (temp___skip_constant_187 Bool)
  (temp___do_toplevel_188 Bool)) Bool (=>
                                      (or (= temp___is_init_186 true)
                                      (<= 0 5)) (in_range temp___expr_189)))

(declare-sort count_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (count_type count_type) Bool)

(declare-const dummy7 count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_141)))

(declare-sort extended_index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-const dummy8 extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant3 ((temp___expr_223 Int)
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)) Bool (=>
                                      (or (= temp___is_init_220 true)
                                      (<= (- 1) 10001)) (in_range5
                                      temp___expr_223)))

(define-fun dynamic_invariant4 ((temp___expr_229 Int)
  (temp___is_init_226 Bool) (temp___skip_constant_227 Bool)
  (temp___do_toplevel_228 Bool)) Bool (=>
                                      (or (= temp___is_init_226 true)
                                      (<= 0 10001)) (in_range1
                                      temp___expr_229)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant4 result true
     false true))) :pattern ((length container)) )))

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 0 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (bool_eq
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_265 us_rep2)
  (temp___skip_top_level_266 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_266 true))
                                         (= (length1 temp___expr_265) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort index_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (index_type index_type) Bool)

(declare-const dummy9 index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_209 Int)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)) Bool (=>
                                      (or (= temp___is_init_206 true)
                                      (<= 0 10000)) (in_range6
                                      temp___expr_209)))

(declare-sort extended_index1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (extended_index1 extended_index1) Bool)

(declare-const dummy10 extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1
  (extended_index__content1 a))

(define-fun dynamic_invariant6 ((temp___expr_258 Int)
  (temp___is_init_255 Bool) (temp___skip_constant_256 Bool)
  (temp___do_toplevel_257 Bool)) Bool (=>
                                      (or (= temp___is_init_255 true)
                                      (<= (- 1) 10000)) (in_range7
                                      temp___expr_258)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ (- 1) result) 10000) (dynamic_invariant2 result true false
     true))) :pattern ((length1 container)) )))

;; get__post_axiom
  (assert true)

(declare-const p__split_fields us_main_type)

(declare-const o index)

(declare-const o1 index)

(declare-const o2 index)

(declare-const o3 index)

(declare-const o4 index)

(declare-const o5 index)

;; H
  (assert
  (= 10 (to_rep1
        (rec__sum_elem__partitions__vector__capacity p__split_discrs))))

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= (to_rep o1) 1))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

(assert
;; WP_parameter_def
 ;; File "sum_elem.adb", line 4, characters 0-0
  (not
  (< (length
     (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))
  (capacity (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))))))
(check-sat)
(exit)
