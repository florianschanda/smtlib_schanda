(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type et1

predicate in_range(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : et1, et1 -> bool

logic dummy : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq2 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq2(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq2(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq2(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,et1) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "ar.ads", line 62, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,et1) farray. forall o:et1. forall o1:(int,et1) farray.
  forall o2:et1. forall o3:(int,et1) farray. forall o4:et1.
  forall o5:(int,et1) farray. forall o6:et1. forall o7:(int,et1) farray.
  forall o8:int. forall o9:et1. forall o10:(int,et1) farray. forall o11:et1.
  forall o12:(int,et1) farray. forall o13:et1. forall o14:(int,et1) farray.
  forall o15:et1. forall o16:(int,et1) farray. forall o17:int.
  forall o18:et1. forall o19:(int,et1) farray. forall o20:et1.
  forall o21:(int,et1) farray. forall o22:int. forall o23:et1.
  forall o24:(int,et1) farray. forall o25:et1. forall o26:(int,et1) farray.
  forall result:(int,et1) farray. forall a1:(int,et1) farray.
  forall result1:(int,et1) farray. forall a2:(int,et1) farray.
  forall result2:(int,et1) farray. forall a3:(int,et1) farray.
  forall result3:(int,et1) farray. forall a4:(int,et1) farray.
  forall result4:(int,et1) farray. forall a5:(int,et1) farray.
  forall result5:(int,et1) farray. forall a6:(int,et1) farray.
  forall result6:(int,et1) farray. forall a7:(int,et1) farray.
  forall result7:(int,et1) farray. forall a8:(int,et1) farray.
  forall result8:(int,et1) farray. forall a9:(int,et1) farray.
  forall result9:(int,et1) farray. forall a10:(int,et1) farray.
  forall result10:(int,et1) farray. forall a11:(int,et1) farray.
  forall result11:(int,et1) farray. forall a12:(int,et1) farray.
  forall result12:(int,et1) farray. forall a13:(int,et1) farray.
  forall a14:(int,et1) farray. forall a15:(int,et1) farray. ((((({
  map__content = result } = { map__content = a }) and (a1 = b)) and
  ((((to_rep(o) = to_rep((b[4]))) and (o1 = (a1[5 <- o]))) and
  ((a1 = result1) and (a2 = o1))) and ((((to_rep(o2) = to_rep((a2[6]))) and
  (o3 = (a2[3 <- o2]))) and ((a2 = result2) and (a3 = o3))) and
  ((((to_rep(o4) = 0) and (o5 = (a3[6 <- o4]))) and ((a3 = result3) and
  (a4 = o5))) and ((((to_rep(o6) = to_rep((a4[6]))) and
  (o7 = (a4[7 <- o6]))) and ((a4 = result4) and (a5 = o7))) and
  ((((((o8 = (to_rep((a5[5])) - to_rep((a5[4])))) and
  in_range((to_rep((a5[5])) - to_rep((a5[4]))))) and (to_rep(o9) = o8)) and
  (o10 = (a5[4 <- o9]))) and ((a5 = result5) and (a6 = o10))) and
  ((((to_rep(o11) = 0) and (o12 = (a6[5 <- o11]))) and ((a6 = result6) and
  (a7 = o12))) and ((((to_rep(o13) = 0) and (o14 = (a7[10 <- o13]))) and
  ((a7 = result7) and (a8 = o14))) and ((((to_rep(o15) = 0) and
  (o16 = (a8[9 <- o15]))) and ((a8 = result8) and (a9 = o16))) and
  ((((((o17 = (to_rep((b[2])) - to_rep((a9[2])))) and
  in_range((to_rep((b[2])) - to_rep((a9[2]))))) and (to_rep(o18) = o17)) and
  (o19 = (a9[1 <- o18]))) and ((a9 = result9) and (a10 = o19))) and
  ((((to_rep(o20) = 0) and (o21 = (a10[2 <- o20]))) and ((a10 = result10) and
  (a11 = o21))) and ((((((o22 = (to_rep((a11[3])) - to_rep((b[6])))) and
  in_range((to_rep((a11[3])) - to_rep((b[6]))))) and (to_rep(o23) = o22)) and
  (o24 = (a11[3 <- o23]))) and ((result11 = a11) and (a12 = o24))) and
  (((to_rep(o25) = 0) and (o26 = (a12[8 <- o25]))) and ((result12 = a12) and
  (a13 = o26))))))))))))))) and ((a13 = a14) and (a15 = a13))) ->
  in_range(to_rep((a14[1])))))
