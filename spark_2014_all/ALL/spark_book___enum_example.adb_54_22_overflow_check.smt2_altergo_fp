(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type field

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : field, field -> bool

logic dummy5 : field

type field__ref = { field__content : field
}

function field__ref___projection(a: field__ref) : field = (a).field__content

type number_base

predicate in_range4(x: int) = ((2 <= x) and (x <= 16))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : number_base, number_base -> bool

logic dummy6 : number_base

type number_base__ref = { number_base__content : number_base
}

function number_base__ref___projection(a: number_base__ref) : number_base =
  (a).number_base__content

type type_set

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : type_set, type_set -> bool

logic dummy7 : type_set

type type_set__ref = { type_set__content : type_set
}

function type_set__ref___projection(a: type_set__ref) : type_set =
  (a).type_set__content

logic attr__ATTRIBUTE_ADDRESS : int

type day_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : day_type, day_type -> bool

logic dummy8 : day_type

type day_type__ref = { day_type__content : day_type
}

function day_type__ref___projection(a: day_type__ref) : day_type =
  (a).day_type__content

type traffic_light_color

predicate in_range7(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : traffic_light_color, traffic_light_color -> bool

logic dummy9 : traffic_light_color

type traffic_light_color__ref = { traffic_light_color__content :
traffic_light_color
}

function traffic_light_color__ref___projection(a: traffic_light_color__ref) : traffic_light_color =
  (a).traffic_light_color__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type enum

predicate in_range8(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : enum, enum -> bool

logic dummy10 : enum

type enum__ref = { enum__content : enum
}

function enum__ref___projection(a: enum__ref) : enum = (a).enum__content

logic next_day : int -> int

logic next_day__function_guard : int, int -> prop

axiom next_day__post_axiom :
  (forall day:int [next_day(day)]. (in_range6(day) ->
  in_range6(next_day(day))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic temp___String_Literal_545 : unit -> (int,character) farray

axiom temp___String_Literal_545__def_axiom :
  ((((((((((((((((((to_rep((temp___String_Literal_545(void)[1])) = 87) and
  (to_rep((temp___String_Literal_545(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_545(void)[3])) = 97)) and
  (to_rep((temp___String_Literal_545(void)[4])) = 116)) and
  (to_rep((temp___String_Literal_545(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_545(void)[6])) = 100)) and
  (to_rep((temp___String_Literal_545(void)[7])) = 97)) and
  (to_rep((temp___String_Literal_545(void)[8])) = 121)) and
  (to_rep((temp___String_Literal_545(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_545(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_545(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_545(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_545(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_545(void)[14])) = 111)) and
  (to_rep((temp___String_Literal_545(void)[15])) = 100)) and
  (to_rep((temp___String_Literal_545(void)[16])) = 97)) and
  (to_rep((temp___String_Literal_545(void)[17])) = 121)) and
  (to_rep((temp___String_Literal_545(void)[18])) = 63))

logic temp___String_Literal_546 : unit -> (int,character) farray

axiom temp___String_Literal_546__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_546(void)[1])) = 84) and
  (to_rep((temp___String_Literal_546(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_546(void)[3])) = 109)) and
  (to_rep((temp___String_Literal_546(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_546(void)[5])) = 114)) and
  (to_rep((temp___String_Literal_546(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_546(void)[7])) = 111)) and
  (to_rep((temp___String_Literal_546(void)[8])) = 119)) and
  (to_rep((temp___String_Literal_546(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_546(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_546(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_546(void)[12])) = 32))

logic temp___String_Literal_547 : unit -> (int,character) farray

axiom temp___String_Literal_547__def_axiom :
  ((((((((((((((((((((to_rep((temp___String_Literal_547(void)[1])) = 84) and
  (to_rep((temp___String_Literal_547(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_547(void)[3])) = 100)) and
  (to_rep((temp___String_Literal_547(void)[4])) = 97)) and
  (to_rep((temp___String_Literal_547(void)[5])) = 121)) and
  (to_rep((temp___String_Literal_547(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_547(void)[7])) = 109)) and
  (to_rep((temp___String_Literal_547(void)[8])) = 117)) and
  (to_rep((temp___String_Literal_547(void)[9])) = 115)) and
  (to_rep((temp___String_Literal_547(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_547(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_547(void)[12])) = 98)) and
  (to_rep((temp___String_Literal_547(void)[13])) = 101)) and
  (to_rep((temp___String_Literal_547(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_547(void)[15])) = 83)) and
  (to_rep((temp___String_Literal_547(void)[16])) = 117)) and
  (to_rep((temp___String_Literal_547(void)[17])) = 110)) and
  (to_rep((temp___String_Literal_547(void)[18])) = 100)) and
  (to_rep((temp___String_Literal_547(void)[19])) = 97)) and
  (to_rep((temp___String_Literal_547(void)[20])) = 121))

logic temp___String_Literal_548 : unit -> (int,character) farray

axiom temp___String_Literal_548__def_axiom :
  ((((((((((((((((((to_rep((temp___String_Literal_548(void)[1])) = 84) and
  (to_rep((temp___String_Literal_548(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_548(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_548(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_548(void)[5])) = 119)) and
  (to_rep((temp___String_Literal_548(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_548(void)[7])) = 101)) and
  (to_rep((temp___String_Literal_548(void)[8])) = 107)) and
  (to_rep((temp___String_Literal_548(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_548(void)[10])) = 100)) and
  (to_rep((temp___String_Literal_548(void)[11])) = 97)) and
  (to_rep((temp___String_Literal_548(void)[12])) = 121)) and
  (to_rep((temp___String_Literal_548(void)[13])) = 115)) and
  (to_rep((temp___String_Literal_548(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_548(void)[15])) = 97)) and
  (to_rep((temp___String_Literal_548(void)[16])) = 114)) and
  (to_rep((temp___String_Literal_548(void)[17])) = 101)) and
  (to_rep((temp___String_Literal_548(void)[18])) = 32))

 (* File "enum_example.adb", line 13, characters 0-0 *)
goal WP_parameter_def :
  (forall default_base:int. forall default_width:int.
  forall default_setting:int. forall today:int. forall tomorrow:int.
  forall count:int. forall day:int. forall color:int. forall color1:int.
  forall o:int. forall enum_example__day_io__get__2__item:int.
  forall result:int. forall today1:int. forall result1:int.
  forall tomorrow1:int. forall result2:int. forall day1:int.
  forall result3:int. forall day2:int. forall result4:int. forall day3:int.
  forall result5:int. forall day4:int. forall result6:int. forall day5:int.
  forall result7:int. forall color2:int. forall result8:int.
  forall color3:int. forall result9:int. forall color4:int.
  forall result10:int. forall count1:int. forall result11:int.
  forall color5:int. (in_range4(default_base) -> (in_range3(default_width) ->
  (in_range5(default_setting) -> (((0 <= 6) -> in_range6(today)) ->
  (((0 <= 6) -> in_range6(tomorrow)) -> ((((-2147483648) <= 2147483647) ->
  in_range(count)) -> ((in_range8(enum_example__day_io__get__2__item) and
  ((result = today) and (today1 = enum_example__day_io__get__2__item))) ->
  ((((o = next_day(today1)) and in_range6(o)) and ((result1 = tomorrow) and
  (tomorrow1 = o))) -> ((((result2 = day) and (day1 = 0)) and
  (((result3 = day1) and (day2 = 1)) and (((result4 = day2) and
  (day3 = 2)) and (((result5 = day3) and (day4 = 3)) and
  ((result6 = day4) and (day5 = 4)))))) -> ((((result7 = color) and
  (color2 = 0)) and (((result8 = color2) and (color3 = 1)) and
  ((result9 = color3) and (color4 = 2)))) -> (((result10 = count) and
  (count1 = 0)) -> (((result11 = color1) and (color5 = 0)) ->
  in_range((count1 + 1)))))))))))))))
