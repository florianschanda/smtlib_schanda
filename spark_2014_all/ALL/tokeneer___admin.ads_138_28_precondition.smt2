;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort privileget 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (privileget privileget) Bool)

(declare-const dummy privileget)

(declare-datatypes ((privileget__ref 0))
(((mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget
  (privileget__content a))

(declare-fun to_rep (privileget) Int)

(declare-fun of_rep (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort adminprivileget 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (adminprivileget adminprivileget) Bool)

(declare-const dummy1 adminprivileget)

(declare-datatypes ((adminprivileget__ref 0))
(((mk_adminprivileget__ref (adminprivileget__content adminprivileget)))))
(define-fun adminprivileget__ref___projection ((a adminprivileget__ref)) adminprivileget
  (adminprivileget__content a))

(declare-sort datalengtht 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 78)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (datalengtht datalengtht) Bool)

(declare-const dummy2 datalengtht)

(declare-datatypes ((datalengtht__ref 0))
(((mk_datalengtht__ref (datalengtht__content datalengtht)))))
(define-fun datalengtht__ref___projection ((a datalengtht__ref)) datalengtht
  (datalengtht__content a))

(declare-fun to_rep1 (datalengtht) Int)

(declare-fun of_rep1 (Int) datalengtht)

;; inversion_axiom
  (assert
  (forall ((x datalengtht))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x datalengtht)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy4 (Array Int character))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__keyboard__datat__length datalengtht)(rec__keyboard__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) datalengtht
  (rec__keyboard__datat__length a))

(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character)
  (rec__keyboard__datat__text a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__keyboard__datat__length
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__keyboard__datat__length
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__keyboard__datat__text (us_split_fields1 a))
                           1 78
                           (rec__keyboard__datat__text (us_split_fields1 b))
                           1 78) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const keyboard__datat__length__first__bit Int)

(declare-const keyboard__datat__length__last__bit Int)

(declare-const keyboard__datat__length__position Int)

;; keyboard__datat__length__first__bit_axiom
  (assert (<= 0 keyboard__datat__length__first__bit))

;; keyboard__datat__length__last__bit_axiom
  (assert
  (< keyboard__datat__length__first__bit keyboard__datat__length__last__bit))

;; keyboard__datat__length__position_axiom
  (assert (<= 0 keyboard__datat__length__position))

(declare-const keyboard__datat__text__first__bit Int)

(declare-const keyboard__datat__text__last__bit Int)

(declare-const keyboard__datat__text__position Int)

;; keyboard__datat__text__first__bit_axiom
  (assert (<= 0 keyboard__datat__text__first__bit))

;; keyboard__datat__text__last__bit_axiom
  (assert
  (< keyboard__datat__text__first__bit keyboard__datat__text__last__bit))

;; keyboard__datat__text__position_axiom
  (assert (<= 0 keyboard__datat__text__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((datat__ref 0))
(((mk_datat__ref (datat__content us_rep)))))
(define-fun datat__ref___projection ((a datat__ref)) us_rep (datat__content
                                                            a))

(declare-sort opandnullt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (opandnullt opandnullt) Bool)

(declare-const dummy6 opandnullt)

(declare-datatypes ((opandnullt__ref 0))
(((mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt
  (opandnullt__content a))

(define-fun dynamic_invariant ((temp___expr_251 Int)
  (temp___is_init_248 Bool) (temp___skip_constant_249 Bool)
  (temp___do_toplevel_250 Bool)) Bool (=>
                                      (or (= temp___is_init_248 true)
                                      (<= 0 4)) (in_range5 temp___expr_251)))

(declare-sort opt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (opt opt) Bool)

(declare-const dummy7 opt)

(declare-datatypes ((opt__ref 0)) (((mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(declare-fun to_rep3 (opandnullt) Int)

(declare-fun of_rep3 (Int) opandnullt)

;; inversion_axiom
  (assert
  (forall ((x opandnullt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x opandnullt)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__admin__t__rolepresent privileget)(rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields2)) privileget
  (rec__admin__t__rolepresent a))

(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields2)) opandnullt
  (rec__admin__t__currentop a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__admin__t__rolepresent (us_split_fields3 a)))
                         (to_rep
                         (rec__admin__t__rolepresent (us_split_fields3 b))))
                         (= (to_rep3
                            (rec__admin__t__currentop (us_split_fields3 a)))
                         (to_rep3
                         (rec__admin__t__currentop (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const admin__t__rolepresent__first__bit Int)

(declare-const admin__t__rolepresent__last__bit Int)

(declare-const admin__t__rolepresent__position Int)

;; admin__t__rolepresent__first__bit_axiom
  (assert (<= 0 admin__t__rolepresent__first__bit))

;; admin__t__rolepresent__last__bit_axiom
  (assert
  (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))

;; admin__t__rolepresent__position_axiom
  (assert (<= 0 admin__t__rolepresent__position))

(declare-const admin__t__currentop__first__bit Int)

(declare-const admin__t__currentop__last__bit Int)

(declare-const admin__t__currentop__position Int)

;; admin__t__currentop__first__bit_axiom
  (assert (<= 0 admin__t__currentop__first__bit))

;; admin__t__currentop__last__bit_axiom
  (assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))

;; admin__t__currentop__position_axiom
  (assert (<= 0 admin__t__currentop__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))

(declare-fun str_comp (us_rep Int) Bool)

(declare-fun str_comp__function_guard (Bool us_rep Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_257 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool (=>
                                      (or (= temp___is_init_254 true)
                                      (<= 1 4)) (in_range6 temp___expr_257)))

(declare-sort datalengtht1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 18)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (datalengtht1 datalengtht1) Bool)

(declare-const dummy9 datalengtht1)

(declare-datatypes ((datalengtht__ref1 0))
(((mk_datalengtht__ref1 (datalengtht__content1 datalengtht1)))))
(define-fun datalengtht__ref___2__projection ((a datalengtht__ref1)) datalengtht1
  (datalengtht__content1 a))

(declare-fun to_rep4 (datalengtht1) Int)

(declare-fun of_rep4 (Int) datalengtht1)

;; inversion_axiom
  (assert
  (forall ((x datalengtht1))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x datalengtht1)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort datai 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 18)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (datai datai) Bool)

(declare-const dummy10 datai)

(declare-datatypes ((datai__ref 0))
(((mk_datai__ref (datai__content datai)))))
(define-fun datai__ref___2__projection ((a datai__ref)) datai (datai__content
                                                              a))

(declare-fun to_rep5 (datai) Int)

(declare-fun of_rep5 (Int) datai)

;; inversion_axiom
  (assert
  (forall ((x datai))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x datai)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-const dummy11 (Array Int character))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq11 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__admin__datat__length datalengtht1)(rec__admin__datat__minmatchlength datai)(rec__admin__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__2__projection ((a us_split_fields4)) datalengtht1
  (rec__admin__datat__length a))

(define-fun us_split_fields_MinMatchLength__projection ((a us_split_fields4)) datai
  (rec__admin__datat__minmatchlength a))

(define-fun us_split_fields_Text__2__projection ((a us_split_fields4)) (Array Int character)
  (rec__admin__datat__text a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__admin__datat__length (us_split_fields5 a)))
                         (to_rep4
                         (rec__admin__datat__length (us_split_fields5 b))))
                         (= (to_rep5
                            (rec__admin__datat__minmatchlength
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__admin__datat__minmatchlength
                                                   (us_split_fields5 b)))))
                         (= (bool_eq
                            (rec__admin__datat__text (us_split_fields5 a)) 1
                            18 (rec__admin__datat__text (us_split_fields5 b))
                            1 18) true))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const admin__datat__length__first__bit Int)

(declare-const admin__datat__length__last__bit Int)

(declare-const admin__datat__length__position Int)

;; admin__datat__length__first__bit_axiom
  (assert (<= 0 admin__datat__length__first__bit))

;; admin__datat__length__last__bit_axiom
  (assert
  (< admin__datat__length__first__bit admin__datat__length__last__bit))

;; admin__datat__length__position_axiom
  (assert (<= 0 admin__datat__length__position))

(declare-const admin__datat__minmatchlength__first__bit Int)

(declare-const admin__datat__minmatchlength__last__bit Int)

(declare-const admin__datat__minmatchlength__position Int)

;; admin__datat__minmatchlength__first__bit_axiom
  (assert (<= 0 admin__datat__minmatchlength__first__bit))

;; admin__datat__minmatchlength__last__bit_axiom
  (assert
  (< admin__datat__minmatchlength__first__bit admin__datat__minmatchlength__last__bit))

;; admin__datat__minmatchlength__position_axiom
  (assert (<= 0 admin__datat__minmatchlength__position))

(declare-const admin__datat__text__first__bit Int)

(declare-const admin__datat__text__last__bit Int)

(declare-const admin__datat__text__position Int)

;; admin__datat__text__first__bit_axiom
  (assert (<= 0 admin__datat__text__first__bit))

;; admin__datat__text__last__bit_axiom
  (assert (< admin__datat__text__first__bit admin__datat__text__last__bit))

;; admin__datat__text__position_axiom
  (assert (<= 0 admin__datat__text__position))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ((datat__ref1 0))
(((mk_datat__ref1 (datat__content1 us_rep2)))))
(define-fun datat__ref___2__projection ((a datat__ref1)) us_rep2 (datat__content1
                                                                 a))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq3 (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq3 (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const optokeyed (Array Int us_rep2))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

;; str_comp__post_axiom
  (assert true)

;; str_comp__def_axiom
  (assert
  (forall ((keyedop us_rep))
  (forall ((op Int))
  (! (= (= (str_comp keyedop op) true)
     (and
     (and
     (<= (to_rep5
         (rec__admin__datat__minmatchlength
         (us_split_fields5 (select optokeyed op)))) (to_rep1
                                                    (rec__keyboard__datat__length
                                                    (us_split_fields1
                                                    keyedop))))
     (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))
     (to_rep4
     (rec__admin__datat__length (us_split_fields5 (select optokeyed op))))))
     (forall ((i Int))
     (=>
     (and (<= 1 i)
     (<= i (to_rep1
           (rec__keyboard__datat__length (us_split_fields1 keyedop)))))
     (= (to_rep2
        (let ((temp___272 (rec__admin__datat__text
                          (us_split_fields5 (select optokeyed op)))))
        (select temp___272 i))) (to_rep2
                                (let ((temp___273 (rec__keyboard__datat__text
                                                  (us_split_fields1 keyedop))))
                                (select temp___273 i)))))))) :pattern (
  (str_comp keyedop op)) ))))

(declare-fun ispresent (us_rep1) Bool)

(declare-fun ispresent__function_guard (Bool us_rep1) Bool)

;; ispresent__post_axiom
  (assert true)

;; ispresent__def_axiom
  (assert
  (forall ((theadmin us_rep1))
  (! (= (= (ispresent theadmin) true) (in_range2
     (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin))))) :pattern (
  (ispresent theadmin)) )))

(declare-fun allowedop (us_rep1 Int) Bool)

(declare-fun allowedop__function_guard (Bool us_rep1 Int) Bool)

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 (Array Int Bool))))))
(declare-fun slide2 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq5 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq5 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-const dummy13 (Array Int Bool))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int Bool)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int Bool)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int Bool)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int Bool))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int Bool))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int Bool))) (<= 0 (object__alignment5 a))))

(declare-fun user_eq13 ((Array Int Bool) (Array Int Bool)) Bool)

(declare-datatypes ((map__ref3 0))
(((mk_map__ref3 (map__content3 (Array Int (Array Int Bool)))))))
(declare-fun slide3 ((Array Int (Array Int Bool)) Int
  Int) (Array Int (Array Int Bool)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int Bool))))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int Bool))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int (Array Int Bool)) Int Int
  (Array Int (Array Int Bool)) Int Int) (Array Int (Array Int Bool)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int Bool))) (b (Array Int (Array Int Bool))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 ((Array Int Bool) Int) (Array Int (Array Int Bool)))

;; singleton_def
  (assert
  (forall ((v (Array Int Bool)))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int (Array Int Bool))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int Bool))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq5 (select a temp___idx_133) 1 4
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 4) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int Bool))) (b (Array Int (Array Int Bool))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq5 (select a temp___idx_133) 1 4
     (select b (+ (- b__first a__first) temp___idx_133)) 1 4) true))))))))

(declare-const isavailable (Array Int (Array Int Bool)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; allowedop__post_axiom
  (assert true)

;; allowedop__def_axiom
  (assert
  (forall ((theadmin us_rep1))
  (forall ((op Int))
  (! (= (= (allowedop theadmin op) true)
     (= (let ((temp___275 (select isavailable (to_rep
                                              (rec__admin__t__rolepresent
                                              (us_split_fields3 theadmin))))))
        (select temp___275 op)) true)) :pattern ((allowedop theadmin op)) ))))

(declare-const theadmin us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const keyedop us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun admin__isavailable__aggregate_def ((Array Int Bool)
  (Array Int Bool) (Array Int Bool)) (Array Int (Array Int Bool)))

;; def_axiom
  (assert
  (forall ((temp___135 (Array Int Bool)) (temp___136 (Array Int Bool))
  (temp___137 (Array Int Bool)))
  (let ((temp___134 (admin__isavailable__aggregate_def temp___135 temp___136
                    temp___137)))
  (and
  (and (= (select temp___134 1) temp___135)
  (= (select temp___134 2) temp___136)) (= (select temp___134 3) temp___137)))))

(declare-fun temp___139 (Bool Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___141 Bool) (temp___142 Bool))
  (let ((temp___140 (temp___139 temp___141 temp___142)))
  (forall ((temp___143 Int))
  (ite (= temp___143 3) (= (select temp___140 temp___143) temp___141)
  (= (select temp___140 temp___143) temp___142))))))

(declare-fun temp___144 (Bool Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___146 Bool) (temp___147 Bool))
  (let ((temp___145 (temp___144 temp___146 temp___147)))
  (forall ((temp___148 Int))
  (ite (= temp___148 1) (= (select temp___145 temp___148) temp___146)
  (= (select temp___145 temp___148) temp___147))))))

(declare-fun temp___149 (Bool Bool Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___151 Bool) (temp___152 Bool) (temp___153 Bool))
  (let ((temp___150 (temp___149 temp___151 temp___152 temp___153)))
  (forall ((temp___154 Int))
  (ite (= temp___154 4) (= (select temp___150 temp___154) temp___152)
  (ite (= temp___154 2) (= (select temp___150 temp___154) temp___151)
  (= (select temp___150 temp___154) temp___153)))))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_302 Int)
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool (=>
                                      (or (= temp___is_init_299 true)
                                      (<= 0 18)) (in_range7 temp___expr_302)))

(define-fun dynamic_invariant4 ((temp___expr_308 Int)
  (temp___is_init_305 Bool) (temp___skip_constant_306 Bool)
  (temp___do_toplevel_307 Bool)) Bool (=>
                                      (or (= temp___is_init_305 true)
                                      (<= 1 18)) (in_range8 temp___expr_308)))

(declare-fun admin__optokeyed__aggregate_def (us_rep2 us_rep2 us_rep2
  us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___157 us_rep2) (temp___158 us_rep2) (temp___159 us_rep2)
  (temp___160 us_rep2))
  (let ((temp___156 (admin__optokeyed__aggregate_def temp___157 temp___158
                    temp___159 temp___160)))
  (and
  (and
  (and (= (select temp___156 1) temp___157)
  (= (select temp___156 2) temp___158)) (= (select temp___156 3) temp___159))
  (= (select temp___156 4) temp___160)))))

(declare-fun temp___String_Literal_162 (tuple0) (Array Int character))

;; temp___String_Literal_162__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 1)) 65)
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 2)) 82))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 3)) 67))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 4)) 72))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 5)) 73))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 6)) 86))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 7)) 69))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 8)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 9)) 76))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 10)) 79))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 11)) 71))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 12)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 13)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 14)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 15)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 16)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 17)) 32))
     (= (to_rep2 (select (temp___String_Literal_162 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_162 us_void_param)) )))

(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 1)) 85)
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 2)) 80))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 3)) 68))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 4)) 65))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 5)) 84))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 6)) 69))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 7)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 8)) 67))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 9)) 79))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 10)) 78))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 11)) 70))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 12)) 73))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 13)) 71))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 14)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 15)) 68))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 16)) 65))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 17)) 84))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 18)) 65)) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(declare-fun temp___String_Literal_164 (tuple0) (Array Int character))

;; temp___String_Literal_164__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 1)) 79)
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 2)) 86))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 3)) 69))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 4)) 82))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 5)) 82))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 6)) 73))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 7)) 68))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 8)) 69))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 9)) 32))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 10)) 76))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 11)) 79))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 12)) 67))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 13)) 75))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 14)) 32))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 15)) 32))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 16)) 32))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 17)) 32))
     (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_164 us_void_param)) )))

(declare-fun temp___String_Literal_165 (tuple0) (Array Int character))

;; temp___String_Literal_165__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 1)) 83)
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 2)) 72))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 3)) 85))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 4)) 84))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 5)) 68))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 6)) 79))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 7)) 87))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 8)) 78))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 9)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 10)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 11)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 12)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 13)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 14)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 15)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 16)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 17)) 32))
     (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_165 us_void_param)) )))

;; optokeyed__def_axiom
  (assert
  (= optokeyed (admin__optokeyed__aggregate_def
               (mk___rep2
               (mk___split_fields2 (of_rep4 11) (of_rep5 7)
               (temp___String_Literal_162 Tuple0)))
               (mk___rep2
               (mk___split_fields2 (of_rep4 18) (of_rep5 6)
               (temp___String_Literal_163 Tuple0)))
               (mk___rep2
               (mk___split_fields2 (of_rep4 13) (of_rep5 8)
               (temp___String_Literal_164 Tuple0)))
               (mk___rep2
               (mk___split_fields2 (of_rep4 8) (of_rep5 8)
               (temp___String_Literal_165 Tuple0))))))

;; isavailable__def_axiom
  (assert
  (= isavailable (admin__isavailable__aggregate_def
                 (temp___139 (of_int 1) (of_int 0))
                 (temp___144 (of_int 1) (of_int 0))
                 (temp___149 (of_int 1) (of_int 1) (of_int 0)))))

(define-fun dynamic_invariant5 ((temp___expr_169 Int)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)) Bool (=>
                                      (or (= temp___is_init_166 true)
                                      (<= 0 3)) (in_range1 temp___expr_169)))

(define-fun dynamic_invariant6 ((temp___expr_175 Int)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)) Bool (=>
                                      (or (= temp___is_init_172 true)
                                      (<= 1 3)) (in_range2 temp___expr_175)))

(define-fun dynamic_invariant7 ((temp___expr_218 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (=>
                                      (or (= temp___is_init_215 true)
                                      (<= 0 78)) (in_range3 temp___expr_218)))

(declare-const theop Int)

(declare-const op Int)

(declare-const admin__opisavailable__result Int)

(declare-const temp___361 Int)

(declare-const temp___360 Int)

(declare-const o Int)

(declare-const temp___359 (Array Int Bool))

(declare-const op1 Int)

(declare-const result Int)

(declare-const theop1 Int)

(declare-const result1 Int)

(declare-const op2 Int)

(declare-const theop2 Int)

(declare-const op3 Int)

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Int)

(declare-const theop3 Int)

(declare-const theop4 Int)

(declare-const theop5 Int)

(declare-const theop6 Int)

(declare-const op4 Int)

(declare-const theop7 Int)

(declare-const op5 Int)

(declare-const theop8 Int)

(declare-const op6 Int)

(declare-const theop9 Int)

(declare-const op7 Int)

(declare-const result5 Int)

(declare-const admin__opisavailable__result1 Int)

(declare-const admin__opisavailable__result2 Int)

(declare-const admin__opisavailable__result3 Int)

(declare-const theop10 Int)

(declare-const op8 Int)

(declare-const admin__opisavailable__result4 Int)

(declare-const theop11 Int)

(declare-const op9 Int)

(declare-const admin__opisavailable__result5 Int)

(define-fun op10 () int__ref (mk_int__ref op6))

(define-fun theop12 () int__ref (mk_int__ref theop8))

(define-fun theop13 () int__ref (mk_int__ref theop6))

;; H
  (assert
  (= (admin__isavailable__aggregate_def (temp___139 (of_int 1) (of_int 0))
     (temp___144 (of_int 1) (of_int 0))
     (temp___149 (of_int 1) (of_int 1) (of_int 0))) isavailable))

;; H
  (assert (= (ispresent theadmin) true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref theop)))

;; H
  (assert (= theop1 0))

;; H
  (assert (in_range5 theop1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref op)))

;; H
  (assert (= op2 1))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= temp___361 op2)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= temp___360 theop1)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= theop2 0)))

;; H
  (assert
  (=> (and (<= 1 op2) (<= op2 4))
  (and (and (=> (<= 0 4) (in_range5 theop2)) (=> (<= 1 4) (in_range6 op3)))
  (and (<= 1 op3) (<= op3 4)))))

;; H
  (assert
  (=> (and (<= 1 op2) (<= op2 4))
  (or
  (and (and (= theop3 theop4) (= theop5 theop3))
  (and
  (and (= result2 (str_comp keyedop op3))
  (= (= result2 true)
  (and
  (and
  (<= (to_rep5
      (rec__admin__datat__minmatchlength
      (us_split_fields5 (select optokeyed op3)))) (to_rep1
                                                  (rec__keyboard__datat__length
                                                  (us_split_fields1 keyedop))))
  (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))
  (to_rep4
  (rec__admin__datat__length (us_split_fields5 (select optokeyed op3))))))
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))))
  (= (to_rep2
     (select (rec__admin__datat__text
             (us_split_fields5 (select optokeyed op3))) i)) (to_rep2
                                                            (select (rec__keyboard__datat__text
                                                                    (us_split_fields1
                                                                    keyedop)) i))))))))
  (and (= result2 true)
  (and
  (and
  (and
  (and
  (and
  (<= 1 (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin))))
  (<= (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin))) 3))
  (= o (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin)))))
  (= temp___359 (select isavailable o))) (= result3 (select temp___359
  op3)))
  (ite (= result3 true) (and (= theop2 result4) (= theop3 op3))
  (= theop3 theop2))))))
  (and
  (and
  (and (= result2 (str_comp keyedop op3))
  (= (= result2 true)
  (and
  (and
  (<= (to_rep5
      (rec__admin__datat__minmatchlength
      (us_split_fields5 (select optokeyed op3)))) (to_rep1
                                                  (rec__keyboard__datat__length
                                                  (us_split_fields1 keyedop))))
  (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))
  (to_rep4
  (rec__admin__datat__length (us_split_fields5 (select optokeyed op3))))))
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))))
  (= (to_rep2
     (select (rec__admin__datat__text
             (us_split_fields5 (select optokeyed op3))) i)) (to_rep2
                                                            (select (rec__keyboard__datat__text
                                                                    (us_split_fields1
                                                                    keyedop)) i))))))))
  (and (not (= result2 true)) (= theop3 theop2)))
  (and (and (= theop3 theop4) (= theop5 theop3)) (= op3 4))))))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= op3 op4)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= theop13 (mk_int__ref theop4))))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= op5 op3)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= theop7 theop5)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= op10 (mk_int__ref op4))))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= theop12 theop13)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= op7 op5)))

;; H
  (assert (=> (and (<= 1 op2) (<= op2 4)) (= theop9 theop7)))

;; H
  (assert (=> (not (and (<= 1 op2) (<= op2 4))) (= op2 op6)))

;; H
  (assert (=> (not (and (<= 1 op2) (<= op2 4))) (= theop1 theop8)))

;; H
  (assert (=> (not (and (<= 1 op2) (<= op2 4))) (= op7 op2)))

;; H
  (assert (=> (not (and (<= 1 op2) (<= op2 4))) (= theop9 theop1)))

;; H
  (assert (= admin__opisavailable__result1 admin__opisavailable__result2))

;; H
  (assert (= admin__opisavailable__result3 admin__opisavailable__result1))

;; H
  (assert
  (= (mk_int__ref result5) (mk_int__ref admin__opisavailable__result)))

;; H
  (assert (= admin__opisavailable__result1 theop8))

;; H
  (assert
  (= (mk_int__ref admin__opisavailable__result4) (mk_int__ref
                                                 admin__opisavailable__result2)))

;; H
  (assert (= (mk_int__ref op8) op10))

;; H
  (assert (= (mk_int__ref theop10) theop12))

;; H
  (assert (= admin__opisavailable__result5 admin__opisavailable__result3))

;; H
  (assert (= op9 op7))

;; H
  (assert (= theop11 theop9))

;; H
  (assert (<= 1 op1))

;; H
  (assert (<= op1 4))

(assert
;; WP_parameter_def
 ;; File "admin.ads", line 30, characters 0-0
  (not (= (ispresent theadmin) true)))
(check-sat)
(exit)
