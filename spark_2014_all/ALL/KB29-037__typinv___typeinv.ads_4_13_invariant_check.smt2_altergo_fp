(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic is_valid : int -> bool

logic is_valid__function_guard : bool, int -> prop

type t

predicate in_range1(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref___projection(a: t__ref) : t = (a).t__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

axiom Div_mod :
  (forall x1:int. forall y:int. ((not (y = 0)) ->
  (x1 = ((y * comp_div(x1,y)) + comp_mod(x1,y)))))

axiom Div_bound :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) ->
  ((0 <= comp_div(x1,y)) and (comp_div(x1,y) <= x1))))

axiom Mod_bound :
  (forall x1:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x1,y)) and (comp_mod(x1,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) ->
  (0 <= comp_div(x1,y))))

axiom Div_sign_neg :
  (forall x1:int. forall y:int. (((x1 <= 0) and (0 <  y)) ->
  (comp_div(x1,y) <= 0)))

axiom Mod_sign_pos :
  (forall x1:int. forall y:int. (((0 <= x1) and (not (y = 0))) ->
  (0 <= comp_mod(x1,y))))

axiom Mod_sign_neg :
  (forall x1:int. forall y:int. (((x1 <= 0) and (not (y = 0))) ->
  (comp_mod(x1,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x1:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x1,y) * y)) <= abs_int(x1))))

axiom Div_1 : (forall x1:int. (comp_div(x1,1) = x1))

axiom Mod_1 : (forall x1:int. (comp_mod(x1,1) = 0))

axiom Div_inf :
  (forall x1:int. forall y:int. (((0 <= x1) and (x1 <  y)) ->
  (comp_div(x1,y) = 0)))

axiom Mod_inf :
  (forall x1:int. forall y:int. (((0 <= x1) and (x1 <  y)) ->
  (comp_mod(x1,y) = x1)))

axiom Div_mult :
  (forall x1:int. forall y:int. forall z:int [comp_div(((x1 * y) + z),x1)].
  (((0 <  x1) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x1 * y) + z),x1) = (y + comp_div(z,x1)))))

axiom Mod_mult :
  (forall x1:int. forall y:int. forall z:int [comp_mod(((x1 * y) + z),x1)].
  (((0 <  x1) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x1 * y) + z),x1) = comp_mod(z,x1))))

axiom Div_mod1 :
  (forall x1:int. forall y:int. ((not (y = 0)) ->
  (x1 = ((y * (x1 / y)) + (x1 % y)))))

axiom Mod_bound1 :
  (forall x1:int. forall y:int. ((not (y = 0)) -> ((0 <= (x1 % y)) and
  ((x1 % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x1:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x1) and (x1 <  ((q * y) + y))) -> ((x1 / y) = q))))

axiom Div_bound1 :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) ->
  ((0 <= (x1 / y)) and ((x1 / y) <= x1))))

axiom Mod_11 : (forall x1:int. ((x1 % 1) = 0))

axiom Div_11 : (forall x1:int. ((x1 / 1) = x1))

axiom Div_inf1 :
  (forall x1:int. forall y:int. (((0 <= x1) and (x1 <  y)) ->
  ((x1 / y) = 0)))

axiom Div_inf_neg :
  (forall x1:int. forall y:int. (((0 <  x1) and (x1 <= y)) ->
  (((-x1) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x1:int. forall y:int. forall z:int [(((x1 * y) + z) / x1)].
  ((0 <  x1) -> ((((x1 * y) + z) / x1) = (y + (z / x1)))))

axiom Mod_mult1 :
  (forall x1:int. forall y:int. forall z:int [(((x1 * y) + z) % x1)].
  ((0 <  x1) -> ((((x1 * y) + z) % x1) = (z % x1))))

logic mod : int, int -> int

axiom mod_def :
  (forall x1:int. forall y:int [mod(x1, y)]. (((0 <  y) -> (mod(x1,
  y) = (x1 % y))) and ((not (0 <  y)) -> (mod(x1, y) = ((x1 % y) + y)))))

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall x1:int [is_valid(x1)]. ((is_valid(x1) = true) <-> (mod(x1,
  2) = 0)))

 (* File "typeinv.ads", line 9, characters 0-0 *)
goal WP_parameter_def :
  (forall typeinv__new_t__result:int. forall temp___141:int. forall o:int.
  forall result:int. forall typeinv__new_t__result1:int.
  forall typeinv__new_t__result2:int. forall typeinv__new_t__result3:int.
  forall typeinv__new_t__result4:int. forall typeinv__new_t__result5:int.
  (in_range(x) -> (((((typeinv__new_t__result1 = typeinv__new_t__result2) and
  (typeinv__new_t__result3 = typeinv__new_t__result1)) and
  ((((temp___141 = x) and in_range1(x)) and
  ((is_valid(temp___141) = true) and (o = temp___141))) and
  ((result = typeinv__new_t__result) and (typeinv__new_t__result1 = o)))) and
  ((typeinv__new_t__result4 = typeinv__new_t__result2) and
  (typeinv__new_t__result5 = typeinv__new_t__result3))) ->
  (is_valid(typeinv__new_t__result4) = true))))
