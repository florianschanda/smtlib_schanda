;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun is_digit (Int) Bool)

(declare-fun is_digit__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

;; is_digit__post_axiom
  (assert
  (forall ((c Int))
  (! (=> (dynamic_invariant2 c true true true)
     (let ((result (is_digit c)))
     (ite (= c 48) (= result true)
     (ite (= c 49) (= result true)
     (ite (= c 50) (= result true)
     (ite (= c 51) (= result true)
     (ite (= c 52) (= result true)
     (ite (= c 53) (= result true)
     (ite (= c 54) (= result true)
     (ite (= c 55) (= result true)
     (ite (= c 56) (= result true)
     (ite (= c 57) (= result true)
     (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern (
  (is_digit c)) )))

(declare-fun convert_character_digit_to_integer (Int) Int)

(declare-fun convert_character_digit_to_integer__function_guard (Int
  Int) Bool)

;; convert_character_digit_to_integer__post_axiom
  (assert
  (forall ((source Int))
  (! (=>
     (and (dynamic_invariant2 source true true true)
     (= (is_digit source) true))
     (let ((result (convert_character_digit_to_integer source)))
     (and
     (and (and (<= 0 result) (<= result 9))
     (ite (= source 48) (= result 0)
     (ite (= source 49) (= result 1)
     (ite (= source 50) (= result 2)
     (ite (= source 51) (= result 3)
     (ite (= source 52) (= result 4)
     (ite (= source 53) (= result 5)
     (ite (= source 54) (= result 6)
     (ite (= source 55) (= result 7)
     (ite (= source 56) (= result 8) (=> (= source 57) (= result 9))))))))))))
     (dynamic_invariant result true false true)))) :pattern ((convert_character_digit_to_integer
                                                             source)) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const source us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes ()
((tnumber_array_typeD1__ref
 (mk_tnumber_array_typeD1__ref (tnumber_array_typeD1__content integer)))))
(define-fun tnumber_array_typeD1__ref___17__projection ((a tnumber_array_typeD1__ref)) integer
  (tnumber_array_typeD1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int integer)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq5 (us_t1 us_t1) Bool)

(declare-const dummy5 us_t1)

(declare-datatypes ()
((number_array_type__ref
 (mk_number_array_type__ref (number_array_type__content us_t1)))))
(define-fun number_array_type__ref___17__projection ((a number_array_type__ref)) us_t1
  (number_array_type__content a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ()
((t346b__ref (mk_t346b__ref (t346b__content integer)))))
(define-fun t346b__ref___projection ((a t346b__ref)) integer (t346b__content
                                                             a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))

(define-fun of_array2 ((a (Array Int integer)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq4 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq7 (us_t2 us_t2) Bool)

(declare-const dummy7 us_t2)

(declare-datatypes () ((t347b__ref (mk_t347b__ref (t347b__content us_t2)))))
(define-fun t347b__ref___projection ((a t347b__ref)) us_t2 (t347b__content a))

(declare-const n__first integer)

(declare-const n__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ()
((t348b__ref (mk_t348b__ref (t348b__content integer)))))
(define-fun t348b__ref___projection ((a t348b__ref)) integer (t348b__content
                                                             a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last6 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first6 (mk3 f l))) f)
     (= (to_rep1 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array Int integer))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int integer) (elts3 a))

(define-fun of_array3 ((a (Array Int integer)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep1 (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep1 (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int integer)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int integer)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq5 ((x us_t3)
  (y us_t3)) Bool (bool_eq2 (elts3 x) (to_rep1 (first6 (rt3 x)))
                  (to_rep1 (last6 (rt3 x))) (elts3 y)
                  (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))

(declare-fun user_eq9 (us_t3 us_t3) Bool)

(declare-const dummy9 us_t3)

(declare-datatypes ()
((tnumber_array_typeB__ref
 (mk_tnumber_array_typeB__ref (tnumber_array_typeB__content us_t3)))))
(define-fun tnumber_array_typeB__ref___17__projection ((a tnumber_array_typeB__ref)) us_t3
  (tnumber_array_typeB__content a))

(declare-fun aida__conversion__calculate_positive_target_length_3__n__aggregate_def (Int
  Int Int) us_t2)

;; def_axiom
  (assert
  (forall ((temp___1721 Int) (temp___1722 Int) (temp___1723 Int))
  (let ((temp___1720 (aida__conversion__calculate_positive_target_length_3__n__aggregate_def
                     temp___1721 temp___1722 temp___1723)))
  (and
  (=> (dynamic_property6 (first1 source) (+ (first1 source) 2) temp___1722
  temp___1723)
  (and (= (first5 temp___1720) temp___1722)
  (= (last5 temp___1720) temp___1723)))
  (forall ((temp___1724 Int))
  (= (select (to_array2 temp___1720) temp___1724) (of_rep1 temp___1721)))))))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_455 us_t1)
  (temp___is_init_452 Bool) (temp___skip_constant_453 Bool)
  (temp___do_toplevel_454 Bool)) Bool (=>
                                      (not (= temp___skip_constant_453 true))
                                      (and (dynamic_property2 (first1 source)
                                      (+ (first1 source) 2)
                                      (first3 temp___expr_455)
                                      (last3 temp___expr_455))
                                      (and
                                      (= (first3 temp___expr_455) (first1
                                                                  source))
                                      (= (last3 temp___expr_455) (+ (first1
                                                                    source) 2))))))

(declare-const target Int)

(declare-const has_failed Bool)

(declare-const n (Array Int integer))

(declare-const index Int)

(declare-const temp___1726 (Array Int integer))

(declare-const temp___17261 t2)

(declare-const aida__conversion__calculate_positive_target_length_3__n__assume (Array Int integer))

(declare-const aida__conversion__calculate_positive_target_length_3__n__assume1 t1)

(declare-const temp___1733 Int)

(declare-const temp___1730 (Array Int integer))

(declare-const temp___1728 Int)

(declare-const o Int)

(declare-const o1 integer)

(declare-const o2 Int)

(declare-const aida__conversion__convert_character_digit_to_integer__2__target Int)

(declare-const o3 Int)

(declare-const o4 character)

(declare-const o5 Int)

(declare-const o6 integer)

(declare-const o7 Int)

(declare-const o8 (Array Int integer))

(declare-const temp___1734 Int)

(declare-const o9 Int)

(declare-const o10 integer)

(declare-const o11 Int)

(declare-const temp___1735 Int)

(declare-const o12 Int)

(declare-const o13 integer)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Int)

(declare-const o18 Int)

(declare-const temp___1736 Int)

(declare-const o19 Int)

(declare-const o20 integer)

(declare-const o21 Int)

(declare-const o22 Int)

(declare-const o23 Int)

(declare-const o24 Int)

(declare-const o25 Int)

(declare-const result (Array Int integer))

(declare-const n1 (Array Int integer))

(declare-const result1 Int)

(declare-const index1 Int)

(declare-const aida__conversion__convert_character_digit_to_integer__2__target1 Int)

(declare-const result2 (Array Int integer))

(declare-const n2 (Array Int integer))

(declare-const n3 (Array Int integer))

(declare-const index2 Int)

(declare-const n4 (Array Int integer))

(declare-const index3 Int)

(declare-const n5 (Array Int integer))

(declare-const index4 Int)

(declare-const n6 (Array Int integer))

(declare-const index5 Int)

(declare-const n7 (Array Int integer))

(declare-const index6 Int)

(declare-const result3 Int)

(declare-const target1 Int)

(declare-const result4 Int)

(declare-const target2 Int)

(declare-const result5 int__ref)

(declare-const target3 Int)

(declare-const result6 bool__ref)

(declare-const has_failed1 Bool)

(declare-const target4 int__ref)

(declare-const has_failed2 bool__ref)

(declare-const n8 map__ref1)

(declare-const index7 int__ref)

(declare-const target5 Int)

(declare-const has_failed3 Bool)

(declare-const n9 (Array Int integer))

(declare-const index8 Int)

(define-fun index9 () int__ref (mk_int__ref index5))

(define-fun n10 () map__ref1 (mk_map__ref1 n6))

;; H
  (assert (dynamic_invariant1 source true false true))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 target)))

;; H
  (assert
  (and (= (length source) 3)
  (forall ((index10 Int))
  (=>
  (and (<= (to_rep1 (first (rt source))) index10)
  (<= index10 (to_rep1 (last (rt source)))))
  (= (is_digit (to_rep (select (elts source) index10))) true)))))

;; H
  (assert
  (= (to_rep1
     (first4
     (rt2
     (aida__conversion__calculate_positive_target_length_3__n__aggregate_def
     0 (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 2)))))
  (to_rep1 (first (rt source)))))

;; H
  (assert
  (= (to_rep1
     (last4
     (rt2
     (aida__conversion__calculate_positive_target_length_3__n__aggregate_def
     0 (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 2))))) (+
  (to_rep1 (first (rt source))) 2)))

;; H
  (assert
  (= (mk___t2 temp___1726 temp___17261) (aida__conversion__calculate_positive_target_length_3__n__aggregate_def
                                        0 (to_rep1 (first (rt source)))
                                        (+ (to_rep1 (first (rt source))) 2))))

;; H
  (assert
  (= (ite (<= (to_rep1 (first4 temp___17261)) (to_rep1 (last4 temp___17261)))
     (+ (- (to_rep1 (last4 temp___17261)) (to_rep1 (first4 temp___17261))) 1)
     0) (ite (<= (to_rep1 (first (rt source))) (+ (to_rep1
                                                  (first (rt source))) 2))
        (+ (- (+ (to_rep1 (first (rt source))) 2) (to_rep1
                                                  (first (rt source)))) 1)
        0)))

;; H
  (assert
  (= (slide1 temp___1726 (to_rep1 (first4 temp___17261))
     (to_rep1 (first (rt source)))) aida__conversion__calculate_positive_target_length_3__n__assume))

;; H
  (assert
  (= (mk1 (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 2))
  aida__conversion__calculate_positive_target_length_3__n__assume1))

;; H
  (assert (= (mk_map__ref1 result) (mk_map__ref1 n)))

;; H
  (assert
  (= n1 aida__conversion__calculate_positive_target_length_3__n__assume))

;; H
  (assert
  (= (to_rep1 n__first) (to_rep1
                        (first2
                        aida__conversion__calculate_positive_target_length_3__n__assume1))))

;; H
  (assert
  (= (to_rep1 n__last) (to_rep1
                       (last2
                       aida__conversion__calculate_positive_target_length_3__n__assume1))))

;; H
  (assert
  (and (dynamic_property2 (to_rep1 (first (rt source)))
  (+ (to_rep1 (first (rt source))) 2) (to_rep1 n__first) (to_rep1 n__last))
  (and (= (to_rep1 n__first) (to_rep1 (first (rt source))))
  (= (to_rep1 n__last) (+ (to_rep1 (first (rt source))) 2)))))

;; H
  (assert
  (and (= temp___1733 (+ (to_rep1 (first (rt source))) 2)) (in_range1
  (+ (to_rep1 (first (rt source))) 2))))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref index)))

;; H
  (assert (= index1 (to_rep1 (first (rt source)))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= temp___1730 n1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= temp___1728 index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (and (<= (to_rep1 n__first) index1) (<= index1 (to_rep1 n__last)))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o1 (select n1 o))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o2 (to_rep1 o1))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o2 aida__conversion__convert_character_digit_to_integer__2__target)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (and (<= (to_rep1 (first (rt source))) index1)
  (<= index1 (to_rep1 (last (rt source)))))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o3 index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o4 (select (elts source) o3))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o5 (to_rep o4))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (and
  (and
  (and
  (and
  (<= 0 aida__conversion__convert_character_digit_to_integer__2__target1)
  (<= aida__conversion__convert_character_digit_to_integer__2__target1 9))
  (= aida__conversion__convert_character_digit_to_integer__2__target1
  (convert_character_digit_to_integer o5)))
  (ite (= (= o5 48) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 0)
  (ite (= (= o5 49) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 1)
  (ite (= (= o5 50) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 2)
  (ite (= (= o5 51) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 3)
  (ite (= (= o5 52) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 4)
  (ite (= (= o5 53) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 5)
  (ite (= (= o5 54) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 6)
  (ite (= (= o5 55) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 7)
  (ite (= (= o5 56) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 8)
  (=> (= (= o5 57) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 9))))))))))))
  (in_range1
  aida__conversion__convert_character_digit_to_integer__2__target1))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= (to_rep1 o6) aida__conversion__convert_character_digit_to_integer__2__target1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (and (<= (to_rep1 n__first) index1) (<= index1 (to_rep1 n__last)))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o7 index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= o8 (store n1 o7 o6))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= n1 result2)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= n2 o8)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (forall ((j Int))
  (=> (and (<= (to_rep1 (first (rt source))) j) (<= j index2))
  (= (to_rep1 (select n3 j)) (convert_character_digit_to_integer
                             (to_rep (select (elts source) j))))))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (and
  (and
  (=> (<= (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 2))
  (dynamic_property5 (to_rep1 (first (rt source)))
  (+ (to_rep1 (first (rt source))) 2) index2))
  (forall ((temp___1731 Int))
  (=>
  (and (<= (to_rep1 n__first) temp___1731)
  (<= temp___1731 (to_rep1 n__last)))
  (=> (< index2 temp___1731)
  (= (select n3 temp___1731) (select temp___1730 temp___1731))))))
  (and (<= (to_rep1 (first (rt source))) index2)
  (<= index2 (+ (to_rep1 (first (rt source))) 2))))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= index2 temp___1733)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= index2 index3)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= n3 n4)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= index4 index2)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= n5 n3)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= index9 (mk_int__ref index3))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= n10 (mk_map__ref1 n4))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= index6 index4)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733))
  (= n7 n5)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733)))
  (= index1 index5)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733)))
  (= n1 n6)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733)))
  (= index6 index1)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1733)))
  (= n7 n1)))

;; H
  (assert
  (and (= temp___1734 (+ (to_rep1 (first (rt source))) 2)) (in_range1
  (+ (to_rep1 (first (rt source))) 2))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1734)
  (<= temp___1734 (to_rep1 n__last))))

;; H
  (assert (= o9 temp___1734))

;; H
  (assert (= o10 (select n6 o9)))

;; H
  (assert (= o11 (to_rep1 o10)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref target)))

;; H
  (assert (= target1 o11))

;; H
  (assert (<= target1 9))

;; H
  (assert
  (and (= temp___1735 (+ (to_rep1 (first (rt source))) 1)) (in_range1
  (+ (to_rep1 (first (rt source))) 1))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1735)
  (<= temp___1735 (to_rep1 n__last))))

;; H
  (assert (= o12 temp___1735))

;; H
  (assert (= o13 (select n6 o12)))

;; H
  (assert (= o14 (to_rep1 o13)))

;; H
  (assert (= o15 (* o14 10)))

;; H
  (assert (and (= o16 o15) (in_range1 o15)))

;; H
  (assert (= o17 (+ target1 o16)))

;; H
  (assert (and (= o18 o17) (in_range1 o17)))

;; H
  (assert (= target1 result4))

;; H
  (assert (= target2 o18))

;; H
  (assert (<= target2 99))

;; H
  (assert
  (and (= temp___1736 (+ (to_rep1 (first (rt source))) 0)) (in_range1
  (+ (to_rep1 (first (rt source))) 0))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1736)
  (<= temp___1736 (to_rep1 n__last))))

;; H
  (assert (= o19 temp___1736))

;; H
  (assert (= o20 (select n6 o19)))

;; H
  (assert (= o21 (to_rep1 o20)))

;; H
  (assert (= o22 (* o21 100)))

;; H
  (assert (and (= o23 o22) (in_range1 o22)))

;; H
  (assert (= o24 (+ target2 o23)))

;; H
  (assert (and (= o25 o24) (in_range1 o24)))

;; H
  (assert (= result5 (mk_int__ref target2)))

;; H
  (assert (= target3 o25))

;; H
  (assert (<= target3 999))

;; H
  (assert (= result6 (mk_bool__ref has_failed)))

;; H
  (assert (= has_failed1 (of_int 0)))

;; H
  (assert (= index7 index9))

;; H
  (assert (= n8 n10))

;; H
  (assert (= has_failed2 (mk_bool__ref has_failed1)))

;; H
  (assert (= target4 (mk_int__ref target3)))

;; H
  (assert (= index8 index6))

;; H
  (assert (= n9 n7))

;; H
  (assert (= has_failed3 has_failed1))

;; H
  (assert (= target5 target3))

(assert
;; WP_parameter_def
 ;; File "aida-conversion.adb", line 997, characters 0-0
  (not (not (= (bool__content has_failed2) true))))
(check-sat)
(exit)
