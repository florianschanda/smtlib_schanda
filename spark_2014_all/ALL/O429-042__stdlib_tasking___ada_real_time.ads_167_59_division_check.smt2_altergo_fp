(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type duration

predicate in_range2(x: int) = (((-9223372036854775808) <= x) and
  (x <= 9223372036854775807))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic dummy1 : duration

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic to_fixed : duration -> int

logic of_fixed : int -> duration

logic user_eq1 : duration, duration -> bool

predicate pos_div_relation(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult : int, int -> int

axiom fxp_mult_def :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation(fxp_mult(x, y), (x * y),
  1000000000)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and
  (y <  0)))) -> pos_div_relation((-fxp_mult(x, y)), (-(x * y)),
  1000000000)))))))

logic fxp_div : int, int -> int

axiom fxp_div_def :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. (((x = 0) -> (fxp_div(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) -> pos_div_relation(fxp_div(x,
  y), (x * 1000000000), y)) and ((not ((0 <  x) and (0 <  y))) ->
  ((((x <  0) and (y <  0)) -> pos_div_relation(fxp_div(x, y),
  ((-x) * 1000000000), (-y))) and ((not ((x <  0) and (y <  0))) ->
  ((((x <  0) and (0 <  y)) -> pos_div_relation((-fxp_div(x, y)),
  ((-x) * 1000000000), y)) and ((not ((x <  0) and (0 <  y))) ->
  (((0 <  x) and (y <  0)) -> pos_div_relation((-fxp_div(x, y)),
  (x * 1000000000), (-y)))))))))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. (((x = 0) -> (fxp_div_int(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation(fxp_div_int(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x,
  y), (-x), (-y))) and ((not ((x <  0) and (y <  0))) -> ((((x <  0) and
  (0 <  y)) -> pos_div_relation((-fxp_div_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation((-fxp_div_int(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int : int, int -> int

axiom fxp_div_result_int_def :
  (forall x:int.
  (forall y:int [fxp_div_result_int(x, y)]. (((x = 0) ->
  (fxp_div_result_int(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna(fxp_div_result_int(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna(fxp_div_result_int(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), x, (-y)))))))))))))

logic to_int1 : int -> int

axiom to_int_def1 :
  (forall x:int [to_int1(x)]. (((x = 0) -> (to_int1(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation(to_int1(x), x,
  1000000000)) and ((not (0 <  x)) -> pos_div_relation((-to_int1(x)), (-x),
  1000000000))))))

logic of_real : real -> int

axiom inversion_axiom :
  (forall x:duration [to_fixed(x)]. (of_fixed(to_fixed(x)) = x))

axiom range_axiom : (forall x:duration. in_range2(to_fixed(x)))

axiom coerce_axiom :
  (forall x:int [to_fixed(of_fixed(x))]. (in_range2(x) ->
  (to_fixed(of_fixed(x)) = x)))

type duration__ref = { duration__content : duration
}

function duration__ref___projection(a: duration__ref) : duration =
  (a).duration__content

type tduration_repB

predicate in_range3(x: int) = (((-9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tduration_repB, tduration_repB -> bool

logic dummy2 : tduration_repB

type tduration_repB__ref = { tduration_repB__content : tduration_repB
}

function tduration_repB__ref___projection(a: tduration_repB__ref) : tduration_repB =
  (a).tduration_repB__content

type duration_rep

predicate in_range4(x: int) = (((-9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : duration_rep, duration_rep -> bool

logic dummy3 : duration_rep

type duration_rep__ref = { duration_rep__content : duration_rep
}

function duration_rep__ref___projection(a: duration_rep__ref) : duration_rep =
  (a).duration_rep__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type time_span__ref = { time_span__content : us_rep
}

function time_span__ref___projection(a: time_span__ref) : us_rep =
  (a).time_span__content

logic time_span_first : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic time_span_last : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic time_span_zero : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic olt__2 : us_rep, us_rep -> bool

logic olt__2__function_guard : bool, us_rep, us_rep -> prop

axiom olt__2__post_axiom : true

logic to_duration__2 : us_rep -> duration

logic to_duration__2__function_guard : duration, us_rep -> prop

logic ogt__2 : us_rep, us_rep -> bool

logic ogt__2__function_guard : bool, us_rep, us_rep -> prop

axiom ogt__2__post_axiom : true

logic osubtract__4 : us_rep -> us_rep

logic osubtract__4__function_guard : us_rep, us_rep -> prop

logic oge__2 : us_rep, us_rep -> bool

logic oge__2__function_guard : bool, us_rep, us_rep -> prop

axiom oge__2__post_axiom : true

logic left : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall o:duration. forall o1:int. forall result:bool. forall result1:bool.
  (in_range1(left) -> ((0 <  left) -> ((result = ogt__2(right,
  time_span_zero)) -> ((not (result = true)) -> ((result1 = olt__2(right,
  time_span_zero)) -> ((result1 = true) ->
  (((o = to_duration__2(time_span_first)) and (o1 = to_fixed(o))) ->
  (not (1 = 0))))))))))
