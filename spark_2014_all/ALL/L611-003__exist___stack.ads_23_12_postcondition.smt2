;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort size_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (size_t size_t) Bool)

(declare-const dummy1 size_t)

(declare-datatypes ((size_t__ref 0))
(((mk_size_t__ref (size_t__content size_t)))))
(define-fun size_t__ref___projection ((a size_t__ref)) size_t (size_t__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_136)))

(declare-sort element_t 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (element_t element_t) Bool)

(declare-const dummy2 element_t)

(declare-datatypes ((element_t__ref 0))
(((mk_element_t__ref (element_t__content element_t)))))
(define-fun element_t__ref___projection ((a element_t__ref)) element_t
  (element_t__content a))

(declare-fun to_rep (element_t) Int)

(declare-fun of_rep (Int) element_t)

;; inversion_axiom
  (assert
  (forall ((x element_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x element_t)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_t 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index_t index_t) Bool)

(declare-const dummy3 index_t)

(declare-datatypes ((index_t__ref 0))
(((mk_index_t__ref (index_t__content index_t)))))
(define-fun index_t__ref___projection ((a index_t__ref)) index_t (index_t__content
                                                                 a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int element_t))))))
(declare-fun slide ((Array Int element_t) Int Int) (Array Int element_t))

;; slide_eq
  (assert
  (forall ((a (Array Int element_t)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int element_t)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int element_t) Int Int (Array Int element_t) Int
  Int) (Array Int element_t))

;; concat_def
  (assert
  (forall ((a (Array Int element_t)) (b (Array Int element_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (element_t Int) (Array Int element_t))

;; singleton_def
  (assert
  (forall ((v element_t))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int element_t)) (a__first Int) (a__last Int)
  (b (Array Int element_t)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int element_t)) (b (Array Int element_t)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int element_t) Int Int (Array Int element_t) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int element_t)) (b (Array Int element_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int element_t)) (b (Array Int element_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int element_t)) (b (Array Int element_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun last_element ((Array Int element_t) Int) Int)

(declare-fun last_element__function_guard (Int (Array Int element_t)
  Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= (- 1) 2147483647)) (in_range3
                                      temp___expr_142)))

;; last_element__post_axiom
  (assert
  (forall ((t (Array Int element_t)))
  (forall ((s Int))
  (! (=> (dynamic_invariant1 s true true true) (dynamic_invariant2
     (last_element t s) true false true)) :pattern ((last_element t s)) ))))

;; last_element__def_axiom
  (assert
  (forall ((t (Array Int element_t)))
  (forall ((s Int))
  (! (=> (dynamic_invariant1 s true true true)
     (= (last_element t s) (ite (< 0 s) (to_rep (select t s)) (- 1)))) :pattern (
  (last_element t s)) ))))

(declare-fun valid ((Array Int element_t) Int) Bool)

(declare-fun valid__function_guard (Bool (Array Int element_t) Int) Bool)

;; valid__post_axiom
  (assert true)

;; valid__def_axiom
  (assert
  (forall ((t (Array Int element_t)))
  (forall ((s Int))
  (! (= (= (valid t s) true)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i s))
     (and (<= 0 (to_rep (select t i))) (<= (to_rep (select t i)) 2147483647))))
     (forall ((i Int))
     (=> (and (<= (+ s 1) i) (<= i 100)) (= (to_rep (select t i)) (- 1)))))) :pattern (
  (valid t s)) ))))

(declare-fun size ((Array Int element_t)) Int)

(declare-fun size__function_guard (Int (Array Int element_t)) Bool)

;; size__post_axiom
  (assert
  (forall ((t (Array Int element_t)))
  (! (=>
     (exists ((s Int)) (and (and (<= 0 s) (<= s 100)) (= (valid t s) true)))
     (let ((result (size t)))
     (and (= (valid t result) true) (dynamic_invariant1 result true false
     true)))) :pattern ((size t)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant3 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= 1 100)) (in_range4
                                      temp___expr_148)))

(declare-const t (Array Int element_t))

(declare-const s Int)

(declare-const stack__push__n__assume Int)

(declare-const o element_t)

(declare-const o1 Int)

(declare-const o2 (Array Int element_t))

(declare-const o3 Int)

(declare-const result (Array Int element_t))

(declare-const t1 (Array Int element_t))

(declare-const result1 Int)

(declare-const s1 Int)

(declare-const t2 (Array Int element_t))

(declare-const s2 Int)

(declare-const t3 (Array Int element_t))

(declare-const s3 Int)

;; H
  (assert (in_range2 s))

;; H
  (assert (in_range1 value))

;; H
  (assert (and (= (valid t s) true) (< (size t) 100)))

;; H
  (assert
  (and (= stack__push__n__assume (size t))
  (and (in_range2 stack__push__n__assume)
  (= (valid t stack__push__n__assume) true))))

;; H
  (assert (= stack__push__n__assume n))

;; H
  (assert (in_range2 n))

;; H
  (assert (= (to_rep o) value))

;; H
  (assert (and (<= 1 (+ n 1)) (<= (+ n 1) 100)))

;; H
  (assert (= o1 (+ n 1)))

;; H
  (assert (= o2 (store t o1 o)))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref t)))

;; H
  (assert (= t1 o2))

;; H
  (assert (and (= o3 (size t1)) (and (in_range2 o3) (= (valid t1 o3) true))))

;; H
  (assert (= result1 s))

;; H
  (assert (= s1 o3))

;; H
  (assert (= s1 s2))

;; H
  (assert (= t1 t2))

;; H
  (assert (= s3 s1))

;; H
  (assert (= t3 t1))

(assert
;; WP_parameter_def
 ;; File "stack.ads", line 5, characters 0-0
  (not (= (valid t2 s2) true)))
(check-sat)
(exit)
