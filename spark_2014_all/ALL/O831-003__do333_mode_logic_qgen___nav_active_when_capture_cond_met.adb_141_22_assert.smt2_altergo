(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = {
rec__mode_logic_props_types__changed_state__unit_delay_memory : bool;
rec__mode_logic_props_types__changed_state__in1_out1 : bool
}

function us_split_fields_Unit_Delay_memory2__projection(a: us_split_fields) : bool =
  (a).rec__mode_logic_props_types__changed_state__unit_delay_memory

function us_split_fields_In1_out12__projection(a: us_split_fields) : bool =
  (a).rec__mode_logic_props_types__changed_state__in1_out1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)].
  ((((((a).us_split_fields1).rec__mode_logic_props_types__changed_state__unit_delay_memory = ((b).us_split_fields1).rec__mode_logic_props_types__changed_state__unit_delay_memory) and
  (((a).us_split_fields1).rec__mode_logic_props_types__changed_state__in1_out1 = ((b).us_split_fields1).rec__mode_logic_props_types__changed_state__in1_out1)) ->
  (bool_eq(a, b) = true)) and
  ((not ((((a).us_split_fields1).rec__mode_logic_props_types__changed_state__unit_delay_memory = ((b).us_split_fields1).rec__mode_logic_props_types__changed_state__unit_delay_memory) and
  (((a).us_split_fields1).rec__mode_logic_props_types__changed_state__in1_out1 = ((b).us_split_fields1).rec__mode_logic_props_types__changed_state__in1_out1))) ->
  (bool_eq(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:bool. (0 <= object__size({ us_split_fields1 = {
  rec__mode_logic_props_types__changed_state__unit_delay_memory = a;
  rec__mode_logic_props_types__changed_state__in1_out1 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:bool. (0 <= object__alignment({
  us_split_fields1 = {
  rec__mode_logic_props_types__changed_state__unit_delay_memory = a;
  rec__mode_logic_props_types__changed_state__in1_out1 = a1 } })))

logic mode_logic_props_types__changed_state__unit_delay_memory__first__bit : int

logic mode_logic_props_types__changed_state__unit_delay_memory__last__bit : int

logic mode_logic_props_types__changed_state__unit_delay_memory__position : int

axiom mode_logic_props_types__changed_state__unit_delay_memory__first__bit_axiom :
  (0 <= mode_logic_props_types__changed_state__unit_delay_memory__first__bit)

axiom mode_logic_props_types__changed_state__unit_delay_memory__last__bit_axiom :
  (mode_logic_props_types__changed_state__unit_delay_memory__first__bit <  mode_logic_props_types__changed_state__unit_delay_memory__last__bit)

axiom mode_logic_props_types__changed_state__unit_delay_memory__position_axiom :
  (0 <= mode_logic_props_types__changed_state__unit_delay_memory__position)

logic mode_logic_props_types__changed_state__in1_out1__first__bit : int

logic mode_logic_props_types__changed_state__in1_out1__last__bit : int

logic mode_logic_props_types__changed_state__in1_out1__position : int

axiom mode_logic_props_types__changed_state__in1_out1__first__bit_axiom :
  (0 <= mode_logic_props_types__changed_state__in1_out1__first__bit)

axiom mode_logic_props_types__changed_state__in1_out1__last__bit_axiom :
  (mode_logic_props_types__changed_state__in1_out1__first__bit <  mode_logic_props_types__changed_state__in1_out1__last__bit)

axiom mode_logic_props_types__changed_state__in1_out1__position_axiom :
  (0 <= mode_logic_props_types__changed_state__in1_out1__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : bool

logic dummy1 : bool

type changed_state__ref = { changed_state__content : us_rep
}

function changed_state__ref___projection(a: changed_state__ref) : us_rep =
  (a).changed_state__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic pilot_flying_side : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic selected_nav_source_changed : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

logic selected_nav_frequency_changed : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

logic nav_capture_cond_met : bool

logic attr__ATTRIBUTE_ADDRESS6 : int

logic no_higher_event_than_nav_capture_cond_met : bool

logic attr__ATTRIBUTE_ADDRESS7 : int

logic nav_active : bool

logic attr__ATTRIBUTE_ADDRESS8 : int

logic modes_on : bool

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic attr__ATTRIBUTE_ADDRESS21 : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic attr__ATTRIBUTE_ADDRESS26 : int

 (* File "nav_active_when_capture_cond_met.adb", line 22, characters 0-0 *)
goal WP_parameter_def :
  (forall nav_active_out1:bool. forall unit_delay_memory:bool.
  forall unit_delay1_memory:bool. forall unit_delay_out1:bool.
  forall unit_delay1_out1:bool. forall modes_on_out1:bool.
  forall nav_capture_cond_met_out1:bool.
  forall no_higher_event_than_nav_capture_cond_met_out1:bool.
  forall pilot_flying_side_out1:bool.
  forall selected_nav_frequency_changed_out1:bool.
  forall selected_nav_source_changed_out1:bool. forall not4_out1:bool.
  forall not3_out1:bool. forall not2_out1:bool. forall not_out1:bool.
  forall or_out1:bool. forall not1_out1:bool. forall not5_out1:bool.
  forall result:bool. forall unit_delay_out11:bool. forall result1:bool.
  forall unit_delay1_out11:bool. forall result2:bool.
  forall modes_on_out11:bool. forall result3:bool.
  forall nav_active_out11:bool. forall result4:bool.
  forall nav_capture_cond_met_out11:bool. forall result5:bool.
  forall no_higher_event_than_nav_capture_cond_met_out11:bool.
  forall result6:bool. forall pilot_flying_side_out11:bool.
  forall changed_out1:bool. forall result7:bool.
  forall selected_nav_frequency_changed_out11:bool. forall result8:bool.
  forall selected_nav_source_changed_out11:bool. forall result9:bool.
  forall not4_out11:bool. forall result10:bool. forall not3_out11:bool.
  forall result11:bool. forall not2_out11:bool. forall result12:bool.
  forall not_out11:bool. forall result13:bool. forall or_out11:bool.
  forall result14:bool. forall not1_out11:bool. forall result15:bool.
  forall not5_out11:bool. (((result = unit_delay_out1) and
  (unit_delay_out11 = unit_delay_memory)) ->
  (((result1 = unit_delay1_out1) and
  (unit_delay1_out11 = unit_delay1_memory)) ->
  (((result2 = modes_on_out1) and (modes_on_out11 = modes_on)) ->
  (((result3 = nav_active_out1) and (nav_active_out11 = nav_active)) ->
  (((result4 = nav_capture_cond_met_out1) and
  (nav_capture_cond_met_out11 = nav_capture_cond_met)) ->
  (((result5 = no_higher_event_than_nav_capture_cond_met_out1) and
  (no_higher_event_than_nav_capture_cond_met_out11 = no_higher_event_than_nav_capture_cond_met)) ->
  (((result6 = pilot_flying_side_out1) and
  (pilot_flying_side_out11 = pilot_flying_side)) ->
  (((result7 = selected_nav_frequency_changed_out1) and
  (selected_nav_frequency_changed_out11 = selected_nav_frequency_changed)) ->
  (((result8 = selected_nav_source_changed_out1) and
  (selected_nav_source_changed_out11 = selected_nav_source_changed)) ->
  (((result9 = not4_out1) and (((not (changed_out1 = true)) and
  (not4_out11 = true)) or ((changed_out1 = true) and
  (not4_out11 = false)))) -> (((result10 = not3_out1) and
  (((not (selected_nav_frequency_changed_out11 = true)) and
  (not3_out11 = true)) or ((selected_nav_frequency_changed_out11 = true) and
  (not3_out11 = false)))) -> (((result11 = not2_out1) and
  (((not (selected_nav_source_changed_out11 = true)) and
  (not2_out11 = true)) or ((selected_nav_source_changed_out11 = true) and
  (not2_out11 = false)))) -> (((result12 = not_out1) and
  (((not (unit_delay1_out11 = true)) and (not_out11 = true)) or
  ((unit_delay1_out11 = true) and (not_out11 = false)))) ->
  (((result13 = or_out1) and ((((((((((unit_delay_out11 = true) and
  (not_out11 = true)) and (nav_capture_cond_met_out11 = true)) and
  (not2_out11 = true)) and (not3_out11 = true)) and (not4_out11 = true)) and
  (modes_on_out11 = true)) and
  (no_higher_event_than_nav_capture_cond_met_out11 = true)) and
  (or_out11 = true)) or ((not ((((((((unit_delay_out11 = true) and
  (not_out11 = true)) and (nav_capture_cond_met_out11 = true)) and
  (not2_out11 = true)) and (not3_out11 = true)) and (not4_out11 = true)) and
  (modes_on_out11 = true)) and
  (no_higher_event_than_nav_capture_cond_met_out11 = true))) and
  (or_out11 = false)))) -> (((result14 = not1_out1) and
  (((not (or_out11 = true)) and (not1_out11 = true)) or
  ((or_out11 = true) and (not1_out11 = false)))) ->
  (((result15 = not5_out1) and ((((not1_out11 = true) or
  (nav_active_out11 = true)) and (not5_out11 = true)) or
  ((not ((not1_out11 = true) or (nav_active_out11 = true))) and
  (not5_out11 = false)))) -> (not5_out11 = true))))))))))))))))))
