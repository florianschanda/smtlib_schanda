(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : positive -> int

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields = { rec__foo__point__x : integer; rec__foo__point__y :
integer; rec__ext__ : us_private
}

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__foo__point__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__foo__point__y

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__foo__point__x) = to_rep(((b).us_split_fields1).rec__foo__point__x)) and
  (to_rep(((a).us_split_fields1).rec__foo__point__y) = to_rep(((b).us_split_fields1).rec__foo__point__y))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__foo__point__x) = to_rep(((b).us_split_fields1).rec__foo__point__x)) and
  (to_rep(((a).us_split_fields1).rec__foo__point__y) = to_rep(((b).us_split_fields1).rec__foo__point__y)))) ->
  (bool_eq4(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size({ us_split_fields1 = { rec__foo__point__x = a;
  rec__foo__point__y = a1; rec__ext__ = a2 }; attr__tag = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__foo__point__x = a;
  rec__foo__point__y = a1; rec__ext__ = a2 }; attr__tag = a3 })))

logic foo__point__x__first__bit : int

logic foo__point__x__last__bit : int

logic foo__point__x__position : int

axiom foo__point__x__first__bit_axiom : (0 <= foo__point__x__first__bit)

axiom foo__point__x__last__bit_axiom :
  (foo__point__x__first__bit <  foo__point__x__last__bit)

axiom foo__point__x__position_axiom : (0 <= foo__point__x__position)

logic foo__point__y__first__bit : int

logic foo__point__y__last__bit : int

logic foo__point__y__position : int

axiom foo__point__y__first__bit_axiom : (0 <= foo__point__y__first__bit)

axiom foo__point__y__last__bit_axiom :
  (foo__point__y__first__bit <  foo__point__y__last__bit)

axiom foo__point__y__position_axiom : (0 <= foo__point__y__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : integer

logic dummy3 : integer

logic dummy4 : us_private

logic dummy5 : int

type point__ref = { point__content : us_rep
}

function point__ref___projection(a: point__ref) : us_rep = (a).point__content

type us_split_fields2 = { rec__foo__blinking_point__annoyance_level :
positive; rec__foo__point__x1 : integer; rec__foo__point__y1 : integer;
rec__ext__1 : us_private
}

function us_split_fields_Annoyance_Level__projection(a: us_split_fields2) : positive =
  (a).rec__foo__blinking_point__annoyance_level

function us_split_fields_X2__projection(a: us_split_fields2) : integer =
  (a).rec__foo__point__x1

function us_split_fields_Y2__projection(a: us_split_fields2) : integer =
  (a).rec__foo__point__y1

function us_split_fields_2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep_3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : positive, us_private -> us_private

logic extract__annoyance_level : us_private -> positive

axiom extract__annoyance_level__conv :
  (forall annoyance_level:positive.
  (forall rec__ext__2:us_private.
  (extract__annoyance_level(hide_ext__(annoyance_level,
  rec__ext__2)) = annoyance_level)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__foo__point__x = ((a).us_split_fields3).rec__foo__point__x1;
  rec__foo__point__y = ((a).us_split_fields3).rec__foo__point__y1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__foo__blinking_point__annoyance_level,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__foo__blinking_point__annoyance_level =
  extract__annoyance_level(((r).us_split_fields1).rec__ext__);
  rec__foo__point__x1 = ((r).us_split_fields1).rec__foo__point__x;
  rec__foo__point__y1 = ((r).us_split_fields1).rec__foo__point__y;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  (((((to_rep1(((a).us_split_fields3).rec__foo__blinking_point__annoyance_level) = to_rep1(((b).us_split_fields3).rec__foo__blinking_point__annoyance_level)) and
  (to_rep(((a).us_split_fields3).rec__foo__point__x1) = to_rep(((b).us_split_fields3).rec__foo__point__x1))) and
  (to_rep(((a).us_split_fields3).rec__foo__point__y1) = to_rep(((b).us_split_fields3).rec__foo__point__y1))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields3).rec__foo__blinking_point__annoyance_level) = to_rep1(((b).us_split_fields3).rec__foo__blinking_point__annoyance_level)) and
  (to_rep(((a).us_split_fields3).rec__foo__point__x1) = to_rep(((b).us_split_fields3).rec__foo__point__x1))) and
  (to_rep(((a).us_split_fields3).rec__foo__point__y1) = to_rep(((b).us_split_fields3).rec__foo__point__y1)))) ->
  (bool_eq5(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:positive. forall a1:integer. forall a2:integer.
  forall a3:us_private. forall a4:int. (0 <= object__size1({
  us_split_fields3 = { rec__foo__blinking_point__annoyance_level = a;
  rec__foo__point__x1 = a1; rec__foo__point__y1 = a2; rec__ext__1 = a3 };
  attr__tag1 = a4 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:positive. forall a1:integer. forall a2:integer.
  forall a3:us_private. forall a4:int. (0 <= object__alignment1({
  us_split_fields3 = { rec__foo__blinking_point__annoyance_level = a;
  rec__foo__point__x1 = a1; rec__foo__point__y1 = a2; rec__ext__1 = a3 };
  attr__tag1 = a4 })))

logic foo__blinking_point__annoyance_level__first__bit : int

logic foo__blinking_point__annoyance_level__last__bit : int

logic foo__blinking_point__annoyance_level__position : int

axiom foo__blinking_point__annoyance_level__first__bit_axiom :
  (0 <= foo__blinking_point__annoyance_level__first__bit)

axiom foo__blinking_point__annoyance_level__last__bit_axiom :
  (foo__blinking_point__annoyance_level__first__bit <  foo__blinking_point__annoyance_level__last__bit)

axiom foo__blinking_point__annoyance_level__position_axiom :
  (0 <= foo__blinking_point__annoyance_level__position)

logic foo__point__x__first__bit1 : int

logic foo__point__x__last__bit1 : int

logic foo__point__x__position1 : int

axiom foo__point__x__first__bit_axiom1 : (0 <= foo__point__x__first__bit1)

axiom foo__point__x__last__bit_axiom1 :
  (foo__point__x__first__bit1 <  foo__point__x__last__bit1)

axiom foo__point__x__position_axiom1 : (0 <= foo__point__x__position1)

logic foo__point__y__first__bit1 : int

logic foo__point__y__last__bit1 : int

logic foo__point__y__position1 : int

axiom foo__point__y__first__bit_axiom1 : (0 <= foo__point__y__first__bit1)

axiom foo__point__y__last__bit_axiom1 :
  (foo__point__y__first__bit1 <  foo__point__y__last__bit1)

axiom foo__point__y__position_axiom1 : (0 <= foo__point__y__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy6 : positive

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : us_private

logic dummy10 : int

type blinking_point__ref = { blinking_point__content : us_rep1
}

function blinking_point__ref___projection(a: blinking_point__ref) : us_rep1 =
  (a).blinking_point__content

logic p__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "foo.ads", line 10, characters 0-0 *)
goal WP_parameter_def :
  (forall limit:int. forall p__split_fields:integer.
  forall p__split_fields1:integer. (in_range1(limit) ->
  ((to_rep(p__split_fields) <= limit) ->
  ((to_rep(p__split_fields) <= limit) or
  (to_rep(p__split_fields1) <= limit)))))
