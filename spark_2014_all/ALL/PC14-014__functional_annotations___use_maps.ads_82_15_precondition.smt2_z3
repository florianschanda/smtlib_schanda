;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tcount_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB
  (tcount_typeB__content a))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-fun dummy1 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int2 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort hash_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (hash_type hash_type) Bool)

(declare-fun dummy2 () hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(declare-fun to_rep1 (hash_type) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x hash_type)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__use_maps__my_maps__map__capacity count_type)(rec__use_maps__my_maps__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__use_maps__my_maps__map__capacity a))

(define-fun us_split_discrs_2__projection ((a us_split_discrs)) hash_type
  (rec__use_maps__my_maps__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__use_maps__my_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__use_maps__my_maps__map a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__use_maps__my_maps__map__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__use_maps__my_maps__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__use_maps__my_maps__map__modulus
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__use_maps__my_maps__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__use_maps__my_maps__map (us_split_fields1 a))
                           (rec__use_maps__my_maps__map (us_split_fields1 b))) true))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun use_maps__my_maps__map__capacity__first__bit () Int)

(declare-fun use_maps__my_maps__map__capacity__last__bit () Int)

(declare-fun use_maps__my_maps__map__capacity__position () Int)

;; use_maps__my_maps__map__capacity__first__bit_axiom
  (assert (<= 0 use_maps__my_maps__map__capacity__first__bit))

;; use_maps__my_maps__map__capacity__last__bit_axiom
  (assert
  (< use_maps__my_maps__map__capacity__first__bit use_maps__my_maps__map__capacity__last__bit))

;; use_maps__my_maps__map__capacity__position_axiom
  (assert (<= 0 use_maps__my_maps__map__capacity__position))

(declare-fun use_maps__my_maps__map__modulus__first__bit () Int)

(declare-fun use_maps__my_maps__map__modulus__last__bit () Int)

(declare-fun use_maps__my_maps__map__modulus__position () Int)

;; use_maps__my_maps__map__modulus__first__bit_axiom
  (assert (<= 0 use_maps__my_maps__map__modulus__first__bit))

;; use_maps__my_maps__map__modulus__last__bit_axiom
  (assert
  (< use_maps__my_maps__map__modulus__first__bit use_maps__my_maps__map__modulus__last__bit))

;; use_maps__my_maps__map__modulus__position_axiom
  (assert (<= 0 use_maps__my_maps__map__modulus__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__use_maps__my_maps__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__use_maps__my_maps__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__use_maps__my_maps__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__use_maps__my_maps__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun use_maps__my_maps__cursor__node__first__bit () Int)

(declare-fun use_maps__my_maps__cursor__node__last__bit () Int)

(declare-fun use_maps__my_maps__cursor__node__position () Int)

;; use_maps__my_maps__cursor__node__first__bit_axiom
  (assert (<= 0 use_maps__my_maps__cursor__node__first__bit))

;; use_maps__my_maps__cursor__node__last__bit_axiom
  (assert
  (< use_maps__my_maps__cursor__node__first__bit use_maps__my_maps__cursor__node__last__bit))

;; use_maps__my_maps__cursor__node__position_axiom
  (assert (<= 0 use_maps__my_maps__cursor__node__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-fun dummy4 () us_rep1)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_173 Int)
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool)) Bool (=>
                                      (or (= temp___is_init_170 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_173)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__use_maps__my_maps__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-fun dummy5 () us_rep2)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref_2__projection ((a map__ref1)) us_rep2 (map__content1 a))

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(declare-sort key_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (key_type key_type) Bool)

(declare-fun dummy6 () key_type)

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref_2__projection ((a key_type__ref)) key_type
  (key_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_354 Int)
  (temp___is_init_351 Bool) (temp___skip_constant_352 Bool)
  (temp___do_toplevel_353 Bool)) Bool (=>
                                      (or (= temp___is_init_351 true)
                                      (<= 1 2147483647)) (in_range3
                                      temp___expr_354)))

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-fun dummy7 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_2__projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_360 Int)
  (temp___is_init_357 Bool) (temp___skip_constant_358 Bool)
  (temp___do_toplevel_359 Bool)) Bool (=>
                                      (or (= temp___is_init_357 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_360)))

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard2 (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption ((temp___expr_367 us_rep2)
  (temp___skip_top_level_368 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_368 true))
                                         (and
                                         (= (is_empty temp___expr_367) true)
                                         (= (length2 temp___expr_367) 0))))

(declare-fun has_key (us_rep2 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 Int) Bool)

(declare-fun witness (us_rep2 Int) Int)

(declare-fun witness__function_guard (Int us_rep2 Int) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant1 key true true true)
     (= (has_key container key) true))
     (let ((result (get container key)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k Int))
     (=> (and (in_range3 k) (= (has_key container k) true))
     (= (= k key) (= (witness container key) (witness container k)))))))
     (dynamic_invariant2 result true false true)))) :pattern ((get container
                                                              key)) ))))

(declare-sort extended_index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-fun dummy8 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq9 (us_rep3 us_rep3) Bool)

(declare-fun dummy9 () us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (element_type1 element_type1) Bool)

(declare-fun dummy10 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_3__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant3 ((temp___expr_385 Int)
  (temp___is_init_382 Bool) (temp___skip_constant_383 Bool)
  (temp___do_toplevel_384 Bool)) Bool (=>
                                      (or (= temp___is_init_382 true)
                                      (<= 1 2147483647)) (in_range6
                                      temp___expr_385)))

(define-fun dynamic_invariant4 ((temp___expr_391 Int)
  (temp___is_init_388 Bool) (temp___skip_constant_389 Bool)
  (temp___do_toplevel_390 Bool)) Bool (=>
                                      (or (= temp___is_init_388 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_391)))

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get1 left
                                                                   n)
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq9 a b) (oeq2 a b)) :pattern ((user_eq9 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_398 us_rep3)
  (temp___skip_top_level_399 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_399 true))
                                         (= (length3 temp___expr_398) 0)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant4 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant3 (get1 container position) true false true)) :pattern (
  (get1 container position)) ))))

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq11 (us_rep4 us_rep4) Bool)

(declare-fun dummy11 () us_rep4)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref_3__projection ((a map__ref2)) us_rep4 (map__content2 a))

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep1)))))
(define-fun key_type__ref_3__projection ((a key_type__ref1)) us_rep1
  (key_type__content1 a))

(declare-fun get2 (us_rep4 us_rep1) Int)

(declare-fun get__function_guard2 (Int us_rep4 us_rep1) Bool)

(declare-sort element_type2 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (element_type2 element_type2) Bool)

(declare-fun dummy12 () element_type2)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_4__projection ((a element_type__ref2)) element_type2
  (element_type__content2 a))

(define-fun dynamic_invariant5 ((temp___expr_411 Int)
  (temp___is_init_408 Bool) (temp___skip_constant_409 Bool)
  (temp___do_toplevel_410 Bool)) Bool (=>
                                      (or (= temp___is_init_408 true)
                                      (<= 1 2147483647)) (in_range7
                                      temp___expr_411)))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard4 (Int us_rep4) Bool)

(declare-fun is_empty1 (us_rep4) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)

(define-fun default_initial_assumption2 ((temp___expr_418 us_rep4)
  (temp___skip_top_level_419 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_419 true))
                                         (and
                                         (= (is_empty1 temp___expr_418) true)
                                         (= (length4 temp___expr_418) 0))))

(declare-fun has_key1 (us_rep4 us_rep1) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep1) Bool)

(declare-fun witness1 (us_rep4 us_rep1) Int)

(declare-fun witness__function_guard1 (Int us_rep4 us_rep1) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key us_rep1))
  (! (=> (= (has_key1 container key) true)
     (let ((result (get2 container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get1 container (witness1 container key)))
     (forall ((k us_rep1))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq1 k key) true)
     (= (witness1 container key) (witness1 container k)))))))
     (dynamic_invariant5 result true false true)))) :pattern ((get2 container
                                                              key)) ))))

(declare-fun model__ (us_rep) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep) Bool)

;; model____post_axiom
  (assert true)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and
     (and (= (length3 result) (length container))
     (forall ((temp___435 Int))
     (=>
     (and (in_range5 temp___435)
     (= (iter_has_element result temp___435) true))
     (= (has_key (model__ container) (get1 result temp___435)) true))))
     (forall ((key Int))
     (=> (and (in_range3 key) (= (has_key (model__ container) key) true))
     (and (< 0 (find result key)) (= (get1 result (find result key)) key)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (= (find result (get1 result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length container)))
     (=> (= (get1 result i) (get1 result j)) (= i j)))))))) :pattern (
  (keys container)) )))

(declare-fun positions (us_rep) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep) Bool)

(declare-fun no_element () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key1 result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key1 result i) true)
     (and
     (and (<= 1 (get2 result i)) (<= (get2 result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key1 result j) true)
     (=> (= (get2 result i) (get2 result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun has_element1 (Int us_rep us_rep1) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)

;; has_element__post__dispatch_axiom
  (assert true)

(declare-sort key_type1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (key_type1 key_type1) Bool)

(declare-fun dummy13 () key_type1)

(declare-datatypes ()
((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___projection ((a key_type__ref2)) key_type1
  (key_type__content2 a))

(define-fun dynamic_invariant6 ((temp___expr_319 Int)
  (temp___is_init_316 Bool) (temp___skip_constant_317 Bool)
  (temp___do_toplevel_318 Bool)) Bool (=>
                                      (or (= temp___is_init_316 true)
                                      (<= 1 2147483647)) (in_range8
                                      temp___expr_319)))

(define-fun key ((container us_rep)
  (position us_rep1)) Int (get1 (keys container)
                          (get2 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep1) Bool)

(declare-fun key1 (Int us_rep us_rep1) Int)

(declare-fun key__function_guard1 (Int Int us_rep us_rep1) Bool)

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant6
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

(declare-sort element_type3 0)

(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (element_type3 element_type3) Bool)

(declare-fun dummy14 () element_type3)

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___projection ((a element_type__ref3)) element_type3
  (element_type__content3 a))

(define-fun dynamic_invariant7 ((temp___expr_325 Int)
  (temp___is_init_322 Bool) (temp___skip_constant_323 Bool)
  (temp___do_toplevel_324 Bool)) Bool (=>
                                      (or (= temp___is_init_322 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range9 temp___expr_325)))

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get (model__ container) (key container position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

(declare-fun element1 (Int us_rep us_rep1) Int)

(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)

;; element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant7
  (element1 attr__tag container position) true false
  true) :pattern ((element1 attr__tag container position)) )))))

(define-fun element__2 ((container us_rep)
  (key2 Int)) Int (get (model__ container) key2))

(declare-fun element__2__function_guard (Int us_rep Int) Bool)

(declare-fun element__21 (Int us_rep Int) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)

(define-fun contains ((container us_rep)
  (key2 Int)) Bool (has_key (model__ container) key2))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun contains1 (Int us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (key2 Int))
  (forall ((container us_rep))
  (! (=> (dynamic_invariant6 key2 true true true) (dynamic_invariant7
     (element__21 attr__tag container key2) true false true)) :pattern (
  (element__21 attr__tag container key2)) ))))

(declare-fun ole (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun keys_included (us_rep2 us_rep2) Bool)

(declare-fun keys_included__function_guard (Bool us_rep2 us_rep2) Bool)

(define-fun same_keys ((left us_rep2)
  (right us_rep2)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun keys_included_except (us_rep2 us_rep2 Int) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep2 us_rep2
  Int) Bool)

(declare-fun elements_equal_except (us_rep2 us_rep2 Int) Bool)

(declare-fun elements_equal_except__function_guard (Bool us_rep2 us_rep2
  Int) Bool)

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length3 left) (length3 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (get1
                                                                    left i)
                                                                    (get1
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(declare-fun oeq3 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)

(declare-fun keys_included_except1 (us_rep4 us_rep4 us_rep1) Bool)

(declare-fun keys_included_except__function_guard1 (Bool us_rep4 us_rep4
  us_rep1) Bool)

(declare-fun mapping_preserved (us_rep3 us_rep3 us_rep4 us_rep4) Bool)

(declare-fun mapping_preserved__function_guard (Bool us_rep3 us_rep3 us_rep4
  us_rep4) Bool)

(declare-fun find1 (us_rep Int) us_rep1)

(declare-fun find__function_guard1 (us_rep1 us_rep Int) Bool)

(declare-fun find2 (Int us_rep Int) us_rep1)

(declare-fun find__function_guard2 (us_rep1 Int us_rep Int) Bool)

(declare-fun include__specific_post (Int us_split_fields us_split_discrs Int
  Int us_split_fields) Bool)

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

(declare-fun first1 (Int us_rep) us_rep1)

(declare-fun first__function_guard1 (us_rep1 Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get2 (positions container) result) 1)))) :pattern ((first container)) )))

;; first__post__dispatch_axiom
  (assert true)

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

(declare-fun next1 (Int us_rep us_rep1) us_rep1)

(declare-fun next__function_guard1 (us_rep1 Int us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq1 position no_element) true)
          (= (get2 (positions container) position) (length container)))
     (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get2 (positions container) result) (+ (get2 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

;; next__post__dispatch_axiom
  (assert true)

(declare-fun prop__ (Int) Bool)

(declare-fun prop____function_guard (Bool Int) Bool)

(declare-sort integer 0)

(define-fun in_range10 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (integer integer) Bool)

(declare-fun dummy15 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant8 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range10 temp___expr_15)))

;; prop____post_axiom
  (assert true)

;; prop____def_axiom
  (assert
  (forall ((e Int))
  (! (= (= (prop__ e) true) (<= 0 e)) :pattern ((prop__ e)) )))

(declare-fun s1__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun s2 () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant9 ((temp___expr_167 (_ BitVec 32))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool true)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant6 key2 true true true)
     (let ((result (find container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length3 container)) (= key2 (get1 container result))))
     (dynamic_invariant result true false true)))) :pattern ((find container
                                                             key2)) ))))

(declare-fun k_keys_included (us_rep3 us_rep3) Bool)

(declare-fun k_keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

;; k_keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (k_keys_included left right) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length3 left)))
     (and (< 0 (find right (get1 left i)))
     (= (get1 right (find right (get1 left i))) (get1 left i)))))) :pattern (
  (k_keys_included left right)) )))

(declare-fun keys_included1 (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard1 (Bool us_rep4 us_rep4) Bool)

;; mapping_preserved__post_axiom
  (assert
  (forall ((k_left us_rep3) (k_right us_rep3))
  (forall ((p_left us_rep4) (p_right us_rep4))
  (! (=> (= (mapping_preserved k_left k_right p_left p_right) true)
     (and
     (and (= (keys_included1 p_left p_right) true)
     (= (k_keys_included k_left k_right) true))
     (forall ((c us_rep1))
     (=> (= (has_key1 p_left c) true)
     (= (get1 k_left (get2 p_left c)) (get1 k_right (get2 p_right c))))))) :pattern (
  (mapping_preserved k_left k_right p_left p_right)) ))))

(declare-fun oeq4 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep2 us_rep2) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq4 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant6 key2 true true true)
     (let ((result (find1 container key2)))
     (ite (not (= (has_key (model__ container) key2) true))
     (= (bool_eq1 result no_element) true)
     (and
     (and (= (has_key1 (positions container) result) true)
     (= (get2 (positions container) result) (find (keys container) key2)))
     (= (key container result) key2))))) :pattern ((find1 container key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

;; contains__post__dispatch_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant1 key2 true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range3 k) (= (has_key container k) true)) (= k key2)))
     (= (has_key container key2) true)))) :pattern ((has_key container key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length2 container)
  true false true) :pattern ((length2 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole left right) true)
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))) :pattern (
  (ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key right key2) true))
     (= (has_key left key2) true))))) :pattern ((oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key2 Int))
     (not (and (in_range3 key2) (= (has_key container key2) true))))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (keys_included left right) true)
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key left key2) true))
     (= (has_key right key2) true)))) :pattern ((keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant1 new_key true true true)
     (= (= (keys_included_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key left key2) true))
     (=> (not (= key2 new_key)) (= (has_key right key2) true)))))) :pattern (
  (keys_included_except left right new_key)) ))))

;; elements_equal_except__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant1 new_key true true true)
     (= (= (elements_equal_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key left key2) true))
     (=> (not (= key2 new_key))
     (and (= (has_key right key2) true) (= (get left key2) (get right key2)))))))) :pattern (
  (elements_equal_except left right new_key)) ))))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant1 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (witness container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true)
     (= (has_witness container witness2) true)) (dynamic_invariant2
     (w_get container witness2) true false true)) :pattern ((w_get container
                                                            witness2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length3 container)) )))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key1 container k) true) (= (bool_eq1 k key2) true)))
     (= (has_key1 container key2) true))) :pattern ((has_key1 container key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant (length4 container)
  true false true) :pattern ((length4 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq3 left right) true)
     (and
     (forall ((key2 us_rep1))
     (=> (= (has_key1 left key2) true)
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))
     (forall ((key2 us_rep1))
     (=> (= (has_key1 right key2) true) (= (has_key1 left key2) true))))) :pattern (
  (oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty1 container) true)
     (forall ((key2 us_rep1)) (not (= (has_key1 container key2) true)))) :pattern (
  (is_empty1 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included1 left right) true)
     (forall ((key2 us_rep1))
     (=> (= (has_key1 left key2) true) (= (has_key1 right key2) true)))) :pattern (
  (keys_included1 left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key us_rep1))
  (! (= (= (keys_included_except1 left right new_key) true)
     (forall ((key2 us_rep1))
     (=> (= (has_key1 left key2) true)
     (=> (not (= (bool_eq1 key2 new_key) true))
     (= (has_key1 right key2) true))))) :pattern ((keys_included_except1 left
                                                  right new_key)) ))))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep1))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (witness1 container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant5
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(declare-fun s1__split_fields () us_main_type)

(declare-fun cu__split_fields () count_type)

(declare-fun temp___925 () us_rep3)

(declare-fun temp___924 () Int)

(declare-fun o () Bool)

(declare-fun o1 () Bool)

(declare-fun k () Int)

(declare-fun o2 () Int)

(declare-fun temp___929 () us_rep3)

(declare-fun temp___928 () Int)

(declare-fun o3 () Bool)

(declare-fun o4 () Bool)

(declare-fun k1 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Bool)

(declare-fun use_maps__union_prop__cu__assume () count_type)

(declare-fun temp___906 () count_type)

(declare-fun temp___905 () count_type)

(declare-fun temp___9051 () hash_type)

(declare-fun temp___9052 () us_main_type)

(declare-fun temp___907 () Int)

(declare-fun o12 () us_rep4)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun temp___909 () us_rep3)

(declare-fun temp___908 () Int)

(declare-fun o16 () Bool)

(declare-fun o17 () Bool)

(declare-fun k2 () Int)

(declare-fun o18 () us_rep2)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun temp___904 () count_type)

(declare-fun o22 () Bool)

(declare-fun temp___917 () us_rep3)

(declare-fun temp___916 () Int)

(declare-fun o23 () Bool)

(declare-fun o24 () Bool)

(declare-fun k3 () Int)

(declare-fun o25 () Int)

(declare-fun s1__split_fields1 () us_main_type)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () count_type)

(declare-fun cu__split_fields1 () count_type)

(declare-fun result3 () Bool)

(declare-fun s1__split_fields2 () us_main_type)

(declare-fun cu__split_fields2 () count_type)

(declare-fun result4 () Bool)

(declare-fun s1__split_fields3 () us_main_type)

(declare-fun result5 () count_type)

(declare-fun cu__split_fields3 () us_split_fields2)

(declare-fun result6 () Bool)

(declare-fun s1__split_fields4 () us_split_fields__ref)

(declare-fun cu__split_fields4 () us_split_fields__ref1)

(declare-fun s1__split_fields5 () us_split_fields)

(declare-fun cu__split_fields5 () us_split_fields2)

(declare-fun s1__split_fields6 () us_split_fields__ref)

(declare-fun cu__split_fields6 () us_split_fields__ref1)

(declare-fun s1__split_fields7 () us_split_fields)

(declare-fun cu__split_fields7 () us_split_fields2)

(declare-fun s1__split_fields8 () us_split_fields__ref)

(declare-fun cu__split_fields8 () us_split_fields__ref1)

(declare-fun s1__split_fields9 () us_split_fields)

(declare-fun cu__split_fields9 () us_split_fields2)

(declare-fun result7 () Bool)

(define-fun s1__split_fields10 () us_split_fields (mk___split_fields
                                                  s1__split_fields3))

(define-fun cu__split_fields10 () us_split_fields2 (mk___split_fields1
                                                   cu__split_fields2))

(define-fun s1__split_fields11 () us_split_fields (mk___split_fields
                                                  s1__split_fields2))

(define-fun cu__split_fields11 () us_split_fields2 (mk___split_fields1
                                                   cu__split_fields1))

(define-fun result8 () us_split_fields__ref1 (mk___split_fields__ref1
                                             (mk___split_fields1 result2)))

(define-fun s1__split_fields12 () us_split_fields (mk___split_fields
                                                  s1__split_fields1))

(define-fun temp___9041 () us_rep1 (mk___rep1
                                   (mk___split_fields1 temp___904)))

(define-fun use_maps__union_prop__cu__assume1 () us_rep1 (mk___rep1
                                                         (mk___split_fields1
                                                         use_maps__union_prop__cu__assume)))

(define-fun cu__split_fields12 () us_split_fields__ref1 (mk___split_fields__ref1
                                                        (mk___split_fields1
                                                        cu__split_fields)))

(define-fun s1__split_fields13 () us_split_fields__ref (mk___split_fields__ref
                                                       (mk___split_fields
                                                       s1__split_fields)))

;; H
  (assert
  (and
  (and
  (let ((temp___933 (keys
                    (mk___rep s1__split_discrs
                    (mk___split_fields s1__split_fields)))))
  (forall ((temp___932 Int))
  (=>
  (and (in_range5 temp___932)
  (= (iter_has_element temp___933 temp___932) true))
  (= (prop__
     (get
     (model__
     (mk___rep s1__split_discrs (mk___split_fields s1__split_fields)))
     (get1 temp___933 temp___932))) true))))
  (let ((temp___935 (keys s2)))
  (forall ((temp___934 Int))
  (=>
  (and (in_range5 temp___934)
  (= (iter_has_element temp___935 temp___934) true))
  (= (prop__ (get (model__ s2) (get1 temp___935 temp___934))) true)))))
  (< (length s2) (- (to_rep
                    (rec__use_maps__my_maps__map__capacity s1__split_discrs))
  (length (mk___rep s1__split_discrs (mk___split_fields s1__split_fields)))))))

;; H
  (assert
  (and (= use_maps__union_prop__cu__assume1 (first s2))
  (ite (= (= (length s2) 0) true)
  (= (bool_eq1 use_maps__union_prop__cu__assume1 no_element) true)
  (and (= (has_key1 (positions s2) use_maps__union_prop__cu__assume1) true)
  (= (get2 (positions s2) use_maps__union_prop__cu__assume1) 1)))))

;; H
  (assert (= result8 cu__split_fields12))

;; H
  (assert (= use_maps__union_prop__cu__assume cu__split_fields1))

;; H
  (assert
  (and (= result3 (has_key1 (positions s2) (mk___rep1 cu__split_fields11)))
  (= (= result3 true)
  (= (has_key1 (positions s2) (mk___rep1 cu__split_fields11)) true))))

;; H
  (assert (=> (= result3 true) (= temp___906 cu__split_fields1)))

;; H
  (assert
  (=> (= result3 true)
  (and (= s1__split_discrs (mk___split_discrs temp___905 temp___9051))
  (= s1__split_fields temp___9052))))

;; H
  (assert
  (=> (= result3 true)
  (= temp___907 (length
                (mk___rep s1__split_discrs
                (mk___split_fields s1__split_fields))))))

;; H
  (assert
  (=> (= result3 true)
  (< (length (mk___rep s1__split_discrs s1__split_fields11)) (+ temp___907
  (get2 (positions s2) (mk___rep1 cu__split_fields10))))))

;; H
  (assert
  (=> (= result3 true)
  (let ((temp___913 (keys (mk___rep s1__split_discrs s1__split_fields11))))
  (forall ((temp___912 Int))
  (=>
  (and (in_range5 temp___912)
  (= (iter_has_element temp___913 temp___912) true))
  (= (prop__
     (get (model__ (mk___rep s1__split_discrs s1__split_fields11))
     (get1 temp___913 temp___912))) true))))))

;; H
  (assert
  (=> (= result3 true)
  (= (has_key1 (positions s2) (mk___rep1 cu__split_fields10)) true)))

;; H
  (assert
  (=> (= result3 true)
  (and (= o21 (element s2 (mk___rep1 cu__split_fields10)))
  (and (in_range9 o21)
  (= o21 (get (model__ s2) (key s2 (mk___rep1 cu__split_fields10))))))))

;; H
  (assert
  (=> (= result3 true)
  (and (= o20 (key s2 (mk___rep1 cu__split_fields10)))
  (and (in_range8 o20)
  (= o20 (get1 (keys s2)
         (get2 (positions s2) (mk___rep1 cu__split_fields10))))))))

;; H
  (assert
  (=> (= result3 true)
  (and
  (and
  (= (has_key (model__ (mk___rep s1__split_discrs s1__split_fields10)) o20) true)
  (= (get (model__ (mk___rep s1__split_discrs s1__split_fields10)) o20)
  o21))
  (ite (= (has_key (model__ (mk___rep s1__split_discrs s1__split_fields11))
          o20) true)
  (and
  (and
  (and
  (and
  (= (oeq3 (positions (mk___rep s1__split_discrs s1__split_fields10))
     (positions (mk___rep s1__split_discrs s1__split_fields11))) true)
  (= (get1 (keys (mk___rep s1__split_discrs s1__split_fields10))
     (get2 (positions (mk___rep s1__split_discrs s1__split_fields10))
     (find1 (mk___rep s1__split_discrs s1__split_fields10) o20))) o20))
  (= (equal_except (keys (mk___rep s1__split_discrs s1__split_fields11))
     (keys (mk___rep s1__split_discrs s1__split_fields10))
     (get2 (positions (mk___rep s1__split_discrs s1__split_fields10))
     (find1 (mk___rep s1__split_discrs s1__split_fields10) o20))) true))
  (= (same_keys (model__ (mk___rep s1__split_discrs s1__split_fields10))
     (model__ (mk___rep s1__split_discrs s1__split_fields11))) true))
  (= (elements_equal_except
     (model__ (mk___rep s1__split_discrs s1__split_fields10))
     (model__ (mk___rep s1__split_discrs s1__split_fields11)) o20) true))
  (and
  (and
  (and
  (and
  (and
  (= (length (mk___rep s1__split_discrs s1__split_fields10)) (+ (length
                                                                (mk___rep
                                                                s1__split_discrs
                                                                s1__split_fields11)) 1))
  (= (ole (model__ (mk___rep s1__split_discrs s1__split_fields11))
     (model__ (mk___rep s1__split_discrs s1__split_fields10))) true))
  (= (keys_included_except
     (model__ (mk___rep s1__split_discrs s1__split_fields10))
     (model__ (mk___rep s1__split_discrs s1__split_fields11)) o20) true))
  (= (get1 (keys (mk___rep s1__split_discrs s1__split_fields10))
     (get2 (positions (mk___rep s1__split_discrs s1__split_fields10))
     (find1 (mk___rep s1__split_discrs s1__split_fields10) o20))) o20))
  (= (mapping_preserved (keys (mk___rep s1__split_discrs s1__split_fields11))
     (keys (mk___rep s1__split_discrs s1__split_fields10))
     (positions (mk___rep s1__split_discrs s1__split_fields11))
     (positions (mk___rep s1__split_discrs s1__split_fields10))) true))
  (= (keys_included_except1
     (positions (mk___rep s1__split_discrs s1__split_fields10))
     (positions (mk___rep s1__split_discrs s1__split_fields11))
     (find1 (mk___rep s1__split_discrs s1__split_fields10) o20)) true))))))

;; H
  (assert
  (=> (= result3 true)
  (and (= temp___9041 (next s2 (mk___rep1 cu__split_fields10)))
  (ite (= (ite (= (bool_eq1 (mk___rep1 cu__split_fields10) no_element) false) (=
          (get2 (positions s2) (mk___rep1 cu__split_fields10)) (length s2)) true) true)
  (= (bool_eq1 temp___9041 no_element) true)
  (and (= (has_key1 (positions s2) temp___9041) true)
  (= (get2 (positions s2) temp___9041) (+ (get2 (positions s2)
                                          (mk___rep1 cu__split_fields10)) 1)))))))

;; H
  (assert (=> (= result3 true) (= result5 cu__split_fields2)))

;; H
  (assert
  (=> (= result3 true) (= cu__split_fields3 (mk___split_fields1 temp___904))))

;; H
  (assert
  (=> (= result3 true)
  (and (= o22 (has_key1 (positions s2) (mk___rep1 cu__split_fields3)))
  (= (= o22 true)
  (= (has_key1 (positions s2) (mk___rep1 cu__split_fields3)) true)))))

;; H
  (assert
  (=> (= result3 true) (= result6 (ite (not (= o22 true)) true false))))

;; H
  (assert (=> (= result3 true) (= result6 true)))

;; H
  (assert
  (=> (= result3 true)
  (= cu__split_fields4 (mk___split_fields__ref1 cu__split_fields3))))

;; H
  (assert
  (=> (= result3 true)
  (= s1__split_fields4 (mk___split_fields__ref s1__split_fields10))))

;; H
  (assert (=> (= result3 true) (= cu__split_fields5 cu__split_fields3)))

;; H
  (assert (=> (= result3 true) (= s1__split_fields5 s1__split_fields10)))

;; H
  (assert (=> (= result3 true) (= cu__split_fields6 cu__split_fields4)))

;; H
  (assert (=> (= result3 true) (= s1__split_fields6 s1__split_fields4)))

;; H
  (assert (=> (= result3 true) (= cu__split_fields7 cu__split_fields5)))

;; H
  (assert (=> (= result3 true) (= s1__split_fields7 s1__split_fields5)))

;; H
  (assert
  (=> (not (= result3 true))
  (= cu__split_fields6 (mk___split_fields__ref1 cu__split_fields11))))

;; H
  (assert
  (=> (not (= result3 true)) (= s1__split_fields6 s1__split_fields13)))

;; H
  (assert
  (=> (not (= result3 true)) (= cu__split_fields7 cu__split_fields11)))

;; H
  (assert
  (=> (not (= result3 true)) (= s1__split_fields7 s1__split_fields12)))

;; H
  (assert (= cu__split_fields8 cu__split_fields6))

;; H
  (assert (= s1__split_fields8 s1__split_fields6))

;; H
  (assert (= cu__split_fields9 cu__split_fields7))

;; H
  (assert (= s1__split_fields9 s1__split_fields7))

;; H
  (assert
  (and
  (= temp___917 (keys
                (mk___rep s1__split_discrs
                (us_split_fields__content s1__split_fields8))))
  (and
  (and
  (and
  (and
  (= (length3 temp___917) (length
                          (mk___rep s1__split_discrs
                          (us_split_fields__content s1__split_fields8))))
  (forall ((temp___431 Int))
  (=>
  (and (in_range5 temp___431)
  (= (iter_has_element temp___917 temp___431) true))
  (= (has_key
     (model__
     (mk___rep s1__split_discrs (us_split_fields__content s1__split_fields8)))
     (get1 temp___917 temp___431)) true))))
  (forall ((key2 Int))
  (=>
  (and (in_range3 key2)
  (= (has_key
     (model__
     (mk___rep s1__split_discrs (us_split_fields__content s1__split_fields8)))
     key2) true))
  (and (< 0 (find temp___917 key2))
  (= (get1 temp___917 (find temp___917 key2)) key2)))))
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (length
        (mk___rep s1__split_discrs
        (us_split_fields__content s1__split_fields8)))))
  (= (find temp___917 (get1 temp___917 i)) i))))
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (length
        (mk___rep s1__split_discrs
        (us_split_fields__content s1__split_fields8)))))
  (forall ((j Int))
  (=>
  (and (<= 1 j)
  (<= j (length
        (mk___rep s1__split_discrs
        (us_split_fields__content s1__split_fields8)))))
  (=> (= (get1 temp___917 i) (get1 temp___917 j)) (= i j)))))))))

;; H
  (assert
  (and (= o23 (iter_has_element temp___917 temp___916))
  (= (= o23 true) (and (<= 1 temp___916) (<= temp___916 (last temp___917))))))

;; H
  (assert (= (= o24 true) (in_range5 temp___916)))

;; H
  (assert (= result7 (ite (= o24 true) o23 false)))

;; H
  (assert (= result7 true))

(assert
;; WP_parameter_def
 ;; File "use_maps.ads", line 75, characters 0-0
  (not (<= 1 temp___916)))
(check-sat)
(exit)
