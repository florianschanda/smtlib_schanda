;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort enum_a 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 11)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (enum_a enum_a) Bool)

(declare-const dummy enum_a)

(declare-datatypes ((enum_a__ref 0))
(((mk_enum_a__ref (enum_a__content enum_a)))))
(define-fun enum_a__ref___projection ((a enum_a__ref)) enum_a (enum_a__content
                                                              a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 11)) (in_range1 temp___expr_135)))

(declare-sort enum_b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (enum_b enum_b) Bool)

(declare-const dummy1 enum_b)

(declare-datatypes ((enum_b__ref 0))
(((mk_enum_b__ref (enum_b__content enum_b)))))
(define-fun enum_b__ref___projection ((a enum_b__ref)) enum_b (enum_b__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 5)) (in_range2 temp___expr_141)))

(declare-const sort Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const r Int)

(declare-const real_world__example_a__result Int)

(declare-const result Int)

(declare-const r1 Int)

(declare-const result1 Int)

(declare-const r2 Int)

(declare-const result2 Int)

(declare-const r3 Int)

(declare-const result3 Int)

(declare-const r4 Int)

(declare-const result4 Int)

(declare-const r5 Int)

(declare-const result5 Int)

(declare-const r6 Int)

(declare-const result6 Int)

(declare-const real_world__example_a__result1 Int)

(declare-const real_world__example_a__result2 Int)

(declare-const real_world__example_a__result3 Int)

(declare-const r7 Int)

(declare-const real_world__example_a__result4 Int)

(declare-const r8 Int)

(declare-const real_world__example_a__result5 Int)

(declare-const result7 Int)

;; H
  (assert (in_range1 sort))

;; H
  (assert (=> (<= 0 5) (in_range2 r)))

;; H
  (assert (=> (= sort 2) (= result r)))

;; H
  (assert (=> (= sort 2) (= r1 3)))

;; H
  (assert (=> (not (= sort 2)) (=> (= sort 4) (= result1 r))))

;; H
  (assert (=> (not (= sort 2)) (=> (= sort 4) (= r2 1))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))) (= result2
  r)))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))) (= r3 2)))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (= sort 1) (= result3 r))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (= sort 1) (= r4 4))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (not (= sort 1)) (=> (= sort 8) (= result4 r)))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (not (= sort 1)) (=> (= sort 8) (= r5 5)))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (not (= sort 1)) (=> (not (= sort 8)) (= result5 r)))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (not (= sort 1)) (=> (not (= sort 8)) (= r6 0)))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (not (= sort 1)) (=> (not (= sort 8)) (= r5 r6)))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7)))))
  (=> (not (= sort 1)) (= r4 r5))))))

;; H
  (assert
  (=> (not (= sort 2))
  (=> (not (= sort 4))
  (=>
  (not
  (=> (not (= sort 5))
  (=> (not (= sort 9)) (=> (not (= sort 6)) (= sort 7))))) (= r3 r4)))))

;; H
  (assert (=> (not (= sort 2)) (=> (not (= sort 4)) (= r2 r3))))

;; H
  (assert (=> (not (= sort 2)) (= r1 r2)))

;; H
  (assert (= real_world__example_a__result1 real_world__example_a__result2))

;; H
  (assert (= real_world__example_a__result3 real_world__example_a__result1))

;; H
  (assert (= result6 real_world__example_a__result))

;; H
  (assert (= real_world__example_a__result1 r1))

;; H
  (assert
  (= (mk_int__ref real_world__example_a__result4) (mk_int__ref
                                                  real_world__example_a__result2)))

;; H
  (assert (= r7 r1))

;; H
  (assert (= real_world__example_a__result5 real_world__example_a__result3))

;; H
  (assert (= r8 r1))

;; H
  (assert (= result7 real_world__example_a__result4))

;; H
  (assert (= sort 2))

(assert
;; WP_parameter_def
 ;; File "real_world.adb", line 6, characters 0-0
  (not (= real_world__example_a__result4 3)))
(check-sat)
(exit)
