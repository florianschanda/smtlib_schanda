(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type tcount_typeB

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq2 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref_4__projection(a: set__ref) : us_rep = (a).set__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : count_type, count_type -> bool

logic dummy2 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)]. in_range1(length(container)))

logic num_overlaps : us_rep, us_rep -> int

logic num_overlaps__function_guard : int, us_rep, us_rep -> prop

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic no_overlap : us_rep, us_rep -> bool

logic no_overlap__function_guard : bool, us_rep, us_rep -> prop

logic intersection : us_rep, us_rep -> us_rep

logic intersection__function_guard : us_rep, us_rep, us_rep -> prop

axiom num_overlaps__post_axiom :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  (((((num_overlaps(left, right) = length(intersection(left, right))) and
  (((ole(left, right) = true) -> (num_overlaps(left,
  right) = length(left))) and ((not (ole(left, right) = true)) ->
  (num_overlaps(left, right) <  length(left))))) and (((ole(right,
  left) = true) -> (num_overlaps(left, right) = length(right))) and
  ((not (ole(right, left) = true)) -> (num_overlaps(left,
  right) <  length(right))))) and ((num_overlaps(left, right) = 0) <->
  (no_overlap(left, right) = true))) and in_range1(num_overlaps(left,
  right))))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type integer

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy4 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__my_ordered_sets__my_rec__f : natural;
rec__my_ordered_sets__my_rec__g : integer
}

function us_split_fields_F__projection(a: us_split_fields) : natural =
  (a).rec__my_ordered_sets__my_rec__f

function us_split_fields_G__projection(a: us_split_fields) : integer =
  (a).rec__my_ordered_sets__my_rec__g

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep_10__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__my_ordered_sets__my_rec__f) = to_rep1(((b).us_split_fields1).rec__my_ordered_sets__my_rec__f)) and
  (to_rep(((a).us_split_fields1).rec__my_ordered_sets__my_rec__g) = to_rep(((b).us_split_fields1).rec__my_ordered_sets__my_rec__g))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__my_ordered_sets__my_rec__f) = to_rep1(((b).us_split_fields1).rec__my_ordered_sets__my_rec__f)) and
  (to_rep(((a).us_split_fields1).rec__my_ordered_sets__my_rec__g) = to_rep(((b).us_split_fields1).rec__my_ordered_sets__my_rec__g)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:integer. (0 <= object__size1({
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = a;
  rec__my_ordered_sets__my_rec__g = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:integer. (0 <= object__alignment1({
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = a;
  rec__my_ordered_sets__my_rec__g = a1 } })))

logic my_ordered_sets__my_rec__f__first__bit : int

logic my_ordered_sets__my_rec__f__last__bit : int

logic my_ordered_sets__my_rec__f__position : int

axiom my_ordered_sets__my_rec__f__first__bit_axiom :
  (0 <= my_ordered_sets__my_rec__f__first__bit)

axiom my_ordered_sets__my_rec__f__last__bit_axiom :
  (my_ordered_sets__my_rec__f__first__bit <  my_ordered_sets__my_rec__f__last__bit)

axiom my_ordered_sets__my_rec__f__position_axiom :
  (0 <= my_ordered_sets__my_rec__f__position)

logic my_ordered_sets__my_rec__g__first__bit : int

logic my_ordered_sets__my_rec__g__last__bit : int

logic my_ordered_sets__my_rec__g__position : int

axiom my_ordered_sets__my_rec__g__first__bit_axiom :
  (0 <= my_ordered_sets__my_rec__g__first__bit)

axiom my_ordered_sets__my_rec__g__last__bit_axiom :
  (my_ordered_sets__my_rec__g__first__bit <  my_ordered_sets__my_rec__g__last__bit)

axiom my_ordered_sets__my_rec__g__position_axiom :
  (0 <= my_ordered_sets__my_rec__g__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : natural

logic dummy6 : integer

type my_rec__ref = { my_rec__content : us_rep1
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep1 =
  (a).my_rec__content

logic my_lt__function_guard : bool, us_rep1, us_rep1 -> prop

type element_type__ref = { element_type__content : us_rep1
}

function element_type__ref_5__projection(a: element_type__ref) : us_rep1 =
  (a).element_type__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq7 : bool, bool -> bool

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range4(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE4 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> bool

logic equivalent_elements__function_guard : bool, us_rep1, us_rep1 -> prop

type element_type__ref1 = { element_type__content1 : us_rep1
}

function element_type__ref_6__projection(a: element_type__ref1) : us_rep1 =
  (a).element_type__content1

logic contains : us_rep, us_rep1 -> bool

logic contains__function_guard : bool, us_rep, us_rep1 -> prop

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall item:natural. forall item1:integer [contains(container, {
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } })]. ((of_int(1) = true) ->
  ((exists e:natural. exists e1:integer. ((contains(container, {
   us_split_fields1 = { rec__my_ordered_sets__my_rec__f = e;
   rec__my_ordered_sets__my_rec__g = e1 } }) = true) and
   ((bool_lt(to_rep1(e), to_rep1(item)) = false) and (bool_lt(to_rep1(item),
   to_rep1(e)) = false)))) ->
  (contains(container, { us_split_fields1 = {
  rec__my_ordered_sets__my_rec__f = item; rec__my_ordered_sets__my_rec__g =
  item1 } }) = true)))))

axiom ole__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [ole(left1, right1)].
  ((ole(left1, right1) = true) <->
  (forall item:natural. forall item1:integer. ((contains(left1, {
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true) -> (contains(right1, {
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:natural. forall item1:integer. (not (contains(container, {
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true)))) and
  ((is_empty(container) = true) <-> (length(container) = 0))))

logic includes_intersection : us_rep, us_rep, us_rep -> bool

logic includes_intersection__function_guard : bool, us_rep, us_rep,
  us_rep -> prop

axiom includes_intersection__post_axiom :
  (forall container:us_rep. forall left1:us_rep. forall right1:us_rep
  [includes_intersection(container, left1, right1)].
  ((includes_intersection(container, left1, right1) = true) <->
  (forall item:natural. forall item1:integer. ((contains(left1, {
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true) -> ((contains(right1,
  { us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true) ->
  (contains(container, { us_split_fields1 = {
  rec__my_ordered_sets__my_rec__f = item; rec__my_ordered_sets__my_rec__g =
  item1 } }) = true))))))

axiom no_overlap__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [no_overlap(left1, right1)].
  ((no_overlap(left1, right1) = true) <->
  (forall item:natural. forall item1:integer. ((contains(left1, {
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true) ->
  (not (contains(right1, { us_split_fields1 = {
  rec__my_ordered_sets__my_rec__f = item; rec__my_ordered_sets__my_rec__g =
  item1 } }) = true))))))

axiom intersection__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [intersection(left1, right1)].
  (((ole(intersection(left1, right1), left1) = true) and
  (ole(intersection(left1, right1), right1) = true)) and
  (includes_intersection(intersection(left1, right1), left1,
  right1) = true)))

 (* File "a-cofuse.ads", line 218, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall o1:int. forall o2:int. forall o3:int. forall o4:int.
  forall o5:int. (((((o3 = length(right)) and in_range1(o3)) and
  (o4 = (2147483647 - o3))) and ((o5 = o4) and in_range(o4))) ->
  ((((o = num_overlaps(left, right)) and (in_range1(o) and
  ((((o = length(intersection(left, right))) and (((ole(left,
  right) = true) and (o = length(left))) or ((not (ole(left,
  right) = true)) and (o <  length(left))))) and (((ole(right,
  left) = true) and (o = length(right))) or ((not (ole(right,
  left) = true)) and (o <  length(right))))) and ((o = 0) <->
  (no_overlap(left, right) = true))))) and (((o1 = length(left)) and
  in_range1(o1)) and (o2 = (o1 - o)))) -> in_range(o2))))
