(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic dummy5 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__instr__instrument__name :
(int,character) farray; rec__ext__ : us_private
}

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__instr__instrument__name

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((bool_eq4(((a).us_split_fields1).rec__instr__instrument__name, 1, 14,
  ((b).us_split_fields1).rec__instr__instrument__name, 1, 14) = true) ->
  (bool_eq6(a, b) = true)) and
  ((not (bool_eq4(((a).us_split_fields1).rec__instr__instrument__name, 1, 14,
  ((b).us_split_fields1).rec__instr__instrument__name, 1, 14) = true)) ->
  (bool_eq6(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. forall a1:us_private. forall a2:int.
  (0 <= object__size2({ us_split_fields1 = { rec__instr__instrument__name =
  a; rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. forall a1:us_private. forall a2:int.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__instr__instrument__name = a; rec__ext__ = a1 }; attr__tag = a2 })))

logic instr__instrument__name__first__bit : int

logic instr__instrument__name__last__bit : int

logic instr__instrument__name__position : int

axiom instr__instrument__name__first__bit_axiom :
  (0 <= instr__instrument__name__first__bit)

axiom instr__instrument__name__last__bit_axiom :
  (instr__instrument__name__first__bit <  instr__instrument__name__last__bit)

axiom instr__instrument__name__position_axiom :
  (0 <= instr__instrument__name__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : (int,character) farray

logic dummy7 : us_private

logic dummy8 : int

type instrument__ref = { instrument__content : us_rep
}

function instrument__ref___projection(a: instrument__ref) : us_rep =
  (a).instrument__content

type speed

predicate in_range3(x: int) = ((0 <= x) and (x <= 85))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : speed, speed -> bool

logic dummy9 : speed

type speed__ref = { speed__content : speed
}

function speed__ref___projection(a: speed__ref) : speed = (a).speed__content

logic to_rep2 : speed -> int

logic of_rep2 : int -> speed

axiom inversion_axiom2 :
  (forall x:speed [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:speed [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__instr__speedometer__value : speed;
rec__instr__instrument__name1 : (int,character) farray; rec__ext__1 :
us_private
}

function us_split_fields_Value__projection(a: us_split_fields2) : speed =
  (a).rec__instr__speedometer__value

function us_split_fields_Name2__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__instr__instrument__name1

function us_split_fields_2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep_3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : speed, us_private -> us_private

logic extract__value : us_private -> speed

axiom extract__value__conv :
  (forall value:speed.
  (forall rec__ext__2:us_private. (extract__value(hide_ext__(value,
  rec__ext__2)) = value)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields3).rec__instr__instrument__name1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__instr__speedometer__value,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__instr__speedometer__value =
  extract__value(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name1 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((to_rep2(((a).us_split_fields3).rec__instr__speedometer__value) = to_rep2(((b).us_split_fields3).rec__instr__speedometer__value)) and
  (bool_eq4(((a).us_split_fields3).rec__instr__instrument__name1, 1, 14,
  ((b).us_split_fields3).rec__instr__instrument__name1, 1, 14) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields3).rec__instr__speedometer__value) = to_rep2(((b).us_split_fields3).rec__instr__speedometer__value)) and
  (bool_eq4(((a).us_split_fields3).rec__instr__instrument__name1, 1, 14,
  ((b).us_split_fields3).rec__instr__instrument__name1, 1, 14) = true))) ->
  (bool_eq8(a, b) = false))))

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:speed. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__size3({ us_split_fields3 = {
  rec__instr__speedometer__value = a; rec__instr__instrument__name1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:speed. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__alignment3({ us_split_fields3 = {
  rec__instr__speedometer__value = a; rec__instr__instrument__name1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic instr__speedometer__value__first__bit : int

logic instr__speedometer__value__last__bit : int

logic instr__speedometer__value__position : int

axiom instr__speedometer__value__first__bit_axiom :
  (0 <= instr__speedometer__value__first__bit)

axiom instr__speedometer__value__last__bit_axiom :
  (instr__speedometer__value__first__bit <  instr__speedometer__value__last__bit)

axiom instr__speedometer__value__position_axiom :
  (0 <= instr__speedometer__value__position)

logic instr__instrument__name__first__bit1 : int

logic instr__instrument__name__last__bit1 : int

logic instr__instrument__name__position1 : int

axiom instr__instrument__name__first__bit_axiom1 :
  (0 <= instr__instrument__name__first__bit1)

axiom instr__instrument__name__last__bit_axiom1 :
  (instr__instrument__name__first__bit1 <  instr__instrument__name__last__bit1)

axiom instr__instrument__name__position_axiom1 :
  (0 <= instr__instrument__name__position1)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy10 : speed

logic dummy11 : (int,character) farray

logic dummy12 : us_private

logic dummy13 : int

type speedometer__ref = { speedometer__content : us_rep1
}

function speedometer__ref___projection(a: speedometer__ref) : us_rep1 =
  (a).speedometer__content

type percent

predicate in_range4(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : percent, percent -> bool

logic dummy14 : percent

type percent__ref = { percent__content : percent
}

function percent__ref___projection(a: percent__ref) : percent =
  (a).percent__content

logic to_rep3 : percent -> int

logic of_rep3 : int -> percent

axiom inversion_axiom3 :
  (forall x:percent [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:percent [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields4 = { rec__instr__gauge__value : percent;
rec__instr__instrument__name2 : (int,character) farray; rec__ext__2 :
us_private
}

function us_split_fields_Value2__projection(a: us_split_fields4) : percent =
  (a).rec__instr__gauge__value

function us_split_fields_Name3__projection(a: us_split_fields4) : (int,character) farray =
  (a).rec__instr__instrument__name2

function us_split_fields_3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep_5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_6__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : percent, us_private -> us_private

logic extract__value1 : us_private -> percent

axiom extract__value__conv1 :
  (forall value:percent.
  (forall rec__ext__3:us_private. (extract__value1(hide_ext__1(value,
  rec__ext__3)) = value)))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields5).rec__instr__instrument__name2; rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__instr__gauge__value,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_fields5 = {
  rec__instr__gauge__value =
  extract__value1(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name2 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((to_rep3(((a).us_split_fields5).rec__instr__gauge__value) = to_rep3(((b).us_split_fields5).rec__instr__gauge__value)) and
  (bool_eq4(((a).us_split_fields5).rec__instr__instrument__name2, 1, 14,
  ((b).us_split_fields5).rec__instr__instrument__name2, 1, 14) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_fields5).rec__instr__gauge__value) = to_rep3(((b).us_split_fields5).rec__instr__gauge__value)) and
  (bool_eq4(((a).us_split_fields5).rec__instr__instrument__name2, 1, 14,
  ((b).us_split_fields5).rec__instr__instrument__name2, 1, 14) = true))) ->
  (bool_eq10(a, b) = false))))

logic us_tag2 : int

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:percent. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__size4({ us_split_fields5 = {
  rec__instr__gauge__value = a; rec__instr__instrument__name2 = a1;
  rec__ext__2 = a2 }; attr__tag2 = a3 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:percent. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__alignment4({ us_split_fields5 = {
  rec__instr__gauge__value = a; rec__instr__instrument__name2 = a1;
  rec__ext__2 = a2 }; attr__tag2 = a3 })))

logic instr__gauge__value__first__bit : int

logic instr__gauge__value__last__bit : int

logic instr__gauge__value__position : int

axiom instr__gauge__value__first__bit_axiom :
  (0 <= instr__gauge__value__first__bit)

axiom instr__gauge__value__last__bit_axiom :
  (instr__gauge__value__first__bit <  instr__gauge__value__last__bit)

axiom instr__gauge__value__position_axiom :
  (0 <= instr__gauge__value__position)

logic instr__instrument__name__first__bit2 : int

logic instr__instrument__name__last__bit2 : int

logic instr__instrument__name__position2 : int

axiom instr__instrument__name__first__bit_axiom2 :
  (0 <= instr__instrument__name__first__bit2)

axiom instr__instrument__name__last__bit_axiom2 :
  (instr__instrument__name__first__bit2 <  instr__instrument__name__last__bit2)

axiom instr__instrument__name__position_axiom2 :
  (0 <= instr__instrument__name__position2)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy15 : percent

logic dummy16 : (int,character) farray

logic dummy17 : us_private

logic dummy18 : int

type gauge__ref = { gauge__content : us_rep2
}

function gauge__ref___projection(a: gauge__ref) : us_rep2 =
  (a).gauge__content

type us_split_fields6 = { rec__instr__graphic_gauge__size : integer;
rec__instr__graphic_gauge__fill : character; rec__instr__graphic_gauge__empty
: character; rec__instr__instrument__name3 : (int,character) farray;
rec__instr__gauge__value1 : percent; rec__ext__3 : us_private
}

function us_split_fields_Size__projection(a: us_split_fields6) : integer =
  (a).rec__instr__graphic_gauge__size

function us_split_fields_Fill__projection(a: us_split_fields6) : character =
  (a).rec__instr__graphic_gauge__fill

function us_split_fields_Empty__projection(a: us_split_fields6) : character =
  (a).rec__instr__graphic_gauge__empty

function us_split_fields_Name4__projection(a: us_split_fields6) : (int,character) farray =
  (a).rec__instr__instrument__name3

function us_split_fields_Value3__projection(a: us_split_fields6) : percent =
  (a).rec__instr__gauge__value1

function us_split_fields_4__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6; attr__tag3 : int
}

function us_rep_7__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep_8__projection(a: us_rep3) : int = (a).attr__tag3

logic hide_ext__2 : integer, character, character, percent,
  us_private -> us_private

logic extract__size : us_private -> integer

axiom extract__size__conv :
  (forall size:integer.
  (forall fill:character. forall empty:character.
  (forall value:percent.
  (forall rec__ext__4:us_private. (extract__size(hide_ext__2(size, fill,
  empty, value, rec__ext__4)) = size)))))

logic extract__fill : us_private -> character

axiom extract__fill__conv :
  (forall size:integer.
  (forall fill:character. forall empty:character.
  (forall value:percent.
  (forall rec__ext__4:us_private. (extract__fill(hide_ext__2(size, fill,
  empty, value, rec__ext__4)) = fill)))))

logic extract__empty : us_private -> character

axiom extract__empty__conv :
  (forall size:integer.
  (forall fill:character. forall empty:character.
  (forall value:percent.
  (forall rec__ext__4:us_private. (extract__empty(hide_ext__2(size, fill,
  empty, value, rec__ext__4)) = empty)))))

axiom extract__value__conv2 :
  (forall size:integer.
  (forall fill:character. forall empty:character.
  (forall value:percent.
  (forall rec__ext__4:us_private. (extract__value1(hide_ext__2(size, fill,
  empty, value, rec__ext__4)) = value)))))

logic extract__ext__2 : us_private -> us_private

function to_base2(a: us_rep3) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields7).rec__instr__instrument__name3; rec__ext__ =
  hide_ext__2(((a).us_split_fields7).rec__instr__graphic_gauge__size,
  ((a).us_split_fields7).rec__instr__graphic_gauge__fill,
  ((a).us_split_fields7).rec__instr__graphic_gauge__empty,
  ((a).us_split_fields7).rec__instr__gauge__value1,
  ((a).us_split_fields7).rec__ext__3) }; attr__tag = (a).attr__tag3 }

function of_base2(r: us_rep) : us_rep3 = { us_split_fields7 = {
  rec__instr__graphic_gauge__size =
  extract__size(((r).us_split_fields1).rec__ext__);
  rec__instr__graphic_gauge__fill =
  extract__fill(((r).us_split_fields1).rec__ext__);
  rec__instr__graphic_gauge__empty =
  extract__empty(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name3 =
  ((r).us_split_fields1).rec__instr__instrument__name;
  rec__instr__gauge__value1 =
  extract__value1(((r).us_split_fields1).rec__ext__); rec__ext__3 =
  extract__ext__2(((r).us_split_fields1).rec__ext__) }; attr__tag3 =
  (r).attr__tag }

logic bool_eq11 : us_rep3, us_rep3 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq11(a, b)].
  (((((((to_rep1(((a).us_split_fields7).rec__instr__graphic_gauge__size) = to_rep1(((b).us_split_fields7).rec__instr__graphic_gauge__size)) and
  (to_rep(((a).us_split_fields7).rec__instr__graphic_gauge__fill) = to_rep(((b).us_split_fields7).rec__instr__graphic_gauge__fill))) and
  (to_rep(((a).us_split_fields7).rec__instr__graphic_gauge__empty) = to_rep(((b).us_split_fields7).rec__instr__graphic_gauge__empty))) and
  (bool_eq4(((a).us_split_fields7).rec__instr__instrument__name3, 1, 14,
  ((b).us_split_fields7).rec__instr__instrument__name3, 1, 14) = true)) and
  (to_rep3(((a).us_split_fields7).rec__instr__gauge__value1) = to_rep3(((b).us_split_fields7).rec__instr__gauge__value1))) ->
  (bool_eq11(a, b) = true)) and
  ((not (((((to_rep1(((a).us_split_fields7).rec__instr__graphic_gauge__size) = to_rep1(((b).us_split_fields7).rec__instr__graphic_gauge__size)) and
  (to_rep(((a).us_split_fields7).rec__instr__graphic_gauge__fill) = to_rep(((b).us_split_fields7).rec__instr__graphic_gauge__fill))) and
  (to_rep(((a).us_split_fields7).rec__instr__graphic_gauge__empty) = to_rep(((b).us_split_fields7).rec__instr__graphic_gauge__empty))) and
  (bool_eq4(((a).us_split_fields7).rec__instr__instrument__name3, 1, 14,
  ((b).us_split_fields7).rec__instr__instrument__name3, 1, 14) = true)) and
  (to_rep3(((a).us_split_fields7).rec__instr__gauge__value1) = to_rep3(((b).us_split_fields7).rec__instr__gauge__value1)))) ->
  (bool_eq11(a, b) = false))))

logic us_tag3 : int

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:integer. forall a1:character. forall a2:character.
  forall a3:(int,character) farray. forall a4:percent. forall a5:us_private.
  forall a6:int. (0 <= object__size5({ us_split_fields7 = {
  rec__instr__graphic_gauge__size = a; rec__instr__graphic_gauge__fill = a1;
  rec__instr__graphic_gauge__empty = a2; rec__instr__instrument__name3 = a3;
  rec__instr__gauge__value1 = a4; rec__ext__3 = a5 }; attr__tag3 = a6 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:integer. forall a1:character. forall a2:character.
  forall a3:(int,character) farray. forall a4:percent. forall a5:us_private.
  forall a6:int. (0 <= object__alignment5({ us_split_fields7 = {
  rec__instr__graphic_gauge__size = a; rec__instr__graphic_gauge__fill = a1;
  rec__instr__graphic_gauge__empty = a2; rec__instr__instrument__name3 = a3;
  rec__instr__gauge__value1 = a4; rec__ext__3 = a5 }; attr__tag3 = a6 })))

logic instr__graphic_gauge__size__first__bit : int

logic instr__graphic_gauge__size__last__bit : int

logic instr__graphic_gauge__size__position : int

axiom instr__graphic_gauge__size__first__bit_axiom :
  (0 <= instr__graphic_gauge__size__first__bit)

axiom instr__graphic_gauge__size__last__bit_axiom :
  (instr__graphic_gauge__size__first__bit <  instr__graphic_gauge__size__last__bit)

axiom instr__graphic_gauge__size__position_axiom :
  (0 <= instr__graphic_gauge__size__position)

logic instr__graphic_gauge__fill__first__bit : int

logic instr__graphic_gauge__fill__last__bit : int

logic instr__graphic_gauge__fill__position : int

axiom instr__graphic_gauge__fill__first__bit_axiom :
  (0 <= instr__graphic_gauge__fill__first__bit)

axiom instr__graphic_gauge__fill__last__bit_axiom :
  (instr__graphic_gauge__fill__first__bit <  instr__graphic_gauge__fill__last__bit)

axiom instr__graphic_gauge__fill__position_axiom :
  (0 <= instr__graphic_gauge__fill__position)

logic instr__graphic_gauge__empty__first__bit : int

logic instr__graphic_gauge__empty__last__bit : int

logic instr__graphic_gauge__empty__position : int

axiom instr__graphic_gauge__empty__first__bit_axiom :
  (0 <= instr__graphic_gauge__empty__first__bit)

axiom instr__graphic_gauge__empty__last__bit_axiom :
  (instr__graphic_gauge__empty__first__bit <  instr__graphic_gauge__empty__last__bit)

axiom instr__graphic_gauge__empty__position_axiom :
  (0 <= instr__graphic_gauge__empty__position)

logic instr__instrument__name__first__bit3 : int

logic instr__instrument__name__last__bit3 : int

logic instr__instrument__name__position3 : int

axiom instr__instrument__name__first__bit_axiom3 :
  (0 <= instr__instrument__name__first__bit3)

axiom instr__instrument__name__last__bit_axiom3 :
  (instr__instrument__name__first__bit3 <  instr__instrument__name__last__bit3)

axiom instr__instrument__name__position_axiom3 :
  (0 <= instr__instrument__name__position3)

logic instr__gauge__value__first__bit1 : int

logic instr__gauge__value__last__bit1 : int

logic instr__gauge__value__position1 : int

axiom instr__gauge__value__first__bit_axiom1 :
  (0 <= instr__gauge__value__first__bit1)

axiom instr__gauge__value__last__bit_axiom1 :
  (instr__gauge__value__first__bit1 <  instr__gauge__value__last__bit1)

axiom instr__gauge__value__position_axiom1 :
  (0 <= instr__gauge__value__position1)

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy19 : integer

logic dummy20 : character

logic dummy21 : character

logic dummy22 : (int,character) farray

logic dummy23 : percent

logic dummy24 : us_private

logic dummy25 : int

type graphic_gauge__ref = { graphic_gauge__content : us_rep3
}

function graphic_gauge__ref___projection(a: graphic_gauge__ref) : us_rep3 =
  (a).graphic_gauge__content

type sixty

predicate in_range5(x: int) = ((0 <= x) and (x <= 60))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : sixty, sixty -> bool

logic dummy26 : sixty

type sixty__ref = { sixty__content : sixty
}

function sixty__ref___projection(a: sixty__ref) : sixty = (a).sixty__content

logic to_rep4 : sixty -> int

logic of_rep4 : int -> sixty

axiom inversion_axiom4 :
  (forall x:sixty [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:sixty [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type twenty_four

predicate in_range6(x: int) = ((0 <= x) and (x <= 24))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : twenty_four, twenty_four -> bool

logic dummy27 : twenty_four

type twenty_four__ref = { twenty_four__content : twenty_four
}

function twenty_four__ref___projection(a: twenty_four__ref) : twenty_four =
  (a).twenty_four__content

logic to_rep5 : twenty_four -> int

logic of_rep5 : int -> twenty_four

axiom inversion_axiom5 :
  (forall x:twenty_four [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:twenty_four [to_rep5(x)]. in_range6(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range6(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields8 = { rec__instr__clock__seconds : sixty;
rec__instr__clock__minutes : sixty; rec__instr__clock__hours : twenty_four;
rec__instr__instrument__name4 : (int,character) farray; rec__ext__4 :
us_private
}

function us_split_fields_Seconds__projection(a: us_split_fields8) : sixty =
  (a).rec__instr__clock__seconds

function us_split_fields_Minutes__projection(a: us_split_fields8) : sixty =
  (a).rec__instr__clock__minutes

function us_split_fields_Hours__projection(a: us_split_fields8) : twenty_four =
  (a).rec__instr__clock__hours

function us_split_fields_Name5__projection(a: us_split_fields8) : (int,character) farray =
  (a).rec__instr__instrument__name4

function us_split_fields_5__projection(a: us_split_fields8) : us_private =
  (a).rec__ext__4

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8; attr__tag4 : int
}

function us_rep_9__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function us_rep_10__projection(a: us_rep4) : int = (a).attr__tag4

logic hide_ext__3 : sixty, sixty, twenty_four, us_private -> us_private

logic extract__seconds : us_private -> sixty

axiom extract__seconds__conv :
  (forall seconds:sixty. forall minutes:sixty.
  (forall hours:twenty_four.
  (forall rec__ext__5:us_private. (extract__seconds(hide_ext__3(seconds,
  minutes, hours, rec__ext__5)) = seconds))))

logic extract__minutes : us_private -> sixty

axiom extract__minutes__conv :
  (forall seconds:sixty. forall minutes:sixty.
  (forall hours:twenty_four.
  (forall rec__ext__5:us_private. (extract__minutes(hide_ext__3(seconds,
  minutes, hours, rec__ext__5)) = minutes))))

logic extract__hours : us_private -> twenty_four

axiom extract__hours__conv :
  (forall seconds:sixty. forall minutes:sixty.
  (forall hours:twenty_four.
  (forall rec__ext__5:us_private. (extract__hours(hide_ext__3(seconds,
  minutes, hours, rec__ext__5)) = hours))))

logic extract__ext__3 : us_private -> us_private

function to_base3(a: us_rep4) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields9).rec__instr__instrument__name4; rec__ext__ =
  hide_ext__3(((a).us_split_fields9).rec__instr__clock__seconds,
  ((a).us_split_fields9).rec__instr__clock__minutes,
  ((a).us_split_fields9).rec__instr__clock__hours,
  ((a).us_split_fields9).rec__ext__4) }; attr__tag = (a).attr__tag4 }

function of_base3(r: us_rep) : us_rep4 = { us_split_fields9 = {
  rec__instr__clock__seconds =
  extract__seconds(((r).us_split_fields1).rec__ext__);
  rec__instr__clock__minutes =
  extract__minutes(((r).us_split_fields1).rec__ext__);
  rec__instr__clock__hours =
  extract__hours(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name4 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__4 =
  extract__ext__3(((r).us_split_fields1).rec__ext__) }; attr__tag4 =
  (r).attr__tag }

logic bool_eq14 : us_rep4, us_rep4 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq14(a, b)].
  ((((((to_rep4(((a).us_split_fields9).rec__instr__clock__seconds) = to_rep4(((b).us_split_fields9).rec__instr__clock__seconds)) and
  (to_rep4(((a).us_split_fields9).rec__instr__clock__minutes) = to_rep4(((b).us_split_fields9).rec__instr__clock__minutes))) and
  (to_rep5(((a).us_split_fields9).rec__instr__clock__hours) = to_rep5(((b).us_split_fields9).rec__instr__clock__hours))) and
  (bool_eq4(((a).us_split_fields9).rec__instr__instrument__name4, 1, 14,
  ((b).us_split_fields9).rec__instr__instrument__name4, 1, 14) = true)) ->
  (bool_eq14(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_fields9).rec__instr__clock__seconds) = to_rep4(((b).us_split_fields9).rec__instr__clock__seconds)) and
  (to_rep4(((a).us_split_fields9).rec__instr__clock__minutes) = to_rep4(((b).us_split_fields9).rec__instr__clock__minutes))) and
  (to_rep5(((a).us_split_fields9).rec__instr__clock__hours) = to_rep5(((b).us_split_fields9).rec__instr__clock__hours))) and
  (bool_eq4(((a).us_split_fields9).rec__instr__instrument__name4, 1, 14,
  ((b).us_split_fields9).rec__instr__instrument__name4, 1, 14) = true))) ->
  (bool_eq14(a, b) = false))))

logic us_tag4 : int

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:sixty. forall a1:sixty. forall a2:twenty_four.
  forall a3:(int,character) farray. forall a4:us_private. forall a5:int.
  (0 <= object__size6({ us_split_fields9 = { rec__instr__clock__seconds = a;
  rec__instr__clock__minutes = a1; rec__instr__clock__hours = a2;
  rec__instr__instrument__name4 = a3; rec__ext__4 = a4 }; attr__tag4 = a5
  })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:sixty. forall a1:sixty. forall a2:twenty_four.
  forall a3:(int,character) farray. forall a4:us_private. forall a5:int.
  (0 <= object__alignment6({ us_split_fields9 = {
  rec__instr__clock__seconds = a; rec__instr__clock__minutes = a1;
  rec__instr__clock__hours = a2; rec__instr__instrument__name4 = a3;
  rec__ext__4 = a4 }; attr__tag4 = a5 })))

logic instr__clock__seconds__first__bit : int

logic instr__clock__seconds__last__bit : int

logic instr__clock__seconds__position : int

axiom instr__clock__seconds__first__bit_axiom :
  (0 <= instr__clock__seconds__first__bit)

axiom instr__clock__seconds__last__bit_axiom :
  (instr__clock__seconds__first__bit <  instr__clock__seconds__last__bit)

axiom instr__clock__seconds__position_axiom :
  (0 <= instr__clock__seconds__position)

logic instr__clock__minutes__first__bit : int

logic instr__clock__minutes__last__bit : int

logic instr__clock__minutes__position : int

axiom instr__clock__minutes__first__bit_axiom :
  (0 <= instr__clock__minutes__first__bit)

axiom instr__clock__minutes__last__bit_axiom :
  (instr__clock__minutes__first__bit <  instr__clock__minutes__last__bit)

axiom instr__clock__minutes__position_axiom :
  (0 <= instr__clock__minutes__position)

logic instr__clock__hours__first__bit : int

logic instr__clock__hours__last__bit : int

logic instr__clock__hours__position : int

axiom instr__clock__hours__first__bit_axiom :
  (0 <= instr__clock__hours__first__bit)

axiom instr__clock__hours__last__bit_axiom :
  (instr__clock__hours__first__bit <  instr__clock__hours__last__bit)

axiom instr__clock__hours__position_axiom :
  (0 <= instr__clock__hours__position)

logic instr__instrument__name__first__bit4 : int

logic instr__instrument__name__last__bit4 : int

logic instr__instrument__name__position4 : int

axiom instr__instrument__name__first__bit_axiom4 :
  (0 <= instr__instrument__name__first__bit4)

axiom instr__instrument__name__last__bit_axiom4 :
  (instr__instrument__name__first__bit4 <  instr__instrument__name__last__bit4)

axiom instr__instrument__name__position_axiom4 :
  (0 <= instr__instrument__name__position4)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy28 : sixty

logic dummy29 : sixty

logic dummy30 : twenty_four

logic dummy31 : (int,character) farray

logic dummy32 : us_private

logic dummy33 : int

type clock__ref = { clock__content : us_rep4
}

function clock__ref___projection(a: clock__ref) : us_rep4 =
  (a).clock__content

logic us_tag5 : int

logic value__size7 : int

logic object__size7 : us_rep4 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep4 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:sixty. forall a1:sixty. forall a2:twenty_four.
  forall a3:(int,character) farray. forall a4:us_private. forall a5:int.
  (0 <= object__size7({ us_split_fields9 = { rec__instr__clock__seconds = a;
  rec__instr__clock__minutes = a1; rec__instr__clock__hours = a2;
  rec__instr__instrument__name4 = a3; rec__ext__4 = a4 }; attr__tag4 = a5
  })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:sixty. forall a1:sixty. forall a2:twenty_four.
  forall a3:(int,character) farray. forall a4:us_private. forall a5:int.
  (0 <= object__alignment7({ us_split_fields9 = {
  rec__instr__clock__seconds = a; rec__instr__clock__minutes = a1;
  rec__instr__clock__hours = a2; rec__instr__instrument__name4 = a3;
  rec__ext__4 = a4 }; attr__tag4 = a5 })))

logic instr__instrument__name__first__bit5 : int

logic instr__instrument__name__last__bit5 : int

logic instr__instrument__name__position5 : int

axiom instr__instrument__name__first__bit_axiom5 :
  (0 <= instr__instrument__name__first__bit5)

axiom instr__instrument__name__last__bit_axiom5 :
  (instr__instrument__name__first__bit5 <  instr__instrument__name__last__bit5)

axiom instr__instrument__name__position_axiom5 :
  (0 <= instr__instrument__name__position5)

logic instr__clock__seconds__first__bit1 : int

logic instr__clock__seconds__last__bit1 : int

logic instr__clock__seconds__position1 : int

axiom instr__clock__seconds__first__bit_axiom1 :
  (0 <= instr__clock__seconds__first__bit1)

axiom instr__clock__seconds__last__bit_axiom1 :
  (instr__clock__seconds__first__bit1 <  instr__clock__seconds__last__bit1)

axiom instr__clock__seconds__position_axiom1 :
  (0 <= instr__clock__seconds__position1)

logic instr__clock__minutes__first__bit1 : int

logic instr__clock__minutes__last__bit1 : int

logic instr__clock__minutes__position1 : int

axiom instr__clock__minutes__first__bit_axiom1 :
  (0 <= instr__clock__minutes__first__bit1)

axiom instr__clock__minutes__last__bit_axiom1 :
  (instr__clock__minutes__first__bit1 <  instr__clock__minutes__last__bit1)

axiom instr__clock__minutes__position_axiom1 :
  (0 <= instr__clock__minutes__position1)

logic instr__clock__hours__first__bit1 : int

logic instr__clock__hours__last__bit1 : int

logic instr__clock__hours__position1 : int

axiom instr__clock__hours__first__bit_axiom1 :
  (0 <= instr__clock__hours__first__bit1)

axiom instr__clock__hours__last__bit_axiom1 :
  (instr__clock__hours__first__bit1 <  instr__clock__hours__last__bit1)

axiom instr__clock__hours__position_axiom1 :
  (0 <= instr__clock__hours__position1)

logic user_eq14 : us_rep4, us_rep4 -> bool

logic dummy34 : sixty

logic dummy35 : sixty

logic dummy36 : twenty_four

logic dummy37 : (int,character) farray

logic dummy38 : us_private

logic dummy39 : int

type chronometer__ref = { chronometer__content : us_rep4
}

function chronometer__ref___projection(a: chronometer__ref) : us_rep4 =
  (a).chronometer__content

logic display_value__specific_post : int, us_rep -> prop

axiom instr__instrument__compat_axiom : true

axiom instr__speedometer__compat_axiom : true

axiom instr__gauge__compat_axiom : true

axiom instr__graphic_gauge__compat_axiom : true

axiom instr__clock__compat_axiom : true

axiom instr__chronometer__compat_axiom : true

logic temp___String_Literal_163 : unit -> (int,character) farray

axiom temp___String_Literal_163__def_axiom :
  ((((((((((((((to_rep((temp___String_Literal_163(void)[1])) = 32) and
  (to_rep((temp___String_Literal_163(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_163(void)[14])) = 32))

logic x : integer

logic x1 : character

logic x2 : character

logic x3 : (int,character) farray

logic x4 : percent

logic x5 : us_private

logic x6 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic lg : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x7: int) =
  ((first_int <= x7) and (x7 <= last_int))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x7:int. forall y:int [bool_eq15(x7, y)]. (((x7 = y) ->
  (bool_eq15(x7, y) = true)) and ((not (x7 = y)) -> (bool_eq15(x7,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq15 : integer, integer -> bool

logic dummy40 : integer

type tTs1SP1__ref = { tTs1SP1__content : integer
}

function tTs1SP1__ref___projection(a: tTs1SP1__ref) : integer =
  (a).tTs1SP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size8 : int

logic object__size8 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,character) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,character) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,character) farray. (0 <= object__alignment8(a)))

function bool_eq16(x7: us_t1, y: us_t1) : bool = bool_eq4((x7).elts1,
  to_rep1(first2((x7).rt1)), to_rep1(last2((x7).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq16 : us_t1, us_t1 -> bool

logic dummy41 : (int,character) farray

logic dummy42 : t1

type ts1S__ref = { ts1S__content : us_t1
}

function ts1S__ref___projection(a: ts1S__ref) : us_t1 = (a).ts1S__content

predicate dynamic_property3(first_int: int, last_int: int, x7: int) =
  ((first_int <= x7) and (x7 <= last_int))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def14 :
  (forall x7:int. forall y:int [bool_eq17(x7, y)]. (((x7 = y) ->
  (bool_eq17(x7, y) = true)) and ((not (x7 = y)) -> (bool_eq17(x7,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq17 : integer, integer -> bool

logic dummy43 : integer

type t8b__ref = { t8b__content : integer
}

function t8b__ref___projection(a: t8b__ref) : integer = (a).t8b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size9 : int

logic object__size9 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment9 : int

logic object__alignment9 : (int,character) farray -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,character) farray. (0 <= object__size9(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,character) farray. (0 <= object__alignment9(a)))

function bool_eq18(x7: us_t2, y: us_t2) : bool = bool_eq4((x7).elts2,
  to_rep1(first4((x7).rt2)), to_rep1(last4((x7).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq18 : us_t2, us_t2 -> bool

logic dummy44 : (int,character) farray

logic dummy45 : t2

type t9b__ref = { t9b__content : us_t2
}

function t9b__ref___projection(a: t9b__ref) : us_t2 = (a).t9b__content

logic s1 : (int,character) farray

logic s11 : t1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic instr__display_value__4__s1__aggregate_def : int, int, int -> us_t2

axiom def_axiom :
  (forall temp___133:int. forall temp___134:int. forall temp___135:int.
  ((dynamic_property(1, 2147483647, temp___134, temp___135) ->
  ((to_rep1(first4((instr__display_value__4__s1__aggregate_def(temp___133,
  temp___134, temp___135)).rt2)) = temp___134) and
  (to_rep1(last4((instr__display_value__4__s1__aggregate_def(temp___133,
  temp___134, temp___135)).rt2)) = temp___135))) and
  (forall temp___136:int.
  (((instr__display_value__4__s1__aggregate_def(temp___133, temp___134,
  temp___135)).elts2[temp___136]) = of_rep(temp___133)))))

predicate dynamic_property5(first_int: int, last_int: int, x7: int) =
  ((first_int <= x7) and (x7 <= last_int))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def15 :
  (forall x7:int. forall y:int [bool_eq19(x7, y)]. (((x7 = y) ->
  (bool_eq19(x7, y) = true)) and ((not (x7 = y)) -> (bool_eq19(x7,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq19 : integer, integer -> bool

logic dummy46 : integer

type tTs2SP1__ref = { tTs2SP1__content : integer
}

function tTs2SP1__ref___projection(a: tTs2SP1__ref) : integer =
  (a).tTs2SP1__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size10 : int

logic object__size10 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment10 : int

logic object__alignment10 : (int,character) farray -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:(int,character) farray. (0 <= object__size10(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:(int,character) farray. (0 <= object__alignment10(a)))

function bool_eq20(x7: us_t3, y: us_t3) : bool = bool_eq4((x7).elts3,
  to_rep1(first6((x7).rt3)), to_rep1(last6((x7).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq20 : us_t3, us_t3 -> bool

logic dummy47 : (int,character) farray

logic dummy48 : t3

type ts2S__ref = { ts2S__content : us_t3
}

function ts2S__ref___projection(a: ts2S__ref) : us_t3 = (a).ts2S__content

predicate dynamic_property7(first_int: int, last_int: int, x7: int) =
  ((first_int <= x7) and (x7 <= last_int))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def16 :
  (forall x7:int. forall y:int [bool_eq21(x7, y)]. (((x7 = y) ->
  (bool_eq21(x7, y) = true)) and ((not (x7 = y)) -> (bool_eq21(x7,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq21 : integer, integer -> bool

logic dummy49 : integer

type t10b__ref = { t10b__content : integer
}

function t10b__ref___projection(a: t10b__ref) : integer = (a).t10b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size11 : int

logic object__size11 : (int,character) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,character) farray -> int

logic value__alignment11 : int

logic object__alignment11 : (int,character) farray -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:(int,character) farray. (0 <= object__size11(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:(int,character) farray. (0 <= object__alignment11(a)))

function bool_eq22(x7: us_t4, y: us_t4) : bool = bool_eq4((x7).elts4,
  to_rep1(first8((x7).rt4)), to_rep1(last8((x7).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq22 : us_t4, us_t4 -> bool

logic dummy50 : (int,character) farray

logic dummy51 : t4

type t11b__ref = { t11b__content : us_t4
}

function t11b__ref___projection(a: t11b__ref) : us_t4 = (a).t11b__content

logic s2 : (int,character) farray

logic s21 : t3

logic attr__ATTRIBUTE_ADDRESS3 : int

logic instr__display_value__4__s2__aggregate_def : int, int, int -> us_t4

axiom def_axiom1 :
  (forall temp___139:int. forall temp___140:int. forall temp___141:int.
  ((dynamic_property(1, 2147483647, temp___140, temp___141) ->
  ((to_rep1(first8((instr__display_value__4__s2__aggregate_def(temp___139,
  temp___140, temp___141)).rt4)) = temp___140) and
  (to_rep1(last8((instr__display_value__4__s2__aggregate_def(temp___139,
  temp___140, temp___141)).rt4)) = temp___141))) and
  (forall temp___142:int.
  (((instr__display_value__4__s2__aggregate_def(temp___139, temp___140,
  temp___141)).elts4[temp___142]) = of_rep(temp___139)))))

axiom lg__def_axiom : (lg = comp_div((to_rep1(x) * to_rep3(x4)),100))

axiom s1__def_axiom :
  ((s1 = (instr__display_value__4__s1__aggregate_def(to_rep(x1), 1,
  lg)).elts2) and
  (s11 = mk1(to_rep1(first4((instr__display_value__4__s1__aggregate_def(to_rep(x1),
  1, lg)).rt2)),
  to_rep1(last4((instr__display_value__4__s1__aggregate_def(to_rep(x1), 1,
  lg)).rt2)))))

axiom s2__def_axiom :
  ((s2 = slide((instr__display_value__4__s2__aggregate_def(to_rep(x2),
  (lg + 1), to_rep1(x))).elts4,
  to_rep1(first8((instr__display_value__4__s2__aggregate_def(to_rep(x2),
  (lg + 1), to_rep1(x))).rt4)), (lg + 1))) and (s21 = mk3((lg + 1),
  to_rep1(x))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall instr__display_value__4__lg__assume:int.
  forall temp___349:(int,character) farray. forall temp___3491:t2.
  forall instr__display_value__4__s1__assume:(int,character) farray.
  forall instr__display_value__4__s1__assume1:t1.
  forall temp___351:(int,character) farray. forall temp___3511:t4.
  (((((o = (to_rep1(x) * to_rep3(x4))) and
  in_range((to_rep1(x) * to_rep3(x4)))) and
  (instr__display_value__4__lg__assume = comp_div(o,100))) and
  (instr__display_value__4__lg__assume = lg)) -> (in_range(lg) ->
  (((((to_rep1(first4((instr__display_value__4__s1__aggregate_def(to_rep(x1),
  1, lg)).rt2)) = 1) and
  ((to_rep1(last4((instr__display_value__4__s1__aggregate_def(to_rep(x1), 1,
  lg)).rt2)) = lg) and ({ elts2 = temp___349; rt2 = temp___3491
  } = instr__display_value__4__s1__aggregate_def(to_rep(x1), 1, lg)))) and
  ((((to_rep1(first4(temp___3491)) <= to_rep1(last4(temp___3491))) and
  (((1 <= lg) and
  (((to_rep1(last4(temp___3491)) - to_rep1(first4(temp___3491))) + 1) = ((lg - 1) + 1))) or
  ((not (1 <= lg)) and
  (((to_rep1(last4(temp___3491)) - to_rep1(first4(temp___3491))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___3491)) <= to_rep1(last4(temp___3491)))) and
  (((1 <= lg) and (0 = ((lg - 1) + 1))) or (not (1 <= lg))))) and
  ((temp___349 = instr__display_value__4__s1__assume) and
  (mk1(to_rep1(first4(temp___3491)),
  to_rep1(last4(temp___3491))) = instr__display_value__4__s1__assume1)))) and
  ((instr__display_value__4__s1__assume = s1) and
  (instr__display_value__4__s1__assume1 = s11))) -> ((dynamic_property2(1,
  lg, to_rep1(first2(s11)), to_rep1(last2(s11))) and
  ((to_rep1(first2(s11)) = 1) and (to_rep1(last2(s11)) = lg))) ->
  (((to_rep1(first8((instr__display_value__4__s2__aggregate_def(to_rep(x2),
  (lg + 1), to_rep1(x))).rt4)) = (lg + 1)) and
  ((to_rep1(last8((instr__display_value__4__s2__aggregate_def(to_rep(x2),
  (lg + 1), to_rep1(x))).rt4)) = to_rep1(x)) and ({ elts4 = temp___351; rt4 =
  temp___3511 } = instr__display_value__4__s2__aggregate_def(to_rep(x2),
  (lg + 1), to_rep1(x))))) ->
  (((to_rep1(first8(temp___3511)) <= to_rep1(last8(temp___3511))) ->
  ((((lg + 1) <= to_rep1(x)) ->
  (((to_rep1(last8(temp___3511)) - to_rep1(first8(temp___3511))) + 1) = ((to_rep1(x) - (lg + 1)) + 1))) and
  ((not ((lg + 1) <= to_rep1(x))) ->
  (((to_rep1(last8(temp___3511)) - to_rep1(first8(temp___3511))) + 1) = 0)))) and
  ((not (to_rep1(first8(temp___3511)) <= to_rep1(last8(temp___3511)))) ->
  (((lg + 1) <= to_rep1(x)) -> (0 = ((to_rep1(x) - (lg + 1)) + 1)))))))))))
