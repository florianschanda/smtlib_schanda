;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-fun dummy1 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-fun dummy2 () us_t)

(declare-datatypes () ((arr__ref (mk_arr__ref (arr__content us_t)))))
(define-fun arr__ref___projection ((a arr__ref)) us_t (arr__content a))

(declare-fun is_perm (us_t us_t) Bool)

(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)

(define-fun dynamic_invariant1 ((temp___expr_142 us_t)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_140 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_142)
                                      (last1 temp___expr_142)))
                                      (=> (= temp___do_toplevel_141 true)
                                      (=> (= temp___is_init_139 true)
                                      (= (first1 temp___expr_142) 0)))))

(define-fun dynamic_predicate ((temp___145 us_t)) Bool (= (first1 temp___145) 0))

(declare-fun occ (us_t Int) Int)

(declare-fun occ__function_guard (Int us_t Int) Bool)

;; is_perm__post_axiom
  (assert true)

;; is_perm__def_axiom
  (assert
  (forall ((a us_t) (b us_t))
  (! (= (= (is_perm a b) true)
     (forall ((e Int))
     (=> (and (<= (- 2147483648) e) (<= e 2147483647))
     (= (occ a e) (occ b e))))) :pattern ((is_perm a b)) )))

(declare-fun sorted (us_t Int Int) Bool)

(declare-fun sorted__function_guard (Bool us_t Int Int) Bool)

;; sorted__post_axiom
  (assert true)

;; sorted__def_axiom
  (assert
  (forall ((a us_t))
  (forall ((i Int) (j Int))
  (! (= (= (sorted a i j) true)
     (forall ((k Int))
     (=> (and (<= i k) (<= k (- j 1)))
     (<= (to_rep (select (to_array a) k)) (to_rep
                                          (select (to_array a) (+ k 1))))))) :pattern (
  (sorted a i j)) ))))

(declare-fun a__first () integer)

(declare-fun a__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-fun dummy3 () integer)

(declare-datatypes ()
((tTbSP1__ref (mk_tTbSP1__ref (tTbSP1__content integer)))))
(define-fun tTbSP1__ref___projection ((a tTbSP1__ref)) integer (tTbSP1__content
                                                               a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int integer)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq5 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq4 (us_t1 us_t1) Bool)

(declare-fun dummy4 () us_t1)

(declare-datatypes () ((tbS__ref (mk_tbS__ref (tbS__content us_t1)))))
(define-fun tbS__ref___projection ((a tbS__ref)) us_t1 (tbS__content a))

(define-fun dynamic_invariant2 ((temp___expr_242 us_t1)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_240 true))
                                      (and (dynamic_property2
                                      (to_rep a__first) (to_rep a__last)
                                      (first3 temp___expr_242)
                                      (last3 temp___expr_242))
                                      (and
                                      (= (first3 temp___expr_242) (to_rep
                                                                  a__first))
                                      (= (last3 temp___expr_242) (to_rep
                                                                 a__last)))))
                                      (=> (= temp___do_toplevel_241 true)
                                      (=> (= temp___is_init_239 true)
                                      (= (first3 temp___expr_242) 0)))))

(define-fun dynamic_predicate1 ((temp___249 us_t1)) Bool (= (first3
                                                            temp___249) 0))

(declare-fun b () us_t1)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant3 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 2147483646)) (in_range2
                                      temp___expr_136)))

(declare-sort nb_occ 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (nb_occ nb_occ) Bool)

(declare-fun dummy5 () nb_occ)

(declare-datatypes ()
((nb_occ__ref (mk_nb_occ__ref (nb_occ__content nb_occ)))))
(define-fun nb_occ__ref___projection ((a nb_occ__ref)) nb_occ (nb_occ__content
                                                              a))

(define-fun dynamic_invariant4 ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_152)))

(declare-fun remove_last (us_t) us_t)

(declare-fun remove_last__function_guard (us_t us_t) Bool)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t17s__ref (mk_t17s__ref (t17s__content integer)))))
(define-fun t17s__ref___projection ((a t17s__ref)) integer (t17s__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))

(define-fun of_array2 ((a (Array Int integer)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq8 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq7 (us_t2 us_t2) Bool)

(declare-fun dummy7 () us_t2)

(declare-datatypes () ((t18s__ref (mk_t18s__ref (t18s__content us_t2)))))
(define-fun t18s__ref___projection ((a t18s__ref)) us_t2 (t18s__content a))

;; remove_last__post_axiom
  (assert
  (forall ((a us_t))
  (! (=> (and (dynamic_invariant1 a true true true) (< 0 (length a)))
     (dynamic_invariant1 (remove_last a) true false true)) :pattern (
  (remove_last a)) )))

;; remove_last__def_axiom
  (assert
  (forall ((a us_t))
  (! (=> (dynamic_invariant1 a true true true)
     (= (remove_last a) (let ((temp___164 (let ((temp___163 (- (last1 a) 1)))
                                          (let ((temp___162 (first1 a)))
                                          (of_array2 (to_array a) temp___162
                                          temp___163)))))
                        (of_array (to_array2 temp___164) (first5 temp___164)
                        (last5 temp___164))))) :pattern ((remove_last a)) )))

(declare-fun occ_def (us_t Int) Int)

(declare-fun occ_def__function_guard (Int us_t Int) Bool)

;; occ_def__def_axiom
  (assert
  (forall ((a us_t))
  (forall ((e Int))
  (! (=>
     (and (dynamic_invariant1 a true true true) (dynamic_invariant e true
     true true))
     (= (occ_def a e) (ite (= (length a) 0) 0
                      (ite (= (to_rep (select (to_array a) (last1 a))) e)
                      (+ (occ_def (remove_last a) e) 1)
                      (occ_def (remove_last a) e))))) :pattern ((occ_def a e)) ))))

;; occ__post_axiom
  (assert
  (forall ((a us_t))
  (forall ((e Int))
  (! (=>
     (and (dynamic_invariant1 a true true true) (dynamic_invariant e true
     true true))
     (let ((result (occ a e)))
     (and (<= result (length a)) (dynamic_invariant4 result true false true)))) :pattern (
  (occ a e)) ))))

;; occ__def_axiom
  (assert
  (forall ((a us_t))
  (forall ((e Int))
  (! (=>
     (and (dynamic_invariant1 a true true true) (dynamic_invariant e true
     true true)) (= (occ a e) (occ_def a e))) :pattern ((occ a e)) ))))

(declare-fun a () (Array Int integer))

(declare-fun i () Int)

(declare-fun j () Int)

(declare-fun x () Int)

(declare-fun y () Int)

(declare-fun z () Int)

(declare-fun temp___253 () (Array Int integer))

(declare-fun temp___2531 () t1)

(declare-fun pair_insertion_sort__sort__b__assume () (Array Int integer))

(declare-fun pair_insertion_sort__sort__b__assume1 () t1)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun temp___279 () Int)

(declare-fun temp___278 () (Array Int integer))

(declare-fun temp___275 () Int)

(declare-fun temp___274 () Int)

(declare-fun temp___273 () Int)

(declare-fun temp___272 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () integer)

(declare-fun o5 () Int)

(declare-fun temp___254 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () integer)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () integer)

(declare-fun o12 () Int)

(declare-fun temp___258 () (Array Int integer))

(declare-fun temp___255 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () integer)

(declare-fun o19 () Int)

(declare-fun o20 () Bool)

(declare-fun temp___264 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () integer)

(declare-fun o23 () Int)

(declare-fun o24 () Bool)

(declare-fun o25 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () integer)

(declare-fun o31 () Int)

(declare-fun temp___268 () (Array Int integer))

(declare-fun temp___265 () Int)

(declare-fun o32 () Int)

(declare-fun o33 () Int)

(declare-fun o34 () Int)

(declare-fun o35 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () integer)

(declare-fun o38 () Int)

(declare-fun o39 () Bool)

(declare-fun o40 () Int)

(declare-fun o41 () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Int)

(declare-fun o44 () Bool)

(declare-fun o45 () Int)

(declare-fun o46 () Int)

(declare-fun o47 () Int)

(declare-fun o48 () Int)

(declare-fun o49 () integer)

(declare-fun o50 () Int)

(declare-fun o51 () Int)

(declare-fun o52 () Int)

(declare-fun o53 () integer)

(declare-fun o54 () Int)

(declare-fun o55 () Int)

(declare-fun o56 () Int)

(declare-fun o57 () Int)

(declare-fun o58 () Int)

(declare-fun o59 () Int)

(declare-fun o60 () integer)

(declare-fun o61 () Int)

(declare-fun o62 () Bool)

(declare-fun o63 () Int)

(declare-fun o64 () Int)

(declare-fun o65 () Int)

(declare-fun a1 () (Array Int integer))

(declare-fun j1 () Int)

(declare-fun x1 () Int)

(declare-fun y1 () Int)

(declare-fun z1 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun result1 () Bool)

(declare-fun result2 () Int)

(declare-fun x2 () Int)

(declare-fun result3 () Int)

(declare-fun y2 () Int)

(declare-fun result4 () Int)

(declare-fun z2 () Int)

(declare-fun result5 () Int)

(declare-fun x3 () Int)

(declare-fun result6 () Int)

(declare-fun y3 () Int)

(declare-fun result7 () Int)

(declare-fun j2 () Int)

(declare-fun result8 () Bool)

(declare-fun a2 () (Array Int integer))

(declare-fun a3 () (Array Int integer))

(declare-fun j3 () Int)

(declare-fun result9 () Int)

(declare-fun j4 () Int)

(declare-fun result10 () Bool)

(declare-fun a4 () (Array Int integer))

(declare-fun j5 () Int)

(declare-fun a5 () (Array Int integer))

(declare-fun j6 () Int)

(declare-fun a6 () (Array Int integer))

(declare-fun j7 () int__ref)

(declare-fun a7 () (Array Int integer))

(declare-fun j8 () Int)

(declare-fun result11 () Bool)

(declare-fun a8 () (Array Int integer))

(declare-fun a9 () map__ref)

(declare-fun a10 () (Array Int integer))

(declare-fun result12 () Bool)

(declare-fun a11 () (Array Int integer))

(declare-fun a12 () (Array Int integer))

(declare-fun j9 () Int)

(declare-fun result13 () int__ref)

(declare-fun j10 () Int)

(declare-fun result14 () Bool)

(declare-fun a13 () map__ref)

(declare-fun j11 () int__ref)

(declare-fun a14 () (Array Int integer))

(declare-fun j12 () Int)

(declare-fun a15 () map__ref)

(declare-fun j13 () int__ref)

(declare-fun a16 () (Array Int integer))

(declare-fun j14 () Int)

(declare-fun a17 () (Array Int integer))

(declare-fun i2 () Int)

(declare-fun j15 () Int)

(declare-fun x4 () Int)

(declare-fun y4 () Int)

(declare-fun z3 () Int)

(declare-fun result15 () int__ref)

(declare-fun i3 () Int)

(declare-fun result16 () Bool)

(declare-fun a18 () map__ref)

(declare-fun i4 () int__ref)

(declare-fun j16 () int__ref)

(declare-fun x5 () int__ref)

(declare-fun y5 () int__ref)

(declare-fun z4 () int__ref)

(declare-fun a19 () (Array Int integer))

(declare-fun i5 () Int)

(declare-fun j17 () Int)

(declare-fun x6 () Int)

(declare-fun y6 () Int)

(declare-fun z5 () Int)

(declare-fun a20 () map__ref)

(declare-fun i6 () int__ref)

(declare-fun j18 () int__ref)

(declare-fun x7 () int__ref)

(declare-fun y7 () int__ref)

(declare-fun z6 () int__ref)

(declare-fun a21 () (Array Int integer))

(declare-fun i7 () Int)

(declare-fun j19 () Int)

(declare-fun x8 () Int)

(declare-fun y8 () Int)

(declare-fun z7 () Int)

(declare-fun result17 () Bool)

(declare-fun result18 () int__ref)

(declare-fun y9 () Int)

(declare-fun result19 () int__ref)

(declare-fun j20 () Int)

(declare-fun result20 () Bool)

(declare-fun a22 () (Array Int integer))

(declare-fun a23 () (Array Int integer))

(declare-fun j21 () Int)

(declare-fun result21 () int__ref)

(declare-fun j22 () Int)

(declare-fun result22 () Bool)

(declare-fun a24 () (Array Int integer))

(declare-fun a25 () map__ref)

(declare-fun j23 () int__ref)

(declare-fun a26 () (Array Int integer))

(declare-fun j24 () Int)

(define-fun a27 () map__ref (mk_map__ref a6))

(define-fun pair_insertion_sort__sort__b__assume2 () us_t1 (mk___t1
                                                           pair_insertion_sort__sort__b__assume
                                                           pair_insertion_sort__sort__b__assume1))

(define-fun z8 () int__ref (mk_int__ref z))

(define-fun y10 () int__ref (mk_int__ref y))

(define-fun x9 () int__ref (mk_int__ref x))

(define-fun j25 () int__ref (mk_int__ref j))

(define-fun a28 () map__ref (mk_map__ref a))

;; H
  (assert
  (and (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last))
  (= (to_rep a__first) 0)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 i)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 j)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 x)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 y)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 z)))

;; H
  (assert (= (slide a (to_rep a__first) (to_rep a__first)) temp___253))

;; H
  (assert (= (mk1 (to_rep a__first) (to_rep a__last)) temp___2531))

;; H
  (assert (= (to_rep (first2 temp___2531)) 0))

;; H
  (assert
  (= pair_insertion_sort__sort__b__assume2 (mk___t1 temp___253 temp___2531)))

;; H
  (assert (= pair_insertion_sort__sort__b__assume2 b))

;; H
  (assert (dynamic_invariant2 b true false true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 0))

;; H
  (assert
  (=> (<= (to_rep a__first) (to_rep a__last))
  (= o (+ (- (to_rep a__last) (to_rep a__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep a__first) (to_rep a__last))) (= o 0)))

;; H
  (assert (and (= o1 o) (in_range1 o)))

;; H
  (assert (= o2 (- o1 1)))

;; H
  (assert (= result1 (ite (< i1 o2) true false)))

;; H
  (assert (=> (= result1 true) (= temp___279 i1)))

;; H
  (assert (=> (= result1 true) (= temp___278 a)))

;; H
  (assert (=> (= result1 true) (= temp___275 z)))

;; H
  (assert (=> (= result1 true) (= temp___274 y)))

;; H
  (assert (=> (= result1 true) (= temp___273 x)))

;; H
  (assert (=> (= result1 true) (= temp___272 j)))

;; H
  (assert
  (=> (= result1 true)
  (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))))

;; H
  (assert (=> (= result1 true) (= o3 i1)))

;; H
  (assert (=> (= result1 true) (= o4 (select a o3))))

;; H
  (assert (=> (= result1 true) (= o5 (to_rep o4))))

;; H
  (assert (=> (= result1 true) (= (mk_int__ref result2) x9)))

;; H
  (assert (=> (= result1 true) (= x2 o5)))

;; H
  (assert
  (=> (= result1 true) (and (= temp___254 (+ i1 1)) (in_range1 (+ i1 1)))))

;; H
  (assert
  (=> (= result1 true)
  (and (<= (to_rep a__first) temp___254) (<= temp___254 (to_rep a__last)))))

;; H
  (assert (=> (= result1 true) (= o6 temp___254)))

;; H
  (assert (=> (= result1 true) (= o7 (select a o6))))

;; H
  (assert (=> (= result1 true) (= o8 (to_rep o7))))

;; H
  (assert (=> (= result1 true) (= (mk_int__ref result3) y10)))

;; H
  (assert (=> (= result1 true) (= y2 o8)))

;; H
  (assert (=> (= result1 true) (=> (< x2 y2) (= (mk_int__ref result4) z8))))

;; H
  (assert (=> (= result1 true) (=> (< x2 y2) (= z2 x2))))

;; H
  (assert (=> (= result1 true) (=> (< x2 y2) (= x2 result5))))

;; H
  (assert (=> (= result1 true) (=> (< x2 y2) (= x3 y2))))

;; H
  (assert (=> (= result1 true) (=> (< x2 y2) (= y2 result6))))

;; H
  (assert (=> (= result1 true) (=> (< x2 y2) (= y3 z2))))

;; H
  (assert (=> (= result1 true) (=> (not (< x2 y2)) (= z2 z))))

;; H
  (assert (=> (= result1 true) (=> (not (< x2 y2)) (= y3 y2))))

;; H
  (assert (=> (= result1 true) (=> (not (< x2 y2)) (= x3 x2))))

;; H
  (assert (=> (= result1 true) (=> (not (< x2 y2)) (= z2 z1))))

;; H
  (assert (=> (= result1 true) (=> (not (< x2 y2)) (= y3 y2))))

;; H
  (assert (=> (= result1 true) (=> (not (< x2 y2)) (= x3 x2))))

;; H
  (assert (=> (= result1 true) (and (= o9 (- i1 1)) (in_range1 (- i1 1)))))

;; H
  (assert (=> (= result1 true) (= (mk_int__ref result7) j25)))

;; H
  (assert (=> (= result1 true) (= j2 o9)))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 j2) (and (<= (to_rep a__first) j2) (<= j2 (to_rep a__last))))))

;; H
  (assert (=> (= result1 true) (=> (<= 0 j2) (= o10 j2))))

;; H
  (assert (=> (= result1 true) (=> (<= 0 j2) (= o11 (select a o10)))))

;; H
  (assert (=> (= result1 true) (=> (<= 0 j2) (= o12 (to_rep o11)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 j2) (= result8 (ite (< x3 o12) true false)))))

;; H
  (assert (=> (= result1 true) (=> (not (<= 0 j2)) (= result8 false))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= temp___258 a))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= temp___255 j2))))

;; H
  (assert
  (=> (= result1 true) (=> (= result8 true) (and (= o15 j2) (in_range2 j2)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (and (= o13 (+ j2 2)) (in_range1 (+ j2 2))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (and (= o14 o13) (in_range2 o13)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (and
  (and
  (= (is_perm (mk___t a (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a2 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a2 o14)) (to_rep (select a o15)))
  (and (= (to_rep (select a2 o15)) (to_rep (select a o14)))
  (forall ((z9 Int))
  (=> (and (<= (to_rep a__first) z9) (<= z9 (to_rep a__last)))
  (=> (and (not (= z9 o14)) (not (= z9 o15)))
  (= (to_rep (select a2 z9)) (to_rep (select a z9)))))))))
  (= (to_rep a__first) 0)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (and (<= 0 j3)
  (<= j3 (- (ite (<= (to_rep a__first) (to_rep a__last))
            (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 3))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (= (sorted (mk___t a3 (mk (to_rep a__first) (to_rep a__last))) 0 (- j3 1)) true))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (= (sorted (mk___t a3 (mk (to_rep a__first) (to_rep a__last))) (+ j3 2)
     (+ i1 1)) true))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (=> (< 0 j3)
  (<= (to_rep (select a3 (- j3 1))) (to_rep (select a3 (+ j3 2))))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (< x3 (to_rep (select a3 (+ j3 2)))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (= (is_perm
     (mk___t (elts1 b)
     (mk (to_rep (first2 (rt1 b))) (to_rep (last2 (rt1 b)))))
     (mk___t a3 (mk (to_rep a__first) (to_rep a__last)))) true))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (or
  (and (= (to_rep (select a3 j3)) x3) (= (to_rep (select a3 (+ j3 1))) y3))
  (and (= (to_rep (select a3 j3)) y3) (= (to_rep (select a3 (+ j3 1))) x3))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 j3))
  (= (to_rep a__first) 0)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (and (= o16 (- j3 1)) (in_range1 (- j3 1))))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= j3 result9))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= j4 o16))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true)
  (=> (<= 0 j4) (and (<= (to_rep a__first) j4) (<= j4 (to_rep a__last)))))))

;; H
  (assert
  (=> (= result1 true) (=> (= result8 true) (=> (<= 0 j4) (= o17 j4)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (=> (<= 0 j4) (= o18 (select a3 o17))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (=> (<= 0 j4) (= o19 (to_rep o18))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (=> (<= 0 j4) (= o20 (ite (< x3 o19) true false))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (=> (not (<= 0 j4)) (= o20 false)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result8 true) (= result10 (ite (not (= o20 true)) true false)))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= result10 true))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= j4 j5))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= a3 a4))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= j6 j4))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= a5 a3))))

;; H
  (assert
  (=> (= result1 true) (=> (= result8 true) (= j7 (mk_int__ref j5)))))

;; H
  (assert
  (=> (= result1 true) (=> (= result8 true) (= a27 (mk_map__ref a4)))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= j8 j6))))

;; H
  (assert (=> (= result1 true) (=> (= result8 true) (= a7 a5))))

;; H
  (assert
  (=> (= result1 true) (=> (not (= result8 true)) (= j7 (mk_int__ref j2)))))

;; H
  (assert (=> (= result1 true) (=> (not (= result8 true)) (= a27 a28))))

;; H
  (assert (=> (= result1 true) (=> (not (= result8 true)) (= j8 j2))))

;; H
  (assert (=> (= result1 true) (=> (not (= result8 true)) (= a7 a1))))

;; H
  (assert
  (=> (= result1 true)
  (and (= temp___264 (+ (int__content j7) 2)) (in_range1
  (+ (int__content j7) 2)))))

;; H
  (assert
  (=> (= result1 true)
  (and (<= (to_rep a__first) temp___264) (<= temp___264 (to_rep a__last)))))

;; H
  (assert (=> (= result1 true) (= o21 temp___264)))

;; H
  (assert (=> (= result1 true) (= o22 (select a6 o21))))

;; H
  (assert (=> (= result1 true) (= o23 (to_rep o22))))

;; H
  (assert (=> (= result1 true) (= o24 (ite (= o23 x3) true false))))

;; H
  (assert
  (=> (= result1 true) (= result11 (ite (not (= o24 true)) true false))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result11 true)
  (and (= o27 (+ (int__content j7) 1)) (in_range1 (+ (int__content j7) 1))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result11 true) (and (= o28 o27) (in_range2 o27)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result11 true)
  (and (= o25 (+ (int__content j7) 2)) (in_range1 (+ (int__content j7) 2))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result11 true) (and (= o26 o25) (in_range2 o25)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result11 true)
  (and
  (and
  (= (is_perm (mk___t a6 (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a8 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a8 o26)) (to_rep (select a6 o28)))
  (and (= (to_rep (select a8 o28)) (to_rep (select a6 o26)))
  (forall ((z9 Int))
  (=> (and (<= (to_rep a__first) z9) (<= z9 (to_rep a__last)))
  (=> (and (not (= z9 o26)) (not (= z9 o28)))
  (= (to_rep (select a8 z9)) (to_rep (select a6 z9)))))))))
  (= (to_rep a__first) 0)))))

;; H
  (assert
  (=> (= result1 true) (=> (= result11 true) (= a9 (mk_map__ref a8)))))

;; H
  (assert (=> (= result1 true) (=> (= result11 true) (= a10 a8))))

;; H
  (assert (=> (= result1 true) (=> (not (= result11 true)) (= a9 a27))))

;; H
  (assert (=> (= result1 true) (=> (not (= result11 true)) (= a10 a7))))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 (int__content j7))
  (and (<= (to_rep a__first) (int__content j7))
  (<= (int__content j7) (to_rep a__last))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 (int__content j7)) (= o29 (int__content j7)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 (int__content j7)) (= o30 (select (map__content a9) o29)))))

;; H
  (assert
  (=> (= result1 true) (=> (<= 0 (int__content j7)) (= o31 (to_rep o30)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 (int__content j7)) (= result12 (ite (< y3 o31) true false)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (not (<= 0 (int__content j7))) (= result12 false))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (= temp___268 (map__content a9)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (= temp___265 (int__content j7)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (and (= o34 (int__content j7)) (in_range2 (int__content j7))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (and (= o32 (+ (int__content j7) 1)) (in_range1 (+ (int__content j7) 1))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (and (= o33 o32) (in_range2 o32)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (and
  (and
  (= (is_perm
     (mk___t (map__content a9) (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a11 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a11 o33)) (to_rep (select (map__content a9) o34)))
  (and (= (to_rep (select a11 o34)) (to_rep (select (map__content a9) o33)))
  (forall ((z9 Int))
  (=> (and (<= (to_rep a__first) z9) (<= z9 (to_rep a__last)))
  (=> (and (not (= z9 o33)) (not (= z9 o34)))
  (= (to_rep (select a11 z9)) (to_rep (select (map__content a9) z9)))))))))
  (= (to_rep a__first) 0)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (and (<= 0 j9)
  (<= j9 (- (ite (<= (to_rep a__first) (to_rep a__last))
            (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 3))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (= (sorted (mk___t a12 (mk (to_rep a__first) (to_rep a__last))) 0 (- j9 1)) true))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (= (sorted (mk___t a12 (mk (to_rep a__first) (to_rep a__last))) (+ 
     j9 1) (+ i1 1)) true))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (=> (< 0 j9)
  (<= (to_rep (select a12 (- j9 1))) (to_rep (select a12 (+ j9 1))))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (< y3 (to_rep (select a12 (+ j9 1)))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (= (is_perm
     (mk___t (elts1 b)
     (mk (to_rep (first2 (rt1 b))) (to_rep (last2 (rt1 b)))))
     (mk___t a12 (mk (to_rep a__first) (to_rep a__last)))) true))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (= (to_rep (select a12 j9)) y3))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 j9))
  (= (to_rep a__first) 0)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (and (= o35 (- j9 1)) (in_range1 (- j9 1))))))

;; H
  (assert
  (=> (= result1 true) (=> (= result12 true) (= result13 (mk_int__ref j9)))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= j10 o35))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true)
  (=> (<= 0 j10) (and (<= (to_rep a__first) j10) (<= j10 (to_rep a__last)))))))

;; H
  (assert
  (=> (= result1 true) (=> (= result12 true) (=> (<= 0 j10) (= o36 j10)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (=> (<= 0 j10) (= o37 (select a12 o36))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (=> (<= 0 j10) (= o38 (to_rep o37))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (=> (<= 0 j10) (= o39 (ite (< y3 o38) true false))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (=> (not (<= 0 j10)) (= o39 false)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (= result12 true) (= result14 (ite (not (= o39 true)) true false)))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= result14 true))))

;; H
  (assert
  (=> (= result1 true) (=> (= result12 true) (= j11 (mk_int__ref j10)))))

;; H
  (assert
  (=> (= result1 true) (=> (= result12 true) (= a13 (mk_map__ref a12)))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= j12 j10))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= a14 a12))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= j13 j11))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= a15 a13))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= j14 j12))))

;; H
  (assert (=> (= result1 true) (=> (= result12 true) (= a16 a14))))

;; H
  (assert (=> (= result1 true) (=> (not (= result12 true)) (= j13 j7))))

;; H
  (assert (=> (= result1 true) (=> (not (= result12 true)) (= a15 a9))))

;; H
  (assert (=> (= result1 true) (=> (not (= result12 true)) (= j14 j8))))

;; H
  (assert (=> (= result1 true) (=> (not (= result12 true)) (= a16 a10))))

;; H
  (assert
  (=> (= result1 true)
  (and (<= 0 i2)
  (<= i2 (- (ite (<= (to_rep a__first) (to_rep a__last))
            (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 2)))))

;; H
  (assert
  (=> (= result1 true)
  (and (<= (- 1) j15)
  (<= j15 (- (ite (<= (to_rep a__first) (to_rep a__last))
             (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 3)))))

;; H
  (assert
  (=> (= result1 true)
  (= (sorted (mk___t a17 (mk (to_rep a__first) (to_rep a__last))) 0 (+ i2 1)) true)))

;; H
  (assert
  (=> (= result1 true)
  (= (is_perm
     (mk___t (elts1 b)
     (mk (to_rep (first2 (rt1 b))) (to_rep (last2 (rt1 b)))))
     (mk___t a17 (mk (to_rep a__first) (to_rep a__last)))) true)))

;; H
  (assert
  (=> (= result1 true)
  (and
  (and
  (and
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 j15))
  (=> (<= (- 2147483648) 2147483647) (in_range1 x4)))
  (=> (<= (- 2147483648) 2147483647) (in_range1 y4)))
  (=> (<= (- 2147483648) 2147483647) (in_range1 z3)))
  (= (to_rep a__first) 0))
  (=> (<= (- 2147483648) 2147483647) (in_range1 i2)))))

;; H
  (assert (=> (= result1 true) (and (= o40 (+ i2 2)) (in_range1 (+ i2 2)))))

;; H
  (assert (=> (= result1 true) (= result15 (mk_int__ref i2))))

;; H
  (assert (=> (= result1 true) (= i3 o40)))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= (to_rep a__first) (to_rep a__last))
  (= o41 (+ (- (to_rep a__last) (to_rep a__first)) 1)))))

;; H
  (assert
  (=> (= result1 true)
  (=> (not (<= (to_rep a__first) (to_rep a__last))) (= o41 0))))

;; H
  (assert (=> (= result1 true) (and (= o42 o41) (in_range1 o41))))

;; H
  (assert (=> (= result1 true) (= o43 (- o42 1))))

;; H
  (assert (=> (= result1 true) (= o44 (ite (< i3 o43) true false))))

;; H
  (assert
  (=> (= result1 true) (= result16 (ite (not (= o44 true)) true false))))

;; H
  (assert (=> (= result1 true) (= result16 true)))

;; H
  (assert (=> (= result1 true) (= z4 (mk_int__ref z3))))

;; H
  (assert (=> (= result1 true) (= y5 (mk_int__ref y4))))

;; H
  (assert (=> (= result1 true) (= x5 (mk_int__ref x4))))

;; H
  (assert (=> (= result1 true) (= j16 (mk_int__ref j15))))

;; H
  (assert (=> (= result1 true) (= i4 (mk_int__ref i3))))

;; H
  (assert (=> (= result1 true) (= a18 (mk_map__ref a17))))

;; H
  (assert (=> (= result1 true) (= z5 z3)))

;; H
  (assert (=> (= result1 true) (= y6 y4)))

;; H
  (assert (=> (= result1 true) (= x6 x4)))

;; H
  (assert (=> (= result1 true) (= j17 j15)))

;; H
  (assert (=> (= result1 true) (= i5 i3)))

;; H
  (assert (=> (= result1 true) (= a19 a17)))

;; H
  (assert (=> (= result1 true) (= z6 z4)))

;; H
  (assert (=> (= result1 true) (= y7 y5)))

;; H
  (assert (=> (= result1 true) (= x7 x5)))

;; H
  (assert (=> (= result1 true) (= j18 j16)))

;; H
  (assert (=> (= result1 true) (= i6 i4)))

;; H
  (assert (=> (= result1 true) (= a20 a18)))

;; H
  (assert (=> (= result1 true) (= z7 z5)))

;; H
  (assert (=> (= result1 true) (= y8 y6)))

;; H
  (assert (=> (= result1 true) (= x8 x6)))

;; H
  (assert (=> (= result1 true) (= j19 j17)))

;; H
  (assert (=> (= result1 true) (= i7 i5)))

;; H
  (assert (=> (= result1 true) (= a21 a19)))

;; H
  (assert (=> (not (= result1 true)) (= z6 z8)))

;; H
  (assert (=> (not (= result1 true)) (= y7 y10)))

;; H
  (assert (=> (not (= result1 true)) (= x7 x9)))

;; H
  (assert (=> (not (= result1 true)) (= j18 j25)))

;; H
  (assert (=> (not (= result1 true)) (= i6 (mk_int__ref i1))))

;; H
  (assert (=> (not (= result1 true)) (= a20 a28)))

;; H
  (assert (=> (not (= result1 true)) (= z7 z1)))

;; H
  (assert (=> (not (= result1 true)) (= y8 y1)))

;; H
  (assert (=> (not (= result1 true)) (= x8 x1)))

;; H
  (assert (=> (not (= result1 true)) (= j19 j1)))

;; H
  (assert (=> (not (= result1 true)) (= i7 i1)))

;; H
  (assert (=> (not (= result1 true)) (= a21 a1)))

;; H
  (assert
  (=> (<= (to_rep a__first) (to_rep a__last))
  (= o45 (+ (- (to_rep a__last) (to_rep a__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep a__first) (to_rep a__last))) (= o45 0)))

;; H
  (assert (and (= o46 o45) (in_range1 o45)))

;; H
  (assert (= o47 (- o46 1)))

;; H
  (assert (= result17 (ite (= (int__content i6) o47) true false)))

;; H
  (assert (= result17 true))

;; H
  (assert
  (and (<= (to_rep a__first) (int__content i6))
  (<= (int__content i6) (to_rep a__last))))

;; H
  (assert (= o48 (int__content i6)))

;; H
  (assert (= o49 (select (map__content a20) o48)))

;; H
  (assert (= o50 (to_rep o49)))

;; H
  (assert (= result18 y7))

;; H
  (assert (= y9 o50))

;; H
  (assert
  (and (= o51 (- (int__content i6) 1)) (in_range1 (- (int__content i6) 1))))

;; H
  (assert (= result19 j18))

;; H
  (assert (= j20 o51))

;; H
  (assert
  (=> (<= 0 j20) (and (<= (to_rep a__first) j20) (<= j20 (to_rep a__last)))))

;; H
  (assert (=> (<= 0 j20) (= o52 j20)))

;; H
  (assert (=> (<= 0 j20) (= o53 (select (map__content a20) o52))))

;; H
  (assert (=> (<= 0 j20) (= o54 (to_rep o53))))

;; H
  (assert (=> (<= 0 j20) (= result20 (ite (< y9 o54) true false))))

;; H
  (assert (=> (not (<= 0 j20)) (= result20 false)))

;; H
  (assert (= result20 true))

;; H
  (assert (and (= o57 j20) (in_range2 j20)))

;; H
  (assert (and (= o55 (+ j20 1)) (in_range1 (+ j20 1))))

;; H
  (assert (and (= o56 o55) (in_range2 o55)))

;; H
  (assert
  (and
  (and
  (= (is_perm
     (mk___t (map__content a20) (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a22 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a22 o56)) (to_rep (select (map__content a20) o57)))
  (and (= (to_rep (select a22 o57)) (to_rep (select (map__content a20) o56)))
  (forall ((z9 Int))
  (=> (and (<= (to_rep a__first) z9) (<= z9 (to_rep a__last)))
  (=> (and (not (= z9 o56)) (not (= z9 o57)))
  (= (to_rep (select a22 z9)) (to_rep (select (map__content a20) z9)))))))))
  (= (to_rep a__first) 0)))

;; H
  (assert
  (and (<= 0 j21)
  (<= j21 (- (ite (<= (to_rep a__first) (to_rep a__last))
             (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 2))))

;; H
  (assert
  (= (sorted (mk___t a23 (mk (to_rep a__first) (to_rep a__last))) 0
     (- j21 1)) true))

;; H
  (assert
  (= (sorted (mk___t a23 (mk (to_rep a__first) (to_rep a__last))) (+ 
     j21 1)
     (- (ite (<= (to_rep a__first) (to_rep a__last))
        (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 1)) true))

;; H
  (assert
  (=> (< 0 j21)
  (<= (to_rep (select a23 (- j21 1))) (to_rep (select a23 (+ j21 1))))))

;; H
  (assert (< y9 (to_rep (select a23 (+ j21 1)))))

;; H
  (assert
  (= (is_perm
     (mk___t (elts1 b)
     (mk (to_rep (first2 (rt1 b))) (to_rep (last2 (rt1 b)))))
     (mk___t a23 (mk (to_rep a__first) (to_rep a__last)))) true))

;; H
  (assert (= (to_rep (select a23 j21)) y9))

;; H
  (assert
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 j21))
  (= (to_rep a__first) 0)))

;; H
  (assert (and (= o58 (- j21 1)) (in_range1 (- j21 1))))

;; H
  (assert (= result21 (mk_int__ref j21)))

;; H
  (assert (= j22 o58))

;; H
  (assert
  (=> (<= 0 j22) (and (<= (to_rep a__first) j22) (<= j22 (to_rep a__last)))))

;; H
  (assert (=> (<= 0 j22) (= o59 j22)))

;; H
  (assert (=> (<= 0 j22) (= o60 (select a23 o59))))

;; H
  (assert (=> (<= 0 j22) (= o61 (to_rep o60))))

;; H
  (assert (=> (<= 0 j22) (= o62 (ite (< y9 o61) true false))))

;; H
  (assert (=> (not (<= 0 j22)) (= o62 false)))

;; H
  (assert (= result22 (ite (not (= o62 true)) true false)))

;; H
  (assert (not (= result22 true)))

;; H
  (assert (and (= o65 j22) (in_range2 j22)))

;; H
  (assert (and (= o63 (+ j22 1)) (in_range1 (+ j22 1))))

;; H
  (assert (and (= o64 o63) (in_range2 o63)))

;; H
  (assert
  (and
  (and
  (= (is_perm (mk___t a23 (mk (to_rep a__first) (to_rep a__last)))
     (mk___t a24 (mk (to_rep a__first) (to_rep a__last)))) true)
  (and (= (to_rep (select a24 o64)) (to_rep (select a23 o65)))
  (and (= (to_rep (select a24 o65)) (to_rep (select a23 o64)))
  (forall ((z9 Int))
  (=> (and (<= (to_rep a__first) z9) (<= z9 (to_rep a__last)))
  (=> (and (not (= z9 o64)) (not (= z9 o65)))
  (= (to_rep (select a24 z9)) (to_rep (select a23 z9)))))))))
  (= (to_rep a__first) 0)))

;; H
  (assert (= j23 (mk_int__ref j22)))

;; H
  (assert (= a25 (mk_map__ref a24)))

;; H
  (assert (= j24 j22))

;; H
  (assert (= a26 a24))

(assert
;; WP_parameter_def
 ;; File "pair_insertion_sort.ads", line 7, characters 0-0
  (not (< y9 (to_rep (select (map__content a25) (+ (int__content j23) 1))))))
(check-sat)
