;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr3 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr3 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl3 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left4 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right4 v (bv2nat n)))))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv3 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth3 x (bv2nat i)) (nth_bv3 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned_64 unsigned_64) Bool)

(declare-const dummy1 unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(declare-fun to_rep (unsigned_64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned_64)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range3
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (byte byte) Bool)

(declare-const dummy2 byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep1 (byte) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int7 ((x byte)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq3 (u16 u16) Bool)

(declare-const dummy3 u16)

(declare-datatypes () ((u16__ref (mk_u16__ref (u16__content u16)))))
(define-fun u16__ref___projection ((a u16__ref)) u16 (u16__content a))

(declare-fun to_rep2 (u16) (_ BitVec 16))

(declare-fun of_rep2 ((_ BitVec 16)) u16)

;; inversion_axiom
  (assert
  (forall ((x u16)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int8 ((x u16)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x u16)) (! (uint_in_range1 (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-sort u32 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 32))

(declare-fun user_eq4 (u32 u32) Bool)

(declare-const dummy4 u32)

(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))

(declare-fun to_rep3 (u32) (_ BitVec 32))

(declare-fun of_rep3 ((_ BitVec 32)) u32)

;; inversion_axiom
  (assert
  (forall ((x u32)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int9 ((x u32)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x u32)) (! (uint_in_range2 (to_int9 x)) :pattern ((to_int9 x)) )))

(declare-sort u64 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

(declare-fun user_eq5 (u64 u64) Bool)

(declare-const dummy5 u64)

(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))

(define-fun dynamic_invariant ((temp___expr_288 (_ BitVec 64))
  (temp___is_init_285 Bool) (temp___skip_constant_286 Bool)
  (temp___do_toplevel_287 Bool)) Bool true)

(declare-fun to_rep4 (u64) (_ BitVec 64))

(declare-fun of_rep4 ((_ BitVec 64)) u64)

;; inversion_axiom
  (assert
  (forall ((x u64)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int10 ((x u64)) Int (bv2nat (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x u64)) (! (uint_in_range3
  (to_int10 x)) :pattern ((to_int10 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) byte))))))
(declare-fun slide ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) byte)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep1 (select a temp___idx_132))
                                     (to_rep1
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep1 (select a (bvadd i #x0000000000000001))) (to_rep1
                                                              (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep1 (select a (bvadd j #x0000000000000001))) (to_rep1
                                                              (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) unsigned_64)

(declare-fun last (t) unsigned_64)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool true)

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 64) byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte) (elts a))

(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-const value__size Int)

(declare-fun object__size ((Array (_ BitVec 64) byte)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array (_ BitVec 64) byte)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-const dummy6 us_t)

(declare-datatypes ()
((byte_seq__ref (mk_byte_seq__ref (byte_seq__content us_t)))))
(define-fun byte_seq__ref___projection ((a byte_seq__ref)) us_t (byte_seq__content
                                                                a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 64) u64))))))
(declare-fun slide1 ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((first2 (_ BitVec 64)))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (u64 (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; singleton_def
  (assert
  (forall ((v u64))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_133 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_133)
                                     (bvule temp___idx_133 a__last))
                                     (= (to_rep4 (select a temp___idx_133))
                                     (to_rep4
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_133 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (= (to_rep4 (select a temp___idx_133)) (to_rep4
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep4 (select a (bvadd i #x0000000000000001))) (to_rep4
                                                              (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep4 (select a (bvadd j #x0000000000000001))) (to_rep4
                                                              (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort hash_bit_length 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 64))

(define-fun in_range2 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x)
                                        (<= x 18446744073709551608)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 64))

(declare-fun user_eq7 (hash_bit_length hash_bit_length) Bool)

(declare-const dummy7 hash_bit_length)

(declare-datatypes ()
((hash_bit_length__ref
 (mk_hash_bit_length__ref (hash_bit_length__content hash_bit_length)))))
(define-fun hash_bit_length__ref___projection ((a hash_bit_length__ref)) hash_bit_length
  (hash_bit_length__content a))

(declare-fun to_rep5 (hash_bit_length) (_ BitVec 64))

(declare-fun of_rep5 ((_ BitVec 64)) hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x hash_bit_length))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range2
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (=> (in_range2 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(define-fun to_int11 ((x hash_bit_length)) Int (bv2nat (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range_int
  (to_int11 x)) :pattern ((to_int11 x)) )))

(declare-sort skein_512_state_words_index 0)

(declare-const attr__ATTRIBUTE_MODULUS6 (_ BitVec 64))

(define-fun in_range3 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 7))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 64))

(declare-fun user_eq8 (skein_512_state_words_index
  skein_512_state_words_index) Bool)

(declare-const dummy8 skein_512_state_words_index)

(declare-datatypes ()
((skein_512_state_words_index__ref
 (mk_skein_512_state_words_index__ref
 (skein_512_state_words_index__content skein_512_state_words_index)))))
(define-fun skein_512_state_words_index__ref___projection ((a skein_512_state_words_index__ref)) skein_512_state_words_index
  (skein_512_state_words_index__content a))

(declare-sort skein_512_block_bytes_index 0)

(declare-const attr__ATTRIBUTE_MODULUS7 (_ BitVec 64))

(define-fun in_range4 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 63))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 64))

(declare-fun user_eq9 (skein_512_block_bytes_index
  skein_512_block_bytes_index) Bool)

(declare-const dummy9 skein_512_block_bytes_index)

(declare-datatypes ()
((skein_512_block_bytes_index__ref
 (mk_skein_512_block_bytes_index__ref
 (skein_512_block_bytes_index__content skein_512_block_bytes_index)))))
(define-fun skein_512_block_bytes_index__ref___projection ((a skein_512_block_bytes_index__ref)) skein_512_block_bytes_index
  (skein_512_block_bytes_index__content a))

(declare-sort u7 0)

(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 127))))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) (_ BitVec 8))

(declare-fun user_eq10 (u7 u7) Bool)

(declare-const dummy10 u7)

(declare-datatypes () ((u7__ref (mk_u7__ref (u7__content u7)))))
(define-fun u7__ref___projection ((a u7__ref)) u7 (u7__content a))

(declare-fun to_rep6 (u7) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) u7)

;; inversion_axiom
  (assert
  (forall ((x u7)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x u7)) (! (in_range5 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 128))))
     (=> (in_range5 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int12 ((x u7)) Int (bv2nat (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x u7)) (! (in_range_int3 (to_int12 x)) :pattern ((to_int12 x)) )))

(declare-sort u6 0)

(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 63))))

(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 8))

(declare-fun user_eq11 (u6 u6) Bool)

(declare-const dummy11 u6)

(declare-datatypes () ((u6__ref (mk_u6__ref (u6__content u6)))))
(define-fun u6__ref___projection ((a u6__ref)) u6 (u6__content a))

(define-fun dynamic_invariant1 ((temp___expr_541 (_ BitVec 8))
  (temp___is_init_538 Bool) (temp___skip_constant_539 Bool)
  (temp___do_toplevel_540 Bool)) Bool (=>
                                      (or (= temp___is_init_538 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 63)))
                                      (in_range6 temp___expr_541)))

(declare-fun to_rep7 (u6) (_ BitVec 8))

(declare-fun of_rep7 ((_ BitVec 8)) u6)

;; inversion_axiom
  (assert
  (forall ((x u6)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x u6)) (! (in_range6 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 64))))
     (=> (in_range6 y) (= (to_rep7 (of_rep7 x)) y))) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(define-fun to_int13 ((x u6)) Int (bv2nat (to_rep7 x)))

;; range_int_axiom
  (assert
  (forall ((x u6)) (! (in_range_int4 (to_int13 x)) :pattern ((to_int13 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__skein__tweak_value__byte_count_lsb u64)(rec__skein__tweak_value__byte_count_msb u32)(rec__skein__tweak_value__reserved u16)(rec__skein__tweak_value__tree_level u7)(rec__skein__tweak_value__bit_pad Bool)(rec__skein__tweak_value__field_type u6)(rec__skein__tweak_value__first_block Bool)(rec__skein__tweak_value__final_block Bool)))))
(define-fun us_split_fields_Byte_Count_LSB__projection ((a us_split_fields)) u64
  (rec__skein__tweak_value__byte_count_lsb a))

(define-fun us_split_fields_Byte_Count_MSB__projection ((a us_split_fields)) u32
  (rec__skein__tweak_value__byte_count_msb a))

(define-fun us_split_fields_Reserved__projection ((a us_split_fields)) u16
  (rec__skein__tweak_value__reserved a))

(define-fun us_split_fields_Tree_Level__projection ((a us_split_fields)) u7
  (rec__skein__tweak_value__tree_level a))

(define-fun us_split_fields_Bit_Pad__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__bit_pad a))

(define-fun us_split_fields_Field_Type__projection ((a us_split_fields)) u6
  (rec__skein__tweak_value__field_type a))

(define-fun us_split_fields_First_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__first_block a))

(define-fun us_split_fields_Final_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__final_block a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep4
                           (rec__skein__tweak_value__byte_count_lsb
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__skein__tweak_value__byte_count_lsb
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__skein__tweak_value__byte_count_msb
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__skein__tweak_value__byte_count_msb
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__skein__tweak_value__reserved
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__skein__tweak_value__reserved
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__skein__tweak_value__tree_level
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__skein__tweak_value__tree_level
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__bit_pad
                           (us_split_fields1 a)) (rec__skein__tweak_value__bit_pad
                                                 (us_split_fields1 b))))
                        (= (to_rep7
                           (rec__skein__tweak_value__field_type
                           (us_split_fields1 a))) (to_rep7
                                                  (rec__skein__tweak_value__field_type
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__first_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__first_block
                                                 (us_split_fields1 b))))
                        (= (rec__skein__tweak_value__final_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__final_block
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const skein__tweak_value__byte_count_lsb__first__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__last__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__position Int)

;; skein__tweak_value__byte_count_lsb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))

;; skein__tweak_value__byte_count_lsb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))

;; skein__tweak_value__byte_count_lsb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__position))

(declare-const skein__tweak_value__byte_count_msb__first__bit Int)

(declare-const skein__tweak_value__byte_count_msb__last__bit Int)

(declare-const skein__tweak_value__byte_count_msb__position Int)

;; skein__tweak_value__byte_count_msb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))

;; skein__tweak_value__byte_count_msb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))

;; skein__tweak_value__byte_count_msb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__position))

(declare-const skein__tweak_value__reserved__first__bit Int)

(declare-const skein__tweak_value__reserved__last__bit Int)

(declare-const skein__tweak_value__reserved__position Int)

;; skein__tweak_value__reserved__first__bit_axiom
  (assert (<= 0 skein__tweak_value__reserved__first__bit))

;; skein__tweak_value__reserved__last__bit_axiom
  (assert
  (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))

;; skein__tweak_value__reserved__position_axiom
  (assert (<= 0 skein__tweak_value__reserved__position))

(declare-const skein__tweak_value__tree_level__first__bit Int)

(declare-const skein__tweak_value__tree_level__last__bit Int)

(declare-const skein__tweak_value__tree_level__position Int)

;; skein__tweak_value__tree_level__first__bit_axiom
  (assert (<= 0 skein__tweak_value__tree_level__first__bit))

;; skein__tweak_value__tree_level__last__bit_axiom
  (assert
  (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))

;; skein__tweak_value__tree_level__position_axiom
  (assert (<= 0 skein__tweak_value__tree_level__position))

(declare-const skein__tweak_value__bit_pad__first__bit Int)

(declare-const skein__tweak_value__bit_pad__last__bit Int)

(declare-const skein__tweak_value__bit_pad__position Int)

;; skein__tweak_value__bit_pad__first__bit_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__first__bit))

;; skein__tweak_value__bit_pad__last__bit_axiom
  (assert
  (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))

;; skein__tweak_value__bit_pad__position_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__position))

(declare-const skein__tweak_value__field_type__first__bit Int)

(declare-const skein__tweak_value__field_type__last__bit Int)

(declare-const skein__tweak_value__field_type__position Int)

;; skein__tweak_value__field_type__first__bit_axiom
  (assert (<= 0 skein__tweak_value__field_type__first__bit))

;; skein__tweak_value__field_type__last__bit_axiom
  (assert
  (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))

;; skein__tweak_value__field_type__position_axiom
  (assert (<= 0 skein__tweak_value__field_type__position))

(declare-const skein__tweak_value__first_block__first__bit Int)

(declare-const skein__tweak_value__first_block__last__bit Int)

(declare-const skein__tweak_value__first_block__position Int)

;; skein__tweak_value__first_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__first_block__first__bit))

;; skein__tweak_value__first_block__last__bit_axiom
  (assert
  (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))

;; skein__tweak_value__first_block__position_axiom
  (assert (<= 0 skein__tweak_value__first_block__position))

(declare-const skein__tweak_value__final_block__first__bit Int)

(declare-const skein__tweak_value__final_block__last__bit Int)

(declare-const skein__tweak_value__final_block__position Int)

;; skein__tweak_value__final_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__final_block__first__bit))

;; skein__tweak_value__final_block__last__bit_axiom
  (assert
  (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))

;; skein__tweak_value__final_block__position_axiom
  (assert (<= 0 skein__tweak_value__final_block__position))

(declare-fun user_eq12 (us_rep us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes ()
((tweak_value__ref (mk_tweak_value__ref (tweak_value__content us_rep)))))
(define-fun tweak_value__ref___projection ((a tweak_value__ref)) us_rep
  (tweak_value__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__skein__context_header__tweak_words us_rep)(rec__skein__context_header__hash_bit_len hash_bit_length)(rec__skein__context_header__byte_count u64)))))
(define-fun us_split_fields_Tweak_Words__projection ((a us_split_fields2)) us_rep
  (rec__skein__context_header__tweak_words a))

(define-fun us_split_fields_Hash_Bit_Len__projection ((a us_split_fields2)) hash_bit_length
  (rec__skein__context_header__hash_bit_len a))

(define-fun us_split_fields_Byte_Count__projection ((a us_split_fields2)) u64
  (rec__skein__context_header__byte_count a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq3
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 a))
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 b))) true)
                         (= (to_rep5
                            (rec__skein__context_header__hash_bit_len
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__skein__context_header__hash_bit_len
                                                   (us_split_fields3 b)))))
                         (= (to_rep4
                            (rec__skein__context_header__byte_count
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__skein__context_header__byte_count
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const skein__context_header__tweak_words__first__bit Int)

(declare-const skein__context_header__tweak_words__last__bit Int)

(declare-const skein__context_header__tweak_words__position Int)

;; skein__context_header__tweak_words__first__bit_axiom
  (assert (<= 0 skein__context_header__tweak_words__first__bit))

;; skein__context_header__tweak_words__last__bit_axiom
  (assert
  (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))

;; skein__context_header__tweak_words__position_axiom
  (assert (<= 0 skein__context_header__tweak_words__position))

(declare-const skein__context_header__hash_bit_len__first__bit Int)

(declare-const skein__context_header__hash_bit_len__last__bit Int)

(declare-const skein__context_header__hash_bit_len__position Int)

;; skein__context_header__hash_bit_len__first__bit_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__first__bit))

;; skein__context_header__hash_bit_len__last__bit_axiom
  (assert
  (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))

;; skein__context_header__hash_bit_len__position_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__position))

(declare-const skein__context_header__byte_count__first__bit Int)

(declare-const skein__context_header__byte_count__last__bit Int)

(declare-const skein__context_header__byte_count__position Int)

;; skein__context_header__byte_count__first__bit_axiom
  (assert (<= 0 skein__context_header__byte_count__first__bit))

;; skein__context_header__byte_count__last__bit_axiom
  (assert
  (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))

;; skein__context_header__byte_count__position_axiom
  (assert (<= 0 skein__context_header__byte_count__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ()
((context_header__ref
 (mk_context_header__ref (context_header__content us_rep1)))))
(define-fun context_header__ref___projection ((a context_header__ref)) us_rep1
  (context_header__content a))

(declare-const dummy14 (Array (_ BitVec 64) u64))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array (_ BitVec 64) u64)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array (_ BitVec 64) u64)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array (_ BitVec 64) u64)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq14 ((Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) u64)) Bool)

(declare-const dummy15 (Array (_ BitVec 64) byte))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq15 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__skein__skein_512_context__h us_rep1)(rec__skein__skein_512_context__x (Array (_ BitVec 64) u64))(rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))
(define-fun us_split_fields_H__projection ((a us_split_fields4)) us_rep1
  (rec__skein__skein_512_context__h a))

(define-fun us_split_fields_X__projection ((a us_split_fields4)) (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x a))

(define-fun us_split_fields_B__projection ((a us_split_fields4)) (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq5 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq4
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 a))
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 b))) true)
                         (= (bool_eq2
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)) true))
                         (= (bool_eq
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)) true))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-const skein__skein_512_context__h__first__bit Int)

(declare-const skein__skein_512_context__h__last__bit Int)

(declare-const skein__skein_512_context__h__position Int)

;; skein__skein_512_context__h__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__h__first__bit))

;; skein__skein_512_context__h__last__bit_axiom
  (assert
  (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))

;; skein__skein_512_context__h__position_axiom
  (assert (<= 0 skein__skein_512_context__h__position))

(declare-const skein__skein_512_context__x__first__bit Int)

(declare-const skein__skein_512_context__x__last__bit Int)

(declare-const skein__skein_512_context__x__position Int)

;; skein__skein_512_context__x__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__x__first__bit))

;; skein__skein_512_context__x__last__bit_axiom
  (assert
  (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))

;; skein__skein_512_context__x__position_axiom
  (assert (<= 0 skein__skein_512_context__x__position))

(declare-const skein__skein_512_context__b__first__bit Int)

(declare-const skein__skein_512_context__b__last__bit Int)

(declare-const skein__skein_512_context__b__position Int)

;; skein__skein_512_context__b__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__b__first__bit))

;; skein__skein_512_context__b__last__bit_axiom
  (assert
  (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))

;; skein__skein_512_context__b__position_axiom
  (assert (<= 0 skein__skein_512_context__b__position))

(declare-fun user_eq16 (us_rep2 us_rep2) Bool)

(declare-const dummy16 us_rep2)

(declare-datatypes ()
((skein_512_context__ref
 (mk_skein_512_context__ref (skein_512_context__content us_rep2)))))
(define-fun skein_512_context__ref___projection ((a skein_512_context__ref)) us_rep2
  (skein_512_context__content a))

(declare-const ctx us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const hash__first unsigned_64)

(declare-const hash__last unsigned_64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort output_byte_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS8 (_ BitVec 64))

(define-fun in_range7 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 1) x)
                                               (bvule x ((_ int2bv 64) 2305843009213693951))))

(define-fun in_range_int5 ((x Int)) Bool (and (<= 1 x)
                                         (<= x 2305843009213693951)))

(declare-fun attr__ATTRIBUTE_IMAGE12 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) (_ BitVec 64))

(declare-fun user_eq17 (output_byte_count_t output_byte_count_t) Bool)

(declare-const dummy17 output_byte_count_t)

(declare-datatypes ()
((output_byte_count_t__ref
 (mk_output_byte_count_t__ref
 (output_byte_count_t__content output_byte_count_t)))))
(define-fun output_byte_count_t__ref___projection ((a output_byte_count_t__ref)) output_byte_count_t
  (output_byte_count_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_671 (_ BitVec 64))
  (temp___is_init_668 Bool) (temp___skip_constant_669 Bool)
  (temp___do_toplevel_670 Bool)) Bool (=>
                                      (or (= temp___is_init_668 true)
                                      (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 2305843009213693951)))
                                      (in_range7 temp___expr_671)))

(declare-sort output_block_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS9 (_ BitVec 64))

(define-fun in_range8 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 36028797018963968))))

(define-fun in_range_int6 ((x Int)) Bool (and (<= 0 x)
                                         (<= x 36028797018963968)))

(declare-fun attr__ATTRIBUTE_IMAGE13 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) (_ BitVec 64))

(declare-fun user_eq18 (output_block_count_t output_block_count_t) Bool)

(declare-const dummy18 output_block_count_t)

(declare-datatypes ()
((output_block_count_t__ref
 (mk_output_block_count_t__ref
 (output_block_count_t__content output_block_count_t)))))
(define-fun output_block_count_t__ref___projection ((a output_block_count_t__ref)) output_block_count_t
  (output_block_count_t__content a))

(define-fun dynamic_invariant3 ((temp___expr_677 (_ BitVec 64))
  (temp___is_init_674 Bool) (temp___skip_constant_675 Bool)
  (temp___do_toplevel_676 Bool)) Bool (=>
                                      (or (= temp___is_init_674 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 36028797018963968)))
                                      (in_range8 temp___expr_677)))

(declare-sort positive_output_block_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS10 (_ BitVec 64))

(define-fun in_range9 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 1) x)
                                               (bvule x ((_ int2bv 64) 36028797018963968))))

(define-fun in_range_int7 ((x Int)) Bool (and (<= 1 x)
                                         (<= x 36028797018963968)))

(declare-fun attr__ATTRIBUTE_IMAGE14 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) (_ BitVec 64))

(declare-fun user_eq19 (positive_output_block_count_t
  positive_output_block_count_t) Bool)

(declare-const dummy19 positive_output_block_count_t)

(declare-datatypes ()
((positive_output_block_count_t__ref
 (mk_positive_output_block_count_t__ref
 (positive_output_block_count_t__content positive_output_block_count_t)))))
(define-fun positive_output_block_count_t__ref___projection ((a positive_output_block_count_t__ref)) positive_output_block_count_t
  (positive_output_block_count_t__content a))

(define-fun dynamic_invariant4 ((temp___expr_683 (_ BitVec 64))
  (temp___is_init_680 Bool) (temp___skip_constant_681 Bool)
  (temp___do_toplevel_682 Bool)) Bool (=>
                                      (or (= temp___is_init_680 true)
                                      (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 36028797018963968)))
                                      (in_range9 temp___expr_683)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_MODULUS11 (_ BitVec 64))

(define-fun dynamic_property1 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE15 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) (_ BitVec 64))

(declare-fun user_eq20 (unsigned_64 unsigned_64) Bool)

(declare-const dummy20 unsigned_64)

(declare-datatypes ()
((t11b__ref (mk_t11b__ref (t11b__content unsigned_64)))))
(define-fun t11b__ref___projection ((a t11b__ref)) unsigned_64 (t11b__content
                                                               a))

(declare-sort t1 0)

(declare-fun first2 (t1) unsigned_64)

(declare-fun last2 (t1) unsigned_64)

(declare-fun mk1 ((_ BitVec 64) (_ BitVec 64)) t1)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (=> (bvule low high)
                             (and (dynamic_property1 range_first range_last
                             low) (dynamic_property1 range_first range_last
                             high))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array (_ BitVec 64) byte))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 64) byte) (elts1 a))

(define-fun of_array1 ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) (_ BitVec 64) (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) (_ BitVec 64) (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a))
                                    (+ (- (bv2nat (last3 a)) (bv2nat
                                    (first3 a))) 1) 0))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq6 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq21 (us_t1 us_t1) Bool)

(declare-const dummy21 us_t1)

(declare-datatypes () ((t12b__ref (mk_t12b__ref (t12b__content us_t1)))))
(define-fun t12b__ref___projection ((a t12b__ref)) us_t1 (t12b__content a))

(declare-const r14b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c18b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const c20b (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const c26b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const c28b (Array (_ BitVec 64) u64))

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const c29b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-fun temp___691 ((_ BitVec 8) (_ BitVec 64) (_ BitVec 64)) us_t1)

;; def_axiom
  (assert
  (forall ((temp___693 (_ BitVec 8)))
  (forall ((temp___694 (_ BitVec 64)) (temp___695 (_ BitVec 64)))
  (let ((temp___692 (temp___691 temp___693 temp___694 temp___695)))
  (and
  (=> (dynamic_property ((_ int2bv 64) 0)
  ((_ int2bv 64) 18446744073709551615) temp___694 temp___695)
  (and (= (first3 temp___692) temp___694) (= (last3 temp___692) temp___695)))
  (forall ((temp___696 (_ BitVec 64)))
  (= (select (to_array1 temp___692) temp___696) (of_rep1 temp___693))))))))

(declare-fun temp___712 ((_ BitVec 8)) (Array (_ BitVec 64) byte))

;; def_axiom
  (assert
  (forall ((temp___714 (_ BitVec 8)))
  (forall ((temp___715 (_ BitVec 64)))
  (= (select (temp___712 temp___714) temp___715) (of_rep1 temp___714)))))

(define-fun dynamic_invariant5 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant6 ((temp___expr_270 (_ BitVec 8))
  (temp___is_init_267 Bool) (temp___skip_constant_268 Bool)
  (temp___do_toplevel_269 Bool)) Bool true)

(define-fun dynamic_invariant7 ((temp___expr_276 (_ BitVec 16))
  (temp___is_init_273 Bool) (temp___skip_constant_274 Bool)
  (temp___do_toplevel_275 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_282 (_ BitVec 32))
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)) Bool true)

(define-fun dynamic_invariant9 ((temp___expr_348 us_t)
  (temp___is_init_345 Bool) (temp___skip_constant_346 Bool)
  (temp___do_toplevel_347 Bool)) Bool (=>
                                      (not (= temp___skip_constant_346 true))
                                      (dynamic_property ((_ int2bv 64) 0)
                                      ((_ int2bv 64) 18446744073709551615)
                                      (first1 temp___expr_348)
                                      (last1 temp___expr_348))))

(define-fun dynamic_invariant10 ((temp___expr_460 (_ BitVec 64))
  (temp___is_init_457 Bool) (temp___skip_constant_458 Bool)
  (temp___do_toplevel_459 Bool)) Bool (=>
                                      (or (= temp___is_init_457 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 18446744073709551608)))
                                      (in_range2 temp___expr_460)))

(define-fun dynamic_invariant11 ((temp___expr_472 (_ BitVec 64))
  (temp___is_init_469 Bool) (temp___skip_constant_470 Bool)
  (temp___do_toplevel_471 Bool)) Bool (=>
                                      (or (= temp___is_init_469 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 7)))
                                      (in_range3 temp___expr_472)))

(define-fun dynamic_invariant12 ((temp___expr_493 (_ BitVec 64))
  (temp___is_init_490 Bool) (temp___skip_constant_491 Bool)
  (temp___do_toplevel_492 Bool)) Bool (=>
                                      (or (= temp___is_init_490 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)))
                                      (in_range4 temp___expr_493)))

(define-fun dynamic_invariant13 ((temp___expr_535 (_ BitVec 8))
  (temp___is_init_532 Bool) (temp___skip_constant_533 Bool)
  (temp___do_toplevel_534 Bool)) Bool (=>
                                      (or (= temp___is_init_532 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 127)))
                                      (in_range5 temp___expr_535)))

(define-fun dynamic_invariant14 ((temp___expr_246 (_ BitVec 64))
  (temp___is_init_243 Bool) (temp___skip_constant_244 Bool)
  (temp___do_toplevel_245 Bool)) Bool true)

(declare-const hash (Array (_ BitVec 64) byte))

(declare-const local_ctx__split_fields u64)

(declare-const local_ctx__split_fields1 u32)

(declare-const local_ctx__split_fields2 u16)

(declare-const local_ctx__split_fields3 u7)

(declare-const local_ctx__split_fields4 Bool)

(declare-const local_ctx__split_fields5 u6)

(declare-const local_ctx__split_fields6 Bool)

(declare-const local_ctx__split_fields7 Bool)

(declare-const local_ctx__split_fields8 hash_bit_length)

(declare-const local_ctx__split_fields9 u64)

(declare-const local_ctx__split_fields10 (Array (_ BitVec 64) u64))

(declare-const local_ctx__split_fields11 (Array (_ BitVec 64) byte))

(declare-const blocks_done (_ BitVec 64))

(declare-const blocks_required (_ BitVec 64))

(declare-const byte_count (_ BitVec 64))

(declare-const x (Array (_ BitVec 64) u64))

(declare-const i (_ BitVec 64))

(declare-const temp___698 (Array (_ BitVec 64) byte))

(declare-const temp___6981 t1)

(declare-const temp___699 (Array (_ BitVec 64) byte))

(declare-const temp___6991 t)

(declare-const temp___700 (Array (_ BitVec 64) byte))

(declare-const temp___7001 t)

(declare-const o (Array (_ BitVec 64) byte))

(declare-const temp___708 u64)

(declare-const temp___7081 u32)

(declare-const temp___7082 u16)

(declare-const temp___7083 u7)

(declare-const temp___7084 Bool)

(declare-const temp___7085 u6)

(declare-const temp___7086 Bool)

(declare-const temp___7087 Bool)

(declare-const temp___7088 hash_bit_length)

(declare-const temp___7089 u64)

(declare-const temp___70810 (Array (_ BitVec 64) u64))

(declare-const temp___70811 (Array (_ BitVec 64) byte))

(declare-const o1 byte)

(declare-const o2 (Array (_ BitVec 64) byte))

(declare-const o3 us_split_fields4)

(declare-const temp___707 us_rep2)

(declare-const o4 (_ BitVec 64))

(declare-const o5 byte)

(declare-const o6 (Array (_ BitVec 64) byte))

(declare-const o7 us_split_fields4)

(declare-const temp___720 us_rep2)

(declare-const o8 byte)

(declare-const o9 (Array (_ BitVec 64) byte))

(declare-const o10 us_split_fields4)

(declare-const temp___723 us_rep2)

(declare-const o11 byte)

(declare-const o12 (Array (_ BitVec 64) byte))

(declare-const o13 us_split_fields4)

(declare-const temp___726 us_rep2)

(declare-const i1 (_ BitVec 64))

(declare-const result us_split_fields__ref2)

(declare-const local_ctx__split_fields12 us_split_fields4)

(declare-const result1 map__ref)

(declare-const hash1 (Array (_ BitVec 64) byte))

(declare-const result2 us_split_fields__ref2)

(declare-const local_ctx__split_fields13 us_split_fields4)

(declare-const result3 t__ref3)

(declare-const i2 (_ BitVec 64))

(declare-const local_ctx__split_fields14 us_split_fields4)

(declare-const i3 (_ BitVec 64))

(declare-const result4 us_split_fields__ref2)

(declare-const local_ctx__split_fields15 us_split_fields4)

(declare-const local_ctx__split_fields16 us_split_fields__ref2)

(declare-const i4 t__ref3)

(declare-const local_ctx__split_fields17 us_split_fields4)

(declare-const i5 (_ BitVec 64))

(declare-const local_ctx__split_fields18 us_split_fields__ref2)

(declare-const i6 t__ref3)

(declare-const local_ctx__split_fields19 us_split_fields4)

(declare-const i7 (_ BitVec 64))

(declare-const local_ctx__split_fields20 us_split_fields__ref2)

(declare-const i8 t__ref3)

(declare-const local_ctx__split_fields21 us_split_fields4)

(declare-const i9 (_ BitVec 64))

(declare-const result5 t__ref3)

(declare-const byte_count1 (_ BitVec 64))

(declare-const result6 us_split_fields__ref2)

(declare-const local_ctx__split_fields22 us_split_fields4)

(declare-const result7 map__ref1)

(declare-const x1 (Array (_ BitVec 64) u64))

(declare-const result8 t__ref3)

(declare-const blocks_required1 (_ BitVec 64))

(declare-const result9 t__ref3)

(declare-const blocks_done1 (_ BitVec 64))

(declare-const local_ctx__split_fields23 us_split_fields4)

(declare-const blocks_done2 (_ BitVec 64))

(declare-const result10 us_split_fields__ref2)

(declare-const local_ctx__split_fields24 us_split_fields4)

(declare-const result11 us_split_fields__ref2)

(declare-const local_ctx__split_fields25 us_split_fields4)

(declare-const result12 us_split_fields__ref2)

(declare-const local_ctx__split_fields26 us_split_fields4)

(define-fun i10 () t__ref3 (mk_t__ref3 i))

;; H
  (assert (dynamic_property ((_ int2bv 64) 0)
  ((_ int2bv 64) 18446744073709551615) (to_rep hash__first)
  (to_rep hash__last)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 36028797018963968)) (in_range8
  blocks_done)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 36028797018963968)) (in_range9
  blocks_required)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 2305843009213693951))
  (in_range7 byte_count)))

;; H
  (assert
  (= result (mk___split_fields__ref2
            (mk___split_fields2
            (mk___rep1
            (mk___split_fields1
            (mk___rep
            (mk___split_fields local_ctx__split_fields
            local_ctx__split_fields1 local_ctx__split_fields2
            local_ctx__split_fields3 local_ctx__split_fields4
            local_ctx__split_fields5 local_ctx__split_fields6
            local_ctx__split_fields7)) local_ctx__split_fields8
            local_ctx__split_fields9)) local_ctx__split_fields10
            local_ctx__split_fields11))))

;; H
  (assert (= local_ctx__split_fields12 (us_split_fields5 ctx)))

;; H
  (assert
  (= (to_rep
     (first2
     (rt1
     (temp___691 ((_ int2bv 8) 0) (to_rep hash__first) (to_rep hash__last)))))
  (to_rep hash__first)))

;; H
  (assert
  (= (to_rep
     (last2
     (rt1
     (temp___691 ((_ int2bv 8) 0) (to_rep hash__first) (to_rep hash__last)))))
  (to_rep hash__last)))

;; H
  (assert
  (= (mk___t1 temp___698 temp___6981) (temp___691 ((_ int2bv 8) 0)
                                      (to_rep hash__first)
                                      (to_rep hash__last))))

;; H
  (assert (= temp___698 temp___699))

;; H
  (assert
  (= (mk (to_rep (first2 temp___6981)) (to_rep (last2 temp___6981)))
  temp___6991))

;; H
  (assert
  (= (ite (<= (bv2nat (to_rep (first temp___6991))) (bv2nat (to_rep
                                                            (last
                                                            temp___6991))))
     (+ (- (bv2nat (to_rep (last temp___6991))) (bv2nat (to_rep
                                                        (first temp___6991)))) 1)
     0) (ite (<= (bv2nat (to_rep hash__first)) (bv2nat (to_rep hash__last)))
        (+ (- (bv2nat (to_rep hash__last)) (bv2nat (to_rep hash__first))) 1)
        0)))

;; H
  (assert
  (= (mk___t temp___700 temp___7001) (mk___t temp___699 temp___6991)))

;; H
  (assert
  (= o (slide temp___700 (to_rep (first temp___7001)) (to_rep hash__first))))

;; H
  (assert (= result1 (mk_map__ref hash)))

;; H
  (assert (= hash1 o))

;; H
  (assert (= result2 (mk___split_fields__ref2 local_ctx__split_fields12)))

;; H
  (assert
  (= local_ctx__split_fields13 (mk___split_fields2
                               (mk___rep1
                               (mk___split_fields1
                               (mk___rep
                               (mk___split_fields
                               (rec__skein__tweak_value__byte_count_lsb
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__tweak_value__byte_count_msb
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__tweak_value__reserved
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__tweak_value__tree_level
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__tweak_value__bit_pad
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__tweak_value__field_type
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__tweak_value__first_block
                               (us_split_fields1
                               (rec__skein__context_header__tweak_words
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12))))) (of_int 1)))
                               (rec__skein__context_header__hash_bit_len
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))
                               (rec__skein__context_header__byte_count
                               (us_split_fields3
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields12)))))
                               (rec__skein__skein_512_context__x
                               local_ctx__split_fields12)
                               (rec__skein__skein_512_context__b
                               local_ctx__split_fields12))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= (to_rep4
     (rec__skein__context_header__byte_count
     (us_split_fields3
     (rec__skein__skein_512_context__h local_ctx__split_fields13))))
  r14b)))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= result3 i10)))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= i2 r14b)))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= local_ctx__split_fields13 (mk___split_fields2
                               (mk___rep1
                               (mk___split_fields1
                               (mk___rep
                               (mk___split_fields temp___708 temp___7081
                               temp___7082 temp___7083 temp___7084
                               temp___7085 temp___7086 temp___7087))
                               temp___7088 temp___7089)) temp___70810
                               temp___70811)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (and
  (and
  (and
  (= (rec__skein__skein_512_context__h local_ctx__split_fields14) (mk___rep1
                                                                  (mk___split_fields1
                                                                  (mk___rep
                                                                  (mk___split_fields
                                                                  temp___708
                                                                  temp___7081
                                                                  temp___7082
                                                                  temp___7083
                                                                  temp___7084
                                                                  temp___7085
                                                                  temp___7086
                                                                  temp___7087))
                                                                  temp___7088
                                                                  temp___7089)))
  (= (rec__skein__skein_512_context__x local_ctx__split_fields14) temp___70810))
  (forall ((temp___709 (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) temp___709)
  (bvule temp___709 ((_ int2bv 64) 63)))
  (=> (bvule i3 temp___709)
  (= (select (rec__skein__skein_512_context__b local_ctx__split_fields14) temp___709) (select
  temp___70811 temp___709))))))
  (and (bvule r14b i3) (bvule i3 ((_ int2bv 64) 63)))))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= (to_rep1 o1) ((_ int2bv 8) 0)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= o2 (store (rec__skein__skein_512_context__b local_ctx__split_fields14)
  i3 o1)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= o3 (mk___split_fields2
        (rec__skein__skein_512_context__h local_ctx__split_fields14)
        (rec__skein__skein_512_context__x local_ctx__split_fields14)
        o2)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= temp___707 (mk___rep2 o3)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= result4 (mk___split_fields__ref2 local_ctx__split_fields14)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= local_ctx__split_fields15 (us_split_fields5 temp___707)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= i3 ((_ int2bv 64) 63)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= i4 (mk_t__ref3 i3)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= local_ctx__split_fields16 (mk___split_fields__ref2
                               local_ctx__split_fields15)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63))) (= i5 i3))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= local_ctx__split_fields17 local_ctx__split_fields15))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63))) (= i6 i4))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= local_ctx__split_fields18 local_ctx__split_fields16))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63))) (= i7 i5))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))
  (= local_ctx__split_fields19 local_ctx__split_fields17))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (not (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63))))
  (= i6 (mk_t__ref3 i2)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (not (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63))))
  (= local_ctx__split_fields18 (mk___split_fields__ref2
                               local_ctx__split_fields13)))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (not (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63)))) (= i7 i2))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (=> (not (and (bvule r14b i2) (bvule i2 ((_ int2bv 64) 63))))
  (= local_ctx__split_fields19 local_ctx__split_fields13))))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= i8 i6)))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= local_ctx__split_fields20 local_ctx__split_fields18)))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= i9 i7)))

;; H
  (assert
  (=>
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64))
  (= local_ctx__split_fields21 local_ctx__split_fields19)))

;; H
  (assert
  (=>
  (not
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64)))
  (= i8 i10)))

;; H
  (assert
  (=>
  (not
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64)))
  (= local_ctx__split_fields20 (mk___split_fields__ref2
                               local_ctx__split_fields13))))

;; H
  (assert
  (=>
  (not
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64)))
  (= i9 i1)))

;; H
  (assert
  (=>
  (not
  (bvult (to_rep4
         (rec__skein__context_header__byte_count
         (us_split_fields3
         (rec__skein__skein_512_context__h local_ctx__split_fields13)))) ((_ int2bv 64) 64)))
  (= local_ctx__split_fields21 local_ctx__split_fields13)))

;; H
  (assert
  (and
  (= o4 (bvudiv (bvadd (to_rep5
                       (rec__skein__context_header__hash_bit_len
                       (us_split_fields3
                       (rec__skein__skein_512_context__h
                       (us_split_fields__content2 local_ctx__split_fields20))))) ((_ int2bv 64) 7)) ((_ int2bv 64) 8)))
  (in_range7
  (bvudiv (bvadd (to_rep5
                 (rec__skein__context_header__hash_bit_len
                 (us_split_fields3
                 (rec__skein__skein_512_context__h
                 (us_split_fields__content2 local_ctx__split_fields20))))) ((_ int2bv 64) 7)) ((_ int2bv 64) 8)))))

;; H
  (assert (= result5 (mk_t__ref3 byte_count)))

;; H
  (assert (= byte_count1 o4))

;; H
  (assert (= result6 local_ctx__split_fields20))

;; H
  (assert
  (= local_ctx__split_fields22 (mk___split_fields2
                               (rec__skein__skein_512_context__h
                               (us_split_fields__content2
                               local_ctx__split_fields20))
                               (rec__skein__skein_512_context__x
                               (us_split_fields__content2
                               local_ctx__split_fields20))
                               (temp___712 ((_ int2bv 8) 0)))))

;; H
  (assert (= result7 (mk_map__ref1 x)))

;; H
  (assert
  (= x1 (rec__skein__skein_512_context__x local_ctx__split_fields22)))

;; H
  (assert (= result8 (mk_t__ref3 blocks_required)))

;; H
  (assert
  (= blocks_required1 (bvudiv (bvadd byte_count1 ((_ int2bv 64) 63)) ((_ int2bv 64) 64))))

;; H
  (assert (= result9 (mk_t__ref3 blocks_done)))

;; H
  (assert (= blocks_done1 ((_ int2bv 64) 0)))

;; H
  (assert
  (and
  (and
  (= (rec__skein__context_header__hash_bit_len
     (us_split_fields3
     (rec__skein__skein_512_context__h local_ctx__split_fields23))) (rec__skein__context_header__hash_bit_len
                                                                    (us_split_fields3
                                                                    (rec__skein__skein_512_context__h
                                                                    local_ctx__split_fields22))))
  (forall ((temp___759 (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) temp___759)
  (bvule temp___759 ((_ int2bv 64) 63)))
  (=>
  (and (not (= ((_ int2bv 64) 3) temp___759))
  (and (not (= ((_ int2bv 64) 6) temp___759))
  (and (not (= ((_ int2bv 64) 2) temp___759))
  (and (not (= ((_ int2bv 64) 5) temp___759))
  (and (not (= ((_ int2bv 64) 1) temp___759))
  (and (not (= ((_ int2bv 64) 4) temp___759))
  (and (not (= ((_ int2bv 64) 7) temp___759))
  (not (= ((_ int2bv 64) 0) temp___759)))))))))
  (= (select (rec__skein__skein_512_context__b local_ctx__split_fields23) temp___759) (select
  (rec__skein__skein_512_context__b local_ctx__split_fields22) temp___759))))))
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 36028797018963968)) (in_range8
  blocks_done2))))

;; H
  (assert (= blocks_done2 c18b))

;; H
  (assert
  (= (to_rep1 o5) ((_ extract 7 0) (bvand c18b ((_ int2bv 64) 255)))))

;; H
  (assert
  (= o6 (store (rec__skein__skein_512_context__b local_ctx__split_fields23) ((_ int2bv 64) 0)
  o5)))

;; H
  (assert
  (= o7 (mk___split_fields2
        (rec__skein__skein_512_context__h local_ctx__split_fields23)
        (rec__skein__skein_512_context__x local_ctx__split_fields23)
        o6)))

;; H
  (assert (= temp___720 (mk___rep2 o7)))

;; H
  (assert (= result10 (mk___split_fields__ref2 local_ctx__split_fields23)))

;; H
  (assert (= local_ctx__split_fields24 (us_split_fields5 temp___720)))

;; H
  (assert
  (= (to_rep1 o8) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 8)) ((_ int2bv 64) 255)))))

;; H
  (assert
  (= o9 (store (rec__skein__skein_512_context__b local_ctx__split_fields24) ((_ int2bv 64) 1)
  o8)))

;; H
  (assert
  (= o10 (mk___split_fields2
         (rec__skein__skein_512_context__h local_ctx__split_fields24)
         (rec__skein__skein_512_context__x local_ctx__split_fields24)
         o9)))

;; H
  (assert (= temp___723 (mk___rep2 o10)))

;; H
  (assert (= result11 (mk___split_fields__ref2 local_ctx__split_fields24)))

;; H
  (assert (= local_ctx__split_fields25 (us_split_fields5 temp___723)))

;; H
  (assert
  (= (to_rep1 o11) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 16)) ((_ int2bv 64) 255)))))

;; H
  (assert
  (= o12 (store (rec__skein__skein_512_context__b local_ctx__split_fields25) ((_ int2bv 64) 2)
  o11)))

;; H
  (assert
  (= o13 (mk___split_fields2
         (rec__skein__skein_512_context__h local_ctx__split_fields25)
         (rec__skein__skein_512_context__x local_ctx__split_fields25)
         o12)))

;; H
  (assert (= temp___726 (mk___rep2 o13)))

;; H
  (assert (= result12 (mk___split_fields__ref2 local_ctx__split_fields25)))

;; H
  (assert (= local_ctx__split_fields26 (us_split_fields5 temp___726)))

(assert
;; WP_parameter_def
 ;; File "skein.adb", line 21, characters 0-0
  (not
  (bvule ((_ zero_extend 56) ((_ int2bv 8) 0)) (bvand (bvlshr c18b ((_ int2bv 64) 24)) ((_ int2bv 64) 255)))))
(check-sat)
(exit)
