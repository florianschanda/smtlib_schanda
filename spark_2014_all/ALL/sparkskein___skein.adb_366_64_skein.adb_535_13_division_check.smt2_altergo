(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 18446744073709551615)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (64 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  64)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (64 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 64))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 64))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int : t -> int

logic of_int : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  18446744073709551616)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 64)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 18446744073709551615)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t.
  (((tqtint(v1) + tqtint(v2)) <  18446744073709551616) -> (tqtint(add(v1,
  v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  18446744073709551616)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 18446744073709551616)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t.
  (((tqtint(v1) * tqtint(v2)) <  18446744073709551616) -> (tqtint(mul(v1,
  v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 18446744073709551616)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv(x, of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 64)]. (eq_sub(x, y, 0, 64) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type u64

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq1 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq2 : t, t -> bool

axiom bool_eq_def1 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> t

logic user_eq : u64, u64 -> bool

logic dummy : u64

type u64__ref = { u64__content : u64
}

function u64__ref___projection(a: u64__ref) : u64 = (a).u64__content

logic to_rep : u64 -> t

logic of_rep : t -> u64

axiom inversion_axiom : (forall x:u64 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int1(x: u64) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:u64 [to_int1(x)]. uint_in_range(to_int1(x)))

type map__ref = { map__content : (t,u64) farray
}

logic slide : (t,u64) farray, t, t -> (t,u64) farray

axiom slide_eq :
  (forall a:(t,u64) farray.
  (forall first:t [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t,u64) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

logic concat : (t,u64) farray, t, t, (t,u64) farray, t, t -> (t,u64) farray

axiom concat_def :
  (forall a:(t,u64) farray. forall b:(t,u64) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t.
  (forall i:t [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((ule(a_first, i) and ule(i, a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and (ugt(i, a_last) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[add(sub(i, a_last), sub(b_first,
  one))])))))))

logic singleton : u64, t -> (t,u64) farray

axiom singleton_def :
  (forall v:u64.
  (forall i:t [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (t,u64) farray, t, t, (t,u64) farray, t, t -> bool

axiom bool_eq_def2 :
  (forall a:(t,u64) farray. forall a__first:t. forall a__last:t.
  forall b:(t,u64) farray. forall b__first:t. forall b__last:t [bool_eq3(a,
  a__first, a__last, b, b__first, b__last)]. (((((ule(a__first, a__last) and
  (ule(b__first, b__last) and (sub(a__last, a__first) = sub(b__last,
  b__first)))) or ((not ule(a__first, a__last)) and ugt(b__first,
  b__last))) and
  (forall temp___idx_133:t. (((ule(a__first, temp___idx_133) and
  ule(temp___idx_133, a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[add(sub(b__first, a__first),
  temp___idx_133)])))) or (not (ule(a__first, temp___idx_133) and
  ule(temp___idx_133, a__last)))))) -> (bool_eq3(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule(a__first, a__last) ->
  (ule(b__first, b__last) and (sub(a__last, a__first) = sub(b__last,
  b__first)))) and ((not ule(a__first, a__last)) -> ugt(b__first,
  b__last))) and
  (forall temp___idx_133:t. ((ule(a__first, temp___idx_133) and
  ule(temp___idx_133, a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[add(sub(b__first, a__first),
  temp___idx_133)]))))))) -> (bool_eq3(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev :
  (forall a:(t,u64) farray. forall b:(t,u64) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq3(b, b__first, b__last, a, a__first, a__last) = true) ->
  (((ule(a__first, a__last) -> (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) and ((not ule(a__first, a__last)) ->
  ugt(b__first, b__last))) and
  (forall temp___idx_133:t. ((ule(a__first, temp___idx_133) and
  ule(temp___idx_133, a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[add(sub(b__first, a__first),
  temp___idx_133)])))))))))

logic compare : (t,u64) farray, t, t, (t,u64) farray, t, t -> int

axiom compare_def_eq :
  (forall a:(t,u64) farray. forall b:(t,u64) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a, a_first, a_last, b,
  b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(t,u64) farray. forall b:(t,u64) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) <  0) <->
  (exists i:t. exists j:t. (ule(i, a_last) and (ult(j, b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  (ult(i, a_last) and ult(to_rep((a[add(i, one)])), to_rep((b[add(j,
  one)]))))))))))))

axiom compare_def_gt :
  (forall a:(t,u64) farray. forall b:(t,u64) farray.
  (forall a_first:t. forall a_last:t. forall b_first:t. forall b_last:t
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((0 <  compare(a,
  a_first, a_last, b, b_first, b_last)) <->
  (exists i:t. exists j:t. (ule(i, b_last) and (ult(j, a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  (ult(i, b_last) and ugt(to_rep((a[add(j, one)])), to_rep((b[add(i,
  one)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

 (* File "skein.ads", line 361, characters 0-0 *)
goal WP_parameter_def :
  (forall ts:(t,u64) farray. forall ks:(t,u64) farray.
  forall x:(t,u64) farray. forall r:t. forall c179b:t. forall i:t.
  forall o:u64. forall o1:(t,u64) farray. forall o2:u64.
  forall o3:(t,u64) farray. forall o4:u64. forall o5:(t,u64) farray.
  forall o6:u64. forall o7:(t,u64) farray. forall o8:u64.
  forall o9:(t,u64) farray. forall o10:u64. forall o11:(t,u64) farray.
  forall o12:u64. forall o13:(t,u64) farray. forall o14:u64.
  forall o15:(t,u64) farray. forall o16:u64. forall o17:(t,u64) farray.
  forall o18:u64. forall o19:(t,u64) farray. forall o20:u64.
  forall o21:(t,u64) farray. forall o22:u64. forall o23:(t,u64) farray.
  forall o24:u64. forall o25:(t,u64) farray. forall o26:u64.
  forall o27:(t,u64) farray. forall o28:u64. forall o29:(t,u64) farray.
  forall o30:u64. forall o31:(t,u64) farray. forall o32:u64.
  forall o33:(t,u64) farray. forall o34:u64. forall o35:(t,u64) farray.
  forall o36:u64. forall o37:(t,u64) farray. forall o38:u64.
  forall o39:(t,u64) farray. forall o40:u64. forall o41:(t,u64) farray.
  forall o42:u64. forall o43:(t,u64) farray. forall o44:u64.
  forall o45:(t,u64) farray. forall o46:u64. forall o47:(t,u64) farray.
  forall o48:u64. forall o49:(t,u64) farray. forall o50:u64.
  forall o51:(t,u64) farray. forall o52:u64. forall o53:(t,u64) farray.
  forall o54:u64. forall o55:(t,u64) farray. forall o56:u64.
  forall o57:(t,u64) farray. forall o58:u64. forall o59:(t,u64) farray.
  forall o60:u64. forall o61:(t,u64) farray. forall o62:u64.
  forall o63:(t,u64) farray. forall o64:u64. forall o65:(t,u64) farray.
  forall o66:u64. forall o67:(t,u64) farray. forall o68:u64.
  forall o69:(t,u64) farray. forall o70:u64. forall o71:(t,u64) farray.
  forall o72:u64. forall o73:(t,u64) farray. forall o74:u64.
  forall o75:(t,u64) farray. forall o76:u64. forall o77:(t,u64) farray.
  forall o78:u64. forall o79:(t,u64) farray. forall o80:u64.
  forall o81:(t,u64) farray. forall o82:u64. forall o83:(t,u64) farray.
  forall o84:u64. forall o85:(t,u64) farray. forall o86:u64.
  forall o87:(t,u64) farray. forall o88:u64. forall o89:(t,u64) farray.
  forall o90:u64. forall o91:(t,u64) farray. forall o92:u64.
  forall o93:(t,u64) farray. forall o94:u64. forall o95:(t,u64) farray.
  forall o96:u64. forall o97:(t,u64) farray. forall o98:u64.
  forall o99:(t,u64) farray. forall o100:u64. forall o101:(t,u64) farray.
  forall o102:u64. forall o103:(t,u64) farray. forall o104:u64.
  forall o105:(t,u64) farray. forall o106:u64. forall o107:(t,u64) farray.
  forall o108:u64. forall o109:(t,u64) farray. forall o110:u64.
  forall o111:(t,u64) farray. forall o112:u64. forall o113:(t,u64) farray.
  forall result:t. forall r1:t. forall result1:(t,u64) farray.
  forall x1:(t,u64) farray. forall result2:(t,u64) farray.
  forall x2:(t,u64) farray. forall result3:(t,u64) farray.
  forall x3:(t,u64) farray. forall result4:(t,u64) farray.
  forall x4:(t,u64) farray. forall result5:(t,u64) farray.
  forall x5:(t,u64) farray. forall result6:(t,u64) farray.
  forall x6:(t,u64) farray. forall result7:(t,u64) farray.
  forall x7:(t,u64) farray. forall result8:(t,u64) farray.
  forall x8:(t,u64) farray. forall result9:(t,u64) farray.
  forall x9:(t,u64) farray. forall result10:(t,u64) farray.
  forall x10:(t,u64) farray. forall result11:(t,u64) farray.
  forall x11:(t,u64) farray. forall result12:(t,u64) farray.
  forall x12:(t,u64) farray. forall result13:(t,u64) farray.
  forall x13:(t,u64) farray. forall result14:(t,u64) farray.
  forall x14:(t,u64) farray. forall result15:(t,u64) farray.
  forall x15:(t,u64) farray. forall result16:(t,u64) farray.
  forall x16:(t,u64) farray. forall result17:(t,u64) farray.
  forall x17:(t,u64) farray. forall result18:(t,u64) farray.
  forall x18:(t,u64) farray. forall result19:(t,u64) farray.
  forall x19:(t,u64) farray. forall result20:(t,u64) farray.
  forall x20:(t,u64) farray. forall result21:(t,u64) farray.
  forall x21:(t,u64) farray. forall result22:(t,u64) farray.
  forall x22:(t,u64) farray. forall result23:(t,u64) farray.
  forall x23:(t,u64) farray. forall result24:(t,u64) farray.
  forall x24:(t,u64) farray. forall result25:(t,u64) farray.
  forall x25:(t,u64) farray. forall result26:(t,u64) farray.
  forall x26:(t,u64) farray. forall result27:(t,u64) farray.
  forall x27:(t,u64) farray. forall result28:(t,u64) farray.
  forall x28:(t,u64) farray. forall result29:(t,u64) farray.
  forall x29:(t,u64) farray. forall result30:(t,u64) farray.
  forall x30:(t,u64) farray. forall result31:(t,u64) farray.
  forall x31:(t,u64) farray. forall result32:(t,u64) farray.
  forall x32:(t,u64) farray. forall result33:(t,u64) farray.
  forall x33:(t,u64) farray. forall result34:map__ref.
  forall x34:(t,u64) farray. forall result35:map__ref.
  forall x35:(t,u64) farray. forall result36:map__ref.
  forall x36:(t,u64) farray. forall result37:map__ref.
  forall x37:(t,u64) farray. forall result38:map__ref.
  forall x38:(t,u64) farray. forall result39:map__ref.
  forall x39:(t,u64) farray. forall result40:map__ref.
  forall x40:(t,u64) farray. forall result41:map__ref.
  forall x41:(t,u64) farray. forall result42:map__ref.
  forall x42:(t,u64) farray. forall result43:map__ref.
  forall x43:(t,u64) farray. forall result44:map__ref.
  forall x44:(t,u64) farray. forall result45:map__ref.
  forall x45:(t,u64) farray. forall result46:map__ref.
  forall x46:(t,u64) farray. forall result47:map__ref.
  forall x47:(t,u64) farray. forall result48:map__ref.
  forall x48:(t,u64) farray. forall result49:t__ref. forall c179b1:t.
  forall result50:t__ref. forall i1:t. forall result51:map__ref.
  forall x49:(t,u64) farray. forall result52:t__ref. forall i2:t.
  forall result53:map__ref. forall x50:(t,u64) farray.
  forall result54:t__ref. forall i3:t. forall result55:map__ref.
  forall x51:(t,u64) farray. forall result56:t__ref. forall i4:t.
  forall result57:map__ref. forall x52:(t,u64) farray.
  forall result58:t__ref. forall i5:t. forall result59:map__ref.
  forall x53:(t,u64) farray. forall result60:t__ref. forall i6:t.
  forall result61:map__ref. forall x54:(t,u64) farray.
  forall result62:t__ref. forall i7:t. forall result63:map__ref.
  forall x55:(t,u64) farray. forall result64:t__ref. forall i8:t.
  forall result65:map__ref. forall x56:(t,u64) farray.
  forall result66:map__ref. forall x57:(t,u64) farray. (((result = r) and
  (r1 = of_int(1))) -> ((((to_rep(o) = add(to_rep((x[of_int(0)])),
  to_rep((x[of_int(1)])))) and (o1 = (x[of_int(0) <- o]))) and
  ((result1 = x) and (x1 = o1))) ->
  ((((to_rep(o2) = rotate_left_bv(to_rep((x1[of_int(1)])), of_int(46))) and
  (o3 = (x1[of_int(1) <- o2]))) and ((result2 = x1) and (x2 = o3))) ->
  ((((to_rep(o4) = bw_xor(to_rep((x2[of_int(1)])),
  to_rep((x2[of_int(0)])))) and (o5 = (x2[of_int(1) <- o4]))) and
  ((result3 = x2) and (x3 = o5))) ->
  ((((to_rep(o6) = add(to_rep((x3[of_int(2)])), to_rep((x3[of_int(3)])))) and
  (o7 = (x3[of_int(2) <- o6]))) and ((result4 = x3) and (x4 = o7))) ->
  ((((to_rep(o8) = rotate_left_bv(to_rep((x4[of_int(3)])), of_int(36))) and
  (o9 = (x4[of_int(3) <- o8]))) and ((result5 = x4) and (x5 = o9))) ->
  ((((to_rep(o10) = bw_xor(to_rep((x5[of_int(3)])),
  to_rep((x5[of_int(2)])))) and (o11 = (x5[of_int(3) <- o10]))) and
  ((result6 = x5) and (x6 = o11))) ->
  ((((to_rep(o12) = add(to_rep((x6[of_int(4)])),
  to_rep((x6[of_int(5)])))) and (o13 = (x6[of_int(4) <- o12]))) and
  ((result7 = x6) and (x7 = o13))) ->
  ((((to_rep(o14) = rotate_left_bv(to_rep((x7[of_int(5)])), of_int(19))) and
  (o15 = (x7[of_int(5) <- o14]))) and ((result8 = x7) and (x8 = o15))) ->
  ((((to_rep(o16) = bw_xor(to_rep((x8[of_int(5)])),
  to_rep((x8[of_int(4)])))) and (o17 = (x8[of_int(5) <- o16]))) and
  ((result9 = x8) and (x9 = o17))) ->
  ((((to_rep(o18) = add(to_rep((x9[of_int(6)])),
  to_rep((x9[of_int(7)])))) and (o19 = (x9[of_int(6) <- o18]))) and
  ((result10 = x9) and (x10 = o19))) ->
  ((((to_rep(o20) = rotate_left_bv(to_rep((x10[of_int(7)])), of_int(37))) and
  (o21 = (x10[of_int(7) <- o20]))) and ((result11 = x10) and (x11 = o21))) ->
  ((((to_rep(o22) = bw_xor(to_rep((x11[of_int(7)])),
  to_rep((x11[of_int(6)])))) and (o23 = (x11[of_int(7) <- o22]))) and
  ((result12 = x11) and (x12 = o23))) ->
  ((((to_rep(o24) = add(to_rep((x12[of_int(2)])),
  to_rep((x12[of_int(1)])))) and (o25 = (x12[of_int(2) <- o24]))) and
  ((result13 = x12) and (x13 = o25))) ->
  ((((to_rep(o26) = rotate_left_bv(to_rep((x13[of_int(1)])), of_int(33))) and
  (o27 = (x13[of_int(1) <- o26]))) and ((result14 = x13) and (x14 = o27))) ->
  ((((to_rep(o28) = bw_xor(to_rep((x14[of_int(1)])),
  to_rep((x14[of_int(2)])))) and (o29 = (x14[of_int(1) <- o28]))) and
  ((result15 = x14) and (x15 = o29))) ->
  ((((to_rep(o30) = add(to_rep((x15[of_int(4)])),
  to_rep((x15[of_int(7)])))) and (o31 = (x15[of_int(4) <- o30]))) and
  ((result16 = x15) and (x16 = o31))) ->
  ((((to_rep(o32) = rotate_left_bv(to_rep((x16[of_int(7)])), of_int(27))) and
  (o33 = (x16[of_int(7) <- o32]))) and ((result17 = x16) and (x17 = o33))) ->
  ((((to_rep(o34) = bw_xor(to_rep((x17[of_int(7)])),
  to_rep((x17[of_int(4)])))) and (o35 = (x17[of_int(7) <- o34]))) and
  ((result18 = x17) and (x18 = o35))) ->
  ((((to_rep(o36) = add(to_rep((x18[of_int(6)])),
  to_rep((x18[of_int(5)])))) and (o37 = (x18[of_int(6) <- o36]))) and
  ((result19 = x18) and (x19 = o37))) ->
  ((((to_rep(o38) = rotate_left_bv(to_rep((x19[of_int(5)])), of_int(14))) and
  (o39 = (x19[of_int(5) <- o38]))) and ((result20 = x19) and (x20 = o39))) ->
  ((((to_rep(o40) = bw_xor(to_rep((x20[of_int(5)])),
  to_rep((x20[of_int(6)])))) and (o41 = (x20[of_int(5) <- o40]))) and
  ((result21 = x20) and (x21 = o41))) ->
  ((((to_rep(o42) = add(to_rep((x21[of_int(0)])),
  to_rep((x21[of_int(3)])))) and (o43 = (x21[of_int(0) <- o42]))) and
  ((result22 = x21) and (x22 = o43))) ->
  ((((to_rep(o44) = rotate_left_bv(to_rep((x22[of_int(3)])), of_int(42))) and
  (o45 = (x22[of_int(3) <- o44]))) and ((result23 = x22) and (x23 = o45))) ->
  ((((to_rep(o46) = bw_xor(to_rep((x23[of_int(3)])),
  to_rep((x23[of_int(0)])))) and (o47 = (x23[of_int(3) <- o46]))) and
  ((result24 = x23) and (x24 = o47))) ->
  ((((to_rep(o48) = add(to_rep((x24[of_int(4)])),
  to_rep((x24[of_int(1)])))) and (o49 = (x24[of_int(4) <- o48]))) and
  ((result25 = x24) and (x25 = o49))) ->
  ((((to_rep(o50) = rotate_left_bv(to_rep((x25[of_int(1)])), of_int(17))) and
  (o51 = (x25[of_int(1) <- o50]))) and ((result26 = x25) and (x26 = o51))) ->
  ((((to_rep(o52) = bw_xor(to_rep((x26[of_int(1)])),
  to_rep((x26[of_int(4)])))) and (o53 = (x26[of_int(1) <- o52]))) and
  ((result27 = x26) and (x27 = o53))) ->
  ((((to_rep(o54) = add(to_rep((x27[of_int(6)])),
  to_rep((x27[of_int(3)])))) and (o55 = (x27[of_int(6) <- o54]))) and
  ((result28 = x27) and (x28 = o55))) ->
  ((((to_rep(o56) = rotate_left_bv(to_rep((x28[of_int(3)])), of_int(49))) and
  (o57 = (x28[of_int(3) <- o56]))) and ((result29 = x28) and (x29 = o57))) ->
  ((((to_rep(o58) = bw_xor(to_rep((x29[of_int(3)])),
  to_rep((x29[of_int(6)])))) and (o59 = (x29[of_int(3) <- o58]))) and
  ((result30 = x29) and (x30 = o59))) ->
  ((((to_rep(o60) = add(to_rep((x30[of_int(0)])),
  to_rep((x30[of_int(5)])))) and (o61 = (x30[of_int(0) <- o60]))) and
  ((result31 = x30) and (x31 = o61))) ->
  ((((to_rep(o62) = rotate_left_bv(to_rep((x31[of_int(5)])), of_int(36))) and
  (o63 = (x31[of_int(5) <- o62]))) and ((result32 = x31) and (x32 = o63))) ->
  ((((to_rep(o64) = bw_xor(to_rep((x32[of_int(5)])),
  to_rep((x32[of_int(0)])))) and (o65 = (x32[of_int(5) <- o64]))) and
  ((result33 = x32) and (x33 = o65))) ->
  ((((to_rep(o66) = add(to_rep((x33[of_int(2)])),
  to_rep((x33[of_int(7)])))) and (o67 = (x33[of_int(2) <- o66]))) and
  ((result34 = { map__content = x33 }) and (x34 = o67))) ->
  ((((to_rep(o68) = rotate_left_bv(to_rep((x34[of_int(7)])), of_int(39))) and
  (o69 = (x34[of_int(7) <- o68]))) and ((result35 = { map__content = x34
  }) and (x35 = o69))) -> ((((to_rep(o70) = bw_xor(to_rep((x35[of_int(7)])),
  to_rep((x35[of_int(2)])))) and (o71 = (x35[of_int(7) <- o70]))) and
  ((result36 = { map__content = x35 }) and (x36 = o71))) ->
  ((((to_rep(o72) = add(to_rep((x36[of_int(6)])),
  to_rep((x36[of_int(1)])))) and (o73 = (x36[of_int(6) <- o72]))) and
  ((result37 = { map__content = x36 }) and (x37 = o73))) ->
  ((((to_rep(o74) = rotate_left_bv(to_rep((x37[of_int(1)])), of_int(44))) and
  (o75 = (x37[of_int(1) <- o74]))) and ((result38 = { map__content = x37
  }) and (x38 = o75))) -> ((((to_rep(o76) = bw_xor(to_rep((x38[of_int(1)])),
  to_rep((x38[of_int(6)])))) and (o77 = (x38[of_int(1) <- o76]))) and
  ((result39 = { map__content = x38 }) and (x39 = o77))) ->
  ((((to_rep(o78) = add(to_rep((x39[of_int(0)])),
  to_rep((x39[of_int(7)])))) and (o79 = (x39[of_int(0) <- o78]))) and
  ((result40 = { map__content = x39 }) and (x40 = o79))) ->
  ((((to_rep(o80) = rotate_left_bv(to_rep((x40[of_int(7)])), of_int(9))) and
  (o81 = (x40[of_int(7) <- o80]))) and ((result41 = { map__content = x40
  }) and (x41 = o81))) -> ((((to_rep(o82) = bw_xor(to_rep((x41[of_int(7)])),
  to_rep((x41[of_int(0)])))) and (o83 = (x41[of_int(7) <- o82]))) and
  ((result42 = { map__content = x41 }) and (x42 = o83))) ->
  ((((to_rep(o84) = add(to_rep((x42[of_int(2)])),
  to_rep((x42[of_int(5)])))) and (o85 = (x42[of_int(2) <- o84]))) and
  ((result43 = { map__content = x42 }) and (x43 = o85))) ->
  ((((to_rep(o86) = rotate_left_bv(to_rep((x43[of_int(5)])), of_int(54))) and
  (o87 = (x43[of_int(5) <- o86]))) and ((result44 = { map__content = x43
  }) and (x44 = o87))) -> ((((to_rep(o88) = bw_xor(to_rep((x44[of_int(5)])),
  to_rep((x44[of_int(2)])))) and (o89 = (x44[of_int(5) <- o88]))) and
  ((result45 = { map__content = x44 }) and (x45 = o89))) ->
  ((((to_rep(o90) = add(to_rep((x45[of_int(4)])),
  to_rep((x45[of_int(3)])))) and (o91 = (x45[of_int(4) <- o90]))) and
  ((result46 = { map__content = x45 }) and (x46 = o91))) ->
  ((((to_rep(o92) = rotate_left_bv(to_rep((x46[of_int(3)])), of_int(56))) and
  (o93 = (x46[of_int(3) <- o92]))) and ((result47 = { map__content = x46
  }) and (x47 = o93))) -> ((((to_rep(o94) = bw_xor(to_rep((x47[of_int(3)])),
  to_rep((x47[of_int(4)])))) and (o95 = (x47[of_int(3) <- o94]))) and
  ((result48 = { map__content = x47 }) and (x48 = o95))) -> (((result49 = {
  t__content = c179b }) and (c179b1 = sub(mul(r1, of_int(2)), of_int(1)))) ->
  ((((result50 = { t__content = i }) and (i1 = of_int(0))) and
  ((((to_rep(o96) = add(to_rep((x48[i1])), to_rep((ks[urem(add(c179b1, i1),
  of_int(9))])))) and (o97 = (x48[i1 <- o96]))) and ((result51 = {
  map__content = x48 }) and (x49 = o97))) and (((result52 = { t__content = i1
  }) and (i2 = of_int(1))) and ((((to_rep(o98) = add(to_rep((x49[i2])),
  to_rep((ks[urem(add(c179b1, i2), of_int(9))])))) and
  (o99 = (x49[i2 <- o98]))) and ((result53 = { map__content = x49 }) and
  (x50 = o99))) and (((result54 = { t__content = i2 }) and
  (i3 = of_int(2))) and ((((to_rep(o100) = add(to_rep((x50[i3])),
  to_rep((ks[urem(add(c179b1, i3), of_int(9))])))) and
  (o101 = (x50[i3 <- o100]))) and ((result55 = { map__content = x50 }) and
  (x51 = o101))) and (((result56 = { t__content = i3 }) and
  (i4 = of_int(3))) and ((((to_rep(o102) = add(to_rep((x51[i4])),
  to_rep((ks[urem(add(c179b1, i4), of_int(9))])))) and
  (o103 = (x51[i4 <- o102]))) and ((result57 = { map__content = x51 }) and
  (x52 = o103))) and (((result58 = { t__content = i4 }) and
  (i5 = of_int(4))) and ((((to_rep(o104) = add(to_rep((x52[i5])),
  to_rep((ks[urem(add(c179b1, i5), of_int(9))])))) and
  (o105 = (x52[i5 <- o104]))) and ((result59 = { map__content = x52 }) and
  (x53 = o105))) and (((result60 = { t__content = i5 }) and
  (i6 = of_int(5))) and ((((to_rep(o106) = add(to_rep((x53[i6])),
  to_rep((ks[urem(add(c179b1, i6), of_int(9))])))) and
  (o107 = (x53[i6 <- o106]))) and ((result61 = { map__content = x53 }) and
  (x54 = o107))) and (((result62 = { t__content = i6 }) and
  (i7 = of_int(6))) and ((((to_rep(o108) = add(to_rep((x54[i7])),
  to_rep((ks[urem(add(c179b1, i7), of_int(9))])))) and
  (o109 = (x54[i7 <- o108]))) and ((result63 = { map__content = x54 }) and
  (x55 = o109))) and (((result64 = { t__content = i7 }) and
  (i8 = of_int(7))) and (((to_rep(o110) = add(to_rep((x55[i8])),
  to_rep((ks[urem(add(c179b1, i8), of_int(9))])))) and
  (o111 = (x55[i8 <- o110]))) and ((result65 = { map__content = x55 }) and
  (x56 = o111)))))))))))))))))) ->
  ((((to_rep(o112) = add(to_rep((x56[of_int(5)])), to_rep((ts[urem(c179b1,
  of_int(3))])))) and (o113 = (x56[of_int(5) <- o112]))) and ((result66 = {
  map__content = x56 }) and (x57 = o113))) ->
  (not (of_int(3) = zeros)))))))))))))))))))))))))))))))))))))))))))))))))))))))
