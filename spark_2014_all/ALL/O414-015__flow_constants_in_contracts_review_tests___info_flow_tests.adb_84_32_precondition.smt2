;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun f1 (Int) Int)

(declare-fun f1__function_guard (Int Int) Bool)

;; f1__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (dynamic_invariant (f1 x) true
     false true)) :pattern ((f1 x)) )))

;; f1__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (= (f1 x) x)) :pattern (
  (f1 x)) )))

(declare-fun f2 (Int Int) Int)

(declare-fun f2__function_guard (Int Int Int) Bool)

;; f2__post_axiom
  (assert
  (forall ((x Int) (info_flow_tests__test_04__a Int))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant
     info_flow_tests__test_04__a true true true)) (dynamic_invariant
     (f2 x info_flow_tests__test_04__a) true false true)) :pattern ((f2 x
                                                                    info_flow_tests__test_04__a)) )))

;; f2__def_axiom
  (assert
  (forall ((x Int) (info_flow_tests__test_04__a Int))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant
     info_flow_tests__test_04__a true true true))
     (= (f2 x info_flow_tests__test_04__a) (+ info_flow_tests__test_04__a x))) :pattern (
  (f2 x info_flow_tests__test_04__a)) )))

(declare-fun f3 (Int Int) Int)

(declare-fun f3__function_guard (Int Int Int) Bool)

;; f3__post_axiom
  (assert
  (forall ((x Int) (info_flow_tests__test_04__a Int))
  (! (=>
     (and
     (and (dynamic_invariant x true true true) (dynamic_invariant
     info_flow_tests__test_04__a true true true))
     (<= 0 info_flow_tests__test_04__a)) (dynamic_invariant
     (f3 x info_flow_tests__test_04__a) true false true)) :pattern ((f3 x
                                                                    info_flow_tests__test_04__a)) )))

;; f3__def_axiom
  (assert
  (forall ((x Int) (info_flow_tests__test_04__a Int))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant
     info_flow_tests__test_04__a true true true))
     (= (f3 x info_flow_tests__test_04__a) x)) :pattern ((f3 x
                                                         info_flow_tests__test_04__a)) )))

(declare-fun f4 (Int Int) Int)

(declare-fun f4__function_guard (Int Int Int) Bool)

;; f4__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (! (=>
     (and
     (and (dynamic_invariant x true true true) (dynamic_invariant y true true
     true)) (< 0 y))
     (and (< 0 y) (dynamic_invariant (f4 x y) true false true))) :pattern (
  (f4 x y)) )))

;; f4__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant y true true
     true)) (= (f4 x y) x)) :pattern ((f4 x y)) )))

(declare-const c1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const c7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

;; c1__def_axiom
  (assert (= c1 5))

;; c2__def_axiom
  (assert (= c2 (f1 5)))

;; c6__def_axiom
  (assert (= c6 (f4 5 c3)))

;; c7__def_axiom
  (assert (= c7 (f4 c3 c4)))

(declare-const a Int)

(declare-const info_flow_tests__test_04__c2__assume Int)

(declare-const info_flow_tests__test_04__c3__assume Int)

;; H
  (assert (in_range a))

;; H
  (assert (in_range c1))

;; H
  (assert
  (and (= info_flow_tests__test_04__c2__assume (f1 5))
  (and (in_range info_flow_tests__test_04__c2__assume)
  (= info_flow_tests__test_04__c2__assume 5))))

;; H
  (assert (= info_flow_tests__test_04__c2__assume c2))

;; H
  (assert (in_range c2))

;; H
  (assert
  (and (= info_flow_tests__test_04__c3__assume (f2 5 a))
  (and (in_range info_flow_tests__test_04__c3__assume)
  (= info_flow_tests__test_04__c3__assume (+ a 5)))))

;; H
  (assert (= info_flow_tests__test_04__c3__assume c3))

;; H
  (assert (in_range c3))

(assert
;; WP_parameter_def
 ;; File "info_flow_tests.adb", line 53, characters 0-0
  (not (<= 0 a)))
(check-sat)
(exit)
