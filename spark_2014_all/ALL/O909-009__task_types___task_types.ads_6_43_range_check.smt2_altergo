(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__task_types__my_task_type__c : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__task_types__my_task_type__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__task_types__my_task_type : us_main_type
}

function us_split_fields_My_Task_Type__projection(a: us_split_fields) : us_main_type =
  (a).rec__task_types__my_task_type

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep_3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_5__projection(a: us_rep) : bool = (a).attr__constrained

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__size({ us_split_discrs1 = {
  rec__task_types__my_task_type__c = a }; us_split_fields1 = {
  rec__task_types__my_task_type = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__task_types__my_task_type__c = a }; us_split_fields1 = {
  rec__task_types__my_task_type = a1 }; attr__constrained = a2 })))

logic task_types__my_task_type__c__first__bit : int

logic task_types__my_task_type__c__last__bit : int

logic task_types__my_task_type__c__position : int

axiom task_types__my_task_type__c__first__bit_axiom :
  (0 <= task_types__my_task_type__c__first__bit)

axiom task_types__my_task_type__c__last__bit_axiom :
  (task_types__my_task_type__c__first__bit <  task_types__my_task_type__c__last__bit)

axiom task_types__my_task_type__c__position_axiom :
  (0 <= task_types__my_task_type__c__position)

logic user_eq1 : us_rep, us_rep -> bool

type my_task_type__ref = { my_task_type__content : us_rep
}

function my_task_type__ref___projection(a: my_task_type__ref) : us_rep =
  (a).my_task_type__content

type us_split_fields2 = { rec__task_types__my_task_type1 : us_main_type
}

function us_split_fields_My_Task_Type2__projection(a: us_split_fields2) : us_main_type =
  (a).rec__task_types__my_task_type1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__constrained1 : bool
}

function us_rep_6__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep_7__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_8__projection(a: us_rep1) : bool = (a).attr__constrained1

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__task_types__my_task_type =
  ((a).us_split_fields3).rec__task_types__my_task_type1 };
  attr__constrained = (a).attr__constrained1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__task_types__my_task_type1 =
  ((r).us_split_fields1).rec__task_types__my_task_type };
  attr__constrained1 = (r).attr__constrained }

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

predicate in_range1(rec__task_types__my_task_type__c1: int, a: us_rep) =
  (rec__task_types__my_task_type__c1 = to_rep(((a).us_split_discrs1).rec__task_types__my_task_type__c))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__size1({ us_split_discrs2 = {
  rec__task_types__my_task_type__c = a }; us_split_fields3 = {
  rec__task_types__my_task_type1 = a1 }; attr__constrained1 = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs2 = {
  rec__task_types__my_task_type__c = a }; us_split_fields3 = {
  rec__task_types__my_task_type1 = a1 }; attr__constrained1 = a2 })))

logic task_types__my_task_type__c__first__bit1 : int

logic task_types__my_task_type__c__last__bit1 : int

logic task_types__my_task_type__c__position1 : int

axiom task_types__my_task_type__c__first__bit_axiom1 :
  (0 <= task_types__my_task_type__c__first__bit1)

axiom task_types__my_task_type__c__last__bit_axiom1 :
  (task_types__my_task_type__c__first__bit1 <  task_types__my_task_type__c__last__bit1)

axiom task_types__my_task_type__c__position_axiom1 :
  (0 <= task_types__my_task_type__c__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

type s1s__ref = { s1s__content : us_rep1
}

function s1s__ref___projection(a: s1s__ref) : us_rep1 = (a).s1s__content

logic t__split_discrs : natural

logic t__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields4 = { rec__task_types__my_task_type2 : us_main_type
}

function us_split_fields_My_Task_Type3__projection(a: us_split_fields4) : us_main_type =
  (a).rec__task_types__my_task_type2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4; attr__constrained2 : bool
}

function us_rep_9__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep_10__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_11__projection(a: us_rep2) : bool = (a).attr__constrained2

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = { rec__task_types__my_task_type =
  ((a).us_split_fields5).rec__task_types__my_task_type2 };
  attr__constrained = (a).attr__constrained2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = { rec__task_types__my_task_type2 =
  ((r).us_split_fields1).rec__task_types__my_task_type };
  attr__constrained2 = (r).attr__constrained }

predicate in_range2(rec__task_types__my_task_type__c1: int, a: us_rep) =
  (rec__task_types__my_task_type__c1 = to_rep(((a).us_split_discrs1).rec__task_types__my_task_type__c))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__size2({ us_split_discrs3 = {
  rec__task_types__my_task_type__c = a }; us_split_fields5 = {
  rec__task_types__my_task_type2 = a1 }; attr__constrained2 = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs3 = {
  rec__task_types__my_task_type__c = a }; us_split_fields5 = {
  rec__task_types__my_task_type2 = a1 }; attr__constrained2 = a2 })))

logic task_types__my_task_type__c__first__bit2 : int

logic task_types__my_task_type__c__last__bit2 : int

logic task_types__my_task_type__c__position2 : int

axiom task_types__my_task_type__c__first__bit_axiom2 :
  (0 <= task_types__my_task_type__c__first__bit2)

axiom task_types__my_task_type__c__last__bit_axiom2 :
  (task_types__my_task_type__c__first__bit2 <  task_types__my_task_type__c__last__bit2)

axiom task_types__my_task_type__c__position_axiom2 :
  (0 <= task_types__my_task_type__c__position2)

logic user_eq3 : us_rep2, us_rep2 -> bool

type tt2S__ref = { tt2S__content : us_rep2
}

function tt2S__ref___projection(a: tt2S__ref) : us_rep2 = (a).tt2S__content

logic t2__split_discrs : natural

logic t2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "task_types.ads", line 9, characters 0-0 *)
goal WP_parameter_def : in_range(0)
