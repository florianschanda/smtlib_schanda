(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type descriptioni

predicate in_range4(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : descriptioni, descriptioni -> bool

logic dummy5 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___133:int.
  (forall temp___134:int.
  ((audittypes__nodescription__aggregate_def(temp___133)[temp___134]) = of_rep(temp___133))))

logic nouser : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___String_Literal_135 : unit -> (int,character) farray

axiom temp___String_Literal_135__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_135(void)[1])) = 78) and
  (to_rep((temp___String_Literal_135(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_135(void)[3])) = 85)) and
  (to_rep((temp___String_Literal_135(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_135(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_135(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_135(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[31])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[33])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[43])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[44])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[47])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_135(void)[50])) = 32))

type unsigned32t

predicate in_range5(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : unsigned32t, unsigned32t -> bool

logic dummy6 : unsigned32t

type unsigned32t__ref = { unsigned32t__content : unsigned32t
}

function unsigned32t__ref___projection(a: unsigned32t__ref) : unsigned32t =
  (a).unsigned32t__content

logic valid_numberlogentries : us_private -> bool

logic valid_numberlogentries__function_guard : bool, us_private -> prop

type t1

logic tqtint : t1 -> int

axiom tqtaxiom :
  (forall i:t1. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t1, int -> bool

axiom nth_out_of_bound :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t1

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t1

logic ones : t1

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t1, t1 -> t1

axiom Nth_bw_and :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t1, t1 -> t1

axiom Nth_bw_or :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t1, t1 -> t1

axiom Nth_bw_xor :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t1 -> t1

axiom Nth_bw_not :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t1, int -> t1

axiom Lsr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t1. (lsr(x, 0) = x))

logic asr : t1, int -> t1

axiom Asr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t1. (asr(x, 0) = x))

logic lsl : t1, int -> t1

axiom Lsl_nth_high :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t1. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t1, int -> t1

axiom Nth_rotate_right :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t1, int -> t1

axiom Nth_rotate_left :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int1 : t1 -> int

logic of_int1 : int -> t1

axiom to_uint_extensionality :
  (forall v:t1. forall vqt:t1. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t1. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int1(i)) = i)))

logic size_bv : t1

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t1, y: t1) = (tqtint(x) <  tqtint(y))

predicate ule(x: t1, y: t1) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t1, y: t1) = (tqtint(y) <  tqtint(x))

predicate uge(x: t1, y: t1) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

logic add : t1, t1 -> t1

axiom to_uint_add_bounded :
  (forall v1:t1. forall v2:t1. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t1, t1 -> t1

axiom to_uint_sub_bounded :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t1 -> t1

axiom to_uint_neg :
  (forall v:t1. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t1, t1 -> t1

axiom to_uint_mul_bounded :
  (forall v1:t1. forall v2:t1. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t1, t1 -> t1

axiom to_uint_udiv :
  (forall v1:t1. forall v2:t1. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t1, t1 -> t1

axiom to_uint_urem :
  (forall v1:t1. forall v2:t1. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t1, t1 -> t1

axiom lsr_bv_is_lsr :
  (forall x:t1. forall n:t1. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t1. forall n:t1. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t1, t1 -> t1

axiom asr_bv_is_asr :
  (forall x:t1. forall n:t1. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t1, t1 -> t1

axiom lsl_bv_is_lsl :
  (forall x:t1. forall n:t1. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t1. forall n:t1. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t1, t1 -> t1

logic rotate_left_bv : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left :
  (forall v:t1. forall n:t1. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t1. forall n:t1. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t1, t1 -> bool

axiom Nth_bv_is_nth :
  (forall x:t1. forall i:t1. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int1(i)) = nth(x, i))))

logic eq_sub_bv : t1, t1, t1, t1 -> prop

predicate eq_sub(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub(a, b,
  tqtint(i), tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t1. forall y:t1 [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t1
}

logic bool_eq9 : t1, t1 -> bool

axiom bool_eq_def7 :
  (forall x:t1. forall y:t1 [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge1(x, y) = false))))

logic power : t1, int -> t1

axiom Power_01 : (forall x:t1. (power(x, 0) = one))

axiom Power_11 : (forall x:t1. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t1. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t1, t1 -> t1

axiom bv_min_def :
  (forall x:t1. forall y:t1 [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t1, t1 -> t1

axiom bv_max_def :
  (forall x:t1. forall y:t1 [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t1. forall y:t1. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t1. forall y:t1. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

logic to_rep2 : unsigned32t -> int

logic of_rep2 : int -> unsigned32t

axiom inversion_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type namecountt

predicate in_range6(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : namecountt, namecountt -> bool

logic dummy7 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep3 : namecountt -> int

logic of_rep3 : int -> namecountt

axiom inversion_axiom3 :
  (forall x:namecountt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:namecountt [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic dummy8 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range7(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : issueridt, issueridt -> bool

logic dummy9 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep4 : issueridt -> int

logic of_rep4 : int -> issueridt

axiom inversion_axiom4 :
  (forall x:issueridt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:issueridt [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  (((((to_rep4(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep4(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq5(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not (((to_rep4(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep4(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq5(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size2({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment2({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy10 : issueridt

logic dummy11 : namecountt

logic dummy12 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

type maskt

predicate in_range8(x: t1) = (ule(of_int1(0), x) and ule(x, of_int1(15)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 15))

logic bool_eq13 : t1, t1 -> bool

axiom bool_eq_def11 :
  (forall x:t1. forall y:t1 [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t1

logic user_eq10 : maskt, maskt -> bool

logic dummy13 : maskt

type maskt__ref = { maskt__content : maskt
}

function maskt__ref___projection(a: maskt__ref) : maskt = (a).maskt__content

logic to_rep5 : maskt -> t1

logic of_rep5 : t1 -> maskt

axiom inversion_axiom5 :
  (forall x:maskt [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:maskt [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:t1 [to_rep5(of_rep5(x))]. (in_range8(urem(x, of_int1(16))) ->
  (to_rep5(of_rep5(x)) = urem(x, of_int1(16)))))

function to_int2(x: maskt) : int = tqtint(to_rep5(x))

axiom range_int_axiom :
  (forall x:maskt [to_int2(x)]. in_range_int(to_int2(x)))

type us_split_fields2 = { rec__keystore__interfac__keytemplatet__attrmask :
maskt; rec__keystore__interfac__keytemplatet__owner : us_rep;
rec__keystore__interfac__keytemplatet__keyid : unsigned32t;
rec__keystore__interfac__keytemplatet__keylength : unsigned32t;
rec__keystore__interfac__keytemplatet__ispublic : bool
}

function us_split_fields_AttrMask__projection(a: us_split_fields2) : maskt =
  (a).rec__keystore__interfac__keytemplatet__attrmask

function us_split_fields_Owner__projection(a: us_split_fields2) : us_rep =
  (a).rec__keystore__interfac__keytemplatet__owner

function us_split_fields_KeyID__2__projection(a: us_split_fields2) : unsigned32t =
  (a).rec__keystore__interfac__keytemplatet__keyid

function us_split_fields_KeyLength__2__projection(a: us_split_fields2) : unsigned32t =
  (a).rec__keystore__interfac__keytemplatet__keylength

function us_split_fields_IsPublic__projection(a: us_split_fields2) : bool =
  (a).rec__keystore__interfac__keytemplatet__ispublic

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___11__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  (((((((to_rep5(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__attrmask) = to_rep5(((b).us_split_fields3).rec__keystore__interfac__keytemplatet__attrmask)) and
  (bool_eq12(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__owner,
  ((b).us_split_fields3).rec__keystore__interfac__keytemplatet__owner) = true)) and
  (to_rep2(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__keyid) = to_rep2(((b).us_split_fields3).rec__keystore__interfac__keytemplatet__keyid))) and
  (to_rep2(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__keylength) = to_rep2(((b).us_split_fields3).rec__keystore__interfac__keytemplatet__keylength))) and
  (((a).us_split_fields3).rec__keystore__interfac__keytemplatet__ispublic = ((b).us_split_fields3).rec__keystore__interfac__keytemplatet__ispublic)) ->
  (bool_eq14(a, b) = true)) and
  ((not (((((to_rep5(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__attrmask) = to_rep5(((b).us_split_fields3).rec__keystore__interfac__keytemplatet__attrmask)) and
  (bool_eq12(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__owner,
  ((b).us_split_fields3).rec__keystore__interfac__keytemplatet__owner) = true)) and
  (to_rep2(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__keyid) = to_rep2(((b).us_split_fields3).rec__keystore__interfac__keytemplatet__keyid))) and
  (to_rep2(((a).us_split_fields3).rec__keystore__interfac__keytemplatet__keylength) = to_rep2(((b).us_split_fields3).rec__keystore__interfac__keytemplatet__keylength))) and
  (((a).us_split_fields3).rec__keystore__interfac__keytemplatet__ispublic = ((b).us_split_fields3).rec__keystore__interfac__keytemplatet__ispublic))) ->
  (bool_eq14(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:maskt. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. forall a4:unsigned32t.
  forall a5:unsigned32t. forall a6:bool. (0 <= object__size3({
  us_split_fields3 = { rec__keystore__interfac__keytemplatet__attrmask = a;
  rec__keystore__interfac__keytemplatet__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } };
  rec__keystore__interfac__keytemplatet__keyid = a4;
  rec__keystore__interfac__keytemplatet__keylength = a5;
  rec__keystore__interfac__keytemplatet__ispublic = a6 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:maskt. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. forall a4:unsigned32t.
  forall a5:unsigned32t. forall a6:bool. (0 <= object__alignment3({
  us_split_fields3 = { rec__keystore__interfac__keytemplatet__attrmask = a;
  rec__keystore__interfac__keytemplatet__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } };
  rec__keystore__interfac__keytemplatet__keyid = a4;
  rec__keystore__interfac__keytemplatet__keylength = a5;
  rec__keystore__interfac__keytemplatet__ispublic = a6 } })))

logic keystore__interfac__keytemplatet__attrmask__first__bit : int

logic keystore__interfac__keytemplatet__attrmask__last__bit : int

logic keystore__interfac__keytemplatet__attrmask__position : int

axiom keystore__interfac__keytemplatet__attrmask__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__attrmask__first__bit)

axiom keystore__interfac__keytemplatet__attrmask__last__bit_axiom :
  (keystore__interfac__keytemplatet__attrmask__first__bit <  keystore__interfac__keytemplatet__attrmask__last__bit)

axiom keystore__interfac__keytemplatet__attrmask__position_axiom :
  (0 <= keystore__interfac__keytemplatet__attrmask__position)

logic keystore__interfac__keytemplatet__owner__first__bit : int

logic keystore__interfac__keytemplatet__owner__last__bit : int

logic keystore__interfac__keytemplatet__owner__position : int

axiom keystore__interfac__keytemplatet__owner__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__owner__first__bit)

axiom keystore__interfac__keytemplatet__owner__last__bit_axiom :
  (keystore__interfac__keytemplatet__owner__first__bit <  keystore__interfac__keytemplatet__owner__last__bit)

axiom keystore__interfac__keytemplatet__owner__position_axiom :
  (0 <= keystore__interfac__keytemplatet__owner__position)

logic keystore__interfac__keytemplatet__keyid__first__bit : int

logic keystore__interfac__keytemplatet__keyid__last__bit : int

logic keystore__interfac__keytemplatet__keyid__position : int

axiom keystore__interfac__keytemplatet__keyid__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__keyid__first__bit)

axiom keystore__interfac__keytemplatet__keyid__last__bit_axiom :
  (keystore__interfac__keytemplatet__keyid__first__bit <  keystore__interfac__keytemplatet__keyid__last__bit)

axiom keystore__interfac__keytemplatet__keyid__position_axiom :
  (0 <= keystore__interfac__keytemplatet__keyid__position)

logic keystore__interfac__keytemplatet__keylength__first__bit : int

logic keystore__interfac__keytemplatet__keylength__last__bit : int

logic keystore__interfac__keytemplatet__keylength__position : int

axiom keystore__interfac__keytemplatet__keylength__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__keylength__first__bit)

axiom keystore__interfac__keytemplatet__keylength__last__bit_axiom :
  (keystore__interfac__keytemplatet__keylength__first__bit <  keystore__interfac__keytemplatet__keylength__last__bit)

axiom keystore__interfac__keytemplatet__keylength__position_axiom :
  (0 <= keystore__interfac__keytemplatet__keylength__position)

logic keystore__interfac__keytemplatet__ispublic__first__bit : int

logic keystore__interfac__keytemplatet__ispublic__last__bit : int

logic keystore__interfac__keytemplatet__ispublic__position : int

axiom keystore__interfac__keytemplatet__ispublic__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__ispublic__first__bit)

axiom keystore__interfac__keytemplatet__ispublic__last__bit_axiom :
  (keystore__interfac__keytemplatet__ispublic__first__bit <  keystore__interfac__keytemplatet__ispublic__last__bit)

axiom keystore__interfac__keytemplatet__ispublic__position_axiom :
  (0 <= keystore__interfac__keytemplatet__ispublic__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy14 : maskt

logic dummy15 : issueridt

logic dummy16 : namecountt

logic dummy17 : (int,character) farray

logic dummy18 : unsigned32t

logic dummy19 : unsigned32t

logic dummy20 : bool

type keytemplatet__ref = { keytemplatet__content : us_rep1
}

function keytemplatet__ref___projection(a: keytemplatet__ref) : us_rep1 =
  (a).keytemplatet__content

type map__ref1 = { map__content1 : (int,unsigned32t) farray
}

logic slide1 : (int,unsigned32t) farray, int, int -> (int,unsigned32t) farray

axiom slide_eq1 :
  (forall a:(int,unsigned32t) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,unsigned32t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,unsigned32t) farray, int, int, (int,unsigned32t) farray,
  int, int -> (int,unsigned32t) farray

axiom concat_def1 :
  (forall a:(int,unsigned32t) farray. forall b:(int,unsigned32t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : unsigned32t, int -> (int,unsigned32t) farray

axiom singleton_def1 :
  (forall v:unsigned32t.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq15 : (int,unsigned32t) farray, int, int,
  (int,unsigned32t) farray, int, int -> bool

axiom bool_eq_def13 :
  (forall a:(int,unsigned32t) farray. forall a__first:int.
  forall a__last:int. forall b:(int,unsigned32t) farray. forall b__first:int.
  forall b__last:int [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and
  (to_rep2((a[temp___idx_152])) = to_rep2((b[((b__first - a__first) + temp___idx_152)])))) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) ->
  (to_rep2((a[temp___idx_152])) = to_rep2((b[((b__first - a__first) + temp___idx_152)]))))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,unsigned32t) farray. forall b:(int,unsigned32t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) ->
  (to_rep2((a[temp___idx_152])) = to_rep2((b[((b__first - a__first) + temp___idx_152)])))))))))

logic compare1 : (int,unsigned32t) farray, int, int,
  (int,unsigned32t) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,unsigned32t) farray. forall b:(int,unsigned32t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq15(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,unsigned32t) farray. forall b:(int,unsigned32t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq15(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,unsigned32t) farray. forall b:(int,unsigned32t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq15(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

type returnvaluet

predicate in_range9(x: int) = ((0 <= x) and (x <= 28))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : returnvaluet, returnvaluet -> bool

logic dummy21 : returnvaluet

type returnvaluet__ref = { returnvaluet__content : returnvaluet
}

function returnvaluet__ref___projection(a: returnvaluet__ref) : returnvaluet =
  (a).returnvaluet__content

type map__ref2 = { map__content2 : (int,bool) farray
}

logic slide2 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq2 :
  (forall a:(int,bool) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : bool, int -> (int,bool) farray

axiom singleton_def2 :
  (forall v:bool.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq17 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def15 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq17(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. ((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and
  ((a[temp___idx_157]) = (b[((b__first - a__first) + temp___idx_157)]))) or
  (not ((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  ((a[temp___idx_157]) = (b[((b__first - a__first) + temp___idx_157)])))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  ((a[temp___idx_157]) = (b[((b__first - a__first) + temp___idx_157)]))))))))

logic compare2 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq17(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq17(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq17(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic issystem : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic keystore__issystem__aggregate_def : bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> (int,bool) farray

axiom def_axiom1 :
  (forall temp___159:bool. forall temp___160:bool. forall temp___161:bool.
  forall temp___162:bool. forall temp___163:bool. forall temp___164:bool.
  forall temp___165:bool. forall temp___166:bool. forall temp___167:bool.
  forall temp___168:bool. forall temp___169:bool. forall temp___170:bool.
  forall temp___171:bool. forall temp___172:bool. forall temp___173:bool.
  forall temp___174:bool. forall temp___175:bool. forall temp___176:bool.
  forall temp___177:bool. forall temp___178:bool. forall temp___179:bool.
  forall temp___180:bool. forall temp___181:bool. forall temp___182:bool.
  forall temp___183:bool. forall temp___184:bool. forall temp___185:bool.
  forall temp___186:bool. forall temp___187:bool.
  ((((((((((((((((((((((((((((((keystore__issystem__aggregate_def(temp___159,
  temp___160, temp___161, temp___162, temp___163, temp___164, temp___165,
  temp___166, temp___167, temp___168, temp___169, temp___170, temp___171,
  temp___172, temp___173, temp___174, temp___175, temp___176, temp___177,
  temp___178, temp___179, temp___180, temp___181, temp___182, temp___183,
  temp___184, temp___185, temp___186, temp___187)[0]) = temp___159) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[1]) = temp___160)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[2]) = temp___161)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[3]) = temp___162)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[4]) = temp___163)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[5]) = temp___164)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[6]) = temp___165)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[7]) = temp___166)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[8]) = temp___167)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[9]) = temp___168)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[10]) = temp___169)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[11]) = temp___170)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[12]) = temp___171)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[13]) = temp___172)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[14]) = temp___173)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[15]) = temp___174)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[16]) = temp___175)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[17]) = temp___176)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[18]) = temp___177)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[19]) = temp___178)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[20]) = temp___179)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[21]) = temp___180)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[22]) = temp___181)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[23]) = temp___182)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[24]) = temp___183)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[25]) = temp___184)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[26]) = temp___185)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[27]) = temp___186)) and
  ((keystore__issystem__aggregate_def(temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187)[28]) = temp___187)))

logic template : maskt

logic template1 : issueridt

logic template2 : namecountt

logic template3 : (int,character) farray

logic template4 : unsigned32t

logic template5 : unsigned32t

logic template6 : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic c70b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic thestring : (int,character) farray

logic thestring1 : t

logic attr__ATTRIBUTE_ADDRESS12 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : integer, integer -> bool

logic dummy22 : integer

type t76b__ref = { t76b__content : integer
}

function t76b__ref___projection(a: t76b__ref) : integer = (a).t76b__content

type t2

logic first2 : t2 -> integer

logic last2 : t2 -> integer

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq19(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq14 : us_t1, us_t1 -> bool

logic dummy23 : (int,character) farray

logic dummy24 : t2

type t77b__ref = { t77b__content : us_t1
}

function t77b__ref___projection(a: t77b__ref) : us_t1 = (a).t77b__content

logic c82b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic thestring2 : (int,character) farray

logic thestring3 : t

logic attr__ATTRIBUTE_ADDRESS16 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : integer, integer -> bool

logic dummy25 : integer

type t88b__ref = { t88b__content : integer
}

function t88b__ref___projection(a: t88b__ref) : integer = (a).t88b__content

type t3

logic first4 : t3 -> integer

logic last4 : t3 -> integer

logic mk2 : int, int -> t3

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t3
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq21(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq16 : us_t2, us_t2 -> bool

logic dummy26 : (int,character) farray

logic dummy27 : t3

type t89b__ref = { t89b__content : us_t2
}

function t89b__ref___projection(a: t89b__ref) : us_t2 = (a).t89b__content

logic c94b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic thestring4 : (int,character) farray

logic thestring5 : t

logic attr__ATTRIBUTE_ADDRESS20 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq17 : integer, integer -> bool

logic dummy28 : integer

type t100b__ref = { t100b__content : integer
}

function t100b__ref___projection(a: t100b__ref) : integer =
  (a).t100b__content

type t4

logic first6 : t4 -> integer

logic last6 : t4 -> integer

logic mk3 : int, int -> t4

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t4
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,character) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,character) farray. (0 <= object__alignment6(a)))

function bool_eq23(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq18 : us_t3, us_t3 -> bool

logic dummy29 : (int,character) farray

logic dummy30 : t4

type t101b__ref = { t101b__content : us_t3
}

function t101b__ref___projection(a: t101b__ref) : us_t3 = (a).t101b__content

logic temp___1270 : int -> (int,unsigned32t) farray

axiom def_axiom2 :
  (forall temp___1272:int.
  (forall temp___1273:int.
  ((temp___1270(temp___1272)[temp___1273]) = of_rep2(temp___1272))))

logic temp___String_Literal_1274 : unit -> (int,character) farray

axiom temp___String_Literal_1274__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_1274(void)[1])) = 70) and
  (to_rep((temp___String_Literal_1274(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1274(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_1274(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_1274(void)[5])) = 79)) and
  (to_rep((temp___String_Literal_1274(void)[6])) = 98)) and
  (to_rep((temp___String_Literal_1274(void)[7])) = 106)) and
  (to_rep((temp___String_Literal_1274(void)[8])) = 101)) and
  (to_rep((temp___String_Literal_1274(void)[9])) = 99)) and
  (to_rep((temp___String_Literal_1274(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_1274(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_1274(void)[12])) = 73)) and
  (to_rep((temp___String_Literal_1274(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_1274(void)[14])) = 105)) and
  (to_rep((temp___String_Literal_1274(void)[15])) = 116)) and
  (to_rep((temp___String_Literal_1274(void)[16])) = 32))

logic temp___String_Literal_1284 : unit -> (int,character) farray

axiom temp___String_Literal_1284__def_axiom :
  (((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1284(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1284(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1284(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1284(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1284(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1284(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1284(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1284(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1284(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1284(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1284(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1284(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1284(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1284(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1284(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1284(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1284(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1284(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1284(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1284(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1284(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1284(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1284(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1284(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1284(void)[25])) = 70)) and
  (to_rep((temp___String_Literal_1284(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_1284(void)[27])) = 110)) and
  (to_rep((temp___String_Literal_1284(void)[28])) = 100)) and
  (to_rep((temp___String_Literal_1284(void)[29])) = 79)) and
  (to_rep((temp___String_Literal_1284(void)[30])) = 98)) and
  (to_rep((temp___String_Literal_1284(void)[31])) = 106)) and
  (to_rep((temp___String_Literal_1284(void)[32])) = 101)) and
  (to_rep((temp___String_Literal_1284(void)[33])) = 99)) and
  (to_rep((temp___String_Literal_1284(void)[34])) = 116)) and
  (to_rep((temp___String_Literal_1284(void)[35])) = 115)) and
  (to_rep((temp___String_Literal_1284(void)[36])) = 73)) and
  (to_rep((temp___String_Literal_1284(void)[37])) = 110)) and
  (to_rep((temp___String_Literal_1284(void)[38])) = 105)) and
  (to_rep((temp___String_Literal_1284(void)[39])) = 116)) and
  (to_rep((temp___String_Literal_1284(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_1284(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_1284(void)[42])) = 58)) and
  (to_rep((temp___String_Literal_1284(void)[43])) = 32))

logic temp___String_Literal_1287 : unit -> (int,character) farray

axiom temp___String_Literal_1287__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_1287(void)[1])) = 70) and
  (to_rep((temp___String_Literal_1287(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1287(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_1287(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_1287(void)[5])) = 79)) and
  (to_rep((temp___String_Literal_1287(void)[6])) = 98)) and
  (to_rep((temp___String_Literal_1287(void)[7])) = 106)) and
  (to_rep((temp___String_Literal_1287(void)[8])) = 101)) and
  (to_rep((temp___String_Literal_1287(void)[9])) = 99)) and
  (to_rep((temp___String_Literal_1287(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_1287(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_1287(void)[12])) = 32))

logic temp___String_Literal_1297 : unit -> (int,character) farray

axiom temp___String_Literal_1297__def_axiom :
  (((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1297(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1297(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1297(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1297(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1297(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1297(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1297(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1297(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1297(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1297(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1297(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1297(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1297(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1297(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1297(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1297(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1297(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1297(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1297(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1297(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1297(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1297(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1297(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1297(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1297(void)[25])) = 70)) and
  (to_rep((temp___String_Literal_1297(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_1297(void)[27])) = 110)) and
  (to_rep((temp___String_Literal_1297(void)[28])) = 100)) and
  (to_rep((temp___String_Literal_1297(void)[29])) = 79)) and
  (to_rep((temp___String_Literal_1297(void)[30])) = 98)) and
  (to_rep((temp___String_Literal_1297(void)[31])) = 106)) and
  (to_rep((temp___String_Literal_1297(void)[32])) = 101)) and
  (to_rep((temp___String_Literal_1297(void)[33])) = 99)) and
  (to_rep((temp___String_Literal_1297(void)[34])) = 116)) and
  (to_rep((temp___String_Literal_1297(void)[35])) = 115)) and
  (to_rep((temp___String_Literal_1297(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_1297(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_1297(void)[38])) = 58)) and
  (to_rep((temp___String_Literal_1297(void)[39])) = 32))

logic temp___String_Literal_1300 : unit -> (int,character) farray

axiom temp___String_Literal_1300__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_1300(void)[1])) = 70) and
  (to_rep((temp___String_Literal_1300(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1300(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_1300(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_1300(void)[5])) = 79)) and
  (to_rep((temp___String_Literal_1300(void)[6])) = 98)) and
  (to_rep((temp___String_Literal_1300(void)[7])) = 106)) and
  (to_rep((temp___String_Literal_1300(void)[8])) = 101)) and
  (to_rep((temp___String_Literal_1300(void)[9])) = 99)) and
  (to_rep((temp___String_Literal_1300(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_1300(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_1300(void)[12])) = 70)) and
  (to_rep((temp___String_Literal_1300(void)[13])) = 105)) and
  (to_rep((temp___String_Literal_1300(void)[14])) = 110)) and
  (to_rep((temp___String_Literal_1300(void)[15])) = 97)) and
  (to_rep((temp___String_Literal_1300(void)[16])) = 108)) and
  (to_rep((temp___String_Literal_1300(void)[17])) = 32))

logic temp___String_Literal_1310 : unit -> (int,character) farray

axiom temp___String_Literal_1310__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1310(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1310(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1310(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1310(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1310(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1310(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1310(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1310(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1310(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1310(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1310(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1310(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1310(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1310(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1310(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1310(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1310(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1310(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1310(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1310(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1310(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1310(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1310(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1310(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1310(void)[25])) = 70)) and
  (to_rep((temp___String_Literal_1310(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_1310(void)[27])) = 110)) and
  (to_rep((temp___String_Literal_1310(void)[28])) = 100)) and
  (to_rep((temp___String_Literal_1310(void)[29])) = 79)) and
  (to_rep((temp___String_Literal_1310(void)[30])) = 98)) and
  (to_rep((temp___String_Literal_1310(void)[31])) = 106)) and
  (to_rep((temp___String_Literal_1310(void)[32])) = 101)) and
  (to_rep((temp___String_Literal_1310(void)[33])) = 99)) and
  (to_rep((temp___String_Literal_1310(void)[34])) = 116)) and
  (to_rep((temp___String_Literal_1310(void)[35])) = 115)) and
  (to_rep((temp___String_Literal_1310(void)[36])) = 70)) and
  (to_rep((temp___String_Literal_1310(void)[37])) = 105)) and
  (to_rep((temp___String_Literal_1310(void)[38])) = 110)) and
  (to_rep((temp___String_Literal_1310(void)[39])) = 97)) and
  (to_rep((temp___String_Literal_1310(void)[40])) = 108)) and
  (to_rep((temp___String_Literal_1310(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_1310(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_1310(void)[43])) = 58)) and
  (to_rep((temp___String_Literal_1310(void)[44])) = 32))

axiom issystem__def_axiom :
  (issystem = keystore__issystem__aggregate_def(of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(1), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(1), of_int(1)))

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

axiom nouser__def_axiom : (nouser = temp___String_Literal_135(void))

axiom valid_numberlogentries__post_axiom : true

 (* File "keystore-interfac.ads", line 57, characters 0-0 *)
goal WP_parameter_def :
  (forall handlecount:int. forall handles:(int,unsigned32t) farray.
  forall retvalini:int. forall retvaldo:int. forall retvalfin:int.
  forall result__:(int,character) farray. forall o:int. forall o1:int.
  forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall keystore__dofind__B74b__thestring__assume:(int,character) farray.
  forall keystore__dofind__B74b__thestring__assume1:t.
  forall handlecount1:int. forall result:int. forall retvaldo1:int.
  forall result1:int. forall retvalfin1:int.
  forall result2:(int,unsigned32t) farray.
  forall handles1:(int,unsigned32t) farray. forall retvalini1:int.
  forall handlecount2:int. forall handles2:(int,unsigned32t) farray.
  forall retvaldo2:int. forall retvalfin2:int.
  forall result3:(int,character) farray.
  forall result__1:(int,character) farray.
  ((keystore__issystem__aggregate_def(of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1)) = issystem) ->
  ((audittypes__nodescription__aggregate_def(32) = nodescription) ->
  ((temp___String_Literal_135(void) = nouser) -> (in_range5(handlecount) ->
  (((0 <= 28) -> in_range9(retvalini)) -> (((result = retvaldo) and
  (retvaldo1 = 0)) -> (in_range9(retvaldo1) -> (((result1 = retvalfin) and
  (retvalfin1 = 0)) -> (in_range9(retvalfin1) -> (((result2 = handles) and
  (handles1 = temp___1270(0))) -> (in_range9(retvalini1) ->
  ((((retvalini1 = 0) and ((in_range5(handlecount2) and
  in_range9(retvaldo2)) and (((retvalini1 = 0) and in_range9(retvalfin2)) or
  ((not (retvalini1 = 0)) and (retvalfin2 = retvalfin1))))) or
  ((not (retvalini1 = 0)) and (((retvalfin2 = retvalfin1) and
  ((retvaldo2 = retvaldo1) and ((handles2 = handles1) and
  (handlecount2 = handlecount)))) and ((retvalfin2 = retvalfin1) and
  ((retvaldo2 = retvaldo1) and ((handles2 = handles1) and
  (handlecount2 = handlecount1))))))) -> (((issystem[retvalini1]) = true) ->
  (((retvalini1 = c70b) and in_range9(c70b)) -> (((result3 = result__) and
  (result__1 = nodescription)) ->
  ((((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt))) and
  (o = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt)))) and
  (o = 0))) and ((((1 <= 43) and (o1 = ((43 - 1) + 1))) or
  ((not (1 <= 43)) and (o1 = 0))) and (o2 = (o1 + o)))) and
  (o3 = (1 + o2))) and (o4 = (o3 - 1))) and ((o5 = o4) and
  in_range2(o4))) and ((concat(temp___String_Literal_1284(void), 1, 43,
  (to_string(attr__ATTRIBUTE_IMAGE9(c70b))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE9(c70b))).rt))) = keystore__dofind__B74b__thestring__assume) and
  (mk(1, o5) = keystore__dofind__B74b__thestring__assume1))) and
  ((thestring = keystore__dofind__B74b__thestring__assume) and
  (thestring1 = keystore__dofind__B74b__thestring__assume1))) ->
  (dynamic_property(1, 2147483647, to_rep1(first(thestring1)),
  to_rep1(last(thestring1))) -> in_range1(length({ elts = thestring; rt =
  thestring1 }))))))))))))))))))))
