;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-fun nth2 ((_ BitVec 8) Int) Bool)

(declare-fun lsr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right3 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left3 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun to_int4 ((_ BitVec 8)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv2 ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes ((t__ref2 0)) (((mk_t__ref2 (t__content2 (_ BitVec 8))))))
(declare-fun power2 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-const dummy1 unsigned8)

(declare-datatypes ((unsigned8__ref 0))
(((mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int5 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range2
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (unsigned32 unsigned32) Bool)

(declare-const dummy2 unsigned32)

(declare-datatypes ((unsigned32__ref 0))
(((mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant1 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (eax x86__rax)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295))))
     (dynamic_invariant1 result true false true)))) :pattern ((eax x86__rax)) )))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rdx ((_ int2bv 64) 4294967295))))
     (dynamic_invariant1 result true false true)))) :pattern ((edx x86__rdx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rdi ((_ int2bv 64) 4294967295))))
     (dynamic_invariant1 result true false true)))) :pattern ((edi x86__rdi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-fun nth3 ((_ BitVec 16) Int) Bool)

(declare-fun lsr3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right4 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left4 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int6 ((_ BitVec 16)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv3 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes ((t__ref3 0))
(((mk_t__ref3 (t__content3 (_ BitVec 16))))))
(declare-fun power3 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min3 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun readmem16 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 16))

(declare-fun readmem16__function_guard ((_ BitVec 16) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (= result (bvadd ((_ zero_extend 16) (readmem16 addr x86__memory)) (bvmul ((_ zero_extend 16)
     (readmem16 (bvadd addr ((_ int2bv 64) 2)) x86__memory)) ((_ int2bv 32) 65536))))
     (bvuge result ((_ int2bv 32) 0))) (dynamic_invariant1 result true false
     true)))) :pattern ((readmem32 addr x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (= result (bvadd ((_ zero_extend 32) (readmem32 addr x86__memory)) (bvmul ((_ zero_extend 32)
     (readmem32 (bvadd addr ((_ int2bv 64) 4)) x86__memory)) ((_ int2bv 64) 4294967296))))
     (bvuge result ((_ int2bv 64) 0))) (dynamic_invariant result true false
     true)))) :pattern ((readmem64 addr x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned641 unsigned641) Bool)

(declare-const dummy3 unsigned641)

(declare-datatypes ((unsigned64__ref1 0))
(((mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_257 (_ BitVec 64))
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq4 (unsigned16 unsigned16) Bool)

(declare-const dummy4 unsigned16)

(declare-datatypes ((unsigned16__ref 0))
(((mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant3 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

;; readmem16__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem16 addr x86__memory)))
     (and
     (and
     (= result (bvadd ((_ zero_extend 8) (to_rep (select x86__memory addr))) (bvmul ((_ zero_extend 8)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 16) 256))))
     (bvuge result ((_ int2bv 16) 0))) (dynamic_invariant3 result true false
     true)))) :pattern ((readmem16 addr x86__memory)) ))))

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const rax (_ BitVec 64))

(declare-const rdx (_ BitVec 64))

(declare-const rsp (_ BitVec 64))

(declare-const rbp (_ BitVec 64))

(declare-const rsi (_ BitVec 64))

(declare-const rdi (_ BitVec 64))

(declare-const memory (Array (_ BitVec 64) unsigned8))

(declare-const saversp (_ BitVec 64))

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 32))

(declare-const o2 (_ BitVec 32))

(declare-const o3 (_ BitVec 32))

(declare-const o4 (_ BitVec 32))

(declare-const o5 (_ BitVec 32))

(declare-const o6 (_ BitVec 32))

(declare-const o7 (_ BitVec 32))

(declare-const o8 Bool)

(declare-const o9 (_ BitVec 32))

(declare-const o10 (_ BitVec 32))

(declare-const o11 (_ BitVec 32))

(declare-const o12 Bool)

(declare-const o13 (_ BitVec 32))

(declare-const o14 (_ BitVec 32))

(declare-const o15 Bool)

(declare-const o16 (_ BitVec 32))

(declare-const o17 (_ BitVec 32))

(declare-const o18 (_ BitVec 32))

(declare-const o19 (_ BitVec 32))

(declare-const o20 Bool)

(declare-const o21 Bool)

(declare-const o22 Bool)

(declare-const o23 (_ BitVec 32))

(declare-const o24 (_ BitVec 32))

(declare-const o25 (_ BitVec 32))

(declare-const o26 (_ BitVec 32))

(declare-const o27 (_ BitVec 32))

(declare-const o28 (_ BitVec 32))

(declare-const o29 (_ BitVec 32))

(declare-const o30 (_ BitVec 32))

(declare-const o31 (_ BitVec 32))

(declare-const o32 (_ BitVec 32))

(declare-const o33 (_ BitVec 32))

(declare-const o34 (_ BitVec 32))

(declare-const o35 (_ BitVec 32))

(declare-const o36 (_ BitVec 32))

(declare-const o37 (_ BitVec 32))

(declare-const o38 (_ BitVec 32))

(declare-const o39 (_ BitVec 32))

(declare-const o40 (_ BitVec 32))

(declare-const o41 (_ BitVec 32))

(declare-const o42 Bool)

(declare-const o43 (_ BitVec 32))

(declare-const o44 (_ BitVec 32))

(declare-const o45 (_ BitVec 32))

(declare-const o46 Bool)

(declare-const o47 (_ BitVec 32))

(declare-const o48 (_ BitVec 32))

(declare-const o49 Bool)

(declare-const o50 (_ BitVec 32))

(declare-const o51 (_ BitVec 32))

(declare-const o52 (_ BitVec 32))

(declare-const o53 (_ BitVec 32))

(declare-const o54 Bool)

(declare-const o55 Bool)

(declare-const o56 Bool)

(declare-const o57 (_ BitVec 32))

(declare-const o58 (_ BitVec 32))

(declare-const o59 (_ BitVec 32))

(declare-const o60 (_ BitVec 32))

(declare-const o61 (_ BitVec 64))

(declare-const rdx1 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const saversp1 (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const result1 (_ BitVec 64))

(declare-const rsp1 (_ BitVec 64))

(declare-const result2 (_ BitVec 64))

(declare-const rbp1 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const memory3 (Array (_ BitVec 64) unsigned8))

(declare-const rax1 (_ BitVec 64))

(declare-const memory4 (Array (_ BitVec 64) unsigned8))

(declare-const memory5 (Array (_ BitVec 64) unsigned8))

(declare-const memory6 (Array (_ BitVec 64) unsigned8))

(declare-const rax2 (_ BitVec 64))

(declare-const result3 Bool)

(declare-const zeroflag1 Bool)

(declare-const result4 Bool)

(declare-const signflag1 Bool)

(declare-const result5 Bool)

(declare-const carryflag1 Bool)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 Bool)

(declare-const overflowflag1 Bool)

(declare-const rax3 (_ BitVec 64))

(declare-const rax4 (_ BitVec 64))

(declare-const memory7 (Array (_ BitVec 64) unsigned8))

(declare-const rax5 (_ BitVec 64))

(declare-const rax6 (_ BitVec 64))

(declare-const rdx2 (_ BitVec 64))

(declare-const rax7 (_ BitVec 64))

(declare-const rax8 (_ BitVec 64))

(declare-const memory8 (Array (_ BitVec 64) unsigned8))

(declare-const rax9 (_ BitVec 64))

(declare-const result9 Bool)

(declare-const zeroflag2 Bool)

(declare-const result10 Bool)

(declare-const signflag2 Bool)

(declare-const result11 bool__ref)

(declare-const carryflag2 Bool)

(declare-const result12 Bool)

(declare-const result13 Bool)

(declare-const result14 bool__ref)

(declare-const overflowflag2 Bool)

(declare-const rax10 (_ BitVec 64))

(declare-const memory9 (Array (_ BitVec 64) unsigned8))

(declare-const rax11 (_ BitVec 64))

(declare-const result15 t__ref1)

(declare-const rbp2 (_ BitVec 64))

(declare-const result16 t__ref1)

(declare-const rsp2 (_ BitVec 64))

(declare-const result17 t__ref1)

(declare-const rsp3 (_ BitVec 64))

(declare-const zeroflag3 bool__ref)

(declare-const carryflag3 bool__ref)

(declare-const signflag3 bool__ref)

(declare-const overflowflag3 bool__ref)

(declare-const rax12 t__ref1)

(declare-const rdx3 t__ref1)

(declare-const rsp4 t__ref1)

(declare-const rbp3 t__ref1)

(declare-const memory10 map__ref)

(declare-const saversp2 t__ref1)

(declare-const zeroflag4 Bool)

(declare-const carryflag4 Bool)

(declare-const signflag4 Bool)

(declare-const overflowflag4 Bool)

(declare-const rax13 (_ BitVec 64))

(declare-const rdx4 (_ BitVec 64))

(declare-const rsp5 (_ BitVec 64))

(declare-const rbp4 (_ BitVec 64))

(declare-const memory11 (Array (_ BitVec 64) unsigned8))

(declare-const saversp3 (_ BitVec 64))

(define-fun result18 () bool__ref (mk_bool__ref result8))

(define-fun result19 () bool__ref (mk_bool__ref result5))

(define-fun result20 () bool__ref (mk_bool__ref result4))

(define-fun result21 () bool__ref (mk_bool__ref result3))

(define-fun result22 () t__ref1 (mk_t__ref1 result2))

(define-fun result23 () t__ref1 (mk_t__ref1 result1))

(define-fun result24 () t__ref1 (mk_t__ref1 result))

(define-fun saversp4 () t__ref1 (mk_t__ref1 saversp))

(define-fun rbp5 () t__ref1 (mk_t__ref1 rbp))

(define-fun rsp6 () t__ref1 (mk_t__ref1 rsp))

(define-fun overflowflag5 () bool__ref (mk_bool__ref overflowflag))

(define-fun signflag5 () bool__ref (mk_bool__ref signflag))

(define-fun carryflag5 () bool__ref (mk_bool__ref carryflag))

(define-fun zeroflag5 () bool__ref (mk_bool__ref zeroflag))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and
  (and (and (= o rsp) (and (= result24 saversp4) (= saversp1 o)))
  (and
  (and
  (= (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd ((_ zero_extend 56)
  (to_rep (select memory1 (bvsub rsp ((_ int2bv 64) 8))))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory1 (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))
  rbp)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rsp ((_ int2bv 64) 8))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select memory1 i)) (to_rep (select memory i)))))))
  (and (and (= result23 rsp6) (= rsp1 (bvsub rsp ((_ int2bv 64) 8))))
  (and (= rsp1 (bvsub saversp1 ((_ int2bv 64) 8)))
  (and (and (= result22 rbp5) (= rbp1 rsp1))
  (and
  (and
  (and (= o1 (edi rdi))
  (= o1 ((_ extract 31 0) (bvand rdi ((_ int2bv 64) 4294967295)))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory2 (bvsub
                                              rbp1 ((_ int2bv 64) 20))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory2 (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory2 (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory2 (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))
  o1)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 20))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory2 i)) (to_rep (select memory1 i))))))))
  (and
  (and
  (= (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd ((_ zero_extend 56)
  (to_rep (select memory3 (bvsub rbp1 ((_ int2bv 64) 32))))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory3 (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))
  rsi)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 32))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 7)))))
  (= (to_rep (select memory3 i)) (to_rep (select memory2 i)))))))
  (and
  (and
  (and (= o2 (readmem32 (bvsub rbp1 ((_ int2bv 64) 20)) memory3))
  (and
  (= o2 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 20))
                                   memory3)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 20)) ((_ int2bv 64) 2))
  memory3)) ((_ int2bv 32) 65536)))) (bvuge o2 ((_ int2bv 32) 0))))
  (= rax1 (bvor (bvand rax ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o2))))
  (and
  (and
  (and (= o3 (eax rax1))
  (= o3 ((_ extract 31 0) (bvand rax1 ((_ int2bv 64) 4294967295)))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory4 (bvsub
                                              rbp1 ((_ int2bv 64) 8))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory4 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory4 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory4 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))
  o3)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 8))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory4 i)) (to_rep (select memory3 i))))))))
  (and
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory5 (bvsub
                                              rbp1 ((_ int2bv 64) 12))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory5 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory5 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory5 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))) ((_ int2bv 32) 2))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 12))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory5 i)) (to_rep (select memory4 i)))))))
  (and
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory6 (bvsub
                                              rbp1 ((_ int2bv 64) 4))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory6 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory6 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory6 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))) ((_ int2bv 32) 13))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 4))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory6 i)) (to_rep (select memory5 i)))))))
  (and
  (and
  (and (= o4 (readmem32 (bvsub rbp1 ((_ int2bv 64) 8)) memory6))
  (and
  (= o4 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 8))
                                   memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o4 ((_ int2bv 32) 0))))
  (= rax2 (bvor (bvand rax1 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o4))))
  (and
  (and
  (and
  (and
  (and (= o5 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o5 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                   memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o5 ((_ int2bv 32) 0))))
  (and
  (and (= o6 (eax rax2))
  (= o6 ((_ extract 31 0) (bvand rax2 ((_ int2bv 64) 4294967295)))))
  (= o7 (bvsub o6 o5)))) (= o8 (ite (= o7 ((_ int2bv 32) 0)) true false)))
  (and (= result21 zeroflag5) (= zeroflag1 o8)))
  (and
  (and
  (and
  (and
  (and (= o9 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o9 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                   memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o9 ((_ int2bv 32) 0))))
  (and
  (and (= o10 (eax rax2))
  (= o10 ((_ extract 31 0) (bvand rax2 ((_ int2bv 64) 4294967295)))))
  (= o11 (bvsub o10 o9))))
  (= o12 (ite (bvugt o11 ((_ int2bv 32) 2147483647)) true false)))
  (and (= result20 signflag5) (= signflag1 o12)))
  (and
  (and
  (and
  (and (= o13 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o13 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o13 ((_ int2bv 32) 0))))
  (and
  (and (= o14 (eax rax2))
  (= o14 ((_ extract 31 0) (bvand rax2 ((_ int2bv 64) 4294967295)))))
  (= o15 (ite (bvult o14 o13) true false))))
  (and (= result19 carryflag5) (= carryflag1 o15)))
  (and
  (and
  (and
  (and
  (ite (not (= signflag1 true))
  (and
  (and (= o19 (eax rax2))
  (= o19 ((_ extract 31 0) (bvand rax2 ((_ int2bv 64) 4294967295)))))
  (= result6 (ite (bvugt o19 ((_ int2bv 32) 2147483647)) true false)))
  (= result6 false))
  (ite (= result6 true)
  (and
  (and (= o18 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o18 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o18 ((_ int2bv 32) 0))))
  (= o20 (ite (bvule o18 ((_ int2bv 32) 2147483647)) true false)))
  (= o20 false)))
  (and
  (and
  (ite (= signflag1 true)
  (and
  (and (= o17 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o17 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o17 ((_ int2bv 32) 0))))
  (= result7 (ite (bvugt o17 ((_ int2bv 32) 2147483647)) true false)))
  (= result7 false))
  (ite (= result7 true)
  (and
  (and (= o16 (eax rax2))
  (= o16 ((_ extract 31 0) (bvand rax2 ((_ int2bv 64) 4294967295)))))
  (= o21 (ite (bvule o16 ((_ int2bv 32) 2147483647)) true false)))
  (= o21 false))) (= o22 (ite (= o21 false) o20 true))))
  (and (= result18 overflowflag5) (= overflowflag1 o22)))
  (and
  (ite (not (= (to_int3 zeroflag1) (to_int3 overflowflag1)))
  (and
  (and
  (and
  (and (= o23 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o23 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o23 ((_ int2bv 32) 0))))
  (= rax3 (bvor (bvand rax2 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o23))))
  (and
  (and
  (and
  (and (= o24 (readmem32 (bvsub rbp1 ((_ int2bv 64) 8)) memory6))
  (and
  (= o24 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 8))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o24 ((_ int2bv 32) 0))))
  (and
  (and (= o25 (eax rax3))
  (= o25 ((_ extract 31 0) (bvand rax3 ((_ int2bv 64) 4294967295)))))
  (= o26 (bvsub o25 o24))))
  (= rax4 (bvor (bvand rax3 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o26))))
  (and
  (and (= o27 (eax rax4))
  (= o27 ((_ extract 31 0) (bvand rax4 ((_ int2bv 64) 4294967295)))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory7 (bvsub
                                              rbp1 ((_ int2bv 64) 12))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory7 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory7 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory7 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))
  o27)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 12))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory7 i)) (to_rep (select memory6 i))))))))))
  (and (= rdx2 rdx) (= rdx2 rdx1)))
  (and
  (and
  (and
  (and (= o28 (readmem32 (bvsub rbp1 ((_ int2bv 64) 8)) memory6))
  (and
  (= o28 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 8))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o28 ((_ int2bv 32) 0))))
  (= rax5 (bvor (bvand rax2 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o28))))
  (and
  (and
  (and
  (and (= o29 (readmem32 (bvsub rbp1 ((_ int2bv 64) 12)) memory6))
  (and
  (= o29 (bvadd ((_ zero_extend 16) (readmem16
                                    (bvsub rbp1 ((_ int2bv 64) 12)) memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o29 ((_ int2bv 32) 0))))
  (and
  (and (= o30 (eax rax5))
  (= o30 ((_ extract 31 0) (bvand rax5 ((_ int2bv 64) 4294967295)))))
  (= o31 (bvsub o30 o29))))
  (= rax6 (bvor (bvand rax5 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o31))))
  (and
  (and
  (and (= o32 (eax rax6))
  (= o32 ((_ extract 31 0) (bvand rax6 ((_ int2bv 64) 4294967295)))))
  (= rdx2 (bvor (bvand rdx ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o32))))
  (and
  (and
  (and (= o33 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory6))
  (and
  (= o33 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory6)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory6)) ((_ int2bv 32) 65536)))) (bvuge o33 ((_ int2bv 32) 0))))
  (= rax7 (bvor (bvand rax6 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o33))))
  (and
  (and
  (and
  (and (= o34 (edx rdx2))
  (= o34 ((_ extract 31 0) (bvand rdx2 ((_ int2bv 64) 4294967295)))))
  (and
  (and (= o35 (eax rax7))
  (= o35 ((_ extract 31 0) (bvand rax7 ((_ int2bv 64) 4294967295)))))
  (= o36 (bvadd o35 o34))))
  (= rax8 (bvor (bvand rax7 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o36))))
  (and
  (and (= o37 (eax rax8))
  (= o37 ((_ extract 31 0) (bvand rax8 ((_ int2bv 64) 4294967295)))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory8 (bvsub
                                              rbp1 ((_ int2bv 64) 12))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory8 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory8 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory8 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))
  o37)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 12))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory8 i)) (to_rep (select memory6 i)))))))))))))
  (and (= memory7 memory8) (= rax4 rax8))))
  (and
  (and
  (and (= o38 (readmem32 (bvsub rbp1 ((_ int2bv 64) 8)) memory7))
  (and
  (= o38 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 8))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o38 ((_ int2bv 32) 0))))
  (= rax9 (bvor (bvand rax4 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o38))))
  (and
  (and
  (and
  (and
  (and (= o39 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory7))
  (and
  (= o39 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o39 ((_ int2bv 32) 0))))
  (and
  (and (= o40 (eax rax9))
  (= o40 ((_ extract 31 0) (bvand rax9 ((_ int2bv 64) 4294967295)))))
  (= o41 (bvsub o40 o39))))
  (= o42 (ite (= o41 ((_ int2bv 32) 0)) true false)))
  (and (= zeroflag1 result9) (= zeroflag2 o42)))
  (and
  (and
  (and
  (and
  (and (= o43 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory7))
  (and
  (= o43 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o43 ((_ int2bv 32) 0))))
  (and
  (and (= o44 (eax rax9))
  (= o44 ((_ extract 31 0) (bvand rax9 ((_ int2bv 64) 4294967295)))))
  (= o45 (bvsub o44 o43))))
  (= o46 (ite (bvugt o45 ((_ int2bv 32) 2147483647)) true false)))
  (and (= signflag1 result10) (= signflag2 o46)))
  (and
  (and
  (and
  (and (= o47 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory7))
  (and
  (= o47 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o47 ((_ int2bv 32) 0))))
  (and
  (and (= o48 (eax rax9))
  (= o48 ((_ extract 31 0) (bvand rax9 ((_ int2bv 64) 4294967295)))))
  (= o49 (ite (bvult o48 o47) true false))))
  (and (= result11 (mk_bool__ref carryflag1)) (= carryflag2 o49)))
  (and
  (and
  (and
  (and
  (ite (not (= signflag2 true))
  (and
  (and (= o53 (eax rax9))
  (= o53 ((_ extract 31 0) (bvand rax9 ((_ int2bv 64) 4294967295)))))
  (= result12 (ite (bvugt o53 ((_ int2bv 32) 2147483647)) true false)))
  (= result12 false))
  (ite (= result12 true)
  (and
  (and (= o52 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory7))
  (and
  (= o52 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o52 ((_ int2bv 32) 0))))
  (= o54 (ite (bvule o52 ((_ int2bv 32) 2147483647)) true false)))
  (= o54 false)))
  (and
  (and
  (ite (= signflag2 true)
  (and
  (and (= o51 (readmem32 (bvsub rbp1 ((_ int2bv 64) 4)) memory7))
  (and
  (= o51 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 4))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 4)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o51 ((_ int2bv 32) 0))))
  (= result13 (ite (bvugt o51 ((_ int2bv 32) 2147483647)) true false)))
  (= result13 false))
  (ite (= result13 true)
  (and
  (and (= o50 (eax rax9))
  (= o50 ((_ extract 31 0) (bvand rax9 ((_ int2bv 64) 4294967295)))))
  (= o55 (ite (bvule o50 ((_ int2bv 32) 2147483647)) true false)))
  (= o55 false))) (= o56 (ite (= o55 false) o54 true))))
  (and (= result14 (mk_bool__ref overflowflag1)) (= overflowflag2 o56)))
  (and
  (ite (not (= (to_int3 zeroflag2) (to_int3 overflowflag2)))
  (and
  (and
  (and (= o57 (readmem32 (bvsub rbp1 ((_ int2bv 64) 12)) memory7))
  (and
  (= o57 (bvadd ((_ zero_extend 16) (readmem16
                                    (bvsub rbp1 ((_ int2bv 64) 12)) memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 12)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o57 ((_ int2bv 32) 0))))
  (= rax10 (bvor (bvand rax9 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32)
  o57))))
  (and
  (and
  (and (= o58 (eax rax10))
  (= o58 ((_ extract 31 0) (bvand rax10 ((_ int2bv 64) 4294967295)))))
  (and
  (and (= o59 (readmem32 (bvsub rbp1 ((_ int2bv 64) 8)) memory7))
  (and
  (= o59 (bvadd ((_ zero_extend 16) (readmem16 (bvsub rbp1 ((_ int2bv 64) 8))
                                    memory7)) (bvmul ((_ zero_extend 16)
  (readmem16 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))
  memory7)) ((_ int2bv 32) 65536)))) (bvuge o59 ((_ int2bv 32) 0))))
  (= o60 (bvadd o59 o58))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                              (select memory9 (bvsub
                                              rbp1 ((_ int2bv 64) 8))))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory9 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory9 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep
  (select memory9 (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))
  o60)
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 8))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (= (to_rep (select memory9 i)) (to_rep (select memory7 i)))))))))
  (and (= memory9 memory7) (= rax10 rax9)))
  (and
  (= rax11 (bvor (bvand rax10 ((_ int2bv 64) 18446744069414584320)) ((_ zero_extend 32) ((_ int2bv 32) 0))))
  (and (= rsp1 (bvsub saversp1 ((_ int2bv 64) 8)))
  (and
  (and
  (and (= o61 (readmem64 (bvadd rsp1 ((_ int2bv 64) 0)) memory9))
  (and
  (= o61 (bvadd ((_ zero_extend 32) (readmem32 (bvadd rsp1 ((_ int2bv 64) 0))
                                    memory9)) (bvmul ((_ zero_extend 32)
  (readmem32 (bvadd (bvadd rsp1 ((_ int2bv 64) 0)) ((_ int2bv 64) 4))
  memory9)) ((_ int2bv 64) 4294967296)))) (bvuge o61 ((_ int2bv 64) 0))))
  (and (= result15 (mk_t__ref1 rbp1)) (= rbp2 o61)))
  (and
  (and (= result16 (mk_t__ref1 rsp1))
  (= rsp2 (bvadd rsp1 ((_ int2bv 64) 8))))
  (and (= rsp2 (bvadd (bvsub saversp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 8)))
  (and (= rsp2 (bvadd saversp1 ((_ int2bv 64) 0)))
  (and (= rsp2 saversp1)
  (and (= result17 (mk_t__ref1 rsp2))
  (= rsp3 (bvadd rsp2 ((_ int2bv 64) 8))))))))))))))))))))))))))))))))))
  (and
  (and (= saversp2 (mk_t__ref1 saversp1))
  (and (= memory10 (mk_map__ref memory9))
  (and (= rbp3 (mk_t__ref1 rbp2))
  (and (= rsp4 (mk_t__ref1 rsp3))
  (and (= rdx3 (mk_t__ref1 rdx2))
  (and (= rax12 (mk_t__ref1 rax11))
  (and (= overflowflag3 (mk_bool__ref overflowflag2))
  (and (= signflag3 (mk_bool__ref signflag2))
  (and (= carryflag3 (mk_bool__ref carryflag2))
  (= zeroflag3 (mk_bool__ref zeroflag2)))))))))))
  (and (= saversp3 saversp1)
  (and (= memory11 memory9)
  (and (= rbp4 rbp2)
  (and (= rsp5 rsp3)
  (and (= rdx4 rdx2)
  (and (= rax13 rax11)
  (and (= overflowflag4 overflowflag2)
  (and (= signflag4 signflag2)
  (and (= carryflag4 carryflag2) (= zeroflag4 zeroflag2)))))))))))))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 121, characters 0-0
  (not (= (t__content1 rsp4) (bvadd rsp ((_ int2bv 64) 8)))))
(check-sat)
(exit)
