;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-fun dummy1 () unsigned16)

(declare-datatypes ()
((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-fun dummy2 () unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-sort unsigned32 0)

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-fun dummy3 () unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ecx__post_axiom
  (assert
  (forall ((x86__rcx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rcx true true true)
     (let ((result (ecx x86__rcx)))
     (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ecx x86__rcx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true
     false true)))) :pattern ((edx x86__rdx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)

(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 16)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esp__post_axiom
  (assert
  (forall ((x86__rsp (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsp true true true)
     (let ((result (esp x86__rsp)))
     (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true
     false true)))) :pattern ((esp x86__rsp)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__rsi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsi true true true)
     (let ((result (esi x86__rsi)))
     (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true
     false true)))) :pattern ((esi x86__rsi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true
     false true)))) :pattern ((edi x86__rdi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3
     result true false true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant2 result true false true)))) :pattern ((readmem32 addr
                                                              x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-fun attr__ATTRIBUTE_MODULUS4 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-fun dummy4 () unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-sort unsigned81 0)

(declare-fun attr__ATTRIBUTE_MODULUS5 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (unsigned81 unsigned81) Bool)

(declare-fun dummy5 () unsigned81)

(declare-datatypes ()
((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref_2__projection ((a unsigned8__ref1)) unsigned81
  (unsigned8__content1 a))

(define-fun dynamic_invariant5 ((temp___expr_292 (_ BitVec 8))
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool true)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS42 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS43 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS44 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS45 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS46 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS47 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS48 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS49 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS50 () Int)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))

(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)

;; readreg16__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg16 reg)))
     (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg16 reg)) )))

;; writereg16post__post_axiom
  (assert
  (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 16)))
  (! (=>
     (and
     (and (dynamic_invariant regold true true true) (dynamic_invariant regnew
     true true true)) (dynamic_invariant1 val__ true true true))
     (= (= (writereg16post regold regnew val__) true)
     (and (= (readreg16 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080)))))) :pattern (
  (writereg16post regold regnew val__)) ))))

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-fun ds () (_ BitVec 64))

(declare-fun fs () (_ BitVec 64))

(declare-fun gs () (_ BitVec 64))

(declare-fun ss () (_ BitVec 64))

(declare-fun stackaddresssize () (_ BitVec 16))

(declare-fun zeroflag () Bool)

(declare-fun carryflag () Bool)

(declare-fun signflag () Bool)

(declare-fun overflowflag () Bool)

(declare-fun xmm0 () (_ BitVec 64))

(declare-fun xmm1 () (_ BitVec 64))

(declare-fun xmm2 () (_ BitVec 64))

(declare-fun xmm3 () (_ BitVec 64))

(declare-fun xmm4 () (_ BitVec 64))

(declare-fun xmm5 () (_ BitVec 64))

(declare-fun xmm6 () (_ BitVec 64))

(declare-fun xmm7 () (_ BitVec 64))

(declare-fun rax () (_ BitVec 64))

(declare-fun rcx () (_ BitVec 64))

(declare-fun rdx () (_ BitVec 64))

(declare-fun rbx () t__ref3)

(declare-fun rsp () t__ref3)

(declare-fun rbp () t__ref3)

(declare-fun rsi () t__ref3)

(declare-fun rdi () t__ref3)

(declare-fun r8 () t__ref3)

(declare-fun r9 () t__ref3)

(declare-fun r10 () t__ref3)

(declare-fun r11 () t__ref3)

(declare-fun r12 () t__ref3)

(declare-fun r13 () t__ref3)

(declare-fun r14 () t__ref3)

(declare-fun r15 () t__ref3)

(declare-fun memory () map__ref)

(declare-fun dummy_var () t__ref3)

(declare-fun savestackptr () t__ref3)

(declare-fun ra0 () t__ref)

(declare-fun ra1 () t__ref)

(declare-fun ra2 () t__ref)

(declare-fun ra3 () t__ref)

(declare-fun ra4 () t__ref)

(declare-fun ra5 () t__ref)

(declare-fun ra6 () t__ref)

(declare-fun ra7 () t__ref)

(declare-fun saverbx () t__ref3)

(declare-fun saverbp () t__ref3)

(declare-fun saver12 () t__ref3)

(declare-fun saver13 () t__ref3)

(declare-fun saver14 () t__ref3)

(declare-fun saver15 () t__ref3)

(declare-fun o () (_ BitVec 64))

(declare-fun o1 () (_ BitVec 8))

(declare-fun o2 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () (_ BitVec 8))

(declare-fun o5 () (_ BitVec 8))

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () (_ BitVec 8))

(declare-fun o8 () (_ BitVec 8))

(declare-fun o9 () (_ BitVec 8))

(declare-fun o10 () (_ BitVec 8))

(declare-fun o11 () (_ BitVec 8))

(declare-fun o12 () (_ BitVec 8))

(declare-fun o13 () (_ BitVec 8))

(declare-fun o14 () (_ BitVec 8))

(declare-fun o15 () (_ BitVec 8))

(declare-fun o16 () (_ BitVec 8))

(declare-fun o17 () (_ BitVec 64))

(declare-fun o18 () (_ BitVec 64))

(declare-fun o19 () (_ BitVec 64))

(declare-fun o20 () (_ BitVec 64))

(declare-fun o21 () (_ BitVec 64))

(declare-fun o22 () (_ BitVec 64))

(declare-fun o23 () (_ BitVec 64))

(declare-fun o24 () (_ BitVec 64))

(declare-fun o25 () (_ BitVec 64))

(declare-fun o26 () (_ BitVec 64))

(declare-fun o27 () (_ BitVec 32))

(declare-fun o28 () (_ BitVec 32))

(declare-fun o29 () (_ BitVec 64))

(declare-fun o30 () (_ BitVec 32))

(declare-fun o31 () (_ BitVec 32))

(declare-fun o32 () (_ BitVec 32))

(declare-fun o33 () (_ BitVec 32))

(declare-fun o34 () Bool)

(declare-fun o35 () (_ BitVec 32))

(declare-fun o36 () (_ BitVec 32))

(declare-fun o37 () (_ BitVec 32))

(declare-fun o38 () Bool)

(declare-fun o39 () (_ BitVec 64))

(declare-fun o40 () (_ BitVec 64))

(declare-fun o41 () (_ BitVec 64))

(declare-fun o42 () (_ BitVec 64))

(declare-fun o43 () (_ BitVec 32))

(declare-fun o44 () (_ BitVec 32))

(declare-fun o45 () (_ BitVec 64))

(declare-fun o46 () (_ BitVec 32))

(declare-fun o47 () (_ BitVec 32))

(declare-fun o48 () (_ BitVec 32))

(declare-fun o49 () (_ BitVec 32))

(declare-fun o50 () Bool)

(declare-fun o51 () (_ BitVec 32))

(declare-fun o52 () (_ BitVec 32))

(declare-fun o53 () (_ BitVec 32))

(declare-fun o54 () Bool)

(declare-fun o55 () (_ BitVec 64))

(declare-fun o56 () (_ BitVec 64))

(declare-fun o57 () (_ BitVec 64))

(declare-fun o58 () (_ BitVec 64))

(declare-fun o59 () (_ BitVec 32))

(declare-fun o60 () (_ BitVec 32))

(declare-fun o61 () (_ BitVec 64))

(declare-fun o62 () (_ BitVec 32))

(declare-fun o63 () (_ BitVec 32))

(declare-fun o64 () (_ BitVec 32))

(declare-fun o65 () (_ BitVec 32))

(declare-fun o66 () Bool)

(declare-fun o67 () (_ BitVec 32))

(declare-fun o68 () (_ BitVec 32))

(declare-fun o69 () (_ BitVec 32))

(declare-fun o70 () Bool)

(declare-fun o71 () (_ BitVec 64))

(declare-fun o72 () (_ BitVec 64))

(declare-fun o73 () (_ BitVec 64))

(declare-fun o74 () (_ BitVec 32))

(declare-fun o75 () (_ BitVec 32))

(declare-fun o76 () (_ BitVec 64))

(declare-fun o77 () (_ BitVec 32))

(declare-fun o78 () (_ BitVec 32))

(declare-fun o79 () (_ BitVec 32))

(declare-fun o80 () (_ BitVec 32))

(declare-fun o81 () Bool)

(declare-fun o82 () (_ BitVec 32))

(declare-fun o83 () (_ BitVec 32))

(declare-fun o84 () (_ BitVec 32))

(declare-fun o85 () Bool)

(declare-fun o86 () (_ BitVec 64))

(declare-fun o87 () (_ BitVec 32))

(declare-fun o88 () (_ BitVec 32))

(declare-fun o89 () (_ BitVec 64))

(declare-fun o90 () (_ BitVec 32))

(declare-fun o91 () (_ BitVec 32))

(declare-fun o92 () (_ BitVec 64))

(declare-fun o93 () (_ BitVec 32))

(declare-fun o94 () (_ BitVec 64))

(declare-fun o95 () (_ BitVec 64))

(declare-fun o96 () (_ BitVec 64))

(declare-fun o97 () (_ BitVec 64))

(declare-fun o98 () (_ BitVec 64))

(declare-fun o99 () (_ BitVec 64))

(declare-fun result () t__ref3)

(declare-fun savestackptr1 () (_ BitVec 64))

(declare-fun result1 () t__ref)

(declare-fun ra01 () (_ BitVec 8))

(declare-fun result2 () t__ref)

(declare-fun ra11 () (_ BitVec 8))

(declare-fun result3 () t__ref)

(declare-fun ra21 () (_ BitVec 8))

(declare-fun result4 () t__ref)

(declare-fun ra31 () (_ BitVec 8))

(declare-fun result5 () t__ref)

(declare-fun ra41 () (_ BitVec 8))

(declare-fun result6 () t__ref)

(declare-fun ra51 () (_ BitVec 8))

(declare-fun result7 () t__ref)

(declare-fun ra61 () (_ BitVec 8))

(declare-fun result8 () t__ref)

(declare-fun ra71 () (_ BitVec 8))

(declare-fun result9 () t__ref3)

(declare-fun saverbx1 () (_ BitVec 64))

(declare-fun result10 () t__ref3)

(declare-fun saverbp1 () (_ BitVec 64))

(declare-fun result11 () t__ref3)

(declare-fun saver121 () (_ BitVec 64))

(declare-fun result12 () t__ref3)

(declare-fun saver131 () (_ BitVec 64))

(declare-fun result13 () t__ref3)

(declare-fun saver141 () (_ BitVec 64))

(declare-fun result14 () t__ref3)

(declare-fun saver151 () (_ BitVec 64))

(declare-fun memory1 () (Array (_ BitVec 64) unsigned8))

(declare-fun result15 () t__ref3)

(declare-fun rsp1 () (_ BitVec 64))

(declare-fun memory2 () (Array (_ BitVec 64) unsigned8))

(declare-fun result16 () t__ref3)

(declare-fun rsp2 () (_ BitVec 64))

(declare-fun rdi1 () (_ BitVec 64))

(declare-fun memory3 () (Array (_ BitVec 64) unsigned8))

(declare-fun result17 () t__ref3)

(declare-fun rsp3 () (_ BitVec 64))

(declare-fun memory4 () (Array (_ BitVec 64) unsigned8))

(declare-fun result18 () t__ref3)

(declare-fun rsp4 () (_ BitVec 64))

(declare-fun memory5 () (Array (_ BitVec 64) unsigned8))

(declare-fun result19 () t__ref3)

(declare-fun rsp5 () (_ BitVec 64))

(declare-fun memory6 () (Array (_ BitVec 64) unsigned8))

(declare-fun result20 () t__ref3)

(declare-fun rsp6 () (_ BitVec 64))

(declare-fun rbx1 () (_ BitVec 64))

(declare-fun result21 () t__ref3)

(declare-fun rsp7 () (_ BitVec 64))

(declare-fun result22 () t__ref3)

(declare-fun rsp8 () (_ BitVec 64))

(declare-fun rsp9 () (_ BitVec 64))

(declare-fun result23 () t__ref3)

(declare-fun rsi1 () (_ BitVec 64))

(declare-fun result24 () t__ref3)

(declare-fun rdi2 () (_ BitVec 64))

(declare-fun result25 () t__ref3)

(declare-fun rbp1 () (_ BitVec 64))

(declare-fun result26 () t__ref3)

(declare-fun xmm31 () (_ BitVec 64))

(declare-fun result27 () t__ref3)

(declare-fun xmm21 () (_ BitVec 64))

(declare-fun result28 () t__ref3)

(declare-fun xmm11 () (_ BitVec 64))

(declare-fun result29 () t__ref3)

(declare-fun xmm01 () (_ BitVec 64))

(declare-fun result30 () t__ref3)

(declare-fun rsp10 () (_ BitVec 64))

(declare-fun rsp11 () (_ BitVec 64))

(declare-fun rdi3 () (_ BitVec 64))

(declare-fun rax1 () (_ BitVec 64))

(declare-fun result31 () t__ref3)

(declare-fun rsp12 () (_ BitVec 64))

(declare-fun rsp13 () (_ BitVec 64))

(declare-fun rdi4 () (_ BitVec 64))

(declare-fun result32 () bool__ref)

(declare-fun zeroflag1 () Bool)

(declare-fun result33 () bool__ref)

(declare-fun signflag1 () Bool)

(declare-fun result34 () bool__ref)

(declare-fun carryflag1 () Bool)

(declare-fun result35 () bool__ref)

(declare-fun overflowflag1 () Bool)

(declare-fun zeroflag2 () Bool)

(declare-fun carryflag2 () Bool)

(declare-fun signflag2 () Bool)

(declare-fun overflowflag2 () Bool)

(declare-fun xmm02 () (_ BitVec 64))

(declare-fun rax2 () (_ BitVec 64))

(declare-fun rbx2 () (_ BitVec 64))

(declare-fun rsp14 () (_ BitVec 64))

(declare-fun rbp2 () (_ BitVec 64))

(declare-fun rdi5 () (_ BitVec 64))

(declare-fun rdi6 () (_ BitVec 64))

(declare-fun rbx3 () (_ BitVec 64))

(declare-fun result36 () t__ref3)

(declare-fun rbp3 () (_ BitVec 64))

(declare-fun result37 () t__ref3)

(declare-fun rsp15 () (_ BitVec 64))

(declare-fun rsp16 () (_ BitVec 64))

(declare-fun result38 () t__ref3)

(declare-fun rsi2 () (_ BitVec 64))

(declare-fun result39 () t__ref3)

(declare-fun rdi7 () (_ BitVec 64))

(declare-fun result40 () t__ref3)

(declare-fun xmm32 () (_ BitVec 64))

(declare-fun result41 () t__ref3)

(declare-fun xmm22 () (_ BitVec 64))

(declare-fun result42 () t__ref3)

(declare-fun xmm12 () (_ BitVec 64))

(declare-fun result43 () t__ref3)

(declare-fun xmm03 () (_ BitVec 64))

(declare-fun result44 () t__ref3)

(declare-fun rsp17 () (_ BitVec 64))

(declare-fun rsp18 () (_ BitVec 64))

(declare-fun rax3 () (_ BitVec 64))

(declare-fun rdi8 () (_ BitVec 64))

(declare-fun result45 () t__ref3)

(declare-fun rsp19 () (_ BitVec 64))

(declare-fun rsp20 () (_ BitVec 64))

(declare-fun rsi3 () (_ BitVec 64))

(declare-fun result46 () bool__ref)

(declare-fun zeroflag3 () Bool)

(declare-fun result47 () bool__ref)

(declare-fun signflag3 () Bool)

(declare-fun result48 () bool__ref)

(declare-fun carryflag3 () Bool)

(declare-fun result49 () bool__ref)

(declare-fun overflowflag3 () Bool)

(declare-fun zeroflag4 () Bool)

(declare-fun carryflag4 () Bool)

(declare-fun signflag4 () Bool)

(declare-fun overflowflag4 () Bool)

(declare-fun xmm04 () (_ BitVec 64))

(declare-fun rax4 () (_ BitVec 64))

(declare-fun rbx4 () (_ BitVec 64))

(declare-fun rsp21 () (_ BitVec 64))

(declare-fun rbp4 () (_ BitVec 64))

(declare-fun rdi9 () (_ BitVec 64))

(declare-fun rdi10 () (_ BitVec 64))

(declare-fun rbx5 () (_ BitVec 64))

(declare-fun result50 () t__ref3)

(declare-fun rbp5 () (_ BitVec 64))

(declare-fun result51 () t__ref3)

(declare-fun rsp22 () (_ BitVec 64))

(declare-fun rsp23 () (_ BitVec 64))

(declare-fun result52 () t__ref3)

(declare-fun rsi4 () (_ BitVec 64))

(declare-fun result53 () t__ref3)

(declare-fun rdi11 () (_ BitVec 64))

(declare-fun result54 () t__ref3)

(declare-fun xmm33 () (_ BitVec 64))

(declare-fun result55 () t__ref3)

(declare-fun xmm23 () (_ BitVec 64))

(declare-fun result56 () t__ref3)

(declare-fun xmm13 () (_ BitVec 64))

(declare-fun result57 () t__ref3)

(declare-fun xmm05 () (_ BitVec 64))

(declare-fun result58 () t__ref3)

(declare-fun rsp24 () (_ BitVec 64))

(declare-fun rsp25 () (_ BitVec 64))

(declare-fun rax5 () (_ BitVec 64))

(declare-fun rdi12 () (_ BitVec 64))

(declare-fun result59 () t__ref3)

(declare-fun rsp26 () (_ BitVec 64))

(declare-fun rsp27 () (_ BitVec 64))

(declare-fun rcx1 () (_ BitVec 64))

(declare-fun result60 () bool__ref)

(declare-fun zeroflag5 () Bool)

(declare-fun result61 () bool__ref)

(declare-fun signflag5 () Bool)

(declare-fun result62 () bool__ref)

(declare-fun carryflag5 () Bool)

(declare-fun result63 () bool__ref)

(declare-fun overflowflag5 () Bool)

(declare-fun zeroflag6 () Bool)

(declare-fun carryflag6 () Bool)

(declare-fun signflag6 () Bool)

(declare-fun overflowflag6 () Bool)

(declare-fun xmm06 () (_ BitVec 64))

(declare-fun rax6 () (_ BitVec 64))

(declare-fun rbx6 () (_ BitVec 64))

(declare-fun rsp28 () (_ BitVec 64))

(declare-fun rbp6 () (_ BitVec 64))

(declare-fun rdi13 () (_ BitVec 64))

(declare-fun rdi14 () (_ BitVec 64))

(declare-fun rbx7 () (_ BitVec 64))

(declare-fun result64 () t__ref3)

(declare-fun rbp7 () (_ BitVec 64))

(declare-fun result65 () t__ref3)

(declare-fun rsp29 () (_ BitVec 64))

(declare-fun rsp30 () (_ BitVec 64))

(declare-fun result66 () t__ref3)

(declare-fun xmm24 () (_ BitVec 64))

(declare-fun result67 () t__ref3)

(declare-fun rsi5 () (_ BitVec 64))

(declare-fun result68 () t__ref3)

(declare-fun rdi15 () (_ BitVec 64))

(declare-fun result69 () t__ref3)

(declare-fun xmm34 () (_ BitVec 64))

(declare-fun result70 () t__ref3)

(declare-fun xmm14 () (_ BitVec 64))

(declare-fun result71 () t__ref3)

(declare-fun xmm07 () (_ BitVec 64))

(declare-fun result72 () t__ref3)

(declare-fun rsp31 () (_ BitVec 64))

(declare-fun rsp32 () (_ BitVec 64))

(declare-fun rax7 () (_ BitVec 64))

(declare-fun rdi16 () (_ BitVec 64))

(declare-fun result73 () t__ref3)

(declare-fun rsp33 () (_ BitVec 64))

(declare-fun rsp34 () (_ BitVec 64))

(declare-fun rdx1 () (_ BitVec 64))

(declare-fun result74 () bool__ref)

(declare-fun zeroflag7 () Bool)

(declare-fun result75 () bool__ref)

(declare-fun signflag7 () Bool)

(declare-fun result76 () bool__ref)

(declare-fun carryflag7 () Bool)

(declare-fun result77 () bool__ref)

(declare-fun overflowflag7 () Bool)

(declare-fun xmm08 () (_ BitVec 64))

(declare-fun rax8 () (_ BitVec 64))

(declare-fun rbx8 () (_ BitVec 64))

(declare-fun rsp35 () (_ BitVec 64))

(declare-fun rbp8 () (_ BitVec 64))

(declare-fun rdi17 () (_ BitVec 64))

(declare-fun rdi18 () (_ BitVec 64))

(declare-fun result78 () t__ref3)

(declare-fun r151 () (_ BitVec 64))

(declare-fun result79 () t__ref3)

(declare-fun rsp36 () (_ BitVec 64))

(declare-fun rsp37 () (_ BitVec 64))

(declare-fun result80 () t__ref3)

(declare-fun xmm61 () (_ BitVec 64))

(declare-fun memory7 () (Array (_ BitVec 64) unsigned8))

(declare-fun xmm09 () (_ BitVec 64))

(declare-fun xmm15 () (_ BitVec 64))

(declare-fun xmm25 () (_ BitVec 64))

(declare-fun xmm35 () (_ BitVec 64))

(declare-fun xmm41 () (_ BitVec 64))

(declare-fun xmm51 () (_ BitVec 64))

(declare-fun xmm62 () (_ BitVec 64))

(declare-fun xmm71 () (_ BitVec 64))

(declare-fun rax9 () (_ BitVec 64))

(declare-fun rbx9 () (_ BitVec 64))

(declare-fun rsp38 () (_ BitVec 64))

(declare-fun rbp9 () (_ BitVec 64))

(declare-fun rsi6 () (_ BitVec 64))

(declare-fun rdi19 () (_ BitVec 64))

(declare-fun r121 () (_ BitVec 64))

(declare-fun r131 () (_ BitVec 64))

(declare-fun r141 () (_ BitVec 64))

(declare-fun r152 () (_ BitVec 64))

(declare-fun memory8 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdi20 () (_ BitVec 64))

(declare-fun rbx10 () (_ BitVec 64))

(declare-fun rax10 () (_ BitVec 64))

(declare-fun rcx2 () (_ BitVec 64))

(declare-fun rdx2 () (_ BitVec 64))

(declare-fun rbx11 () (_ BitVec 64))

(declare-fun rsp39 () (_ BitVec 64))

(declare-fun rbp10 () (_ BitVec 64))

(declare-fun rsi7 () (_ BitVec 64))

(declare-fun rdi21 () (_ BitVec 64))

(declare-fun r81 () (_ BitVec 64))

(declare-fun memory9 () (Array (_ BitVec 64) unsigned8))

(declare-fun result81 () t__ref3)

(declare-fun rsi8 () (_ BitVec 64))

(declare-fun rdi22 () (_ BitVec 64))

(declare-fun rbx12 () (_ BitVec 64))

(declare-fun result82 () t__ref3)

(declare-fun rsp40 () (_ BitVec 64))

(declare-fun exit_called () Bool)

(declare-fun carryflag8 () Bool)

(declare-fun signflag8 () Bool)

(declare-fun overflowflag8 () Bool)

(declare-fun rax11 () (_ BitVec 64))

(declare-fun rcx3 () (_ BitVec 64))

(declare-fun rdx3 () (_ BitVec 64))

(declare-fun rsp41 () (_ BitVec 64))

(declare-fun rdi23 () (_ BitVec 64))

(declare-fun r82 () (_ BitVec 64))

(declare-fun memory10 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdx4 () (_ BitVec 64))

(declare-fun rsi9 () (_ BitVec 64))

(declare-fun rdi24 () (_ BitVec 64))

(declare-fun rax12 () (_ BitVec 64))

(declare-fun result83 () t__ref3)

(declare-fun rsp42 () (_ BitVec 64))

(declare-fun rsp43 () (_ BitVec 64))

(declare-fun rdi25 () (_ BitVec 64))

(declare-fun result84 () t__ref3)

(declare-fun rsp44 () (_ BitVec 64))

(declare-fun rsp45 () (_ BitVec 64))

(declare-fun result85 () t__ref3)

(declare-fun xmm26 () (_ BitVec 64))

(declare-fun xmm010 () (_ BitVec 64))

(declare-fun xmm16 () (_ BitVec 64))

(declare-fun xmm27 () (_ BitVec 64))

(declare-fun rax13 () (_ BitVec 64))

(declare-fun rbx13 () (_ BitVec 64))

(declare-fun rsp46 () (_ BitVec 64))

(declare-fun rbp11 () (_ BitVec 64))

(declare-fun rdi26 () (_ BitVec 64))

(declare-fun memory11 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdi27 () (_ BitVec 64))

(declare-fun rbx14 () (_ BitVec 64))

(declare-fun result86 () t__ref3)

(declare-fun rsp47 () (_ BitVec 64))

(declare-fun rsp48 () (_ BitVec 64))

(declare-fun result87 () t__ref3)

(declare-fun xmm28 () (_ BitVec 64))

(declare-fun zeroflag8 () Bool)

(declare-fun xmm011 () (_ BitVec 64))

(declare-fun xmm17 () (_ BitVec 64))

(declare-fun xmm29 () (_ BitVec 64))

(declare-fun rax14 () (_ BitVec 64))

(declare-fun rbx15 () (_ BitVec 64))

(declare-fun rsp49 () (_ BitVec 64))

(declare-fun rbp12 () (_ BitVec 64))

(declare-fun rdi28 () (_ BitVec 64))

(declare-fun memory12 () (Array (_ BitVec 64) unsigned8))

(declare-fun result88 () t__ref3)

(declare-fun rsp50 () (_ BitVec 64))

(declare-fun rax15 () (_ BitVec 64))

(declare-fun result89 () t__ref3)

(declare-fun rbx16 () (_ BitVec 64))

(declare-fun result90 () t__ref3)

(declare-fun rsp51 () (_ BitVec 64))

(declare-fun result91 () t__ref3)

(declare-fun rbp13 () (_ BitVec 64))

(declare-fun result92 () t__ref3)

(declare-fun rsp52 () (_ BitVec 64))

(declare-fun result93 () t__ref3)

(declare-fun r122 () (_ BitVec 64))

(declare-fun result94 () t__ref3)

(declare-fun rsp53 () (_ BitVec 64))

(declare-fun result95 () t__ref3)

(declare-fun r132 () (_ BitVec 64))

(declare-fun result96 () t__ref3)

(declare-fun rsp54 () (_ BitVec 64))

(declare-fun result97 () t__ref3)

(declare-fun r142 () (_ BitVec 64))

(declare-fun result98 () t__ref3)

(declare-fun rsp55 () (_ BitVec 64))

(declare-fun result99 () t__ref3)

(declare-fun r153 () (_ BitVec 64))

(declare-fun result100 () t__ref3)

(declare-fun rsp56 () (_ BitVec 64))

(declare-fun result101 () t__ref3)

(declare-fun rsp57 () (_ BitVec 64))

(declare-fun exit_called1 () bool__ref)

(declare-fun zeroflag9 () bool__ref)

(declare-fun carryflag9 () bool__ref)

(declare-fun signflag9 () bool__ref)

(declare-fun overflowflag9 () bool__ref)

(declare-fun xmm012 () t__ref3)

(declare-fun xmm18 () t__ref3)

(declare-fun xmm210 () t__ref3)

(declare-fun xmm36 () t__ref3)

(declare-fun xmm42 () t__ref3)

(declare-fun xmm52 () t__ref3)

(declare-fun xmm63 () t__ref3)

(declare-fun xmm72 () t__ref3)

(declare-fun rax16 () t__ref3)

(declare-fun rcx4 () t__ref3)

(declare-fun rdx5 () t__ref3)

(declare-fun rbx17 () t__ref3)

(declare-fun rsp58 () t__ref3)

(declare-fun rbp14 () t__ref3)

(declare-fun rsi10 () t__ref3)

(declare-fun rdi29 () t__ref3)

(declare-fun r83 () t__ref3)

(declare-fun r123 () t__ref3)

(declare-fun r133 () t__ref3)

(declare-fun r143 () t__ref3)

(declare-fun r154 () t__ref3)

(declare-fun memory13 () map__ref)

(declare-fun savestackptr2 () t__ref3)

(declare-fun ra02 () t__ref)

(declare-fun ra12 () t__ref)

(declare-fun ra22 () t__ref)

(declare-fun ra32 () t__ref)

(declare-fun ra42 () t__ref)

(declare-fun ra52 () t__ref)

(declare-fun ra62 () t__ref)

(declare-fun ra72 () t__ref)

(declare-fun saverbx2 () t__ref3)

(declare-fun saverbp2 () t__ref3)

(declare-fun saver122 () t__ref3)

(declare-fun saver132 () t__ref3)

(declare-fun saver142 () t__ref3)

(declare-fun saver152 () t__ref3)

(declare-fun exit_called2 () Bool)

(declare-fun zeroflag10 () Bool)

(declare-fun carryflag10 () Bool)

(declare-fun signflag10 () Bool)

(declare-fun overflowflag10 () Bool)

(declare-fun xmm013 () (_ BitVec 64))

(declare-fun xmm19 () (_ BitVec 64))

(declare-fun xmm211 () (_ BitVec 64))

(declare-fun xmm37 () (_ BitVec 64))

(declare-fun xmm43 () (_ BitVec 64))

(declare-fun xmm53 () (_ BitVec 64))

(declare-fun xmm64 () (_ BitVec 64))

(declare-fun xmm73 () (_ BitVec 64))

(declare-fun rax17 () (_ BitVec 64))

(declare-fun rcx5 () (_ BitVec 64))

(declare-fun rdx6 () (_ BitVec 64))

(declare-fun rbx18 () (_ BitVec 64))

(declare-fun rsp59 () (_ BitVec 64))

(declare-fun rbp15 () (_ BitVec 64))

(declare-fun rsi11 () (_ BitVec 64))

(declare-fun rdi30 () (_ BitVec 64))

(declare-fun r84 () (_ BitVec 64))

(declare-fun r124 () (_ BitVec 64))

(declare-fun r134 () (_ BitVec 64))

(declare-fun r144 () (_ BitVec 64))

(declare-fun r155 () (_ BitVec 64))

(declare-fun memory14 () (Array (_ BitVec 64) unsigned8))

(declare-fun savestackptr3 () (_ BitVec 64))

(declare-fun ra03 () (_ BitVec 8))

(declare-fun ra13 () (_ BitVec 8))

(declare-fun ra23 () (_ BitVec 8))

(declare-fun ra33 () (_ BitVec 8))

(declare-fun ra43 () (_ BitVec 8))

(declare-fun ra53 () (_ BitVec 8))

(declare-fun ra63 () (_ BitVec 8))

(declare-fun ra73 () (_ BitVec 8))

(declare-fun saverbx3 () (_ BitVec 64))

(declare-fun saverbp3 () (_ BitVec 64))

(declare-fun saver123 () (_ BitVec 64))

(declare-fun saver133 () (_ BitVec 64))

(declare-fun saver143 () (_ BitVec 64))

(declare-fun saver153 () (_ BitVec 64))

(define-fun xmm65 () t__ref3 (mk_t__ref3 xmm6))

(define-fun xmm38 () t__ref3 (mk_t__ref3 xmm3))

(define-fun xmm212 () t__ref3 (mk_t__ref3 xmm2))

(define-fun xmm110 () t__ref3 (mk_t__ref3 xmm1))

(define-fun xmm014 () t__ref3 (mk_t__ref3 xmm0))

(define-fun overflowflag11 () bool__ref (mk_bool__ref overflowflag))

(define-fun signflag11 () bool__ref (mk_bool__ref signflag))

(define-fun carryflag11 () bool__ref (mk_bool__ref carryflag))

(define-fun zeroflag11 () bool__ref (mk_bool__ref zeroflag))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= o (t__content3 rsp)))

;; H
  (assert (= result savestackptr))

;; H
  (assert (= (let ((subject savestackptr)) savestackptr1) o))

;; H
  (assert true)

;; H
  (assert
  (and (= o1 (readmem8 (t__content3 rsp) (map__content memory)))
  (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))

;; H
  (assert (= o2 o1))

;; H
  (assert (= result1 ra0))

;; H
  (assert (= (let ((subject ra0)) ra01) o2))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
        (map__content memory)))
  (= o3 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))

;; H
  (assert (= o4 o3))

;; H
  (assert (= result2 ra1))

;; H
  (assert (= (let ((subject ra1)) ra11) o4))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
        (map__content memory)))
  (= o5 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))

;; H
  (assert (= o6 o5))

;; H
  (assert (= result3 ra2))

;; H
  (assert (= (let ((subject ra2)) ra21) o6))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
        (map__content memory)))
  (= o7 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= result4 ra3))

;; H
  (assert (= (let ((subject ra3)) ra31) o8))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
        (map__content memory)))
  (= o9 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= result5 ra4))

;; H
  (assert (= (let ((subject ra4)) ra41) o10))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
         (map__content memory)))
  (= o11 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= result6 ra5))

;; H
  (assert (= (let ((subject ra5)) ra51) o12))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
         (map__content memory)))
  (= o13 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))

;; H
  (assert (= o14 o13))

;; H
  (assert (= result7 ra6))

;; H
  (assert (= (let ((subject ra6)) ra61) o14))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
         (map__content memory)))
  (= o15 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))

;; H
  (assert (= o16 o15))

;; H
  (assert (= result8 ra7))

;; H
  (assert (= (let ((subject ra7)) ra71) o16))

;; H
  (assert true)

;; H
  (assert (= o17 (t__content3 rbx)))

;; H
  (assert (= result9 saverbx))

;; H
  (assert (= (let ((subject saverbx)) saverbx1) o17))

;; H
  (assert true)

;; H
  (assert (= o18 (t__content3 rbp)))

;; H
  (assert (= result10 saverbp))

;; H
  (assert (= (let ((subject saverbp)) saverbp1) o18))

;; H
  (assert true)

;; H
  (assert (= o19 (t__content3 r12)))

;; H
  (assert (= result11 saver12))

;; H
  (assert (= (let ((subject saver12)) saver121) o19))

;; H
  (assert true)

;; H
  (assert (= o20 (t__content3 r13)))

;; H
  (assert (= result12 saver13))

;; H
  (assert (= (let ((subject saver13)) saver131) o20))

;; H
  (assert true)

;; H
  (assert (= o21 (t__content3 r14)))

;; H
  (assert (= result13 saver14))

;; H
  (assert (= (let ((subject saver14)) saver141) o21))

;; H
  (assert true)

;; H
  (assert (= o22 (t__content3 r15)))

;; H
  (assert (= result14 saver15))

;; H
  (assert (= (let ((subject saver15)) saver151) o22))

;; H
  (assert true)

;; H
  (assert (= (t__content3 rsp) ((_ int2bv 64) 12105675798371893247)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r15) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep
                                                          (select (map__content
                                                                  memory) i))))))))

;; H
  (assert (= result15 rsp))

;; H
  (assert
  (= (let ((subject rsp)) rsp1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r14) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory1) i))))))))

;; H
  (assert (= result16 (let ((subject rsp)) (mk_t__ref3 rsp1))))

;; H
  (assert
  (= (let ((subject rsp)) rsp2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi1) ((_ int2bv 32) 4198504)) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r13) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory2) i))))))))

;; H
  (assert (= result17 (let ((subject rsp)) (mk_t__ref3 rsp2))))

;; H
  (assert
  (= (let ((subject rsp)) rsp3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r12) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory3) i))))))))

;; H
  (assert (= result18 (let ((subject rsp)) (mk_t__ref3 rsp3))))

;; H
  (assert
  (= (let ((subject rsp)) rsp4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory4) i))))))))

;; H
  (assert (= result19 (let ((subject rsp)) (mk_t__ref3 rsp4))))

;; H
  (assert
  (= (let ((subject rsp)) rsp5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory5) i))))))))

;; H
  (assert (= result20 (let ((subject rsp)) (mk_t__ref3 rsp5))))

;; H
  (assert
  (= (let ((subject rsp)) rsp6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx1) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result21 (let ((subject rsp)) (mk_t__ref3 rsp6))))

;; H
  (assert
  (= (let ((subject rsp)) rsp7) (bvsub (let ((subject rsp)) rsp6) ((_ int2bv 64) 104))))

;; H
  (assert (= result22 (let ((subject rsp)) (mk_t__ref3 rsp7))))

;; H
  (assert
  (= (let ((subject rsp)) rsp8) (bvsub (let ((subject rsp)) rsp7) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp9) (bvadd (let ((subject rsp)) rsp8) ((_ int2bv 64) 8))))

;; H
  (assert (= result23 rsi))

;; H
  (assert
  (= (let ((subject rsi)) rsi1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))

;; H
  (assert (= result24 (let ((subject rdi)) (mk_t__ref3 rdi1))))

;; H
  (assert
  (= (let ((subject rdi)) rdi2) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 44))))

;; H
  (assert (= result25 rbp))

;; H
  (assert
  (= (let ((subject rbp)) rbp1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))

;; H
  (assert
  (and
  (= o23 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o23 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198776)))))
  (= (bvand o23 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o23 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o23 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o23 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o23 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o23 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o23 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result26 xmm38))

;; H
  (assert (= xmm31 o23))

;; H
  (assert
  (and
  (= o24 (readmem64 ((_ int2bv 64) 4198784) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o24 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198784)))))
  (= (bvand o24 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o24 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o24 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o24 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o24 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o24 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o24 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result27 xmm212))

;; H
  (assert (= xmm21 o24))

;; H
  (assert
  (and
  (= o25 (readmem64 ((_ int2bv 64) 4198792) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o25 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198792)))))
  (= (bvand o25 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o25 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o25 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o25 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o25 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o25 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o25 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result28 xmm110))

;; H
  (assert (= xmm11 o25))

;; H
  (assert
  (and
  (= o26 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o26 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o26 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o26 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o26 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o26 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o26 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o26 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o26 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result29 xmm014))

;; H
  (assert (= xmm01 o26))

;; H
  (assert (= result30 (let ((subject rsp)) (mk_t__ref3 rsp9))))

;; H
  (assert
  (= (let ((subject rsp)) rsp10) (bvsub (let ((subject rsp)) rsp9) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp11) (bvadd (let ((subject rsp)) rsp10) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi3) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= (writereg32post rax1 ((_ int2bv 32) 0)) true))

;; H
  (assert (= result31 (let ((subject rsp)) (mk_t__ref3 rsp11))))

;; H
  (assert
  (= (let ((subject rsp)) rsp12) (bvsub (let ((subject rsp)) rsp11) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp13) (bvadd (let ((subject rsp)) rsp12) ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o27 (esp (let ((subject rsp)) rsp13)))
  (= o27 (readreg32 (let ((subject rsp)) rsp13)))))

;; H
  (assert (= o28 (bvadd o27 ((_ int2bv 32) 44))))

;; H
  (assert (= o29 ((_ zero_extend 32) o28)))

;; H
  (assert
  (and (= o30 (readmem32 o29 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o30 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6)
                                                         o29))))
  (= (bvand o30 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd
                                                                  o29 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o30 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o30 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post (let ((subject rdi)) rdi4) o30) true))

;; H
  (assert
  (and (= o31 (edi (let ((subject rdi)) rdi4)))
  (= o31 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert
  (and (= o32 (edi (let ((subject rdi)) rdi4)))
  (= o32 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert (= o33 (bvand o32 o31)))

;; H
  (assert (= o34 (ite (= o33 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result32 zeroflag11))

;; H
  (assert (= zeroflag1 o34))

;; H
  (assert
  (and (= o35 (edi (let ((subject rdi)) rdi4)))
  (= o35 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert
  (and (= o36 (edi (let ((subject rdi)) rdi4)))
  (= o36 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert (= o37 (bvand o36 o35)))

;; H
  (assert (= o38 (ite (bvugt o37 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result33 signflag11))

;; H
  (assert (= signflag1 o38))

;; H
  (assert (= result34 carryflag11))

;; H
  (assert (= carryflag1 (of_int 0)))

;; H
  (assert (= result35 overflowflag11))

;; H
  (assert (= overflowflag1 (of_int 0)))

;; H
  (assert (= (let ((subject rsp)) rsp14) (let ((subject rsp)) rsp13)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi6) ((_ int2bv 32) 10)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx3) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result36 (let ((subject rbp)) (mk_t__ref3 rbp2))))

;; H
  (assert
  (= (let ((subject rbp)) rbp3) (bvadd (let ((subject rsp)) rsp14) ((_ int2bv 64) 64))))

;; H
  (assert (= result37 (let ((subject rsp)) (mk_t__ref3 rsp14))))

;; H
  (assert
  (= (let ((subject rsp)) rsp15) (bvsub (let ((subject rsp)) rsp14) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp16) (bvadd (let ((subject rsp)) rsp15) ((_ int2bv 64) 8))))

;; H
  (assert (= result38 (let ((subject rsi)) (mk_t__ref3 rsi1))))

;; H
  (assert
  (= (let ((subject rsi)) rsi2) (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 64))))

;; H
  (assert (= result39 (let ((subject rdi)) (mk_t__ref3 rdi6))))

;; H
  (assert
  (= (let ((subject rdi)) rdi7) (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 44))))

;; H
  (assert
  (and
  (= o39 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o39 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198776)))))
  (= (bvand o39 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o39 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o39 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o39 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o39 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o39 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o39 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result40 (mk_t__ref3 xmm31)))

;; H
  (assert (= xmm32 o39))

;; H
  (assert
  (and
  (= o40 (readmem64 ((_ int2bv 64) 4198800) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o40 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198800)))))
  (= (bvand o40 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o40 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o40 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o40 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o40 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o40 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o40 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result41 (mk_t__ref3 xmm21)))

;; H
  (assert (= xmm22 o40))

;; H
  (assert
  (and
  (= o41 (readmem64 ((_ int2bv 64) 4198808) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o41 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198808)))))
  (= (bvand o41 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o41 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o41 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o41 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o41 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o41 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o41 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result42 (mk_t__ref3 xmm11)))

;; H
  (assert (= xmm12 o41))

;; H
  (assert
  (and
  (= o42 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o42 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o42 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o42 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o42 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o42 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o42 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o42 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o42 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result43 (mk_t__ref3 xmm02)))

;; H
  (assert (= xmm03 o42))

;; H
  (assert (= result44 (let ((subject rsp)) (mk_t__ref3 rsp16))))

;; H
  (assert
  (= (let ((subject rsp)) rsp17) (bvsub (let ((subject rsp)) rsp16) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp18) (bvadd (let ((subject rsp)) rsp17) ((_ int2bv 64) 8))))

;; H
  (assert (= (writereg32post rax3 ((_ int2bv 32) 0)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi8) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result45 (let ((subject rsp)) (mk_t__ref3 rsp18))))

;; H
  (assert
  (= (let ((subject rsp)) rsp19) (bvsub (let ((subject rsp)) rsp18) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp20) (bvadd (let ((subject rsp)) rsp19) ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o43 (esp (let ((subject rsp)) rsp20)))
  (= o43 (readreg32 (let ((subject rsp)) rsp20)))))

;; H
  (assert (= o44 (bvadd o43 ((_ int2bv 32) 44))))

;; H
  (assert (= o45 ((_ zero_extend 32) o44)))

;; H
  (assert
  (and (= o46 (readmem32 o45 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o46 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6)
                                                         o45))))
  (= (bvand o46 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd
                                                                  o45 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o46 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o45 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o46 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o45 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post (let ((subject rsi)) rsi3) o46) true))

;; H
  (assert
  (and (= o47 (esi (let ((subject rsi)) rsi3)))
  (= o47 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert
  (and (= o48 (esi (let ((subject rsi)) rsi3)))
  (= o48 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert (= o49 (bvand o48 o47)))

;; H
  (assert (= o50 (ite (= o49 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result46 (mk_bool__ref zeroflag2)))

;; H
  (assert (= zeroflag3 o50))

;; H
  (assert
  (and (= o51 (esi (let ((subject rsi)) rsi3)))
  (= o51 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert
  (and (= o52 (esi (let ((subject rsi)) rsi3)))
  (= o52 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert (= o53 (bvand o52 o51)))

;; H
  (assert (= o54 (ite (bvugt o53 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result47 (mk_bool__ref signflag2)))

;; H
  (assert (= signflag3 o54))

;; H
  (assert (= result48 (mk_bool__ref carryflag2)))

;; H
  (assert (= carryflag3 (of_int 0)))

;; H
  (assert (= result49 (mk_bool__ref overflowflag2)))

;; H
  (assert (= overflowflag3 (of_int 0)))

;; H
  (assert (= (let ((subject rsp)) rsp21) (let ((subject rsp)) rsp20)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi10) ((_ int2bv 32) 10)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx5) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result50 (let ((subject rbp)) (mk_t__ref3 rbp4))))

;; H
  (assert
  (= (let ((subject rbp)) rbp5) (bvadd (let ((subject rsp)) rsp21) ((_ int2bv 64) 64))))

;; H
  (assert (= result51 (let ((subject rsp)) (mk_t__ref3 rsp21))))

;; H
  (assert
  (= (let ((subject rsp)) rsp22) (bvsub (let ((subject rsp)) rsp21) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp23) (bvadd (let ((subject rsp)) rsp22) ((_ int2bv 64) 8))))

;; H
  (assert (= result52 (let ((subject rsi)) (mk_t__ref3 rsi3))))

;; H
  (assert
  (= (let ((subject rsi)) rsi4) (bvadd (let ((subject rsp)) rsp23) ((_ int2bv 64) 64))))

;; H
  (assert (= result53 (let ((subject rdi)) (mk_t__ref3 rdi10))))

;; H
  (assert
  (= (let ((subject rdi)) rdi11) (bvadd (let ((subject rsp)) rsp23) ((_ int2bv 64) 44))))

;; H
  (assert
  (and
  (= o55 (readmem64 ((_ int2bv 64) 4198816) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o55 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198816)))))
  (= (bvand o55 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o55 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o55 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o55 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o55 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o55 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o55 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result54 (mk_t__ref3 xmm32)))

;; H
  (assert (= xmm33 o55))

;; H
  (assert
  (and
  (= o56 (readmem64 ((_ int2bv 64) 4198824) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o56 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198824)))))
  (= (bvand o56 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o56 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o56 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o56 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o56 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o56 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o56 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result55 (mk_t__ref3 xmm22)))

;; H
  (assert (= xmm23 o56))

;; H
  (assert
  (and
  (= o57 (readmem64 ((_ int2bv 64) 4198832) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o57 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198832)))))
  (= (bvand o57 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o57 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o57 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o57 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o57 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o57 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o57 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result56 (mk_t__ref3 xmm12)))

;; H
  (assert (= xmm13 o57))

;; H
  (assert
  (and
  (= o58 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o58 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o58 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o58 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o58 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o58 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o58 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o58 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o58 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result57 (mk_t__ref3 xmm04)))

;; H
  (assert (= xmm05 o58))

;; H
  (assert (= result58 (let ((subject rsp)) (mk_t__ref3 rsp23))))

;; H
  (assert
  (= (let ((subject rsp)) rsp24) (bvsub (let ((subject rsp)) rsp23) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp25) (bvadd (let ((subject rsp)) rsp24) ((_ int2bv 64) 8))))

;; H
  (assert (= (writereg32post rax5 ((_ int2bv 32) 0)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi12) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result59 (let ((subject rsp)) (mk_t__ref3 rsp25))))

;; H
  (assert
  (= (let ((subject rsp)) rsp26) (bvsub (let ((subject rsp)) rsp25) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp27) (bvadd (let ((subject rsp)) rsp26) ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o59 (esp (let ((subject rsp)) rsp27)))
  (= o59 (readreg32 (let ((subject rsp)) rsp27)))))

;; H
  (assert (= o60 (bvadd o59 ((_ int2bv 32) 44))))

;; H
  (assert (= o61 ((_ zero_extend 32) o60)))

;; H
  (assert
  (and (= o62 (readmem32 o61 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o62 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6)
                                                         o61))))
  (= (bvand o62 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd
                                                                  o61 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o62 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o61 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o62 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o61 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post rcx1 o62) true))

;; H
  (assert (and (= o63 (ecx rcx1)) (= o63 (readreg32 rcx1))))

;; H
  (assert (and (= o64 (ecx rcx1)) (= o64 (readreg32 rcx1))))

;; H
  (assert (= o65 (bvand o64 o63)))

;; H
  (assert (= o66 (ite (= o65 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result60 (mk_bool__ref zeroflag4)))

;; H
  (assert (= zeroflag5 o66))

;; H
  (assert (and (= o67 (ecx rcx1)) (= o67 (readreg32 rcx1))))

;; H
  (assert (and (= o68 (ecx rcx1)) (= o68 (readreg32 rcx1))))

;; H
  (assert (= o69 (bvand o68 o67)))

;; H
  (assert (= o70 (ite (bvugt o69 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result61 (mk_bool__ref signflag4)))

;; H
  (assert (= signflag5 o70))

;; H
  (assert (= result62 (mk_bool__ref carryflag4)))

;; H
  (assert (= carryflag5 (of_int 0)))

;; H
  (assert (= result63 (mk_bool__ref overflowflag4)))

;; H
  (assert (= overflowflag5 (of_int 0)))

;; H
  (assert (= (let ((subject rsp)) rsp28) (let ((subject rsp)) rsp27)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi14) ((_ int2bv 32) 10)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx7) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result64 (let ((subject rbp)) (mk_t__ref3 rbp6))))

;; H
  (assert
  (= (let ((subject rbp)) rbp7) (bvadd (let ((subject rsp)) rsp28) ((_ int2bv 64) 64))))

;; H
  (assert (= result65 (let ((subject rsp)) (mk_t__ref3 rsp28))))

;; H
  (assert
  (= (let ((subject rsp)) rsp29) (bvsub (let ((subject rsp)) rsp28) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp30) (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (= o71 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o71 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o71 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o71 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o71 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o71 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o71 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o71 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o71 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result66 (mk_t__ref3 xmm23)))

;; H
  (assert (= xmm24 o71))

;; H
  (assert (= result67 (let ((subject rsi)) (mk_t__ref3 rsi4))))

;; H
  (assert
  (= (let ((subject rsi)) rsi5) (bvadd (let ((subject rsp)) rsp30) ((_ int2bv 64) 64))))

;; H
  (assert (= result68 (let ((subject rdi)) (mk_t__ref3 rdi14))))

;; H
  (assert
  (= (let ((subject rdi)) rdi15) (bvadd (let ((subject rsp)) rsp30) ((_ int2bv 64) 44))))

;; H
  (assert
  (and
  (= o72 (readmem64 ((_ int2bv 64) 4198840) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o72 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198840)))))
  (= (bvand o72 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o72 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o72 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o72 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o72 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o72 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o72 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result69 (mk_t__ref3 xmm33)))

;; H
  (assert (= xmm34 o72))

;; H
  (assert
  (and
  (= o73 (readmem64 ((_ int2bv 64) 4198848) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o73 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198848)))))
  (= (bvand o73 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o73 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o73 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o73 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o73 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o73 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o73 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result70 (mk_t__ref3 xmm13)))

;; H
  (assert (= xmm14 o73))

;; H
  (assert (= result71 (mk_t__ref3 xmm06)))

;; H
  (assert (= xmm07 xmm24))

;; H
  (assert (= result72 (let ((subject rsp)) (mk_t__ref3 rsp30))))

;; H
  (assert
  (= (let ((subject rsp)) rsp31) (bvsub (let ((subject rsp)) rsp30) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp32) (bvadd (let ((subject rsp)) rsp31) ((_ int2bv 64) 8))))

;; H
  (assert (= (writereg32post rax7 ((_ int2bv 32) 0)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi16) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result73 (let ((subject rsp)) (mk_t__ref3 rsp32))))

;; H
  (assert
  (= (let ((subject rsp)) rsp33) (bvsub (let ((subject rsp)) rsp32) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp34) (bvadd (let ((subject rsp)) rsp33) ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o74 (esp (let ((subject rsp)) rsp34)))
  (= o74 (readreg32 (let ((subject rsp)) rsp34)))))

;; H
  (assert (= o75 (bvadd o74 ((_ int2bv 32) 44))))

;; H
  (assert (= o76 ((_ zero_extend 32) o75)))

;; H
  (assert
  (and (= o77 (readmem32 o76 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o77 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6)
                                                         o76))))
  (= (bvand o77 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd
                                                                  o76 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o77 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o76 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o77 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o76 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post rdx1 o77) true))

;; H
  (assert (and (= o78 (edx rdx1)) (= o78 (readreg32 rdx1))))

;; H
  (assert (and (= o79 (edx rdx1)) (= o79 (readreg32 rdx1))))

;; H
  (assert (= o80 (bvand o79 o78)))

;; H
  (assert (= o81 (ite (= o80 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result74 (mk_bool__ref zeroflag6)))

;; H
  (assert (= zeroflag7 o81))

;; H
  (assert (and (= o82 (edx rdx1)) (= o82 (readreg32 rdx1))))

;; H
  (assert (and (= o83 (edx rdx1)) (= o83 (readreg32 rdx1))))

;; H
  (assert (= o84 (bvand o83 o82)))

;; H
  (assert (= o85 (ite (bvugt o84 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result75 (mk_bool__ref signflag6)))

;; H
  (assert (= signflag7 o85))

;; H
  (assert (= result76 (mk_bool__ref carryflag6)))

;; H
  (assert (= carryflag7 (of_int 0)))

;; H
  (assert (= result77 (mk_bool__ref overflowflag6)))

;; H
  (assert (= overflowflag7 (of_int 0)))

;; H
  (assert (= (let ((subject rsp)) rsp35) (let ((subject rsp)) rsp34)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi18) ((_ int2bv 32) 10)) true))

;; H
  (assert (= result78 r15))

;; H
  (assert (= (let ((subject r15)) r151) ((_ int2bv 64) 9)))

;; H
  (assert (= result79 (let ((subject rsp)) (mk_t__ref3 rsp35))))

;; H
  (assert
  (= (let ((subject rsp)) rsp36) (bvsub (let ((subject rsp)) rsp35) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp37) (bvadd (let ((subject rsp)) rsp36) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (= o86 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o86 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o86 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o86 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o86 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o86 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o86 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o86 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o86 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result80 xmm65))

;; H
  (assert (= xmm61 o86))

;; H
  (assert
  (and (= o87 (esp (let ((subject rsp)) rsp37)))
  (= o87 (readreg32 (let ((subject rsp)) rsp37)))))

;; H
  (assert (= o88 (bvadd o87 ((_ int2bv 32) 24))))

;; H
  (assert (= o89 ((_ zero_extend 32) o88)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm61 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject
                                                                   memory))
                                                                   memory7)
                                                           o89))))
  (= (bvand xmm61 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory7) (bvadd
                                                                    o89 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm61 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o89 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm61 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o89 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm61 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o89 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm61 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o89 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm61 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o89 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm61 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o89 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o89)) (not (= i (bvadd o89 ((_ int2bv 64) 1)))))
  (not (= i (bvadd o89 ((_ int2bv 64) 2)))))
  (not (= i (bvadd o89 ((_ int2bv 64) 3)))))
  (not (= i (bvadd o89 ((_ int2bv 64) 4)))))
  (not (= i (bvadd o89 ((_ int2bv 64) 5)))))
  (not (= i (bvadd o89 ((_ int2bv 64) 6)))))
  (not (= i (bvadd o89 ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory7) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory6) i))))))))

;; H
  (assert
  (and
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp38)))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 7)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 8)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 9)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 10)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 11)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 12)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 13)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 14)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 15)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 16)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 17)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 18)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 19)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 20)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 21)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 22)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 23)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 24)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 25)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 26)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 27)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 28)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 29)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 30)))))
  (not (= i (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 31)))))
  (= (to_rep (select (let ((subject memory)) memory8) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory7) i))))))
  (= (let ((subject rsp)) rsp38) (let ((subject rsp)) rsp37))))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi20) ((_ int2bv 32) 4198544)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx10) ((_ int2bv 32) 0)) true))

;; H
  (assert
  (and
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory9) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory8) i))))))
  (= (let ((subject rsp)) rsp39) (let ((subject rsp)) rsp38))))

;; H
  (assert (= result81 (let ((subject rsi)) (mk_t__ref3 rsi7))))

;; H
  (assert
  (= (let ((subject rsi)) rsi8) (bvadd (let ((subject rsp)) rsp39) ((_ int2bv 64) 48))))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi22) ((_ int2bv 32) 1072497001)) true))

;; H
  (assert
  (= (writereg16post (let ((subject rbx)) rbx11) (let ((subject rbx)) rbx12)
     ((_ int2bv 16) 361)) true))

;; H
  (assert (= result82 (let ((subject rsp)) (mk_t__ref3 rsp39))))

;; H
  (assert
  (= (let ((subject rsp)) rsp40) (bvsub (let ((subject rsp)) rsp39) ((_ int2bv 64) 8))))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not
  (not
  (= (inrange64 (let ((subject rsi)) rsi8)
     (bvsub (let ((subject rsp)) rsp40) ((_ int2bv 64) 7))
     ((_ int2bv 64) 15)) true))))
(check-sat)
(exit)
