;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-fun divides (Int Int) Bool)

(declare-fun divides__function_guard (Bool Int Int) Bool)

;; divides__post_axiom
  (assert true)

;; divides__def_axiom
  (assert
  (forall ((a Int) (b Int))
  (! (= (= (divides a b) true)
     (exists ((c Int)) (and (and (<= 1 c) (<= c 2147483647)) (= (* a c) b)))) :pattern (
  (divides a b)) )))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c Int)

(declare-const math_simple_abstract__gcd__result Int)

(declare-const o Int)

(declare-const temp___132 Int)

(declare-const o1 Int)

(declare-const x Int)

(declare-const result Int)

(declare-const c1 Int)

(declare-const c2 Int)

(declare-const result1 Int)

(declare-const c3 Int)

(declare-const c4 Int)

(declare-const c5 Int)

(declare-const c6 Int)

(declare-const c7 Int)

(declare-const c8 Int)

(declare-const c9 Int)

(declare-const result2 Int)

(declare-const math_simple_abstract__gcd__result1 Int)

(declare-const math_simple_abstract__gcd__result2 Int)

(declare-const math_simple_abstract__gcd__result3 Int)

(declare-const c10 Int)

(declare-const math_simple_abstract__gcd__result4 Int)

(declare-const c11 Int)

(declare-const math_simple_abstract__gcd__result5 Int)

(declare-const result3 Bool)

(declare-const result4 Bool)

(define-fun c12 () int__ref (mk_int__ref c8))

(define-fun c13 () int__ref (mk_int__ref c6))

;; H
  (assert (in_range1 a))

;; H
  (assert (in_range1 b))

;; H
  (assert (and (= o (ite (< a b) a b)) (in_range1 (ite (< a b) a b))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref c)))

;; H
  (assert (= c1 o))

;; H
  (assert (in_range1 c1))

;; H
  (assert (=> (< 1 c1) (= temp___132 c1)))

;; H
  (assert
  (=> (< 1 c1)
  (or
  (and (and (= c1 c4) (= c5 c1)) (and (= (mod2 a c1) 0) (= (mod2 b c1) 0)))
  (and (not (and (= (mod2 a c1) 0) (= (mod2 b c1) 0)))
  (and (and (= c3 c4) (= c5 c3))
  (and
  (ite (not (= (mod2 a c1) 0)) (not (= (divides c1 a) true))
  (not (= (divides c1 b) true)))
  (and
  (forall ((x1 Int))
  (=> (and (<= c2 x1) (<= x1 (ite (< a b) a b)))
  (not (and (= (divides x1 a) true) (= (divides x1 b) true)))))
  (and (=> (<= 1 2147483647) (in_range1 c2))
  (and
  (and (and (= o1 (- c2 1)) (in_range1 (- c2 1)))
  (and (= c2 result1) (= c3 o1)))
  (or (not (< 1 c3))
  (and (< 1 c3) (and (= (mod2 a c3) 0) (= (mod2 b c3) 0)))))))))))))

;; H
  (assert (=> (< 1 c1) (= c13 (mk_int__ref c4))))

;; H
  (assert (=> (< 1 c1) (= c7 c5)))

;; H
  (assert (=> (< 1 c1) (= c12 c13)))

;; H
  (assert (=> (< 1 c1) (= c9 c7)))

;; H
  (assert (=> (not (< 1 c1)) (= c1 c8)))

;; H
  (assert (=> (not (< 1 c1)) (= c9 c1)))

;; H
  (assert (= (divides c8 a) true))

;; H
  (assert (= (divides c8 b) true))

;; H
  (assert
  (= math_simple_abstract__gcd__result1 math_simple_abstract__gcd__result2))

;; H
  (assert
  (= math_simple_abstract__gcd__result3 math_simple_abstract__gcd__result1))

;; H
  (assert
  (= (mk_int__ref result2) (mk_int__ref math_simple_abstract__gcd__result)))

;; H
  (assert (= math_simple_abstract__gcd__result1 c8))

;; H
  (assert
  (= (mk_int__ref math_simple_abstract__gcd__result4) (mk_int__ref
                                                      math_simple_abstract__gcd__result2)))

;; H
  (assert (= (mk_int__ref c10) c12))

;; H
  (assert
  (= math_simple_abstract__gcd__result5 math_simple_abstract__gcd__result3))

;; H
  (assert (= c11 c9))

;; H
  (assert
  (and (= result3 (divides math_simple_abstract__gcd__result4 a))
  (= (= result3 true)
  (exists ((c14 Int))
  (and (and (<= 1 c14) (<= c14 2147483647))
  (= (* math_simple_abstract__gcd__result4 c14) a))))))

;; H
  (assert (= result3 true))

;; H
  (assert
  (and (= result4 (divides math_simple_abstract__gcd__result4 b))
  (= (= result4 true)
  (exists ((c14 Int))
  (and (and (<= 1 c14) (<= c14 2147483647))
  (= (* math_simple_abstract__gcd__result4 c14) b))))))

;; H
  (assert (= result4 true))

;; H
  (assert (<= (+ math_simple_abstract__gcd__result4 1) x))

;; H
  (assert (<= x (ite (< a b) a b)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range1 x)))
(check-sat)
(exit)
