;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t_nat32 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (t_nat32 t_nat32) Bool)

(declare-const dummy t_nat32)

(declare-datatypes ((t_nat32__ref 0))
(((mk_t_nat32__ref (t_nat32__content t_nat32)))))
(define-fun t_nat32__ref___projection ((a t_nat32__ref)) t_nat32 (t_nat32__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 4294967295)) (in_range
                                      temp___expr_135)))

(declare-fun to_rep (t_nat32) Int)

(declare-fun of_rep (Int) t_nat32)

;; inversion_axiom
  (assert
  (forall ((x t_nat32)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x t_nat32)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort t_data_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t_data_type t_data_type) Bool)

(declare-const dummy1 t_data_type)

(declare-datatypes ((t_data_type__ref 0))
(((mk_t_data_type__ref (t_data_type__content t_data_type)))))
(define-fun t_data_type__ref___projection ((a t_data_type__ref)) t_data_type
  (t_data_type__content a))

(declare-fun to_rep1 (t_data_type) Int)

(declare-fun of_rep1 (Int) t_data_type)

;; inversion_axiom
  (assert
  (forall ((x t_data_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x t_data_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__data__t_strong_data_type__data_type t_data_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) t_data_type
  (rec__data__t_strong_data_type__data_type a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__data__t_strong_data_type__min_nat32 t_nat32)))))
(define-fun us_split_fields_Min_Nat32__projection ((a us_split_fields)) t_nat32
  (rec__data__t_strong_data_type__min_nat32 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun data__t_strong_data_type__min_nat32__pred ((a us_rep)) Bool (=
  (to_rep1 (rec__data__t_strong_data_type__data_type (us_split_discrs1 a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__data__t_strong_data_type__data_type
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__data__t_strong_data_type__data_type
                                                  (us_split_discrs1 b))))
                        (=> (data__t_strong_data_type__min_nat32__pred a)
                        (= (to_rep
                           (rec__data__t_strong_data_type__min_nat32
                           (us_split_fields1 a))) (to_rep
                                                  (rec__data__t_strong_data_type__min_nat32
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const data__t_strong_data_type__data_type__first__bit Int)

(declare-const data__t_strong_data_type__data_type__last__bit Int)

(declare-const data__t_strong_data_type__data_type__position Int)

;; data__t_strong_data_type__data_type__first__bit_axiom
  (assert (<= 0 data__t_strong_data_type__data_type__first__bit))

;; data__t_strong_data_type__data_type__last__bit_axiom
  (assert
  (< data__t_strong_data_type__data_type__first__bit data__t_strong_data_type__data_type__last__bit))

;; data__t_strong_data_type__data_type__position_axiom
  (assert (<= 0 data__t_strong_data_type__data_type__position))

(declare-const data__t_strong_data_type__min_nat32__first__bit Int)

(declare-const data__t_strong_data_type__min_nat32__last__bit Int)

(declare-const data__t_strong_data_type__min_nat32__position Int)

;; data__t_strong_data_type__min_nat32__first__bit_axiom
  (assert (<= 0 data__t_strong_data_type__min_nat32__first__bit))

;; data__t_strong_data_type__min_nat32__last__bit_axiom
  (assert
  (< data__t_strong_data_type__min_nat32__first__bit data__t_strong_data_type__min_nat32__last__bit))

;; data__t_strong_data_type__min_nat32__position_axiom
  (assert (<= 0 data__t_strong_data_type__min_nat32__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((t_strong_data_type__ref 0))
(((mk_t_strong_data_type__ref (t_strong_data_type__content us_rep)))))
(define-fun t_strong_data_type__ref___projection ((a t_strong_data_type__ref)) us_rep
  (t_strong_data_type__content a))

(declare-fun is_nat32 (us_rep) Bool)

(declare-fun is_nat32__function_guard (Bool us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_149 us_rep)
  (temp___skip_top_level_150 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_149) false)
                                         (= (to_rep1
                                            (rec__data__t_strong_data_type__data_type
                                            (us_split_discrs1
                                            temp___expr_149))) 0)))

;; is_nat32__post_axiom
  (assert true)

;; is_nat32__def_axiom
  (assert
  (forall ((strong_data_type us_rep))
  (! (= (= (is_nat32 strong_data_type) true)
     (= (to_rep1
        (rec__data__t_strong_data_type__data_type
        (us_split_discrs1 strong_data_type))) 1)) :pattern ((is_nat32
                                                            strong_data_type)) )))

(declare-fun get_min_nat32 (us_rep) Int)

(declare-fun get_min_nat32__function_guard (Int us_rep) Bool)

;; get_min_nat32__post_axiom
  (assert
  (forall ((strong_data_type us_rep))
  (! (=> (= (is_nat32 strong_data_type) true) (dynamic_invariant
     (get_min_nat32 strong_data_type) true false true)) :pattern ((get_min_nat32
                                                                  strong_data_type)) )))

;; get_min_nat32__def_axiom
  (assert
  (forall ((strong_data_type us_rep))
  (! (= (get_min_nat32 strong_data_type) (to_rep
                                         (rec__data__t_strong_data_type__min_nat32
                                         (us_split_fields1 strong_data_type)))) :pattern (
  (get_min_nat32 strong_data_type)) )))

(declare-const min Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range2 ((rec__data__t_strong_data_type__data_type1 Int)
  (a us_rep)) Bool (= rec__data__t_strong_data_type__data_type1 (to_rep1
                                                                (rec__data__t_strong_data_type__data_type
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const data__t_strong_data_type__data_type__first__bit1 Int)

(declare-const data__t_strong_data_type__data_type__last__bit1 Int)

(declare-const data__t_strong_data_type__data_type__position1 Int)

;; data__t_strong_data_type__data_type__first__bit_axiom
  (assert (<= 0 data__t_strong_data_type__data_type__first__bit1))

;; data__t_strong_data_type__data_type__last__bit_axiom
  (assert
  (< data__t_strong_data_type__data_type__first__bit1 data__t_strong_data_type__data_type__last__bit1))

;; data__t_strong_data_type__data_type__position_axiom
  (assert (<= 0 data__t_strong_data_type__data_type__position1))

(declare-const data__t_strong_data_type__min_nat32__first__bit1 Int)

(declare-const data__t_strong_data_type__min_nat32__last__bit1 Int)

(declare-const data__t_strong_data_type__min_nat32__position1 Int)

;; data__t_strong_data_type__min_nat32__first__bit_axiom
  (assert (<= 0 data__t_strong_data_type__min_nat32__first__bit1))

;; data__t_strong_data_type__min_nat32__last__bit_axiom
  (assert
  (< data__t_strong_data_type__min_nat32__first__bit1 data__t_strong_data_type__min_nat32__last__bit1))

;; data__t_strong_data_type__min_nat32__position_axiom
  (assert (<= 0 data__t_strong_data_type__min_nat32__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t8s__ref 0)) (((mk_t8s__ref (t8s__content us_rep)))))
(define-fun t8s__ref___projection ((a t8s__ref)) us_rep (t8s__content a))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 1)) (in_range1 temp___expr_141)))

(declare-const data__create_type__result t_data_type)

(declare-const data__create_type__result1 t_nat32)

(declare-const data__create_type__result2 Bool)

(declare-const o t_data_type)

(declare-const o1 t_nat32)

(declare-const o2 t_nat32)

(declare-const o3 t_data_type)

(declare-const o4 t_data_type)

(declare-const o5 t_nat32)

(declare-const o6 Bool)

(declare-const result t_data_type)

(declare-const result1 t_nat32)

(declare-const result2 Bool)

(declare-const data__create_type__result3 t_data_type)

(declare-const data__create_type__result4 t_nat32)

(declare-const data__create_type__result5 Bool)

(declare-const data__create_type__result6 t_data_type)

(declare-const data__create_type__result7 t_nat32)

(declare-const data__create_type__result8 Bool)

(declare-const data__create_type__result9 t_data_type)

(declare-const data__create_type__result10 t_nat32)

(declare-const data__create_type__result11 Bool)

(declare-const data__create_type__result12 t_strong_data_type__ref)

(declare-const data__create_type__result13 us_rep)

(declare-const result3 Bool)

(define-fun data__create_type__result14 () us_rep (mk___rep
                                                  (mk___split_discrs
                                                  data__create_type__result9)
                                                  (mk___split_fields
                                                  data__create_type__result10)
                                                  data__create_type__result11))

(define-fun data__create_type__result15 () us_rep (mk___rep
                                                  (mk___split_discrs
                                                  data__create_type__result3)
                                                  (mk___split_fields
                                                  data__create_type__result4)
                                                  data__create_type__result5))

;; H
  (assert (in_range min))

;; H
  (assert (= data__create_type__result6 data__create_type__result3))

;; H
  (assert (= data__create_type__result7 data__create_type__result4))

;; H
  (assert (= data__create_type__result8 data__create_type__result5))

;; H
  (assert (= data__create_type__result14 data__create_type__result15))

;; H
  (assert (= (to_rep o1) min))

;; H
  (assert (= o1 o2))

;; H
  (assert (= (to_rep1 o) 1))

;; H
  (assert (= o o3))

;; H
  (assert (= o4 o3))

;; H
  (assert (= o5 o2))

;; H
  (assert (= true o6))

;; H
  (assert
  (= (mk_t_strong_data_type__ref
     (mk___rep (mk___split_discrs result) (mk___split_fields result1)
     result2)) (mk_t_strong_data_type__ref
               (mk___rep (mk___split_discrs data__create_type__result)
               (mk___split_fields data__create_type__result1)
               data__create_type__result2))))

;; H
  (assert
  (= data__create_type__result15 (mk___rep (mk___split_discrs o4)
                                 (mk___split_fields o5) o6)))

;; H
  (assert
  (= data__create_type__result12 (mk_t_strong_data_type__ref
                                 (mk___rep
                                 (mk___split_discrs
                                 data__create_type__result6)
                                 (mk___split_fields
                                 data__create_type__result7)
                                 data__create_type__result8))))

;; H
  (assert (= data__create_type__result13 data__create_type__result14))

;; H
  (assert
  (and
  (= result3 (is_nat32
             (t_strong_data_type__content data__create_type__result12)))
  (= (= result3 true)
  (= (to_rep1
     (rec__data__t_strong_data_type__data_type
     (us_split_discrs1
     (t_strong_data_type__content data__create_type__result12)))) 1))))

;; H
  (assert (= result3 true))

(assert
;; WP_parameter_def
 ;; File "data.ads", line 19, characters 0-0
  (not
  (= (is_nat32 (t_strong_data_type__content data__create_type__result12)) true)))
(check-sat)
(exit)
