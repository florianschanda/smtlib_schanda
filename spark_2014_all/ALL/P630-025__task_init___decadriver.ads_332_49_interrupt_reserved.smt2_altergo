(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int : t -> int

logic of_int : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic to_int1 : t1 -> int

logic of_int1 : int -> t1

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  32)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (32 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 32))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 32))))))

logic to_int2 : t2 -> int

logic of_int2 : int -> t2

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

predicate sle2(v1: t2, v2: t2) = (to_int2(v1) <= to_int2(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

predicate sge2(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) + tqtint2(v2)) <  4294967296) -> (tqtint2(add2(v1,
  v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  4294967296)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 4294967296)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) * tqtint2(v2)) <  4294967296) -> (tqtint2(mul2(v1,
  v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 4294967296)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int2(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 32)]. (eq_sub2(x, y, 0, 32) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq2 : t2, t2 -> bool

axiom bool_eq_def2 :
  (forall x:t2. forall y:t2 [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic bool_ne2 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne2(x, y)]. (((not (x = y)) -> (bool_ne2(x,
  y) = true)) and ((x = y) -> (bool_ne2(x, y) = false))))

logic bool_lt2 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt2(x, y)]. ((ult2(x, y) -> (bool_lt2(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt2(x, y) = false))))

logic bool_le2 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le2(x, y)]. ((ule2(x, y) -> (bool_le2(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le2(x, y) = false))))

logic bool_gt2 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt2(x, y)]. ((ugt2(x, y) -> (bool_gt2(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt2(x, y) = false))))

logic bool_ge2 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge2(x, y)]. ((uge2(x, y) -> (bool_ge2(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge2(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic to_int3 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int3(b)]. (((b = true) -> (to_int3(b) = 1)) and
  ((not (b = true)) -> (to_int3(b) = 0))))

logic of_int3 : int -> bool

axiom of_int_def :
  (forall i:int [of_int3(i)]. (((i = 0) -> (of_int3(i) = false)) and
  ((not (i = 0)) -> (of_int3(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type bits_1

predicate in_range1(x: t) = (ule(of_int(0), x) and ule(x, of_int(1)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq4 : int, int -> bool

logic bool_ne3 : int, int -> bool

logic bool_lt3 : int, int -> bool

logic bool_le3 : int, int -> bool

logic bool_gt3 : int, int -> bool

logic bool_ge3 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne3(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt3(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le3(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt3(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge3(x, y) = true) <-> (y <= x))))

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : bits_1, bits_1 -> bool

logic dummy : bits_1

type bits_1__ref = { bits_1__content : bits_1
}

function bits_1__ref___projection(a: bits_1__ref) : bits_1 =
  (a).bits_1__content

logic to_rep : bits_1 -> t

logic of_rep : t -> bits_1

axiom inversion_axiom :
  (forall x:bits_1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:bits_1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (in_range1(urem(x, of_int(2))) ->
  (to_rep(of_rep(x)) = urem(x, of_int(2)))))

function to_int4(x: bits_1) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:bits_1 [to_int4(x)]. in_range_int(to_int4(x)))

type bits_2

predicate in_range2(x: t) = (ule(of_int(0), x) and ule(x, of_int(3)))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : bits_2, bits_2 -> bool

logic dummy1 : bits_2

type bits_2__ref = { bits_2__content : bits_2
}

function bits_2__ref___projection(a: bits_2__ref) : bits_2 =
  (a).bits_2__content

logic to_rep1 : bits_2 -> t

logic of_rep1 : t -> bits_2

axiom inversion_axiom1 :
  (forall x:bits_2 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:bits_2 [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (in_range2(urem(x, of_int(4))) ->
  (to_rep1(of_rep1(x)) = urem(x, of_int(4)))))

function to_int5(x: bits_2) : int = tqtint(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:bits_2 [to_int5(x)]. in_range_int1(to_int5(x)))

type bits_3

predicate in_range3(x: t) = (ule(of_int(0), x) and ule(x, of_int(7)))

predicate in_range_int2(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq7 : t, t -> bool

axiom bool_eq_def6 :
  (forall x:t. forall y:t [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : bits_3, bits_3 -> bool

logic dummy2 : bits_3

type bits_3__ref = { bits_3__content : bits_3
}

function bits_3__ref___projection(a: bits_3__ref) : bits_3 =
  (a).bits_3__content

logic to_rep2 : bits_3 -> t

logic of_rep2 : t -> bits_3

axiom inversion_axiom2 :
  (forall x:bits_3 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:bits_3 [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (in_range3(urem(x, of_int(8))) ->
  (to_rep2(of_rep2(x)) = urem(x, of_int(8)))))

function to_int6(x: bits_3) : int = tqtint(to_rep2(x))

axiom range_int_axiom2 :
  (forall x:bits_3 [to_int6(x)]. in_range_int2(to_int6(x)))

type bits_5

predicate in_range4(x: t) = (ule(of_int(0), x) and ule(x, of_int(31)))

predicate in_range_int3(x: int) = ((0 <= x) and (x <= 31))

logic bool_eq8 : t, t -> bool

axiom bool_eq_def7 :
  (forall x:t. forall y:t [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq3 : bits_5, bits_5 -> bool

logic dummy3 : bits_5

type bits_5__ref = { bits_5__content : bits_5
}

function bits_5__ref___projection(a: bits_5__ref) : bits_5 =
  (a).bits_5__content

logic to_rep3 : bits_5 -> t

logic of_rep3 : t -> bits_5

axiom inversion_axiom3 :
  (forall x:bits_5 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:bits_5 [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:t [to_rep3(of_rep3(x))]. (in_range4(urem(x, of_int(32))) ->
  (to_rep3(of_rep3(x)) = urem(x, of_int(32)))))

function to_int7(x: bits_5) : int = tqtint(to_rep3(x))

axiom range_int_axiom3 :
  (forall x:bits_5 [to_int7(x)]. in_range_int3(to_int7(x)))

type us_split_fields = { rec__dw1000__register_types__sys_cfg_type__ffen :
bits_1; rec__dw1000__register_types__sys_cfg_type__ffbc : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffab : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffad : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffaa : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffam : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffar : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffa4 : bits_1;
rec__dw1000__register_types__sys_cfg_type__ffa5 : bits_1;
rec__dw1000__register_types__sys_cfg_type__hirq_pol : bits_1;
rec__dw1000__register_types__sys_cfg_type__spi_edge : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_fce : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_drxb : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_phe : bits_1;
rec__dw1000__register_types__sys_cfg_type__dis_rsde : bits_1;
rec__dw1000__register_types__sys_cfg_type__fcs_int2f : bits_1;
rec__dw1000__register_types__sys_cfg_type__phr_mode : bits_2;
rec__dw1000__register_types__sys_cfg_type__dis_stxp : bits_1;
rec__dw1000__register_types__sys_cfg_type__rxm110k : bits_1;
rec__dw1000__register_types__sys_cfg_type__rxwtoe : bits_1;
rec__dw1000__register_types__sys_cfg_type__rxautr : bits_1;
rec__dw1000__register_types__sys_cfg_type__autoack : bits_1;
rec__dw1000__register_types__sys_cfg_type__aackpend : bits_1;
rec__dw1000__register_types__sys_cfg_type__reserved_1 : bits_3;
rec__dw1000__register_types__sys_cfg_type__reserved_2 : bits_5
}

function us_split_fields_FFEN__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffen

function us_split_fields_FFBC__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffbc

function us_split_fields_FFAB__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffab

function us_split_fields_FFAD__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffad

function us_split_fields_FFAA__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffaa

function us_split_fields_FFAM__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffam

function us_split_fields_FFAR__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffar

function us_split_fields_FFA4__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffa4

function us_split_fields_FFA5__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__ffa5

function us_split_fields_HIRQ_POL__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__hirq_pol

function us_split_fields_SPI_EDGE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__spi_edge

function us_split_fields_DIS_FCE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_fce

function us_split_fields_DIS_DRXB__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_drxb

function us_split_fields_DIS_PHE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_phe

function us_split_fields_DIS_RSDE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_rsde

function us_split_fields_FCS_INT2F__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__fcs_int2f

function us_split_fields_PHR_MODE__projection(a: us_split_fields) : bits_2 =
  (a).rec__dw1000__register_types__sys_cfg_type__phr_mode

function us_split_fields_DIS_STXP__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__dis_stxp

function us_split_fields_RXM110K__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__rxm110k

function us_split_fields_RXWTOE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__rxwtoe

function us_split_fields_RXAUTR__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__rxautr

function us_split_fields_AUTOACK__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__autoack

function us_split_fields_AACKPEND__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__sys_cfg_type__aackpend

function us_split_fields_Reserved_1__projection(a: us_split_fields) : bits_3 =
  (a).rec__dw1000__register_types__sys_cfg_type__reserved_1

function us_split_fields_Reserved_2__projection(a: us_split_fields) : bits_5 =
  (a).rec__dw1000__register_types__sys_cfg_type__reserved_2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  (((((((((((((((((((((((((((to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen)) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f))) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend))) and
  (to_rep2(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1) = to_rep2(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1))) and
  (to_rep3(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2) = to_rep3(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2))) ->
  (bool_eq9(a, b) = true)) and
  ((not (((((((((((((((((((((((((to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffen)) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffbc))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffab))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffad))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffaa))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffam))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffar))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa4))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__ffa5))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__hirq_pol))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__spi_edge))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_fce))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_drxb))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_phe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_rsde))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__fcs_int2f))) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__phr_mode))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__dis_stxp))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxm110k))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxwtoe))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__rxautr))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__autoack))) and
  (to_rep(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend) = to_rep(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__aackpend))) and
  (to_rep2(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1) = to_rep2(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_1))) and
  (to_rep3(((a).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2) = to_rep3(((b).us_split_fields1).rec__dw1000__register_types__sys_cfg_type__reserved_2)))) ->
  (bool_eq9(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic dw1000__register_types__sys_cfg_type__ffen__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffen__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffen__position : int

axiom dw1000__register_types__sys_cfg_type__ffen__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffen__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffen__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffen__first__bit <  dw1000__register_types__sys_cfg_type__ffen__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffen__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffen__position)

logic dw1000__register_types__sys_cfg_type__ffbc__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffbc__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffbc__position : int

axiom dw1000__register_types__sys_cfg_type__ffbc__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffbc__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffbc__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffbc__first__bit <  dw1000__register_types__sys_cfg_type__ffbc__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffbc__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffbc__position)

logic dw1000__register_types__sys_cfg_type__ffab__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffab__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffab__position : int

axiom dw1000__register_types__sys_cfg_type__ffab__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffab__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffab__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffab__first__bit <  dw1000__register_types__sys_cfg_type__ffab__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffab__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffab__position)

logic dw1000__register_types__sys_cfg_type__ffad__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffad__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffad__position : int

axiom dw1000__register_types__sys_cfg_type__ffad__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffad__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffad__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffad__first__bit <  dw1000__register_types__sys_cfg_type__ffad__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffad__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffad__position)

logic dw1000__register_types__sys_cfg_type__ffaa__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffaa__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffaa__position : int

axiom dw1000__register_types__sys_cfg_type__ffaa__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffaa__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffaa__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffaa__first__bit <  dw1000__register_types__sys_cfg_type__ffaa__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffaa__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffaa__position)

logic dw1000__register_types__sys_cfg_type__ffam__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffam__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffam__position : int

axiom dw1000__register_types__sys_cfg_type__ffam__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffam__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffam__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffam__first__bit <  dw1000__register_types__sys_cfg_type__ffam__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffam__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffam__position)

logic dw1000__register_types__sys_cfg_type__ffar__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffar__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffar__position : int

axiom dw1000__register_types__sys_cfg_type__ffar__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffar__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffar__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffar__first__bit <  dw1000__register_types__sys_cfg_type__ffar__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffar__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffar__position)

logic dw1000__register_types__sys_cfg_type__ffa4__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffa4__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffa4__position : int

axiom dw1000__register_types__sys_cfg_type__ffa4__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa4__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffa4__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffa4__first__bit <  dw1000__register_types__sys_cfg_type__ffa4__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffa4__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa4__position)

logic dw1000__register_types__sys_cfg_type__ffa5__first__bit : int

logic dw1000__register_types__sys_cfg_type__ffa5__last__bit : int

logic dw1000__register_types__sys_cfg_type__ffa5__position : int

axiom dw1000__register_types__sys_cfg_type__ffa5__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa5__first__bit)

axiom dw1000__register_types__sys_cfg_type__ffa5__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__ffa5__first__bit <  dw1000__register_types__sys_cfg_type__ffa5__last__bit)

axiom dw1000__register_types__sys_cfg_type__ffa5__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__ffa5__position)

logic dw1000__register_types__sys_cfg_type__hirq_pol__first__bit : int

logic dw1000__register_types__sys_cfg_type__hirq_pol__last__bit : int

logic dw1000__register_types__sys_cfg_type__hirq_pol__position : int

axiom dw1000__register_types__sys_cfg_type__hirq_pol__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__hirq_pol__first__bit)

axiom dw1000__register_types__sys_cfg_type__hirq_pol__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__hirq_pol__first__bit <  dw1000__register_types__sys_cfg_type__hirq_pol__last__bit)

axiom dw1000__register_types__sys_cfg_type__hirq_pol__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__hirq_pol__position)

logic dw1000__register_types__sys_cfg_type__spi_edge__first__bit : int

logic dw1000__register_types__sys_cfg_type__spi_edge__last__bit : int

logic dw1000__register_types__sys_cfg_type__spi_edge__position : int

axiom dw1000__register_types__sys_cfg_type__spi_edge__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__spi_edge__first__bit)

axiom dw1000__register_types__sys_cfg_type__spi_edge__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__spi_edge__first__bit <  dw1000__register_types__sys_cfg_type__spi_edge__last__bit)

axiom dw1000__register_types__sys_cfg_type__spi_edge__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__spi_edge__position)

logic dw1000__register_types__sys_cfg_type__dis_fce__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_fce__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_fce__position : int

axiom dw1000__register_types__sys_cfg_type__dis_fce__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_fce__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_fce__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_fce__first__bit <  dw1000__register_types__sys_cfg_type__dis_fce__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_fce__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_fce__position)

logic dw1000__register_types__sys_cfg_type__dis_drxb__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_drxb__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_drxb__position : int

axiom dw1000__register_types__sys_cfg_type__dis_drxb__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_drxb__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_drxb__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_drxb__first__bit <  dw1000__register_types__sys_cfg_type__dis_drxb__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_drxb__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_drxb__position)

logic dw1000__register_types__sys_cfg_type__dis_phe__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_phe__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_phe__position : int

axiom dw1000__register_types__sys_cfg_type__dis_phe__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_phe__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_phe__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_phe__first__bit <  dw1000__register_types__sys_cfg_type__dis_phe__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_phe__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_phe__position)

logic dw1000__register_types__sys_cfg_type__dis_rsde__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_rsde__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_rsde__position : int

axiom dw1000__register_types__sys_cfg_type__dis_rsde__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_rsde__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_rsde__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_rsde__first__bit <  dw1000__register_types__sys_cfg_type__dis_rsde__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_rsde__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_rsde__position)

logic dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit : int

logic dw1000__register_types__sys_cfg_type__fcs_int2f__last__bit : int

logic dw1000__register_types__sys_cfg_type__fcs_int2f__position : int

axiom dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit)

axiom dw1000__register_types__sys_cfg_type__fcs_int2f__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__fcs_int2f__first__bit <  dw1000__register_types__sys_cfg_type__fcs_int2f__last__bit)

axiom dw1000__register_types__sys_cfg_type__fcs_int2f__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__fcs_int2f__position)

logic dw1000__register_types__sys_cfg_type__phr_mode__first__bit : int

logic dw1000__register_types__sys_cfg_type__phr_mode__last__bit : int

logic dw1000__register_types__sys_cfg_type__phr_mode__position : int

axiom dw1000__register_types__sys_cfg_type__phr_mode__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__phr_mode__first__bit)

axiom dw1000__register_types__sys_cfg_type__phr_mode__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__phr_mode__first__bit <  dw1000__register_types__sys_cfg_type__phr_mode__last__bit)

axiom dw1000__register_types__sys_cfg_type__phr_mode__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__phr_mode__position)

logic dw1000__register_types__sys_cfg_type__dis_stxp__first__bit : int

logic dw1000__register_types__sys_cfg_type__dis_stxp__last__bit : int

logic dw1000__register_types__sys_cfg_type__dis_stxp__position : int

axiom dw1000__register_types__sys_cfg_type__dis_stxp__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_stxp__first__bit)

axiom dw1000__register_types__sys_cfg_type__dis_stxp__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__dis_stxp__first__bit <  dw1000__register_types__sys_cfg_type__dis_stxp__last__bit)

axiom dw1000__register_types__sys_cfg_type__dis_stxp__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__dis_stxp__position)

logic dw1000__register_types__sys_cfg_type__rxm110k__first__bit : int

logic dw1000__register_types__sys_cfg_type__rxm110k__last__bit : int

logic dw1000__register_types__sys_cfg_type__rxm110k__position : int

axiom dw1000__register_types__sys_cfg_type__rxm110k__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxm110k__first__bit)

axiom dw1000__register_types__sys_cfg_type__rxm110k__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__rxm110k__first__bit <  dw1000__register_types__sys_cfg_type__rxm110k__last__bit)

axiom dw1000__register_types__sys_cfg_type__rxm110k__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxm110k__position)

logic dw1000__register_types__sys_cfg_type__rxwtoe__first__bit : int

logic dw1000__register_types__sys_cfg_type__rxwtoe__last__bit : int

logic dw1000__register_types__sys_cfg_type__rxwtoe__position : int

axiom dw1000__register_types__sys_cfg_type__rxwtoe__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxwtoe__first__bit)

axiom dw1000__register_types__sys_cfg_type__rxwtoe__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__rxwtoe__first__bit <  dw1000__register_types__sys_cfg_type__rxwtoe__last__bit)

axiom dw1000__register_types__sys_cfg_type__rxwtoe__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxwtoe__position)

logic dw1000__register_types__sys_cfg_type__rxautr__first__bit : int

logic dw1000__register_types__sys_cfg_type__rxautr__last__bit : int

logic dw1000__register_types__sys_cfg_type__rxautr__position : int

axiom dw1000__register_types__sys_cfg_type__rxautr__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxautr__first__bit)

axiom dw1000__register_types__sys_cfg_type__rxautr__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__rxautr__first__bit <  dw1000__register_types__sys_cfg_type__rxautr__last__bit)

axiom dw1000__register_types__sys_cfg_type__rxautr__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__rxautr__position)

logic dw1000__register_types__sys_cfg_type__autoack__first__bit : int

logic dw1000__register_types__sys_cfg_type__autoack__last__bit : int

logic dw1000__register_types__sys_cfg_type__autoack__position : int

axiom dw1000__register_types__sys_cfg_type__autoack__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__autoack__first__bit)

axiom dw1000__register_types__sys_cfg_type__autoack__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__autoack__first__bit <  dw1000__register_types__sys_cfg_type__autoack__last__bit)

axiom dw1000__register_types__sys_cfg_type__autoack__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__autoack__position)

logic dw1000__register_types__sys_cfg_type__aackpend__first__bit : int

logic dw1000__register_types__sys_cfg_type__aackpend__last__bit : int

logic dw1000__register_types__sys_cfg_type__aackpend__position : int

axiom dw1000__register_types__sys_cfg_type__aackpend__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__aackpend__first__bit)

axiom dw1000__register_types__sys_cfg_type__aackpend__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__aackpend__first__bit <  dw1000__register_types__sys_cfg_type__aackpend__last__bit)

axiom dw1000__register_types__sys_cfg_type__aackpend__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__aackpend__position)

logic dw1000__register_types__sys_cfg_type__reserved_1__first__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_1__last__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_1__position : int

axiom dw1000__register_types__sys_cfg_type__reserved_1__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_1__first__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_1__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__reserved_1__first__bit <  dw1000__register_types__sys_cfg_type__reserved_1__last__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_1__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_1__position)

logic dw1000__register_types__sys_cfg_type__reserved_2__first__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_2__last__bit : int

logic dw1000__register_types__sys_cfg_type__reserved_2__position : int

axiom dw1000__register_types__sys_cfg_type__reserved_2__first__bit_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_2__first__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_2__last__bit_axiom :
  (dw1000__register_types__sys_cfg_type__reserved_2__first__bit <  dw1000__register_types__sys_cfg_type__reserved_2__last__bit)

axiom dw1000__register_types__sys_cfg_type__reserved_2__position_axiom :
  (0 <= dw1000__register_types__sys_cfg_type__reserved_2__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : bits_1

logic dummy5 : bits_1

logic dummy6 : bits_1

logic dummy7 : bits_1

logic dummy8 : bits_1

logic dummy9 : bits_1

logic dummy10 : bits_1

logic dummy11 : bits_1

logic dummy12 : bits_1

logic dummy13 : bits_1

logic dummy14 : bits_1

logic dummy15 : bits_1

logic dummy16 : bits_1

logic dummy17 : bits_1

logic dummy18 : bits_1

logic dummy19 : bits_1

logic dummy20 : bits_2

logic dummy21 : bits_1

logic dummy22 : bits_1

logic dummy23 : bits_1

logic dummy24 : bits_1

logic dummy25 : bits_1

logic dummy26 : bits_1

logic dummy27 : bits_3

logic dummy28 : bits_5

type sys_cfg_type__ref = { sys_cfg_type__content : us_rep
}

function sys_cfg_type__ref___projection(a: sys_cfg_type__ref) : us_rep =
  (a).sys_cfg_type__content

type bits_16

logic attr__ATTRIBUTE_MODULUS : t1

logic bool_eq10 : t1, t1 -> bool

axiom bool_eq_def9 :
  (forall x:t1. forall y:t1 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq5 : bits_16, bits_16 -> bool

logic dummy29 : bits_16

type bits_16__ref = { bits_16__content : bits_16
}

function bits_16__ref___projection(a: bits_16__ref) : bits_16 =
  (a).bits_16__content

type bits_32

logic attr__ATTRIBUTE_MODULUS1 : t2

logic bool_eq11 : t2, t2 -> bool

axiom bool_eq_def10 :
  (forall x:t2. forall y:t2 [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t2

logic user_eq6 : bits_32, bits_32 -> bool

logic dummy30 : bits_32

type bits_32__ref = { bits_32__content : bits_32
}

function bits_32__ref___projection(a: bits_32__ref) : bits_32 =
  (a).bits_32__content

logic to_rep4 : bits_32 -> t2

logic of_rep4 : t2 -> bits_32

axiom inversion_axiom4 :
  (forall x:bits_32 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : true

axiom coerce_axiom4 :
  (forall x:t2 [to_rep4(of_rep4(x))]. (to_rep4(of_rep4(x)) = x))

function to_int8(x: bits_32) : int = tqtint2(to_rep4(x))

axiom range_int_axiom4 :
  (forall x:bits_32 [to_int8(x)]. uint_in_range2(to_int8(x)))

type map__ref = { map__content : (int,bits_32) farray
}

logic slide : (int,bits_32) farray, int, int -> (int,bits_32) farray

axiom slide_eq :
  (forall a:(int,bits_32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bits_32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bits_32) farray, int, int, (int,bits_32) farray, int,
  int -> (int,bits_32) farray

axiom concat_def :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bits_32, int -> (int,bits_32) farray

axiom singleton_def :
  (forall v:bits_32.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq12 : (int,bits_32) farray, int, int, (int,bits_32) farray, int,
  int -> bool

axiom bool_eq_def11 :
  (forall a:(int,bits_32) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bits_32) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_184:int. ((((a__first <= temp___idx_184) and
  (temp___idx_184 <= a__last)) and
  (to_rep4((a[temp___idx_184])) = to_rep4((b[((b__first - a__first) + temp___idx_184)])))) or
  (not ((a__first <= temp___idx_184) and (temp___idx_184 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_184:int. (((a__first <= temp___idx_184) and
  (temp___idx_184 <= a__last)) ->
  (to_rep4((a[temp___idx_184])) = to_rep4((b[((b__first - a__first) + temp___idx_184)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_184:int. (((a__first <= temp___idx_184) and
  (temp___idx_184 <= a__last)) ->
  (to_rep4((a[temp___idx_184])) = to_rep4((b[((b__first - a__first) + temp___idx_184)])))))))))

logic compare : (int,bits_32) farray, int, int, (int,bits_32) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq12(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq12(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult2(to_rep4((a[(i + 1)])), to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bits_32) farray. forall b:(int,bits_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq12(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt2(to_rep4((a[(j + 1)])), to_rep4((b[(i + 1)]))))))))))))

type us_split_fields2 = { rec__decadriver__driver_type__part_id : bits_32;
rec__decadriver__driver_type__lot_id : bits_32;
rec__decadriver__driver_type__antenna_delay_prf_64 : bits_16;
rec__decadriver__driver_type__antenna_delay_prf_16 : bits_16;
rec__decadriver__driver_type__xtal_trim : bits_5;
rec__decadriver__driver_type__otp_tx_power_levels : (int,bits_32) farray;
rec__decadriver__driver_type__long_frames : bool;
rec__decadriver__driver_type__sys_cfg_reg : us_rep;
rec__decadriver__driver_type__use_otp_xtal_trim : bool;
rec__decadriver__driver_type__use_otp_antenna_delay : bool;
rec__decadriver__driver_type__detect_frame_timeout : bool;
rec__decadriver__driver_type__detect_sfd_timeout : bool;
rec__decadriver__driver_type__detect_phr_error : bool;
rec__decadriver__driver_type__detect_rs_error : bool;
rec__decadriver__driver_type__detect_fcs_error : bool
}

function us_split_fields_Part_ID__projection(a: us_split_fields2) : bits_32 =
  (a).rec__decadriver__driver_type__part_id

function us_split_fields_Lot_ID__projection(a: us_split_fields2) : bits_32 =
  (a).rec__decadriver__driver_type__lot_id

function us_split_fields_Antenna_Delay_PRF_64__projection(a: us_split_fields2) : bits_16 =
  (a).rec__decadriver__driver_type__antenna_delay_prf_64

function us_split_fields_Antenna_Delay_PRF_16__projection(a: us_split_fields2) : bits_16 =
  (a).rec__decadriver__driver_type__antenna_delay_prf_16

function us_split_fields_XTAL_Trim__projection(a: us_split_fields2) : bits_5 =
  (a).rec__decadriver__driver_type__xtal_trim

function us_split_fields_OTP_Tx_Power_Levels__projection(a: us_split_fields2) : (int,bits_32) farray =
  (a).rec__decadriver__driver_type__otp_tx_power_levels

function us_split_fields_Long_Frames__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__long_frames

function us_split_fields_SYS_CFG_Reg__projection(a: us_split_fields2) : us_rep =
  (a).rec__decadriver__driver_type__sys_cfg_reg

function us_split_fields_Use_OTP_XTAL_Trim__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__use_otp_xtal_trim

function us_split_fields_Use_OTP_Antenna_Delay__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__use_otp_antenna_delay

function us_split_fields_Detect_Frame_Timeout__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__detect_frame_timeout

function us_split_fields_Detect_SFD_Timeout__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__detect_sfd_timeout

function us_split_fields_Detect_PHR_Error__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__detect_phr_error

function us_split_fields_Detect_RS_Error__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__detect_rs_error

function us_split_fields_Detect_FCS_Error__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__driver_type__detect_fcs_error

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_140__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_141__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic decadriver__driver_type__part_id__first__bit : int

logic decadriver__driver_type__part_id__last__bit : int

logic decadriver__driver_type__part_id__position : int

axiom decadriver__driver_type__part_id__first__bit_axiom :
  (0 <= decadriver__driver_type__part_id__first__bit)

axiom decadriver__driver_type__part_id__last__bit_axiom :
  (decadriver__driver_type__part_id__first__bit <  decadriver__driver_type__part_id__last__bit)

axiom decadriver__driver_type__part_id__position_axiom :
  (0 <= decadriver__driver_type__part_id__position)

logic decadriver__driver_type__lot_id__first__bit : int

logic decadriver__driver_type__lot_id__last__bit : int

logic decadriver__driver_type__lot_id__position : int

axiom decadriver__driver_type__lot_id__first__bit_axiom :
  (0 <= decadriver__driver_type__lot_id__first__bit)

axiom decadriver__driver_type__lot_id__last__bit_axiom :
  (decadriver__driver_type__lot_id__first__bit <  decadriver__driver_type__lot_id__last__bit)

axiom decadriver__driver_type__lot_id__position_axiom :
  (0 <= decadriver__driver_type__lot_id__position)

logic decadriver__driver_type__antenna_delay_prf_64__first__bit : int

logic decadriver__driver_type__antenna_delay_prf_64__last__bit : int

logic decadriver__driver_type__antenna_delay_prf_64__position : int

axiom decadriver__driver_type__antenna_delay_prf_64__first__bit_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_64__first__bit)

axiom decadriver__driver_type__antenna_delay_prf_64__last__bit_axiom :
  (decadriver__driver_type__antenna_delay_prf_64__first__bit <  decadriver__driver_type__antenna_delay_prf_64__last__bit)

axiom decadriver__driver_type__antenna_delay_prf_64__position_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_64__position)

logic decadriver__driver_type__antenna_delay_prf_16__first__bit : int

logic decadriver__driver_type__antenna_delay_prf_16__last__bit : int

logic decadriver__driver_type__antenna_delay_prf_16__position : int

axiom decadriver__driver_type__antenna_delay_prf_16__first__bit_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_16__first__bit)

axiom decadriver__driver_type__antenna_delay_prf_16__last__bit_axiom :
  (decadriver__driver_type__antenna_delay_prf_16__first__bit <  decadriver__driver_type__antenna_delay_prf_16__last__bit)

axiom decadriver__driver_type__antenna_delay_prf_16__position_axiom :
  (0 <= decadriver__driver_type__antenna_delay_prf_16__position)

logic decadriver__driver_type__xtal_trim__first__bit : int

logic decadriver__driver_type__xtal_trim__last__bit : int

logic decadriver__driver_type__xtal_trim__position : int

axiom decadriver__driver_type__xtal_trim__first__bit_axiom :
  (0 <= decadriver__driver_type__xtal_trim__first__bit)

axiom decadriver__driver_type__xtal_trim__last__bit_axiom :
  (decadriver__driver_type__xtal_trim__first__bit <  decadriver__driver_type__xtal_trim__last__bit)

axiom decadriver__driver_type__xtal_trim__position_axiom :
  (0 <= decadriver__driver_type__xtal_trim__position)

logic decadriver__driver_type__otp_tx_power_levels__first__bit : int

logic decadriver__driver_type__otp_tx_power_levels__last__bit : int

logic decadriver__driver_type__otp_tx_power_levels__position : int

axiom decadriver__driver_type__otp_tx_power_levels__first__bit_axiom :
  (0 <= decadriver__driver_type__otp_tx_power_levels__first__bit)

axiom decadriver__driver_type__otp_tx_power_levels__last__bit_axiom :
  (decadriver__driver_type__otp_tx_power_levels__first__bit <  decadriver__driver_type__otp_tx_power_levels__last__bit)

axiom decadriver__driver_type__otp_tx_power_levels__position_axiom :
  (0 <= decadriver__driver_type__otp_tx_power_levels__position)

logic decadriver__driver_type__long_frames__first__bit : int

logic decadriver__driver_type__long_frames__last__bit : int

logic decadriver__driver_type__long_frames__position : int

axiom decadriver__driver_type__long_frames__first__bit_axiom :
  (0 <= decadriver__driver_type__long_frames__first__bit)

axiom decadriver__driver_type__long_frames__last__bit_axiom :
  (decadriver__driver_type__long_frames__first__bit <  decadriver__driver_type__long_frames__last__bit)

axiom decadriver__driver_type__long_frames__position_axiom :
  (0 <= decadriver__driver_type__long_frames__position)

logic decadriver__driver_type__sys_cfg_reg__first__bit : int

logic decadriver__driver_type__sys_cfg_reg__last__bit : int

logic decadriver__driver_type__sys_cfg_reg__position : int

axiom decadriver__driver_type__sys_cfg_reg__first__bit_axiom :
  (0 <= decadriver__driver_type__sys_cfg_reg__first__bit)

axiom decadriver__driver_type__sys_cfg_reg__last__bit_axiom :
  (decadriver__driver_type__sys_cfg_reg__first__bit <  decadriver__driver_type__sys_cfg_reg__last__bit)

axiom decadriver__driver_type__sys_cfg_reg__position_axiom :
  (0 <= decadriver__driver_type__sys_cfg_reg__position)

logic decadriver__driver_type__use_otp_xtal_trim__first__bit : int

logic decadriver__driver_type__use_otp_xtal_trim__last__bit : int

logic decadriver__driver_type__use_otp_xtal_trim__position : int

axiom decadriver__driver_type__use_otp_xtal_trim__first__bit_axiom :
  (0 <= decadriver__driver_type__use_otp_xtal_trim__first__bit)

axiom decadriver__driver_type__use_otp_xtal_trim__last__bit_axiom :
  (decadriver__driver_type__use_otp_xtal_trim__first__bit <  decadriver__driver_type__use_otp_xtal_trim__last__bit)

axiom decadriver__driver_type__use_otp_xtal_trim__position_axiom :
  (0 <= decadriver__driver_type__use_otp_xtal_trim__position)

logic decadriver__driver_type__use_otp_antenna_delay__first__bit : int

logic decadriver__driver_type__use_otp_antenna_delay__last__bit : int

logic decadriver__driver_type__use_otp_antenna_delay__position : int

axiom decadriver__driver_type__use_otp_antenna_delay__first__bit_axiom :
  (0 <= decadriver__driver_type__use_otp_antenna_delay__first__bit)

axiom decadriver__driver_type__use_otp_antenna_delay__last__bit_axiom :
  (decadriver__driver_type__use_otp_antenna_delay__first__bit <  decadriver__driver_type__use_otp_antenna_delay__last__bit)

axiom decadriver__driver_type__use_otp_antenna_delay__position_axiom :
  (0 <= decadriver__driver_type__use_otp_antenna_delay__position)

logic decadriver__driver_type__detect_frame_timeout__first__bit : int

logic decadriver__driver_type__detect_frame_timeout__last__bit : int

logic decadriver__driver_type__detect_frame_timeout__position : int

axiom decadriver__driver_type__detect_frame_timeout__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_frame_timeout__first__bit)

axiom decadriver__driver_type__detect_frame_timeout__last__bit_axiom :
  (decadriver__driver_type__detect_frame_timeout__first__bit <  decadriver__driver_type__detect_frame_timeout__last__bit)

axiom decadriver__driver_type__detect_frame_timeout__position_axiom :
  (0 <= decadriver__driver_type__detect_frame_timeout__position)

logic decadriver__driver_type__detect_sfd_timeout__first__bit : int

logic decadriver__driver_type__detect_sfd_timeout__last__bit : int

logic decadriver__driver_type__detect_sfd_timeout__position : int

axiom decadriver__driver_type__detect_sfd_timeout__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_sfd_timeout__first__bit)

axiom decadriver__driver_type__detect_sfd_timeout__last__bit_axiom :
  (decadriver__driver_type__detect_sfd_timeout__first__bit <  decadriver__driver_type__detect_sfd_timeout__last__bit)

axiom decadriver__driver_type__detect_sfd_timeout__position_axiom :
  (0 <= decadriver__driver_type__detect_sfd_timeout__position)

logic decadriver__driver_type__detect_phr_error__first__bit : int

logic decadriver__driver_type__detect_phr_error__last__bit : int

logic decadriver__driver_type__detect_phr_error__position : int

axiom decadriver__driver_type__detect_phr_error__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_phr_error__first__bit)

axiom decadriver__driver_type__detect_phr_error__last__bit_axiom :
  (decadriver__driver_type__detect_phr_error__first__bit <  decadriver__driver_type__detect_phr_error__last__bit)

axiom decadriver__driver_type__detect_phr_error__position_axiom :
  (0 <= decadriver__driver_type__detect_phr_error__position)

logic decadriver__driver_type__detect_rs_error__first__bit : int

logic decadriver__driver_type__detect_rs_error__last__bit : int

logic decadriver__driver_type__detect_rs_error__position : int

axiom decadriver__driver_type__detect_rs_error__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_rs_error__first__bit)

axiom decadriver__driver_type__detect_rs_error__last__bit_axiom :
  (decadriver__driver_type__detect_rs_error__first__bit <  decadriver__driver_type__detect_rs_error__last__bit)

axiom decadriver__driver_type__detect_rs_error__position_axiom :
  (0 <= decadriver__driver_type__detect_rs_error__position)

logic decadriver__driver_type__detect_fcs_error__first__bit : int

logic decadriver__driver_type__detect_fcs_error__last__bit : int

logic decadriver__driver_type__detect_fcs_error__position : int

axiom decadriver__driver_type__detect_fcs_error__first__bit_axiom :
  (0 <= decadriver__driver_type__detect_fcs_error__first__bit)

axiom decadriver__driver_type__detect_fcs_error__last__bit_axiom :
  (decadriver__driver_type__detect_fcs_error__first__bit <  decadriver__driver_type__detect_fcs_error__last__bit)

axiom decadriver__driver_type__detect_fcs_error__position_axiom :
  (0 <= decadriver__driver_type__detect_fcs_error__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

type driver_type__ref = { driver_type__content : us_rep1
}

function driver_type__ref___projection(a: driver_type__ref) : us_rep1 =
  (a).driver_type__content

logic temp___4500 : t2 -> (int,bits_32) farray

axiom def_axiom :
  (forall temp___4502:t2.
  (forall temp___4503:int.
  ((temp___4500(temp___4502)[temp___4503]) = of_rep4(temp___4502))))

logic to_rep5 : bits_16 -> t1

logic of_rep5 : t1 -> bits_16

axiom inversion_axiom5 :
  (forall x:bits_16 [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : true

axiom coerce_axiom5 :
  (forall x:t1 [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int9(x: bits_16) : int = tqtint1(to_rep5(x))

axiom range_int_axiom5 :
  (forall x:bits_16 [to_int9(x)]. uint_in_range1(to_int9(x)))

logic self__ : bits_32

logic self__1 : bits_32

logic self__2 : bits_16

logic self__3 : bits_16

logic self__4 : bits_5

logic self__5 : (int,bits_32) farray

logic self__6 : bool

logic self__7 : bits_1

logic self__8 : bits_1

logic self__9 : bits_1

logic self__10 : bits_1

logic self__11 : bits_1

logic self__12 : bits_1

logic self__13 : bits_1

logic self__14 : bits_1

logic self__15 : bits_1

logic self__16 : bits_1

logic self__17 : bits_1

logic self__18 : bits_1

logic self__19 : bits_1

logic self__20 : bits_1

logic self__21 : bits_1

logic self__22 : bits_1

logic self__23 : bits_2

logic self__24 : bits_1

logic self__25 : bits_1

logic self__26 : bits_1

logic self__27 : bits_1

logic self__28 : bits_1

logic self__29 : bits_1

logic self__30 : bits_3

logic self__31 : bits_5

logic self__32 : bool

logic self__33 : bool

logic self__34 : bool

logic self__35 : bool

logic self__36 : bool

logic self__37 : bool

logic self__38 : bool

 (* File "decadriver.ads", line 242, characters 0-0 *)
goal WP_parameter_def : (forall temp___4600:bool. (temp___4600 = false))
