;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort my_integer 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (my_integer my_integer) Bool)

(declare-const dummy4 my_integer)

(declare-datatypes ()
((my_integer__ref (mk_my_integer__ref (my_integer__content my_integer)))))
(define-fun my_integer__ref___projection ((a my_integer__ref)) my_integer
  (my_integer__content a))

(define-fun dynamic_invariant1 ((temp___expr_139 Int)
  (temp___is_init_136 Bool) (temp___skip_constant_137 Bool)
  (temp___do_toplevel_138 Bool)) Bool (=>
                                      (or (= temp___is_init_136 true)
                                      (<= 1 10)) (in_range4 temp___expr_139)))

(declare-sort r1 0)

(declare-fun user_eq5 (r1 r1) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (r1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (r1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a r1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a r1)) (<= 0 (object__alignment1 a))))

(declare-const dummy5 r1)

(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content r1)))))
(define-fun r1__ref___projection ((a r1__ref)) r1 (r1__content a))

(declare-fun to_rep2 (my_integer) Int)

(declare-fun of_rep2 (Int) my_integer)

;; inversion_axiom
  (assert
  (forall ((x my_integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x my_integer)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__alignment_attribute__r2__d1 my_integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) my_integer
  (rec__alignment_attribute__r2__d1 a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__alignment_attribute__r2__d2 Bool)))))
(define-fun us_split_fields_D2__projection ((a us_split_fields)) Bool
  (rec__alignment_attribute__r2__d2 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun alignment_attribute__r2__d2__pred ((a us_rep)) Bool (= (to_rep2
                                                                   (rec__alignment_attribute__r2__d1
                                                                   (us_split_discrs1
                                                                   a))) 5))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__alignment_attribute__r2__d1
                           (us_split_discrs1 a))) (to_rep2
                                                  (rec__alignment_attribute__r2__d1
                                                  (us_split_discrs1 b))))
                        (=> (alignment_attribute__r2__d2__pred a)
                        (= (rec__alignment_attribute__r2__d2
                           (us_split_fields1 a)) (rec__alignment_attribute__r2__d2
                                                 (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const alignment_attribute__r2__d1__first__bit Int)

(declare-const alignment_attribute__r2__d1__last__bit Int)

(declare-const alignment_attribute__r2__d1__position Int)

;; alignment_attribute__r2__d1__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d1__first__bit))

;; alignment_attribute__r2__d1__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d1__first__bit alignment_attribute__r2__d1__last__bit))

;; alignment_attribute__r2__d1__position_axiom
  (assert (<= 0 alignment_attribute__r2__d1__position))

(declare-const alignment_attribute__r2__d2__first__bit Int)

(declare-const alignment_attribute__r2__d2__last__bit Int)

(declare-const alignment_attribute__r2__d2__position Int)

;; alignment_attribute__r2__d2__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d2__first__bit))

;; alignment_attribute__r2__d2__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d2__first__bit alignment_attribute__r2__d2__last__bit))

;; alignment_attribute__r2__d2__position_axiom
  (assert (<= 0 alignment_attribute__r2__d2__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes () ((r2__ref (mk_r2__ref (r2__content us_rep)))))
(define-fun r2__ref___projection ((a r2__ref)) us_rep (r2__content a))

(define-fun in_range5 ((rec__alignment_attribute__r2__d11 Int)
  (a us_rep)) Bool (= rec__alignment_attribute__r2__d11 (to_rep2
                                                        (rec__alignment_attribute__r2__d1
                                                        (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const alignment_attribute__r2__d1__first__bit1 Int)

(declare-const alignment_attribute__r2__d1__last__bit1 Int)

(declare-const alignment_attribute__r2__d1__position1 Int)

;; alignment_attribute__r2__d1__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d1__first__bit1))

;; alignment_attribute__r2__d1__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d1__first__bit1 alignment_attribute__r2__d1__last__bit1))

;; alignment_attribute__r2__d1__position_axiom
  (assert (<= 0 alignment_attribute__r2__d1__position1))

(declare-const alignment_attribute__r2__d2__first__bit1 Int)

(declare-const alignment_attribute__r2__d2__last__bit1 Int)

(declare-const alignment_attribute__r2__d2__position1 Int)

;; alignment_attribute__r2__d2__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d2__first__bit1))

;; alignment_attribute__r2__d2__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d2__first__bit1 alignment_attribute__r2__d2__last__bit1))

;; alignment_attribute__r2__d2__position_axiom
  (assert (<= 0 alignment_attribute__r2__d2__position1))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((sr2__ref (mk_sr2__ref (sr2__content us_rep)))))
(define-fun sr2__ref___projection ((a sr2__ref)) us_rep (sr2__content a))

(define-fun dynamic_invariant2 ((temp___expr_160 us_rep)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_158 true))
                                      (in_range5 5 temp___expr_160))
                                      (= (attr__constrained temp___expr_160) true)))

(define-fun default_initial_assumption ((temp___expr_162 us_rep)
  (temp___skip_top_level_163 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_162) true)
                                         (= (to_rep2
                                            (rec__alignment_attribute__r2__d1
                                            (us_split_discrs1
                                            temp___expr_162))) 5)))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__alignment_attribute__r3__i integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_I__projection ((a us_split_fields2)) integer
  (rec__alignment_attribute__r3__i a))

(define-fun us_split_fields___projection ((a us_split_fields2)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag Int)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___5__projection ((a us_rep1)) Int (attr__tag a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep1
                            (rec__alignment_attribute__r3__i
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__alignment_attribute__r3__i
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)

(declare-const us_tag Int)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-const alignment_attribute__r3__i__first__bit Int)

(declare-const alignment_attribute__r3__i__last__bit Int)

(declare-const alignment_attribute__r3__i__position Int)

;; alignment_attribute__r3__i__first__bit_axiom
  (assert (<= 0 alignment_attribute__r3__i__first__bit))

;; alignment_attribute__r3__i__last__bit_axiom
  (assert
  (< alignment_attribute__r3__i__first__bit alignment_attribute__r3__i__last__bit))

;; alignment_attribute__r3__i__position_axiom
  (assert (<= 0 alignment_attribute__r3__i__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes () ((r3__ref (mk_r3__ref (r3__content us_rep1)))))
(define-fun r3__ref___projection ((a r3__ref)) us_rep1 (r3__content a))

(define-fun default_initial_assumption1 ((temp___expr_170 us_rep1)
  (temp___skip_top_level_171 Bool)) Bool (= (attr__tag temp___expr_170)
  us_tag))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__alignment_attribute__r4__j integer)(rec__alignment_attribute__r3__i1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_J__projection ((a us_split_fields4)) integer
  (rec__alignment_attribute__r4__j a))

(define-fun us_split_fields_I__2__projection ((a us_split_fields4)) integer
  (rec__alignment_attribute__r3__i1 a))

(define-fun us_split_fields___2__projection ((a us_split_fields4)) us_private
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)(attr__tag1 Int)))))
(define-fun us_rep___6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun us_rep___7__projection ((a us_rep2)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer us_private) us_private)

(declare-fun extract__j (us_private) integer)

;; extract__j__conv
  (assert
  (forall ((j integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__j (hide_ext__ j rec__ext__2)) j))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep2)) us_rep1 (mk___rep1
                                          (mk___split_fields1
                                          (rec__alignment_attribute__r3__i1
                                          (us_split_fields5 a))
                                          (hide_ext__
                                          (rec__alignment_attribute__r4__j
                                          (us_split_fields5 a))
                                          (rec__ext__1 (us_split_fields5 a))))
                                          (attr__tag1 a)))

(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep2
                                          (mk___split_fields2
                                          (extract__j
                                          (rec__ext__ (us_split_fields3 r)))
                                          (rec__alignment_attribute__r3__i
                                          (us_split_fields3 r))
                                          (extract__ext__
                                          (rec__ext__ (us_split_fields3 r))))
                                          (attr__tag r)))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep1
                            (rec__alignment_attribute__r4__j
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__alignment_attribute__r4__j
                                                   (us_split_fields5 b))))
                         (= (to_rep1
                            (rec__alignment_attribute__r3__i1
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__alignment_attribute__r3__i1
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-const alignment_attribute__r4__j__first__bit Int)

(declare-const alignment_attribute__r4__j__last__bit Int)

(declare-const alignment_attribute__r4__j__position Int)

;; alignment_attribute__r4__j__first__bit_axiom
  (assert (<= 0 alignment_attribute__r4__j__first__bit))

;; alignment_attribute__r4__j__last__bit_axiom
  (assert
  (< alignment_attribute__r4__j__first__bit alignment_attribute__r4__j__last__bit))

;; alignment_attribute__r4__j__position_axiom
  (assert (<= 0 alignment_attribute__r4__j__position))

(declare-const alignment_attribute__r3__i__first__bit1 Int)

(declare-const alignment_attribute__r3__i__last__bit1 Int)

(declare-const alignment_attribute__r3__i__position1 Int)

;; alignment_attribute__r3__i__first__bit_axiom
  (assert (<= 0 alignment_attribute__r3__i__first__bit1))

;; alignment_attribute__r3__i__last__bit_axiom
  (assert
  (< alignment_attribute__r3__i__first__bit1 alignment_attribute__r3__i__last__bit1))

;; alignment_attribute__r3__i__position_axiom
  (assert (<= 0 alignment_attribute__r3__i__position1))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes () ((r4__ref (mk_r4__ref (r4__content us_rep2)))))
(define-fun r4__ref___projection ((a r4__ref)) us_rep2 (r4__content a))

(define-fun default_initial_assumption2 ((temp___expr_181 us_rep2)
  (temp___skip_top_level_182 Bool)) Bool (= (attr__tag1 temp___expr_181)
  us_tag1))

(declare-fun to_rep3 (positive) Int)

(declare-fun of_rep3 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int positive))))))
(declare-fun slide1 ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int positive) Int Int (Array Int positive) Int
  Int) (Array Int positive))

;; concat_def
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (positive Int) (Array Int positive))

;; singleton_def
  (assert
  (forall ((v positive))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int positive) Int Int (Array Int positive) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq5 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq5 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const dummy10 (Array Int positive))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array Int positive)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int positive)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array Int positive)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int positive))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int positive))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int positive))) (<= 0 (object__alignment6 a))))

(declare-fun user_eq10 ((Array Int positive) (Array Int positive)) Bool)

(declare-sort natural 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq11 (natural natural) Bool)

(declare-const dummy11 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep4 (natural) Int)

(declare-fun of_rep4 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep4 (select a temp___idx_133)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep4 (select a temp___idx_133)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare2 ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq6 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq6 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int natural))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int natural) (elts1 a))

(define-fun of_array1 ((a (Array Int natural)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size7 Int)

(declare-fun object__size7 ((Array Int natural)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int natural)) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment7 a))))

(define-fun bool_eq7 ((x us_t1)
  (y us_t1)) Bool (bool_eq6 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq12 (us_t1 us_t1) Bool)

(declare-const dummy12 us_t1)

(declare-datatypes ()
((unconstr_array__ref
 (mk_unconstr_array__ref (unconstr_array__content us_t1)))))
(define-fun unconstr_array__ref___projection ((a unconstr_array__ref)) us_t1
  (unconstr_array__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const int__ Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const s__first integer)

(declare-const s__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun in_range7 ((rec__alignment_attribute__r2__d11 Int)
  (a us_rep)) Bool (= rec__alignment_attribute__r2__d11 (to_rep2
                                                        (rec__alignment_attribute__r2__d1
                                                        (us_split_discrs1 a)))))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment8 a))))

(declare-const alignment_attribute__r2__d1__first__bit2 Int)

(declare-const alignment_attribute__r2__d1__last__bit2 Int)

(declare-const alignment_attribute__r2__d1__position2 Int)

;; alignment_attribute__r2__d1__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d1__first__bit2))

;; alignment_attribute__r2__d1__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d1__first__bit2 alignment_attribute__r2__d1__last__bit2))

;; alignment_attribute__r2__d1__position_axiom
  (assert (<= 0 alignment_attribute__r2__d1__position2))

(declare-const alignment_attribute__r2__d2__first__bit2 Int)

(declare-const alignment_attribute__r2__d2__last__bit2 Int)

(declare-const alignment_attribute__r2__d2__position2 Int)

;; alignment_attribute__r2__d2__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d2__first__bit2))

;; alignment_attribute__r2__d2__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d2__first__bit2 alignment_attribute__r2__d2__last__bit2))

;; alignment_attribute__r2__d2__position_axiom
  (assert (<= 0 alignment_attribute__r2__d2__position2))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes () ((trt2S__ref (mk_trt2S__ref (trt2S__content us_rep)))))
(define-fun trt2S__ref___projection ((a trt2S__ref)) us_rep (trt2S__content
                                                            a))

(define-fun dynamic_invariant3 ((temp___expr_206 us_rep)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_204 true))
                                      (in_range7 3 temp___expr_206))
                                      (= (attr__constrained temp___expr_206) true)))

(define-fun default_initial_assumption3 ((temp___expr_208 us_rep)
  (temp___skip_top_level_209 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_208) true)
                                         (= (to_rep2
                                            (rec__alignment_attribute__r2__d1
                                            (us_split_discrs1
                                            temp___expr_208))) 3)))

(declare-const rt2__split_discrs us_split_discrs)

(declare-const rt2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const rst2__split_discrs us_split_discrs)

(declare-const rst2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const rt3__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const rt4__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-fun alignment_attribute__ua__aggregate_def (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___243 Int))
  (forall ((temp___244 Int))
  (= (select (alignment_attribute__ua__aggregate_def temp___243) temp___244)
  (of_rep4 temp___243)))))

(declare-fun alignment_attribute__ca__aggregate_def (Int) (Array Int positive))

;; def_axiom
  (assert
  (forall ((temp___246 Int))
  (forall ((temp___247 Int))
  (= (select (alignment_attribute__ca__aggregate_def temp___246) temp___247)
  (of_rep3 temp___246)))))

(declare-fun temp___String_Literal_259 (tuple0) (Array Int character))

;; temp___String_Literal_259__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 4)) 116)) :pattern (
  (temp___String_Literal_259 us_void_param)) )))

(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_33)))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun default_initial_assumption4 ((temp___expr_153 us_rep)
  (temp___skip_top_level_154 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_153) false)
                                         (= (to_rep2
                                            (rec__alignment_attribute__r2__d1
                                            (us_split_discrs1
                                            temp___expr_153))) 1)))

(define-fun dynamic_invariant8 ((temp___expr_201 us_t1)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=>
                                      (not (= temp___skip_constant_199 true))
                                      (dynamic_property1 1 2147483647
                                      (first3 temp___expr_201)
                                      (last3 temp___expr_201))))

;; int____def_axiom
  (assert (= int__ 2))

(declare-const b Bool)

(declare-const s (Array Int character))

(declare-const m Int)

(declare-const ca (Array Int positive))

(declare-const ua (Array Int natural))

(declare-const us Int)

(declare-const us1 Int)

(declare-const result Bool)

(declare-const b1 Bool)

(declare-const result1 (Array Int character))

(declare-const s1 (Array Int character))

(declare-const result2 Int)

(declare-const m1 Int)

(declare-const result3 (Array Int positive))

(declare-const ca1 (Array Int positive))

(declare-const result4 (Array Int natural))

(declare-const ua1 (Array Int natural))

;; H
  (assert (and (= us 5) (in_range4 5)))

;; H
  (assert (= result b))

;; H
  (assert (= b1 (of_int 1)))

;; H
  (assert (in_range1 int__))

;; H
  (assert (= result1 s))

;; H
  (assert (= s1 (temp___String_Literal_259 Tuple0)))

;; H
  (assert (= (to_rep1 s__first) (to_rep1 (first (mk 1 4)))))

;; H
  (assert (= (to_rep1 s__last) (to_rep1 (last (mk 1 4)))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 s__first)
  (to_rep1 s__last)))

;; H
  (assert (= result2 m))

;; H
  (assert (= m1 10))

;; H
  (assert (in_range4 m1))

;; H
  (assert (and (= us1 3) (in_range4 3)))

;; H
  (assert
  (and (= rt2__attr__constrained true)
  (= (to_rep2 (rec__alignment_attribute__r2__d1 rt2__split_discrs)) 3)))

;; H
  (assert
  (and (= 3 (to_rep2 (rec__alignment_attribute__r2__d1 rt2__split_discrs)))
  (= rt2__attr__constrained true)))

;; H
  (assert
  (and (= rst2__attr__constrained true)
  (= (to_rep2 (rec__alignment_attribute__r2__d1 rst2__split_discrs)) 5)))

;; H
  (assert
  (and (= 5 (to_rep2 (rec__alignment_attribute__r2__d1 rst2__split_discrs)))
  (= rst2__attr__constrained true)))

;; H
  (assert (= rt3__attr__tag us_tag))

;; H
  (assert (= rt4__attr__tag us_tag1))

;; H
  (assert (= result3 ca))

;; H
  (assert (= ca1 (alignment_attribute__ca__aggregate_def 2)))

;; H
  (assert (= result4 ua))

;; H
  (assert (= ua1 (alignment_attribute__ua__aggregate_def 1)))

;; H
  (assert (<= 0 value__alignment1))

;; H
  (assert (<= 0 value__alignment2))

;; H
  (assert (<= 0 value__alignment3))

(assert
;; WP_parameter_def
 ;; File "alignment_attribute.adb", line 33, characters 0-0
  (not (<= 0 value__alignment4)))
(check-sat)
(exit)
