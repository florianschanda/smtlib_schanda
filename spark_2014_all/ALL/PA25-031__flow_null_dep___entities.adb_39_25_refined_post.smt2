;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-sort id_index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (id_index id_index) Bool)

(declare-const dummy1 id_index)

(declare-datatypes ()
((id_index__ref (mk_id_index__ref (id_index__content id_index)))))
(define-fun id_index__ref___projection ((a id_index__ref)) id_index (id_index__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 1 10)) (in_range2 temp___expr_135)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun get_current_cycles (Int) Int)

(declare-fun get_current_cycles__function_guard (Int Int) Bool)

(declare-fun get_current_cycles1 (Int) Int)

(declare-fun get_current_cycles__function_guard1 (Int Int) Bool)

;; get_current_cycles__post_axiom
  (assert
  (forall ((entities__current_cycles Int))
  (! (=> (dynamic_invariant entities__current_cycles true true true)
     (dynamic_invariant (get_current_cycles entities__current_cycles) true
     false true)) :pattern ((get_current_cycles entities__current_cycles)) )))

;; get_current_cycles__post_refine_axiom
  (assert
  (forall ((entities__current_cycles Int))
  (! (=> (dynamic_invariant entities__current_cycles true true true)
     (let ((result (get_current_cycles1 entities__current_cycles)))
     (and (= result entities__current_cycles) (dynamic_invariant result true
     false true)))) :pattern ((get_current_cycles1 entities__current_cycles)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun get_current_id (Int) Int)

(declare-fun get_current_id__function_guard (Int Int) Bool)

(declare-fun get_current_id1 (Int) Int)

(declare-fun get_current_id__function_guard1 (Int Int) Bool)

;; get_current_id__post_axiom
  (assert
  (forall ((entities__current_id Int))
  (! (=> (dynamic_invariant1 entities__current_id true true true)
     (dynamic_invariant1 (get_current_id entities__current_id) true false
     true)) :pattern ((get_current_id entities__current_id)) )))

;; get_current_id__post_refine_axiom
  (assert
  (forall ((entities__current_id Int))
  (! (=> (dynamic_invariant1 entities__current_id true true true)
     (let ((result (get_current_id1 entities__current_id)))
     (and (= result entities__current_id) (dynamic_invariant1 result true
     false true)))) :pattern ((get_current_id1 entities__current_id)) )))

(declare-const value Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const current_id Int)

(declare-const current_cycles Int)

(declare-const result Int)

(declare-const current_id1 Int)

(declare-const current_id2 Int)

(declare-const current_id3 Int)

;; H
  (assert (=> (<= 1 10) (in_range2 current_id)))

;; H
  (assert (in_range1 current_cycles))

;; H
  (assert (in_range2 value))

;; H
  (assert (= result current_id))

;; H
  (assert (= current_id1 value))

;; H
  (assert (= current_id1 current_id2))

;; H
  (assert (= current_id3 current_id1))

(assert
;; WP_parameter_def
 ;; File "entities.ads", line 33, characters 0-0
  (not (= current_id2 value)))
(check-sat)
(exit)
