(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy1 : (int,natural) farray

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

logic user_eq1 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields = { rec__declare_iterable__container__content :
(int,natural) farray
}

function us_split_fields_Content__projection(a: us_split_fields) : (int,natural) farray =
  (a).rec__declare_iterable__container__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  (((bool_eq3(((a).us_split_fields1).rec__declare_iterable__container__content,
  1, 100, ((b).us_split_fields1).rec__declare_iterable__container__content,
  1, 100) = true) -> (bool_eq4(a, b) = true)) and
  ((not (bool_eq3(((a).us_split_fields1).rec__declare_iterable__container__content,
  1, 100, ((b).us_split_fields1).rec__declare_iterable__container__content,
  1, 100) = true)) -> (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1({ us_split_fields1 = {
  rec__declare_iterable__container__content = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__declare_iterable__container__content = a } })))

logic declare_iterable__container__content__first__bit : int

logic declare_iterable__container__content__last__bit : int

logic declare_iterable__container__content__position : int

axiom declare_iterable__container__content__first__bit_axiom :
  (0 <= declare_iterable__container__content__first__bit)

axiom declare_iterable__container__content__last__bit_axiom :
  (declare_iterable__container__content__first__bit <  declare_iterable__container__content__last__bit)

axiom declare_iterable__container__content__position_axiom :
  (0 <= declare_iterable__container__content__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : (int,natural) farray

type container__ref = { container__content : us_rep
}

function container__ref___projection(a: container__ref) : us_rep =
  (a).container__content

logic has_element : us_rep, int -> bool

logic has_element__function_guard : bool, us_rep, int -> prop

type valid_cursor

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : valid_cursor, valid_cursor -> bool

logic dummy3 : valid_cursor

type valid_cursor__ref = { valid_cursor__content : valid_cursor
}

function valid_cursor__ref___projection(a: valid_cursor__ref) : valid_cursor =
  (a).valid_cursor__content

type cursor

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : cursor, cursor -> bool

logic dummy4 : cursor

type cursor__ref = { cursor__content : cursor
}

function cursor__ref___projection(a: cursor__ref) : cursor =
  (a).cursor__content

axiom has_element__post_axiom : true

axiom has_element__def_axiom :
  (forall x:(int,natural) farray.
  (forall c:int [has_element({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)]. ((has_element({
  us_split_fields1 = { rec__declare_iterable__container__content = x } },
  c) = true) <-> in_range2(c))))

logic next : us_rep, int -> int

logic next__function_guard : int, us_rep, int -> prop

axiom next__post_axiom :
  (forall x:(int,natural) farray.
  (forall c:int [next({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)]. ((in_range3(c) and
  (has_element({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c) = true)) ->
  in_range3(next({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)))))

axiom next__def_axiom :
  (forall x:(int,natural) farray.
  (forall c:int [next({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)]. (in_range3(c) ->
  (((c = 100) -> (next({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c) = 0)) and
  ((not (c = 100)) -> (next({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c) = (c + 1)))))))

logic first : us_rep -> int

logic first__function_guard : int, us_rep -> prop

axiom first__post_axiom :
  (forall x:(int,natural) farray [first({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } })]. in_range3(first({
  us_split_fields1 = { rec__declare_iterable__container__content = x } })))

axiom first__def_axiom :
  (forall x:(int,natural) farray [first({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } })]. (first({
  us_split_fields1 = { rec__declare_iterable__container__content = x }
  }) = 1))

logic element : us_rep, int -> int

logic element__function_guard : int, us_rep, int -> prop

axiom element__post_axiom :
  (forall x:(int,natural) farray.
  (forall c:int [element({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)]. ((in_range3(c) and
  (has_element({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c) = true)) ->
  in_range1(element({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)))))

axiom element__def_axiom :
  (forall x:(int,natural) farray.
  (forall c:int [element({ us_split_fields1 = {
  rec__declare_iterable__container__content = x } }, c)]. (in_range3(c) ->
  (element({ us_split_fields1 = { rec__declare_iterable__container__content =
  x } }, c) = to_rep((x[c]))))))

logic from_nat_array : (int,natural) farray -> us_rep

logic from_nat_array__function_guard : us_rep, (int,natural) farray -> prop

axiom from_nat_array__post_axiom : true

axiom from_nat_array__def_axiom :
  (forall a:(int,natural) farray [from_nat_array(a)]. (from_nat_array(a) = {
  us_split_fields1 = { rec__declare_iterable__container__content = a } }))

type us_split_fields2 = { rec__for_loop_iterable__container_holder__content :
us_rep
}

function us_split_fields_Content2__projection(a: us_split_fields2) : us_rep =
  (a).rec__for_loop_iterable__container_holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  (((bool_eq4(((a).us_split_fields3).rec__for_loop_iterable__container_holder__content,
  ((b).us_split_fields3).rec__for_loop_iterable__container_holder__content) = true) ->
  (bool_eq7(a, b) = true)) and
  ((not (bool_eq4(((a).us_split_fields3).rec__for_loop_iterable__container_holder__content,
  ((b).us_split_fields3).rec__for_loop_iterable__container_holder__content) = true)) ->
  (bool_eq7(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__size2({ us_split_fields3 = {
  rec__for_loop_iterable__container_holder__content = { us_split_fields1 = {
  rec__declare_iterable__container__content = a } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__alignment2({
  us_split_fields3 = { rec__for_loop_iterable__container_holder__content = {
  us_split_fields1 = { rec__declare_iterable__container__content = a } } }
  })))

logic for_loop_iterable__container_holder__content__first__bit : int

logic for_loop_iterable__container_holder__content__last__bit : int

logic for_loop_iterable__container_holder__content__position : int

axiom for_loop_iterable__container_holder__content__first__bit_axiom :
  (0 <= for_loop_iterable__container_holder__content__first__bit)

axiom for_loop_iterable__container_holder__content__last__bit_axiom :
  (for_loop_iterable__container_holder__content__first__bit <  for_loop_iterable__container_holder__content__last__bit)

axiom for_loop_iterable__container_holder__content__position_axiom :
  (0 <= for_loop_iterable__container_holder__content__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : (int,natural) farray

type container_holder__ref = { container_holder__content : us_rep1
}

function container_holder__ref___projection(a: container_holder__ref) : us_rep1 =
  (a).container_holder__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic for_loop_iterable__p4__a__aggregate_def : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___255:int.
  (forall temp___256:int.
  ((for_loop_iterable__p4__a__aggregate_def(temp___255)[temp___256]) = of_rep(temp___255))))

 (* File "for_loop_iterable.adb", line 27, characters 0-0 *)
goal WP_parameter_def : true
