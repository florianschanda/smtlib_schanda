(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type et1

predicate in_range1(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type enum2t

predicate in_range2(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : enum2t, enum2t -> bool

logic dummy2 : enum2t

type enum2t__ref = { enum2t__content : enum2t
}

function enum2t__ref___projection(a: enum2t__ref) : enum2t =
  (a).enum2t__content

logic to_rep1 : enum2t -> int

logic of_rep1 : int -> enum2t

axiom inversion_axiom1 :
  (forall x:enum2t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:enum2t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic dummy3 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,et1) farray, (int,et1) farray -> bool

type us_split_fields = { rec__ar__rofa1__s1 : (int,et1) farray;
rec__ar__rofa1__t1 : enum2t
}

function us_split_fields_S1__projection(a: us_split_fields) : (int,et1) farray =
  (a).rec__ar__rofa1__s1

function us_split_fields_T1__projection(a: us_split_fields) : enum2t =
  (a).rec__ar__rofa1__t1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_6__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((bool_eq3(((a).us_split_fields1).rec__ar__rofa1__s1, 1, 10,
  ((b).us_split_fields1).rec__ar__rofa1__s1, 1, 10) = true) and
  (to_rep1(((a).us_split_fields1).rec__ar__rofa1__t1) = to_rep1(((b).us_split_fields1).rec__ar__rofa1__t1))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields1).rec__ar__rofa1__s1, 1, 10,
  ((b).us_split_fields1).rec__ar__rofa1__s1, 1, 10) = true) and
  (to_rep1(((a).us_split_fields1).rec__ar__rofa1__t1) = to_rep1(((b).us_split_fields1).rec__ar__rofa1__t1)))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,et1) farray. forall a1:enum2t. (0 <= object__size1({
  us_split_fields1 = { rec__ar__rofa1__s1 = a; rec__ar__rofa1__t1 = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,et1) farray. forall a1:enum2t. (0 <= object__alignment1({
  us_split_fields1 = { rec__ar__rofa1__s1 = a; rec__ar__rofa1__t1 = a1 } })))

logic ar__rofa1__s1__first__bit : int

logic ar__rofa1__s1__last__bit : int

logic ar__rofa1__s1__position : int

axiom ar__rofa1__s1__first__bit_axiom : (0 <= ar__rofa1__s1__first__bit)

axiom ar__rofa1__s1__last__bit_axiom :
  (ar__rofa1__s1__first__bit <  ar__rofa1__s1__last__bit)

axiom ar__rofa1__s1__position_axiom : (0 <= ar__rofa1__s1__position)

logic ar__rofa1__t1__first__bit : int

logic ar__rofa1__t1__last__bit : int

logic ar__rofa1__t1__position : int

axiom ar__rofa1__t1__first__bit_axiom : (0 <= ar__rofa1__t1__first__bit)

axiom ar__rofa1__t1__last__bit_axiom :
  (ar__rofa1__t1__first__bit <  ar__rofa1__t1__last__bit)

axiom ar__rofa1__t1__position_axiom : (0 <= ar__rofa1__t1__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : (int,et1) farray

logic dummy5 : enum2t

type rofa1__ref = { rofa1__content : us_rep
}

function rofa1__ref___projection(a: rofa1__ref) : us_rep = (a).rofa1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___3004 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___3006:(int,et1) farray.
  (forall temp___3007:int. forall temp___3008:int.
  (forall temp___3009:int. (((temp___3009 = temp___3007) ->
  ((temp___3004(temp___3006, temp___3007,
  temp___3008)[temp___3009]) = of_rep(temp___3008))) and
  ((not (temp___3009 = temp___3007)) -> ((temp___3004(temp___3006,
  temp___3007, temp___3008)[temp___3009]) = (temp___3006[temp___3009])))))))

 (* File "ar.ads", line 1418, characters 0-0 *)
goal WP_parameter_def :
  (forall r__split_fields:(int,et1) farray. forall r__split_fields1:enum2t.
  forall o:et1. forall o1:(int,et1) farray. forall o2:(int,et1) farray.
  forall o3:enum2t. forall temp___7889:(int,et1) farray.
  forall temp___78891:enum2t. forall result:(int,et1) farray.
  forall result1:enum2t. forall r__split_fields2:(int,et1) farray.
  forall r__split_fields3:enum2t. forall r__split_fields4:(int,et1) farray.
  forall r__split_fields5:enum2t. forall r__split_fields6:(int,et1) farray.
  forall r__split_fields7:enum2t. ((in_range(i) and (in_range1(e) and
  ((((((to_rep(o) = e) and (o1 = (r__split_fields[i <- o]))) and
  ((o1 = o2) and (r__split_fields1 = o3))) and ((temp___7889 = o2) and
  (temp___78891 = o3))) and (((result = r__split_fields) and
  (result1 = r__split_fields1)) and ((temp___7889 = r__split_fields2) and
  (temp___78891 = r__split_fields3)))) and
  (((r__split_fields4 = r__split_fields2) and
  (r__split_fields5 = r__split_fields3)) and
  ((r__split_fields6 = r__split_fields2) and
  (r__split_fields7 = r__split_fields3)))))) -> (bool_eq5({
  us_split_fields1 = { rec__ar__rofa1__s1 = r__split_fields4;
  rec__ar__rofa1__t1 = r__split_fields5 } }, { us_split_fields1 = {
  rec__ar__rofa1__s1 = temp___3004(r__split_fields, i, e);
  rec__ar__rofa1__t1 = r__split_fields1 } }) = true)))
