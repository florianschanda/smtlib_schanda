(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type int__

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : int__, int__ -> bool

logic dummy6 : int__

type int____ref = { int____content : int__
}

function int____ref_2__projection(a: int____ref) : int__ = (a).int____content

logic eof : int

logic attr__ATTRIBUTE_ADDRESS : int

type file_descr

predicate in_range6(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : file_descr, file_descr -> bool

logic dummy7 : file_descr

type file_descr__ref = { file_descr__content : file_descr
}

function file_descr__ref___projection(a: file_descr__ref) : file_descr =
  (a).file_descr__content

logic to_rep2 : file_descr -> int

logic of_rep2 : int -> file_descr

axiom inversion_axiom2 :
  (forall x:file_descr [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:file_descr [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic eof_ch : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic no_char_in_slice : int, int, int, (int,character) farray -> bool

logic no_char_in_slice__function_guard : bool, int, int, int,
  (int,character) farray -> prop

axiom no_char_in_slice__post_axiom : true

axiom no_char_in_slice__def_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [no_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((no_char_in_slice(ch, from, to__,
  helpers__the_file) = true) <->
  (forall idx:int. (((from <= idx) and (idx <= to__)) ->
  (not (to_rep((helpers__the_file[idx])) = ch)))))))

logic find_char_in_slice : int, int, int, (int,character) farray -> int

logic find_char_in_slice__function_guard : int, int, int, int,
  (int,character) farray -> prop

logic has_char_in_slice : int, int, int, (int,character) farray -> bool

logic has_char_in_slice__function_guard : bool, int, int, int,
  (int,character) farray -> prop

axiom find_char_in_slice__post_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((in_range3(ch) and in_range2(from)) and
  in_range2(to__)) and (has_char_in_slice(ch, from, to__,
  helpers__the_file) = true)) -> ((((from <= find_char_in_slice(ch, from,
  to__, helpers__the_file)) and (find_char_in_slice(ch, from, to__,
  helpers__the_file) <= to__)) and ((no_char_in_slice(ch, from,
  (find_char_in_slice(ch, from, to__, helpers__the_file) - 1),
  helpers__the_file) = true) and
  (to_rep((helpers__the_file[find_char_in_slice(ch, from, to__,
  helpers__the_file)])) = ch))) and in_range2(find_char_in_slice(ch, from,
  to__, helpers__the_file))))))

logic ferror : int -> int

logic ferror__function_guard : int, int -> prop

axiom ferror__post_axiom :
  (forall stream:int [ferror(stream)]. (in_range6(stream) ->
  in_range5(ferror(stream))))

logic fpeek : int, int, (int,character) farray -> int

logic fpeek__function_guard : int, int, int, (int,character) farray -> prop

logic no_char_in_string : us_t, int, int -> bool

logic no_char_in_string__function_guard : bool, us_t, int, int -> prop

type count

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : count, count -> bool

logic dummy8 : count

type count__ref = { count__content : count
}

function count__ref___projection(a: count__ref) : count = (a).count__content

logic to_rep3 : count -> int

logic of_rep3 : int -> count

axiom inversion_axiom3 :
  (forall x:count [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:count [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__textio__file_type__descr : file_descr;
rec__textio__file_type__before_lm : bool;
rec__textio__file_type__before_lm_pm : bool; rec__textio__file_type__col :
count; rec__textio__file_type__line : count; rec__textio__file_type__page :
count; rec__textio__file_type__is_regular_file : bool
}

function us_split_fields_Descr__projection(a: us_split_fields) : file_descr =
  (a).rec__textio__file_type__descr

function us_split_fields_Before_LM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm

function us_split_fields_Before_LM_PM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm_pm

function us_split_fields_Col__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__col

function us_split_fields_Line__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__line

function us_split_fields_Page__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__page

function us_split_fields_Is_Regular_File__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__is_regular_file

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  (((((((((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file)) ->
  (bool_eq11(a, b) = true)) and
  ((not (((((((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool. (0 <= object__size1({
  us_split_fields1 = { rec__textio__file_type__descr = a;
  rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__textio__file_type__descr = a; rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

logic textio__file_type__descr__first__bit : int

logic textio__file_type__descr__last__bit : int

logic textio__file_type__descr__position : int

axiom textio__file_type__descr__first__bit_axiom :
  (0 <= textio__file_type__descr__first__bit)

axiom textio__file_type__descr__last__bit_axiom :
  (textio__file_type__descr__first__bit <  textio__file_type__descr__last__bit)

axiom textio__file_type__descr__position_axiom :
  (0 <= textio__file_type__descr__position)

logic textio__file_type__before_lm__first__bit : int

logic textio__file_type__before_lm__last__bit : int

logic textio__file_type__before_lm__position : int

axiom textio__file_type__before_lm__first__bit_axiom :
  (0 <= textio__file_type__before_lm__first__bit)

axiom textio__file_type__before_lm__last__bit_axiom :
  (textio__file_type__before_lm__first__bit <  textio__file_type__before_lm__last__bit)

axiom textio__file_type__before_lm__position_axiom :
  (0 <= textio__file_type__before_lm__position)

logic textio__file_type__before_lm_pm__first__bit : int

logic textio__file_type__before_lm_pm__last__bit : int

logic textio__file_type__before_lm_pm__position : int

axiom textio__file_type__before_lm_pm__first__bit_axiom :
  (0 <= textio__file_type__before_lm_pm__first__bit)

axiom textio__file_type__before_lm_pm__last__bit_axiom :
  (textio__file_type__before_lm_pm__first__bit <  textio__file_type__before_lm_pm__last__bit)

axiom textio__file_type__before_lm_pm__position_axiom :
  (0 <= textio__file_type__before_lm_pm__position)

logic textio__file_type__col__first__bit : int

logic textio__file_type__col__last__bit : int

logic textio__file_type__col__position : int

axiom textio__file_type__col__first__bit_axiom :
  (0 <= textio__file_type__col__first__bit)

axiom textio__file_type__col__last__bit_axiom :
  (textio__file_type__col__first__bit <  textio__file_type__col__last__bit)

axiom textio__file_type__col__position_axiom :
  (0 <= textio__file_type__col__position)

logic textio__file_type__line__first__bit : int

logic textio__file_type__line__last__bit : int

logic textio__file_type__line__position : int

axiom textio__file_type__line__first__bit_axiom :
  (0 <= textio__file_type__line__first__bit)

axiom textio__file_type__line__last__bit_axiom :
  (textio__file_type__line__first__bit <  textio__file_type__line__last__bit)

axiom textio__file_type__line__position_axiom :
  (0 <= textio__file_type__line__position)

logic textio__file_type__page__first__bit : int

logic textio__file_type__page__last__bit : int

logic textio__file_type__page__position : int

axiom textio__file_type__page__first__bit_axiom :
  (0 <= textio__file_type__page__first__bit)

axiom textio__file_type__page__last__bit_axiom :
  (textio__file_type__page__first__bit <  textio__file_type__page__last__bit)

axiom textio__file_type__page__position_axiom :
  (0 <= textio__file_type__page__position)

logic textio__file_type__is_regular_file__first__bit : int

logic textio__file_type__is_regular_file__last__bit : int

logic textio__file_type__is_regular_file__position : int

axiom textio__file_type__is_regular_file__first__bit_axiom :
  (0 <= textio__file_type__is_regular_file__first__bit)

axiom textio__file_type__is_regular_file__last__bit_axiom :
  (textio__file_type__is_regular_file__first__bit <  textio__file_type__is_regular_file__last__bit)

axiom textio__file_type__is_regular_file__position_axiom :
  (0 <= textio__file_type__is_regular_file__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : file_descr

logic dummy10 : bool

logic dummy11 : bool

logic dummy12 : count

logic dummy13 : count

logic dummy14 : count

logic dummy15 : bool

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic item__first : integer

logic item__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic end_of_file : us_rep, int, (int,character) farray -> bool

logic end_of_file__function_guard : bool, us_rep, int,
  (int,character) farray -> prop

logic fpeek1 : us_rep, int, (int,character) farray -> int

logic fpeek__function_guard1 : int, us_rep, int,
  (int,character) farray -> prop

axiom end_of_file__post_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> ((end_of_file({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = true) <-> (fpeek1({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = eof))))))

logic has_char_in_string : us_t, int, int -> bool

logic has_char_in_string__function_guard : bool, us_t, int, int -> prop

logic find_char_in_string : us_t, int, int -> int

logic find_char_in_string__function_guard : int, us_t, int, int -> prop

logic memchr : us_t, int, int -> int

logic memchr__function_guard : int, us_t, int, int -> prop

axiom memchr__post_axiom :
  (forall s:(int,character) farray. forall s1:t.
  (forall ch:int. forall n:int [memchr({ elts = s; rt = s1 }, ch, n)].
  (((in_range3(ch) and in_range4(n)) and (n <= length({ elts = s; rt = s1
  }))) -> ((((has_char_in_string({ elts = s; rt = s1 }, ch, n) = true) ->
  (memchr({ elts = s; rt = s1 }, ch, n) = find_char_in_string({ elts = s;
  rt = s1 }, ch, n))) and ((not (has_char_in_string({ elts = s; rt = s1 },
  ch, n) = true)) -> (memchr({ elts = s; rt = s1 }, ch, n) = 0))) and
  in_range4(memchr({ elts = s; rt = s1 }, ch, n))))))

logic n : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

type tTbufSP1

predicate in_range8(x: int) = ((1 <= x) and (x <= 80))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : tTbufSP1, tTbufSP1 -> bool

logic dummy16 : tTbufSP1

type tTbufSP1__ref = { tTbufSP1__content : tTbufSP1
}

function tTbufSP1__ref___projection(a: tTbufSP1__ref) : tTbufSP1 =
  (a).tTbufSP1__content

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic eof_at_start : bool

logic attr__ATTRIBUTE_ADDRESS12 : int

logic last_at_start : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic cur_position_at_start : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic item_at_start : (int,character) farray

logic item_at_start1 : t

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic temp___594 : int -> (int,character) farray

axiom def_axiom :
  (forall temp___596:int.
  (forall temp___597:int.
  ((temp___594(temp___596)[temp___597]) = of_rep(temp___596))))

axiom fpeek__post_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> in_range5(fpeek1({ us_split_fields1 =
  { rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file))))))

axiom fpeek__def_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> (fpeek1({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = fpeek(to_rep2(file), helpers__cur_position,
  helpers__the_file))))))

axiom eof_ch__def_axiom : (eof_ch = mod(eof, 256))

axiom fpeek__post_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek(stream,
  helpers__cur_position, helpers__the_file)]. ((in_range6(stream) and
  in_range2(helpers__cur_position)) -> in_range5(fpeek(stream,
  helpers__cur_position, helpers__the_file)))))

axiom fpeek__def_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek(stream,
  helpers__cur_position, helpers__the_file)]. ((in_range6(stream) and
  in_range2(helpers__cur_position)) ->
  (((to_rep((helpers__the_file[helpers__cur_position])) = eof_ch) ->
  (fpeek(stream, helpers__cur_position, helpers__the_file) = eof)) and
  ((not (to_rep((helpers__the_file[helpers__cur_position])) = eof_ch)) ->
  (fpeek(stream, helpers__cur_position,
  helpers__the_file) = to_rep((helpers__the_file[helpers__cur_position]))))))))

axiom has_char_in_slice__post_axiom : true

axiom has_char_in_slice__def_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [has_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((has_char_in_slice(ch, from, to__,
  helpers__the_file) = true) <->
  (exists idx:int. (((from <= idx) and (idx <= to__)) and
  (to_rep((helpers__the_file[idx])) = ch))))))

axiom no_char_in_string__post_axiom : true

axiom no_char_in_string__def_axiom :
  (forall s:(int,character) farray. forall s1:t.
  (forall ch:int. forall n1:int [no_char_in_string({ elts = s; rt = s1 }, ch,
  n1)]. ((no_char_in_string({ elts = s; rt = s1 }, ch, n1) = true) <->
  (forall idx:int. (((to_rep1(first(s1)) <= idx) and
  (idx <= ((to_rep1(first(s1)) - 1) + n1))) ->
  (not (to_rep((s[idx])) = ch)))))))

axiom has_char_in_string__post_axiom : true

axiom has_char_in_string__def_axiom :
  (forall s:(int,character) farray. forall s1:t.
  (forall ch:int. forall n1:int [has_char_in_string({ elts = s; rt = s1 },
  ch, n1)]. ((has_char_in_string({ elts = s; rt = s1 }, ch, n1) = true) <->
  (exists idx:int. (((to_rep1(first(s1)) <= idx) and
  (idx <= ((to_rep1(first(s1)) - 1) + n1))) and (to_rep((s[idx])) = ch))))))

axiom find_char_in_string__post_axiom :
  (forall s:(int,character) farray. forall s1:t.
  (forall ch:int. forall n1:int [find_char_in_string({ elts = s; rt = s1 },
  ch, n1)]. (((in_range3(ch) and in_range4(n1)) and
  ((((to_rep1(first(s1)) + n1) - 1) <= to_rep1(last(s1))) and
  (has_char_in_string({ elts = s; rt = s1 }, ch, n1) = true))) ->
  ((((to_rep1(first(s1)) <= find_char_in_string({ elts = s; rt = s1 }, ch,
  n1)) and (find_char_in_string({ elts = s; rt = s1 }, ch,
  n1) <= ((to_rep1(first(s1)) - 1) + n1))) and ((no_char_in_string({ elts =
  s; rt = s1 }, ch, (find_char_in_string({ elts = s; rt = s1 }, ch,
  n1) - 1)) = true) and (to_rep((s[find_char_in_string({ elts = s; rt = s1 },
  ch, n1)])) = ch))) and in_range2(find_char_in_string({ elts = s; rt = s1 },
  ch, n1))))))

 (* File "textio.adb", line 102, characters 0-0 *)
goal WP_parameter_def :
  (forall the_file:(int,character) farray. forall cur_position:int.
  forall file__split_fields:file_descr. forall file__split_fields1:bool.
  forall file__split_fields2:bool. forall file__split_fields3:count.
  forall file__split_fields4:count. forall file__split_fields5:count.
  forall file__split_fields6:bool. forall item:(int,character) farray.
  forall last2:int. forall rest:int. forall buf:(int,character) farray.
  forall p:int. forall success:bool. forall k:int.
  forall textio__get_line__get_chunk__eof_at_start__assume:bool.
  forall o:integer. forall o1:integer. forall o2:integer. forall o3:integer.
  forall o4:int. forall o5:bool. forall o6:int. forall o7:int. forall o8:int.
  forall o9:int. forall temp___600:int. forall o10:int. forall o11:character.
  forall o12:int. forall o13:bool. forall o14:int. forall o15:int.
  forall o16:int. forall o17:int. forall o18:int. forall o19:int.
  forall o20:int. forall o21:int. forall o22:int. forall o23:int.
  forall o24:int. forall o25:int. forall cur_position1:int.
  forall item1:(int,character) farray. forall last3:int. forall rest1:int.
  forall p1:int. forall success1:bool. forall k1:int.
  forall result:(int,character) farray. forall buf1:(int,character) farray.
  forall result1:int. forall rest2:int.
  forall textio__memset__b:(int,character) farray.
  forall result2:(int,character) farray. forall buf2:(int,character) farray.
  forall cur_position2:int. forall success2:bool.
  forall helpers__fgets__strng:(int,character) farray.
  forall result3:(int,character) farray. forall buf3:(int,character) farray.
  forall result4:bool. forall result5:int. forall rest3:int.
  forall result6:int. forall p2:int. forall item2:(int,character) farray.
  forall result7:int. forall last4:int. forall result8:int. forall rest4:int.
  forall result9:int. forall k2:int. forall result10:bool.
  forall result11:bool. forall result12:int. forall k3:int.
  forall item3:(int,character) farray. forall result13:int. forall last5:int.
  forall result14:int. forall rest5:int. forall item4:(int,character) farray.
  forall last6:int. forall rest6:int. forall k4:int.
  forall item5:(int,character) farray. forall last7:int. forall rest7:int.
  forall k5:int. forall item6:(int,character) farray. forall last8:int.
  forall rest8:int. forall k6:int. forall item7:(int,character) farray.
  forall last9:int. forall rest9:int. forall k7:int.
  forall item8:(int,character) farray. forall last10:int. forall rest10:int.
  forall p3:int. forall k8:int. forall item9:(int,character) farray.
  forall last11:int. forall rest11:int. forall p4:int. forall k9:int.
  forall cur_position3:int. forall item10:(int,character) farray.
  forall last12:int. forall rest12:int. forall buf4:(int,character) farray.
  forall p5:int. forall success3:bool__ref. forall k10:int__ref.
  forall cur_position4:int. forall item11:(int,character) farray.
  forall last13:int. forall rest13:int. forall buf5:(int,character) farray.
  forall p6:int. forall success4:bool. forall k11:int.
  forall cur_position5:int__ref. forall item12:map__ref.
  forall last14:int__ref. forall rest14:int__ref. forall buf6:map__ref.
  forall p7:int__ref. forall success5:bool__ref. forall k12:int__ref.
  forall cur_position6:int. forall item13:(int,character) farray.
  forall last15:int. forall rest15:int. forall buf7:(int,character) farray.
  forall p8:int. forall success6:bool. forall k13:int. forall result15:bool.
  forall result16:bool. forall result17:bool. forall result18:bool.
  forall result19:bool. forall result20:bool. (dynamic_property(1,
  2147483647, to_rep1(item__first), to_rep1(item__last)) ->
  (in_range4(last2) -> (in_range2(cur_position) -> (in_range3(eof_ch) ->
  ((mod(eof, 256) = eof_ch) -> (in_range5(eof) -> (in_range2(n) ->
  (((0 <= 2147483647) -> in_range4(rest)) -> (((n <= 80) and
  ((((to_rep1(item__first) - 1) <= last2) and
  (last2 <= to_rep1(item__last))) and (((1 <  n) ->
  ((to_rep1(item__first) <= (last2 + 1)) and
  (((last2 + n) - 1) <= to_rep1(item__last)))) and (((end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file) = true) -> (to_rep1(item__first) <= last2)) and
  (cur_position <= 10000))))) -> (((((0 <= 2147483647) -> in_range4(p)) and
  ((((textio__get_line__get_chunk__eof_at_start__assume = end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file)) and
  ((textio__get_line__get_chunk__eof_at_start__assume = true) <-> (fpeek1({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file) = eof))) and
  (textio__get_line__get_chunk__eof_at_start__assume = eof_at_start)) and
  ((last2 = last_at_start) and (in_range4(last_at_start) and
  ((cur_position = cur_position_at_start) and
  (in_range2(cur_position_at_start) and (((item = item_at_start) and
  (mk(to_rep1(item__first), to_rep1(item__last)) = item_at_start1)) and
  (dynamic_property(1, 2147483647, to_rep1(first(item_at_start1)),
  to_rep1(last(item_at_start1))) and ((({ map__content = result } = {
  map__content = buf }) and (buf1 = temp___594(32))) and (((((k10 = {
  int__content = k }) and ((success3 = { bool__content = success }) and (({
  int__content = p5 } = { int__content = p }) and ((buf1 = buf4) and
  ((rest2 = rest12) and (({ int__content = last12 } = { int__content = last2
  }) and (({ map__content = item10 } = { map__content = item }) and ({
  int__content = cur_position3 } = { int__content = cur_position
  })))))))) and ((k11 = k1) and ((success4 = success1) and ((p6 = p1) and
  ((buf5 = buf1) and ((rest13 = rest2) and ((last13 = last3) and
  ((item11 = item1) and (cur_position4 = cur_position1))))))))) and
  ((n = 1) and (({ int__content = result1 } = { int__content = rest }) and
  (rest2 = n)))) or (((not (n = 1)) and ((rest2 = rest) and
  (rest2 = rest1))) and ((((k10 = { int__content = k8 }) and ((success3 = {
  bool__content = success2 }) and (({ int__content = p5 } = { int__content =
  p3 }) and ((buf3 = buf4) and (({ int__content = rest12 } = { int__content =
  rest10 }) and (({ int__content = last12 } = { int__content = last10 }) and
  (({ map__content = item10 } = { map__content = item8 }) and
  (cur_position2 = cur_position3)))))))) and ((k11 = k9) and
  ((success4 = success2) and ((p6 = p4) and ((buf5 = buf3) and
  ((rest13 = rest11) and ((last13 = last11) and ((item11 = item9) and
  (cur_position4 = cur_position2))))))))) and ((((to_rep1(o1) = 80) and
  ((to_rep1(o) = 1) and
  (forall idx:int. (((to_rep1(o) <= idx) and (idx <= to_rep1(o1))) ->
  (((idx <  (to_rep1(o) + n)) and (to_rep((textio__memset__b[idx])) = 10)) or
  ((not (idx <  (to_rep1(o) + n))) and
  (to_rep((textio__memset__b[idx])) = to_rep((buf1[idx]))))))))) and
  ((buf1 = result2) and (buf2 = slide(textio__memset__b, to_rep1(first(mk(1,
  80))), 1)))) and ((to_rep((buf2[n])) = 10) and ((((to_rep1(o3) = 80) and
  ((to_rep1(o2) = 1) and ((((success2 = true) and
  (((ferror(to_rep2(file__split_fields)) = 0) and
  (not (fpeek(to_rep2(file__split_fields), cur_position,
  the_file) = eof))) and ((((no_char_in_slice(10, cur_position,
  ((cur_position + n) - 2), the_file) = true) and (no_char_in_slice(eof_ch,
  cur_position, ((cur_position + n) - 2), the_file) = true)) and
  ((((cur_position2 = ((cur_position + n) - 1)) and
  (forall idx:int. (((1 <= idx) and (idx <= (n - 1))) ->
  (to_rep((helpers__fgets__strng[idx])) = to_rep((the_file[((cur_position + idx) - 1)])))))) and
  (to_rep((helpers__fgets__strng[n])) = 0)) and
  (forall idx:int. ((((n + 1) <= idx) and (idx <= to_rep1(o3))) ->
  (to_rep((helpers__fgets__strng[idx])) = to_rep((buf2[idx]))))))) or
  ((not ((no_char_in_slice(10, cur_position, ((cur_position + n) - 2),
  the_file) = true) and (no_char_in_slice(eof_ch, cur_position,
  ((cur_position + n) - 2), the_file) = true))) and ((((has_char_in_slice(10,
  cur_position, ((cur_position + n) - 2), the_file) = true) and
  (no_char_in_slice(eof_ch, cur_position, ((cur_position + n) - 2),
  the_file) = true)) and (((((cur_position2 = find_char_in_slice(10,
  cur_position, ((cur_position + n) - 2), the_file)) and
  (forall idx:int. (((cur_position <= idx) and
  (idx <= (find_char_in_slice(10, cur_position, ((cur_position + n) - 2),
  the_file) - 1))) ->
  (to_rep((helpers__fgets__strng[((idx - cur_position) + 1)])) = to_rep((the_file[idx])))))) and
  (to_rep((helpers__fgets__strng[((find_char_in_slice(10, cur_position,
  ((cur_position + n) - 2), the_file) - cur_position) + 1)])) = 10)) and
  (to_rep((helpers__fgets__strng[((find_char_in_slice(10, cur_position,
  ((cur_position + n) - 2), the_file) - cur_position) + 2)])) = 0)) and
  (forall idx:int. (((((find_char_in_slice(10, cur_position,
  ((cur_position + n) - 2), the_file) - cur_position) + 3) <= idx) and
  (idx <= to_rep1(o3))) ->
  (to_rep((helpers__fgets__strng[idx])) = to_rep((buf2[idx]))))))) or
  ((not ((has_char_in_slice(10, cur_position, ((cur_position + n) - 2),
  the_file) = true) and (no_char_in_slice(eof_ch, cur_position,
  ((cur_position + n) - 2), the_file) = true))) and (((no_char_in_slice(10,
  cur_position, ((cur_position + n) - 2), the_file) = true) and
  (has_char_in_slice(eof_ch, cur_position, ((cur_position + n) - 2),
  the_file) = true)) and (((((cur_position2 = find_char_in_slice(eof_ch,
  cur_position, ((cur_position + n) - 2), the_file)) and
  (forall idx:int. (((cur_position <= idx) and
  (idx <= (find_char_in_slice(eof_ch, cur_position, ((cur_position + n) - 2),
  the_file) - 1))) ->
  (to_rep((helpers__fgets__strng[((idx - cur_position) + 1)])) = to_rep((the_file[idx])))))) and
  (to_rep((helpers__fgets__strng[((find_char_in_slice(eof_ch, cur_position,
  ((cur_position + n) - 2), the_file) - cur_position) + 1)])) = 0)) and
  (forall idx:int. (((((find_char_in_slice(eof_ch, cur_position,
  ((cur_position + n) - 2), the_file) - cur_position) + 2) <= idx) and
  (idx <= to_rep1(o3))) ->
  (to_rep((helpers__fgets__strng[idx])) = to_rep((buf2[idx])))))) and
  (no_char_in_string({ elts = helpers__fgets__strng; rt = mk(to_rep1(o2),
  to_rep1(o3)) }, 10, ((find_char_in_slice(eof_ch, cur_position,
  ((cur_position + n) - 2),
  the_file) - cur_position) + 1)) = true))))))))) or
  ((not (success2 = true)) and
  ((not (ferror(to_rep2(file__split_fields)) = 0)) or
  ((fpeek(to_rep2(file__split_fields), cur_position, the_file) = eof) and
  (cur_position2 = cur_position))))) and in_range2(cur_position2)))) and
  ((buf2 = result3) and (buf3 = slide(helpers__fgets__strng,
  to_rep1(first(mk(1, 80))), 1)))) and ((((({ int__content = k8 } = {
  int__content = k }) and (({ int__content = p3 } = { int__content = p }) and
  ((rest3 = rest10) and (({ int__content = last10 } = { int__content = last2
  }) and ({ map__content = item8 } = { map__content = item }))))) and
  ((k9 = k1) and ((p4 = p1) and ((rest11 = rest3) and ((last11 = last3) and
  (item9 = item1)))))) and ((not (success2 = true)) and
  (((((o4 = ferror(to_rep2(file__split_fields))) and in_range5(o4)) and
  (((o4 = 0) and (o5 = true)) or ((not (o4 = 0)) and (o5 = false)))) and
  (((not (o5 = true)) and (result4 = true)) or ((o5 = true) and
  (result4 = false)))) and ((not (result4 = true)) and
  ((to_rep1(item__first) <= last2) and ((rest2 = result5) and
  (rest3 = 0))))))) or (((success2 = true) and (rest3 = rest2)) and (((({
  int__content = k8 } = { int__content = k6 }) and ((p2 = p3) and (({
  int__content = rest10 } = { int__content = rest8 }) and (({ int__content =
  last10 } = { int__content = last8 }) and ({ map__content = item8 } = {
  map__content = item6 }))))) and ((k9 = k7) and ((p4 = p2) and
  ((rest11 = rest9) and ((last11 = last9) and (item9 = item7)))))) and
  ((((o6 = memchr({ elts = buf3; rt = mk(1, 80) }, 10, n)) and
  (in_range4(o6) and (((has_char_in_string({ elts = buf3; rt = mk(1, 80) },
  10, n) = true) and (o6 = find_char_in_string({ elts = buf3; rt = mk(1, 80)
  }, 10, n))) or ((not (has_char_in_string({ elts = buf3; rt = mk(1, 80) },
  10, n) = true)) and (o6 = 0))))) and (({ int__content = result6 } = {
  int__content = p }) and (p2 = o6))) and (((({ int__content = k6 } = {
  int__content = k4 }) and (({ int__content = rest8 } = { int__content =
  rest6 }) and (({ int__content = last8 } = { int__content = last6 }) and ({
  map__content = item6 } = { map__content = item4 })))) and ((k7 = k5) and
  ((rest9 = rest7) and ((last9 = last7) and (item7 = item5))))) and
  (((p2 = 0) and (((({ int__content = k4 } = { int__content = k }) and
  ((rest4 = rest6) and ((last4 = last6) and (item2 = item4)))) and
  ((k5 = k1) and ((rest7 = rest4) and ((last7 = last4) and
  (item5 = item2))))) and ((((o7 = (last2 + 1)) and
  in_range1((last2 + 1))) and (((bool_eq1((n - 1), 0) = true) and
  (bool_eq5(item2, to_rep1(item__first), to_rep1(item__last), item,
  to_rep1(item__first), to_rep1(item__last)) = true)) or
  ((not (bool_eq1((n - 1), 0) = true)) and ((bool_ne((n - 1), 0) = true) ->
  (forall idx:int. (((to_rep1(item__first) <= idx) and
  (idx <= to_rep1(item__last))) -> ((((o7 <= idx) and
  (idx <= ((o7 + (n - 1)) - 1))) and
  (to_rep((item2[idx])) = to_rep((buf3[((idx - o7) + 1)])))) or
  ((not ((o7 <= idx) and (idx <= ((o7 + (n - 1)) - 1)))) and
  (to_rep((item2[idx])) = to_rep((item[idx]))))))))))) and
  ((((o8 = ((last2 - 1) + n)) and in_range1(((last2 - 1) + n))) and (({
  int__content = result7 } = { int__content = last2 }) and (last4 = o8))) and
  ((rest3 = result8) and (rest4 = 1)))))) or ((not (p2 = 0)) and
  ((((k3 = k4) and ((rest5 = rest6) and ((last5 = last6) and
  (item3 = item4)))) and ((k5 = k3) and ((rest7 = rest5) and
  ((last7 = last5) and (item5 = item3))))) and (((((o9 = (p2 - 1)) and
  in_range4((p2 - 1))) and (({ int__content = result9 } = { int__content = k
  }) and (k2 = o9))) and (in_range4(k2) and ((((no_char_in_slice(eof_ch,
  cur_position_at_start, ((cur_position_at_start + n) - 2),
  the_file) = true) and (k2 = (find_char_in_slice(10, cur_position_at_start,
  ((cur_position_at_start + n) - 2), the_file) - cur_position_at_start))) or
  (not (no_char_in_slice(eof_ch, cur_position_at_start,
  ((cur_position_at_start + n) - 2), the_file) = true))) and
  ((((((o14 = (k2 + 2)) and in_range1((k2 + 2))) and (((n <  o14) and
  (result11 = true)) or ((not (n <  o14)) and (result11 = false)))) and
  (((result11 = true) and (result10 = true)) or ((not (result11 = true)) and
  (((((((temp___600 = (k2 + 2)) and in_range1((k2 + 2))) and
  (((1 <= temp___600) and (temp___600 <= 80)) and (o10 = temp___600))) and
  (o11 = (buf3[o10]))) and (o12 = to_rep(o11))) and (((o12 = 0) and
  (o13 = true)) or ((not (o12 = 0)) and (o13 = false)))) and
  (((not (o13 = true)) and (result10 = true)) or ((o13 = true) and
  (result10 = false))))))) and (((result10 = true) and
  ((to_rep((buf3[k2])) = 0) and (((o15 = (k2 - 1)) and
  in_range4((k2 - 1))) and ((k2 = result12) and (k3 = o15))))) or
  ((not (result10 = true)) and (k3 = k2)))) and ((((o16 = (last2 + 1)) and
  in_range1((last2 + 1))) and (((bool_eq1(k3, 0) = true) and (bool_eq5(item3,
  to_rep1(item__first), to_rep1(item__last), item, to_rep1(item__first),
  to_rep1(item__last)) = true)) or ((not (bool_eq1(k3, 0) = true)) and
  ((bool_ne(k3, 0) = true) ->
  (forall idx:int. (((to_rep1(item__first) <= idx) and
  (idx <= to_rep1(item__last))) -> ((((o16 <= idx) and
  (idx <= ((o16 + k3) - 1))) and
  (to_rep((item3[idx])) = to_rep((buf3[((idx - o16) + 1)])))) or
  ((not ((o16 <= idx) and (idx <= ((o16 + k3) - 1)))) and
  (to_rep((item3[idx])) = to_rep((item[idx]))))))))))) and
  (((o17 = (last2 + k3)) and in_range1((last2 + k3))) and
  ((result13 = last2) and (last5 = o17)))))))) and ((result14 = rest3) and
  (rest5 = 0)))))))))))))))))))))))))) and (((k12 = k10) and
  ((success5 = success3) and ((p7 = { int__content = p5 }) and ((buf6 = {
  map__content = buf4 }) and ((rest14 = { int__content = rest12 }) and
  ((last14 = { int__content = last12 }) and ((item12 = { map__content =
  item10 }) and (cur_position5 = { int__content = cur_position3 })))))))) and
  ((k13 = k11) and ((success6 = success4) and ((p8 = p6) and
  ((buf7 = buf5) and ((rest15 = rest13) and ((last15 = last13) and
  ((item13 = item11) and (cur_position6 = cur_position4)))))))))) ->
  (((result15 = true) <->
  (forall idx:int. (((to_rep1(item__first) <= idx) and (idx <= last2)) ->
  (to_rep(((item12).map__content[idx])) = to_rep((item[idx])))))) ->
  ((result15 = true) ->
  ((((cur_position5).int__content - cur_position) = ((last14).int__content - last2)) ->
  (((result16 = true) <->
  (forall idx:int. ((((last2 + 1) <= idx) and
  (idx <= (last14).int__content)) ->
  (to_rep(((item12).map__content[idx])) = to_rep((the_file[(((idx - last2) - 1) + cur_position)])))))) ->
  ((result16 = true) -> ((not (n = 1)) -> ((not (end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file) = true)) ->
  (((((o19 = ((cur_position + n) - 2)) and
  in_range2(((cur_position + n) - 2))) and ((result18 = no_char_in_slice(10,
  cur_position, o19, the_file)) and ((result18 = true) <->
  (forall idx:int. (((cur_position <= idx) and (idx <= o19)) ->
  (not (to_rep((the_file[idx])) = 10))))))) and (((result18 = true) and
  (((o18 = ((cur_position + n) - 2)) and
  in_range2(((cur_position + n) - 2))) and
  ((result17 = no_char_in_slice(eof_ch, cur_position, o18, the_file)) and
  ((result17 = true) <->
  (forall idx:int. (((cur_position <= idx) and (idx <= o18)) ->
  (not (to_rep((the_file[idx])) = eof_ch)))))))) or
  ((not (result18 = true)) and (result17 = false)))) ->
  ((not (result17 = true)) -> ((((o20 = ((cur_position + n) - 2)) and
  in_range2(((cur_position + n) - 2))) and
  ((result19 = no_char_in_slice(eof_ch, cur_position, o20, the_file)) and
  ((result19 = true) <->
  (forall idx:int. (((cur_position <= idx) and (idx <= o20)) ->
  (not (to_rep((the_file[idx])) = eof_ch))))))) -> ((result19 = true) ->
  (((((((o22 = ((cur_position + n) - 2)) and
  in_range2(((cur_position + n) - 2))) and ((o23 = find_char_in_slice(10,
  cur_position, o22, the_file)) and (in_range2(o23) and
  (((cur_position <= o23) and (o23 <= o22)) and ((no_char_in_slice(10,
  cur_position, (o23 - 1), the_file) = true) and
  (to_rep((the_file[o23])) = 10)))))) and (o24 = (last2 + o23))) and
  (o25 = (o24 - cur_position))) and ((((last14).int__content = o25) and
  (result20 = true)) or ((not ((last14).int__content = o25)) and
  (result20 = false)))) -> ((result20 = true) ->
  (((o21 = ((cur_position + n) - 2)) and
  in_range2(((cur_position + n) - 2))) -> (has_char_in_slice(10,
  cur_position, o21, the_file) = true))))))))))))))))))))))))))
