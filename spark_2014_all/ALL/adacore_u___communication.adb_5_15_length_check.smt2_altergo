(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t3s

predicate in_range4(x: int) = ((1 <= x) and (x <= 15))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t3s, t3s -> bool

logic dummy6 : t3s

type t3s__ref = { t3s__content : t3s
}

function t3s__ref___projection(a: t3s__ref) : t3s = (a).t3s__content

logic to_rep3 : positive -> int

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range1(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range1(x) ->
  (to_rep3(of_rep3(x)) = x)))

type data

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : data, data -> bool

logic dummy7 : data

type data__ref = { data__content : data
}

function data__ref___projection(a: data__ref) : data = (a).data__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type tdata_arrayD1__ref = { tdata_arrayD1__content : integer
}

function tdata_arrayD1__ref___projection(a: tdata_arrayD1__ref) : integer =
  (a).tdata_arrayD1__content

logic to_rep4 : data -> int

logic of_rep4 : int -> data

axiom inversion_axiom4 :
  (forall x:data [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:data [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref1 = { map__content1 : (int,data) farray
}

logic slide1 : (int,data) farray, int, int -> (int,data) farray

axiom slide_eq1 :
  (forall a:(int,data) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,data) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,data) farray, int, int, (int,data) farray, int,
  int -> (int,data) farray

axiom concat_def1 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : data, int -> (int,data) farray

axiom singleton_def1 :
  (forall v:data.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq10 : (int,data) farray, int, int, (int,data) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,data) farray. forall a__first:int. forall a__last:int.
  forall b:(int,data) farray. forall b__first:int. forall b__last:int
  [bool_eq10(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep4((a[temp___idx_132])) = to_rep4((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep4((a[temp___idx_132])) = to_rep4((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep4((a[temp___idx_132])) = to_rep4((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,data) farray, int, int, (int,data) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq10(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq10(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep4((a[(i + 1)])) <  to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq10(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep4((b[(i + 1)])) <  to_rep4((a[(j + 1)]))))))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,data) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,data) farray = (a).elts1

function of_array1(a: (int,data) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,data) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,data) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,data) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,data) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,data) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,data) farray. (0 <= object__alignment1(a)))

function bool_eq11(x: us_t1, y: us_t1) : bool = bool_eq10((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy9 : (int,data) farray

logic dummy10 : t1

type data_array__ref = { data_array__content : us_t1
}

function data_array__ref___projection(a: data_array__ref) : us_t1 =
  (a).data_array__content

type us_split_fields = { rec__communication__ring_buffer__buffer__content :
us_t1; rec__communication__ring_buffer__buffer__first : positive;
rec__communication__ring_buffer__buffer__length : natural
}

function us_split_fields_Content__projection(a: us_split_fields) : us_t1 =
  (a).rec__communication__ring_buffer__buffer__content

function us_split_fields_First__projection(a: us_split_fields) : positive =
  (a).rec__communication__ring_buffer__buffer__first

function us_split_fields_Length__projection(a: us_split_fields) : natural =
  (a).rec__communication__ring_buffer__buffer__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  (((((bool_eq11(((a).us_split_fields1).rec__communication__ring_buffer__buffer__content,
  ((b).us_split_fields1).rec__communication__ring_buffer__buffer__content) = true) and
  (to_rep3(((a).us_split_fields1).rec__communication__ring_buffer__buffer__first) = to_rep3(((b).us_split_fields1).rec__communication__ring_buffer__buffer__first))) and
  (to_rep2(((a).us_split_fields1).rec__communication__ring_buffer__buffer__length) = to_rep2(((b).us_split_fields1).rec__communication__ring_buffer__buffer__length))) ->
  (bool_eq12(a, b) = true)) and
  ((not (((bool_eq11(((a).us_split_fields1).rec__communication__ring_buffer__buffer__content,
  ((b).us_split_fields1).rec__communication__ring_buffer__buffer__content) = true) and
  (to_rep3(((a).us_split_fields1).rec__communication__ring_buffer__buffer__first) = to_rep3(((b).us_split_fields1).rec__communication__ring_buffer__buffer__first))) and
  (to_rep2(((a).us_split_fields1).rec__communication__ring_buffer__buffer__length) = to_rep2(((b).us_split_fields1).rec__communication__ring_buffer__buffer__length)))) ->
  (bool_eq12(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,data) farray. forall a1:t1. forall a2:positive.
  forall a3:natural. (0 <= object__size2({ us_split_fields1 = {
  rec__communication__ring_buffer__buffer__content = { elts1 = a; rt1 = a1 };
  rec__communication__ring_buffer__buffer__first = a2;
  rec__communication__ring_buffer__buffer__length = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,data) farray. forall a1:t1. forall a2:positive.
  forall a3:natural. (0 <= object__alignment2({ us_split_fields1 = {
  rec__communication__ring_buffer__buffer__content = { elts1 = a; rt1 = a1 };
  rec__communication__ring_buffer__buffer__first = a2;
  rec__communication__ring_buffer__buffer__length = a3 } })))

logic communication__ring_buffer__buffer__content__first__bit : int

logic communication__ring_buffer__buffer__content__last__bit : int

logic communication__ring_buffer__buffer__content__position : int

axiom communication__ring_buffer__buffer__content__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__content__first__bit)

axiom communication__ring_buffer__buffer__content__last__bit_axiom :
  (communication__ring_buffer__buffer__content__first__bit <  communication__ring_buffer__buffer__content__last__bit)

axiom communication__ring_buffer__buffer__content__position_axiom :
  (0 <= communication__ring_buffer__buffer__content__position)

logic communication__ring_buffer__buffer__first__first__bit : int

logic communication__ring_buffer__buffer__first__last__bit : int

logic communication__ring_buffer__buffer__first__position : int

axiom communication__ring_buffer__buffer__first__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__first__first__bit)

axiom communication__ring_buffer__buffer__first__last__bit_axiom :
  (communication__ring_buffer__buffer__first__first__bit <  communication__ring_buffer__buffer__first__last__bit)

axiom communication__ring_buffer__buffer__first__position_axiom :
  (0 <= communication__ring_buffer__buffer__first__position)

logic communication__ring_buffer__buffer__length__first__bit : int

logic communication__ring_buffer__buffer__length__last__bit : int

logic communication__ring_buffer__buffer__length__position : int

axiom communication__ring_buffer__buffer__length__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__length__first__bit)

axiom communication__ring_buffer__buffer__length__last__bit_axiom :
  (communication__ring_buffer__buffer__length__first__bit <  communication__ring_buffer__buffer__length__last__bit)

axiom communication__ring_buffer__buffer__length__position_axiom :
  (0 <= communication__ring_buffer__buffer__length__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy11 : (int,data) farray

logic dummy12 : t1

logic dummy13 : positive

logic dummy14 : natural

type buffer__ref = { buffer__content : us_rep
}

function buffer__ref___projection(a: buffer__ref) : us_rep =
  (a).buffer__content

logic dummy15 : (int,character) farray

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

logic user_eq10 : (int,character) farray, (int,character) farray -> bool

type us_split_fields2 = { rec__communication__mailbox__address :
(int,character) farray; rec__communication__mailbox__port : natural;
rec__communication__mailbox__in_buffer : us_rep;
rec__communication__mailbox__out_buffer : us_rep
}

function us_split_fields_Address__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__communication__mailbox__address

function us_split_fields_Port__projection(a: us_split_fields2) : natural =
  (a).rec__communication__mailbox__port

function us_split_fields_In_Buffer__projection(a: us_split_fields2) : us_rep =
  (a).rec__communication__mailbox__in_buffer

function us_split_fields_Out_Buffer__projection(a: us_split_fields2) : us_rep =
  (a).rec__communication__mailbox__out_buffer

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  ((((((bool_eq4(((a).us_split_fields3).rec__communication__mailbox__address,
  1, 15, ((b).us_split_fields3).rec__communication__mailbox__address, 1,
  15) = true) and
  (to_rep2(((a).us_split_fields3).rec__communication__mailbox__port) = to_rep2(((b).us_split_fields3).rec__communication__mailbox__port))) and
  (bool_eq12(((a).us_split_fields3).rec__communication__mailbox__in_buffer,
  ((b).us_split_fields3).rec__communication__mailbox__in_buffer) = true)) and
  (bool_eq12(((a).us_split_fields3).rec__communication__mailbox__out_buffer,
  ((b).us_split_fields3).rec__communication__mailbox__out_buffer) = true)) ->
  (bool_eq13(a, b) = true)) and
  ((not ((((bool_eq4(((a).us_split_fields3).rec__communication__mailbox__address,
  1, 15, ((b).us_split_fields3).rec__communication__mailbox__address, 1,
  15) = true) and
  (to_rep2(((a).us_split_fields3).rec__communication__mailbox__port) = to_rep2(((b).us_split_fields3).rec__communication__mailbox__port))) and
  (bool_eq12(((a).us_split_fields3).rec__communication__mailbox__in_buffer,
  ((b).us_split_fields3).rec__communication__mailbox__in_buffer) = true)) and
  (bool_eq12(((a).us_split_fields3).rec__communication__mailbox__out_buffer,
  ((b).us_split_fields3).rec__communication__mailbox__out_buffer) = true))) ->
  (bool_eq13(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. forall a1:natural.
  forall a2:(int,data) farray. forall a3:t1. forall a4:positive.
  forall a5:natural. forall a6:(int,data) farray. forall a7:t1.
  forall a8:positive. forall a9:natural. (0 <= object__size4({
  us_split_fields3 = { rec__communication__mailbox__address = a;
  rec__communication__mailbox__port = a1;
  rec__communication__mailbox__in_buffer = { us_split_fields1 = {
  rec__communication__ring_buffer__buffer__content = { elts1 = a2; rt1 = a3
  }; rec__communication__ring_buffer__buffer__first = a4;
  rec__communication__ring_buffer__buffer__length = a5 } };
  rec__communication__mailbox__out_buffer = { us_split_fields1 = {
  rec__communication__ring_buffer__buffer__content = { elts1 = a6; rt1 = a7
  }; rec__communication__ring_buffer__buffer__first = a8;
  rec__communication__ring_buffer__buffer__length = a9 } } } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. forall a1:natural.
  forall a2:(int,data) farray. forall a3:t1. forall a4:positive.
  forall a5:natural. forall a6:(int,data) farray. forall a7:t1.
  forall a8:positive. forall a9:natural. (0 <= object__alignment4({
  us_split_fields3 = { rec__communication__mailbox__address = a;
  rec__communication__mailbox__port = a1;
  rec__communication__mailbox__in_buffer = { us_split_fields1 = {
  rec__communication__ring_buffer__buffer__content = { elts1 = a2; rt1 = a3
  }; rec__communication__ring_buffer__buffer__first = a4;
  rec__communication__ring_buffer__buffer__length = a5 } };
  rec__communication__mailbox__out_buffer = { us_split_fields1 = {
  rec__communication__ring_buffer__buffer__content = { elts1 = a6; rt1 = a7
  }; rec__communication__ring_buffer__buffer__first = a8;
  rec__communication__ring_buffer__buffer__length = a9 } } } })))

logic communication__mailbox__address__first__bit : int

logic communication__mailbox__address__last__bit : int

logic communication__mailbox__address__position : int

axiom communication__mailbox__address__first__bit_axiom :
  (0 <= communication__mailbox__address__first__bit)

axiom communication__mailbox__address__last__bit_axiom :
  (communication__mailbox__address__first__bit <  communication__mailbox__address__last__bit)

axiom communication__mailbox__address__position_axiom :
  (0 <= communication__mailbox__address__position)

logic communication__mailbox__port__first__bit : int

logic communication__mailbox__port__last__bit : int

logic communication__mailbox__port__position : int

axiom communication__mailbox__port__first__bit_axiom :
  (0 <= communication__mailbox__port__first__bit)

axiom communication__mailbox__port__last__bit_axiom :
  (communication__mailbox__port__first__bit <  communication__mailbox__port__last__bit)

axiom communication__mailbox__port__position_axiom :
  (0 <= communication__mailbox__port__position)

logic communication__mailbox__in_buffer__first__bit : int

logic communication__mailbox__in_buffer__last__bit : int

logic communication__mailbox__in_buffer__position : int

axiom communication__mailbox__in_buffer__first__bit_axiom :
  (0 <= communication__mailbox__in_buffer__first__bit)

axiom communication__mailbox__in_buffer__last__bit_axiom :
  (communication__mailbox__in_buffer__first__bit <  communication__mailbox__in_buffer__last__bit)

axiom communication__mailbox__in_buffer__position_axiom :
  (0 <= communication__mailbox__in_buffer__position)

logic communication__mailbox__out_buffer__first__bit : int

logic communication__mailbox__out_buffer__last__bit : int

logic communication__mailbox__out_buffer__position : int

axiom communication__mailbox__out_buffer__first__bit_axiom :
  (0 <= communication__mailbox__out_buffer__first__bit)

axiom communication__mailbox__out_buffer__last__bit_axiom :
  (communication__mailbox__out_buffer__first__bit <  communication__mailbox__out_buffer__last__bit)

axiom communication__mailbox__out_buffer__position_axiom :
  (0 <= communication__mailbox__out_buffer__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy16 : (int,character) farray

logic dummy17 : natural

logic dummy18 : (int,data) farray

logic dummy19 : t1

logic dummy20 : positive

logic dummy21 : natural

logic dummy22 : (int,data) farray

logic dummy23 : t1

logic dummy24 : positive

logic dummy25 : natural

type mailbox__ref = { mailbox__content : us_rep1
}

function mailbox__ref___projection(a: mailbox__ref) : us_rep1 =
  (a).mailbox__content

logic address : (int,character) farray

logic address1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic port : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic max : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___String_Literal_167 : unit -> (int,character) farray

axiom temp___String_Literal_167__def_axiom :
  (((((((((((((((to_rep((temp___String_Literal_167(void)[1])) = 48) and
  (to_rep((temp___String_Literal_167(void)[2])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[3])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[4])) = 46)) and
  (to_rep((temp___String_Literal_167(void)[5])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[6])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[7])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[8])) = 46)) and
  (to_rep((temp___String_Literal_167(void)[9])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[10])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[12])) = 46)) and
  (to_rep((temp___String_Literal_167(void)[13])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[14])) = 48)) and
  (to_rep((temp___String_Literal_167(void)[15])) = 48))

 (* File "communication.ads", line 27, characters 0-0 *)
goal WP_parameter_def :
  (forall o:natural. (dynamic_property(1, 2147483647,
  to_rep1(first(address1)), to_rep1(last(address1))) -> (in_range3(port) ->
  ((to_rep2(o) = port) ->
  (((to_rep1(first(address1)) <= to_rep1(last(address1))) -> (((1 <= 15) ->
  (((to_rep1(last(address1)) - to_rep1(first(address1))) + 1) = ((15 - 1) + 1))) and
  ((not (1 <= 15)) ->
  (((to_rep1(last(address1)) - to_rep1(first(address1))) + 1) = 0)))) and
  ((not (to_rep1(first(address1)) <= to_rep1(last(address1)))) ->
  ((1 <= 15) -> (0 = ((15 - 1) + 1)))))))))
