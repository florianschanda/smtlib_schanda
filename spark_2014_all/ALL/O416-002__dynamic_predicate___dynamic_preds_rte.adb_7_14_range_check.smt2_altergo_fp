(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type small

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : small, small -> bool

logic dummy1 : small

type small__ref = { small__content : small
}

function small__ref___projection(a: small__ref) : small = (a).small__content

logic to_rep : small -> int

logic of_rep : int -> small

axiom inversion_axiom : (forall x:small [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:small [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic i3s : int

logic attr__ATTRIBUTE_ADDRESS : int

type very_small

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : very_small, very_small -> bool

logic dummy2 : very_small

type very_small__ref = { very_small__content : very_small
}

function very_small__ref___projection(a: very_small__ref) : very_small =
  (a).very_small__content

logic to_rep1 : very_small -> int

logic of_rep1 : int -> very_small

axiom inversion_axiom1 :
  (forall x:very_small [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:very_small [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic i5s : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields = { rec__dynamic_preds_rte__small_pair__a : small;
rec__dynamic_preds_rte__small_pair__b : very_small
}

function us_split_fields_A__projection(a: us_split_fields) : small =
  (a).rec__dynamic_preds_rte__small_pair__a

function us_split_fields_B__projection(a: us_split_fields) : very_small =
  (a).rec__dynamic_preds_rte__small_pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__dynamic_preds_rte__small_pair__a) = to_rep(((b).us_split_fields1).rec__dynamic_preds_rte__small_pair__a)) and
  (to_rep1(((a).us_split_fields1).rec__dynamic_preds_rte__small_pair__b) = to_rep1(((b).us_split_fields1).rec__dynamic_preds_rte__small_pair__b))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__dynamic_preds_rte__small_pair__a) = to_rep(((b).us_split_fields1).rec__dynamic_preds_rte__small_pair__a)) and
  (to_rep1(((a).us_split_fields1).rec__dynamic_preds_rte__small_pair__b) = to_rep1(((b).us_split_fields1).rec__dynamic_preds_rte__small_pair__b)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:small. forall a1:very_small. (0 <= object__size({
  us_split_fields1 = { rec__dynamic_preds_rte__small_pair__a = a;
  rec__dynamic_preds_rte__small_pair__b = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:small. forall a1:very_small. (0 <= object__alignment({
  us_split_fields1 = { rec__dynamic_preds_rte__small_pair__a = a;
  rec__dynamic_preds_rte__small_pair__b = a1 } })))

logic dynamic_preds_rte__small_pair__a__first__bit : int

logic dynamic_preds_rte__small_pair__a__last__bit : int

logic dynamic_preds_rte__small_pair__a__position : int

axiom dynamic_preds_rte__small_pair__a__first__bit_axiom :
  (0 <= dynamic_preds_rte__small_pair__a__first__bit)

axiom dynamic_preds_rte__small_pair__a__last__bit_axiom :
  (dynamic_preds_rte__small_pair__a__first__bit <  dynamic_preds_rte__small_pair__a__last__bit)

axiom dynamic_preds_rte__small_pair__a__position_axiom :
  (0 <= dynamic_preds_rte__small_pair__a__position)

logic dynamic_preds_rte__small_pair__b__first__bit : int

logic dynamic_preds_rte__small_pair__b__last__bit : int

logic dynamic_preds_rte__small_pair__b__position : int

axiom dynamic_preds_rte__small_pair__b__first__bit_axiom :
  (0 <= dynamic_preds_rte__small_pair__b__first__bit)

axiom dynamic_preds_rte__small_pair__b__last__bit_axiom :
  (dynamic_preds_rte__small_pair__b__first__bit <  dynamic_preds_rte__small_pair__b__last__bit)

axiom dynamic_preds_rte__small_pair__b__position_axiom :
  (0 <= dynamic_preds_rte__small_pair__b__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : small

logic dummy4 : very_small

type small_pair__ref = { small_pair__content : us_rep
}

function small_pair__ref___projection(a: small_pair__ref) : us_rep =
  (a).small_pair__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "dynamic_preds_rte.ads", line 17, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:small. forall x__split_fields1:very_small.
  forall temp___204:int. forall o:int. forall o1:small. forall o2:small.
  forall o3:very_small. forall temp___207:small.
  forall temp___2071:very_small. forall result:small.
  forall result1:very_small. forall x__split_fields2:small.
  forall x__split_fields3:very_small. ((in_range1(i3s) and
  ((2 * i3s) <  100000)) -> ((in_range2(i5s) and ((i5s * i5s) <  100000)) ->
  (in_range(y) -> ((((((((temp___204 = y) and in_range1(y)) and
  (((2 * temp___204) <  100000) and (o = temp___204))) and
  (to_rep(o1) = o)) and ((o1 = o2) and (x__split_fields1 = o3))) and
  ((temp___207 = o2) and (temp___2071 = o3))) and
  (((result = x__split_fields) and (result1 = x__split_fields1)) and
  ((x__split_fields2 = temp___207) and (x__split_fields3 = temp___2071)))) ->
  in_range2(y))))))
