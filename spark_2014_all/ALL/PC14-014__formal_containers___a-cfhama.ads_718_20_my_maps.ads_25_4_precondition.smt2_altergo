(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int1 : t -> int

logic of_int1 : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int1(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int1(v1) <  to_int1(v2))

predicate sle(v1: t, v2: t) = (to_int1(v1) <= to_int1(v2))

predicate sgt(v1: t, v2: t) = (to_int1(v2) <  to_int1(v1))

predicate sge(v1: t, v2: t) = (to_int1(v2) <= to_int1(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int1(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq3 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic bool_ne1 : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt1(x, y)]. ((ult(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le1(x, y)]. ((ule(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt1(x, y)]. ((ugt(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge1(x, y)]. ((uge(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge1(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type hash_type

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : hash_type, hash_type -> bool

logic dummy1 : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref___projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

logic to_rep1 : hash_type -> t

logic of_rep1 : t -> hash_type

axiom inversion_axiom1 :
  (forall x:hash_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int2(x: hash_type) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:hash_type [to_int2(x)]. uint_in_range(to_int2(x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_maps__n__map__capacity : count_type;
rec__my_maps__n__map__modulus : hash_type
}

function us_split_discrs_3__projection(a: us_split_discrs) : count_type =
  (a).rec__my_maps__n__map__capacity

function us_split_discrs_4__projection(a: us_split_discrs) : hash_type =
  (a).rec__my_maps__n__map__modulus

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_maps__n__map : us_main_type
}

function us_split_fields_Map2__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_maps__n__map

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_8__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep_11__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_12__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_discrs1).rec__my_maps__n__map__capacity) = to_rep(((b).us_split_discrs1).rec__my_maps__n__map__capacity)) and
  (to_rep1(((a).us_split_discrs1).rec__my_maps__n__map__modulus) = to_rep1(((b).us_split_discrs1).rec__my_maps__n__map__modulus))) and
  (us_main_eq(((a).us_split_fields1).rec__my_maps__n__map,
  ((b).us_split_fields1).rec__my_maps__n__map) = true)) -> (bool_eq5(a,
  b) = true)) and
  ((not (((to_rep(((a).us_split_discrs1).rec__my_maps__n__map__capacity) = to_rep(((b).us_split_discrs1).rec__my_maps__n__map__capacity)) and
  (to_rep1(((a).us_split_discrs1).rec__my_maps__n__map__modulus) = to_rep1(((b).us_split_discrs1).rec__my_maps__n__map__modulus))) and
  (us_main_eq(((a).us_split_fields1).rec__my_maps__n__map,
  ((b).us_split_fields1).rec__my_maps__n__map) = true))) -> (bool_eq5(a,
  b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__size({ us_split_discrs1 = { rec__my_maps__n__map__capacity =
  a; rec__my_maps__n__map__modulus = a1 }; us_split_fields1 = {
  rec__my_maps__n__map = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = a; rec__my_maps__n__map__modulus = a1 };
  us_split_fields1 = { rec__my_maps__n__map = a2 } })))

logic my_maps__n__map__capacity__first__bit : int

logic my_maps__n__map__capacity__last__bit : int

logic my_maps__n__map__capacity__position : int

axiom my_maps__n__map__capacity__first__bit_axiom :
  (0 <= my_maps__n__map__capacity__first__bit)

axiom my_maps__n__map__capacity__last__bit_axiom :
  (my_maps__n__map__capacity__first__bit <  my_maps__n__map__capacity__last__bit)

axiom my_maps__n__map__capacity__position_axiom :
  (0 <= my_maps__n__map__capacity__position)

logic my_maps__n__map__modulus__first__bit : int

logic my_maps__n__map__modulus__last__bit : int

logic my_maps__n__map__modulus__position : int

axiom my_maps__n__map__modulus__first__bit_axiom :
  (0 <= my_maps__n__map__modulus__first__bit)

axiom my_maps__n__map__modulus__last__bit_axiom :
  (my_maps__n__map__modulus__first__bit <  my_maps__n__map__modulus__last__bit)

axiom my_maps__n__map__modulus__position_axiom :
  (0 <= my_maps__n__map__modulus__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : count_type

logic dummy3 : hash_type

logic dummy4 : us_main_type

type map__ref = { map__content : us_rep
}

function map__ref_4__projection(a: map__ref) : us_rep = (a).map__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type
  [user_eq2({ us_split_discrs1 = { rec__my_maps__n__map__capacity = a;
  rec__my_maps__n__map__modulus = a1 }; us_split_fields1 = {
  rec__my_maps__n__map = a2 } }, { us_split_discrs1 = {
  rec__my_maps__n__map__capacity = b; rec__my_maps__n__map__modulus = b1 };
  us_split_fields1 = { rec__my_maps__n__map = b2 } })]. (user_eq2({
  us_split_discrs1 = { rec__my_maps__n__map__capacity = a;
  rec__my_maps__n__map__modulus = a1 }; us_split_fields1 = {
  rec__my_maps__n__map = a2 } }, { us_split_discrs1 = {
  rec__my_maps__n__map__capacity = b; rec__my_maps__n__map__modulus = b1 };
  us_split_fields1 = { rec__my_maps__n__map = b2 } }) = oeq({
  us_split_discrs1 = { rec__my_maps__n__map__capacity = a;
  rec__my_maps__n__map__modulus = a1 }; us_split_fields1 = {
  rec__my_maps__n__map = a2 } }, { us_split_discrs1 = {
  rec__my_maps__n__map__capacity = b; rec__my_maps__n__map__modulus = b1 };
  us_split_fields1 = { rec__my_maps__n__map = b2 } })))

type us_split_fields2 = { rec__my_maps__n__cursor__node : count_type
}

function us_split_fields_Node2__projection(a: us_split_fields2) : count_type =
  (a).rec__my_maps__n__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_9__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_13__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((to_rep(((a).us_split_fields3).rec__my_maps__n__cursor__node) = to_rep(((b).us_split_fields3).rec__my_maps__n__cursor__node)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__my_maps__n__cursor__node) = to_rep(((b).us_split_fields3).rec__my_maps__n__cursor__node))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__my_maps__n__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__my_maps__n__cursor__node = a } })))

logic my_maps__n__cursor__node__first__bit : int

logic my_maps__n__cursor__node__last__bit : int

logic my_maps__n__cursor__node__position : int

axiom my_maps__n__cursor__node__first__bit_axiom :
  (0 <= my_maps__n__cursor__node__first__bit)

axiom my_maps__n__cursor__node__last__bit_axiom :
  (my_maps__n__cursor__node__first__bit <  my_maps__n__cursor__node__last__bit)

axiom my_maps__n__cursor__node__position_axiom :
  (0 <= my_maps__n__cursor__node__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy5 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref_2__projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [length({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } })].
  ((length({ us_split_discrs1 = { rec__my_maps__n__map__capacity = container;
  rec__my_maps__n__map__modulus = container1 }; us_split_fields1 = {
  rec__my_maps__n__map = container2 } }) <= to_rep(container)) and
  in_range1(length({ us_split_discrs1 = { rec__my_maps__n__map__capacity =
  container; rec__my_maps__n__map__modulus = container1 }; us_split_fields1 =
  { rec__my_maps__n__map = container2 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [length1(attr__tag, { us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } })].
  in_range1(length1(attr__tag, { us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq7 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type map__ref1 = { map__content1 : us_rep2
}

function map__ref_6__projection(a: map__ref1) : us_rep2 = (a).map__content1

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref_6__projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic get : us_rep2, us_rep1 -> int

logic get__function_guard : int, us_rep2, us_rep1 -> prop

type element_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_8__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic has_key : us_rep2, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep2, us_rep1 -> prop

logic witness : us_rep2, us_rep1 -> int

logic witness__function_guard : int, us_rep2, us_rep1 -> prop

logic w_get : us_rep2, int -> int

logic w_get__function_guard : int, us_rep2, int -> prop

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [get(container, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_maps__n__cursor__node = key } }) = true) ->
  (((of_int(0) = true) -> ((get(container, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } }) = w_get(container,
  witness(container, { us_split_fields3 = { rec__my_maps__n__cursor__node =
  key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = k } }) = true) -> ((bool_eq6({
  us_split_fields3 = { rec__my_maps__n__cursor__node = k } }, {
  us_split_fields3 = { rec__my_maps__n__cursor__node = key } }) = true) <->
  (witness(container, { us_split_fields3 = { rec__my_maps__n__cursor__node =
  key } }) = witness(container, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = k } }))))))) and in_range2(get(container, {
  us_split_fields3 = { rec__my_maps__n__cursor__node = key } }))))))

logic positions : us_rep -> us_rep2

logic positions__function_guard : us_rep2, us_rep -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [positions({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } })].
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } }),
  { us_split_fields3 = { rec__my_maps__n__cursor__node = no_element }
  }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } }),
  { us_split_fields3 = { rec__my_maps__n__cursor__node = i } }) = true) ->
  (((1 <= get(positions({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } }),
  { us_split_fields3 = { rec__my_maps__n__cursor__node = i } })) and
  (get(positions({ us_split_discrs1 = { rec__my_maps__n__map__capacity =
  container; rec__my_maps__n__map__modulus = container1 }; us_split_fields1 =
  { rec__my_maps__n__map = container2 } }), { us_split_fields3 = {
  rec__my_maps__n__cursor__node = i } }) <= length({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 }
  }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } }),
  { us_split_fields3 = { rec__my_maps__n__cursor__node = j } }) = true) ->
  ((get(positions({ us_split_discrs1 = { rec__my_maps__n__map__capacity =
  container; rec__my_maps__n__map__modulus = container1 }; us_split_fields1 =
  { rec__my_maps__n__map = container2 } }), { us_split_fields3 = {
  rec__my_maps__n__cursor__node = i } }) = get(positions({ us_split_discrs1 =
  { rec__my_maps__n__map__capacity = container;
  rec__my_maps__n__map__modulus = container1 }; us_split_fields1 = {
  rec__my_maps__n__map = container2 } }), { us_split_fields3 = {
  rec__my_maps__n__cursor__node = j } })) -> (bool_eq6({ us_split_fields3 = {
  rec__my_maps__n__cursor__node = i } }, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = j } }) = true)))))))))

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

axiom has_element__post__dispatch_axiom : true

logic container : count_type

logic container1 : hash_type

logic container2 : us_main_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic position : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

type integer

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : positive, positive -> bool

logic dummy9 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic to_rep3 : positive -> int

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields4 = { rec__my_maps__my_rec__f : positive;
rec__my_maps__my_rec__g : integer
}

function us_split_fields_F__projection(a: us_split_fields4) : positive =
  (a).rec__my_maps__my_rec__f

function us_split_fields_G__projection(a: us_split_fields4) : integer =
  (a).rec__my_maps__my_rec__g

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_7__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep_10__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq11 : us_rep3, us_rep3 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq11(a, b)].
  ((((to_rep3(((a).us_split_fields5).rec__my_maps__my_rec__f) = to_rep3(((b).us_split_fields5).rec__my_maps__my_rec__f)) and
  (to_rep2(((a).us_split_fields5).rec__my_maps__my_rec__g) = to_rep2(((b).us_split_fields5).rec__my_maps__my_rec__g))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_fields5).rec__my_maps__my_rec__f) = to_rep3(((b).us_split_fields5).rec__my_maps__my_rec__f)) and
  (to_rep2(((a).us_split_fields5).rec__my_maps__my_rec__g) = to_rep2(((b).us_split_fields5).rec__my_maps__my_rec__g)))) ->
  (bool_eq11(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:positive. forall a1:integer. (0 <= object__size3({
  us_split_fields5 = { rec__my_maps__my_rec__f = a; rec__my_maps__my_rec__g =
  a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:positive. forall a1:integer. (0 <= object__alignment3({
  us_split_fields5 = { rec__my_maps__my_rec__f = a; rec__my_maps__my_rec__g =
  a1 } })))

logic my_maps__my_rec__f__first__bit : int

logic my_maps__my_rec__f__last__bit : int

logic my_maps__my_rec__f__position : int

axiom my_maps__my_rec__f__first__bit_axiom :
  (0 <= my_maps__my_rec__f__first__bit)

axiom my_maps__my_rec__f__last__bit_axiom :
  (my_maps__my_rec__f__first__bit <  my_maps__my_rec__f__last__bit)

axiom my_maps__my_rec__f__position_axiom :
  (0 <= my_maps__my_rec__f__position)

logic my_maps__my_rec__g__first__bit : int

logic my_maps__my_rec__g__last__bit : int

logic my_maps__my_rec__g__position : int

axiom my_maps__my_rec__g__first__bit_axiom :
  (0 <= my_maps__my_rec__g__first__bit)

axiom my_maps__my_rec__g__last__bit_axiom :
  (my_maps__my_rec__g__first__bit <  my_maps__my_rec__g__last__bit)

axiom my_maps__my_rec__g__position_axiom :
  (0 <= my_maps__my_rec__g__position)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy10 : positive

logic dummy11 : integer

type my_rec__ref = { my_rec__content : us_rep3
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep3 =
  (a).my_rec__content

logic my_eq__function_guard : bool, us_rep3, us_rep3 -> prop

axiom no_element__def_axiom : (no_element = of_rep(0))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep4

logic bool_eq12 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq9 : us_rep4, us_rep4 -> bool

logic dummy12 : us_rep4

type map__ref2 = { map__content2 : us_rep4
}

function map__ref_5__projection(a: map__ref2) : us_rep4 = (a).map__content2

logic length3 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

logic is_empty1 : us_rep4 -> bool

logic is_empty__function_guard1 : bool, us_rep4 -> prop

logic model__ : us_rep -> us_rep4

logic model____function_guard : us_rep4, us_rep -> prop

axiom model____post_axiom : true

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard2 : bool, us_rep4, us_rep4 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [oeq({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = left; rec__my_maps__n__map__modulus =
  left1 }; us_split_fields1 = { rec__my_maps__n__map = left2 } }, {
  us_split_discrs1 = { rec__my_maps__n__map__capacity = right;
  rec__my_maps__n__map__modulus = right1 }; us_split_fields1 = {
  rec__my_maps__n__map = right2 } })]. ((oeq({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = left; rec__my_maps__n__map__modulus =
  left1 }; us_split_fields1 = { rec__my_maps__n__map = left2 } }, {
  us_split_discrs1 = { rec__my_maps__n__map__capacity = right;
  rec__my_maps__n__map__modulus = right1 }; us_split_fields1 = {
  rec__my_maps__n__map = right2 } }) = true) <-> (oeq2(model__({
  us_split_discrs1 = { rec__my_maps__n__map__capacity = left;
  rec__my_maps__n__map__modulus = left1 }; us_split_fields1 = {
  rec__my_maps__n__map = left2 } }), model__({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = right; rec__my_maps__n__map__modulus =
  right1 }; us_split_fields1 = { rec__my_maps__n__map = right2 }
  })) = true)))

axiom oeq__post__dispatch_axiom : true

type key_type__ref1 = { key_type__content1 : us_rep3
}

function key_type__ref_5__projection(a: key_type__ref1) : us_rep3 =
  (a).key_type__content1

logic has_key1 : us_rep4, us_rep3 -> bool

logic has_key__function_guard1 : bool, us_rep4, us_rep3 -> prop

axiom has_key__post_axiom :
  (forall container3:us_rep4.
  (forall key:positive. forall key1:integer [has_key1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } })]. ((of_int(1) = true) ->
  ((exists k:positive. exists k1:integer. ((has_key1(container3, {
   us_split_fields5 = { rec__my_maps__my_rec__f = k;
   rec__my_maps__my_rec__g = k1 } }) = true) and (bool_eq(to_rep3(k),
   to_rep3(key)) = true))) ->
  (has_key1(container3, { us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = true)))))

type element_type1

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : element_type1, element_type1 -> bool

logic dummy13 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_6__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic witness1 : us_rep4, us_rep3 -> int

logic witness__function_guard1 : int, us_rep4, us_rep3 -> prop

logic w_get1 : us_rep4, int -> int

logic w_get__function_guard1 : int, us_rep4, int -> prop

logic get1 : us_rep4, us_rep3 -> int

logic get__function_guard1 : int, us_rep4, us_rep3 -> prop

axiom get__post_axiom1 :
  (forall container3:us_rep4.
  (forall key:positive. forall key1:integer [get1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } })]. ((has_key1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = true) -> (((of_int(1) = true) ->
  ((get1(container3, { us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = w_get1(container3,
  witness1(container3, { us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }))) and
  (forall k:positive. forall k1:integer. ((has_key1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = k; rec__my_maps__my_rec__g =
  k1 } }) = true) -> ((bool_eq(to_rep3(k), to_rep3(key)) = true) <->
  (witness1(container3, { us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = witness1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = k; rec__my_maps__my_rec__g =
  k1 } }))))))) and in_range5(get1(container3, { us_split_fields5 = {
  rec__my_maps__my_rec__f = key; rec__my_maps__my_rec__g = key1 } }))))))

axiom length__post_axiom1 :
  (forall container3:us_rep4 [length3(container3)].
  in_range1(length3(container3)))

axiom oeq__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) <->
  ((forall key:positive. forall key1:integer. ((has_key1(left, {
   us_split_fields5 = { rec__my_maps__my_rec__f = key;
   rec__my_maps__my_rec__g = key1 } }) = true) -> ((has_key1(right, {
   us_split_fields5 = { rec__my_maps__my_rec__f = key;
   rec__my_maps__my_rec__g = key1 } }) = true) and (get1(right, {
   us_split_fields5 = { rec__my_maps__my_rec__f = key;
   rec__my_maps__my_rec__g = key1 } }) = get1(left, { us_split_fields5 = {
   rec__my_maps__my_rec__f = key; rec__my_maps__my_rec__g = key1 } }))))) and
  (forall key:positive. forall key1:integer. ((has_key1(right, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = true) -> (has_key1(left, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = true))))))

axiom is_empty__post_axiom :
  (forall container3:us_rep4 [is_empty1(container3)].
  ((is_empty1(container3) = true) <->
  (forall key:positive. forall key1:integer. (not (has_key1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = true)))))

logic has_witness : us_rep4, int -> bool

logic has_witness__function_guard : bool, us_rep4, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container3:us_rep4.
  (forall key:positive. forall key1:integer [witness1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } })]. ((has_key1(container3, {
  us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } }) = true) -> ((has_witness(container3,
  witness1(container3, { us_split_fields5 = { rec__my_maps__my_rec__f = key;
  rec__my_maps__my_rec__g = key1 } })) = true) and
  in_range1(witness1(container3, { us_split_fields5 = {
  rec__my_maps__my_rec__f = key; rec__my_maps__my_rec__g = key1 } }))))))

axiom w_get__post_axiom :
  (forall container3:us_rep4.
  (forall witness2:int [w_get1(container3, witness2)].
  ((in_range1(witness2) and (has_witness(container3, witness2) = true)) ->
  in_range5(w_get1(container3, witness2)))))

axiom has_key__post_axiom1 :
  (forall container3:us_rep2.
  (forall key:count_type [has_key(container3, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } })]. ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container3, { us_split_fields3 = {
   rec__my_maps__n__cursor__node = k } }) = true) and (bool_eq6({
   us_split_fields3 = { rec__my_maps__n__cursor__node = k } }, {
   us_split_fields3 = { rec__my_maps__n__cursor__node = key } }) = true))) ->
  (has_key(container3, { us_split_fields3 = { rec__my_maps__n__cursor__node =
  key } }) = true)))))

axiom length__post_axiom2 :
  (forall container3:us_rep2 [length2(container3)].
  in_range1(length2(container3)))

axiom is_empty__post_axiom1 :
  (forall container3:us_rep2 [is_empty(container3)].
  ((is_empty(container3) = true) <->
  (forall key:count_type. (not (has_key(container3, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } }) = true)))))

logic has_witness1 : us_rep2, int -> bool

logic has_witness__function_guard1 : bool, us_rep2, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container3:us_rep2.
  (forall key:count_type [witness(container3, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } })]. ((has_key(container3, {
  us_split_fields3 = { rec__my_maps__n__cursor__node = key } }) = true) ->
  ((has_witness1(container3, witness(container3, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } })) = true) and
  in_range1(witness(container3, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = key } }))))))

axiom w_get__post_axiom1 :
  (forall container3:us_rep2.
  (forall witness2:int [w_get(container3, witness2)].
  ((in_range1(witness2) and (has_witness1(container3, witness2) = true)) ->
  in_range2(w_get(container3, witness2)))))

 (* File "a-cfhama.ads", line 702, characters 0-0 *)
goal WP_parameter_def :
  (forall o:count_type. forall o1:count_type. forall temp___1058:count_type.
  forall o2:us_rep2. forall o3:int. (((((to_rep(o) = 0) and (o = o1)) and
  (temp___1058 = o1)) and (temp___1058 = no_element)) ->
  (((has_key(positions({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 } }),
  { us_split_fields3 = { rec__my_maps__n__cursor__node = position }
  }) = true) or (bool_eq6({ us_split_fields3 = {
  rec__my_maps__n__cursor__node = position } }, { us_split_fields3 = {
  rec__my_maps__n__cursor__node = no_element } }) = true)) ->
  ((not (bool_eq6({ us_split_fields3 = { rec__my_maps__n__cursor__node =
  position } }, { us_split_fields3 = { rec__my_maps__n__cursor__node =
  no_element } }) = true)) -> (((o3 = length({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 }
  })) and (in_range1(o3) and (o3 <= to_rep(container)))) ->
  (((o2 = positions({ us_split_discrs1 = { rec__my_maps__n__map__capacity =
  container; rec__my_maps__n__map__modulus = container1 }; us_split_fields1 =
  { rec__my_maps__n__map = container2 } })) and ((not (has_key(o2, {
  us_split_fields3 = { rec__my_maps__n__cursor__node = no_element }
  }) = true)) and
  (forall i:us_rep1. ((has_key(o2, i) = true) -> (((1 <= get(o2, i)) and
  (get(o2, i) <= length({ us_split_discrs1 = {
  rec__my_maps__n__map__capacity = container; rec__my_maps__n__map__modulus =
  container1 }; us_split_fields1 = { rec__my_maps__n__map = container2 }
  }))) and
  (forall j:us_rep1. ((has_key(o2, j) = true) -> ((get(o2, i) = get(o2,
  j)) -> (bool_eq6(i, j) = true))))))))) -> (has_key(o2, { us_split_fields3 =
  { rec__my_maps__n__cursor__node = position } }) = true)))))))
