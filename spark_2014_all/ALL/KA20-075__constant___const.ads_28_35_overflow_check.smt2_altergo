(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a1:(int,integer) farray.
  (forall first:int [slide(a1, first, first)]. (slide(a1, first,
  first) = a1)))

axiom slide_def :
  (forall a1:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a1, old_first, new_first)[i])]. ((slide(a1,
  old_first, new_first)[i]) = (a1[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a1, a_first, a_last, b1, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a1, a_first, a_last, b1,
  b_first, b_last)[i]) = (a1[i]))) and ((a_last <  i) -> ((concat(a1,
  a_first, a_last, b1, b_first,
  b_last)[i]) = (b1[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq2 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a1:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b1:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a1, a__first, a__last, b1, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a1[temp___idx_132])) = to_rep((b1[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq2(a1, a__first, a__last, b1, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a1[temp___idx_132])) = to_rep((b1[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq2(a1, a__first, a__last, b1, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b1, b__first, b__last, a1, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a1[temp___idx_132])) = to_rep((b1[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b1, b_first, b_last)].
  ((compare(a1, a_first, a_last, b1, b_first, b_last) = 0) <-> (bool_eq2(a1,
  a_first, a_last, b1, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b1, b_first, b_last)].
  ((compare(a1, a_first, a_last, b1, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq2(a1, a_first, i, b1, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a1[(i + 1)])) <  to_rep((b1[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b1, b_first, b_last)].
  ((0 <  compare(a1, a_first, a_last, b1, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq2(a1, a_first, j, b1, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b1[(i + 1)])) <  to_rep((a1[(j + 1)]))))))))))))

logic c : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic const__c__aggregate_def : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___134:int.
  (forall temp___135:int.
  ((const__c__aggregate_def(temp___134)[temp___135]) = of_rep(temp___134))))

logic c2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic const__c2__aggregate_def : int -> (int,integer) farray

axiom def_axiom1 :
  (forall temp___137:int.
  (forall temp___138:int.
  ((const__c2__aggregate_def(temp___137)[temp___138]) = of_rep(temp___137))))

logic d : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic const__d__aggregate_def : int, int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___140:int. forall temp___141:int.
  (((const__d__aggregate_def(temp___140,
  temp___141)[1]) = of_rep(temp___140)) and
  ((const__d__aggregate_def(temp___140,
  temp___141)[2]) = of_rep(temp___141))))

logic d2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic const__d2__aggregate_def : int, int -> (int,integer) farray

axiom def_axiom3 :
  (forall temp___144:int. forall temp___145:int.
  (((const__d2__aggregate_def(temp___144,
  temp___145)[1]) = of_rep(temp___144)) and
  ((const__d2__aggregate_def(temp___144,
  temp___145)[2]) = of_rep(temp___145))))

type us_split_fields = { rec__const__te__x : integer; rec__const__te__y :
integer
}

function us_split_fields_X__projection(a1: us_split_fields) : integer =
  (a1).rec__const__te__x

function us_split_fields_Y__projection(a1: us_split_fields) : integer =
  (a1).rec__const__te__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a1: us_split_fields__ref) : us_split_fields =
  (a1).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a1: us_rep) : us_split_fields =
  (a1).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a1:us_rep. forall b1:us_rep [bool_eq3(a1, b1)].
  ((((to_rep(((a1).us_split_fields1).rec__const__te__x) = to_rep(((b1).us_split_fields1).rec__const__te__x)) and
  (to_rep(((a1).us_split_fields1).rec__const__te__y) = to_rep(((b1).us_split_fields1).rec__const__te__y))) ->
  (bool_eq3(a1, b1) = true)) and
  ((not ((to_rep(((a1).us_split_fields1).rec__const__te__x) = to_rep(((b1).us_split_fields1).rec__const__te__x)) and
  (to_rep(((a1).us_split_fields1).rec__const__te__y) = to_rep(((b1).us_split_fields1).rec__const__te__y)))) ->
  (bool_eq3(a1, b1) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a1:integer. forall a2:integer. (0 <= object__size({
  us_split_fields1 = { rec__const__te__x = a1; rec__const__te__y = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a1:integer. forall a2:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__const__te__x = a1; rec__const__te__y = a2 } })))

logic const__te__x__first__bit : int

logic const__te__x__last__bit : int

logic const__te__x__position : int

axiom const__te__x__first__bit_axiom : (0 <= const__te__x__first__bit)

axiom const__te__x__last__bit_axiom :
  (const__te__x__first__bit <  const__te__x__last__bit)

axiom const__te__x__position_axiom : (0 <= const__te__x__position)

logic const__te__y__first__bit : int

logic const__te__y__last__bit : int

logic const__te__y__position : int

axiom const__te__y__first__bit_axiom : (0 <= const__te__y__first__bit)

axiom const__te__y__last__bit_axiom :
  (const__te__y__first__bit <  const__te__y__last__bit)

axiom const__te__y__position_axiom : (0 <= const__te__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type te__ref = { te__content : us_rep
}

function te__ref___projection(a1: te__ref) : us_rep = (a1).te__content

logic e : integer

logic e1 : integer

logic attr__ATTRIBUTE_ADDRESS6 : int

logic f : integer

logic f1 : integer

logic attr__ATTRIBUTE_ADDRESS7 : int

logic g : integer

logic g1 : integer

logic attr__ATTRIBUTE_ADDRESS8 : int

logic fi : unit -> int

logic fi__function_guard : int, unit -> prop

axiom fi__post_axiom : in_range(fi(void))

axiom fi__def_axiom : (fi(void) = 1)

logic i : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic fk : unit -> int

logic fk__function_guard : int, unit -> prop

axiom fk__post_axiom : in_range(fk(void))

axiom fk__def_axiom : (fk(void) = 1)

logic k : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic fm : int -> int

logic fm__function_guard : int, int -> prop

axiom fm__post_axiom :
  (forall x:int [fm(x)]. (in_range(x) -> in_range(fm(x))))

axiom fm__def_axiom : (forall x:int [fm(x)]. (in_range(x) -> (fm(x) = x)))

logic m : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic p : int

logic attr__ATTRIBUTE_ADDRESS16 : int

axiom a__def_axiom : (a = 1)

axiom b__def_axiom : (b = 1)

axiom c__def_axiom : (c = const__c__aggregate_def(1))

axiom c2__def_axiom : (c2 = const__c2__aggregate_def(1))

axiom d__def_axiom : (d = const__d__aggregate_def(1, 1))

axiom d2__def_axiom : (d2 = const__d2__aggregate_def(1, 1))

axiom e__def_axiom : ((e = of_rep(1)) and (e1 = of_rep(1)))

axiom f__def_axiom : ((f = of_rep(1)) and (f1 = of_rep(1)))

axiom g__def_axiom : ((g = of_rep(1)) and (g1 = of_rep(1)))

axiom i__def_axiom : (i = fi(void))

axiom j__def_axiom : (j = ((2 * fi(void)) - 1))

axiom k__def_axiom : (k = fk(void))

axiom l__def_axiom : (l = ((2 * fk(void)) - 1))

axiom m__def_axiom : (m = fm(1))

axiom n__def_axiom : (n = ((2 * fm(1)) - 1))

 (* File "const.ads", line 36, characters 0-0 *)
goal WP_parameter_def :
  (forall o:integer. forall o1:integer. forall o2:integer. forall o3:integer.
  forall const__e__assume:integer. forall const__e__assume1:integer.
  forall o4:integer. forall o5:integer. forall o6:integer. forall o7:integer.
  forall const__f__assume:integer. forall const__f__assume1:integer.
  forall o8:integer. forall o9:integer. forall o10:integer.
  forall o11:integer. forall const__g__assume:integer.
  forall const__g__assume1:integer. forall const__i__assume:int.
  forall o12:int. forall o13:int. forall o14:int. forall o15:int.
  forall const__j__assume:int. forall const__k__assume:int. forall o16:int.
  forall o17:int. forall o18:int. forall o19:int. (in_range(a) ->
  (in_range(b) -> ((const__c__aggregate_def(1) = c) ->
  ((const__c2__aggregate_def(1) = c2) -> ((const__d__aggregate_def(1,
  1) = d) -> ((const__d2__aggregate_def(1, 1) = d2) ->
  (((((to_rep(o) = 1) and ((to_rep(o1) = 1) and ((o1 = o2) and
  (o = o3)))) and ((const__e__assume = o2) and (const__e__assume1 = o3))) and
  ((const__e__assume = e) and (const__e__assume1 = e1))) ->
  (((((to_rep(o4) = 1) and ((to_rep(o5) = 1) and ((o5 = o6) and
  (o4 = o7)))) and ((const__f__assume = o6) and
  (const__f__assume1 = o7))) and ((const__f__assume = f) and
  (const__f__assume1 = f1))) -> (((((to_rep(o8) = 1) and
  ((to_rep(o9) = 1) and ((o9 = o10) and (o8 = o11)))) and
  ((const__g__assume = o10) and (const__g__assume1 = o11))) and
  ((const__g__assume = g) and (const__g__assume1 = g1))) ->
  ((((const__i__assume = fi(void)) and (in_range(const__i__assume) and
  (const__i__assume = 1))) and (const__i__assume = i)) -> (in_range(i) ->
  ((((((((o12 = fi(void)) and (in_range(o12) and (o12 = 1))) and
  (o13 = (2 * o12))) and ((o14 = o13) and in_range(o13))) and
  (o15 = (o14 - 1))) and ((const__j__assume = o15) and in_range(o15))) and
  (const__j__assume = j)) -> (in_range(j) ->
  ((((const__k__assume = fk(void)) and (in_range(const__k__assume) and
  (const__k__assume = 1))) and (const__k__assume = k)) -> (in_range(k) ->
  ((((((o16 = fk(void)) and (in_range(o16) and (o16 = 1))) and
  (o17 = (2 * o16))) and ((o18 = o17) and in_range(o17))) and
  (o19 = (o18 - 1))) -> in_range(o19))))))))))))))))))
