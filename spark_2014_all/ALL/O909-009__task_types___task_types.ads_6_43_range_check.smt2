;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__task_types__my_task_type__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural
  (rec__task_types__my_task_type__c a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__task_types__my_task_type us_main_type)))))
(define-fun us_split_fields_My_Task_Type__projection ((a us_split_fields)) us_main_type
  (rec__task_types__my_task_type a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___5__projection ((a us_rep)) Bool (attr__constrained a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const task_types__my_task_type__c__first__bit Int)

(declare-const task_types__my_task_type__c__last__bit Int)

(declare-const task_types__my_task_type__c__position Int)

;; task_types__my_task_type__c__first__bit_axiom
  (assert (<= 0 task_types__my_task_type__c__first__bit))

;; task_types__my_task_type__c__last__bit_axiom
  (assert
  (< task_types__my_task_type__c__first__bit task_types__my_task_type__c__last__bit))

;; task_types__my_task_type__c__position_axiom
  (assert (<= 0 task_types__my_task_type__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-datatypes ((my_task_type__ref 0))
(((mk_my_task_type__ref (my_task_type__content us_rep)))))
(define-fun my_task_type__ref___projection ((a my_task_type__ref)) us_rep
  (my_task_type__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__task_types__my_task_type1 us_main_type)))))
(define-fun us_split_fields_My_Task_Type__2__projection ((a us_split_fields2)) us_main_type
  (rec__task_types__my_task_type1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__constrained1 Bool)))))
(define-fun us_rep___6__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                                 a))

(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___8__projection ((a us_rep1)) Bool (attr__constrained1 a))

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (rec__task_types__my_task_type1
                                         (us_split_fields3 a)))
                                         (attr__constrained1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (rec__task_types__my_task_type
                                         (us_split_fields1 r)))
                                         (attr__constrained r)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun in_range1 ((rec__task_types__my_task_type__c1 Int)
  (a us_rep)) Bool (= rec__task_types__my_task_type__c1 (to_rep
                                                        (rec__task_types__my_task_type__c
                                                        (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const task_types__my_task_type__c__first__bit1 Int)

(declare-const task_types__my_task_type__c__last__bit1 Int)

(declare-const task_types__my_task_type__c__position1 Int)

;; task_types__my_task_type__c__first__bit_axiom
  (assert (<= 0 task_types__my_task_type__c__first__bit1))

;; task_types__my_task_type__c__last__bit_axiom
  (assert
  (< task_types__my_task_type__c__first__bit1 task_types__my_task_type__c__last__bit1))

;; task_types__my_task_type__c__position_axiom
  (assert (<= 0 task_types__my_task_type__c__position1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-datatypes ((s1s__ref 0)) (((mk_s1s__ref (s1s__content us_rep1)))))
(define-fun s1s__ref___projection ((a s1s__ref)) us_rep1 (s1s__content a))

(define-fun dynamic_invariant ((temp___expr_522 us_rep1)
  (temp___is_init_519 Bool) (temp___skip_constant_520 Bool)
  (temp___do_toplevel_521 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_520 true))
                                      (in_range1 0
                                      (to_base temp___expr_522)))
                                      (= (attr__constrained1 temp___expr_522) true)))

(define-fun default_initial_assumption ((temp___expr_524 us_rep1)
  (temp___skip_top_level_525 Bool)) Bool (and
                                         (= (attr__constrained1
                                            temp___expr_524) true)
                                         (= (to_rep
                                            (rec__task_types__my_task_type__c
                                            (us_split_discrs2
                                            temp___expr_524))) 0)))

(declare-const t__split_discrs us_split_discrs)

(declare-const t__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__task_types__my_task_type2 us_main_type)))))
(define-fun us_split_fields_My_Task_Type__3__projection ((a us_split_fields4)) us_main_type
  (rec__task_types__my_task_type2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__constrained2 Bool)))))
(define-fun us_rep___9__projection ((a us_rep2)) us_split_discrs (us_split_discrs3
                                                                 a))

(define-fun us_rep___10__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                   a))

(define-fun us_rep___11__projection ((a us_rep2)) Bool (attr__constrained2 a))

(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a)
                                          (mk___split_fields
                                          (rec__task_types__my_task_type2
                                          (us_split_fields5 a)))
                                          (attr__constrained2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r)
                                          (mk___split_fields2
                                          (rec__task_types__my_task_type
                                          (us_split_fields1 r)))
                                          (attr__constrained r)))

(define-fun in_range2 ((rec__task_types__my_task_type__c1 Int)
  (a us_rep)) Bool (= rec__task_types__my_task_type__c1 (to_rep
                                                        (rec__task_types__my_task_type__c
                                                        (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const task_types__my_task_type__c__first__bit2 Int)

(declare-const task_types__my_task_type__c__last__bit2 Int)

(declare-const task_types__my_task_type__c__position2 Int)

;; task_types__my_task_type__c__first__bit_axiom
  (assert (<= 0 task_types__my_task_type__c__first__bit2))

;; task_types__my_task_type__c__last__bit_axiom
  (assert
  (< task_types__my_task_type__c__first__bit2 task_types__my_task_type__c__last__bit2))

;; task_types__my_task_type__c__position_axiom
  (assert (<= 0 task_types__my_task_type__c__position2))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-datatypes ((tt2S__ref 0))
(((mk_tt2S__ref (tt2S__content us_rep2)))))
(define-fun tt2S__ref___projection ((a tt2S__ref)) us_rep2 (tt2S__content a))

(define-fun dynamic_invariant1 ((temp___expr_530 us_rep2)
  (temp___is_init_527 Bool) (temp___skip_constant_528 Bool)
  (temp___do_toplevel_529 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_528 true))
                                      (in_range2 1
                                      (to_base1 temp___expr_530)))
                                      (= (attr__constrained2 temp___expr_530) true)))

(define-fun default_initial_assumption1 ((temp___expr_532 us_rep2)
  (temp___skip_top_level_533 Bool)) Bool (and
                                         (= (attr__constrained2
                                            temp___expr_532) true)
                                         (= (to_rep
                                            (rec__task_types__my_task_type__c
                                            (us_split_discrs3
                                            temp___expr_532))) 1)))

(declare-const t2__split_discrs us_split_discrs)

(declare-const t2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(define-fun default_initial_assumption2 ((temp___expr_516 us_rep)
  (temp___skip_top_level_517 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_516) false)
                                         (= (to_rep
                                            (rec__task_types__my_task_type__c
                                            (us_split_discrs1
                                            temp___expr_516))) 0)))

(assert
;; WP_parameter_def
 ;; File "task_types.ads", line 9, characters 0-0
  (not (in_range 0)))
(check-sat)
(exit)
