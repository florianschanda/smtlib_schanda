;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort less_than_max 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (less_than_max less_than_max) Bool)

(declare-const dummy less_than_max)

(declare-datatypes ((less_than_max__ref 0))
(((mk_less_than_max__ref (less_than_max__content less_than_max)))))
(define-fun less_than_max__ref___projection ((a less_than_max__ref)) less_than_max
  (less_than_max__content a))

(declare-fun to_rep (less_than_max) Int)

(declare-fun of_rep (Int) less_than_max)

;; inversion_axiom
  (assert
  (forall ((x less_than_max))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x less_than_max)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort element 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (element element) Bool)

(declare-const dummy1 element)

(declare-datatypes ((element__ref 0))
(((mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content
                                                                 a))

(declare-fun to_rep1 (element) Int)

(declare-fun of_rep1 (Int) element)

;; inversion_axiom
  (assert
  (forall ((x element))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x element)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))

;; slide_eq
  (assert
  (forall ((a (Array Int element)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int element) Int Int (Array Int element) Int
  Int) (Array Int element))

;; concat_def
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (element Int) (Array Int element))

;; singleton_def
  (assert
  (forall ((v element))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int)
  (b (Array Int element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int element) Int Int (Array Int element) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy2 (Array Int element))

(declare-const value__size Int)

(declare-fun object__size ((Array Int element)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int element)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int element))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int element))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int element))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int element) (Array Int element)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__stackp__stack_root__content (Array Int element))(rec__stackp__stack_root__length less_than_max)(rec__ext__ us_private)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int element)
  (rec__stackp__stack_root__content a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) less_than_max
  (rec__stackp__stack_root__length a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__stackp__stack_root__content
                           (us_split_fields1 a)) 1 100
                           (rec__stackp__stack_root__content
                           (us_split_fields1 b)) 1 100) true)
                        (= (to_rep
                           (rec__stackp__stack_root__length
                           (us_split_fields1 a))) (to_rep
                                                  (rec__stackp__stack_root__length
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const stackp__stack_root__content__first__bit Int)

(declare-const stackp__stack_root__content__last__bit Int)

(declare-const stackp__stack_root__content__position Int)

;; stackp__stack_root__content__first__bit_axiom
  (assert (<= 0 stackp__stack_root__content__first__bit))

;; stackp__stack_root__content__last__bit_axiom
  (assert
  (< stackp__stack_root__content__first__bit stackp__stack_root__content__last__bit))

;; stackp__stack_root__content__position_axiom
  (assert (<= 0 stackp__stack_root__content__position))

(declare-const stackp__stack_root__length__first__bit Int)

(declare-const stackp__stack_root__length__last__bit Int)

(declare-const stackp__stack_root__length__position Int)

;; stackp__stack_root__length__first__bit_axiom
  (assert (<= 0 stackp__stack_root__length__first__bit))

;; stackp__stack_root__length__last__bit_axiom
  (assert
  (< stackp__stack_root__length__first__bit stackp__stack_root__length__last__bit))

;; stackp__stack_root__length__position_axiom
  (assert (<= 0 stackp__stack_root__length__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((stack_root__ref 0))
(((mk_stack_root__ref (stack_root__content us_rep)))))
(define-fun stack_root__ref___projection ((a stack_root__ref)) us_rep
  (stack_root__content a))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-const us_tag1 Int)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const stackp__stack_root__content__first__bit1 Int)

(declare-const stackp__stack_root__content__last__bit1 Int)

(declare-const stackp__stack_root__content__position1 Int)

;; stackp__stack_root__content__first__bit_axiom
  (assert (<= 0 stackp__stack_root__content__first__bit1))

;; stackp__stack_root__content__last__bit_axiom
  (assert
  (< stackp__stack_root__content__first__bit1 stackp__stack_root__content__last__bit1))

;; stackp__stack_root__content__position_axiom
  (assert (<= 0 stackp__stack_root__content__position1))

(declare-const stackp__stack_root__length__first__bit1 Int)

(declare-const stackp__stack_root__length__last__bit1 Int)

(declare-const stackp__stack_root__length__position1 Int)

;; stackp__stack_root__length__first__bit_axiom
  (assert (<= 0 stackp__stack_root__length__first__bit1))

;; stackp__stack_root__length__last__bit_axiom
  (assert
  (< stackp__stack_root__length__first__bit1 stackp__stack_root__length__last__bit1))

;; stackp__stack_root__length__position_axiom
  (assert (<= 0 stackp__stack_root__length__position1))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((stack__ref 0))
(((mk_stack__ref (stack__content us_rep)))))
(define-fun stack__ref___projection ((a stack__ref)) us_rep (stack__content
                                                            a))

(declare-fun size (us_rep) Int)

(declare-fun size__function_guard (Int us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_276 us_rep)
  (temp___skip_top_level_277 Bool)) Bool (and
                                         (and
                                         (= (attr__tag temp___expr_276)
                                         us_tag1)
                                         (= (to_rep
                                            (rec__stackp__stack_root__length
                                            (us_split_fields1
                                            temp___expr_276))) 0))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_277 true))
                                         (= (size temp___expr_276) 0))))

(declare-const s__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 100)) (in_range temp___expr_136)))

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_142)))

(define-fun default_initial_assumption1 ((temp___expr_159 us_rep)
  (temp___skip_top_level_160 Bool)) Bool (and
                                         (and
                                         (= (attr__tag temp___expr_159)
                                         us_tag)
                                         (= (to_rep
                                            (rec__stackp__stack_root__length
                                            (us_split_fields1
                                            temp___expr_159))) 0))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_160 true))
                                         (= (size temp___expr_159) 0))))

;; size__post_axiom
  (assert
  (forall ((s us_rep)) (! (dynamic_invariant (size s) true false
  true) :pattern ((size s)) )))

;; size__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (size s) (to_rep
                 (rec__stackp__stack_root__length (us_split_fields1 s)))) :pattern (
  (size s)) )))

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (= (is_empty s) true) (= (size s) 0)) :pattern ((is_empty s)) )))

(declare-const s__split_fields (Array Int element))

(declare-const s__split_fields1 less_than_max)

(declare-const s__split_fields2 us_private)

(declare-const o less_than_max)

(declare-const o1 (Array Int element))

(declare-const o2 less_than_max)

(declare-const o3 us_private)

(declare-const temp___465 (Array Int element))

(declare-const temp___4651 less_than_max)

(declare-const temp___4652 us_private)

(declare-const temp___4653 Int)

(declare-const result (Array Int element))

(declare-const result1 less_than_max)

(declare-const result2 us_private)

(declare-const s__split_fields3 (Array Int element))

(declare-const s__split_fields4 less_than_max)

(declare-const s__split_fields5 us_private)

(declare-const s__split_fields6 (Array Int element))

(declare-const s__split_fields7 less_than_max)

(declare-const s__split_fields8 us_private)

(declare-const s__split_fields9 (Array Int element))

(declare-const s__split_fields10 less_than_max)

(declare-const s__split_fields11 us_private)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= s__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= s__split_fields2 o3))

;; H
  (assert (= temp___465 o1))

;; H
  (assert (= temp___4651 o2))

;; H
  (assert (= temp___4652 o3))

;; H
  (assert (= s__attr__tag temp___4653))

;; H
  (assert (= result s__split_fields))

;; H
  (assert (= result1 s__split_fields1))

;; H
  (assert (= result2 s__split_fields2))

;; H
  (assert (= temp___465 s__split_fields3))

;; H
  (assert (= temp___4651 s__split_fields4))

;; H
  (assert (= temp___4652 s__split_fields5))

;; H
  (assert (= s__split_fields6 s__split_fields3))

;; H
  (assert (= s__split_fields7 s__split_fields4))

;; H
  (assert (= s__split_fields8 s__split_fields5))

;; H
  (assert (= s__split_fields9 s__split_fields3))

;; H
  (assert (= s__split_fields10 s__split_fields4))

;; H
  (assert (= s__split_fields11 s__split_fields5))

(assert
;; WP_parameter_def
 ;; File "stackp.ads", line 33, characters 0-0
  (not
  (= (is_empty
     (mk___rep
     (mk___split_fields s__split_fields6 s__split_fields7 s__split_fields8)
     s__attr__tag)) true)))
(check-sat)
(exit)
