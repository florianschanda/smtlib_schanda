;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun is_digit (Int) Bool)

(declare-fun is_digit__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

;; is_digit__post_axiom
  (assert
  (forall ((c Int))
  (! (=> (dynamic_invariant2 c true true true)
     (let ((result (is_digit c)))
     (ite (= c 48) (= result true)
     (ite (= c 49) (= result true)
     (ite (= c 50) (= result true)
     (ite (= c 51) (= result true)
     (ite (= c 52) (= result true)
     (ite (= c 53) (= result true)
     (ite (= c 54) (= result true)
     (ite (= c 55) (= result true)
     (ite (= c 56) (= result true)
     (ite (= c 57) (= result true)
     (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern (
  (is_digit c)) )))

(declare-fun convert_character_digit_to_integer (Int) Int)

(declare-fun convert_character_digit_to_integer__function_guard (Int
  Int) Bool)

;; convert_character_digit_to_integer__post_axiom
  (assert
  (forall ((source Int))
  (! (=>
     (and (dynamic_invariant2 source true true true)
     (= (is_digit source) true))
     (let ((result (convert_character_digit_to_integer source)))
     (and
     (and (and (<= 0 result) (<= result 9))
     (ite (= source 48) (= result 0)
     (ite (= source 49) (= result 1)
     (ite (= source 50) (= result 2)
     (ite (= source 51) (= result 3)
     (ite (= source 52) (= result 4)
     (ite (= source 53) (= result 5)
     (ite (= source 54) (= result 6)
     (ite (= source 55) (= result 7)
     (ite (= source 56) (= result 8) (=> (= source 57) (= result 9))))))))))))
     (dynamic_invariant result true false true)))) :pattern ((convert_character_digit_to_integer
                                                             source)) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun source () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes ()
((tnumber_array_typeD1__ref
 (mk_tnumber_array_typeD1__ref (tnumber_array_typeD1__content integer)))))
(define-fun tnumber_array_typeD1__ref_12__projection ((a tnumber_array_typeD1__ref)) integer
  (tnumber_array_typeD1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int integer)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq5 (us_t1 us_t1) Bool)

(declare-fun dummy5 () us_t1)

(declare-datatypes ()
((number_array_type__ref
 (mk_number_array_type__ref (number_array_type__content us_t1)))))
(define-fun number_array_type__ref_12__projection ((a number_array_type__ref)) us_t1
  (number_array_type__content a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes ()
((t276b__ref (mk_t276b__ref (t276b__content integer)))))
(define-fun t276b__ref___projection ((a t276b__ref)) integer (t276b__content
                                                             a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))

(define-fun of_array2 ((a (Array Int integer)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq4 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq7 (us_t2 us_t2) Bool)

(declare-fun dummy7 () us_t2)

(declare-datatypes () ((t277b__ref (mk_t277b__ref (t277b__content us_t2)))))
(define-fun t277b__ref___projection ((a t277b__ref)) us_t2 (t277b__content a))

(declare-fun n__first () integer)

(declare-fun n__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-fun dummy8 () integer)

(declare-datatypes ()
((t278b__ref (mk_t278b__ref (t278b__content integer)))))
(define-fun t278b__ref___projection ((a t278b__ref)) integer (t278b__content
                                                             a))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last6 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first6 (mk3 f l))) f)
     (= (to_rep1 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array Int integer))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int integer) (elts3 a))

(define-fun of_array3 ((a (Array Int integer)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep1 (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep1 (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int integer)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int integer)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq5 ((x us_t3)
  (y us_t3)) Bool (bool_eq2 (elts3 x) (to_rep1 (first6 (rt3 x)))
                  (to_rep1 (last6 (rt3 x))) (elts3 y)
                  (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))

(declare-fun user_eq9 (us_t3 us_t3) Bool)

(declare-fun dummy9 () us_t3)

(declare-datatypes ()
((tnumber_array_typeB__ref
 (mk_tnumber_array_typeB__ref (tnumber_array_typeB__content us_t3)))))
(define-fun tnumber_array_typeB__ref_12__projection ((a tnumber_array_typeB__ref)) us_t3
  (tnumber_array_typeB__content a))

(declare-fun aida__conversion__calculate_positive_target_length_8__n__aggregate_def (Int
  Int Int) us_t2)

;; def_axiom
  (assert
  (forall ((temp___1591 Int) (temp___1592 Int) (temp___1593 Int))
  (let ((temp___1590 (aida__conversion__calculate_positive_target_length_8__n__aggregate_def
                     temp___1591 temp___1592 temp___1593)))
  (and
  (=> (dynamic_property6 (first1 source) (+ (first1 source) 7) temp___1592
  temp___1593)
  (and (= (first5 temp___1590) temp___1592)
  (= (last5 temp___1590) temp___1593)))
  (forall ((temp___1594 Int))
  (= (select (to_array2 temp___1590) temp___1594) (of_rep1 temp___1591)))))))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_365 us_t1)
  (temp___is_init_362 Bool) (temp___skip_constant_363 Bool)
  (temp___do_toplevel_364 Bool)) Bool (=>
                                      (not (= temp___skip_constant_363 true))
                                      (and (dynamic_property2 (first1 source)
                                      (+ (first1 source) 7)
                                      (first3 temp___expr_365)
                                      (last3 temp___expr_365))
                                      (and
                                      (= (first3 temp___expr_365) (first1
                                                                  source))
                                      (= (last3 temp___expr_365) (+ (first1
                                                                    source) 7))))))

(declare-fun target () Int)

(declare-fun has_failed () Bool)

(declare-fun n () (Array Int integer))

(declare-fun index () Int)

(declare-fun temp___1596 () (Array Int integer))

(declare-fun temp___15961 () t2)

(declare-fun aida__conversion__calculate_positive_target_length_8__n__assume () (Array Int integer))

(declare-fun aida__conversion__calculate_positive_target_length_8__n__assume1 () t1)

(declare-fun temp___1603 () Int)

(declare-fun temp___1601 () Int)

(declare-fun temp___1599 () (Array Int integer))

(declare-fun o () Int)

(declare-fun o1 () integer)

(declare-fun o2 () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__2__target () Int)

(declare-fun o3 () Int)

(declare-fun o4 () character)

(declare-fun o5 () Int)

(declare-fun o6 () integer)

(declare-fun o7 () Int)

(declare-fun o8 () (Array Int integer))

(declare-fun temp___1604 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () integer)

(declare-fun o11 () Int)

(declare-fun temp___1605 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () integer)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun temp___1606 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () integer)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () Int)

(declare-fun o24 () Int)

(declare-fun o25 () Int)

(declare-fun temp___1607 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () integer)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () Int)

(declare-fun o31 () Int)

(declare-fun o32 () Int)

(declare-fun temp___1608 () Int)

(declare-fun o33 () Int)

(declare-fun o34 () integer)

(declare-fun o35 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () Int)

(declare-fun o38 () Int)

(declare-fun o39 () Int)

(declare-fun temp___1609 () Int)

(declare-fun o40 () Int)

(declare-fun o41 () integer)

(declare-fun o42 () Int)

(declare-fun o43 () Int)

(declare-fun o44 () Int)

(declare-fun o45 () Int)

(declare-fun o46 () Int)

(declare-fun temp___1610 () Int)

(declare-fun o47 () Int)

(declare-fun o48 () integer)

(declare-fun o49 () Int)

(declare-fun o50 () Int)

(declare-fun o51 () Int)

(declare-fun o52 () Int)

(declare-fun o53 () Int)

(declare-fun temp___1611 () Int)

(declare-fun o54 () Int)

(declare-fun o55 () integer)

(declare-fun o56 () Int)

(declare-fun o57 () Int)

(declare-fun o58 () Int)

(declare-fun o59 () Int)

(declare-fun o60 () Int)

(declare-fun temp___1616 () Int)

(declare-fun temp___1617 () Int)

(declare-fun o61 () Int)

(declare-fun o62 () character)

(declare-fun o63 () Int)

(declare-fun o64 () Int)

(declare-fun o65 () Int)

(declare-fun o66 () Int)

(declare-fun temp___1618 () Int)

(declare-fun o67 () Int)

(declare-fun o68 () character)

(declare-fun o69 () Int)

(declare-fun o70 () Int)

(declare-fun o71 () Int)

(declare-fun o72 () Int)

(declare-fun temp___1619 () Int)

(declare-fun o73 () Int)

(declare-fun o74 () character)

(declare-fun o75 () Int)

(declare-fun o76 () Int)

(declare-fun o77 () Int)

(declare-fun o78 () Int)

(declare-fun result () (Array Int integer))

(declare-fun n1 () (Array Int integer))

(declare-fun result1 () Int)

(declare-fun index1 () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__2__target1 () Int)

(declare-fun result2 () (Array Int integer))

(declare-fun n2 () (Array Int integer))

(declare-fun n3 () (Array Int integer))

(declare-fun index2 () Int)

(declare-fun n4 () (Array Int integer))

(declare-fun index3 () Int)

(declare-fun n5 () (Array Int integer))

(declare-fun index4 () Int)

(declare-fun n6 () (Array Int integer))

(declare-fun index5 () Int)

(declare-fun n7 () (Array Int integer))

(declare-fun index6 () Int)

(declare-fun result3 () Int)

(declare-fun target1 () Int)

(declare-fun result4 () Int)

(declare-fun target2 () Int)

(declare-fun result5 () int__ref)

(declare-fun target3 () Int)

(declare-fun result6 () int__ref)

(declare-fun target4 () Int)

(declare-fun result7 () int__ref)

(declare-fun target5 () Int)

(declare-fun result8 () int__ref)

(declare-fun target6 () Int)

(declare-fun result9 () int__ref)

(declare-fun target7 () Int)

(declare-fun result10 () int__ref)

(declare-fun target8 () Int)

(declare-fun result11 () bool__ref)

(declare-fun has_failed1 () Bool)

(declare-fun target9 () int__ref)

(declare-fun has_failed2 () bool__ref)

(declare-fun n8 () map__ref1)

(declare-fun index7 () int__ref)

(declare-fun target10 () Int)

(declare-fun has_failed3 () Bool)

(declare-fun n9 () (Array Int integer))

(declare-fun index8 () Int)

(define-fun index9 () int__ref (mk_int__ref index5))

(define-fun n10 () map__ref1 (mk_map__ref1 n6))

;; H
  (assert (dynamic_invariant1 source true false true))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 target)))

;; H
  (assert
  (and (= (length source) 8)
  (forall ((index10 Int))
  (=>
  (and (<= (to_rep1 (first (rt source))) index10)
  (<= index10 (to_rep1 (last (rt source)))))
  (= (is_digit (to_rep (select (elts source) index10))) true)))))

;; H
  (assert
  (= (to_rep1
     (first4
     (rt2
     (aida__conversion__calculate_positive_target_length_8__n__aggregate_def
     0 (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 7)))))
  (to_rep1 (first (rt source)))))

;; H
  (assert
  (= (to_rep1
     (last4
     (rt2
     (aida__conversion__calculate_positive_target_length_8__n__aggregate_def
     0 (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 7))))) (+
  (to_rep1 (first (rt source))) 7)))

;; H
  (assert
  (= (mk___t2 temp___1596 temp___15961) (aida__conversion__calculate_positive_target_length_8__n__aggregate_def
                                        0 (to_rep1 (first (rt source)))
                                        (+ (to_rep1 (first (rt source))) 7))))

;; H
  (assert
  (= (ite (<= (to_rep1 (first4 temp___15961)) (to_rep1 (last4 temp___15961)))
     (+ (- (to_rep1 (last4 temp___15961)) (to_rep1 (first4 temp___15961))) 1)
     0) (ite (<= (to_rep1 (first (rt source))) (+ (to_rep1
                                                  (first (rt source))) 7))
        (+ (- (+ (to_rep1 (first (rt source))) 7) (to_rep1
                                                  (first (rt source)))) 1)
        0)))

;; H
  (assert
  (= (slide1 temp___1596 (to_rep1 (first4 temp___15961))
     (to_rep1 (first (rt source)))) aida__conversion__calculate_positive_target_length_8__n__assume))

;; H
  (assert
  (= (mk1 (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 7))
  aida__conversion__calculate_positive_target_length_8__n__assume1))

;; H
  (assert (= (mk_map__ref1 result) (mk_map__ref1 n)))

;; H
  (assert
  (= n1 aida__conversion__calculate_positive_target_length_8__n__assume))

;; H
  (assert
  (= (to_rep1 n__first) (to_rep1
                        (first2
                        aida__conversion__calculate_positive_target_length_8__n__assume1))))

;; H
  (assert
  (= (to_rep1 n__last) (to_rep1
                       (last2
                       aida__conversion__calculate_positive_target_length_8__n__assume1))))

;; H
  (assert
  (and (dynamic_property2 (to_rep1 (first (rt source)))
  (+ (to_rep1 (first (rt source))) 7) (to_rep1 n__first) (to_rep1 n__last))
  (and (= (to_rep1 n__first) (to_rep1 (first (rt source))))
  (= (to_rep1 n__last) (+ (to_rep1 (first (rt source))) 7)))))

;; H
  (assert
  (and (= temp___1603 (+ (to_rep1 (first (rt source))) 7)) (in_range1
  (+ (to_rep1 (first (rt source))) 7))))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref index)))

;; H
  (assert (= index1 (to_rep1 (first (rt source)))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= temp___1601 index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= temp___1599 n1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (and (<= (to_rep1 n__first) index1) (<= index1 (to_rep1 n__last)))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o1 (select n1 o))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o2 (to_rep1 o1))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o2 aida__conversion__convert_character_digit_to_integer__2__target)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (and (<= (to_rep1 (first (rt source))) index1)
  (<= index1 (to_rep1 (last (rt source)))))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o3 index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o4 (select (elts source) o3))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o5 (to_rep o4))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (and
  (and
  (and
  (and
  (<= 0 aida__conversion__convert_character_digit_to_integer__2__target1)
  (<= aida__conversion__convert_character_digit_to_integer__2__target1 9))
  (= aida__conversion__convert_character_digit_to_integer__2__target1
  (convert_character_digit_to_integer o5)))
  (ite (= (= o5 48) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 0)
  (ite (= (= o5 49) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 1)
  (ite (= (= o5 50) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 2)
  (ite (= (= o5 51) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 3)
  (ite (= (= o5 52) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 4)
  (ite (= (= o5 53) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 5)
  (ite (= (= o5 54) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 6)
  (ite (= (= o5 55) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 7)
  (ite (= (= o5 56) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 8)
  (=> (= (= o5 57) true)
  (= aida__conversion__convert_character_digit_to_integer__2__target1 9))))))))))))
  (in_range1
  aida__conversion__convert_character_digit_to_integer__2__target1))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= (to_rep1 o6) aida__conversion__convert_character_digit_to_integer__2__target1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (and (<= (to_rep1 n__first) index1) (<= index1 (to_rep1 n__last)))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o7 index1)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= o8 (store n1 o7 o6))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= n1 result2)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= n2 o8)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (forall ((j Int))
  (=> (and (<= (to_rep1 (first (rt source))) j) (<= j index2))
  (= (to_rep1 (select n3 j)) (convert_character_digit_to_integer
                             (to_rep (select (elts source) j))))))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (and
  (and
  (forall ((temp___1600 Int))
  (=>
  (and (<= (to_rep1 n__first) temp___1600)
  (<= temp___1600 (to_rep1 n__last)))
  (=> (< index2 temp___1600)
  (= (select n3 temp___1600) (select temp___1599 temp___1600)))))
  (=> (<= (to_rep1 (first (rt source))) (+ (to_rep1 (first (rt source))) 7))
  (dynamic_property5 (to_rep1 (first (rt source)))
  (+ (to_rep1 (first (rt source))) 7) index2)))
  (and (<= (to_rep1 (first (rt source))) index2)
  (<= index2 (+ (to_rep1 (first (rt source))) 7))))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= index2 temp___1603)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= index2 index3)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= n3 n4)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= index4 index2)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= n5 n3)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= index9 (mk_int__ref index3))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= n10 (mk_map__ref1 n4))))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= index6 index4)))

;; H
  (assert
  (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603))
  (= n7 n5)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603)))
  (= index1 index5)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603)))
  (= n1 n6)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603)))
  (= index6 index1)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt source))) index1) (<= index1 temp___1603)))
  (= n7 n1)))

;; H
  (assert
  (and (= temp___1604 (+ (to_rep1 (first (rt source))) 7)) (in_range1
  (+ (to_rep1 (first (rt source))) 7))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1604)
  (<= temp___1604 (to_rep1 n__last))))

;; H
  (assert (= o9 temp___1604))

;; H
  (assert (= o10 (select n6 o9)))

;; H
  (assert (= o11 (to_rep1 o10)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref target)))

;; H
  (assert (= target1 o11))

;; H
  (assert (<= target1 9))

;; H
  (assert
  (and (= temp___1605 (+ (to_rep1 (first (rt source))) 6)) (in_range1
  (+ (to_rep1 (first (rt source))) 6))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1605)
  (<= temp___1605 (to_rep1 n__last))))

;; H
  (assert (= o12 temp___1605))

;; H
  (assert (= o13 (select n6 o12)))

;; H
  (assert (= o14 (to_rep1 o13)))

;; H
  (assert (= o15 (* o14 10)))

;; H
  (assert (and (= o16 o15) (in_range1 o15)))

;; H
  (assert (= o17 (+ target1 o16)))

;; H
  (assert (and (= o18 o17) (in_range1 o17)))

;; H
  (assert (= target1 result4))

;; H
  (assert (= target2 o18))

;; H
  (assert (<= target2 99))

;; H
  (assert
  (and (= temp___1606 (+ (to_rep1 (first (rt source))) 5)) (in_range1
  (+ (to_rep1 (first (rt source))) 5))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1606)
  (<= temp___1606 (to_rep1 n__last))))

;; H
  (assert (= o19 temp___1606))

;; H
  (assert (= o20 (select n6 o19)))

;; H
  (assert (= o21 (to_rep1 o20)))

;; H
  (assert (= o22 (* o21 100)))

;; H
  (assert (and (= o23 o22) (in_range1 o22)))

;; H
  (assert (= o24 (+ target2 o23)))

;; H
  (assert (and (= o25 o24) (in_range1 o24)))

;; H
  (assert (= result5 (mk_int__ref target2)))

;; H
  (assert (= target3 o25))

;; H
  (assert (<= target3 999))

;; H
  (assert
  (and (= temp___1607 (+ (to_rep1 (first (rt source))) 4)) (in_range1
  (+ (to_rep1 (first (rt source))) 4))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1607)
  (<= temp___1607 (to_rep1 n__last))))

;; H
  (assert (= o26 temp___1607))

;; H
  (assert (= o27 (select n6 o26)))

;; H
  (assert (= o28 (to_rep1 o27)))

;; H
  (assert (= o29 (* o28 1000)))

;; H
  (assert (and (= o30 o29) (in_range1 o29)))

;; H
  (assert (= o31 (+ target3 o30)))

;; H
  (assert (and (= o32 o31) (in_range1 o31)))

;; H
  (assert (= result6 (mk_int__ref target3)))

;; H
  (assert (= target4 o32))

;; H
  (assert (<= target4 9999))

;; H
  (assert
  (and (= temp___1608 (+ (to_rep1 (first (rt source))) 3)) (in_range1
  (+ (to_rep1 (first (rt source))) 3))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1608)
  (<= temp___1608 (to_rep1 n__last))))

;; H
  (assert (= o33 temp___1608))

;; H
  (assert (= o34 (select n6 o33)))

;; H
  (assert (= o35 (to_rep1 o34)))

;; H
  (assert (= o36 (* o35 10000)))

;; H
  (assert (and (= o37 o36) (in_range1 o36)))

;; H
  (assert (= o38 (+ target4 o37)))

;; H
  (assert (and (= o39 o38) (in_range1 o38)))

;; H
  (assert (= result7 (mk_int__ref target4)))

;; H
  (assert (= target5 o39))

;; H
  (assert (<= target5 99999))

;; H
  (assert
  (and (= temp___1609 (+ (to_rep1 (first (rt source))) 2)) (in_range1
  (+ (to_rep1 (first (rt source))) 2))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1609)
  (<= temp___1609 (to_rep1 n__last))))

;; H
  (assert (= o40 temp___1609))

;; H
  (assert (= o41 (select n6 o40)))

;; H
  (assert (= o42 (to_rep1 o41)))

;; H
  (assert (= o43 (* o42 100000)))

;; H
  (assert (and (= o44 o43) (in_range1 o43)))

;; H
  (assert (= o45 (+ target5 o44)))

;; H
  (assert (and (= o46 o45) (in_range1 o45)))

;; H
  (assert (= result8 (mk_int__ref target5)))

;; H
  (assert (= target6 o46))

;; H
  (assert (<= target6 999999))

;; H
  (assert
  (and (= temp___1610 (+ (to_rep1 (first (rt source))) 1)) (in_range1
  (+ (to_rep1 (first (rt source))) 1))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1610)
  (<= temp___1610 (to_rep1 n__last))))

;; H
  (assert (= o47 temp___1610))

;; H
  (assert (= o48 (select n6 o47)))

;; H
  (assert (= o49 (to_rep1 o48)))

;; H
  (assert (= o50 (* o49 1000000)))

;; H
  (assert (and (= o51 o50) (in_range1 o50)))

;; H
  (assert (= o52 (+ target6 o51)))

;; H
  (assert (and (= o53 o52) (in_range1 o52)))

;; H
  (assert (= result9 (mk_int__ref target6)))

;; H
  (assert (= target7 o53))

;; H
  (assert (<= target7 9999999))

;; H
  (assert
  (and (= temp___1611 (+ (to_rep1 (first (rt source))) 0)) (in_range1
  (+ (to_rep1 (first (rt source))) 0))))

;; H
  (assert
  (and (<= (to_rep1 n__first) temp___1611)
  (<= temp___1611 (to_rep1 n__last))))

;; H
  (assert (= o54 temp___1611))

;; H
  (assert (= o55 (select n6 o54)))

;; H
  (assert (= o56 (to_rep1 o55)))

;; H
  (assert (= o57 (* o56 10000000)))

;; H
  (assert (and (= o58 o57) (in_range1 o57)))

;; H
  (assert (= o59 (+ target7 o58)))

;; H
  (assert (and (= o60 o59) (in_range1 o59)))

;; H
  (assert (= result10 (mk_int__ref target7)))

;; H
  (assert (= target8 o60))

;; H
  (assert (<= target8 99999999))

;; H
  (assert (= result11 (mk_bool__ref has_failed)))

;; H
  (assert (= has_failed1 (of_int 0)))

;; H
  (assert (= index7 index9))

;; H
  (assert (= n8 n10))

;; H
  (assert (= has_failed2 (mk_bool__ref has_failed1)))

;; H
  (assert (= target9 (mk_int__ref target8)))

;; H
  (assert (= index8 index6))

;; H
  (assert (= n9 n7))

;; H
  (assert (= has_failed3 has_failed1))

;; H
  (assert (= target10 target8))

;; H
  (assert
  (and (= temp___1619 (+ (to_rep1 (first (rt source))) 7)) (in_range1
  (+ (to_rep1 (first (rt source))) 7))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1619)
  (<= temp___1619 (to_rep1 (last (rt source))))))

;; H
  (assert (= o73 temp___1619))

;; H
  (assert (= o74 (select (elts source) o73)))

;; H
  (assert (= o75 (to_rep o74)))

;; H
  (assert
  (and (= o76 (convert_character_digit_to_integer o75))
  (and (in_range1 o76)
  (and (and (<= 0 o76) (<= o76 9))
  (ite (= (= o75 48) true) (= o76 0)
  (ite (= (= o75 49) true) (= o76 1)
  (ite (= (= o75 50) true) (= o76 2)
  (ite (= (= o75 51) true) (= o76 3)
  (ite (= (= o75 52) true) (= o76 4)
  (ite (= (= o75 53) true) (= o76 5)
  (ite (= (= o75 54) true) (= o76 6)
  (ite (= (= o75 55) true) (= o76 7)
  (ite (= (= o75 56) true) (= o76 8) (=> (= (= o75 57) true) (= o76 9)))))))))))))))

;; H
  (assert (= o77 (* o76 1)))

;; H
  (assert (and (= o78 o77) (in_range1 o77)))

;; H
  (assert
  (and (= temp___1618 (+ (to_rep1 (first (rt source))) 6)) (in_range1
  (+ (to_rep1 (first (rt source))) 6))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1618)
  (<= temp___1618 (to_rep1 (last (rt source))))))

;; H
  (assert (= o67 temp___1618))

;; H
  (assert (= o68 (select (elts source) o67)))

;; H
  (assert (= o69 (to_rep o68)))

;; H
  (assert
  (and (= o70 (convert_character_digit_to_integer o69))
  (and (in_range1 o70)
  (and (and (<= 0 o70) (<= o70 9))
  (ite (= (= o69 48) true) (= o70 0)
  (ite (= (= o69 49) true) (= o70 1)
  (ite (= (= o69 50) true) (= o70 2)
  (ite (= (= o69 51) true) (= o70 3)
  (ite (= (= o69 52) true) (= o70 4)
  (ite (= (= o69 53) true) (= o70 5)
  (ite (= (= o69 54) true) (= o70 6)
  (ite (= (= o69 55) true) (= o70 7)
  (ite (= (= o69 56) true) (= o70 8) (=> (= (= o69 57) true) (= o70 9)))))))))))))))

;; H
  (assert (= o71 (* o70 10)))

;; H
  (assert (and (= o72 o71) (in_range1 o71)))

;; H
  (assert
  (and (= temp___1617 (+ (to_rep1 (first (rt source))) 5)) (in_range1
  (+ (to_rep1 (first (rt source))) 5))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1617)
  (<= temp___1617 (to_rep1 (last (rt source))))))

;; H
  (assert (= o61 temp___1617))

;; H
  (assert (= o62 (select (elts source) o61)))

;; H
  (assert (= o63 (to_rep o62)))

;; H
  (assert
  (and (= o64 (convert_character_digit_to_integer o63))
  (and (in_range1 o64)
  (and (and (<= 0 o64) (<= o64 9))
  (ite (= (= o63 48) true) (= o64 0)
  (ite (= (= o63 49) true) (= o64 1)
  (ite (= (= o63 50) true) (= o64 2)
  (ite (= (= o63 51) true) (= o64 3)
  (ite (= (= o63 52) true) (= o64 4)
  (ite (= (= o63 53) true) (= o64 5)
  (ite (= (= o63 54) true) (= o64 6)
  (ite (= (= o63 55) true) (= o64 7)
  (ite (= (= o63 56) true) (= o64 8) (=> (= (= o63 57) true) (= o64 9)))))))))))))))

;; H
  (assert (= o65 (* o64 100)))

;; H
  (assert (and (= o66 o65) (in_range1 o65)))

;; H
  (assert
  (and (= temp___1616 (+ (to_rep1 (first (rt source))) 4)) (in_range1
  (+ (to_rep1 (first (rt source))) 4))))

(assert
;; WP_parameter_def
 ;; File "aida-conversion.adb", line 747, characters 0-0
  (not (<= (to_rep1 (first (rt source))) temp___1616)))
(check-sat)
(exit)
