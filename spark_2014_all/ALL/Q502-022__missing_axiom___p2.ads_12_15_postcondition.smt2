;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__p2__s__x integer)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__p2__s__x a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__p2__s__x (us_split_fields1 a)))
                   (to_rep (rec__p2__s__x (us_split_fields1 b)))) true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun p2__s__x__first__bit () Int)

(declare-fun p2__s__x__last__bit () Int)

(declare-fun p2__s__x__position () Int)

;; p2__s__x__first__bit_axiom
  (assert (<= 0 p2__s__x__first__bit))

;; p2__s__x__last__bit_axiom
  (assert (< p2__s__x__first__bit p2__s__x__last__bit))

;; p2__s__x__position_axiom
  (assert (<= 0 p2__s__x__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((s__ref (mk_s__ref (s__content us_rep)))))
(define-fun s__ref___projection ((a s__ref)) us_rep (s__content a))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__p2__t2__d Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__p2__t2__d
                                                                    a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2 (mk___split_fields1 (rec__p2__t2__c us_rep)))))
(define-fun us_split_fields_C__projection ((a us_split_fields2)) us_rep
  (rec__p2__t2__c a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (rec__p2__t2__d (us_split_discrs1 a)) (rec__p2__t2__d
                                                                  (us_split_discrs1
                                                                  b)))
                         (= (user_eq1 (rec__p2__t2__c (us_split_fields3 a))
                            (rec__p2__t2__c (us_split_fields3 b))) true))
                    true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun p2__t2__d__first__bit () Int)

(declare-fun p2__t2__d__last__bit () Int)

(declare-fun p2__t2__d__position () Int)

;; p2__t2__d__first__bit_axiom
  (assert (<= 0 p2__t2__d__first__bit))

;; p2__t2__d__last__bit_axiom
  (assert (< p2__t2__d__first__bit p2__t2__d__last__bit))

;; p2__t2__d__position_axiom
  (assert (<= 0 p2__t2__d__position))

(declare-fun p2__t2__c__first__bit () Int)

(declare-fun p2__t2__c__last__bit () Int)

(declare-fun p2__t2__c__position () Int)

;; p2__t2__c__first__bit_axiom
  (assert (<= 0 p2__t2__c__first__bit))

;; p2__t2__c__last__bit_axiom
  (assert (< p2__t2__c__first__bit p2__t2__c__last__bit))

;; p2__t2__c__position_axiom
  (assert (<= 0 p2__t2__c__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun dummy2 () us_rep1)

(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content us_rep1)))))
(define-fun t2__ref___projection ((a t2__ref)) us_rep1 (t2__content a))

(declare-fun x () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun y () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x1 us_rep) (y1 us_rep))
  (! (not (= (oeq x1 y1) true)) :pattern ((oeq x1 y1)) )))

(declare-fun p2__always_true__result () Bool)

(declare-fun result () Bool)

(declare-fun p2__always_true__result1 () Bool)

(declare-fun p2__always_true__result2 () Bool)

(declare-fun p2__always_true__result3 () Bool)

(declare-fun p2__always_true__result4 () Bool)

(declare-fun p2__always_true__result5 () Bool)

(declare-fun result1 () Bool)

;; H
  (assert (= p2__always_true__result1 p2__always_true__result2))

;; H
  (assert (= p2__always_true__result3 p2__always_true__result1))

;; H
  (assert (= result p2__always_true__result))

;; H
  (assert (= p2__always_true__result1 (of_int 1)))

;; H
  (assert
  (= (mk_bool__ref p2__always_true__result4) (mk_bool__ref
                                             p2__always_true__result2)))

;; H
  (assert (= p2__always_true__result5 p2__always_true__result3))

;; H
  (assert (= result1 p2__always_true__result4))

(assert
;; WP_parameter_def
 ;; File "p2.ads", line 11, characters 0-0
  (not (= p2__always_true__result4 true)))
(check-sat)
(exit)
