;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((time__ref 0)) (((mk_time__ref (time__content us_rep)))))
(define-fun time__ref___projection ((a time__ref)) us_rep (time__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__traffic_lights__lights_state__vehicles_green Bool)(rec__traffic_lights__lights_state__vehicles_yellow Bool)(rec__traffic_lights__lights_state__vehicles_red Bool)(rec__traffic_lights__lights_state__pedestrians_green Bool)(rec__traffic_lights__lights_state__pedestrians_red Bool)))))
(define-fun us_split_fields_Vehicles_Green__projection ((a us_split_fields)) Bool
  (rec__traffic_lights__lights_state__vehicles_green a))

(define-fun us_split_fields_Vehicles_Yellow__projection ((a us_split_fields)) Bool
  (rec__traffic_lights__lights_state__vehicles_yellow a))

(define-fun us_split_fields_Vehicles_Red__projection ((a us_split_fields)) Bool
  (rec__traffic_lights__lights_state__vehicles_red a))

(define-fun us_split_fields_Pedestrians_Green__projection ((a us_split_fields)) Bool
  (rec__traffic_lights__lights_state__pedestrians_green a))

(define-fun us_split_fields_Pedestrians_Red__projection ((a us_split_fields)) Bool
  (rec__traffic_lights__lights_state__pedestrians_red a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_27__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_27__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (rec__traffic_lights__lights_state__vehicles_green
                            (us_split_fields1 a)) (rec__traffic_lights__lights_state__vehicles_green
                                                  (us_split_fields1 b)))
                         (= (rec__traffic_lights__lights_state__vehicles_yellow
                            (us_split_fields1 a)) (rec__traffic_lights__lights_state__vehicles_yellow
                                                  (us_split_fields1 b))))
                         (= (rec__traffic_lights__lights_state__vehicles_red
                            (us_split_fields1 a)) (rec__traffic_lights__lights_state__vehicles_red
                                                  (us_split_fields1 b))))
                         (= (rec__traffic_lights__lights_state__pedestrians_green
                            (us_split_fields1 a)) (rec__traffic_lights__lights_state__pedestrians_green
                                                  (us_split_fields1 b))))
                         (= (rec__traffic_lights__lights_state__pedestrians_red
                            (us_split_fields1 a)) (rec__traffic_lights__lights_state__pedestrians_red
                                                  (us_split_fields1 b))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const traffic_lights__lights_state__vehicles_green__first__bit Int)

(declare-const traffic_lights__lights_state__vehicles_green__last__bit Int)

(declare-const traffic_lights__lights_state__vehicles_green__position Int)

;; traffic_lights__lights_state__vehicles_green__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_green__first__bit))

;; traffic_lights__lights_state__vehicles_green__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__vehicles_green__first__bit traffic_lights__lights_state__vehicles_green__last__bit))

;; traffic_lights__lights_state__vehicles_green__position_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_green__position))

(declare-const traffic_lights__lights_state__vehicles_yellow__first__bit Int)

(declare-const traffic_lights__lights_state__vehicles_yellow__last__bit Int)

(declare-const traffic_lights__lights_state__vehicles_yellow__position Int)

;; traffic_lights__lights_state__vehicles_yellow__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_yellow__first__bit))

;; traffic_lights__lights_state__vehicles_yellow__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__vehicles_yellow__first__bit traffic_lights__lights_state__vehicles_yellow__last__bit))

;; traffic_lights__lights_state__vehicles_yellow__position_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_yellow__position))

(declare-const traffic_lights__lights_state__vehicles_red__first__bit Int)

(declare-const traffic_lights__lights_state__vehicles_red__last__bit Int)

(declare-const traffic_lights__lights_state__vehicles_red__position Int)

;; traffic_lights__lights_state__vehicles_red__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_red__first__bit))

;; traffic_lights__lights_state__vehicles_red__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__vehicles_red__first__bit traffic_lights__lights_state__vehicles_red__last__bit))

;; traffic_lights__lights_state__vehicles_red__position_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_red__position))

(declare-const traffic_lights__lights_state__pedestrians_green__first__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_green__last__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_green__position Int)

;; traffic_lights__lights_state__pedestrians_green__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_green__first__bit))

;; traffic_lights__lights_state__pedestrians_green__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__pedestrians_green__first__bit traffic_lights__lights_state__pedestrians_green__last__bit))

;; traffic_lights__lights_state__pedestrians_green__position_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_green__position))

(declare-const traffic_lights__lights_state__pedestrians_red__first__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_red__last__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_red__position Int)

;; traffic_lights__lights_state__pedestrians_red__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_red__first__bit))

;; traffic_lights__lights_state__pedestrians_red__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__pedestrians_red__first__bit traffic_lights__lights_state__pedestrians_red__last__bit))

;; traffic_lights__lights_state__pedestrians_red__position_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_red__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ((lights_state__ref 0))
(((mk_lights_state__ref (lights_state__content us_rep1)))))
(define-fun lights_state__ref___projection ((a lights_state__ref)) us_rep1
  (lights_state__content a))

(define-fun default_initial_assumption ((temp___expr_1473 us_rep1)
  (temp___skip_top_level_1474 Bool)) Bool (and
                                          (and
                                          (and
                                          (and
                                          (= (rec__traffic_lights__lights_state__vehicles_green
                                             (us_split_fields1
                                             temp___expr_1473)) (of_int 0))
                                          (= (rec__traffic_lights__lights_state__vehicles_yellow
                                             (us_split_fields1
                                             temp___expr_1473)) (of_int 0)))
                                          (= (rec__traffic_lights__lights_state__vehicles_red
                                             (us_split_fields1
                                             temp___expr_1473)) (of_int 1)))
                                          (= (rec__traffic_lights__lights_state__pedestrians_green
                                             (us_split_fields1
                                             temp___expr_1473)) (of_int 1)))
                                          (= (rec__traffic_lights__lights_state__pedestrians_red
                                             (us_split_fields1
                                             temp___expr_1473)) (of_int 0))))

(declare-fun valid_combination (us_rep1) Bool)

(declare-fun valid_combination__function_guard (Bool us_rep1) Bool)

;; valid_combination__post_axiom
  (assert true)

;; valid_combination__def_axiom
  (assert
  (forall ((ls us_rep1))
  (! (= (= (valid_combination ls) true)
     (ite (= (rec__traffic_lights__lights_state__vehicles_green
             (us_split_fields1 ls)) true)
     (and
     (and
     (and
     (not
     (= (rec__traffic_lights__lights_state__vehicles_yellow
        (us_split_fields1 ls)) true))
     (not
     (= (rec__traffic_lights__lights_state__vehicles_red
        (us_split_fields1 ls)) true)))
     (not
     (= (rec__traffic_lights__lights_state__pedestrians_green
        (us_split_fields1 ls)) true)))
     (= (rec__traffic_lights__lights_state__pedestrians_red
        (us_split_fields1 ls)) true))
     (ite (= (rec__traffic_lights__lights_state__pedestrians_green
             (us_split_fields1 ls)) true)
     (and
     (and
     (and
     (not
     (= (rec__traffic_lights__lights_state__vehicles_green
        (us_split_fields1 ls)) true))
     (not
     (= (rec__traffic_lights__lights_state__vehicles_yellow
        (us_split_fields1 ls)) true)))
     (= (rec__traffic_lights__lights_state__vehicles_red
        (us_split_fields1 ls)) true))
     (not
     (= (rec__traffic_lights__lights_state__pedestrians_red
        (us_split_fields1 ls)) true)))
     (and
     (not
     (= (rec__traffic_lights__lights_state__pedestrians_green
        (us_split_fields1 ls)) true))
     (= (rec__traffic_lights__lights_state__pedestrians_red
        (us_split_fields1 ls)) true))))) :pattern ((valid_combination ls)) )))

(declare-datatypes ((valid_lights_state__ref 0))
(((mk_valid_lights_state__ref (valid_lights_state__content us_rep1)))))
(define-fun valid_lights_state__ref___projection ((a valid_lights_state__ref)) us_rep1
  (valid_lights_state__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__traffic_lights__traffic_lightT__last_state_change us_rep)(rec__traffic_lights__traffic_lightT__change_state Bool)(rec__traffic_lights__traffic_lightT__lights us_rep1)))))
(define-fun us_split_fields_Last_State_Change__projection ((a us_split_fields2)) us_rep
  (rec__traffic_lights__traffic_lightT__last_state_change a))

(define-fun us_split_fields_Change_State__projection ((a us_split_fields2)) Bool
  (rec__traffic_lights__traffic_lightT__change_state a))

(define-fun us_split_fields_Lights__projection ((a us_split_fields2)) us_rep1
  (rec__traffic_lights__traffic_lightT__lights a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_28__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_28__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                 a))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const traffic_lights__traffic_lightT__last_state_change__first__bit Int)

(declare-const traffic_lights__traffic_lightT__last_state_change__last__bit Int)

(declare-const traffic_lights__traffic_lightT__last_state_change__position Int)

;; traffic_lights__traffic_lightT__last_state_change__first__bit_axiom
  (assert
  (<= 0 traffic_lights__traffic_lightT__last_state_change__first__bit))

;; traffic_lights__traffic_lightT__last_state_change__last__bit_axiom
  (assert
  (< traffic_lights__traffic_lightT__last_state_change__first__bit traffic_lights__traffic_lightT__last_state_change__last__bit))

;; traffic_lights__traffic_lightT__last_state_change__position_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__last_state_change__position))

(declare-const traffic_lights__traffic_lightT__change_state__first__bit Int)

(declare-const traffic_lights__traffic_lightT__change_state__last__bit Int)

(declare-const traffic_lights__traffic_lightT__change_state__position Int)

;; traffic_lights__traffic_lightT__change_state__first__bit_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__change_state__first__bit))

;; traffic_lights__traffic_lightT__change_state__last__bit_axiom
  (assert
  (< traffic_lights__traffic_lightT__change_state__first__bit traffic_lights__traffic_lightT__change_state__last__bit))

;; traffic_lights__traffic_lightT__change_state__position_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__change_state__position))

(declare-const traffic_lights__traffic_lightT__lights__first__bit Int)

(declare-const traffic_lights__traffic_lightT__lights__last__bit Int)

(declare-const traffic_lights__traffic_lightT__lights__position Int)

;; traffic_lights__traffic_lightT__lights__first__bit_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__lights__first__bit))

;; traffic_lights__traffic_lightT__lights__last__bit_axiom
  (assert
  (< traffic_lights__traffic_lightT__lights__first__bit traffic_lights__traffic_lightT__lights__last__bit))

;; traffic_lights__traffic_lightT__lights__position_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__lights__position))

(declare-fun user_eq2 (us_rep2 us_rep2) Bool)

(declare-datatypes ((traffic_lightT__ref 0))
(((mk_traffic_lightT__ref (traffic_lightT__content us_rep2)))))
(define-fun traffic_lightT__ref___projection ((a traffic_lightT__ref)) us_rep2
  (traffic_lightT__content a))

(declare-const time_first us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_1487 us_rep2)
  (temp___is_init_1484 Bool) (temp___skip_constant_1485 Bool)
  (temp___do_toplevel_1486 Bool)) Bool (= (valid_combination
                                          (rec__traffic_lights__traffic_lightT__lights
                                          (us_split_fields3 temp___expr_1487))) true))

(define-fun default_initial_assumption1 ((temp___expr_1489 us_rep2)
  (temp___skip_top_level_1490 Bool)) Bool (and
                                          (and
                                          (= (rec__traffic_lights__traffic_lightT__last_state_change
                                             (us_split_fields3
                                             temp___expr_1489)) time_first)
                                          (= (rec__traffic_lights__traffic_lightT__change_state
                                             (us_split_fields3
                                             temp___expr_1489)) (of_int 0)))
                                          (and
                                          (and
                                          (and
                                          (and
                                          (= (rec__traffic_lights__lights_state__vehicles_green
                                             (us_split_fields1
                                             (rec__traffic_lights__traffic_lightT__lights
                                             (us_split_fields3
                                             temp___expr_1489)))) (of_int 0))
                                          (= (rec__traffic_lights__lights_state__vehicles_yellow
                                             (us_split_fields1
                                             (rec__traffic_lights__traffic_lightT__lights
                                             (us_split_fields3
                                             temp___expr_1489)))) (of_int 0)))
                                          (= (rec__traffic_lights__lights_state__vehicles_red
                                             (us_split_fields1
                                             (rec__traffic_lights__traffic_lightT__lights
                                             (us_split_fields3
                                             temp___expr_1489)))) (of_int 1)))
                                          (= (rec__traffic_lights__lights_state__pedestrians_green
                                             (us_split_fields1
                                             (rec__traffic_lights__traffic_lightT__lights
                                             (us_split_fields3
                                             temp___expr_1489)))) (of_int 1)))
                                          (= (rec__traffic_lights__lights_state__pedestrians_red
                                             (us_split_fields1
                                             (rec__traffic_lights__traffic_lightT__lights
                                             (us_split_fields3
                                             temp___expr_1489)))) (of_int 0)))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_1478 us_rep1)
  (temp___is_init_1475 Bool) (temp___skip_constant_1476 Bool)
  (temp___do_toplevel_1477 Bool)) Bool (=> (= temp___do_toplevel_1477 true)
                                       (=> (= temp___is_init_1475 true)
                                       (= (valid_combination
                                          temp___expr_1478) true))))

(define-fun default_initial_assumption2 ((temp___expr_1480 us_rep1)
  (temp___skip_top_level_1481 Bool)) Bool (and
                                          (and
                                          (and
                                          (and
                                          (= (rec__traffic_lights__lights_state__vehicles_green
                                             (us_split_fields1
                                             temp___expr_1480)) (of_int 0))
                                          (= (rec__traffic_lights__lights_state__vehicles_yellow
                                             (us_split_fields1
                                             temp___expr_1480)) (of_int 0)))
                                          (= (rec__traffic_lights__lights_state__vehicles_red
                                             (us_split_fields1
                                             temp___expr_1480)) (of_int 1)))
                                          (= (rec__traffic_lights__lights_state__pedestrians_green
                                             (us_split_fields1
                                             temp___expr_1480)) (of_int 1)))
                                          (= (rec__traffic_lights__lights_state__pedestrians_red
                                             (us_split_fields1
                                             temp___expr_1480)) (of_int 0))))

(define-fun dynamic_predicate ((temp___1482 us_rep1)) Bool (= (valid_combination
                                                              temp___1482) true))

(declare-const ls__split_fields Bool)

(declare-const ls__split_fields1 Bool)

(declare-const ls__split_fields2 Bool)

(declare-const ls__split_fields3 Bool)

(declare-const ls__split_fields4 Bool)

(declare-const self__ Bool)

(declare-const self__1 Bool)

(declare-const self__2 Bool)

(declare-const self__3 Bool)

(declare-const self__4 Bool)

(declare-const self__5 Bool)

(declare-const result Bool)

(declare-const result1 Bool)

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const ls__split_fields5 Bool)

(declare-const ls__split_fields6 Bool)

(declare-const ls__split_fields7 Bool)

(declare-const ls__split_fields8 Bool)

(declare-const ls__split_fields9 Bool)

(declare-const result5 Bool)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 Bool)

(declare-const result9 Bool)

(declare-const ls__split_fields10 Bool)

(declare-const ls__split_fields11 Bool)

(declare-const ls__split_fields12 Bool)

(declare-const ls__split_fields13 Bool)

(declare-const ls__split_fields14 Bool)

(declare-const result10 Bool)

(declare-const result11 Bool)

(declare-const result12 Bool)

(declare-const result13 Bool)

(declare-const result14 Bool)

(declare-const ls__split_fields15 Bool)

(declare-const ls__split_fields16 Bool)

(declare-const ls__split_fields17 Bool)

(declare-const ls__split_fields18 Bool)

(declare-const ls__split_fields19 Bool)

(declare-const result15 Bool)

(declare-const result16 Bool)

(declare-const result17 Bool)

(declare-const result18 Bool)

(declare-const result19 Bool)

(declare-const ls__split_fields20 Bool)

(declare-const ls__split_fields21 Bool)

(declare-const ls__split_fields22 Bool)

(declare-const ls__split_fields23 Bool)

(declare-const ls__split_fields24 Bool)

(declare-const result20 Bool)

(declare-const result21 Bool)

(declare-const result22 Bool)

(declare-const result23 Bool)

(declare-const result24 Bool)

(declare-const ls__split_fields25 us_split_fields)

(declare-const result25 us_split_fields__ref)

(declare-const ls__split_fields26 us_split_fields)

(declare-const result26 us_split_fields__ref)

(declare-const ls__split_fields27 us_split_fields)

(declare-const result27 us_split_fields__ref)

(declare-const ls__split_fields28 us_split_fields)

(declare-const result28 us_split_fields__ref)

(declare-const ls__split_fields29 us_split_fields)

(declare-const result29 us_split_fields__ref)

(declare-const ls__split_fields30 us_split_fields)

(declare-const result30 us_split_fields__ref)

(declare-const ls__split_fields31 us_split_fields)

(declare-const result31 us_split_fields__ref)

(declare-const ls__split_fields32 us_split_fields)

(declare-const result32 us_split_fields__ref)

(declare-const ls__split_fields33 us_split_fields)

(define-fun ls__split_fields34 () us_split_fields (mk___split_fields
                                                  ls__split_fields15
                                                  ls__split_fields16
                                                  ls__split_fields17
                                                  ls__split_fields18
                                                  ls__split_fields19))

(define-fun ls__split_fields35 () us_split_fields (mk___split_fields
                                                  ls__split_fields5
                                                  ls__split_fields6
                                                  ls__split_fields7
                                                  ls__split_fields8
                                                  ls__split_fields9))

;; H
  (assert
  (= (valid_combination
     (mk___rep (mk___split_fields self__1 self__2 self__3 self__4 self__5))) true))

;; H
  (assert (= self__ true))

;; H
  (assert (= result ls__split_fields))

;; H
  (assert (= result1 ls__split_fields1))

;; H
  (assert (= result2 ls__split_fields2))

;; H
  (assert (= result3 ls__split_fields3))

;; H
  (assert (= result4 ls__split_fields4))

;; H
  (assert (= self__1 ls__split_fields5))

;; H
  (assert (= self__2 ls__split_fields6))

;; H
  (assert (= self__3 ls__split_fields7))

;; H
  (assert (= self__4 ls__split_fields8))

;; H
  (assert (= self__5 ls__split_fields9))

;; H
  (assert
  (= (valid_combination
     (mk___rep (mk___split_fields self__1 self__2 self__3 self__4 self__5))) true))

;; H
  (assert (=> (= ls__split_fields5 true) (= result5 ls__split_fields5)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result6 ls__split_fields6)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result7 ls__split_fields7)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result8 ls__split_fields8)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result9 ls__split_fields9)))

;; H
  (assert (=> (= ls__split_fields5 true) (= (of_int 0) ls__split_fields10)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields6 ls__split_fields11)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields7 ls__split_fields12)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields8 ls__split_fields13)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields9 ls__split_fields14)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result10 ls__split_fields10)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result11 ls__split_fields11)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result12 ls__split_fields12)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result13 ls__split_fields13)))

;; H
  (assert (=> (= ls__split_fields5 true) (= result14 ls__split_fields14)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields10 ls__split_fields15)))

;; H
  (assert (=> (= ls__split_fields5 true) (= (of_int 1) ls__split_fields16)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields12 ls__split_fields17)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields13 ls__split_fields18)))

;; H
  (assert
  (=> (= ls__split_fields5 true) (= ls__split_fields14 ls__split_fields19)))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result15 ls__split_fields5))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result16 ls__split_fields6))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result17 ls__split_fields7))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result18 ls__split_fields8))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result19 ls__split_fields9))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields5 ls__split_fields20))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= (of_int 0) ls__split_fields21))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields7 ls__split_fields22))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields8 ls__split_fields23))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields9 ls__split_fields24))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result20 ls__split_fields20))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result21 ls__split_fields21))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result22 ls__split_fields22))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result23 ls__split_fields23))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result24 ls__split_fields24))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields25 (mk___split_fields ls__split_fields20
                        ls__split_fields21 (of_int 1) ls__split_fields23
                        ls__split_fields24)))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result25 (mk___split_fields__ref ls__split_fields25)))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields26 (mk___split_fields
                        (rec__traffic_lights__lights_state__vehicles_green
                        ls__split_fields25)
                        (rec__traffic_lights__lights_state__vehicles_yellow
                        ls__split_fields25)
                        (rec__traffic_lights__lights_state__vehicles_red
                        ls__split_fields25) (of_int 1)
                        (rec__traffic_lights__lights_state__pedestrians_red
                        ls__split_fields25))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= result26 (mk___split_fields__ref ls__split_fields26)))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=> (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false)
  (= ls__split_fields27 (mk___split_fields
                        (rec__traffic_lights__lights_state__vehicles_green
                        ls__split_fields26)
                        (rec__traffic_lights__lights_state__vehicles_yellow
                        ls__split_fields26)
                        (rec__traffic_lights__lights_state__vehicles_red
                        ls__split_fields26)
                        (rec__traffic_lights__lights_state__pedestrians_green
                        ls__split_fields26) (of_int 0))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=> (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false)
  (= result27 (mk___split_fields__ref ls__split_fields35))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=> (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false)
  (= ls__split_fields28 (mk___split_fields ls__split_fields5 (of_int 1)
                        ls__split_fields7 ls__split_fields8
                        ls__split_fields9))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=> (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false)
  (= result28 (mk___split_fields__ref ls__split_fields28))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=> (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false)
  (= ls__split_fields29 (mk___split_fields
                        (rec__traffic_lights__lights_state__vehicles_green
                        ls__split_fields28)
                        (rec__traffic_lights__lights_state__vehicles_yellow
                        ls__split_fields28)
                        (rec__traffic_lights__lights_state__vehicles_red
                        ls__split_fields28) (of_int 0)
                        (rec__traffic_lights__lights_state__pedestrians_red
                        ls__split_fields28)))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=> (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false)
  (= result29 (mk___split_fields__ref ls__split_fields29))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=> (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false)
  (= ls__split_fields30 (mk___split_fields
                        (rec__traffic_lights__lights_state__vehicles_green
                        ls__split_fields29)
                        (rec__traffic_lights__lights_state__vehicles_yellow
                        ls__split_fields29)
                        (rec__traffic_lights__lights_state__vehicles_red
                        ls__split_fields29)
                        (rec__traffic_lights__lights_state__pedestrians_green
                        ls__split_fields29) (of_int 1)))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true)
  (= result30 (mk___split_fields__ref ls__split_fields35)))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true)
  (= ls__split_fields31 (mk___split_fields (of_int 1) ls__split_fields6
                        ls__split_fields7 ls__split_fields8
                        ls__split_fields9)))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true)
  (= result31 (mk___split_fields__ref ls__split_fields31)))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true)
  (= ls__split_fields32 (mk___split_fields
                        (rec__traffic_lights__lights_state__vehicles_green
                        ls__split_fields31) (of_int 0)
                        (rec__traffic_lights__lights_state__vehicles_red
                        ls__split_fields31)
                        (rec__traffic_lights__lights_state__pedestrians_green
                        ls__split_fields31)
                        (rec__traffic_lights__lights_state__pedestrians_red
                        ls__split_fields31))))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true)
  (= result32 (mk___split_fields__ref ls__split_fields32)))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true)
  (= ls__split_fields33 (mk___split_fields
                        (rec__traffic_lights__lights_state__vehicles_green
                        ls__split_fields32)
                        (rec__traffic_lights__lights_state__vehicles_yellow
                        ls__split_fields32) (of_int 0)
                        (rec__traffic_lights__lights_state__pedestrians_green
                        ls__split_fields32)
                        (rec__traffic_lights__lights_state__pedestrians_red
                        ls__split_fields32))))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (=> (not (= (ite (= ls__split_fields7 true) ls__split_fields6 false) true))
  (= ls__split_fields33 ls__split_fields35))))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (=>
  (not
  (ite (= ls__split_fields7 true) (not (= ls__split_fields6 true)) false))
  (= ls__split_fields30 ls__split_fields33)))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (=>
  (not
  (ite (= ls__split_fields6 true) (not (= ls__split_fields7 true)) false))
  (= ls__split_fields27 ls__split_fields30))))

;; H
  (assert
  (=> (not (= ls__split_fields5 true))
  (= ls__split_fields34 ls__split_fields27)))

(assert
;; WP_parameter_def
 ;; File "traffic_lights.ads", line 33, characters 0-0
  (not (= (valid_combination (mk___rep ls__split_fields34)) true)))
(check-sat)
(exit)
