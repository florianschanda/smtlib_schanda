(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic state_a : bool, int -> bool

logic state_a__function_guard : bool, bool, int -> prop

axiom state_a__post_axiom : true

axiom state_a__def_axiom :
  (forall state_machine__flag:bool.
  (forall state_machine__num:int [state_a(state_machine__flag,
  state_machine__num)]. ((state_a(state_machine__flag,
  state_machine__num) = true) <-> ((state_machine__flag = true) and
  (0 <  state_machine__num)))))

logic state_b : bool, int -> bool

logic state_b__function_guard : bool, bool, int -> prop

axiom state_b__post_axiom : true

axiom state_b__def_axiom :
  (forall state_machine__flag:bool.
  (forall state_machine__num:int [state_b(state_machine__flag,
  state_machine__num)]. ((state_b(state_machine__flag,
  state_machine__num) = true) <-> ((state_machine__flag = true) and
  (state_machine__num <= 0)))))

logic state_c : bool, int -> bool

logic state_c__function_guard : bool, bool, int -> prop

axiom state_c__post_axiom : true

axiom state_c__def_axiom :
  (forall state_machine__flag:bool.
  (forall state_machine__num:int [state_c(state_machine__flag,
  state_machine__num)]. ((state_c(state_machine__flag,
  state_machine__num) = true) <-> ((not (state_machine__flag = true)) and
  (0 <  state_machine__num)))))

logic state_d : bool, int -> bool

logic state_d__function_guard : bool, bool, int -> prop

axiom state_d__post_axiom : true

axiom state_d__def_axiom :
  (forall state_machine__flag:bool.
  (forall state_machine__num:int [state_d(state_machine__flag,
  state_machine__num)]. ((state_d(state_machine__flag,
  state_machine__num) = true) <-> ((not (state_machine__flag = true)) and
  (state_machine__num <  0)))))

 (* File "state_machine.adb", line 22, characters 0-0 *)
goal WP_parameter_def :
  (forall flag:bool. forall num:int. forall o:int. forall o1:int.
  forall o2:int. forall flag1:bool. forall num1:int. forall result:bool.
  forall result1:bool. forall result2:int. forall num2:int.
  forall result3:bool. forall result4:bool. forall flag2:bool.
  forall result5:int. forall num3:int. forall result6:bool.
  forall result7:int. forall num4:int. forall flag3:bool. forall num5:int.
  forall flag4:bool. forall num6:int. (in_range1(num) ->
  (((((result = state_a(flag, num)) and ((result = true) <->
  ((flag = true) and (0 <  num)))) and (((result = true) and
  (((num2 = num) and (flag2 = flag)) and ((num2 = num1) and
  (flag2 = flag1)))) or ((not (result = true)) and (((result1 = state_b(flag,
  num)) and ((result1 = true) <-> ((flag = true) and (num <= 0)))) and
  (((result1 = true) and ((((o = (num + 1)) and in_range1((num + 1))) and
  ((result2 = num) and (num2 = o))) and ((flag2 = flag) and
  (flag2 = flag1)))) or ((not (result1 = true)) and
  ((((result3 = state_c(flag, num)) and ((result3 = true) <->
  ((not (flag = true)) and (0 <  num)))) and (((result3 = true) and ((({
  bool__content = result4 } = { bool__content = flag }) and
  (flag2 = of_int(1))) and (((o1 = (-num)) and in_range1((-num))) and
  ((result5 = num) and (num3 = o1))))) or ((not (result3 = true)) and
  ((((result6 = state_d(flag, num)) and ((result6 = true) <->
  ((not (flag = true)) and (num <  0)))) and ((result6 = true) and
  (((o2 = (num + 1)) and in_range1((num + 1))) and ((result7 = num) and
  (num4 = o2))))) and (((num3 = num4) and (flag2 = flag)) and
  ((num3 = num4) and (flag2 = flag1))))))) and (num2 = num3)))))))) and
  (((num2 = num5) and (flag2 = flag3)) and ((num6 = num2) and
  (flag4 = flag2)))) -> ((((state_a(flag, num) = true) and (state_a(flag3,
  num5) = true)) or (not (state_a(flag, num) = true))) -> ((((state_b(flag,
  num) = true) and ((state_a(flag3, num5) = true) or (state_b(flag3,
  num5) = true))) or (not (state_b(flag, num) = true))) -> ((((state_c(flag,
  num) = true) and (state_b(flag3, num5) = true)) or (not (state_c(flag,
  num) = true))) -> ((((state_d(flag, num) = true) and ((state_c(flag3,
  num5) = true) or (state_d(flag3, num5) = true))) or (not (state_d(flag,
  num) = true))) -> (match_bool(match_bool(match_bool(state_a(flag, num),
  true, state_b(flag, num)), true, state_c(flag, num)), true, state_d(flag,
  num)) = true))))))))
