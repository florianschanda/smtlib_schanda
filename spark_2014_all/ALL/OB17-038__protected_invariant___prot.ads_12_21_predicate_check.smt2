;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__prot__int__v integer)))))
(define-fun us_split_fields_V__projection ((a us_split_fields)) integer
  (rec__prot__int__v a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__prot__int__v (us_split_fields1 a)))
                   (to_rep (rec__prot__int__v (us_split_fields1 b)))) true
                   false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun prot__int__v__first__bit () Int)

(declare-fun prot__int__v__last__bit () Int)

(declare-fun prot__int__v__position () Int)

;; prot__int__v__first__bit_axiom
  (assert (<= 0 prot__int__v__first__bit))

;; prot__int__v__last__bit_axiom
  (assert (< prot__int__v__first__bit prot__int__v__last__bit))

;; prot__int__v__position_axiom
  (assert (<= 0 prot__int__v__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((int____ref (mk_int____ref (int____content us_rep)))))
(define-fun int____ref___projection ((a int____ref)) us_rep (int____content
                                                            a))

(declare-datatypes () ((nat__ref (mk_nat__ref (nat__content us_rep)))))
(define-fun nat__ref___projection ((a nat__ref)) us_rep (nat__content a))

(declare-datatypes ()
((us_split_fields2 (mk___split_fields1 (rec__prot__t__data us_rep)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields2)) us_rep
  (rec__prot__t__data a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun prot__t__data__first__bit () Int)

(declare-fun prot__t__data__last__bit () Int)

(declare-fun prot__t__data__position () Int)

;; prot__t__data__first__bit_axiom
  (assert (<= 0 prot__t__data__first__bit))

;; prot__t__data__last__bit_axiom
  (assert (< prot__t__data__first__bit prot__t__data__last__bit))

;; prot__t__data__position_axiom
  (assert (<= 0 prot__t__data__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))

(define-fun dynamic_invariant ((temp___expr_178 us_rep)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=> (= temp___do_toplevel_177 true)
                                      (=> (= temp___is_init_175 true)
                                      (<= 0 (to_rep
                                            (rec__prot__int__v
                                            (us_split_fields1
                                            temp___expr_178)))))))

(define-fun dynamic_predicate ((temp___183 us_rep)) Bool (<= 0 (to_rep
                                                               (rec__prot__int__v
                                                               (us_split_fields1
                                                               temp___183)))))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_188 us_rep1)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (<= 0 (to_rep
                                            (rec__prot__int__v
                                            (us_split_fields1
                                            (rec__prot__t__data
                                            (us_split_fields3
                                            temp___expr_188)))))))

(define-fun default_initial_assumption ((temp___expr_190 us_rep1)
  (temp___skip_top_level_191 Bool)) Bool (= (rec__prot__t__data
                                            (us_split_fields3
                                            temp___expr_190)) (mk___rep
                                                              (mk___split_fields
                                                              (of_rep 0)))))

(declare-fun self__ () us_rep1)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun temp___192 () integer)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___192 o1))

(assert
;; WP_parameter_def
 ;; File "prot.ads", line 9, characters 0-0
  (not (<= 0 (to_rep temp___192))))
(check-sat)
(exit)
