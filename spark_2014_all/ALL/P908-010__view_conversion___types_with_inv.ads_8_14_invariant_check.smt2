;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t1 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (t1 t1) Bool)

(declare-fun dummy () t1)

(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content t1)))))
(define-fun t1__ref___projection ((a t1__ref)) t1 (t1__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range temp___expr_135)))

(define-fun type_invariant ((temp___138 Int)) Bool (not (= temp___138 0)))

(declare-sort t2 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t2 t2) Bool)

(declare-fun dummy1 () t2)

(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content t2)))))
(define-fun t2__ref___projection ((a t2__ref)) t2 (t2__content a))

(define-fun dynamic_invariant1 ((temp___expr_143 Int)
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool (=>
                                      (or (= temp___is_init_140 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range1 temp___expr_143)))

(declare-fun to_rep (t2) Int)

(declare-fun of_rep (Int) t2)

;; inversion_axiom
  (assert
  (forall ((x t2)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x t2)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun x () Int)

(declare-fun o () t2)

(declare-fun o1 () Int)

(declare-fun types_with_inv__set_to_zero__x () Int)

(declare-fun result () Int)

(declare-fun x1 () Int)

(declare-fun types_with_inv__set_to_zero__x1 () Int)

(declare-fun result1 () Int)

(declare-fun x2 () Int)

(declare-fun x3 () Int)

(declare-fun x4 () Int)

;; H
  (assert (in_range1 x))

;; H
  (assert (type_invariant x))

;; H
  (assert (in_range types_with_inv__set_to_zero__x))

;; H
  (assert (= result x))

;; H
  (assert (= x1 types_with_inv__set_to_zero__x))

;; H
  (assert (in_range types_with_inv__set_to_zero__x1))

;; H
  (assert (= (to_rep o) types_with_inv__set_to_zero__x1))

;; H
  (assert (= o1 (to_rep o)))

;; H
  (assert (= result1 x1))

;; H
  (assert (= x2 o1))

;; H
  (assert (= x2 x3))

;; H
  (assert (= x4 x2))

(assert
;; WP_parameter_def
 ;; File "types_with_inv.ads", line 21, characters 0-0
  (not (type_invariant x3)))
(check-sat)
(exit)
