;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-fun c () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort scalar_with_default 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (scalar_with_default scalar_with_default) Bool)

(declare-fun dummy1 () scalar_with_default)

(declare-datatypes ()
((scalar_with_default__ref
 (mk_scalar_with_default__ref
 (scalar_with_default__content scalar_with_default)))))
(define-fun scalar_with_default__ref_3__projection ((a scalar_with_default__ref)) scalar_with_default
  (scalar_with_default__content a))

(declare-sort tscalar_with_defaultB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tscalar_with_defaultB tscalar_with_defaultB) Bool)

(declare-fun dummy2 () tscalar_with_defaultB)

(declare-datatypes ()
((tscalar_with_defaultB__ref
 (mk_tscalar_with_defaultB__ref
 (tscalar_with_defaultB__content tscalar_with_defaultB)))))
(define-fun tscalar_with_defaultB__ref_3__projection ((a tscalar_with_defaultB__ref)) tscalar_with_defaultB
  (tscalar_with_defaultB__content a))

(declare-fun to_rep (tscalar_with_defaultB) Int)

(declare-fun of_rep (Int) tscalar_with_defaultB)

;; inversion_axiom
  (assert
  (forall ((x tscalar_with_defaultB))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x tscalar_with_defaultB)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun first () Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (tscalar_with_defaultB tscalar_with_defaultB) Bool)

(declare-fun dummy3 () tscalar_with_defaultB)

(declare-datatypes ()
((scalar_bad_default__ref
 (mk_scalar_bad_default__ref
 (scalar_bad_default__content tscalar_with_defaultB)))))
(define-fun scalar_bad_default__ref_3__projection ((a scalar_bad_default__ref)) tscalar_with_defaultB
  (scalar_bad_default__content a))

(declare-sort tTbadSP1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tTbadSP1 tTbadSP1) Bool)

(declare-fun dummy4 () tTbadSP1)

(declare-datatypes ()
((tTbadSP1__ref (mk_tTbadSP1__ref (tTbadSP1__content tTbadSP1)))))
(define-fun tTbadSP1__ref___projection ((a tTbadSP1__ref)) tTbadSP1 (tTbadSP1__content
                                                                    a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int tscalar_with_defaultB))))))
(declare-fun slide ((Array Int tscalar_with_defaultB) Int
  Int) (Array Int tscalar_with_defaultB))

;; slide_eq
  (assert
  (forall ((a (Array Int tscalar_with_defaultB)))
  (forall ((first1 Int))
  (! (= (slide a first1 first1) a) :pattern ((slide a first1 first1)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int tscalar_with_defaultB)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int tscalar_with_defaultB) Int Int
  (Array Int tscalar_with_defaultB) Int
  Int) (Array Int tscalar_with_defaultB))

;; concat_def
  (assert
  (forall ((a (Array Int tscalar_with_defaultB))
  (b (Array Int tscalar_with_defaultB)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (tscalar_with_defaultB
  Int) (Array Int tscalar_with_defaultB))

;; singleton_def
  (assert
  (forall ((v tscalar_with_defaultB))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int tscalar_with_defaultB)) (a__first Int)
  (a__last Int) (b (Array Int tscalar_with_defaultB)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int tscalar_with_defaultB))
  (b (Array Int tscalar_with_defaultB)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int tscalar_with_defaultB) Int Int
  (Array Int tscalar_with_defaultB) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int tscalar_with_defaultB))
  (b (Array Int tscalar_with_defaultB)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int tscalar_with_defaultB))
  (b (Array Int tscalar_with_defaultB)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int tscalar_with_defaultB))
  (b (Array Int tscalar_with_defaultB)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(define-fun dynamic_invariant1 ((temp___expr_192 (Array Int tscalar_with_defaultB))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (forall ((temp___193 Int))
                                      (=>
                                      (and (<= 1 temp___193)
                                      (<= temp___193 100))
                                      (=>
                                      (or (= temp___is_init_189 true)
                                      (<= first 2147483647))
                                      (dynamic_property first 2147483647
                                      (to_rep
                                      (select temp___expr_192 temp___193)))))))

(define-fun default_initial_assumption ((temp___expr_194 (Array Int tscalar_with_defaultB))
  (temp___skip_top_level_195 Bool)) Bool (forall ((temp___196 Int))
                                         (=>
                                         (and (<= 1 temp___196)
                                         (<= temp___196 100))
                                         (= (to_rep
                                            (select temp___expr_194 temp___196)) 0))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant2 ((temp___expr_175 Int)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)) Bool (=>
                                      (or (= temp___is_init_172 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_175)))

(define-fun dynamic_invariant3 ((temp___expr_181 Int)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)) Bool (=>
                                      (or (= temp___is_init_178 true)
                                      (<= first 2147483647))
                                      (dynamic_property first 2147483647
                                      temp___expr_181)))

;; first__def_axiom
  (assert (= first c))

(declare-fun o () Int)

(declare-fun result () Bool)

;; H
  (assert (in_range c))

;; H
  (assert (=> (<= 1 100) (= o (+ (- 100 1) 1))))

;; H
  (assert (=> (not (<= 1 100)) (= o 0)))

;; H
  (assert (= result (ite (< 0 o) true false)))

;; H
  (assert (= result true))

(assert
;; WP_parameter_def
 ;; File "with_default.adb", line 12, characters 0-0
  (not (dynamic_property first 2147483647 0)))
(check-sat)
(exit)
