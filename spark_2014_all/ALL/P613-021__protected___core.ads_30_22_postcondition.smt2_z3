;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort message_index 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 15))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (message_index message_index) Bool)

(declare-const dummy2 message_index)

(declare-datatypes ((message_index__ref 0))
(((mk_message_index__ref (message_index__content message_index)))))
(define-fun message_index__ref___projection ((a message_index__ref)) message_index
  (message_index__content a))

(declare-fun to_rep2 (message_index) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) message_index)

;; inversion_axiom
  (assert
  (forall ((x message_index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x message_index)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 16))))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int2 ((x message_index)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x message_index)) (! (in_range_int
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort message_count 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (message_count message_count) Bool)

(declare-const dummy3 message_count)

(declare-datatypes ((message_count__ref 0))
(((mk_message_count__ref (message_count__content message_count)))))
(define-fun message_count__ref___projection ((a message_count__ref)) message_count
  (message_count__content a))

(declare-fun to_rep3 (message_count) Int)

(declare-fun of_rep3 (Int) message_count)

;; inversion_axiom
  (assert
  (forall ((x message_count))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x message_count)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__core__message_record__value integer)(rec__core__message_record__size natural)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) integer
  (rec__core__message_record__value a))

(define-fun us_split_fields_Size__projection ((a us_split_fields)) natural
  (rec__core__message_record__size a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__core__message_record__value
                           (us_split_fields1 a))) (to_rep
                                                  (rec__core__message_record__value
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__core__message_record__size
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__core__message_record__size
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const core__message_record__value__first__bit Int)

(declare-const core__message_record__value__last__bit Int)

(declare-const core__message_record__value__position Int)

;; core__message_record__value__first__bit_axiom
  (assert (<= 0 core__message_record__value__first__bit))

;; core__message_record__value__last__bit_axiom
  (assert
  (< core__message_record__value__first__bit core__message_record__value__last__bit))

;; core__message_record__value__position_axiom
  (assert (<= 0 core__message_record__value__position))

(declare-const core__message_record__size__first__bit Int)

(declare-const core__message_record__size__last__bit Int)

(declare-const core__message_record__size__position Int)

;; core__message_record__size__first__bit_axiom
  (assert (<= 0 core__message_record__size__first__bit))

;; core__message_record__size__last__bit_axiom
  (assert
  (< core__message_record__size__first__bit core__message_record__size__last__bit))

;; core__message_record__size__position_axiom
  (assert (<= 0 core__message_record__size__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((message_record__ref 0))
(((mk_message_record__ref (message_record__content us_rep)))))
(define-fun message_record__ref___projection ((a message_record__ref)) us_rep
  (message_record__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_132 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_132)
                                    (bvule temp___idx_132 a__last))
                                    (= (bool_eq (select a temp___idx_132)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))))))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__core__mailboxT__messages (Array (_ BitVec 8) us_rep))(rec__core__mailboxT__next_in message_index)(rec__core__mailboxT__next_out message_index)(rec__core__mailboxT__count message_count)))))
(define-fun us_split_fields_Messages__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep)
  (rec__core__mailboxT__messages a))

(define-fun us_split_fields_Next_In__projection ((a us_split_fields2)) message_index
  (rec__core__mailboxT__next_in a))

(define-fun us_split_fields_Next_Out__projection ((a us_split_fields2)) message_index
  (rec__core__mailboxT__next_out a))

(define-fun us_split_fields_Count__projection ((a us_split_fields2)) message_count
  (rec__core__mailboxT__count a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const core__mailboxT__messages__first__bit Int)

(declare-const core__mailboxT__messages__last__bit Int)

(declare-const core__mailboxT__messages__position Int)

;; core__mailboxT__messages__first__bit_axiom
  (assert (<= 0 core__mailboxT__messages__first__bit))

;; core__mailboxT__messages__last__bit_axiom
  (assert
  (< core__mailboxT__messages__first__bit core__mailboxT__messages__last__bit))

;; core__mailboxT__messages__position_axiom
  (assert (<= 0 core__mailboxT__messages__position))

(declare-const core__mailboxT__next_in__first__bit Int)

(declare-const core__mailboxT__next_in__last__bit Int)

(declare-const core__mailboxT__next_in__position Int)

;; core__mailboxT__next_in__first__bit_axiom
  (assert (<= 0 core__mailboxT__next_in__first__bit))

;; core__mailboxT__next_in__last__bit_axiom
  (assert
  (< core__mailboxT__next_in__first__bit core__mailboxT__next_in__last__bit))

;; core__mailboxT__next_in__position_axiom
  (assert (<= 0 core__mailboxT__next_in__position))

(declare-const core__mailboxT__next_out__first__bit Int)

(declare-const core__mailboxT__next_out__last__bit Int)

(declare-const core__mailboxT__next_out__position Int)

;; core__mailboxT__next_out__first__bit_axiom
  (assert (<= 0 core__mailboxT__next_out__first__bit))

;; core__mailboxT__next_out__last__bit_axiom
  (assert
  (< core__mailboxT__next_out__first__bit core__mailboxT__next_out__last__bit))

;; core__mailboxT__next_out__position_axiom
  (assert (<= 0 core__mailboxT__next_out__position))

(declare-const core__mailboxT__count__first__bit Int)

(declare-const core__mailboxT__count__last__bit Int)

(declare-const core__mailboxT__count__position Int)

;; core__mailboxT__count__first__bit_axiom
  (assert (<= 0 core__mailboxT__count__first__bit))

;; core__mailboxT__count__last__bit_axiom
  (assert
  (< core__mailboxT__count__first__bit core__mailboxT__count__last__bit))

;; core__mailboxT__count__position_axiom
  (assert (<= 0 core__mailboxT__count__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-datatypes ((mailboxT__ref 0))
(((mk_mailboxT__ref (mailboxT__content us_rep1)))))
(define-fun mailboxT__ref___projection ((a mailboxT__ref)) us_rep1 (mailboxT__content
                                                                   a))

(declare-fun temp___207 (us_rep) (Array (_ BitVec 8) us_rep))

;; def_axiom
  (assert
  (forall ((temp___209 us_rep))
  (forall ((temp___210 (_ BitVec 8)))
  (= (select (temp___207 temp___209) temp___210) temp___209))))

(define-fun default_initial_assumption ((temp___expr_205 us_rep1)
  (temp___skip_top_level_206 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (rec__core__mailboxT__messages
                                            (us_split_fields3
                                            temp___expr_205)) (temp___207
                                                              (mk___rep
                                                              (mk___split_fields
                                                              (of_rep 0)
                                                              (of_rep1 0)))))
                                         (= (to_rep2
                                            (rec__core__mailboxT__next_in
                                            (us_split_fields3
                                            temp___expr_205))) ((_ int2bv 8) 0)))
                                         (= (to_rep2
                                            (rec__core__mailboxT__next_out
                                            (us_split_fields3
                                            temp___expr_205))) ((_ int2bv 8) 0)))
                                         (= (to_rep3
                                            (rec__core__mailboxT__count
                                            (us_split_fields3
                                            temp___expr_205))) 0)))

(declare-fun item_count (us_rep1) Int)

(declare-fun item_count__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 16)) (in_range3 temp___expr_178)))

;; item_count__post_axiom
  (assert
  (forall ((self__ us_rep1)) (! (dynamic_invariant1 (item_count self__) true
  false true) :pattern ((item_count self__)) )))

;; item_count__def_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (= (item_count self__) (to_rep3
                            (rec__core__mailboxT__count
                            (us_split_fields3 self__)))) :pattern ((item_count
                                                                   self__)) )))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_172 (_ BitVec 8))
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 15)))
                                      (in_range2 temp___expr_172)))

(declare-const self__ (Array (_ BitVec 8) us_rep))

(declare-const self__1 message_index)

(declare-const self__2 message_index)

(declare-const self__3 message_count)

(declare-const o integer)

(declare-const o1 integer)

(declare-const o2 natural)

(declare-const o3 integer)

(declare-const o4 natural)

(declare-const o5 (Array (_ BitVec 8) us_rep))

(declare-const o6 (Array (_ BitVec 8) us_rep))

(declare-const o7 message_index)

(declare-const o8 message_index)

(declare-const o9 message_count)

(declare-const o10 (Array (_ BitVec 8) us_rep))

(declare-const o11 message_index)

(declare-const o12 message_index)

(declare-const o13 message_count)

(declare-const o14 natural)

(declare-const o15 integer)

(declare-const o16 natural)

(declare-const o17 integer)

(declare-const o18 natural)

(declare-const o19 (Array (_ BitVec 8) us_rep))

(declare-const o20 (Array (_ BitVec 8) us_rep))

(declare-const o21 message_index)

(declare-const o22 message_index)

(declare-const o23 message_count)

(declare-const o24 (Array (_ BitVec 8) us_rep))

(declare-const o25 message_index)

(declare-const o26 message_index)

(declare-const o27 message_count)

(declare-const o28 message_index)

(declare-const o29 (Array (_ BitVec 8) us_rep))

(declare-const o30 message_index)

(declare-const o31 message_index)

(declare-const o32 message_count)

(declare-const o33 (Array (_ BitVec 8) us_rep))

(declare-const o34 message_index)

(declare-const o35 message_index)

(declare-const o36 message_count)

(declare-const o37 Int)

(declare-const o38 message_count)

(declare-const o39 (Array (_ BitVec 8) us_rep))

(declare-const o40 message_index)

(declare-const o41 message_index)

(declare-const o42 message_count)

(declare-const o43 (Array (_ BitVec 8) us_rep))

(declare-const o44 message_index)

(declare-const o45 message_index)

(declare-const o46 message_count)

(declare-const self__4 us_rep1)

(declare-const result mailboxT__ref)

(declare-const self__5 us_rep1)

(declare-const result1 mailboxT__ref)

(declare-const self__6 us_rep1)

(declare-const result2 mailboxT__ref)

(declare-const self__7 us_rep1)

(declare-const result3 mailboxT__ref)

(declare-const self__8 us_rep1)

(declare-const self__9 mailboxT__ref)

(declare-const self__10 us_rep1)

(define-fun o47 () us_rep1 (mk___rep1 (mk___split_fields1 o33 o34 o35 o36)))

(define-fun o48 () us_rep1 (mk___rep1 (mk___split_fields1 o24 o25 o26 o27)))

(define-fun o49 () us_rep (mk___rep (mk___split_fields o17 o18)))

(define-fun o50 () us_rep1 (mk___rep1 (mk___split_fields1 o10 o11 o12 o13)))

(define-fun o51 () us_rep (mk___rep (mk___split_fields o3 o4)))

(define-fun self__11 () mailboxT__ref (mk_mailboxT__ref
                                      (mk___rep1
                                      (mk___split_fields1 self__ self__1
                                      self__2 self__3))))

;; H
  (assert (in_range n))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= (to_rep o) n)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o o1)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__message_record__size
     (us_split_fields1 (select self__ (to_rep2 self__1)))) o2)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o3 o1)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o4 o2)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16) (= o5 (store self__ (to_rep2 self__1) o51))))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o5 o6)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= self__1 o7)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= self__2 o8)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= self__3 o9)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o10 o6)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o11 o7)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o12 o8)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o13 o9)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= result self__11)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= self__5 o50)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= (to_rep1 o14) 0)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__message_record__value
     (us_split_fields1
     (select (rec__core__mailboxT__messages (us_split_fields3 self__5))
     (to_rep2 (rec__core__mailboxT__next_in (us_split_fields3 self__5))))))
  o15)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o14 o16)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o17 o15)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o18 o16)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= o19 (store (rec__core__mailboxT__messages (us_split_fields3 self__5))
  (to_rep2 (rec__core__mailboxT__next_in (us_split_fields3 self__5)))
  o49))))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o19 o20)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__next_in (us_split_fields3 self__5)) o21)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__next_out (us_split_fields3 self__5)) o22)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__count (us_split_fields3 self__5)) o23)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o24 o20)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o25 o21)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o26 o22)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o27 o23)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16) (= result1 (mk_mailboxT__ref self__5))))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= self__6 o48)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (to_rep2 o28) (bvurem (bvadd (to_rep2
                                  (rec__core__mailboxT__next_in
                                  (us_split_fields3 self__6))) ((_ int2bv 8) 1)) ((_ int2bv 8) 16)))))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__messages (us_split_fields3 self__6)) o29)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o28 o30)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__next_out (us_split_fields3 self__6)) o31)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__count (us_split_fields3 self__6)) o32)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o33 o29)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o34 o30)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o35 o31)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o36 o32)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16) (= result2 (mk_mailboxT__ref self__6))))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= self__7 o47)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (and
  (= o37 (+ (to_rep3 (rec__core__mailboxT__count (us_split_fields3 self__7))) 1))
  (in_range3
  (+ (to_rep3 (rec__core__mailboxT__count (us_split_fields3 self__7))) 1)))))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= (to_rep3 o38) o37)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__messages (us_split_fields3 self__7)) o39)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__next_in (us_split_fields3 self__7)) o40)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= (rec__core__mailboxT__next_out (us_split_fields3 self__7)) o41)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o38 o42)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o43 o39)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o44 o40)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o45 o41)))

;; H
  (assert (=> (< (to_rep3 self__3) 16) (= o46 o42)))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16) (= result3 (mk_mailboxT__ref self__7))))

;; H
  (assert
  (=> (< (to_rep3 self__3) 16)
  (= self__8 (mk___rep1 (mk___split_fields1 o43 o44 o45 o46)))))

;; H
  (assert
  (=> (not (< (to_rep3 self__3) 16))
  (= self__8 (mk___rep1 (mk___split_fields1 self__ self__1 self__2 self__3)))))

;; H
  (assert (=> (not (< (to_rep3 self__3) 16)) (= self__8 self__4)))

;; H
  (assert (= self__9 (mk_mailboxT__ref self__8)))

;; H
  (assert (= self__10 self__8))

(assert
;; WP_parameter_def
 ;; File "core.ads", line 23, characters 0-0
  (not (< 0 (item_count (mailboxT__content self__9)))))
(check-sat)
(exit)
