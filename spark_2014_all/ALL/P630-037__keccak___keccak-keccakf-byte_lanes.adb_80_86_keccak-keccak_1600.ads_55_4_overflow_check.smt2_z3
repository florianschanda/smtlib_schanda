;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort byte 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (byte byte) Bool)

(declare-fun dummy2 () byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep (byte) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x byte)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))

;; slide_eq
  (assert
  (forall ((a (Array Int byte)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int byte)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int byte) Int Int (Array Int byte) Int
  Int) (Array Int byte))

;; concat_def
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte Int) (Array Int byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int)
  (b (Array Int byte)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int byte) Int Int (Array Int byte) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort index_number 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index_number index_number) Bool)

(declare-fun dummy3 () index_number)

(declare-datatypes ()
((index_number__ref
 (mk_index_number__ref (index_number__content index_number)))))
(define-fun index_number__ref___projection ((a index_number__ref)) index_number
  (index_number__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))

(define-fun of_array ((a (Array Int byte)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int byte)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int byte)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes ()
((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_261 us_t)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (not (= temp___skip_constant_259 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_261)
                                      (last1 temp___expr_261))))

(declare-sort lane_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq5 (lane_type lane_type) Bool)

(declare-fun dummy5 () lane_type)

(declare-datatypes ()
((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type
  (lane_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-fun to_rep2 (lane_type) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) lane_type)

;; inversion_axiom
  (assert
  (forall ((x lane_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int5 ((x lane_type)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x lane_type)) (! (uint_in_range1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort x_coord 0)

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 4))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq6 (x_coord x_coord) Bool)

(declare-fun dummy6 () x_coord)

(declare-datatypes ()
((x_coord__ref (mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a x_coord__ref)) x_coord (x_coord__content
                                                                 a))

(define-fun dynamic_invariant4 ((temp___expr_280 (_ BitVec 8))
  (temp___is_init_277 Bool) (temp___skip_constant_278 Bool)
  (temp___do_toplevel_279 Bool)) Bool (=>
                                      (or (= temp___is_init_277 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 4)))
                                      (in_range4 temp___expr_280)))

(declare-sort y_coord 0)

(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 4))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq7 (y_coord y_coord) Bool)

(declare-fun dummy7 () y_coord)

(declare-datatypes ()
((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content
                                                                 a))

(define-fun dynamic_invariant5 ((temp___expr_286 (_ BitVec 8))
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 4)))
                                      (in_range5 temp___expr_286)))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)

(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (forall ((a lane_type))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8)))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((a lane_type))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8)))
  (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j)
  (get a (bvsub i (bvsub new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide1 a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1)
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8))
  (b__last_2 (_ BitVec 8))) Bool (ite (and
                                      (and
                                      (ite (bvule a__first a__last)
                                      (and (bvule b__first b__last)
                                      (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                      (bvugt b__first b__last))
                                      (ite (bvule a__first_2 a__last_2)
                                      (and (bvule b__first_2 b__last_2)
                                      (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                      (bvugt b__first_2 b__last_2)))
                                      (forall ((temp___idx_133 (_ BitVec 8))
                                      (temp___idx_134 (_ BitVec 8)))
                                      (=>
                                      (and
                                      (and (bvule a__first temp___idx_133)
                                      (bvule temp___idx_133 a__last))
                                      (and (bvule a__first_2 temp___idx_134)
                                      (bvule temp___idx_134 a__last_2)))
                                      (= (to_rep2
                                         (get a temp___idx_133
                                         temp___idx_134)) (to_rep2
                                                          (get b
                                                          (bvadd (bvsub b__first a__first) temp___idx_133)
                                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))
                                 true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_133 (_ BitVec 8)) (temp___idx_134 (_ BitVec 8)))
  (=>
  (and (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (and (bvule a__first_2 temp___idx_134) (bvule temp___idx_134 a__last_2)))
  (= (to_rep2 (get a temp___idx_133 temp___idx_134)) (to_rep2
                                                     (get b
                                                     (bvadd (bvsub b__first a__first) temp___idx_133)
                                                     (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun data () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun bit_len () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun r64s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(define-fun dynamic_invariant6 ((temp___expr_249 (_ BitVec 8))
  (temp___is_init_246 Bool) (temp___skip_constant_247 Bool)
  (temp___do_toplevel_248 Bool)) Bool true)

(define-fun dynamic_invariant7 ((temp___expr_255 Int)
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool)) Bool (=>
                                      (or (= temp___is_init_252 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_255)))

(declare-fun a () map1)

(declare-fun x () (_ BitVec 8))

(declare-fun y () (_ BitVec 8))

(declare-fun remaining_bits () Int)

(declare-fun offset () Int)

(declare-fun initial_byte_len () Int)

(declare-fun lane () (_ BitVec 64))

(declare-fun i () Int)

(declare-fun word () (_ BitVec 64))

(declare-fun remaining_bytes () Int)

(declare-fun i1 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun temp___724 () map1)

(declare-fun temp___723 () Int)

(declare-fun temp___722 () Int)

(declare-fun temp___721 () (_ BitVec 8))

(declare-fun temp___720 () (_ BitVec 8))

(declare-fun temp___728 () Int)

(declare-fun temp___727 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Bool)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun temp___714 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () byte)

(declare-fun o16 () (_ BitVec 8))

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () (_ BitVec 64))

(declare-fun o20 () (_ BitVec 64))

(declare-fun o21 () (_ BitVec 64))

(declare-fun o22 () (_ BitVec 64))

(declare-fun o23 () Int)

(declare-fun o24 () Int)

(declare-fun temp___7141 () Int)

(declare-fun o25 () Int)

(declare-fun o26 () byte)

(declare-fun o27 () (_ BitVec 8))

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () (_ BitVec 64))

(declare-fun o31 () (_ BitVec 64))

(declare-fun o32 () (_ BitVec 64))

(declare-fun o33 () (_ BitVec 64))

(declare-fun o34 () Int)

(declare-fun o35 () Int)

(declare-fun temp___7142 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () byte)

(declare-fun o38 () (_ BitVec 8))

(declare-fun o39 () Int)

(declare-fun o40 () Int)

(declare-fun o41 () (_ BitVec 64))

(declare-fun o42 () (_ BitVec 64))

(declare-fun o43 () (_ BitVec 64))

(declare-fun o44 () (_ BitVec 64))

(declare-fun o45 () Int)

(declare-fun o46 () Int)

(declare-fun temp___7143 () Int)

(declare-fun o47 () Int)

(declare-fun o48 () byte)

(declare-fun o49 () (_ BitVec 8))

(declare-fun o50 () Int)

(declare-fun o51 () Int)

(declare-fun o52 () (_ BitVec 64))

(declare-fun o53 () (_ BitVec 64))

(declare-fun o54 () (_ BitVec 64))

(declare-fun o55 () (_ BitVec 64))

(declare-fun o56 () Int)

(declare-fun o57 () Int)

(declare-fun temp___7144 () Int)

(declare-fun o58 () Int)

(declare-fun o59 () byte)

(declare-fun o60 () (_ BitVec 8))

(declare-fun o61 () Int)

(declare-fun o62 () Int)

(declare-fun o63 () (_ BitVec 64))

(declare-fun o64 () (_ BitVec 64))

(declare-fun o65 () (_ BitVec 64))

(declare-fun o66 () (_ BitVec 64))

(declare-fun o67 () Int)

(declare-fun o68 () Int)

(declare-fun temp___7145 () Int)

(declare-fun o69 () Int)

(declare-fun o70 () byte)

(declare-fun o71 () (_ BitVec 8))

(declare-fun o72 () Int)

(declare-fun o73 () Int)

(declare-fun o74 () (_ BitVec 64))

(declare-fun o75 () (_ BitVec 64))

(declare-fun o76 () (_ BitVec 64))

(declare-fun o77 () (_ BitVec 64))

(declare-fun o78 () Int)

(declare-fun o79 () Int)

(declare-fun temp___7146 () Int)

(declare-fun o80 () Int)

(declare-fun o81 () byte)

(declare-fun o82 () (_ BitVec 8))

(declare-fun o83 () Int)

(declare-fun o84 () Int)

(declare-fun o85 () (_ BitVec 64))

(declare-fun o86 () (_ BitVec 64))

(declare-fun o87 () (_ BitVec 64))

(declare-fun o88 () (_ BitVec 64))

(declare-fun o89 () Int)

(declare-fun o90 () Int)

(declare-fun temp___7147 () Int)

(declare-fun o91 () Int)

(declare-fun o92 () byte)

(declare-fun o93 () (_ BitVec 8))

(declare-fun o94 () Int)

(declare-fun o95 () Int)

(declare-fun o96 () (_ BitVec 64))

(declare-fun o97 () (_ BitVec 64))

(declare-fun o98 () (_ BitVec 64))

(declare-fun o99 () (_ BitVec 64))

(declare-fun o100 () lane_type)

(declare-fun o101 () map1)

(declare-fun o102 () (_ BitVec 8))

(declare-fun o103 () (_ BitVec 8))

(declare-fun o104 () Int)

(declare-fun o105 () Int)

(declare-fun o106 () Int)

(declare-fun o107 () Int)

(declare-fun o108 () Int)

(declare-fun o109 () Int)

(declare-fun o110 () Int)

(declare-fun temp___729 () Int)

(declare-fun o111 () Int)

(declare-fun o112 () Int)

(declare-fun o113 () (_ BitVec 64))

(declare-fun a1 () map1)

(declare-fun lane1 () (_ BitVec 64))

(declare-fun i2 () Int)

(declare-fun result () Bool)

(declare-fun result1 () (_ BitVec 8))

(declare-fun x1 () (_ BitVec 8))

(declare-fun result2 () (_ BitVec 8))

(declare-fun y1 () (_ BitVec 8))

(declare-fun result3 () Int)

(declare-fun remaining_bits1 () Int)

(declare-fun result4 () Int)

(declare-fun offset1 () Int)

(declare-fun result5 () Int)

(declare-fun initial_byte_len1 () Int)

(declare-fun a2 () map1)

(declare-fun x2 () (_ BitVec 8))

(declare-fun y2 () (_ BitVec 8))

(declare-fun remaining_bits2 () Int)

(declare-fun offset2 () Int)

(declare-fun lane2 () (_ BitVec 64))

(declare-fun i3 () Int)

(declare-fun temp___7281 () Int)

(declare-fun temp___7271 () Int)

(declare-fun result6 () Int)

(declare-fun temp___7282 () Int)

(declare-fun result7 () Int)

(declare-fun temp___7272 () Int)

(declare-fun result8 () (_ BitVec 64))

(declare-fun lane3 () (_ BitVec 64))

(declare-fun result9 () int__ref)

(declare-fun i4 () Int)

(declare-fun result10 () t__ref1)

(declare-fun lane4 () (_ BitVec 64))

(declare-fun result11 () int__ref)

(declare-fun i5 () Int)

(declare-fun result12 () t__ref1)

(declare-fun lane5 () (_ BitVec 64))

(declare-fun result13 () int__ref)

(declare-fun i6 () Int)

(declare-fun result14 () t__ref1)

(declare-fun lane6 () (_ BitVec 64))

(declare-fun result15 () int__ref)

(declare-fun i7 () Int)

(declare-fun result16 () t__ref1)

(declare-fun lane7 () (_ BitVec 64))

(declare-fun result17 () int__ref)

(declare-fun i8 () Int)

(declare-fun result18 () t__ref1)

(declare-fun lane8 () (_ BitVec 64))

(declare-fun result19 () int__ref)

(declare-fun i9 () Int)

(declare-fun result20 () t__ref1)

(declare-fun lane9 () (_ BitVec 64))

(declare-fun result21 () int__ref)

(declare-fun i10 () Int)

(declare-fun result22 () t__ref1)

(declare-fun lane10 () (_ BitVec 64))

(declare-fun result23 () int__ref)

(declare-fun i11 () Int)

(declare-fun result24 () t__ref1)

(declare-fun lane11 () (_ BitVec 64))

(declare-fun result25 () map__ref1)

(declare-fun a3 () map1)

(declare-fun result26 () t__ref)

(declare-fun x3 () (_ BitVec 8))

(declare-fun result27 () t__ref)

(declare-fun y3 () (_ BitVec 8))

(declare-fun result28 () int__ref)

(declare-fun offset3 () Int)

(declare-fun result29 () int__ref)

(declare-fun remaining_bits3 () Int)

(declare-fun a4 () map__ref1)

(declare-fun x4 () t__ref)

(declare-fun y4 () t__ref)

(declare-fun remaining_bits4 () int__ref)

(declare-fun offset4 () int__ref)

(declare-fun lane12 () t__ref1)

(declare-fun i12 () int__ref)

(declare-fun temp___7283 () int__ref)

(declare-fun temp___7273 () int__ref)

(declare-fun a5 () map1)

(declare-fun x5 () (_ BitVec 8))

(declare-fun y5 () (_ BitVec 8))

(declare-fun remaining_bits5 () Int)

(declare-fun offset5 () Int)

(declare-fun lane13 () (_ BitVec 64))

(declare-fun i13 () Int)

(declare-fun temp___7284 () Int)

(declare-fun temp___7274 () Int)

(declare-fun a6 () map__ref1)

(declare-fun x6 () t__ref)

(declare-fun y6 () t__ref)

(declare-fun remaining_bits6 () int__ref)

(declare-fun offset6 () int__ref)

(declare-fun lane14 () t__ref1)

(declare-fun i14 () int__ref)

(declare-fun a7 () map1)

(declare-fun x7 () (_ BitVec 8))

(declare-fun y7 () (_ BitVec 8))

(declare-fun remaining_bits7 () Int)

(declare-fun offset7 () Int)

(declare-fun lane15 () (_ BitVec 64))

(declare-fun i15 () Int)

(declare-fun a8 () map__ref1)

(declare-fun x8 () t__ref)

(declare-fun y8 () t__ref)

(declare-fun remaining_bits8 () int__ref)

(declare-fun offset8 () int__ref)

(declare-fun lane16 () t__ref1)

(declare-fun i16 () int__ref)

(declare-fun a9 () map1)

(declare-fun x9 () (_ BitVec 8))

(declare-fun y9 () (_ BitVec 8))

(declare-fun remaining_bits9 () Int)

(declare-fun offset9 () Int)

(declare-fun lane17 () (_ BitVec 64))

(declare-fun i17 () Int)

(declare-fun result30 () t__ref1)

(declare-fun word1 () (_ BitVec 64))

(declare-fun result31 () int__ref)

(declare-fun remaining_bytes1 () Int)

(declare-fun result32 () int__ref)

(declare-fun i18 () Int)

(declare-fun word2 () (_ BitVec 64))

(declare-fun i19 () Int)

;; H
  (assert (dynamic_invariant2 data true false true))

;; H
  (assert (in_range2 bit_len))

;; H
  (assert
  (and (<= (length data) 268435455)
  (and (<= bit_len (* (length data) 8)) (<= bit_len 1600))))

;; H
  (assert (= result1 x))

;; H
  (assert (= x1 ((_ int2bv 8) 0)))

;; H
  (assert (in_range4 x1))

;; H
  (assert (= result2 y))

;; H
  (assert (= y1 ((_ int2bv 8) 0)))

;; H
  (assert (in_range5 y1))

;; H
  (assert (= result3 remaining_bits))

;; H
  (assert (= remaining_bits1 bit_len))

;; H
  (assert (in_range2 remaining_bits1))

;; H
  (assert (= result4 offset))

;; H
  (assert (= offset1 0))

;; H
  (assert (in_range2 offset1))

;; H
  (assert (and (= o4 (+ bit_len 7)) (in_range1 (+ bit_len 7))))

;; H
  (assert (= o5 (div1 o4 8)))

;; H
  (assert (and (= o6 o5) (in_range2 o5)))

;; H
  (assert (= result5 initial_byte_len))

;; H
  (assert (= initial_byte_len1 o6))

;; H
  (assert (in_range2 initial_byte_len1))

;; H
  (assert
  (=> (<= 64 remaining_bits1)
  (and
  (and (= temp___724 a)
  (and (= temp___723 offset1)
  (and (= temp___722 remaining_bits1)
  (and (= temp___721 y1)
  (and (= temp___720 x1)
  (and (= 0 temp___728)
  (and (= 0 temp___727)
  (and
  (and (= (mod2 offset2 8) 0)
  (= (+ offset2 (div1 (+ remaining_bits2 7) 8)) initial_byte_len1))
  (and
  (and
  (and
  (and
  (and (=> (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 4)) (in_range4 x2))
  (=> (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 4)) (in_range5 y2)))
  (=> (<= 0 2147483647) (in_range2 remaining_bits2)))
  (=> (<= 0 2147483647) (in_range2 offset2))) (<= 64 remaining_bits2))
  (and (and (= temp___7281 result6) (= temp___7282 offset2))
  (and (and (= temp___7271 result7) (= temp___7272 remaining_bits2))
  (and (and (= lane2 result8) (= lane3 ((_ int2bv 64) 0)))
  (and
  (and (and (= result9 (mk_int__ref i3)) (= i4 0))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o17 (* i4 8)) (in_range1 (* i4 8)))
  (and (= o18 o17) (in_range2 o17))) (= o19 ((_ int2bv 64) o18)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o12 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o13 (+ o12 i4)))
  (and (= temp___714 o13) (in_range1 o13)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___714)
  (<= temp___714 (to_rep1 (last (rt data))))) (= o14 temp___714)))
  (= o15 (select (elts data) o14))) (= o16 (to_rep o15)))
  (= o20 ((_ zero_extend 56) o16))) (= o21 (bvshl o20 o19))))
  (= o22 (bvor lane3 o21)))
  (and (= result10 (mk_t__ref1 lane3)) (= lane4 o22)))
  (and (and (= result11 (mk_int__ref i4)) (= i5 1))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o28 (* i5 8)) (in_range1 (* i5 8)))
  (and (= o29 o28) (in_range2 o28))) (= o30 ((_ int2bv 64) o29)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o23 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o24 (+ o23 i5)))
  (and (= temp___7141 o24) (in_range1 o24)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7141)
  (<= temp___7141 (to_rep1 (last (rt data))))) (= o25 temp___7141)))
  (= o26 (select (elts data) o25))) (= o27 (to_rep o26)))
  (= o31 ((_ zero_extend 56) o27))) (= o32 (bvshl o31 o30))))
  (= o33 (bvor lane4 o32)))
  (and (= result12 (mk_t__ref1 lane4)) (= lane5 o33)))
  (and (and (= result13 (mk_int__ref i5)) (= i6 2))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o39 (* i6 8)) (in_range1 (* i6 8)))
  (and (= o40 o39) (in_range2 o39))) (= o41 ((_ int2bv 64) o40)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o34 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o35 (+ o34 i6)))
  (and (= temp___7142 o35) (in_range1 o35)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7142)
  (<= temp___7142 (to_rep1 (last (rt data))))) (= o36 temp___7142)))
  (= o37 (select (elts data) o36))) (= o38 (to_rep o37)))
  (= o42 ((_ zero_extend 56) o38))) (= o43 (bvshl o42 o41))))
  (= o44 (bvor lane5 o43)))
  (and (= result14 (mk_t__ref1 lane5)) (= lane6 o44)))
  (and (and (= result15 (mk_int__ref i6)) (= i7 3))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o50 (* i7 8)) (in_range1 (* i7 8)))
  (and (= o51 o50) (in_range2 o50))) (= o52 ((_ int2bv 64) o51)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o45 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o46 (+ o45 i7)))
  (and (= temp___7143 o46) (in_range1 o46)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7143)
  (<= temp___7143 (to_rep1 (last (rt data))))) (= o47 temp___7143)))
  (= o48 (select (elts data) o47))) (= o49 (to_rep o48)))
  (= o53 ((_ zero_extend 56) o49))) (= o54 (bvshl o53 o52))))
  (= o55 (bvor lane6 o54)))
  (and (= result16 (mk_t__ref1 lane6)) (= lane7 o55)))
  (and (and (= result17 (mk_int__ref i7)) (= i8 4))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o61 (* i8 8)) (in_range1 (* i8 8)))
  (and (= o62 o61) (in_range2 o61))) (= o63 ((_ int2bv 64) o62)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o56 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o57 (+ o56 i8)))
  (and (= temp___7144 o57) (in_range1 o57)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7144)
  (<= temp___7144 (to_rep1 (last (rt data))))) (= o58 temp___7144)))
  (= o59 (select (elts data) o58))) (= o60 (to_rep o59)))
  (= o64 ((_ zero_extend 56) o60))) (= o65 (bvshl o64 o63))))
  (= o66 (bvor lane7 o65)))
  (and (= result18 (mk_t__ref1 lane7)) (= lane8 o66)))
  (and (and (= result19 (mk_int__ref i8)) (= i9 5))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o72 (* i9 8)) (in_range1 (* i9 8)))
  (and (= o73 o72) (in_range2 o72))) (= o74 ((_ int2bv 64) o73)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o67 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o68 (+ o67 i9)))
  (and (= temp___7145 o68) (in_range1 o68)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7145)
  (<= temp___7145 (to_rep1 (last (rt data))))) (= o69 temp___7145)))
  (= o70 (select (elts data) o69))) (= o71 (to_rep o70)))
  (= o75 ((_ zero_extend 56) o71))) (= o76 (bvshl o75 o74))))
  (= o77 (bvor lane8 o76)))
  (and (= result20 (mk_t__ref1 lane8)) (= lane9 o77)))
  (and (and (= result21 (mk_int__ref i9)) (= i10 6))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o83 (* i10 8)) (in_range1 (* i10 8)))
  (and (= o84 o83) (in_range2 o83))) (= o85 ((_ int2bv 64) o84)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o78 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o79 (+ o78 i10)))
  (and (= temp___7146 o79) (in_range1 o79)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7146)
  (<= temp___7146 (to_rep1 (last (rt data))))) (= o80 temp___7146)))
  (= o81 (select (elts data) o80))) (= o82 (to_rep o81)))
  (= o86 ((_ zero_extend 56) o82))) (= o87 (bvshl o86 o85))))
  (= o88 (bvor lane9 o87)))
  (and (= result22 (mk_t__ref1 lane9)) (= lane10 o88)))
  (and (and (= result23 (mk_int__ref i10)) (= i11 7))
  (and
  (and
  (and
  (and
  (and (and (= o94 (* i11 8)) (in_range1 (* i11 8)))
  (and (= o95 o94) (in_range2 o94))) (= o96 ((_ int2bv 64) o95)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o89 (+ (to_rep1 (first (rt data))) offset2)) (in_range1
  (+ (to_rep1 (first (rt data))) offset2))) (= o90 (+ o89 i11)))
  (and (= temp___7147 o90) (in_range1 o90)))
  (and
  (and (<= (to_rep1 (first (rt data))) temp___7147)
  (<= temp___7147 (to_rep1 (last (rt data))))) (= o91 temp___7147)))
  (= o92 (select (elts data) o91))) (= o93 (to_rep o92)))
  (= o97 ((_ zero_extend 56) o93))) (= o98 (bvshl o97 o96))))
  (= o99 (bvor lane10 o98)))
  (and (= result24 (mk_t__ref1 lane10)) (= lane11 o99))))))))))))))))))
  (and
  (and
  (and (= (to_rep2 o100) (bvxor (to_rep2 (get a2 x2 y2)) lane11))
  (= o101 (set a2 x2 y2 o100)))
  (and (= result25 (mk_map__ref1 a2)) (= a3 o101)))
  (and
  (and
  (ite (bvule (bvsub ((_ int2bv 8) 5) x2) ((_ int2bv 8) 1))
  (= o102 (bvsub (bvadd x2 ((_ int2bv 8) 1)) ((_ int2bv 8) 5)))
  (= o102 (bvadd x2 ((_ int2bv 8) 1))))
  (and (= result26 (mk_t__ref x2)) (= x3 o102)))
  (and
  (ite (= x3 ((_ int2bv 8) 0))
  (and
  (ite (bvule (bvsub ((_ int2bv 8) 5) y2) ((_ int2bv 8) 1))
  (= o103 (bvsub (bvadd y2 ((_ int2bv 8) 1)) ((_ int2bv 8) 5)))
  (= o103 (bvadd y2 ((_ int2bv 8) 1))))
  (and (= result27 (mk_t__ref y2)) (= y3 o103))) (= y3 y2))
  (and
  (and (and (= o104 (+ offset2 8)) (in_range1 (+ offset2 8)))
  (and (= result28 (mk_int__ref offset2)) (= offset3 o104)))
  (and
  (and
  (and (= o105 (- remaining_bits2 64)) (in_range2 (- remaining_bits2 64)))
  (and (= result29 (mk_int__ref remaining_bits2)) (= remaining_bits3 o105)))
  (not (<= 64 remaining_bits3))))))))))))))))))))
  (and
  (and (= i14 (mk_int__ref i11))
  (and (= lane14 (mk_t__ref1 lane11))
  (and (= offset6 (mk_int__ref offset3))
  (and (= remaining_bits6 (mk_int__ref remaining_bits3))
  (and (= y6 (mk_t__ref y3))
  (and (= x6 (mk_t__ref x3)) (= a6 (mk_map__ref1 a3))))))))
  (and (= i15 i11)
  (and (= lane15 lane11)
  (and (= offset7 offset3)
  (and (= remaining_bits7 remaining_bits3)
  (and (= y7 y3) (and (= x7 x3) (= a7 a3)))))))))))

;; H
  (assert (=> (<= 64 remaining_bits1) (= i16 i14)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= lane16 lane14)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= offset8 offset6)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= remaining_bits8 remaining_bits6)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= y8 y6)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= x8 x6)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= a8 a6)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= i17 i15)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= lane17 lane15)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= offset9 offset7)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= remaining_bits9 remaining_bits7)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= y9 y7)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= x9 x7)))

;; H
  (assert (=> (<= 64 remaining_bits1) (= a9 a7)))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= i16 (mk_int__ref i))))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= lane16 (mk_t__ref1 lane))))

;; H
  (assert
  (=> (not (<= 64 remaining_bits1)) (= offset8 (mk_int__ref offset1))))

;; H
  (assert
  (=> (not (<= 64 remaining_bits1))
  (= remaining_bits8 (mk_int__ref remaining_bits1))))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= y8 (mk_t__ref y1))))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= x8 (mk_t__ref x1))))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= a8 (mk_map__ref1 a))))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= i17 i2)))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= lane17 lane1)))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= offset9 offset1)))

;; H
  (assert
  (=> (not (<= 64 remaining_bits1)) (= remaining_bits9 remaining_bits1)))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= y9 y1)))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= x9 x1)))

;; H
  (assert (=> (not (<= 64 remaining_bits1)) (= a9 a1)))

;; H
  (assert (< 0 (int__content remaining_bits8)))

;; H
  (assert (= result30 (mk_t__ref1 word)))

;; H
  (assert (= word1 ((_ int2bv 64) 0)))

;; H
  (assert true)

;; H
  (assert
  (and (= o106 (+ (int__content remaining_bits8) 7)) (in_range1
  (+ (int__content remaining_bits8) 7))))

;; H
  (assert (= o107 (div1 o106 8)))

;; H
  (assert (and (= o108 o107) (in_range2 o107)))

;; H
  (assert (= result31 (mk_int__ref remaining_bytes)))

;; H
  (assert (= remaining_bytes1 o108))

;; H
  (assert (in_range2 remaining_bytes1))

;; H
  (assert (= (- remaining_bytes1 1) r64s))

;; H
  (assert (in_range1 r64s))

;; H
  (assert (= result32 (mk_int__ref i1)))

;; H
  (assert (= i18 0))

;; H
  (assert (<= 0 i18))

;; H
  (assert (<= i18 r64s))

;; H
  (assert (and (<= 0 i19) (<= i19 r64s)))

(assert
;; WP_parameter_def
 ;; File "keccak-keccakf-permutation.adb", line 30, characters 0-0
  (not (in_range1 (* i19 8))))
(check-sat)
(exit)
