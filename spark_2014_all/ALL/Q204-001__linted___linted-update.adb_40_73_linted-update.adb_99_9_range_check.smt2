;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort storage_offset 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                    (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (storage_offset storage_offset) Bool)

(declare-const dummy storage_offset)

(declare-datatypes ()
((storage_offset__ref
 (mk_storage_offset__ref (storage_offset__content storage_offset)))))
(define-fun storage_offset__ref___projection ((a storage_offset__ref)) storage_offset
  (storage_offset__content a))

(declare-sort storage_element 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (storage_element storage_element) Bool)

(declare-const dummy1 storage_element)

(declare-datatypes ()
((storage_element__ref
 (mk_storage_element__ref (storage_element__content storage_element)))))
(define-fun storage_element__ref___projection ((a storage_element__ref)) storage_element
  (storage_element__content a))

(declare-fun to_rep (storage_element) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) storage_element)

;; inversion_axiom
  (assert
  (forall ((x storage_element))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x storage_element)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x storage_element)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int storage_element))))))
(declare-fun slide ((Array Int storage_element) Int
  Int) (Array Int storage_element))

;; slide_eq
  (assert
  (forall ((a (Array Int storage_element)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int storage_element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int storage_element) Int Int
  (Array Int storage_element) Int Int) (Array Int storage_element))

;; concat_def
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (storage_element Int) (Array Int storage_element))

;; singleton_def
  (assert
  (forall ((v storage_element))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int storage_element)) (a__first Int)
  (a__last Int) (b (Array Int storage_element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int storage_element) Int Int
  (Array Int storage_element) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort tstorage_offsetB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tstorage_offsetB tstorage_offsetB) Bool)

(declare-const dummy2 tstorage_offsetB)

(declare-datatypes ()
((tstorage_offsetB__ref
 (mk_tstorage_offsetB__ref (tstorage_offsetB__content tstorage_offsetB)))))
(define-fun tstorage_offsetB__ref___projection ((a tstorage_offsetB__ref)) tstorage_offsetB
  (tstorage_offsetB__content a))

(declare-fun to_rep1 (tstorage_offsetB) Int)

(declare-fun of_rep1 (Int) tstorage_offsetB)

;; inversion_axiom
  (assert
  (forall ((x tstorage_offsetB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tstorage_offsetB)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) tstorage_offsetB)

(declare-fun last (t) tstorage_offsetB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range low) (in_range high))))))

(declare-datatypes ()
((us_t (mk___t (elts (Array Int storage_element))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int storage_element) (elts a))

(define-fun of_array ((a (Array Int storage_element)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int storage_element)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int storage_element)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int storage_element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int storage_element))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int storage_element)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int storage_element))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((storage_array__ref (mk_storage_array__ref (storage_array__content us_t)))))
(define-fun storage_array__ref___projection ((a storage_array__ref)) us_t
  (storage_array__content a))

(declare-sort tintB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (tintB tintB) Bool)

(declare-const dummy4 tintB)

(declare-datatypes () ((tintB__ref (mk_tintB__ref (tintB__content tintB)))))
(define-fun tintB__ref___projection ((a tintB__ref)) tintB (tintB__content a))

(declare-sort int__ 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (int__ int__) Bool)

(declare-const dummy5 int__)

(declare-datatypes () ((int____ref (mk_int____ref (int____content int__)))))
(define-fun int____ref___projection ((a int____ref)) int__ (int____content a))

(define-fun dynamic_invariant ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_267)))

(declare-fun to_rep2 (int__) Int)

(declare-fun of_rep2 (Int) int__)

;; inversion_axiom
  (assert
  (forall ((x int__))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x int__)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort nat 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 32))

(declare-fun user_eq6 (nat nat) Bool)

(declare-const dummy6 nat)

(declare-datatypes () ((nat__ref (mk_nat__ref (nat__content nat)))))
(define-fun nat__ref___projection ((a nat__ref)) nat (nat__content a))

(define-fun dynamic_invariant1 ((temp___expr_273 (_ BitVec 32))
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)) Bool true)

(declare-fun to_rep3 (nat) (_ BitVec 32))

(declare-fun of_rep3 ((_ BitVec 32)) nat)

;; inversion_axiom
  (assert
  (forall ((x nat)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int4 ((x nat)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x nat)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__linted__update__packet__x_position int__)(rec__linted__update__packet__y_position int__)(rec__linted__update__packet__z_position int__)(rec__linted__update__packet__mx_position int__)(rec__linted__update__packet__my_position int__)(rec__linted__update__packet__mz_position int__)(rec__linted__update__packet__z_rotation nat)(rec__linted__update__packet__x_rotation nat)))))
(define-fun us_split_fields_X_Position__projection ((a us_split_fields)) int__
  (rec__linted__update__packet__x_position a))

(define-fun us_split_fields_Y_Position__projection ((a us_split_fields)) int__
  (rec__linted__update__packet__y_position a))

(define-fun us_split_fields_Z_Position__projection ((a us_split_fields)) int__
  (rec__linted__update__packet__z_position a))

(define-fun us_split_fields_MX_Position__projection ((a us_split_fields)) int__
  (rec__linted__update__packet__mx_position a))

(define-fun us_split_fields_MY_Position__projection ((a us_split_fields)) int__
  (rec__linted__update__packet__my_position a))

(define-fun us_split_fields_MZ_Position__projection ((a us_split_fields)) int__
  (rec__linted__update__packet__mz_position a))

(define-fun us_split_fields_Z_Rotation__projection ((a us_split_fields)) nat
  (rec__linted__update__packet__z_rotation a))

(define-fun us_split_fields_X_Rotation__projection ((a us_split_fields)) nat
  (rec__linted__update__packet__x_rotation a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep2
                           (rec__linted__update__packet__x_position
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__linted__update__packet__x_position
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__linted__update__packet__y_position
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__linted__update__packet__y_position
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__linted__update__packet__z_position
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__linted__update__packet__z_position
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__linted__update__packet__mx_position
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__linted__update__packet__mx_position
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__linted__update__packet__my_position
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__linted__update__packet__my_position
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__linted__update__packet__mz_position
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__linted__update__packet__mz_position
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__linted__update__packet__z_rotation
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__linted__update__packet__z_rotation
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__linted__update__packet__x_rotation
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__linted__update__packet__x_rotation
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const linted__update__packet__x_position__first__bit Int)

(declare-const linted__update__packet__x_position__last__bit Int)

(declare-const linted__update__packet__x_position__position Int)

;; linted__update__packet__x_position__first__bit_axiom
  (assert (<= 0 linted__update__packet__x_position__first__bit))

;; linted__update__packet__x_position__last__bit_axiom
  (assert
  (< linted__update__packet__x_position__first__bit linted__update__packet__x_position__last__bit))

;; linted__update__packet__x_position__position_axiom
  (assert (<= 0 linted__update__packet__x_position__position))

(declare-const linted__update__packet__y_position__first__bit Int)

(declare-const linted__update__packet__y_position__last__bit Int)

(declare-const linted__update__packet__y_position__position Int)

;; linted__update__packet__y_position__first__bit_axiom
  (assert (<= 0 linted__update__packet__y_position__first__bit))

;; linted__update__packet__y_position__last__bit_axiom
  (assert
  (< linted__update__packet__y_position__first__bit linted__update__packet__y_position__last__bit))

;; linted__update__packet__y_position__position_axiom
  (assert (<= 0 linted__update__packet__y_position__position))

(declare-const linted__update__packet__z_position__first__bit Int)

(declare-const linted__update__packet__z_position__last__bit Int)

(declare-const linted__update__packet__z_position__position Int)

;; linted__update__packet__z_position__first__bit_axiom
  (assert (<= 0 linted__update__packet__z_position__first__bit))

;; linted__update__packet__z_position__last__bit_axiom
  (assert
  (< linted__update__packet__z_position__first__bit linted__update__packet__z_position__last__bit))

;; linted__update__packet__z_position__position_axiom
  (assert (<= 0 linted__update__packet__z_position__position))

(declare-const linted__update__packet__mx_position__first__bit Int)

(declare-const linted__update__packet__mx_position__last__bit Int)

(declare-const linted__update__packet__mx_position__position Int)

;; linted__update__packet__mx_position__first__bit_axiom
  (assert (<= 0 linted__update__packet__mx_position__first__bit))

;; linted__update__packet__mx_position__last__bit_axiom
  (assert
  (< linted__update__packet__mx_position__first__bit linted__update__packet__mx_position__last__bit))

;; linted__update__packet__mx_position__position_axiom
  (assert (<= 0 linted__update__packet__mx_position__position))

(declare-const linted__update__packet__my_position__first__bit Int)

(declare-const linted__update__packet__my_position__last__bit Int)

(declare-const linted__update__packet__my_position__position Int)

;; linted__update__packet__my_position__first__bit_axiom
  (assert (<= 0 linted__update__packet__my_position__first__bit))

;; linted__update__packet__my_position__last__bit_axiom
  (assert
  (< linted__update__packet__my_position__first__bit linted__update__packet__my_position__last__bit))

;; linted__update__packet__my_position__position_axiom
  (assert (<= 0 linted__update__packet__my_position__position))

(declare-const linted__update__packet__mz_position__first__bit Int)

(declare-const linted__update__packet__mz_position__last__bit Int)

(declare-const linted__update__packet__mz_position__position Int)

;; linted__update__packet__mz_position__first__bit_axiom
  (assert (<= 0 linted__update__packet__mz_position__first__bit))

;; linted__update__packet__mz_position__last__bit_axiom
  (assert
  (< linted__update__packet__mz_position__first__bit linted__update__packet__mz_position__last__bit))

;; linted__update__packet__mz_position__position_axiom
  (assert (<= 0 linted__update__packet__mz_position__position))

(declare-const linted__update__packet__z_rotation__first__bit Int)

(declare-const linted__update__packet__z_rotation__last__bit Int)

(declare-const linted__update__packet__z_rotation__position Int)

;; linted__update__packet__z_rotation__first__bit_axiom
  (assert (<= 0 linted__update__packet__z_rotation__first__bit))

;; linted__update__packet__z_rotation__last__bit_axiom
  (assert
  (< linted__update__packet__z_rotation__first__bit linted__update__packet__z_rotation__last__bit))

;; linted__update__packet__z_rotation__position_axiom
  (assert (<= 0 linted__update__packet__z_rotation__position))

(declare-const linted__update__packet__x_rotation__first__bit Int)

(declare-const linted__update__packet__x_rotation__last__bit Int)

(declare-const linted__update__packet__x_rotation__position Int)

;; linted__update__packet__x_rotation__first__bit_axiom
  (assert (<= 0 linted__update__packet__x_rotation__first__bit))

;; linted__update__packet__x_rotation__last__bit_axiom
  (assert
  (< linted__update__packet__x_rotation__first__bit linted__update__packet__x_rotation__last__bit))

;; linted__update__packet__x_rotation__position_axiom
  (assert (<= 0 linted__update__packet__x_rotation__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ()
((packet__ref (mk_packet__ref (packet__content us_rep)))))
(define-fun packet__ref___projection ((a packet__ref)) us_rep (packet__content
                                                              a))

(define-fun default_initial_assumption ((temp___expr_280 us_rep)
  (temp___skip_top_level_281 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (and
                                         (and
                                         (and
                                         (= (to_rep2
                                            (rec__linted__update__packet__x_position
                                            (us_split_fields1
                                            temp___expr_280))) 0)
                                         (= (to_rep2
                                            (rec__linted__update__packet__y_position
                                            (us_split_fields1
                                            temp___expr_280))) 0))
                                         (= (to_rep2
                                            (rec__linted__update__packet__z_position
                                            (us_split_fields1
                                            temp___expr_280))) 0))
                                         (= (to_rep2
                                            (rec__linted__update__packet__mx_position
                                            (us_split_fields1
                                            temp___expr_280))) 0))
                                         (= (to_rep2
                                            (rec__linted__update__packet__my_position
                                            (us_split_fields1
                                            temp___expr_280))) 0))
                                         (= (to_rep2
                                            (rec__linted__update__packet__mz_position
                                            (us_split_fields1
                                            temp___expr_280))) 0))
                                         (= (to_rep3
                                            (rec__linted__update__packet__z_rotation
                                            (us_split_fields1
                                            temp___expr_280))) ((_ int2bv 32) 0)))
                                         (= (to_rep3
                                            (rec__linted__update__packet__x_rotation
                                            (us_split_fields1
                                            temp___expr_280))) ((_ int2bv 32) 0))))

(declare-sort tstorageP1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 32)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (tstorageP1 tstorageP1) Bool)

(declare-const dummy8 tstorageP1)

(declare-datatypes ()
((tstorageP1__ref (mk_tstorageP1__ref (tstorageP1__content tstorageP1)))))
(define-fun tstorageP1__ref___projection ((a tstorageP1__ref)) tstorageP1
  (tstorageP1__content a))

(declare-const u us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort ttupleP1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (ttupleP1 ttupleP1) Bool)

(declare-const dummy9 ttupleP1)

(declare-datatypes ()
((ttupleP1__ref (mk_ttupleP1__ref (ttupleP1__content ttupleP1)))))
(define-fun ttupleP1__ref___projection ((a ttupleP1__ref)) ttupleP1 (ttupleP1__content
                                                                    a))

(declare-const c206b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c210b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c216b Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const c220b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c226b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const c230b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const c236b Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const c240b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const c246b Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const c250b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const c256b Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const c260b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const c266b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const c272b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-fun temp___302 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___304 (_ BitVec 8)) (temp___305 (_ BitVec 8))
  (temp___306 (_ BitVec 8)) (temp___307 (_ BitVec 8)))
  (let ((temp___303 (temp___302 temp___304 temp___305 temp___306 temp___307)))
  (and
  (and
  (and (= (select temp___303 1) (of_rep temp___304))
  (= (select temp___303 2) (of_rep temp___305)))
  (= (select temp___303 3) (of_rep temp___306)))
  (= (select temp___303 4) (of_rep temp___307))))))

(declare-fun temp___309 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___311 (_ BitVec 8)) (temp___312 (_ BitVec 8))
  (temp___313 (_ BitVec 8)) (temp___314 (_ BitVec 8)))
  (let ((temp___310 (temp___309 temp___311 temp___312 temp___313 temp___314)))
  (and
  (and
  (and (= (select temp___310 1) (of_rep temp___311))
  (= (select temp___310 2) (of_rep temp___312)))
  (= (select temp___310 3) (of_rep temp___313)))
  (= (select temp___310 4) (of_rep temp___314))))))

(declare-fun temp___318 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___320 (_ BitVec 8)) (temp___321 (_ BitVec 8))
  (temp___322 (_ BitVec 8)) (temp___323 (_ BitVec 8)))
  (let ((temp___319 (temp___318 temp___320 temp___321 temp___322 temp___323)))
  (and
  (and
  (and (= (select temp___319 1) (of_rep temp___320))
  (= (select temp___319 2) (of_rep temp___321)))
  (= (select temp___319 3) (of_rep temp___322)))
  (= (select temp___319 4) (of_rep temp___323))))))

(declare-fun temp___327 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___329 (_ BitVec 8)) (temp___330 (_ BitVec 8))
  (temp___331 (_ BitVec 8)) (temp___332 (_ BitVec 8)))
  (let ((temp___328 (temp___327 temp___329 temp___330 temp___331 temp___332)))
  (and
  (and
  (and (= (select temp___328 1) (of_rep temp___329))
  (= (select temp___328 2) (of_rep temp___330)))
  (= (select temp___328 3) (of_rep temp___331)))
  (= (select temp___328 4) (of_rep temp___332))))))

(declare-fun temp___336 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___338 (_ BitVec 8)) (temp___339 (_ BitVec 8))
  (temp___340 (_ BitVec 8)) (temp___341 (_ BitVec 8)))
  (let ((temp___337 (temp___336 temp___338 temp___339 temp___340 temp___341)))
  (and
  (and
  (and (= (select temp___337 1) (of_rep temp___338))
  (= (select temp___337 2) (of_rep temp___339)))
  (= (select temp___337 3) (of_rep temp___340)))
  (= (select temp___337 4) (of_rep temp___341))))))

(declare-fun temp___345 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___347 (_ BitVec 8)) (temp___348 (_ BitVec 8))
  (temp___349 (_ BitVec 8)) (temp___350 (_ BitVec 8)))
  (let ((temp___346 (temp___345 temp___347 temp___348 temp___349 temp___350)))
  (and
  (and
  (and (= (select temp___346 1) (of_rep temp___347))
  (= (select temp___346 2) (of_rep temp___348)))
  (= (select temp___346 3) (of_rep temp___349)))
  (= (select temp___346 4) (of_rep temp___350))))))

(declare-fun temp___354 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___356 (_ BitVec 8)) (temp___357 (_ BitVec 8))
  (temp___358 (_ BitVec 8)) (temp___359 (_ BitVec 8)))
  (let ((temp___355 (temp___354 temp___356 temp___357 temp___358 temp___359)))
  (and
  (and
  (and (= (select temp___355 1) (of_rep temp___356))
  (= (select temp___355 2) (of_rep temp___357)))
  (= (select temp___355 3) (of_rep temp___358)))
  (= (select temp___355 4) (of_rep temp___359))))))

(declare-fun temp___363 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) (Array Int storage_element))

;; def_axiom
  (assert
  (forall ((temp___365 (_ BitVec 8)) (temp___366 (_ BitVec 8))
  (temp___367 (_ BitVec 8)) (temp___368 (_ BitVec 8)))
  (let ((temp___364 (temp___363 temp___365 temp___366 temp___367 temp___368)))
  (and
  (and
  (and (= (select temp___364 1) (of_rep temp___365))
  (= (select temp___364 2) (of_rep temp___366)))
  (= (select temp___364 3) (of_rep temp___367)))
  (= (select temp___364 4) (of_rep temp___368))))))

(define-fun dynamic_invariant2 ((temp___expr_238 Int)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)) Bool (=>
                                      (or (= temp___is_init_235 true)
                                      (<= (- 9223372036854775808) 9223372036854775807))
                                      (in_range temp___expr_238)))

(define-fun dynamic_invariant3 ((temp___expr_250 (_ BitVec 8))
  (temp___is_init_247 Bool) (temp___skip_constant_248 Bool)
  (temp___do_toplevel_249 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_256 us_t)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)) Bool (=>
                                      (not (= temp___skip_constant_254 true))
                                      (dynamic_property
                                      (- 9223372036854775808)
                                      9223372036854775807
                                      (first1 temp___expr_256)
                                      (last1 temp___expr_256))))

(declare-const c207b (_ BitVec 32))

(declare-const y (_ BitVec 32))

(declare-const c217b (_ BitVec 32))

(declare-const y1 (_ BitVec 32))

(declare-const c227b (_ BitVec 32))

(declare-const y2 (_ BitVec 32))

(declare-const c237b (_ BitVec 32))

(declare-const y3 (_ BitVec 32))

(declare-const c247b (_ BitVec 32))

(declare-const y4 (_ BitVec 32))

(declare-const c257b (_ BitVec 32))

(declare-const y5 (_ BitVec 32))

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 (_ BitVec 32))

(declare-const o3 (_ BitVec 32))

(declare-const o4 Int)

(declare-const o5 (_ BitVec 32))

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 (_ BitVec 32))

(declare-const o9 (_ BitVec 32))

(declare-const o10 Int)

(declare-const o11 (_ BitVec 32))

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 (_ BitVec 32))

(declare-const o15 (_ BitVec 32))

(declare-const o16 Int)

(declare-const o17 (_ BitVec 32))

(declare-const o18 Int)

(declare-const o19 Int)

(declare-const o20 (_ BitVec 32))

(declare-const o21 (_ BitVec 32))

(declare-const o22 Int)

(declare-const o23 (_ BitVec 32))

(declare-const o24 Int)

(declare-const o25 Int)

(declare-const o26 (_ BitVec 32))

(declare-const o27 (_ BitVec 32))

(declare-const o28 Int)

(declare-const o29 (_ BitVec 32))

(declare-const o30 Int)

(declare-const o31 Int)

(declare-const o32 (_ BitVec 32))

(declare-const o33 (_ BitVec 32))

(declare-const o34 Int)

(declare-const o35 (_ BitVec 32))

(declare-const result (_ BitVec 32))

(declare-const y6 (_ BitVec 32))

(declare-const result1 t__ref1)

(declare-const y7 (_ BitVec 32))

(declare-const result2 t__ref1)

(declare-const c207b1 (_ BitVec 32))

(declare-const result3 t__ref1)

(declare-const y8 (_ BitVec 32))

(declare-const result4 t__ref1)

(declare-const y9 (_ BitVec 32))

(declare-const result5 t__ref1)

(declare-const c217b1 (_ BitVec 32))

(declare-const result6 t__ref1)

(declare-const y10 (_ BitVec 32))

(declare-const result7 t__ref1)

(declare-const y11 (_ BitVec 32))

(declare-const result8 t__ref1)

(declare-const c227b1 (_ BitVec 32))

(declare-const result9 t__ref1)

(declare-const y12 (_ BitVec 32))

(declare-const result10 t__ref1)

(declare-const y13 (_ BitVec 32))

(declare-const result11 t__ref1)

(declare-const c237b1 (_ BitVec 32))

(declare-const result12 t__ref1)

(declare-const y14 (_ BitVec 32))

(declare-const result13 t__ref1)

(declare-const y15 (_ BitVec 32))

(declare-const result14 t__ref1)

(declare-const c247b1 (_ BitVec 32))

(declare-const result15 t__ref1)

(declare-const y16 (_ BitVec 32))

(declare-const result16 t__ref1)

(declare-const y17 (_ BitVec 32))

(declare-const result17 t__ref1)

(declare-const c257b1 (_ BitVec 32))

(define-fun y18 () t__ref1 (mk_t__ref1 y5))

(define-fun y19 () t__ref1 (mk_t__ref1 y4))

(define-fun y20 () t__ref1 (mk_t__ref1 y3))

(define-fun y21 () t__ref1 (mk_t__ref1 y2))

(define-fun y22 () t__ref1 (mk_t__ref1 y1))

;; H
  (assert
  (= (to_rep2 (rec__linted__update__packet__x_position (us_split_fields1 u)))
  c206b))

;; H
  (assert (in_range3 c206b))

;; H
  (assert
  (=> (< c206b 0)
  (and (= o (- c206b (- 2147483648))) (in_range2 (- c206b (- 2147483648))))))

;; H
  (assert (=> (< c206b 0) (and (= o1 o) (uint_in_range1 o))))

;; H
  (assert (=> (< c206b 0) (= o2 ((_ int2bv 32) o1))))

;; H
  (assert (=> (< c206b 0) (= o3 (bvsub o2 ((_ int2bv 32) 2147483648)))))

;; H
  (assert (=> (< c206b 0) (= result y)))

;; H
  (assert (=> (< c206b 0) (= y6 o3)))

;; H
  (assert (=> (not (< c206b 0)) (and (= o4 c206b) (uint_in_range1 c206b))))

;; H
  (assert (=> (not (< c206b 0)) (= o5 ((_ int2bv 32) o4))))

;; H
  (assert (=> (not (< c206b 0)) (= result1 (mk_t__ref1 y))))

;; H
  (assert (=> (not (< c206b 0)) (= y7 o5)))

;; H
  (assert (=> (not (< c206b 0)) (= y6 y7)))

;; H
  (assert (= result2 (mk_t__ref1 c207b)))

;; H
  (assert (= c207b1 y6))

;; H
  (assert (= c207b1 c210b))

;; H
  (assert
  (= (to_rep2 (rec__linted__update__packet__y_position (us_split_fields1 u)))
  c216b))

;; H
  (assert (in_range3 c216b))

;; H
  (assert
  (=> (< c216b 0)
  (and (= o6 (- c216b (- 2147483648))) (in_range2 (- c216b (- 2147483648))))))

;; H
  (assert (=> (< c216b 0) (and (= o7 o6) (uint_in_range1 o6))))

;; H
  (assert (=> (< c216b 0) (= o8 ((_ int2bv 32) o7))))

;; H
  (assert (=> (< c216b 0) (= o9 (bvsub o8 ((_ int2bv 32) 2147483648)))))

;; H
  (assert (=> (< c216b 0) (= result3 y22)))

;; H
  (assert (=> (< c216b 0) (= y8 o9)))

;; H
  (assert (=> (not (< c216b 0)) (and (= o10 c216b) (uint_in_range1 c216b))))

;; H
  (assert (=> (not (< c216b 0)) (= o11 ((_ int2bv 32) o10))))

;; H
  (assert (=> (not (< c216b 0)) (= result4 y22)))

;; H
  (assert (=> (not (< c216b 0)) (= y9 o11)))

;; H
  (assert (=> (not (< c216b 0)) (= y8 y9)))

;; H
  (assert (= result5 (mk_t__ref1 c217b)))

;; H
  (assert (= c217b1 y8))

;; H
  (assert (= c217b1 c220b))

;; H
  (assert
  (= (to_rep2 (rec__linted__update__packet__z_position (us_split_fields1 u)))
  c226b))

;; H
  (assert (in_range3 c226b))

;; H
  (assert
  (=> (< c226b 0)
  (and (= o12 (- c226b (- 2147483648))) (in_range2 (- c226b (- 2147483648))))))

;; H
  (assert (=> (< c226b 0) (and (= o13 o12) (uint_in_range1 o12))))

;; H
  (assert (=> (< c226b 0) (= o14 ((_ int2bv 32) o13))))

;; H
  (assert (=> (< c226b 0) (= o15 (bvsub o14 ((_ int2bv 32) 2147483648)))))

;; H
  (assert (=> (< c226b 0) (= result6 y21)))

;; H
  (assert (=> (< c226b 0) (= y10 o15)))

;; H
  (assert (=> (not (< c226b 0)) (and (= o16 c226b) (uint_in_range1 c226b))))

;; H
  (assert (=> (not (< c226b 0)) (= o17 ((_ int2bv 32) o16))))

;; H
  (assert (=> (not (< c226b 0)) (= result7 y21)))

;; H
  (assert (=> (not (< c226b 0)) (= y11 o17)))

;; H
  (assert (=> (not (< c226b 0)) (= y10 y11)))

;; H
  (assert (= result8 (mk_t__ref1 c227b)))

;; H
  (assert (= c227b1 y10))

;; H
  (assert (= c227b1 c230b))

;; H
  (assert
  (= (to_rep2
     (rec__linted__update__packet__mx_position (us_split_fields1 u)))
  c236b))

;; H
  (assert (in_range3 c236b))

;; H
  (assert
  (=> (< c236b 0)
  (and (= o18 (- c236b (- 2147483648))) (in_range2 (- c236b (- 2147483648))))))

;; H
  (assert (=> (< c236b 0) (and (= o19 o18) (uint_in_range1 o18))))

;; H
  (assert (=> (< c236b 0) (= o20 ((_ int2bv 32) o19))))

;; H
  (assert (=> (< c236b 0) (= o21 (bvsub o20 ((_ int2bv 32) 2147483648)))))

;; H
  (assert (=> (< c236b 0) (= result9 y20)))

;; H
  (assert (=> (< c236b 0) (= y12 o21)))

;; H
  (assert (=> (not (< c236b 0)) (and (= o22 c236b) (uint_in_range1 c236b))))

;; H
  (assert (=> (not (< c236b 0)) (= o23 ((_ int2bv 32) o22))))

;; H
  (assert (=> (not (< c236b 0)) (= result10 y20)))

;; H
  (assert (=> (not (< c236b 0)) (= y13 o23)))

;; H
  (assert (=> (not (< c236b 0)) (= y12 y13)))

;; H
  (assert (= result11 (mk_t__ref1 c237b)))

;; H
  (assert (= c237b1 y12))

;; H
  (assert (= c237b1 c240b))

;; H
  (assert
  (= (to_rep2
     (rec__linted__update__packet__my_position (us_split_fields1 u)))
  c246b))

;; H
  (assert (in_range3 c246b))

;; H
  (assert
  (=> (< c246b 0)
  (and (= o24 (- c246b (- 2147483648))) (in_range2 (- c246b (- 2147483648))))))

;; H
  (assert (=> (< c246b 0) (and (= o25 o24) (uint_in_range1 o24))))

;; H
  (assert (=> (< c246b 0) (= o26 ((_ int2bv 32) o25))))

;; H
  (assert (=> (< c246b 0) (= o27 (bvsub o26 ((_ int2bv 32) 2147483648)))))

;; H
  (assert (=> (< c246b 0) (= result12 y19)))

;; H
  (assert (=> (< c246b 0) (= y14 o27)))

;; H
  (assert (=> (not (< c246b 0)) (and (= o28 c246b) (uint_in_range1 c246b))))

;; H
  (assert (=> (not (< c246b 0)) (= o29 ((_ int2bv 32) o28))))

;; H
  (assert (=> (not (< c246b 0)) (= result13 y19)))

;; H
  (assert (=> (not (< c246b 0)) (= y15 o29)))

;; H
  (assert (=> (not (< c246b 0)) (= y14 y15)))

;; H
  (assert (= result14 (mk_t__ref1 c247b)))

;; H
  (assert (= c247b1 y14))

;; H
  (assert (= c247b1 c250b))

;; H
  (assert
  (= (to_rep2
     (rec__linted__update__packet__mz_position (us_split_fields1 u)))
  c256b))

;; H
  (assert (in_range3 c256b))

;; H
  (assert
  (=> (< c256b 0)
  (and (= o30 (- c256b (- 2147483648))) (in_range2 (- c256b (- 2147483648))))))

;; H
  (assert (=> (< c256b 0) (and (= o31 o30) (uint_in_range1 o30))))

;; H
  (assert (=> (< c256b 0) (= o32 ((_ int2bv 32) o31))))

;; H
  (assert (=> (< c256b 0) (= o33 (bvsub o32 ((_ int2bv 32) 2147483648)))))

;; H
  (assert (=> (< c256b 0) (= result15 y18)))

;; H
  (assert (=> (< c256b 0) (= y16 o33)))

;; H
  (assert (=> (not (< c256b 0)) (and (= o34 c256b) (uint_in_range1 c256b))))

;; H
  (assert (=> (not (< c256b 0)) (= o35 ((_ int2bv 32) o34))))

;; H
  (assert (=> (not (< c256b 0)) (= result16 y18)))

;; H
  (assert (=> (not (< c256b 0)) (= y17 o35)))

;; H
  (assert (=> (not (< c256b 0)) (= y16 y17)))

;; H
  (assert (= result17 (mk_t__ref1 c257b)))

;; H
  (assert (= c257b1 y16))

;; H
  (assert (= c257b1 c260b))

;; H
  (assert
  (= (to_rep3 (rec__linted__update__packet__z_rotation (us_split_fields1 u)))
  c266b))

;; H
  (assert
  (= (to_rep3 (rec__linted__update__packet__x_rotation (us_split_fields1 u)))
  c272b))

(assert
;; WP_parameter_def
 ;; File "linted-update.ads", line 41, characters 0-0
  (not
  (bvule ((_ zero_extend 24) ((_ int2bv 8) 0)) (bvand (bvlshr c260b ((_ int2bv 32) 8)) ((_ int2bv 32) 255)))))
(check-sat)
(exit)
