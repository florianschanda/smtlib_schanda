;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ((word32__ref 0))
(((mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(declare-fun to_rep (word32) (_ BitVec 32))

(declare-fun of_rep ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x word32)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep (select a temp___idx_134)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep (select a temp___idx_134)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((math_int__ref 0))
(((mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun olt (us_rep us_rep) Bool)

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; olt__post_axiom
  (assert true)

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (big_int_range big_int_range) Bool)

(declare-const dummy4 big_int_range)

(declare-datatypes ((big_int_range__ref 0))
(((mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int word32)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ((big_int__ref 0))
(((mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun num_of_big_int (us_t Int Int) us_rep)

(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)

;; num_of_big_int__post_axiom
  (assert true)

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const a_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const b us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const b_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t41b__ref 0))
(((mk_t41b__ref (t41b__content integer)))))
(define-fun t41b__ref___projection ((a1 t41b__ref)) integer (t41b__content
                                                            a1))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

(define-fun dynamic_invariant4 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-const j Int)

(declare-const result__ Bool)

(declare-const i Int)

(declare-const lsc__bignum__less__result Bool)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Bool)

(declare-const temp___598 Int)

(declare-const temp___597 Bool)

(declare-const temp___596 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 Int)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Int)

(declare-const o18 Int)

(declare-const o19 us_rep)

(declare-const o20 Int)

(declare-const o21 Int)

(declare-const o22 Int)

(declare-const o23 Int)

(declare-const o24 Int)

(declare-const o25 word32)

(declare-const o26 Int)

(declare-const o27 word32)

(declare-const o28 (_ BitVec 32))

(declare-const o29 (_ BitVec 32))

(declare-const o30 Int)

(declare-const o31 word32)

(declare-const o32 Int)

(declare-const o33 word32)

(declare-const o34 (_ BitVec 32))

(declare-const o35 (_ BitVec 32))

(declare-const o36 Int)

(declare-const o37 Int)

(declare-const o38 Int)

(declare-const o39 Int)

(declare-const o40 Int)

(declare-const o41 Int)

(declare-const o42 Int)

(declare-const o43 Int)

(declare-const o44 us_rep)

(declare-const j1 Int)

(declare-const result Bool)

(declare-const result__1 Bool)

(declare-const result1 Int)

(declare-const i1 Int)

(declare-const j2 Int)

(declare-const result__2 Bool)

(declare-const i2 Int)

(declare-const result2 Int)

(declare-const j3 Int)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result__3 Bool)

(declare-const result5 Bool)

(declare-const result6 Int)

(declare-const i3 Int)

(declare-const result__4 Bool)

(declare-const result__5 Bool)

(declare-const j4 Int)

(declare-const result__6 Bool)

(declare-const i4 Int)

(declare-const j5 Int)

(declare-const result__7 Bool)

(declare-const i5 Int)

(declare-const j6 Int)

(declare-const result__8 Bool)

(declare-const i6 Int)

(declare-const j7 Int)

(declare-const result__9 Bool)

(declare-const i7 Int)

(declare-const j8 Int)

(declare-const result__10 Bool)

(declare-const i8 Int)

(declare-const j9 Int)

(declare-const result__11 Bool)

(declare-const i9 Int)

(declare-const result7 Bool)

(declare-const lsc__bignum__less__result1 Bool)

(declare-const lsc__bignum__less__result2 Bool)

(declare-const lsc__bignum__less__result3 Bool)

(declare-const j10 int__ref)

(declare-const result__12 bool__ref)

(declare-const i10 int__ref)

(declare-const lsc__bignum__less__result4 bool__ref)

(declare-const j11 Int)

(declare-const result__13 Bool)

(declare-const i11 Int)

(declare-const lsc__bignum__less__result5 Bool)

(define-fun lsc__bignum__less__result6 () bool__ref (mk_bool__ref
                                                    lsc__bignum__less__result2))

(define-fun result8 () bool__ref (mk_bool__ref result7))

(define-fun i12 () int__ref (mk_int__ref i8))

(define-fun result__14 () bool__ref (mk_bool__ref result__10))

(define-fun j12 () int__ref (mk_int__ref j8))

(define-fun i13 () int__ref (mk_int__ref i6))

(define-fun result__15 () bool__ref (mk_bool__ref result__8))

(define-fun j13 () int__ref (mk_int__ref j6))

(define-fun i14 () int__ref (mk_int__ref i4))

(define-fun result__16 () bool__ref (mk_bool__ref result__6))

(define-fun j14 () int__ref (mk_int__ref j4))

(define-fun result__17 () bool__ref (mk_bool__ref result__4))

(define-fun result9 () int__ref (mk_int__ref result1))

(define-fun result10 () bool__ref (mk_bool__ref result))

(define-fun lsc__bignum__less__result7 () bool__ref (mk_bool__ref
                                                    lsc__bignum__less__result))

(define-fun i15 () int__ref (mk_int__ref i))

(define-fun result__18 () bool__ref (mk_bool__ref result__))

(define-fun j15 () int__ref (mk_int__ref j))

;; H
  (assert (dynamic_invariant1 a true false true))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_invariant1 b true false true))

;; H
  (assert (in_range2 b_first))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (<= (to_rep1 (first (rt a))) a_first)
  (<= a_first (to_rep1 (last (rt a)))))
  (and (<= (to_rep1 (first (rt a))) a_last)
  (<= a_last (to_rep1 (last (rt a))))))
  (and (<= (to_rep1 (first (rt b))) b_first)
  (<= b_first (to_rep1 (last (rt b))))))
  (and (<= (to_rep1 (first (rt b))) (+ b_first (- a_last a_first)))
  (<= (+ b_first (- a_last a_first)) (to_rep1 (last (rt b))))))
  (<= a_first a_last)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 j)))

;; H
  (assert (= result10 result__18))

;; H
  (assert (= result__1 (of_int 0)))

;; H
  (assert (= result9 i15))

;; H
  (assert (= i1 a_last))

;; H
  (assert
  (=> (and (<= a_first i1) (<= i1 a_last))
  (and
  (and (= temp___598 i1)
  (and (= temp___597 result__1)
  (and (= temp___596 j)
  (and
  (and
  (= (oeq (num_of_big_int a (+ i2 1) (- a_last i2))
     (num_of_big_int b (+ (+ b_first (- i2 a_first)) 1) (- a_last i2))) true)
  (not (= result__2 true)))
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range2 j2))
  (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2)))
  (and (<= a_first i2) (<= i2 a_last)))
  (and
  (and
  (and
  (and
  (and (and (= o20 (- i2 a_first)) (in_range1 (- i2 a_first)))
  (= o21 (+ b_first o20))) (and (= o22 o21) (in_range1 o21)))
  (and (= o23 o22) (in_range2 o22))) (and (= j2 result2) (= j3 o23)))
  (or
  (and (and (= result__3 result__4) (= result__5 result__3))
  (and
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt b))) j3) (<= j3 (to_rep1 (last (rt b)))))
  (= o26 j3)) (= o27 (select (elts b) o26))) (= o28 (to_rep o27)))
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt a))) i2) (<= i2 (to_rep1 (last (rt a)))))
  (= o24 i2)) (= o25 (select (elts a) o24))) (= o29 (to_rep o25)))
  (= result3 (ite (bvult o29 o28) true false))))
  (and (= result3 true) (and (= result__2 result4) (= result__3 (of_int 1))))))
  (and
  (and
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt b))) j3) (<= j3 (to_rep1 (last (rt b)))))
  (= o26 j3)) (= o27 (select (elts b) o26))) (= o28 (to_rep o27)))
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt a))) i2) (<= i2 (to_rep1 (last (rt a)))))
  (= o24 i2)) (= o25 (select (elts a) o24))) (= o29 (to_rep o25)))
  (= result3 (ite (bvult o29 o28) true false))))
  (and (not (= result3 true)) (= result__3 result__2)))
  (and (and (= result__3 result__4) (= result__5 result__3))
  (or
  (and
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt b))) j3) (<= j3 (to_rep1 (last (rt b)))))
  (= o32 j3)) (= o33 (select (elts b) o32))) (= o34 (to_rep o33)))
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt a))) i2) (<= i2 (to_rep1 (last (rt a)))))
  (= o30 i2)) (= o31 (select (elts a) o30))) (= o35 (to_rep o31)))
  (= result5 (ite (bvugt o35 o34) true false)))) (= result5 true))
  (and
  (and
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt b))) j3) (<= j3 (to_rep1 (last (rt b)))))
  (= o32 j3)) (= o33 (select (elts b) o32))) (= o34 (to_rep o33)))
  (and
  (and
  (and
  (and (and (<= (to_rep1 (first (rt a))) i2) (<= i2 (to_rep1 (last (rt a)))))
  (= o30 i2)) (= o31 (select (elts a) o30))) (= o35 (to_rep o31)))
  (= result5 (ite (bvugt o35 o34) true false)))) (not (= result5 true)))
  (= i2 a_first))))))))))))
  (and (and (= i2 i6) (and (= result__15 result__17) (= j3 j6)))
  (and (= i7 i2) (and (= result__9 result__5) (= j7 j3)))))))

;; H
  (assert (=> (and (<= a_first i1) (<= i1 a_last)) (= i12 i13)))

;; H
  (assert
  (=> (and (<= a_first i1) (<= i1 a_last)) (= result__14 result__15)))

;; H
  (assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j12 j13)))

;; H
  (assert (=> (and (<= a_first i1) (<= i1 a_last)) (= i9 i7)))

;; H
  (assert (=> (and (<= a_first i1) (<= i1 a_last)) (= result__11 result__9)))

;; H
  (assert (=> (and (<= a_first i1) (<= i1 a_last)) (= j9 j7)))

;; H
  (assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= i1 i8)))

;; H
  (assert
  (=> (not (and (<= a_first i1) (<= i1 a_last))) (= result__1 result__10)))

;; H
  (assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= j12 j15)))

;; H
  (assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= i9 i1)))

;; H
  (assert
  (=> (not (and (<= a_first i1) (<= i1 a_last))) (= result__11 result__1)))

;; H
  (assert (=> (not (and (<= a_first i1) (<= i1 a_last))) (= j9 j1)))

;; H
  (assert (= lsc__bignum__less__result1 lsc__bignum__less__result2))

;; H
  (assert (= lsc__bignum__less__result3 lsc__bignum__less__result1))

;; H
  (assert (= result8 lsc__bignum__less__result7))

;; H
  (assert (= lsc__bignum__less__result1 result__10))

;; H
  (assert (= lsc__bignum__less__result4 lsc__bignum__less__result6))

;; H
  (assert (= i10 i12))

;; H
  (assert (= result__12 result__14))

;; H
  (assert (= j10 j12))

;; H
  (assert (= lsc__bignum__less__result5 lsc__bignum__less__result3))

;; H
  (assert (= i11 i9))

;; H
  (assert (= result__13 result__11))

;; H
  (assert (= j11 j9))

;; H
  (assert (and (= o40 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o41 (+ o40 1)))

;; H
  (assert (and (= o42 o41) (in_range1 o41)))

;; H
  (assert (and (= o43 o42) (in_range2 o42)))

;; H
  (assert (= o44 (num_of_big_int b b_first o43)))

(assert
;; WP_parameter_def
 ;; File "lsc-bignum.ads", line 120, characters 0-0
  (not (in_range1 (- a_last a_first))))
(check-sat)
(exit)
