;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tarray_tD1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tarray_tD1 tarray_tD1) Bool)

(declare-fun dummy1 () tarray_tD1)

(declare-datatypes ()
((tarray_tD1__ref (mk_tarray_tD1__ref (tarray_tD1__content tarray_tD1)))))
(define-fun tarray_tD1__ref___projection ((a tarray_tD1__ref)) tarray_tD1 
  (tarray_tD1__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun r1b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun r2b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun a () (Array Int integer))

(declare-fun s () Int)

(declare-fun total () Int)

(declare-fun a_lb () Int)

(declare-fun a_ub () Int)

(declare-fun item () Int)

(declare-fun i () Int)

(declare-fun temp___181 () Int)

(declare-fun temp___180 () Int)

(declare-fun temp___179 () (Array Int integer))

(declare-fun o () Int)

(declare-fun o1 () integer)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun a1 () (Array Int integer))

(declare-fun item1 () Int)

(declare-fun result () Int)

(declare-fun a_lb1 () Int)

(declare-fun result1 () Int)

(declare-fun a_ub1 () Int)

(declare-fun result2 () Int)

(declare-fun total1 () Int)

(declare-fun result3 () Int)

(declare-fun i1 () Int)

(declare-fun total2 () Int)

(declare-fun item2 () Int)

(declare-fun i2 () Int)

(declare-fun a2 () (Array Int integer))

(declare-fun result4 () Int)

(declare-fun item3 () Int)

(declare-fun result5 () Int)

(declare-fun total3 () Int)

(declare-fun a3 () (Array Int integer))

(declare-fun total4 () Int)

(declare-fun item4 () Int)

(declare-fun i3 () Int)

(declare-fun a4 () (Array Int integer))

(declare-fun total5 () Int)

(declare-fun item5 () Int)

(declare-fun i4 () Int)

(declare-fun a5 () map__ref)

(declare-fun total6 () int__ref)

(declare-fun item6 () int__ref)

(declare-fun i5 () int__ref)

(declare-fun a6 () (Array Int integer))

(declare-fun total7 () Int)

(declare-fun item7 () Int)

(declare-fun i6 () Int)

(declare-fun result6 () int__ref)

(declare-fun s1 () Int)

(declare-fun a7 () map__ref)

(declare-fun s2 () int__ref)

(declare-fun total8 () int__ref)

(declare-fun a_lb2 () int__ref)

(declare-fun a_ub2 () int__ref)

(declare-fun item8 () int__ref)

(declare-fun i7 () int__ref)

(declare-fun a8 () (Array Int integer))

(declare-fun s3 () Int)

(declare-fun total9 () Int)

(declare-fun a_lb3 () Int)

(declare-fun a_ub3 () Int)

(declare-fun item9 () Int)

(declare-fun i8 () Int)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 s)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 total)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 a_lb)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 a_ub)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 item)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref a_lb)))

;; H
  (assert (= a_lb1 1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref a_ub)))

;; H
  (assert (= a_ub1 10))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref total)))

;; H
  (assert (= total1 0))

;; H
  (assert (= a_lb1 r1b))

;; H
  (assert (in_range1 r1b))

;; H
  (assert (= a_ub1 r2b))

;; H
  (assert (in_range1 r2b))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref i)))

;; H
  (assert (= i1 r1b))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= temp___181 item)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= temp___180 total1)))

;; H
  (assert
  (=> (and (<= r1b i1) (<= i1 r2b))
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 total2))
  (=> (<= (- 2147483648) 2147483647) (in_range1 item2)))
  (and (<= r1b i2) (<= i2 r2b)))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= temp___179 a2)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (and (<= 1 i2) (<= i2 10))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= o i2)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= o1 (select temp___179 o))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= o2 (to_rep o1))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item2 result4)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item3 o2)))

;; H
  (assert
  (=> (and (<= r1b i1) (<= i1 r2b))
  (and (= o3 (+ total2 item3)) (in_range1 (+ total2 item3)))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= result5 total2)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total3 o3)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i2 r2b)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i2 i3)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item3 item4)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total3 total4)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a2 a3)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i4 i2)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item5 item3)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total5 total3)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a4 a2)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i5 (mk_int__ref i3))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item6 (mk_int__ref item4))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total6 (mk_int__ref total4))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a5 (mk_map__ref a3))))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i6 i4)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item7 item5)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total7 total5)))

;; H
  (assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a6 a4)))

;; H
  (assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= i5 (mk_int__ref i1))))

;; H
  (assert
  (=> (not (and (<= r1b i1) (<= i1 r2b))) (= item6 (mk_int__ref item))))

;; H
  (assert
  (=> (not (and (<= r1b i1) (<= i1 r2b))) (= total6 (mk_int__ref total1))))

;; H
  (assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= a5 (mk_map__ref a))))

;; H
  (assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= item7 item1)))

;; H
  (assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= total7 total1)))

;; H
  (assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= a6 a1)))

;; H
  (assert (= result6 (mk_int__ref s)))

;; H
  (assert (= s1 (int__content total6)))

;; H
  (assert (= i7 i5))

;; H
  (assert (= item8 item6))

;; H
  (assert (= a_ub2 (mk_int__ref a_ub1)))

;; H
  (assert (= a_lb2 (mk_int__ref a_lb1)))

;; H
  (assert (= total8 total6))

;; H
  (assert (= s2 (mk_int__ref s1)))

;; H
  (assert (= a7 a5))

;; H
  (assert (= i8 i6))

;; H
  (assert (= item9 item7))

;; H
  (assert (= a_ub3 a_ub1))

;; H
  (assert (= a_lb3 a_lb1))

;; H
  (assert (= total9 total7))

;; H
  (assert (= s3 s1))

;; H
  (assert (= a8 a6))

(assert
;; WP_parameter_def
 ;; File "foo.ads", line 19, characters 0-0
  (not (<= (int__content s2) 100)))
(check-sat)
