(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields = { rec__private_type__root : us_main_type; rec__ext__ :
us_private
}

function us_split_fields_Root__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_type__root

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)].
  (((us_main_eq(((a).us_split_fields1).rec__private_type__root,
  ((b).us_split_fields1).rec__private_type__root) = true) -> (bool_eq(a,
  b) = true)) and
  ((not (us_main_eq(((a).us_split_fields1).rec__private_type__root,
  ((b).us_split_fields1).rec__private_type__root) = true)) -> (bool_eq(a,
  b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:us_main_type. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = { rec__private_type__root = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_main_type. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__private_type__root = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_main_type

logic dummy1 : us_private

logic dummy2 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy3 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic is_valid : us_rep -> bool

logic is_valid__function_guard : bool, us_rep -> prop

logic is_valid1 : int, us_rep -> bool

logic is_valid__function_guard1 : bool, int, us_rep -> prop

logic f : us_rep -> int

logic f__function_guard : int, us_rep -> prop

logic f1 : int, us_rep -> int

logic f__function_guard1 : int, int, us_rep -> prop

axiom private_type__root__compat_axiom :
  (forall r:us_main_type. forall r1:us_private. forall r2:int [f1(us_tag, {
  us_split_fields1 = { rec__private_type__root = r; rec__ext__ = r1 };
  attr__tag = r2 })]. (f({ us_split_fields1 = { rec__private_type__root = r;
  rec__ext__ = r1 }; attr__tag = r2 }) = f1(us_tag, { us_split_fields1 = {
  rec__private_type__root = r; rec__ext__ = r1 }; attr__tag = r2 })))

logic r : us_main_type

logic r1 : us_private

logic r2 : int

logic attr__ATTRIBUTE_ADDRESS : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

axiom private_type__root__compat_axiom1 :
  (forall r3:us_main_type. forall r4:us_private. forall r5:int
  [is_valid1(us_tag, { us_split_fields1 = { rec__private_type__root = r3;
  rec__ext__ = r4 }; attr__tag = r5 })]. (to_int(is_valid({
  us_split_fields1 = { rec__private_type__root = r3; rec__ext__ = r4 };
  attr__tag = r5 })) = to_int(is_valid1(us_tag, { us_split_fields1 = {
  rec__private_type__root = r3; rec__ext__ = r4 }; attr__tag = r5 }))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (is_valid({ us_split_fields1 = {
  rec__private_type__root = r; rec__ext__ = r1 }; attr__tag = r2 }) = true)
