;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__foo__r__x Bool)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) Bool
  (rec__foo__r__x a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (rec__foo__r__x (us_split_fields1 a)) (rec__foo__r__x
                                                                 (us_split_fields1
                                                                 b)))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const foo__r__x__first__bit Int)

(declare-const foo__r__x__last__bit Int)

(declare-const foo__r__x__position Int)

;; foo__r__x__first__bit_axiom
  (assert (<= 0 foo__r__x__first__bit))

;; foo__r__x__last__bit_axiom
  (assert (< foo__r__x__first__bit foo__r__x__last__bit))

;; foo__r__x__position_axiom
  (assert (<= 0 foo__r__x__position))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((r__ref 0)) (((mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(declare-sort tctD1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (tctD1 tctD1) Bool)

(declare-const dummy1 tctD1)

(declare-datatypes ((tctD1__ref 0))
(((mk_tctD1__ref (tctD1__content tctD1)))))
(define-fun tctD1__ref___projection ((a tctD1__ref)) tctD1 (tctD1__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort t29b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (t29b t29b) Bool)

(declare-const dummy2 t29b)

(declare-datatypes ((t29b__ref 0)) (((mk_t29b__ref (t29b__content t29b)))))
(define-fun t29b__ref___projection ((a t29b__ref)) t29b (t29b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a (Array Int us_rep))

(declare-const i Int)

(declare-const temp___167 (Array Int us_rep))

(declare-const temp___166 Int)

(declare-const a1 (Array Int us_rep))

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 (Array Int us_rep))

(declare-const a2 (Array Int us_rep))

(declare-const a3 (Array Int us_rep))

(declare-const i2 Int)

(declare-const a4 (Array Int us_rep))

(declare-const i3 Int)

(declare-const a5 (Array Int us_rep))

(declare-const i4 Int)

(declare-const a6 (Array Int us_rep))

(declare-const i5 Int)

(declare-const a7 (Array Int us_rep))

(declare-const i6 Int)

(declare-const a8 (Array Int us_rep))

(declare-const i7 Int)

(declare-const a9 (Array Int us_rep))

(declare-const i8 Int)

(define-fun a10 () map__ref (mk_map__ref a6))

(define-fun a11 () map__ref (mk_map__ref a))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___167 a)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___166 i1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= (mk_map__ref result1) a11)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (= a2 (store a i1 (mk___rep
                    (mk___split_fields
                    (ite (= (rec__foo__r__x (us_split_fields1 (select a i1))) false)
                    (ite (not
                         (= (rec__foo__r__x (us_split_fields1 (select a i1))) true))
                    true false) true)))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j i2))
  (= (rec__foo__r__x (us_split_fields1 (select a3 j))) true)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (and
  (and (=> (<= 1 10) (in_range2 i2))
  (forall ((temp___168 Int))
  (=> (and (<= 1 temp___168) (<= temp___168 10))
  (=> (< i2 temp___168)
  (= (select a3 temp___168) (select temp___167 temp___168))))))
  (and (<= 1 i2) (<= i2 10)))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 10)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 i3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= a3 a4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i4 i2)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= a5 a3)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= a10 (mk_map__ref a4))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i6 i4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= a7 a5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= a10 a11)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= a7 a1)))

;; H
  (assert (= i7 i5))

;; H
  (assert (= (mk_map__ref a8) a10))

;; H
  (assert (= i8 i6))

;; H
  (assert (= a9 a7))

(declare-const n Int)

;; H
  (assert (<= 1 n))

;; H
  (assert (<= n 10))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 9, characters 0-0
  (not (= (rec__foo__r__x (us_split_fields1 (select a8 n))) true)))
(check-sat)
(exit)
