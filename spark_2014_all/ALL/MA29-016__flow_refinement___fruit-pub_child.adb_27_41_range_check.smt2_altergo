(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic number_of_apples : int, us_private, int, int, int, int,
  us_private -> int

logic number_of_apples__function_guard : int, int, us_private, int, int, int,
  int, us_private -> prop

axiom number_of_apples__post_axiom :
  (forall fruit__apples:int. forall fruit__oranges:int.
  forall fruit__price_of_apple:int. forall fruit__price_of_orange:int.
  forall fruit__priv_child__extra_cost:int.
  (forall fruit__fruits:us_private.
  forall fruit__priv_child__price_related_stuff:us_private
  [number_of_apples(fruit__apples, fruit__fruits, fruit__oranges,
  fruit__price_of_apple, fruit__price_of_orange,
  fruit__priv_child__extra_cost, fruit__priv_child__price_related_stuff)].
  (((((in_range1(fruit__apples) and in_range1(fruit__oranges)) and
  in_range1(fruit__price_of_apple)) and
  in_range1(fruit__price_of_orange)) and
  in_range1(fruit__priv_child__extra_cost)) ->
  in_range1(number_of_apples(fruit__apples, fruit__fruits, fruit__oranges,
  fruit__price_of_apple, fruit__price_of_orange,
  fruit__priv_child__extra_cost, fruit__priv_child__price_related_stuff)))))

logic number_of_oranges : int, us_private, int, int, int, int,
  us_private -> int

logic number_of_oranges__function_guard : int, int, us_private, int, int,
  int, int, us_private -> prop

axiom number_of_oranges__post_axiom :
  (forall fruit__apples:int. forall fruit__oranges:int.
  forall fruit__price_of_apple:int. forall fruit__price_of_orange:int.
  forall fruit__priv_child__extra_cost:int.
  (forall fruit__fruits:us_private.
  forall fruit__priv_child__price_related_stuff:us_private
  [number_of_oranges(fruit__apples, fruit__fruits, fruit__oranges,
  fruit__price_of_apple, fruit__price_of_orange,
  fruit__priv_child__extra_cost, fruit__priv_child__price_related_stuff)].
  (((((in_range1(fruit__apples) and in_range1(fruit__oranges)) and
  in_range1(fruit__price_of_apple)) and
  in_range1(fruit__price_of_orange)) and
  in_range1(fruit__priv_child__extra_cost)) ->
  in_range1(number_of_oranges(fruit__apples, fruit__fruits, fruit__oranges,
  fruit__price_of_apple, fruit__price_of_orange,
  fruit__priv_child__extra_cost, fruit__priv_child__price_related_stuff)))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall fruits:us_private. forall apples:int. forall oranges:int.
  forall price_of_apple:int. forall price_of_orange:int.
  forall fruit_salads_made:int. forall apples_in_fruit_salad:int.
  forall oranges_in_fruit_salad:int. forall price_related_stuff:us_private.
  forall extra_cost:int. forall o:int. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall o5:int. forall o6:int. forall o7:int.
  forall o8:int. forall o9:int. forall result:bool. forall result1:int.
  forall fruit_salads_made1:int. (((0 <= 2147483647) ->
  in_range1(fruit_salads_made)) -> (in_range1(apples_in_fruit_salad) ->
  (in_range1(oranges_in_fruit_salad) -> (in_range1(apples) ->
  (in_range1(oranges) -> (in_range1(price_of_apple) ->
  (in_range1(price_of_orange) -> (in_range1(extra_cost) ->
  (((((((o1 = number_of_oranges(apples, fruits, oranges, price_of_apple,
  price_of_orange, extra_cost, price_related_stuff)) and in_range1(o1)) and
  (o2 = comp_div(o1,oranges_in_fruit_salad))) and
  ((((o = number_of_apples(apples, fruits, oranges, price_of_apple,
  price_of_orange, extra_cost, price_related_stuff)) and in_range1(o)) and
  (o3 = comp_div(o,apples_in_fruit_salad))) and (((o3 <= o2) and
  (result = true)) or ((not (o3 <= o2)) and (result = false))))) and
  (((result = true) and ((((o4 = number_of_apples(apples, fruits, oranges,
  price_of_apple, price_of_orange, extra_cost, price_related_stuff)) and
  in_range1(o4)) and (o5 = comp_div(o4,apples_in_fruit_salad))) and
  ((o8 = o5) and in_range1(o5)))) or ((not (result = true)) and
  ((((o6 = number_of_oranges(apples, fruits, oranges, price_of_apple,
  price_of_orange, extra_cost, price_related_stuff)) and in_range1(o6)) and
  (o7 = comp_div(o6,oranges_in_fruit_salad))) and ((o8 = o7) and
  in_range1(o7)))))) and ((result1 = fruit_salads_made) and
  (fruit_salads_made1 = o8))) ->
  (((o9 = (fruit_salads_made1 * apples_in_fruit_salad)) and
  in_range((fruit_salads_made1 * apples_in_fruit_salad))) ->
  in_range1(o9))))))))))))
