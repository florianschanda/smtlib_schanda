;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes () ((mode (RNE1) (RNA1) (RTP1) (RTN1) (RTZ1))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE1) (= m RNA1)))

(declare-fun zeroF () t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-fun max_int () Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN1 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP1 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN1 (- x)) (- (round RTP1 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP1 (- x)) (- (round RTN1 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN1 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP1 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0))))) 
                                                (ite (is-RTZ1 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0))))) 
                                                (ite (is-RNA1 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN1 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTP1 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTN1 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP1 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP1 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP1 x)) (to_real (- 1 (to_int (- 1.0 
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP1 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN1 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN1 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN1 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN1 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (=> (is_positive x) (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE1 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0)) 
     (round RNE1 x))
     (<= (round RNE1 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE1 x)) )))

(define-fun neq ((x t) (y t)) Bool (not (eq x y)))

(define-fun bool_lt ((x t) (y t)) Bool (ite (lt x y) true false))

(define-fun bool_le ((x t) (y t)) Bool (ite (le x y) true false))

(define-fun bool_gt ((x t) (y t)) Bool (ite (lt y x) true false))

(define-fun bool_ge ((x t) (y t)) Bool (ite (le y x) true false))

(define-fun bool_eq ((x t) (y t)) Bool (ite (eq x y) true false))

(define-fun bool_neq ((x t) (y t)) Bool (ite (not (eq x y)) true false))

(declare-fun rem (t t) t)

(declare-fun fliteral () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) 1.0)))

;; one_is_int
  (assert (is_int1 fliteral))

;; one_of_int
  (assert (= fliteral (of_int RNA1 1)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(define-fun bool_eq1 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) t)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun fliteral1 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral1)
  (= (tqtreal fliteral1) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant ((temp___expr_51 t) (temp___is_init_48 Bool)
  (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true) (le
                                     (neg fliteral1) fliteral1)) (tqtisFinite
                                     temp___expr_51)))

(declare-sort t_rate 0)

(declare-fun fliteral2 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral2) (= (tqtreal fliteral2) 3000.0)))

(define-fun in_range2 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le (neg fliteral2) x) (le x
                                   fliteral2))))

(define-fun bool_eq2 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq1 (t_rate t_rate) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) t)

(declare-fun dummy1 () t_rate)

(declare-datatypes ()
((t_rate__ref (mk_t_rate__ref (t_rate__content t_rate)))))
(define-fun t_rate__ref___projection ((a t_rate__ref)) t_rate (t_rate__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_140 t) (temp___is_init_137 Bool)
  (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true) (le
                                      (neg fliteral2) fliteral2)) (in_range2
                                      temp___expr_140)))

(declare-sort t_acc 0)

(declare-fun fliteral3 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral3) (= (tqtreal fliteral3) 16.0)))

(define-fun in_range3 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le (neg fliteral3) x) (le x
                                   fliteral3))))

(define-fun bool_eq3 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq2 (t_acc t_acc) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) t)

(declare-fun dummy2 () t_acc)

(declare-datatypes () ((t_acc__ref (mk_t_acc__ref (t_acc__content t_acc)))))
(define-fun t_acc__ref___projection ((a t_acc__ref)) t_acc (t_acc__content a))

(define-fun dynamic_invariant2 ((temp___expr_146 t) (temp___is_init_143 Bool)
  (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true) (le
                                      (neg fliteral3) fliteral3)) (in_range3
                                      temp___expr_146)))

(declare-sort t_acc_lifted 0)

(define-fun in_range4 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le (neg fliteral3) x) (le x
                                   fliteral3))))

(define-fun bool_eq4 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq3 (t_acc_lifted t_acc_lifted) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) t)

(declare-fun dummy3 () t_acc_lifted)

(declare-datatypes ()
((t_acc_lifted__ref
 (mk_t_acc_lifted__ref (t_acc_lifted__content t_acc_lifted)))))
(define-fun t_acc_lifted__ref___projection ((a t_acc_lifted__ref)) t_acc_lifted 
  (t_acc_lifted__content a))

(define-fun dynamic_invariant3 ((temp___expr_158 t) (temp___is_init_155 Bool)
  (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true) (le
                                      (neg fliteral3) fliteral3)) (in_range4
                                      temp___expr_158)))

(declare-sort positive_float 0)

(declare-fun fliteral4 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral4) (= (tqtreal fliteral4) (/ 0.0 10.0))))

(define-fun in_range5 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral4 x) (le x fliteral1))))

(define-fun bool_eq5 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq4 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) t)

(declare-fun dummy4 () positive_float)

(declare-datatypes ()
((positive_float__ref
 (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float 
  (positive_float__content a))

(define-fun dynamic_invariant4 ((temp___expr_1294 t)
  (temp___is_init_1291 Bool) (temp___skip_constant_1292 Bool)
  (temp___do_toplevel_1293 Bool)) Bool (=>
                                       (or (= temp___is_init_1291 true) (le
                                       fliteral4 fliteral1)) (in_range5
                                       temp___expr_1294)))

(declare-sort t_delta_time 0)

(declare-fun fliteral5 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral5)
  (= (tqtreal fliteral5) (/ 1000000047497451305389404296875.0 1000000000000000000000000000000000.0))))

(define-fun in_range6 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral5 x) (le x fliteral))))

(define-fun bool_eq6 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq5 (t_delta_time t_delta_time) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE6 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) t)

(declare-fun dummy5 () t_delta_time)

(declare-datatypes ()
((t_delta_time__ref
 (mk_t_delta_time__ref (t_delta_time__content t_delta_time)))))
(define-fun t_delta_time__ref___projection ((a t_delta_time__ref)) t_delta_time 
  (t_delta_time__content a))

(define-fun dynamic_invariant5 ((temp___expr_1300 t)
  (temp___is_init_1297 Bool) (temp___skip_constant_1298 Bool)
  (temp___do_toplevel_1299 Bool)) Bool (=>
                                       (or (= temp___is_init_1297 true) (le
                                       fliteral5 fliteral)) (in_range6
                                       temp___expr_1300)))

(declare-sort t_alpha 0)

(define-fun in_range7 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral4 x) (le x fliteral))))

(define-fun bool_eq7 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq6 (t_alpha t_alpha) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE7 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) t)

(declare-fun dummy6 () t_alpha)

(declare-datatypes ()
((t_alpha__ref (mk_t_alpha__ref (t_alpha__content t_alpha)))))
(define-fun t_alpha__ref___projection ((a t_alpha__ref)) t_alpha (t_alpha__content
                                                                 a))

(define-fun dynamic_invariant6 ((temp___expr_1306 t)
  (temp___is_init_1303 Bool) (temp___skip_constant_1304 Bool)
  (temp___do_toplevel_1305 Bool)) Bool (=>
                                       (or (= temp___is_init_1303 true) (le
                                       fliteral4 fliteral)) (in_range7
                                       temp___expr_1306)))

(declare-sort t_quaternion 0)

(define-fun in_range8 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le (neg fliteral) x) (le x
                                   fliteral))))

(define-fun bool_eq8 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq7 (t_quaternion t_quaternion) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE8 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) t)

(declare-fun dummy7 () t_quaternion)

(declare-datatypes ()
((t_quaternion__ref
 (mk_t_quaternion__ref (t_quaternion__content t_quaternion)))))
(define-fun t_quaternion__ref___projection ((a t_quaternion__ref)) t_quaternion 
  (t_quaternion__content a))

(define-fun dynamic_invariant7 ((temp___expr_1336 t)
  (temp___is_init_1333 Bool) (temp___skip_constant_1334 Bool)
  (temp___do_toplevel_1335 Bool)) Bool (=>
                                       (or (= temp___is_init_1333 true) (le
                                       (neg fliteral) fliteral)) (in_range8
                                       temp___expr_1336)))

(declare-fun inv_sqrt (t) t)

(declare-fun inv_sqrt__function_guard (t t) Bool)

(declare-fun fliteral6 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral6)
  (= (tqtreal fliteral6) (/ 14012984643248170709237295832899161312802619418765157717570682838897910826858606014866381883621215820312500000000000000000000000.0 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0))))

(declare-fun fliteral7 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral7)
  (= (tqtreal fliteral7) 200000004008175468544.0)))

;; inv_sqrt__post_axiom
  (assert
  (forall ((x t))
  (! (=> (and (dynamic_invariant x true true true) (le fliteral6 x))
     (let ((result (inv_sqrt x)))
     (and (and (lt fliteral4 result) (lt result fliteral7))
     (dynamic_invariant result true false true)))) :pattern ((inv_sqrt x)) )))

(declare-fun saturate (t t t) t)

(declare-fun saturate__function_guard (t t t t) Bool)

;; saturate__post_axiom
  (assert
  (forall ((value t) (min_value t) (max_value t))
  (! (=>
     (and
     (and (dynamic_invariant value true true true) (dynamic_invariant
     min_value true true true)) (dynamic_invariant max_value true true true))
     (let ((result (saturate value min_value max_value)))
     (and
     (ite (lt value min_value) (eq result min_value)
     (ite (lt max_value value) (eq result max_value) (eq result value)))
     (dynamic_invariant result true false true)))) :pattern ((saturate value
                                                             min_value
                                                             max_value)) )))

(declare-fun lift_away_from_zero (t) t)

(declare-fun lift_away_from_zero__function_guard (t t) Bool)

;; lift_away_from_zero__post_axiom
  (assert
  (forall ((x t))
  (! (=> (dynamic_invariant2 x true true true)
     (let ((result (lift_away_from_zero x)))
     (and
     (ite (eq x fliteral4) (eq result fliteral4)
     (=> (neq x fliteral4) (neq result fliteral4))) (dynamic_invariant3
     result true false true)))) :pattern ((lift_away_from_zero x)) )))

(declare-fun gx () t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun gy () t)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun gz () t)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun ax () t)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun ay () t)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun az () t)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun dt () t)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun c3b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun c4b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun c5b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun c6b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun c7b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun c8b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun c9b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS42 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS43 () Int)

(declare-fun c11b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS44 () Int)

(declare-fun c12b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS45 () Int)

(declare-fun c13b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS46 () Int)

(declare-fun c14b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS47 () Int)

(declare-fun c15b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS48 () Int)

(declare-fun c16b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS49 () Int)

(declare-fun c17b () t)

(declare-fun attr__ATTRIBUTE_ADDRESS50 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS51 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS52 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS53 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS54 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS55 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS56 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS57 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS58 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS59 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS60 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS61 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS62 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS63 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS64 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS65 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS66 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS67 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS68 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS69 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS70 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS71 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS72 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS73 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS74 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS75 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS76 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS77 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS78 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS79 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS80 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS81 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS82 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS83 () Int)

(declare-fun fliteral8 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral8)
  (= (tqtreal fliteral8) (/ 31415927410125732421875.0 10000000000000000000000.0))))

(declare-fun fliteral9 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral9) (= (tqtreal fliteral9) 180.0)))

(declare-fun fliteral10 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral10)
  (= (tqtreal fliteral10) (/ 500000000000000000000000.0 1000000000000000000000000.0))))

(declare-fun q0 () t)

(declare-fun q1 () t)

(declare-fun q2 () t)

(declare-fun q3 () t)

(declare-fun two_kp () t)

(declare-fun two_ki () t)

(declare-fun integral_fbx () t)

(declare-fun integral_fby () t)

(declare-fun integral_fbz () t)

(declare-fun beta () t)

(declare-fun recip_norm () t)

(declare-fun norm_ax () t)

(declare-fun norm_ay () t)

(declare-fun norm_az () t)

(declare-fun rad_gx () t)

(declare-fun rad_gy () t)

(declare-fun rad_gz () t)

(declare-fun half_vx () t)

(declare-fun half_vy () t)

(declare-fun half_vz () t)

(declare-fun half_ex () t)

(declare-fun half_ey () t__ref)

(declare-fun half_ez () t__ref)

(declare-fun q0_tmp () t__ref)

(declare-fun q1_tmp () t__ref)

(declare-fun q2_tmp () t__ref)

(declare-fun q3_tmp () t__ref)

(declare-fun qa () t__ref)

(declare-fun qb () t__ref)

(declare-fun qc () t__ref)

(declare-fun o () t)

(declare-fun o1 () t)

(declare-fun o2 () t)

(declare-fun o3 () t)

(declare-fun o4 () t)

(declare-fun o5 () t)

(declare-fun o6 () t)

(declare-fun o7 () t)

(declare-fun o8 () t)

(declare-fun o9 () t)

(declare-fun o10 () t)

(declare-fun o11 () t)

(declare-fun o12 () t)

(declare-fun o13 () t)

(declare-fun o14 () t)

(declare-fun o15 () t)

(declare-fun o16 () t)

(declare-fun o17 () t)

(declare-fun o18 () t)

(declare-fun o19 () t)

(declare-fun o20 () t)

(declare-fun o21 () t)

(declare-fun o22 () t)

(declare-fun o23 () t)

(declare-fun o24 () t)

(declare-fun o25 () t)

(declare-fun o26 () t)

(declare-fun o27 () t)

(declare-fun o28 () t)

(declare-fun o29 () t)

(declare-fun o30 () t)

(declare-fun o31 () t)

(declare-fun o32 () t)

(declare-fun o33 () t)

(declare-fun o34 () t)

(declare-fun o35 () t)

(declare-fun o36 () t)

(declare-fun o37 () t)

(declare-fun o38 () t)

(declare-fun o39 () t)

(declare-fun o40 () t)

(declare-fun o41 () t)

(declare-fun o42 () t)

(declare-fun o43 () t)

(declare-fun o44 () t)

(declare-fun o45 () t)

(declare-fun o46 () t)

(declare-fun o47 () t)

(declare-fun o48 () t)

(declare-fun o49 () t)

(declare-fun o50 () t)

(declare-fun o51 () t)

(declare-fun o52 () t)

(declare-fun o53 () t)

(declare-fun o54 () t)

(declare-fun o55 () t)

(declare-fun o56 () t)

(declare-fun o57 () t)

(declare-fun o58 () t)

(declare-fun o59 () t)

(declare-fun o60 () t)

(declare-fun o61 () t)

(declare-fun o62 () t)

(declare-fun o63 () t)

(declare-fun o64 () t)

(declare-fun o65 () t)

(declare-fun o66 () t)

(declare-fun o67 () t)

(declare-fun o68 () t)

(declare-fun o69 () t)

(declare-fun o70 () t)

(declare-fun o71 () t)

(declare-fun o72 () t)

(declare-fun o73 () t)

(declare-fun o74 () t)

(declare-fun o75 () t)

(declare-fun o76 () t)

(declare-fun o77 () t)

(declare-fun o78 () t)

(declare-fun o79 () t)

(declare-fun o80 () t)

(declare-fun o81 () t)

(declare-fun o82 () t)

(declare-fun integral_fbx1 () t)

(declare-fun integral_fby1 () t)

(declare-fun integral_fbz1 () t)

(declare-fun recip_norm1 () t)

(declare-fun norm_ax1 () t)

(declare-fun norm_ay1 () t)

(declare-fun norm_az1 () t)

(declare-fun half_ex1 () t)

(declare-fun half_ey1 () t)

(declare-fun half_ez1 () t)

(declare-fun result () t__ref)

(declare-fun rad_gx1 () t)

(declare-fun result1 () t__ref)

(declare-fun rad_gy1 () t)

(declare-fun result2 () t__ref)

(declare-fun rad_gz1 () t)

(declare-fun result3 () t__ref)

(declare-fun half_vx1 () t)

(declare-fun result4 () t__ref)

(declare-fun half_vy1 () t)

(declare-fun result5 () t__ref)

(declare-fun half_vz1 () t)

(declare-fun result6 () t__ref)

(declare-fun qa1 () t)

(declare-fun result7 () t__ref)

(declare-fun qb1 () t)

(declare-fun result8 () t__ref)

(declare-fun qc1 () t)

(declare-fun result9 () t__ref)

(declare-fun recip_norm2 () t)

(declare-fun result10 () t__ref)

(declare-fun norm_ax2 () t)

(declare-fun result11 () t__ref)

(declare-fun norm_ay2 () t)

(declare-fun result12 () t__ref)

(declare-fun norm_az2 () t)

(declare-fun result13 () t__ref)

(declare-fun half_ex2 () t)

(declare-fun result14 () t__ref)

(declare-fun half_ey2 () t)

(declare-fun result15 () t__ref)

(declare-fun half_ez2 () t)

(declare-fun result16 () t__ref)

(declare-fun integral_fbx2 () t)

(declare-fun result17 () t__ref)

(declare-fun integral_fby2 () t)

(declare-fun result18 () t__ref)

(declare-fun integral_fbz2 () t)

(declare-fun result19 () t__ref)

(declare-fun rad_gx2 () t)

(declare-fun result20 () t__ref)

(declare-fun rad_gy2 () t)

(declare-fun result21 () t__ref)

(declare-fun rad_gz2 () t)

(declare-fun result22 () t__ref)

(declare-fun integral_fbx3 () t)

(declare-fun result23 () t__ref)

(declare-fun integral_fby3 () t)

(declare-fun result24 () t__ref)

(declare-fun integral_fbz3 () t)

(declare-fun result25 () t__ref)

(declare-fun rad_gx3 () t)

(declare-fun result26 () t__ref)

(declare-fun rad_gy3 () t)

(declare-fun result27 () t__ref)

(declare-fun rad_gz3 () t)

(declare-fun result28 () t__ref)

(declare-fun rad_gx4 () t)

(declare-fun result29 () t__ref)

(declare-fun rad_gy4 () t)

(declare-fun result30 () t__ref)

(declare-fun rad_gz4 () t)

(declare-fun result31 () t__ref)

(declare-fun q0_tmp1 () t)

(declare-fun result32 () t__ref)

(declare-fun q1_tmp1 () t)

(declare-fun result33 () t__ref)

(declare-fun q2_tmp1 () t)

(define-fun integral_fbz4 () t__ref (mk_t__ref integral_fbz))

(define-fun integral_fby4 () t__ref (mk_t__ref integral_fby))

(define-fun integral_fbx4 () t__ref (mk_t__ref integral_fbx))

;; H
  (assert (in_range2 gx))

;; H
  (assert (in_range2 gy))

;; H
  (assert (in_range2 gz))

;; H
  (assert (in_range3 ax))

;; H
  (assert (in_range3 ay))

;; H
  (assert (in_range3 az))

;; H
  (assert (in_range6 dt))

;; H
  (assert (in_range8 q0))

;; H
  (assert (in_range8 q1))

;; H
  (assert (in_range8 q2))

;; H
  (assert (in_range8 q3))

;; H
  (assert (tqtisFinite two_kp))

;; H
  (assert (tqtisFinite two_ki))

;; H
  (assert (tqtisFinite integral_fbx))

;; H
  (assert (tqtisFinite integral_fby))

;; H
  (assert (tqtisFinite integral_fbz))

;; H
  (assert (in_range7 beta))

;; H
  (assert (= gx c3b))

;; H
  (assert (in_range2 c3b))

;; H
  (assert (= gy c4b))

;; H
  (assert (in_range2 c4b))

;; H
  (assert (= gz c5b))

;; H
  (assert (in_range2 c5b))

;; H
  (assert (= ax c6b))

;; H
  (assert (in_range3 c6b))

;; H
  (assert (= ay c7b))

;; H
  (assert (in_range3 c7b))

;; H
  (assert (= az c8b))

;; H
  (assert (in_range3 c8b))

;; H
  (assert (= dt c9b))

;; H
  (assert (in_range6 c9b))

;; H
  (assert (=> (le (neg fliteral1) fliteral1) (tqtisFinite recip_norm)))

;; H
  (assert (=> (le (neg fliteral3) fliteral3) (in_range3 norm_ax)))

;; H
  (assert (=> (le (neg fliteral3) fliteral3) (in_range3 norm_ay)))

;; H
  (assert (=> (le (neg fliteral3) fliteral3) (in_range3 norm_az)))

;; H
  (assert (= result (mk_t__ref rad_gx)))

;; H
  (assert (= rad_gx1 (div1 RNE1 (mul RNE1 c3b fliteral8) fliteral9)))

;; H
  (assert (tqtisFinite rad_gx1))

;; H
  (assert (= result1 (mk_t__ref rad_gy)))

;; H
  (assert (= rad_gy1 (div1 RNE1 (mul RNE1 c4b fliteral8) fliteral9)))

;; H
  (assert (tqtisFinite rad_gy1))

;; H
  (assert (= result2 (mk_t__ref rad_gz)))

;; H
  (assert (= rad_gz1 (div1 RNE1 (mul RNE1 c5b fliteral8) fliteral9)))

;; H
  (assert (tqtisFinite rad_gz1))

;; H
  (assert (= result3 (mk_t__ref half_vx)))

;; H
  (assert (= half_vx1 (sub RNE1 (mul RNE1 q1 q3) (mul RNE1 q0 q2))))

;; H
  (assert (tqtisFinite half_vx1))

;; H
  (assert (= result4 (mk_t__ref half_vy)))

;; H
  (assert (= half_vy1 (add RNE1 (mul RNE1 q0 q1) (mul RNE1 q2 q3))))

;; H
  (assert (tqtisFinite half_vy1))

;; H
  (assert (= result5 (mk_t__ref half_vz)))

;; H
  (assert
  (= half_vz1 (add RNE1 (sub RNE1 (mul RNE1 q0 q0) fliteral10)
              (mul RNE1 q3 q3))))

;; H
  (assert (tqtisFinite half_vz1))

;; H
  (assert (=> (le (neg fliteral1) fliteral1) (tqtisFinite half_ex)))

;; H
  (assert
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite (t__content half_ey))))

;; H
  (assert
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite (t__content half_ez))))

;; H
  (assert
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite (t__content q0_tmp))))

;; H
  (assert
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite (t__content q1_tmp))))

;; H
  (assert
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite (t__content q2_tmp))))

;; H
  (assert
  (=> (le (neg fliteral1) fliteral1) (tqtisFinite (t__content q3_tmp))))

;; H
  (assert (= result6 qa))

;; H
  (assert (= (let ((subject qa)) qa1) q0))

;; H
  (assert (in_range8 (let ((subject qa)) qa1)))

;; H
  (assert (= result7 qb))

;; H
  (assert (= (let ((subject qb)) qb1) q1))

;; H
  (assert (in_range8 (let ((subject qb)) qb1)))

;; H
  (assert (= result8 qc))

;; H
  (assert (= (let ((subject qc)) qc1) q2))

;; H
  (assert (in_range8 (let ((subject qc)) qc1)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and
  (= o (inv_sqrt
       (add RNE1 (add RNE1 (mul RNE1 c6b c6b) (mul RNE1 c7b c7b))
       (mul RNE1 c8b c8b))))
  (and (tqtisFinite o) (and (lt fliteral4 o) (lt o fliteral7))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result9 (mk_t__ref recip_norm))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= recip_norm2 o)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o1 (mul RNE1 c6b recip_norm2)) (tqtisFinite
  (mul RNE1 c6b recip_norm2)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o2 (saturate o1 (neg fliteral) fliteral))
  (and (tqtisFinite o2)
  (ite (lt o1 (neg fliteral)) (eq o2 (neg fliteral))
  (ite (lt fliteral o1) (eq o2 fliteral) (eq o2 o1)))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o3 o2) (tqtisFinite o2))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result10 (mk_t__ref norm_ax))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= norm_ax2 o3)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o4 (mul RNE1 c7b recip_norm2)) (tqtisFinite
  (mul RNE1 c7b recip_norm2)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o5 (saturate o4 (neg fliteral) fliteral))
  (and (tqtisFinite o5)
  (ite (lt o4 (neg fliteral)) (eq o5 (neg fliteral))
  (ite (lt fliteral o4) (eq o5 fliteral) (eq o5 o4)))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o6 o5) (tqtisFinite o5))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result11 (mk_t__ref norm_ay))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= norm_ay2 o6)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o7 (mul RNE1 c8b recip_norm2)) (tqtisFinite
  (mul RNE1 c8b recip_norm2)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o8 (saturate o7 (neg fliteral) fliteral))
  (and (tqtisFinite o8)
  (ite (lt o7 (neg fliteral)) (eq o8 (neg fliteral))
  (ite (lt fliteral o7) (eq o8 fliteral) (eq o8 o7)))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o9 o8) (tqtisFinite o8))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result12 (mk_t__ref norm_az))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= norm_az2 o9)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o10 (mul RNE1 norm_az2 half_vy1)) (tqtisFinite
  (mul RNE1 norm_az2 half_vy1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o11 (mul RNE1 norm_ay2 half_vz1)) (tqtisFinite
  (mul RNE1 norm_ay2 half_vz1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= o12 (sub RNE1 o11 o10))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o13 o12) (tqtisFinite o12))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result13 (mk_t__ref half_ex))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= half_ex2 o13)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o14 (mul RNE1 norm_ax2 half_vz1)) (tqtisFinite
  (mul RNE1 norm_ax2 half_vz1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o15 (mul RNE1 norm_az2 half_vx1)) (tqtisFinite
  (mul RNE1 norm_az2 half_vx1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= o16 (sub RNE1 o15 o14))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o17 o16) (tqtisFinite o16))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result14 half_ey)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= (let ((subject half_ey)) half_ey2) o17)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o18 (mul RNE1 norm_ay2 half_vx1)) (tqtisFinite
  (mul RNE1 norm_ay2 half_vx1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o19 (mul RNE1 norm_ax2 half_vy1)) (tqtisFinite
  (mul RNE1 norm_ax2 half_vy1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= o20 (sub RNE1 o19 o18))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o21 o20) (tqtisFinite o20))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result15 half_ez)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= (let ((subject half_ez)) half_ez2) o21)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki)
  (and (= o22 (mul RNE1 two_ki half_ex2)) (tqtisFinite
  (mul RNE1 two_ki half_ex2))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= o23 (mul RNE1 o22 c9b)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (and (= o24 o23) (tqtisFinite o23)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= o25 (add RNE1 integral_fbx o24)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (and (= o26 o25) (tqtisFinite o25)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= result16 integral_fbx4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= integral_fbx2 o26))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki)
  (and (= o27 (mul RNE1 two_ki (let ((subject half_ey)) half_ey2)))
  (tqtisFinite (mul RNE1 two_ki (let ((subject half_ey)) half_ey2)))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= o28 (mul RNE1 o27 c9b)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (and (= o29 o28) (tqtisFinite o28)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= o30 (add RNE1 integral_fby o29)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (and (= o31 o30) (tqtisFinite o30)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= result17 integral_fby4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= integral_fby2 o31))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki)
  (and (= o32 (mul RNE1 two_ki (let ((subject half_ez)) half_ez2)))
  (tqtisFinite (mul RNE1 two_ki (let ((subject half_ez)) half_ez2)))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= o33 (mul RNE1 o32 c9b)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (and (= o34 o33) (tqtisFinite o33)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= o35 (add RNE1 integral_fbz o34)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (and (= o36 o35) (tqtisFinite o35)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= result18 integral_fbz4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= integral_fbz2 o36))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki)
  (and (= o37 (add RNE1 rad_gx1 integral_fbx2)) (tqtisFinite
  (add RNE1 rad_gx1 integral_fbx2))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= result19 (mk_t__ref rad_gx1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= rad_gx2 o37))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki)
  (and (= o38 (add RNE1 rad_gy1 integral_fby2)) (tqtisFinite
  (add RNE1 rad_gy1 integral_fby2))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= result20 (mk_t__ref rad_gy1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= rad_gy2 o38))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki)
  (and (= o39 (add RNE1 rad_gz1 integral_fbz2)) (tqtisFinite
  (add RNE1 rad_gz1 integral_fbz2))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= result21 (mk_t__ref rad_gz1)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (lt fliteral4 two_ki) (= rad_gz2 o39))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= result22 integral_fbx4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= integral_fbx3 fliteral4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= result23 integral_fby4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= integral_fby3 fliteral4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= result24 integral_fbz4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= integral_fbz3 fliteral4))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= rad_gz2 rad_gz1))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= rad_gy2 rad_gy1))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= rad_gx2 rad_gx1))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= integral_fbz2 integral_fbz3))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= integral_fby2 integral_fby3))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (=> (not (lt fliteral4 two_ki)) (= integral_fbx2 integral_fbx3))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o40 (mul RNE1 two_kp half_ex2)) (tqtisFinite
  (mul RNE1 two_kp half_ex2)))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= o41 (add RNE1 rad_gx2 o40))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o42 o41) (tqtisFinite o41))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result25 (mk_t__ref rad_gx2))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= rad_gx3 o42)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o43 (mul RNE1 two_kp (let ((subject half_ey)) half_ey2)))
  (tqtisFinite (mul RNE1 two_kp (let ((subject half_ey)) half_ey2))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= o44 (add RNE1 rad_gy2 o43))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o45 o44) (tqtisFinite o44))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result26 (mk_t__ref rad_gy2))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= rad_gy3 o45)))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o46 (mul RNE1 two_kp (let ((subject half_ez)) half_ez2)))
  (tqtisFinite (mul RNE1 two_kp (let ((subject half_ez)) half_ez2))))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= o47 (add RNE1 rad_gz2 o46))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (and (= o48 o47) (tqtisFinite o47))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= result27 (mk_t__ref rad_gz2))))

;; H
  (assert
  (=>
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4))))
  (= rad_gz3 o48)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= (let ((subject half_ez)) (mk_t__ref half_ez2)) half_ez)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= (let ((subject half_ey)) (mk_t__ref half_ey2)) half_ey)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= half_ex2 half_ex)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= rad_gz3 rad_gz1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= rad_gy3 rad_gy1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= rad_gx3 rad_gx1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= norm_az2 norm_az)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= norm_ay2 norm_ay)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= norm_ax2 norm_ax)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= recip_norm2 recip_norm)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= integral_fbz2 integral_fbz)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= integral_fby2 integral_fby)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= integral_fbx2 integral_fbx)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= half_ez2 half_ez1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= half_ey2 half_ey1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= half_ex2 half_ex1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= rad_gz3 rad_gz1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= rad_gy3 rad_gy1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= rad_gx3 rad_gx1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= norm_az2 norm_az1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= norm_ay2 norm_ay1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= norm_ax2 norm_ax1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= recip_norm2 recip_norm1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= integral_fbz2 integral_fbz1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= integral_fby2 integral_fby1)))

;; H
  (assert
  (=>
  (not
  (not (and (eq c6b fliteral4) (and (eq c7b fliteral4) (eq c8b fliteral4)))))
  (= integral_fbx2 integral_fbx1)))

;; H
  (assert (= result28 (mk_t__ref rad_gx3)))

;; H
  (assert (= rad_gx4 (mul RNE1 rad_gx3 (mul RNE1 fliteral10 c9b))))

;; H
  (assert (= result29 (mk_t__ref rad_gy3)))

;; H
  (assert (= rad_gy4 (mul RNE1 rad_gy3 (mul RNE1 fliteral10 c9b))))

;; H
  (assert (= result30 (mk_t__ref rad_gz3)))

;; H
  (assert (= rad_gz4 (mul RNE1 rad_gz3 (mul RNE1 fliteral10 c9b))))

;; H
  (assert
  (and (= o53 (mul RNE1 q3 rad_gz4)) (tqtisFinite (mul RNE1 q3 rad_gz4))))

;; H
  (assert
  (and (= o50 (mul RNE1 (let ((subject qc)) qc1) rad_gy4)) (tqtisFinite
  (mul RNE1 (let ((subject qc)) qc1) rad_gy4))))

;; H
  (assert
  (and (= o49 (mul RNE1 (let ((subject qb)) qb1) rad_gx4)) (tqtisFinite
  (mul RNE1 (let ((subject qb)) qb1) rad_gx4))))

;; H
  (assert (= o51 (neg o49)))

;; H
  (assert (= o52 (sub RNE1 o51 o50)))

;; H
  (assert (and (= o54 o52) (tqtisFinite o52)))

;; H
  (assert (= o55 (sub RNE1 o54 o53)))

;; H
  (assert (and (= o56 o55) (tqtisFinite o55)))

;; H
  (assert (= o57 (add RNE1 q0 o56)))

;; H
  (assert (and (= o58 o57) (tqtisFinite o57)))

;; H
  (assert (= result31 q0_tmp))

;; H
  (assert (= (let ((subject q0_tmp)) q0_tmp1) o58))

;; H
  (assert
  (and (= o62 (mul RNE1 q3 rad_gy4)) (tqtisFinite (mul RNE1 q3 rad_gy4))))

;; H
  (assert
  (and (= o59 (mul RNE1 (let ((subject qc)) qc1) rad_gz4)) (tqtisFinite
  (mul RNE1 (let ((subject qc)) qc1) rad_gz4))))

;; H
  (assert
  (and (= o60 (mul RNE1 (let ((subject qa)) qa1) rad_gx4)) (tqtisFinite
  (mul RNE1 (let ((subject qa)) qa1) rad_gx4))))

;; H
  (assert (= o61 (add RNE1 o60 o59)))

;; H
  (assert (and (= o63 o61) (tqtisFinite o61)))

;; H
  (assert (= o64 (sub RNE1 o63 o62)))

;; H
  (assert (and (= o65 o64) (tqtisFinite o64)))

;; H
  (assert (= o66 (add RNE1 q1 o65)))

;; H
  (assert (and (= o67 o66) (tqtisFinite o66)))

;; H
  (assert (= result32 q1_tmp))

;; H
  (assert (= (let ((subject q1_tmp)) q1_tmp1) o67))

;; H
  (assert
  (and (= o71 (mul RNE1 q3 rad_gx4)) (tqtisFinite (mul RNE1 q3 rad_gx4))))

;; H
  (assert
  (and (= o68 (mul RNE1 (let ((subject qb)) qb1) rad_gz4)) (tqtisFinite
  (mul RNE1 (let ((subject qb)) qb1) rad_gz4))))

;; H
  (assert
  (and (= o69 (mul RNE1 (let ((subject qa)) qa1) rad_gy4)) (tqtisFinite
  (mul RNE1 (let ((subject qa)) qa1) rad_gy4))))

;; H
  (assert (= o70 (sub RNE1 o69 o68)))

;; H
  (assert (and (= o72 o70) (tqtisFinite o70)))

;; H
  (assert (= o73 (add RNE1 o72 o71)))

;; H
  (assert (and (= o74 o73) (tqtisFinite o73)))

;; H
  (assert (= o75 (add RNE1 q2 o74)))

;; H
  (assert (and (= o76 o75) (tqtisFinite o75)))

;; H
  (assert (= result33 q2_tmp))

;; H
  (assert (= (let ((subject q2_tmp)) q2_tmp1) o76))

;; H
  (assert
  (and (= o80 (mul RNE1 (let ((subject qc)) qc1) rad_gx4)) (tqtisFinite
  (mul RNE1 (let ((subject qc)) qc1) rad_gx4))))

;; H
  (assert
  (and (= o77 (mul RNE1 (let ((subject qb)) qb1) rad_gy4)) (tqtisFinite
  (mul RNE1 (let ((subject qb)) qb1) rad_gy4))))

;; H
  (assert
  (and (= o78 (mul RNE1 (let ((subject qa)) qa1) rad_gz4)) (tqtisFinite
  (mul RNE1 (let ((subject qa)) qa1) rad_gz4))))

;; H
  (assert (= o79 (add RNE1 o78 o77)))

;; H
  (assert (and (= o81 o79) (tqtisFinite o79)))

;; H
  (assert (= o82 (sub RNE1 o81 o80)))

(assert
;; WP_parameter_def
 ;; File "i-cexten.ads", line 59, characters 0-0
  (not (tqtisFinite o82)))
(check-sat)
