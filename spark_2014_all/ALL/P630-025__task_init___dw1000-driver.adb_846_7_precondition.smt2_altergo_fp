(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(65536 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type bits_1

predicate in_range1(x: t) = (ule(of_int(0), x) and ule(x, of_int(1)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq1 : bits_1, bits_1 -> bool

logic dummy1 : bits_1

type bits_1__ref = { bits_1__content : bits_1
}

function bits_1__ref___projection(a: bits_1__ref) : bits_1 =
  (a).bits_1__content

logic to_rep1 : bits_1 -> t

logic of_rep1 : t -> bits_1

axiom inversion_axiom1 :
  (forall x:bits_1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:bits_1 [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (in_range1(urem(x, of_int(2))) ->
  (to_rep1(of_rep1(x)) = urem(x, of_int(2)))))

function to_int2(x: bits_1) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:bits_1 [to_int2(x)]. in_range_int(to_int2(x)))

type bits_2

predicate in_range2(x: t) = (ule(of_int(0), x) and ule(x, of_int(3)))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq2 : bits_2, bits_2 -> bool

logic dummy2 : bits_2

type bits_2__ref = { bits_2__content : bits_2
}

function bits_2__ref___projection(a: bits_2__ref) : bits_2 =
  (a).bits_2__content

logic to_rep2 : bits_2 -> t

logic of_rep2 : t -> bits_2

axiom inversion_axiom2 :
  (forall x:bits_2 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:bits_2 [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (in_range2(urem(x, of_int(4))) ->
  (to_rep2(of_rep2(x)) = urem(x, of_int(4)))))

function to_int3(x: bits_2) : int = tqtint(to_rep2(x))

axiom range_int_axiom1 :
  (forall x:bits_2 [to_int3(x)]. in_range_int1(to_int3(x)))

type bits_8

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq3 : bits_8, bits_8 -> bool

logic dummy3 : bits_8

type bits_8__ref = { bits_8__content : bits_8
}

function bits_8__ref___projection(a: bits_8__ref) : bits_8 =
  (a).bits_8__content

logic to_rep3 : bits_8 -> t

logic of_rep3 : t -> bits_8

axiom inversion_axiom3 :
  (forall x:bits_8 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : true

axiom coerce_axiom3 :
  (forall x:t [to_rep3(of_rep3(x))]. (to_rep3(of_rep3(x)) = x))

function to_int4(x: bits_8) : int = tqtint(to_rep3(x))

axiom range_int_axiom2 :
  (forall x:bits_8 [to_int4(x)]. uint_in_range(to_int4(x)))

type bits_13

predicate in_range3(x: t1) = (ule1(of_int1(0), x) and ule1(x, of_int1(8191)))

predicate in_range_int2(x: int) = ((0 <= x) and (x <= 8191))

logic bool_eq7 : t1, t1 -> bool

axiom bool_eq_def6 :
  (forall x:t1. forall y:t1 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq4 : bits_13, bits_13 -> bool

logic dummy4 : bits_13

type bits_13__ref = { bits_13__content : bits_13
}

function bits_13__ref___projection(a: bits_13__ref) : bits_13 =
  (a).bits_13__content

logic to_rep4 : bits_13 -> t1

logic of_rep4 : t1 -> bits_13

axiom inversion_axiom4 :
  (forall x:bits_13 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:bits_13 [to_rep4(x)]. in_range3(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:t1 [to_rep4(of_rep4(x))]. (in_range3(urem1(x, of_int1(8192))) ->
  (to_rep4(of_rep4(x)) = urem1(x, of_int1(8192)))))

function to_int5(x: bits_13) : int = tqtint1(to_rep4(x))

axiom range_int_axiom3 :
  (forall x:bits_13 [to_int5(x)]. in_range_int2(to_int5(x)))

type bits_16

logic attr__ATTRIBUTE_MODULUS1 : t1

logic bool_eq8 : t1, t1 -> bool

axiom bool_eq_def7 :
  (forall x:t1. forall y:t1 [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq5 : bits_16, bits_16 -> bool

logic dummy5 : bits_16

type bits_16__ref = { bits_16__content : bits_16
}

function bits_16__ref___projection(a: bits_16__ref) : bits_16 =
  (a).bits_16__content

type map__ref = { map__content : (int,bits_8) farray
}

logic slide : (int,bits_8) farray, int, int -> (int,bits_8) farray

axiom slide_eq :
  (forall a:(int,bits_8) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bits_8) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bits_8) farray, int, int, (int,bits_8) farray, int,
  int -> (int,bits_8) farray

axiom concat_def :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bits_8, int -> (int,bits_8) farray

axiom singleton_def :
  (forall v:bits_8.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq9 : (int,bits_8) farray, int, int, (int,bits_8) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,bits_8) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bits_8) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep3((a[temp___idx_132])) = to_rep3((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep3((a[temp___idx_132])) = to_rep3((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep3((a[temp___idx_132])) = to_rep3((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,bits_8) farray, int, int, (int,bits_8) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq9(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq9(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep3((a[(i + 1)])), to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq9(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep3((a[(j + 1)])), to_rep3((b[(i + 1)]))))))))))))

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : natural, natural -> bool

logic dummy6 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type t2

logic first : t2 -> integer

logic last : t2 -> integer

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,bits_8) farray; rt : t2
}

function to_array(a: us_t) : (int,bits_8) farray = (a).elts

function of_array(a: (int,bits_8) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,bits_8) farray -> int

logic value__component__size : int

logic object__component__size : (int,bits_8) farray -> int

logic value__alignment : int

logic object__alignment : (int,bits_8) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,bits_8) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,bits_8) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,bits_8) farray. (0 <= object__alignment(a)))

function bool_eq11(x: us_t, y: us_t) : bool = bool_eq9((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy7 : (int,bits_8) farray

logic dummy8 : t2

type byte_array__ref = { byte_array__content : us_t
}

function byte_array__ref___projection(a: byte_array__ref) : us_t =
  (a).byte_array__content

type us_split_fields = { rec__dw1000__register_types__aon_cfg1_type__sleep_ce
: bits_1; rec__dw1000__register_types__aon_cfg1_type__smxx : bits_1;
rec__dw1000__register_types__aon_cfg1_type__lposc_c : bits_1;
rec__dw1000__register_types__aon_cfg1_type__reserved : bits_13
}

function us_split_fields_SLEEP_CE__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__aon_cfg1_type__sleep_ce

function us_split_fields_SMXX__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__aon_cfg1_type__smxx

function us_split_fields_LPOSC_C__projection(a: us_split_fields) : bits_1 =
  (a).rec__dw1000__register_types__aon_cfg1_type__lposc_c

function us_split_fields_Reserved__19__projection(a: us_split_fields) : bits_13 =
  (a).rec__dw1000__register_types__aon_cfg1_type__reserved

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___72__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___72__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  ((((((to_rep1(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__sleep_ce) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__sleep_ce)) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__smxx) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__smxx))) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__lposc_c) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__lposc_c))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__reserved) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__reserved))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__sleep_ce) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__sleep_ce)) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__smxx) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__smxx))) and
  (to_rep1(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__lposc_c) = to_rep1(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__lposc_c))) and
  (to_rep4(((a).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__reserved) = to_rep4(((b).us_split_fields1).rec__dw1000__register_types__aon_cfg1_type__reserved)))) ->
  (bool_eq12(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bits_1. forall a1:bits_1. forall a2:bits_1. forall a3:bits_13.
  (0 <= object__size1({ us_split_fields1 = {
  rec__dw1000__register_types__aon_cfg1_type__sleep_ce = a;
  rec__dw1000__register_types__aon_cfg1_type__smxx = a1;
  rec__dw1000__register_types__aon_cfg1_type__lposc_c = a2;
  rec__dw1000__register_types__aon_cfg1_type__reserved = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bits_1. forall a1:bits_1. forall a2:bits_1. forall a3:bits_13.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__dw1000__register_types__aon_cfg1_type__sleep_ce = a;
  rec__dw1000__register_types__aon_cfg1_type__smxx = a1;
  rec__dw1000__register_types__aon_cfg1_type__lposc_c = a2;
  rec__dw1000__register_types__aon_cfg1_type__reserved = a3 } })))

logic dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit : int

logic dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit : int

logic dw1000__register_types__aon_cfg1_type__sleep_ce__position : int

axiom dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit)

axiom dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit_axiom :
  (dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit <  dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit)

axiom dw1000__register_types__aon_cfg1_type__sleep_ce__position_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__sleep_ce__position)

logic dw1000__register_types__aon_cfg1_type__smxx__first__bit : int

logic dw1000__register_types__aon_cfg1_type__smxx__last__bit : int

logic dw1000__register_types__aon_cfg1_type__smxx__position : int

axiom dw1000__register_types__aon_cfg1_type__smxx__first__bit_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__smxx__first__bit)

axiom dw1000__register_types__aon_cfg1_type__smxx__last__bit_axiom :
  (dw1000__register_types__aon_cfg1_type__smxx__first__bit <  dw1000__register_types__aon_cfg1_type__smxx__last__bit)

axiom dw1000__register_types__aon_cfg1_type__smxx__position_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__smxx__position)

logic dw1000__register_types__aon_cfg1_type__lposc_c__first__bit : int

logic dw1000__register_types__aon_cfg1_type__lposc_c__last__bit : int

logic dw1000__register_types__aon_cfg1_type__lposc_c__position : int

axiom dw1000__register_types__aon_cfg1_type__lposc_c__first__bit_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__lposc_c__first__bit)

axiom dw1000__register_types__aon_cfg1_type__lposc_c__last__bit_axiom :
  (dw1000__register_types__aon_cfg1_type__lposc_c__first__bit <  dw1000__register_types__aon_cfg1_type__lposc_c__last__bit)

axiom dw1000__register_types__aon_cfg1_type__lposc_c__position_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__lposc_c__position)

logic dw1000__register_types__aon_cfg1_type__reserved__first__bit : int

logic dw1000__register_types__aon_cfg1_type__reserved__last__bit : int

logic dw1000__register_types__aon_cfg1_type__reserved__position : int

axiom dw1000__register_types__aon_cfg1_type__reserved__first__bit_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__reserved__first__bit)

axiom dw1000__register_types__aon_cfg1_type__reserved__last__bit_axiom :
  (dw1000__register_types__aon_cfg1_type__reserved__first__bit <  dw1000__register_types__aon_cfg1_type__reserved__last__bit)

axiom dw1000__register_types__aon_cfg1_type__reserved__position_axiom :
  (0 <= dw1000__register_types__aon_cfg1_type__reserved__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : bits_1

logic dummy10 : bits_1

logic dummy11 : bits_1

logic dummy12 : bits_13

type aon_cfg1_type__ref = { aon_cfg1_type__content : us_rep
}

function aon_cfg1_type__ref___projection(a: aon_cfg1_type__ref) : us_rep =
  (a).aon_cfg1_type__content

type bits_3

predicate in_range5(x: t) = (ule(of_int(0), x) and ule(x, of_int(7)))

predicate in_range_int3(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq13 : t, t -> bool

axiom bool_eq_def11 :
  (forall x:t. forall y:t [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic user_eq9 : bits_3, bits_3 -> bool

logic dummy13 : bits_3

type bits_3__ref = { bits_3__content : bits_3
}

function bits_3__ref___projection(a: bits_3__ref) : bits_3 =
  (a).bits_3__content

logic to_rep5 : bits_3 -> t

logic of_rep5 : t -> bits_3

axiom inversion_axiom5 :
  (forall x:bits_3 [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:bits_3 [to_rep5(x)]. in_range5(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (in_range5(urem(x, of_int(8))) ->
  (to_rep5(of_rep5(x)) = urem(x, of_int(8)))))

function to_int6(x: bits_3) : int = tqtint(to_rep5(x))

axiom range_int_axiom4 :
  (forall x:bits_3 [to_int6(x)]. in_range_int3(to_int6(x)))

type bits_4

predicate in_range6(x: t) = (ule(of_int(0), x) and ule(x, of_int(15)))

predicate in_range_int4(x: int) = ((0 <= x) and (x <= 15))

logic bool_eq14 : t, t -> bool

axiom bool_eq_def12 :
  (forall x:t. forall y:t [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t

logic user_eq10 : bits_4, bits_4 -> bool

logic dummy14 : bits_4

type bits_4__ref = { bits_4__content : bits_4
}

function bits_4__ref___projection(a: bits_4__ref) : bits_4 =
  (a).bits_4__content

logic to_rep6 : bits_4 -> t

logic of_rep6 : t -> bits_4

axiom inversion_axiom6 :
  (forall x:bits_4 [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:bits_4 [to_rep6(x)]. in_range6(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:t [to_rep6(of_rep6(x))]. (in_range6(urem(x, of_int(16))) ->
  (to_rep6(of_rep6(x)) = urem(x, of_int(16)))))

function to_int7(x: bits_4) : int = tqtint(to_rep6(x))

axiom range_int_axiom5 :
  (forall x:bits_4 [to_int7(x)]. in_range_int4(to_int7(x)))

type us_split_fields2 = {
rec__dw1000__register_types__pmsc_ctrl0_type__sysclks : bits_2;
rec__dw1000__register_types__pmsc_ctrl0_type__rxclks : bits_2;
rec__dw1000__register_types__pmsc_ctrl0_type__txclks : bits_2;
rec__dw1000__register_types__pmsc_ctrl0_type__face : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__adcce : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__amce : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__gpce : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__gprn : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__gpdce : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__khzclken : bits_1;
rec__dw1000__register_types__pmsc_ctrl0_type__softreset : bits_4;
rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 : bits_3;
rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 : bits_4;
rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 : bits_3;
rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 : bits_4
}

function us_split_fields_SYSCLKS__projection(a: us_split_fields2) : bits_2 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__sysclks

function us_split_fields_RXCLKS__projection(a: us_split_fields2) : bits_2 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__rxclks

function us_split_fields_TXCLKS__projection(a: us_split_fields2) : bits_2 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__txclks

function us_split_fields_FACE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__face

function us_split_fields_ADCCE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__adcce

function us_split_fields_AMCE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__amce

function us_split_fields_GPCE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__gpce

function us_split_fields_GPRN__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__gprn

function us_split_fields_GPDCE__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__gpdce

function us_split_fields_GPDRN__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn

function us_split_fields_KHZCLKEN__projection(a: us_split_fields2) : bits_1 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__khzclken

function us_split_fields_SOFTRESET__projection(a: us_split_fields2) : bits_4 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__softreset

function us_split_fields_Reserved_1__16__projection(a: us_split_fields2) : bits_3 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1

function us_split_fields_Reserved_2__16__projection(a: us_split_fields2) : bits_4 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2

function us_split_fields_Reserved_3__5__projection(a: us_split_fields2) : bits_3 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3

function us_split_fields_Reserved_4__2__projection(a: us_split_fields2) : bits_4 =
  (a).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___101__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___101__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq15 : us_rep1, us_rep1 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq15(a, b)].
  ((((((((((((((((((to_rep2(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__sysclks) = to_rep2(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__sysclks)) and
  (to_rep2(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__rxclks) = to_rep2(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__rxclks))) and
  (to_rep2(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__txclks) = to_rep2(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__txclks))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__face) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__face))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__adcce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__adcce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__amce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__amce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gprn) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gprn))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__khzclken) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__khzclken))) and
  (to_rep6(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__softreset) = to_rep6(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__softreset))) and
  (to_rep5(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1) = to_rep5(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1))) and
  (to_rep6(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2) = to_rep6(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2))) and
  (to_rep5(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3) = to_rep5(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3))) and
  (to_rep6(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4) = to_rep6(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((((((((((((((((to_rep2(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__sysclks) = to_rep2(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__sysclks)) and
  (to_rep2(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__rxclks) = to_rep2(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__rxclks))) and
  (to_rep2(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__txclks) = to_rep2(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__txclks))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__face) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__face))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__adcce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__adcce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__amce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__amce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gprn) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gprn))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdce) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdce))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn))) and
  (to_rep1(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__khzclken) = to_rep1(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__khzclken))) and
  (to_rep6(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__softreset) = to_rep6(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__softreset))) and
  (to_rep5(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1) = to_rep5(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1))) and
  (to_rep6(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2) = to_rep6(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2))) and
  (to_rep5(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3) = to_rep5(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3))) and
  (to_rep6(((a).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4) = to_rep6(((b).us_split_fields3).rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4)))) ->
  (bool_eq15(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bits_2. forall a1:bits_2. forall a2:bits_2. forall a3:bits_1.
  forall a4:bits_1. forall a5:bits_1. forall a6:bits_1. forall a7:bits_1.
  forall a8:bits_1. forall a9:bits_1. forall a10:bits_1. forall a11:bits_4.
  forall a12:bits_3. forall a13:bits_4. forall a14:bits_3. forall a15:bits_4.
  (0 <= object__size2({ us_split_fields3 = {
  rec__dw1000__register_types__pmsc_ctrl0_type__sysclks = a;
  rec__dw1000__register_types__pmsc_ctrl0_type__rxclks = a1;
  rec__dw1000__register_types__pmsc_ctrl0_type__txclks = a2;
  rec__dw1000__register_types__pmsc_ctrl0_type__face = a3;
  rec__dw1000__register_types__pmsc_ctrl0_type__adcce = a4;
  rec__dw1000__register_types__pmsc_ctrl0_type__amce = a5;
  rec__dw1000__register_types__pmsc_ctrl0_type__gpce = a6;
  rec__dw1000__register_types__pmsc_ctrl0_type__gprn = a7;
  rec__dw1000__register_types__pmsc_ctrl0_type__gpdce = a8;
  rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn = a9;
  rec__dw1000__register_types__pmsc_ctrl0_type__khzclken = a10;
  rec__dw1000__register_types__pmsc_ctrl0_type__softreset = a11;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 = a12;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 = a13;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 = a14;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 = a15 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bits_2. forall a1:bits_2. forall a2:bits_2. forall a3:bits_1.
  forall a4:bits_1. forall a5:bits_1. forall a6:bits_1. forall a7:bits_1.
  forall a8:bits_1. forall a9:bits_1. forall a10:bits_1. forall a11:bits_4.
  forall a12:bits_3. forall a13:bits_4. forall a14:bits_3. forall a15:bits_4.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__dw1000__register_types__pmsc_ctrl0_type__sysclks = a;
  rec__dw1000__register_types__pmsc_ctrl0_type__rxclks = a1;
  rec__dw1000__register_types__pmsc_ctrl0_type__txclks = a2;
  rec__dw1000__register_types__pmsc_ctrl0_type__face = a3;
  rec__dw1000__register_types__pmsc_ctrl0_type__adcce = a4;
  rec__dw1000__register_types__pmsc_ctrl0_type__amce = a5;
  rec__dw1000__register_types__pmsc_ctrl0_type__gpce = a6;
  rec__dw1000__register_types__pmsc_ctrl0_type__gprn = a7;
  rec__dw1000__register_types__pmsc_ctrl0_type__gpdce = a8;
  rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn = a9;
  rec__dw1000__register_types__pmsc_ctrl0_type__khzclken = a10;
  rec__dw1000__register_types__pmsc_ctrl0_type__softreset = a11;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 = a12;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 = a13;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 = a14;
  rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 = a15 } })))

logic dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__sysclks__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit <  dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__sysclks__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__sysclks__position)

logic dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__rxclks__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit <  dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__rxclks__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__rxclks__position)

logic dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__txclks__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit <  dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__txclks__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__txclks__position)

logic dw1000__register_types__pmsc_ctrl0_type__face__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__face__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__face__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__face__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__face__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__face__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__face__first__bit <  dw1000__register_types__pmsc_ctrl0_type__face__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__face__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__face__position)

logic dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__adcce__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit <  dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__adcce__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__adcce__position)

logic dw1000__register_types__pmsc_ctrl0_type__amce__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__amce__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__amce__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__amce__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__amce__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__amce__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__amce__first__bit <  dw1000__register_types__pmsc_ctrl0_type__amce__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__amce__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__amce__position)

logic dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gpce__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit <  dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gpce__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gpce__position)

logic dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gprn__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit <  dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gprn__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gprn__position)

logic dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gpdce__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit <  dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gpdce__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gpdce__position)

logic dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__gpdrn__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit <  dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__gpdrn__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__gpdrn__position)

logic dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__khzclken__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit <  dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__khzclken__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__khzclken__position)

logic dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__softreset__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit <  dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__softreset__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__softreset__position)

logic dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_1__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit <  dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_1__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_1__position)

logic dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_2__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit <  dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_2__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_2__position)

logic dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_3__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit <  dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_3__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_3__position)

logic dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit : int

logic dw1000__register_types__pmsc_ctrl0_type__reserved_4__position : int

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit_axiom :
  (dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit <  dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit)

axiom dw1000__register_types__pmsc_ctrl0_type__reserved_4__position_axiom :
  (0 <= dw1000__register_types__pmsc_ctrl0_type__reserved_4__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy15 : bits_2

logic dummy16 : bits_2

logic dummy17 : bits_2

logic dummy18 : bits_1

logic dummy19 : bits_1

logic dummy20 : bits_1

logic dummy21 : bits_1

logic dummy22 : bits_1

logic dummy23 : bits_1

logic dummy24 : bits_1

logic dummy25 : bits_1

logic dummy26 : bits_4

logic dummy27 : bits_3

logic dummy28 : bits_4

logic dummy29 : bits_3

logic dummy30 : bits_4

type pmsc_ctrl0_type__ref = { pmsc_ctrl0_type__content : us_rep1
}

function pmsc_ctrl0_type__ref___projection(a: pmsc_ctrl0_type__ref) : us_rep1 =
  (a).pmsc_ctrl0_type__content

type register_type__ref = { register_type__content : us_rep
}

function register_type__ref___71__projection(a: register_type__ref) : us_rep =
  (a).register_type__content

type register_type__ref1 = { register_type__content1 : us_rep1
}

function register_type__ref___100__projection(a: register_type__ref1) : us_rep1 =
  (a).register_type__content1

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type tTdataSP1

predicate in_range7(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : tTdataSP1, tTdataSP1 -> bool

logic dummy31 : tTdataSP1

type tTdataSP1__ref = { tTdataSP1__content : tTdataSP1
}

function tTdataSP1__ref___projection(a: tTdataSP1__ref) : tTdataSP1 =
  (a).tTdataSP1__content

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "dw1000-driver.adb", line 812, characters 0-0 *)
goal WP_parameter_def :
  (forall pmsc_ctrl0_reg__split_fields:bits_2.
  forall pmsc_ctrl0_reg__split_fields1:bits_2.
  forall pmsc_ctrl0_reg__split_fields2:bits_2.
  forall pmsc_ctrl0_reg__split_fields3:bits_1.
  forall pmsc_ctrl0_reg__split_fields4:bits_1.
  forall pmsc_ctrl0_reg__split_fields5:bits_1.
  forall pmsc_ctrl0_reg__split_fields6:bits_1.
  forall pmsc_ctrl0_reg__split_fields7:bits_1.
  forall pmsc_ctrl0_reg__split_fields8:bits_1.
  forall pmsc_ctrl0_reg__split_fields9:bits_1.
  forall pmsc_ctrl0_reg__split_fields10:bits_1.
  forall pmsc_ctrl0_reg__split_fields11:bits_4.
  forall pmsc_ctrl0_reg__split_fields12:bits_3.
  forall pmsc_ctrl0_reg__split_fields13:bits_4.
  forall pmsc_ctrl0_reg__split_fields14:bits_3.
  forall pmsc_ctrl0_reg__split_fields15:bits_4. forall o:bits_13.
  forall o1:bits_1. forall o2:bits_1. forall o3:bits_1. forall o4:bits_1.
  forall o5:bits_1. forall o6:bits_1. forall o7:bits_13. forall o8:bits_1.
  forall o9:bits_1. forall o10:bits_1. forall o11:bits_13.
  forall o12:bits_13. forall o13:bits_1. forall o14:bits_1.
  forall o15:bits_1. forall o16:bits_1. forall o17:bits_1. forall o18:bits_1.
  forall o19:bits_13. forall o20:bits_1. forall o21:bits_1.
  forall o22:bits_1. forall o23:bits_13. forall o24:bits_2.
  forall o25:bits_2. forall o26:bits_2. forall o27:bits_2. forall o28:bits_1.
  forall o29:bits_1. forall o30:bits_1. forall o31:bits_1. forall o32:bits_1.
  forall o33:bits_1. forall o34:bits_1. forall o35:bits_1. forall o36:bits_4.
  forall o37:bits_3. forall o38:bits_4. forall o39:bits_3. forall o40:bits_4.
  forall temp___3342:bits_2. forall temp___33421:bits_2.
  forall temp___33422:bits_2. forall temp___33423:bits_1.
  forall temp___33424:bits_1. forall temp___33425:bits_1.
  forall temp___33426:bits_1. forall temp___33427:bits_1.
  forall temp___33428:bits_1. forall temp___33429:bits_1.
  forall temp___334210:bits_1. forall temp___334211:bits_4.
  forall temp___334212:bits_3. forall temp___334213:bits_4.
  forall temp___334214:bits_3. forall temp___334215:bits_4.
  forall o41:bits_2. forall o42:bits_2. forall o43:bits_2. forall o44:bits_2.
  forall o45:bits_1. forall o46:bits_1. forall o47:bits_1. forall o48:bits_1.
  forall o49:bits_1. forall o50:bits_1. forall o51:bits_1. forall o52:bits_1.
  forall o53:bits_4. forall o54:bits_3. forall o55:bits_4. forall o56:bits_3.
  forall o57:bits_4. forall temp___3344:bits_2. forall temp___33441:bits_2.
  forall temp___33442:bits_2. forall temp___33443:bits_1.
  forall temp___33444:bits_1. forall temp___33445:bits_1.
  forall temp___33446:bits_1. forall temp___33447:bits_1.
  forall temp___33448:bits_1. forall temp___33449:bits_1.
  forall temp___334410:bits_1. forall temp___334411:bits_4.
  forall temp___334412:bits_3. forall temp___334413:bits_4.
  forall temp___334414:bits_3. forall temp___334415:bits_4.
  forall o58:integer. forall o59:integer.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields:bits_2.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields1:bits_2.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields2:bits_2.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields3:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields4:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields5:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields6:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields7:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields8:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields9:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields10:bits_1.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields11:bits_4.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields12:bits_3.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields13:bits_4.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields14:bits_3.
  forall dw1000__registers__pmsc_ctrl0__read__reg__fields15:bits_4.
  forall result:bits_2. forall result1:bits_2. forall result2:bits_2.
  forall result3:bits_1. forall result4:bits_1. forall result5:bits_1.
  forall result6:bits_1. forall result7:bits_1. forall result8:bits_1.
  forall result9:bits_1. forall result10:bits_1. forall result11:bits_4.
  forall result12:bits_3. forall result13:bits_4. forall result14:bits_3.
  forall result15:bits_4. forall pmsc_ctrl0_reg__split_fields16:bits_2.
  forall pmsc_ctrl0_reg__split_fields17:bits_2.
  forall pmsc_ctrl0_reg__split_fields18:bits_2.
  forall pmsc_ctrl0_reg__split_fields19:bits_1.
  forall pmsc_ctrl0_reg__split_fields20:bits_1.
  forall pmsc_ctrl0_reg__split_fields21:bits_1.
  forall pmsc_ctrl0_reg__split_fields22:bits_1.
  forall pmsc_ctrl0_reg__split_fields23:bits_1.
  forall pmsc_ctrl0_reg__split_fields24:bits_1.
  forall pmsc_ctrl0_reg__split_fields25:bits_1.
  forall pmsc_ctrl0_reg__split_fields26:bits_1.
  forall pmsc_ctrl0_reg__split_fields27:bits_4.
  forall pmsc_ctrl0_reg__split_fields28:bits_3.
  forall pmsc_ctrl0_reg__split_fields29:bits_4.
  forall pmsc_ctrl0_reg__split_fields30:bits_3.
  forall pmsc_ctrl0_reg__split_fields31:bits_4. forall result16:bits_2.
  forall result17:bits_2. forall result18:bits_2. forall result19:bits_1.
  forall result20:bits_1. forall result21:bits_1. forall result22:bits_1.
  forall result23:bits_1. forall result24:bits_1. forall result25:bits_1.
  forall result26:bits_1. forall result27:bits_4. forall result28:bits_3.
  forall result29:bits_4. forall result30:bits_3. forall result31:bits_4.
  forall pmsc_ctrl0_reg__split_fields32:bits_2.
  forall pmsc_ctrl0_reg__split_fields33:bits_2.
  forall pmsc_ctrl0_reg__split_fields34:bits_2.
  forall pmsc_ctrl0_reg__split_fields35:bits_1.
  forall pmsc_ctrl0_reg__split_fields36:bits_1.
  forall pmsc_ctrl0_reg__split_fields37:bits_1.
  forall pmsc_ctrl0_reg__split_fields38:bits_1.
  forall pmsc_ctrl0_reg__split_fields39:bits_1.
  forall pmsc_ctrl0_reg__split_fields40:bits_1.
  forall pmsc_ctrl0_reg__split_fields41:bits_1.
  forall pmsc_ctrl0_reg__split_fields42:bits_1.
  forall pmsc_ctrl0_reg__split_fields43:bits_4.
  forall pmsc_ctrl0_reg__split_fields44:bits_3.
  forall pmsc_ctrl0_reg__split_fields45:bits_4.
  forall pmsc_ctrl0_reg__split_fields46:bits_3.
  forall pmsc_ctrl0_reg__split_fields47:bits_4. forall result32:bits_2.
  forall result33:bits_2. forall result34:bits_2. forall result35:bits_1.
  forall result36:bits_1. forall result37:bits_1. forall result38:bits_1.
  forall result39:bits_1. forall result40:bits_1. forall result41:bits_1.
  forall result42:bits_1. forall result43:bits_4. forall result44:bits_3.
  forall result45:bits_4. forall result46:bits_3. forall result47:bits_4.
  forall pmsc_ctrl0_reg__split_fields48:bits_2.
  forall pmsc_ctrl0_reg__split_fields49:bits_2.
  forall pmsc_ctrl0_reg__split_fields50:bits_2.
  forall pmsc_ctrl0_reg__split_fields51:bits_1.
  forall pmsc_ctrl0_reg__split_fields52:bits_1.
  forall pmsc_ctrl0_reg__split_fields53:bits_1.
  forall pmsc_ctrl0_reg__split_fields54:bits_1.
  forall pmsc_ctrl0_reg__split_fields55:bits_1.
  forall pmsc_ctrl0_reg__split_fields56:bits_1.
  forall pmsc_ctrl0_reg__split_fields57:bits_1.
  forall pmsc_ctrl0_reg__split_fields58:bits_1.
  forall pmsc_ctrl0_reg__split_fields59:bits_4.
  forall pmsc_ctrl0_reg__split_fields60:bits_3.
  forall pmsc_ctrl0_reg__split_fields61:bits_4.
  forall pmsc_ctrl0_reg__split_fields62:bits_3.
  forall pmsc_ctrl0_reg__split_fields63:bits_4.
  ((((to_rep4(o) = of_int1(0)) and ((to_rep1(o1) = of_int(1)) and
  ((to_rep1(o2) = of_int(0)) and ((to_rep1(o3) = of_int(0)) and
  ((o3 = o4) and ((o2 = o5) and ((o1 = o6) and (o = o7)))))))) and
  ((o8 = o4) and ((o9 = o5) and ((o10 = o6) and (o11 = o7))))) ->
  ((((to_rep4(o12) = of_int1(0)) and ((to_rep1(o13) = of_int(0)) and
  ((to_rep1(o14) = of_int(0)) and ((to_rep1(o15) = of_int(0)) and
  ((o15 = o16) and ((o14 = o17) and ((o13 = o18) and (o12 = o19)))))))) and
  ((o20 = o16) and ((o21 = o17) and ((o22 = o18) and (o23 = o19))))) ->
  ((((result = pmsc_ctrl0_reg__split_fields) and
  ((result1 = pmsc_ctrl0_reg__split_fields1) and
  ((result2 = pmsc_ctrl0_reg__split_fields2) and
  ((result3 = pmsc_ctrl0_reg__split_fields3) and
  ((result4 = pmsc_ctrl0_reg__split_fields4) and
  ((result5 = pmsc_ctrl0_reg__split_fields5) and
  ((result6 = pmsc_ctrl0_reg__split_fields6) and
  ((result7 = pmsc_ctrl0_reg__split_fields7) and
  ((result8 = pmsc_ctrl0_reg__split_fields8) and
  ((result9 = pmsc_ctrl0_reg__split_fields9) and
  ((result10 = pmsc_ctrl0_reg__split_fields10) and
  ((result11 = pmsc_ctrl0_reg__split_fields11) and
  ((result12 = pmsc_ctrl0_reg__split_fields12) and
  ((result13 = pmsc_ctrl0_reg__split_fields13) and
  ((result14 = pmsc_ctrl0_reg__split_fields14) and
  (result15 = pmsc_ctrl0_reg__split_fields15)))))))))))))))) and
  ((pmsc_ctrl0_reg__split_fields16 = dw1000__registers__pmsc_ctrl0__read__reg__fields) and
  ((pmsc_ctrl0_reg__split_fields17 = dw1000__registers__pmsc_ctrl0__read__reg__fields1) and
  ((pmsc_ctrl0_reg__split_fields18 = dw1000__registers__pmsc_ctrl0__read__reg__fields2) and
  ((pmsc_ctrl0_reg__split_fields19 = dw1000__registers__pmsc_ctrl0__read__reg__fields3) and
  ((pmsc_ctrl0_reg__split_fields20 = dw1000__registers__pmsc_ctrl0__read__reg__fields4) and
  ((pmsc_ctrl0_reg__split_fields21 = dw1000__registers__pmsc_ctrl0__read__reg__fields5) and
  ((pmsc_ctrl0_reg__split_fields22 = dw1000__registers__pmsc_ctrl0__read__reg__fields6) and
  ((pmsc_ctrl0_reg__split_fields23 = dw1000__registers__pmsc_ctrl0__read__reg__fields7) and
  ((pmsc_ctrl0_reg__split_fields24 = dw1000__registers__pmsc_ctrl0__read__reg__fields8) and
  ((pmsc_ctrl0_reg__split_fields25 = dw1000__registers__pmsc_ctrl0__read__reg__fields9) and
  ((pmsc_ctrl0_reg__split_fields26 = dw1000__registers__pmsc_ctrl0__read__reg__fields10) and
  ((pmsc_ctrl0_reg__split_fields27 = dw1000__registers__pmsc_ctrl0__read__reg__fields11) and
  ((pmsc_ctrl0_reg__split_fields28 = dw1000__registers__pmsc_ctrl0__read__reg__fields12) and
  ((pmsc_ctrl0_reg__split_fields29 = dw1000__registers__pmsc_ctrl0__read__reg__fields13) and
  ((pmsc_ctrl0_reg__split_fields30 = dw1000__registers__pmsc_ctrl0__read__reg__fields14) and
  (pmsc_ctrl0_reg__split_fields31 = dw1000__registers__pmsc_ctrl0__read__reg__fields15))))))))))))))))) ->
  (((((to_rep2(o24) = of_int(1)) and ((o24 = o25) and
  ((pmsc_ctrl0_reg__split_fields17 = o26) and
  ((pmsc_ctrl0_reg__split_fields18 = o27) and
  ((pmsc_ctrl0_reg__split_fields19 = o28) and
  ((pmsc_ctrl0_reg__split_fields20 = o29) and
  ((pmsc_ctrl0_reg__split_fields21 = o30) and
  ((pmsc_ctrl0_reg__split_fields22 = o31) and
  ((pmsc_ctrl0_reg__split_fields23 = o32) and
  ((pmsc_ctrl0_reg__split_fields24 = o33) and
  ((pmsc_ctrl0_reg__split_fields25 = o34) and
  ((pmsc_ctrl0_reg__split_fields26 = o35) and
  ((pmsc_ctrl0_reg__split_fields27 = o36) and
  ((pmsc_ctrl0_reg__split_fields28 = o37) and
  ((pmsc_ctrl0_reg__split_fields29 = o38) and
  ((pmsc_ctrl0_reg__split_fields30 = o39) and
  (pmsc_ctrl0_reg__split_fields31 = o40))))))))))))))))) and
  ((temp___3342 = o25) and ((temp___33421 = o26) and
  ((temp___33422 = o27) and ((temp___33423 = o28) and
  ((temp___33424 = o29) and ((temp___33425 = o30) and
  ((temp___33426 = o31) and ((temp___33427 = o32) and
  ((temp___33428 = o33) and ((temp___33429 = o34) and
  ((temp___334210 = o35) and ((temp___334211 = o36) and
  ((temp___334212 = o37) and ((temp___334213 = o38) and
  ((temp___334214 = o39) and (temp___334215 = o40))))))))))))))))) and
  (((result16 = pmsc_ctrl0_reg__split_fields16) and
  ((result17 = pmsc_ctrl0_reg__split_fields17) and
  ((result18 = pmsc_ctrl0_reg__split_fields18) and
  ((result19 = pmsc_ctrl0_reg__split_fields19) and
  ((result20 = pmsc_ctrl0_reg__split_fields20) and
  ((result21 = pmsc_ctrl0_reg__split_fields21) and
  ((result22 = pmsc_ctrl0_reg__split_fields22) and
  ((result23 = pmsc_ctrl0_reg__split_fields23) and
  ((result24 = pmsc_ctrl0_reg__split_fields24) and
  ((result25 = pmsc_ctrl0_reg__split_fields25) and
  ((result26 = pmsc_ctrl0_reg__split_fields26) and
  ((result27 = pmsc_ctrl0_reg__split_fields27) and
  ((result28 = pmsc_ctrl0_reg__split_fields28) and
  ((result29 = pmsc_ctrl0_reg__split_fields29) and
  ((result30 = pmsc_ctrl0_reg__split_fields30) and
  (result31 = pmsc_ctrl0_reg__split_fields31)))))))))))))))) and
  ((temp___3342 = pmsc_ctrl0_reg__split_fields32) and
  ((temp___33421 = pmsc_ctrl0_reg__split_fields33) and
  ((temp___33422 = pmsc_ctrl0_reg__split_fields34) and
  ((temp___33423 = pmsc_ctrl0_reg__split_fields35) and
  ((temp___33424 = pmsc_ctrl0_reg__split_fields36) and
  ((temp___33425 = pmsc_ctrl0_reg__split_fields37) and
  ((temp___33426 = pmsc_ctrl0_reg__split_fields38) and
  ((temp___33427 = pmsc_ctrl0_reg__split_fields39) and
  ((temp___33428 = pmsc_ctrl0_reg__split_fields40) and
  ((temp___33429 = pmsc_ctrl0_reg__split_fields41) and
  ((temp___334210 = pmsc_ctrl0_reg__split_fields42) and
  ((temp___334211 = pmsc_ctrl0_reg__split_fields43) and
  ((temp___334212 = pmsc_ctrl0_reg__split_fields44) and
  ((temp___334213 = pmsc_ctrl0_reg__split_fields45) and
  ((temp___334214 = pmsc_ctrl0_reg__split_fields46) and
  (temp___334215 = pmsc_ctrl0_reg__split_fields47)))))))))))))))))) ->
  (((((to_rep2(o41) = of_int(0)) and
  ((pmsc_ctrl0_reg__split_fields32 = o42) and ((o41 = o43) and
  ((pmsc_ctrl0_reg__split_fields34 = o44) and
  ((pmsc_ctrl0_reg__split_fields35 = o45) and
  ((pmsc_ctrl0_reg__split_fields36 = o46) and
  ((pmsc_ctrl0_reg__split_fields37 = o47) and
  ((pmsc_ctrl0_reg__split_fields38 = o48) and
  ((pmsc_ctrl0_reg__split_fields39 = o49) and
  ((pmsc_ctrl0_reg__split_fields40 = o50) and
  ((pmsc_ctrl0_reg__split_fields41 = o51) and
  ((pmsc_ctrl0_reg__split_fields42 = o52) and
  ((pmsc_ctrl0_reg__split_fields43 = o53) and
  ((pmsc_ctrl0_reg__split_fields44 = o54) and
  ((pmsc_ctrl0_reg__split_fields45 = o55) and
  ((pmsc_ctrl0_reg__split_fields46 = o56) and
  (pmsc_ctrl0_reg__split_fields47 = o57))))))))))))))))) and
  ((temp___3344 = o42) and ((temp___33441 = o43) and
  ((temp___33442 = o44) and ((temp___33443 = o45) and
  ((temp___33444 = o46) and ((temp___33445 = o47) and
  ((temp___33446 = o48) and ((temp___33447 = o49) and
  ((temp___33448 = o50) and ((temp___33449 = o51) and
  ((temp___334410 = o52) and ((temp___334411 = o53) and
  ((temp___334412 = o54) and ((temp___334413 = o55) and
  ((temp___334414 = o56) and (temp___334415 = o57))))))))))))))))) and
  (((result32 = pmsc_ctrl0_reg__split_fields32) and
  ((result33 = pmsc_ctrl0_reg__split_fields33) and
  ((result34 = pmsc_ctrl0_reg__split_fields34) and
  ((result35 = pmsc_ctrl0_reg__split_fields35) and
  ((result36 = pmsc_ctrl0_reg__split_fields36) and
  ((result37 = pmsc_ctrl0_reg__split_fields37) and
  ((result38 = pmsc_ctrl0_reg__split_fields38) and
  ((result39 = pmsc_ctrl0_reg__split_fields39) and
  ((result40 = pmsc_ctrl0_reg__split_fields40) and
  ((result41 = pmsc_ctrl0_reg__split_fields41) and
  ((result42 = pmsc_ctrl0_reg__split_fields42) and
  ((result43 = pmsc_ctrl0_reg__split_fields43) and
  ((result44 = pmsc_ctrl0_reg__split_fields44) and
  ((result45 = pmsc_ctrl0_reg__split_fields45) and
  ((result46 = pmsc_ctrl0_reg__split_fields46) and
  (result47 = pmsc_ctrl0_reg__split_fields47)))))))))))))))) and
  ((pmsc_ctrl0_reg__split_fields48 = temp___3344) and
  ((pmsc_ctrl0_reg__split_fields49 = temp___33441) and
  ((pmsc_ctrl0_reg__split_fields50 = temp___33442) and
  ((pmsc_ctrl0_reg__split_fields51 = temp___33443) and
  ((pmsc_ctrl0_reg__split_fields52 = temp___33444) and
  ((pmsc_ctrl0_reg__split_fields53 = temp___33445) and
  ((pmsc_ctrl0_reg__split_fields54 = temp___33446) and
  ((pmsc_ctrl0_reg__split_fields55 = temp___33447) and
  ((pmsc_ctrl0_reg__split_fields56 = temp___33448) and
  ((pmsc_ctrl0_reg__split_fields57 = temp___33449) and
  ((pmsc_ctrl0_reg__split_fields58 = temp___334410) and
  ((pmsc_ctrl0_reg__split_fields59 = temp___334411) and
  ((pmsc_ctrl0_reg__split_fields60 = temp___334412) and
  ((pmsc_ctrl0_reg__split_fields61 = temp___334413) and
  ((pmsc_ctrl0_reg__split_fields62 = temp___334414) and
  (pmsc_ctrl0_reg__split_fields63 = temp___334415)))))))))))))))))) ->
  ((to_rep(o59) = 2) -> ((to_rep(o58) = 1) ->
  (((to_rep(o58) <= to_rep(o59)) ->
  (((to_rep(o59) - to_rep(o58)) + 1) <= 256)) and
  ((not (to_rep(o58) <= to_rep(o59))) -> (0 <= 256)))))))))))
