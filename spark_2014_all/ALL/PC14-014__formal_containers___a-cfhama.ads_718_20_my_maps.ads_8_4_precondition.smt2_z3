;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-fun dummy () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int2 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort hash_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (hash_type hash_type) Bool)

(declare-fun dummy1 () hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(declare-fun to_rep1 (hash_type) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x hash_type)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__my_maps__m__map__capacity count_type)(rec__my_maps__m__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__my_maps__m__map__capacity a))

(define-fun us_split_discrs_2__projection ((a us_split_discrs)) hash_type
  (rec__my_maps__m__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__my_maps__m__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__my_maps__m__map a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__my_maps__m__map__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__my_maps__m__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__my_maps__m__map__modulus
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__my_maps__m__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__my_maps__m__map (us_split_fields1 a))
                           (rec__my_maps__m__map (us_split_fields1 b))) true))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun my_maps__m__map__capacity__first__bit () Int)

(declare-fun my_maps__m__map__capacity__last__bit () Int)

(declare-fun my_maps__m__map__capacity__position () Int)

;; my_maps__m__map__capacity__first__bit_axiom
  (assert (<= 0 my_maps__m__map__capacity__first__bit))

;; my_maps__m__map__capacity__last__bit_axiom
  (assert
  (< my_maps__m__map__capacity__first__bit my_maps__m__map__capacity__last__bit))

;; my_maps__m__map__capacity__position_axiom
  (assert (<= 0 my_maps__m__map__capacity__position))

(declare-fun my_maps__m__map__modulus__first__bit () Int)

(declare-fun my_maps__m__map__modulus__last__bit () Int)

(declare-fun my_maps__m__map__modulus__position () Int)

;; my_maps__m__map__modulus__first__bit_axiom
  (assert (<= 0 my_maps__m__map__modulus__first__bit))

;; my_maps__m__map__modulus__last__bit_axiom
  (assert
  (< my_maps__m__map__modulus__first__bit my_maps__m__map__modulus__last__bit))

;; my_maps__m__map__modulus__position_axiom
  (assert (<= 0 my_maps__m__map__modulus__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__my_maps__m__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__my_maps__m__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__my_maps__m__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__my_maps__m__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun my_maps__m__cursor__node__first__bit () Int)

(declare-fun my_maps__m__cursor__node__last__bit () Int)

(declare-fun my_maps__m__cursor__node__position () Int)

;; my_maps__m__cursor__node__first__bit_axiom
  (assert (<= 0 my_maps__m__cursor__node__first__bit))

;; my_maps__m__cursor__node__last__bit_axiom
  (assert
  (< my_maps__m__cursor__node__first__bit my_maps__m__cursor__node__last__bit))

;; my_maps__m__cursor__node__position_axiom
  (assert (<= 0 my_maps__m__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-fun dummy3 () us_rep1)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-fun no_element () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_173 Int)
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool)) Bool (=>
                                      (or (= temp___is_init_170 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_173)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__my_maps__m__map__capacity (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-fun dummy4 () us_rep2)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref_3__projection ((a map__ref1)) us_rep2 (map__content1 a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref_3__projection ((a key_type__ref)) us_rep1 (key_type__content
                                                                    a))

(declare-fun get (us_rep2 us_rep1) Int)

(declare-fun get__function_guard (Int us_rep2 us_rep1) Bool)

(declare-sort element_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-fun dummy5 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_4__projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_411 Int)
  (temp___is_init_408 Bool) (temp___skip_constant_409 Bool)
  (temp___do_toplevel_410 Bool)) Bool (=>
                                      (or (= temp___is_init_408 true)
                                      (<= 1 2147483647)) (in_range2
                                      temp___expr_411)))

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard2 (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption ((temp___expr_418 us_rep2)
  (temp___skip_top_level_419 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_419 true))
                                         (and
                                         (= (is_empty temp___expr_418) true)
                                         (= (length2 temp___expr_418) 0))))

(declare-fun has_key (us_rep2 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)

(declare-fun witness (us_rep2 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep1) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (get container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key container k) true)
     (= (= (bool_eq1 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant1 result true false true)))) :pattern ((get container
                                                              key)) ))))

(declare-fun positions (us_rep) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and (and (<= 1 (get result i)) (<= (get result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get result i) (get result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun has_element1 (Int us_rep us_rep1) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)

;; has_element__post__dispatch_axiom
  (assert true)

(declare-fun container () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun position () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant2 ((temp___expr_167 (_ BitVec 32))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool true)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-fun dummy6 () us_rep3)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep3)))))
(define-fun map__ref_2__projection ((a map__ref2)) us_rep3 (map__content2 a))

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(declare-fun is_empty1 (us_rep3) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep3) Bool)

(define-fun default_initial_assumption1 ((temp___expr_367 us_rep3)
  (temp___skip_top_level_368 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_368 true))
                                         (and
                                         (= (is_empty1 temp___expr_367) true)
                                         (= (length3 temp___expr_367) 0))))

(declare-fun model__ (us_rep) us_rep3)

(declare-fun model____function_guard (us_rep3 us_rep) Bool)

;; model____post_axiom
  (assert true)

(declare-fun oeq2 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(declare-sort key_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (key_type key_type) Bool)

(declare-fun dummy7 () key_type)

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 key_type)))))
(define-fun key_type__ref_2__projection ((a key_type__ref1)) key_type
  (key_type__content1 a))

(define-fun dynamic_invariant3 ((temp___expr_354 Int)
  (temp___is_init_351 Bool) (temp___skip_constant_352 Bool)
  (temp___do_toplevel_353 Bool)) Bool (=>
                                      (or (= temp___is_init_351 true)
                                      (<= 1 2147483647)) (in_range3
                                      temp___expr_354)))

(declare-fun has_key1 (us_rep3 Int) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep3 Int) Bool)

;; has_key__post_axiom
  (assert
  (forall ((container1 us_rep3))
  (forall ((key Int))
  (! (=> (dynamic_invariant3 key true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range3 k) (= (has_key1 container1 k) true)) (= k key)))
     (= (has_key1 container1 key) true)))) :pattern ((has_key1 container1
                                                     key)) ))))

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (element_type1 element_type1) Bool)

(declare-fun dummy8 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_360 Int)
  (temp___is_init_357 Bool) (temp___skip_constant_358 Bool)
  (temp___do_toplevel_359 Bool)) Bool (=>
                                      (or (= temp___is_init_357 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_360)))

(declare-fun witness1 (us_rep3 Int) Int)

(declare-fun witness__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun w_get1 (us_rep3 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container1 us_rep3))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant3 key true true true)
     (= (has_key1 container1 key) true))
     (let ((result (get1 container1 key)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get1 container1 (witness1 container1 key)))
     (forall ((k Int))
     (=> (and (in_range3 k) (= (has_key1 container1 k) true))
     (= (= k key) (= (witness1 container1 key) (witness1 container1 k)))))))
     (dynamic_invariant4 result true false true)))) :pattern ((get1
                                                              container1 key)) ))))

;; length__post_axiom
  (assert
  (forall ((container1 us_rep3)) (! (dynamic_invariant (length3 container1)
  true false true) :pattern ((length3 container1)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key Int))
     (=> (and (in_range3 key) (= (has_key1 left key) true))
     (and (= (has_key1 right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key Int))
     (=> (and (in_range3 key) (= (has_key1 right key) true))
     (= (has_key1 left key) true))))) :pattern ((oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container1 us_rep3))
  (! (= (= (is_empty1 container1) true)
     (forall ((key Int))
     (not (and (in_range3 key) (= (has_key1 container1 key) true))))) :pattern (
  (is_empty1 container1)) )))

(declare-fun has_witness (us_rep3 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container1 us_rep3))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant3 key true true true)
     (= (has_key1 container1 key) true))
     (let ((result (witness1 container1 key)))
     (and (= (has_witness container1 result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness1 container1 key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container1 us_rep3))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true)
     (= (has_witness container1 witness2) true)) (dynamic_invariant4
     (w_get1 container1 witness2) true false true)) :pattern ((w_get1
                                                              container1
                                                              witness2)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container1 us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key container1 k) true) (= (bool_eq1 k key) true)))
     (= (has_key container1 key) true))) :pattern ((has_key container1 key)) ))))

;; length__post_axiom
  (assert
  (forall ((container1 us_rep2)) (! (dynamic_invariant (length2 container1)
  true false true) :pattern ((length2 container1)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container1 us_rep2))
  (! (= (= (is_empty container1) true)
     (forall ((key us_rep1)) (not (= (has_key container1 key) true)))) :pattern (
  (is_empty container1)) )))

(declare-fun has_witness1 (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container1 us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container1 key) true)
     (let ((result (witness container1 key)))
     (and (= (has_witness1 container1 result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container1 key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container1 us_rep2))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true)
     (= (has_witness1 container1 witness2) true)) (dynamic_invariant1
     (w_get container1 witness2) true false true)) :pattern ((w_get
                                                             container1
                                                             witness2)) ))))

(declare-fun o () count_type)

(declare-fun o1 () count_type)

(declare-fun temp___968 () count_type)

(declare-fun o2 () us_rep2)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___968 o1))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 temp___968)) no_element))

;; H
  (assert
  (or (= (has_key (positions container) position) true)
  (= (bool_eq1 position no_element) true)))

;; H
  (assert (not (= (bool_eq1 position no_element) true)))

;; H
  (assert
  (and (= o3 (length container))
  (and (in_range1 o3)
  (<= o3 (to_rep
         (rec__my_maps__m__map__capacity (us_split_discrs1 container)))))))

;; H
  (assert
  (and (= o2 (positions container))
  (and (not (= (has_key o2 no_element) true))
  (forall ((i us_rep1))
  (=> (= (has_key o2 i) true)
  (and (and (<= 1 (get o2 i)) (<= (get o2 i) (length container)))
  (forall ((j us_rep1))
  (=> (= (has_key o2 j) true)
  (=> (= (get o2 i) (get o2 j)) (= (bool_eq1 i j) true))))))))))

(assert
;; WP_parameter_def
 ;; File "a-cfhama.ads", line 702, characters 0-0
  (not (= (has_key o2 position) true)))
(check-sat)
(exit)
