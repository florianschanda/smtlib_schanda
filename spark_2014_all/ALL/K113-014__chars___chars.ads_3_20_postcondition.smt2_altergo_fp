(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type character

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

type wide_character

predicate in_range1(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : wide_character, wide_character -> bool

logic dummy1 : wide_character

type wide_character__ref = { wide_character__content : wide_character
}

function wide_character__ref___projection(a: wide_character__ref) : wide_character =
  (a).wide_character__content

type wide_wide_character

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : wide_wide_character, wide_wide_character -> bool

logic dummy2 : wide_wide_character

type wide_wide_character__ref = { wide_wide_character__content :
wide_wide_character
}

function wide_wide_character__ref___projection(a: wide_wide_character__ref) : wide_wide_character =
  (a).wide_wide_character__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

 (* File "chars.ads", line 2, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall y:int. forall wx:int. forall wy:int. forall wwx:int.
  forall wwy:int. forall z:bool. forall wz:bool. forall wwz:bool.
  forall f:int. forall wf:int. forall wwf:int.
  forall chars__doit__result:bool. forall result:int. forall x1:int.
  forall result1:int. forall y1:int. forall result2:int. forall wx1:int.
  forall result3:int. forall wy1:int. forall result4:int. forall wwx1:int.
  forall result5:int. forall wwy1:int. forall result6:bool. forall z1:bool.
  forall result7:bool. forall wz1:bool. forall result8:bool.
  forall wwz1:bool. forall result9:int. forall f1:int. forall result10:int.
  forall wf1:int. forall result11:int. forall wwf1:int. forall result12:bool.
  forall chars__doit__result1:bool. forall chars__doit__result2:bool.
  forall chars__doit__result3:bool. forall x2:int. forall y2:int.
  forall wx2:int. forall wy2:int. forall wwx2:int. forall wwy2:int.
  forall z2:bool. forall wz2:bool. forall wwz2:bool. forall f2:int.
  forall wf2:int. forall wwf2:int. forall chars__doit__result4:bool.
  forall x3:int. forall y3:int. forall wx3:int. forall wy3:int.
  forall wwx3:int. forall wwy3:int. forall z3:bool. forall wz3:bool.
  forall wwz3:bool. forall f3:int. forall wf3:int. forall wwf3:int.
  forall chars__doit__result5:bool.
  (forall result13:bool. ((((((result = x) and (x1 = 65)) and
  (in_range(x1) and (((result1 = y) and (y1 = 97)) and (in_range(y1) and
  (((result2 = wx) and (wx1 = 65)) and (in_range1(wx1) and
  (((result3 = wy) and (wy1 = 97)) and (in_range1(wy1) and
  (((result4 = wwx) and (wwx1 = 65)) and (in_range2(wwx1) and
  (((result5 = wwy) and (wwy1 = 97)) and (in_range2(wwy1) and
  (((result6 = z) and (((x1 <  y1) and (z1 = true)) or ((not (x1 <  y1)) and
  (z1 = false)))) and (((result7 = wz) and (((wx1 <  wy1) and
  (wz1 = true)) or ((not (wx1 <  wy1)) and (wz1 = false)))) and
  (((result8 = wwz) and (((wwx1 <  wwy1) and (wwz1 = true)) or
  ((not (wwx1 <  wwy1)) and (wwz1 = false)))) and (((result9 = f) and
  (f1 = 0)) and (in_range(f1) and (((result10 = wf) and (wf1 = 0)) and
  (in_range1(wf1) and (((result11 = wwf) and (wwf1 = 0)) and
  (in_range2(wwf1) and (((chars__doit__result1 = chars__doit__result2) and
  (chars__doit__result3 = chars__doit__result1)) and
  ((result12 = chars__doit__result) and (((((z1 = true) and (wz1 = true)) and
  (wwz1 = true)) and (chars__doit__result1 = true)) or
  ((not (((z1 = true) and (wz1 = true)) and (wwz1 = true))) and
  (chars__doit__result1 = false)))))))))))))))))))))))))) and ((({
  bool__content = chars__doit__result4 } = { bool__content =
  chars__doit__result2 }) and ((wwf2 = wwf1) and ((wf2 = wf1) and
  ((f2 = f1) and ((wwz2 = wwz1) and ((wz2 = wz1) and ((z2 = z1) and
  ((wwy2 = wwy1) and ((wwx2 = wwx1) and ((wy2 = wy1) and ((wx2 = wx1) and
  ((y2 = y1) and (x2 = x1))))))))))))) and
  ((chars__doit__result5 = chars__doit__result3) and ((wwf3 = wwf1) and
  ((wf3 = wf1) and ((f3 = f1) and ((wwz3 = wwz1) and ((wz3 = wz1) and
  ((z3 = z1) and ((wwy3 = wwy1) and ((wwx3 = wwx1) and ((wy3 = wy1) and
  ((wx3 = wx1) and ((y3 = y1) and (x3 = x1))))))))))))))) and
  (result13 = chars__doit__result4)) -> (chars__doit__result4 = true))))
