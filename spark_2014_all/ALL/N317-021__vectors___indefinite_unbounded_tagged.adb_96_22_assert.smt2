;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__indefinite_unbounded_tagged__t__c integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) integer
  (rec__indefinite_unbounded_tagged__t__c a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__indefinite_unbounded_tagged__t__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__indefinite_unbounded_tagged__t__c
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const indefinite_unbounded_tagged__t__c__first__bit Int)

(declare-const indefinite_unbounded_tagged__t__c__last__bit Int)

(declare-const indefinite_unbounded_tagged__t__c__position Int)

;; indefinite_unbounded_tagged__t__c__first__bit_axiom
  (assert (<= 0 indefinite_unbounded_tagged__t__c__first__bit))

;; indefinite_unbounded_tagged__t__c__last__bit_axiom
  (assert
  (< indefinite_unbounded_tagged__t__c__first__bit indefinite_unbounded_tagged__t__c__last__bit))

;; indefinite_unbounded_tagged__t__c__position_axiom
  (assert (<= 0 indefinite_unbounded_tagged__t__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-sort capacity_range 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (capacity_range capacity_range) Bool)

(declare-const dummy2 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__indefinite_unbounded_tagged__vect__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range
  (rec__indefinite_unbounded_tagged__vect__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__indefinite_unbounded_tagged__vect__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type
  (rec__indefinite_unbounded_tagged__vect__vector a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                 a))

(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const indefinite_unbounded_tagged__vect__vector__capacity__first__bit Int)

(declare-const indefinite_unbounded_tagged__vect__vector__capacity__last__bit Int)

(declare-const indefinite_unbounded_tagged__vect__vector__capacity__position Int)

;; indefinite_unbounded_tagged__vect__vector__capacity__first__bit_axiom
  (assert
  (<= 0 indefinite_unbounded_tagged__vect__vector__capacity__first__bit))

;; indefinite_unbounded_tagged__vect__vector__capacity__last__bit_axiom
  (assert
  (< indefinite_unbounded_tagged__vect__vector__capacity__first__bit
  indefinite_unbounded_tagged__vect__vector__capacity__last__bit))

;; indefinite_unbounded_tagged__vect__vector__capacity__position_axiom
  (assert
  (<= 0 indefinite_unbounded_tagged__vect__vector__capacity__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((vector__ref 0))
(((mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content
                                                               a))

(declare-fun to_rep1 (capacity_range) Int)

(declare-fun of_rep1 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun capacity ((container us_rep1)) Int (ite (= (of_int 0) true)
                                               (to_rep1
                                               (rec__indefinite_unbounded_tagged__vect__vector__capacity
                                               (us_split_discrs1 container)))
                                               2147483647))

(declare-fun capacity__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant ((temp___expr_248 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)) Bool (=>
                                      (or (= temp___is_init_245 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_248)))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant result true
     false true))) :pattern ((length container)) )))

(declare-fun empty_vector (tuple0) us_rep1)

(declare-fun empty_vector__function_guard (us_rep1 tuple0) Bool)

;; empty_vector__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (length (empty_vector us_void_param)) 0) :pattern ((empty_vector
                                                           us_void_param)) )))

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq1 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                   a))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(declare-fun get (us_rep2 Int) us_rep)

(declare-fun get__function_guard (us_rep us_rep2 Int) Bool)

(define-fun oeq1 ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (let ((temp___133
                                                                   (get right
                                                                   n)))
                                                                   (let ((temp___132
                                                                   (get left
                                                                   n)))
                                                                   (and
                                                                   (ite (=
                                                                   (attr__tag
                                                                   temp___132)
                                                                   (attr__tag
                                                                   temp___133))
                                                                   true
                                                                   false)
                                                                   (us_dispatch_eq
                                                                   temp___132
                                                                   temp___133)))) true)))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun model__ (us_rep1) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep1) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

(define-fun last_index ((container us_rep1)) Int (last (model__ container)))

(declare-fun last_index__function_guard (Int us_rep1) Bool)

(declare-sort extended_index 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (extended_index extended_index) Bool)

(declare-const dummy5 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_242 Int)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)) Bool (=>
                                      (or (= temp___is_init_239 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_242)))

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-fun copy (us_rep1 Int) us_rep1)

(declare-fun copy__function_guard (us_rep1 us_rep1 Int) Bool)

;; copy__post_axiom
  (assert
  (forall ((source us_rep1))
  (forall ((capacity1 Int))
  (! (=>
     (and (dynamic_invariant capacity1 true true true)
     (=> (= (of_int 0) true)
     (or (= capacity1 0) (<= (length source) capacity1))))
     (let ((result (copy source capacity1)))
     (and (= (oeq1 (model__ result) (model__ source)) true)
     (ite (= capacity1 0)
     (= (to_rep1
        (rec__indefinite_unbounded_tagged__vect__vector__capacity
        (us_split_discrs1 result))) (length source))
     (= (to_rep1
        (rec__indefinite_unbounded_tagged__vect__vector__capacity
        (us_split_discrs1 result))) capacity1))))) :pattern ((copy source
                                                             capacity1)) ))))

(declare-fun first_index__function_guard (Int us_rep1) Bool)

(declare-sort index_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (index_type index_type) Bool)

(declare-const dummy6 index_type)

(declare-datatypes ((index_type__ref 0))
(((mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_232 Int)
  (temp___is_init_229 Bool) (temp___skip_constant_230 Bool)
  (temp___do_toplevel_231 Bool)) Bool (=>
                                      (or (= temp___is_init_229 true)
                                      (<= 1 2147483647)) (in_range4
                                      temp___expr_232)))

(define-fun element ((container us_rep1)
  (index Int)) us_rep (get (model__ container) index))

(declare-fun element__function_guard (us_rep us_rep1 Int) Bool)

(define-fun default_initial_assumption ((temp___expr_218 us_rep)
  (temp___skip_top_level_219 Bool)) Bool (= (attr__tag temp___expr_218)
  us_tag))

(define-fun equal_except ((left us_rep2) (right us_rep2)
  (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (let ((temp___141
                                                                    (get
                                                                    right i)))
                                                                    (let ((temp___140
                                                                    (get left
                                                                    i)))
                                                                    (and
                                                                    (ite (=
                                                                    (attr__tag
                                                                    temp___140)
                                                                    (attr__tag
                                                                    temp___141))
                                                                    true
                                                                    false)
                                                                    (us_dispatch_eq
                                                                    temp___140
                                                                    temp___141)))) true))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)

(define-fun ole ((left us_rep2)
  (right us_rep2)) Bool (and (<= (length1 left) (length1 right)) (ite
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n
                                                                 (last left)))
                                                                 (= (let ((temp___137
                                                                    (get
                                                                    right n)))
                                                                    (let ((temp___136
                                                                    (get left
                                                                    n)))
                                                                    (and
                                                                    (ite (=
                                                                    (attr__tag
                                                                    temp___136)
                                                                    (attr__tag
                                                                    temp___137))
                                                                    true
                                                                    false)
                                                                    (us_dispatch_eq
                                                                    temp___136
                                                                    temp___137)))) true)))
                                                                 true false)))

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

(define-fun range_shifted ((left us_rep2) (right us_rep2) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (let ((temp___147 (get right (+ i offset))))
                                  (let ((temp___146 (get left i)))
                                  (and (ite (= (attr__tag temp___146)
                                       (attr__tag temp___147)) true false)
                                  (us_dispatch_eq temp___146 temp___147)))) true)))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (let ((temp___149 (get right i)))
                                              (let ((temp___148 (get left
                                                                (- i offset))))
                                              (and (ite (= (attr__tag
                                                           temp___148)
                                                   (attr__tag temp___149))
                                                   true false) (us_dispatch_eq
                                                               temp___148
                                                               temp___149)))) true)))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep2 us_rep2 Int Int
  Int) Bool)

(define-fun olt ((left us_rep2)
  (right us_rep2)) Bool (and (< (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (let ((temp___135
                                                                   (get right
                                                                   n)))
                                                                   (let ((temp___134
                                                                   (get left
                                                                   n)))
                                                                   (and
                                                                   (ite (=
                                                                   (attr__tag
                                                                   temp___134)
                                                                   (attr__tag
                                                                   temp___135))
                                                                   true
                                                                   false)
                                                                   (us_dispatch_eq
                                                                   temp___134
                                                                   temp___135)))) true)))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)

(define-fun m_elements_reversed ((left us_rep2)
  (right us_rep2)) Bool (and (and (= (length1 left) (length1 right))
  (ite (forall ((i Int))
       (=> (and (<= 1 i) (<= i (last left)))
       (= (let ((temp___157 (get right (+ (- (last left) i) 1))))
          (let ((temp___156 (get left i)))
          (and (ite (= (attr__tag temp___156) (attr__tag temp___157)) true
               false) (us_dispatch_eq temp___156 temp___157)))) true)))
  true false)) (ite (forall ((i Int))
                    (=> (and (<= 1 i) (<= i (last right)))
                    (= (let ((temp___159 (get left (+ (- (last left) i) 1))))
                       (let ((temp___158 (get right i)))
                       (and (ite (= (attr__tag temp___158) (attr__tag
                                                           temp___159))
                            true false) (us_dispatch_eq temp___158
                                        temp___159)))) true)))
               true false)))

(declare-fun m_elements_reversed__function_guard (Bool us_rep2 us_rep2) Bool)

(define-fun equal_except__2 ((left us_rep2) (right us_rep2) (x Int)
  (y Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                             ((i Int))
                                                             (=>
                                                             (and (<= 1 i)
                                                             (<= i (last
                                                                   left)))
                                                             (=>
                                                             (and
                                                             (not (= i x))
                                                             (not (= i y)))
                                                             (= (let ((temp___143
                                                                (get right i)))
                                                                (let ((temp___142
                                                                (get left i)))
                                                                (and
                                                                (ite (=
                                                                (attr__tag
                                                                temp___142)
                                                                (attr__tag
                                                                temp___143))
                                                                true false)
                                                                (us_dispatch_eq
                                                                temp___142
                                                                temp___143)))) true))))
                                                        true false)))

(declare-fun equal_except__2__function_guard (Bool us_rep2 us_rep2 Int
  Int) Bool)

(define-fun m_elements_swapped ((left us_rep2) (right us_rep2) (x Int)
  (y Int)) Bool (and (and (and (= (length1 left) (length1 right)) (let ((temp___161
                                                                  (get right
                                                                  y)))
                                                                  (let ((temp___160
                                                                  (get left
                                                                  x)))
                                                                  (and
                                                                  (ite (=
                                                                  (attr__tag
                                                                  temp___160)
                                                                  (attr__tag
                                                                  temp___161))
                                                                  true false)
                                                                  (us_dispatch_eq
                                                                  temp___160
                                                                  temp___161)))))
  (let ((temp___163 (get right x)))
  (let ((temp___162 (get left y)))
  (and (ite (= (attr__tag temp___162) (attr__tag temp___163)) true false)
  (us_dispatch_eq temp___162 temp___163))))) (equal_except__2 left right x y)))

(declare-fun m_elements_swapped__function_guard (Bool us_rep2 us_rep2 Int
  Int) Bool)

(define-fun first_element ((container us_rep1)) us_rep (get
                                                       (model__ container) 1))

(declare-fun first_element__function_guard (us_rep us_rep1) Bool)

(define-fun last_element ((container us_rep1)) us_rep (get
                                                      (model__ container)
                                                      (last_index container)))

(declare-fun last_element__function_guard (us_rep us_rep1) Bool)

(declare-fun find_index (us_rep1 us_rep Int) Int)

(declare-fun find_index__function_guard (Int us_rep1 us_rep Int) Bool)

(define-fun contains ((container us_rep2) (fst Int) (lst Int)
  (item us_rep)) Bool (ite (exists ((i Int))
                           (and (and (<= fst i) (<= i lst))
                           (= (let ((temp___138 (get container i)))
                              (and (ite (= (attr__tag temp___138) (attr__tag
                                                                  item))
                                   true false) (us_dispatch_eq temp___138
                                               item))) true)))
                      true false))

(declare-fun contains__function_guard (Bool us_rep2 Int Int us_rep) Bool)

;; find_index__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((item us_rep))
  (forall ((index Int))
  (! (=> (dynamic_invariant2 index true true true)
     (let ((result (find_index container item index)))
     (and
     (ite (or (< (last_index container) index)
          (not
          (= (contains (model__ container) index (last_index container) item) true)))
     (= result 0)
     (and
     (and (and (<= index result) (<= result (last_index container)))
     (= (let ((temp___441 (get (model__ container) result)))
        (and (ite (= (attr__tag temp___441) (attr__tag item)) true false)
        (us_dispatch_eq temp___441 item))) true))
     (not (= (contains (model__ container) index (- result 1) item) true))))
     (dynamic_invariant1 result true false true)))) :pattern ((find_index
                                                              container item
                                                              index)) )))))

(declare-fun reverse_find_index (us_rep1 us_rep Int) Int)

(declare-fun reverse_find_index__function_guard (Int us_rep1 us_rep
  Int) Bool)

;; reverse_find_index__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((item us_rep))
  (forall ((index Int))
  (! (=> (dynamic_invariant2 index true true true)
     (let ((result (reverse_find_index container item index)))
     (and
     (ite (not
          (= (contains (model__ container) 1
             (ite (<= index (last_index container)) index
             (last_index container)) item) true))
     (= result 0)
     (and
     (and
     (and (and (<= 1 result) (<= result index))
     (<= result (last_index container)))
     (= (let ((temp___445 (get (model__ container) result)))
        (and (ite (= (attr__tag temp___445) (attr__tag item)) true false)
        (us_dispatch_eq temp___445 item))) true))
     (not
     (= (contains (model__ container) (+ result 1)
        (ite (<= index (last_index container)) index (last_index container))
        item) true))))
     (dynamic_invariant1 result true false true)))) :pattern ((reverse_find_index
                                                              container item
                                                              index)) )))))

(declare-fun contains1 (us_rep1 us_rep) Bool)

(declare-fun contains__function_guard1 (Bool us_rep1 us_rep) Bool)

;; contains__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((item us_rep))
  (! (= (= (contains1 container item) true)
     (= (contains (model__ container) 1 (last_index container) item) true)) :pattern (
  (contains1 container item)) ))))

(define-fun has_element ((container us_rep1)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last_index
                                                             container)) true
                                                             false)))

(declare-fun has_element__function_guard (Bool us_rep1 Int) Bool)

(declare-fun f (Int) us_rep)

(declare-fun f__function_guard (us_rep Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; f__post_axiom
  (assert true)

;; f__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant3 x true true true)
     (= (f x) (mk___rep (mk___split_fields (of_rep x) us_null_ext__) us_tag))) :pattern (
  (f x)) )))

(declare-fun is_sorted (us_rep1) Bool)

(declare-fun is_sorted__function_guard (Bool us_rep1) Bool)

(declare-fun lt (us_rep us_rep) Bool)

(declare-fun lt__function_guard (Bool us_rep us_rep) Bool)

(define-fun m_elements_sorted ((container us_rep2)) Bool (ite (forall
                                                              ((i Int))
                                                              (=>
                                                              (and (<= 1 i)
                                                              (<= i (last
                                                                    container)))
                                                              (forall
                                                              ((j Int))
                                                              (=>
                                                              (and (<= i j)
                                                              (<= j (last
                                                                    container)))
                                                              (or
                                                              (= (let ((temp___165
                                                                 (get
                                                                 container j)))
                                                                 (let ((temp___164
                                                                 (get
                                                                 container i)))
                                                                 (and
                                                                 (ite (=
                                                                 (attr__tag
                                                                 temp___164)
                                                                 (attr__tag
                                                                 temp___165))
                                                                 true false)
                                                                 (us_dispatch_eq
                                                                 temp___164
                                                                 temp___165)))) true)
                                                              (= (lt
                                                                 (get
                                                                 container i)
                                                                 (get
                                                                 container j)) true))))))
                                                         true false))

(declare-fun m_elements_sorted__function_guard (Bool us_rep2) Bool)

;; is_sorted__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_sorted container) true)
     (= (m_elements_sorted (model__ container)) true)) :pattern ((is_sorted
                                                                 container)) )))

(define-fun m_elements_included ((left us_rep2) (l_fst Int) (l_lst Int)
  (right us_rep2) (r_fst Int)
  (r_lst Int)) Bool (ite (forall ((i Int))
                         (=> (and (<= l_fst i) (<= i l_lst))
                         (exists ((j Int))
                         (and (and (<= r_fst j) (<= j r_lst))
                         (= (let ((temp___155 (get right j)))
                            (let ((temp___154 (get left i)))
                            (and (ite (= (attr__tag temp___154) (attr__tag
                                                                temp___155))
                                 true false) (us_dispatch_eq temp___154
                                             temp___155)))) true)))))
                    true false))

(declare-fun m_elements_included__function_guard (Bool us_rep2 Int Int
  us_rep2 Int Int) Bool)

(define-fun in_range5 ((rec__indefinite_unbounded_tagged__vect__vector__capacity1 Int)
  (a us_rep1)) Bool (= rec__indefinite_unbounded_tagged__vect__vector__capacity1
  (to_rep1
  (rec__indefinite_unbounded_tagged__vect__vector__capacity
  (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const indefinite_unbounded_tagged__vect__vector__capacity__first__bit1 Int)

(declare-const indefinite_unbounded_tagged__vect__vector__capacity__last__bit1 Int)

(declare-const indefinite_unbounded_tagged__vect__vector__capacity__position1 Int)

;; indefinite_unbounded_tagged__vect__vector__capacity__first__bit_axiom
  (assert
  (<= 0 indefinite_unbounded_tagged__vect__vector__capacity__first__bit1))

;; indefinite_unbounded_tagged__vect__vector__capacity__last__bit_axiom
  (assert
  (< indefinite_unbounded_tagged__vect__vector__capacity__first__bit1
  indefinite_unbounded_tagged__vect__vector__capacity__last__bit1))

;; indefinite_unbounded_tagged__vect__vector__capacity__position_axiom
  (assert
  (<= 0 indefinite_unbounded_tagged__vect__vector__capacity__position1))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((tvS__ref 0)) (((mk_tvS__ref (tvS__content us_rep1)))))
(define-fun tvS__ref___projection ((a tvS__ref)) us_rep1 (tvS__content a))

(define-fun dynamic_invariant4 ((temp___expr_466 us_rep1)
  (temp___is_init_463 Bool) (temp___skip_constant_464 Bool)
  (temp___do_toplevel_465 Bool)) Bool (=>
                                      (not (= temp___skip_constant_464 true))
                                      (in_range5 2 temp___expr_466)))

(define-fun default_initial_assumption1 ((temp___expr_468 us_rep1)
  (temp___skip_top_level_469 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__indefinite_unbounded_tagged__vect__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_468))) 2)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_469 true))
                                         (= (is_empty temp___expr_468) true))))

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const w__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; lt__post_axiom
  (assert true)

;; lt__def_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (lt left right) true)
     (< (to_rep
        (rec__indefinite_unbounded_tagged__t__c (us_split_fields1 left)))
     (to_rep
     (rec__indefinite_unbounded_tagged__t__c (us_split_fields1 right))))) :pattern (
  (lt left right)) )))

(declare-sort count_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (count_type count_type) Bool)

(declare-const dummy8 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_211 Int)
  (temp___is_init_208 Bool) (temp___skip_constant_209 Bool)
  (temp___do_toplevel_210 Bool)) Bool (=>
                                      (or (= temp___is_init_208 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_211)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_280 us_rep2)
  (temp___skip_top_level_281 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_281 true))
                                         (= (length1 temp___expr_280) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-sort extended_index1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (extended_index1 extended_index1) Bool)

(declare-const dummy9 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1
  (extended_index__content1 a))

(define-fun dynamic_invariant6 ((temp___expr_273 Int)
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)) Bool (=>
                                      (or (= temp___is_init_270 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_273)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant5 result true false
     true))) :pattern ((length1 container)) )))

;; get__post_axiom
  (assert true)

(declare-const v__split_fields us_main_type)

(declare-const w__split_fields us_main_type)

(declare-const us Int)

(declare-const o integer)

(declare-const o1 us_private)

(declare-const o2 Int)

(declare-const o3 integer)

(declare-const o4 us_private)

(declare-const o5 Int)

(declare-const o6 integer)

(declare-const o7 us_private)

(declare-const o8 Int)

(declare-const indefinite_unbounded_tagged__test__B_1__w__assume us_rep1)

(declare-const o9 us_rep1)

(declare-const o10 us_rep)

(declare-const indefinite_unbounded_tagged__vect__clear__container__fields us_split_fields2)

(declare-const result us_split_fields__ref1)

(declare-const v__split_fields1 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__append__2__container__fields us_split_fields2)

(declare-const result1 us_split_fields__ref1)

(declare-const v__split_fields2 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__append__2__container__fields1 us_split_fields2)

(declare-const result2 us_split_fields__ref1)

(declare-const v__split_fields3 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__append__2__container__fields2 us_split_fields2)

(declare-const result3 us_split_fields__ref1)

(declare-const v__split_fields4 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__reserve_capacity__container__fields us_split_fields2)

(declare-const result4 us_split_fields__ref1)

(declare-const v__split_fields5 us_split_fields2)

(declare-const result5 us_split_fields__ref1)

(declare-const w__split_fields1 us_split_fields2)

(declare-const w__split_fields2 us_split_fields2)

(declare-const w__split_fields3 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__replace_element__container__fields us_split_fields2)

(declare-const result6 us_split_fields__ref1)

(declare-const v__split_fields6 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__swap__container__fields us_split_fields2)

(declare-const result7 us_split_fields__ref1)

(declare-const v__split_fields7 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__delete_last__container__fields us_split_fields2)

(declare-const result8 us_split_fields__ref1)

(declare-const v__split_fields8 us_split_fields2)

(declare-const indefinite_unbounded_tagged__vect__reverse_elements__container__fields us_split_fields2)

(declare-const result9 us_split_fields__ref1)

(declare-const v__split_fields9 us_split_fields2)

(define-fun o11 () us_rep (mk___rep (mk___split_fields o6 o7) o8))

(define-fun o12 () us_rep (mk___rep (mk___split_fields o3 o4) o5))

(define-fun o13 () us_rep (mk___rep (mk___split_fields o o1) o2))

;; H
  (assert (and (= us 2) (in_range2 2)))

;; H
  (assert (default_initial_assumption1
  (mk___rep1 v__split_discrs (mk___split_fields1 v__split_fields)) false))

;; H
  (assert
  (= 2 (to_rep1
       (rec__indefinite_unbounded_tagged__vect__vector__capacity
       v__split_discrs))))

;; H
  (assert
  (= (length
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__clear__container__fields)) 0))

;; H
  (assert
  (= result (mk___split_fields__ref1 (mk___split_fields1 v__split_fields))))

;; H
  (assert
  (= v__split_fields1 indefinite_unbounded_tagged__vect__clear__container__fields))

;; H
  (assert (= (is_empty (mk___rep1 v__split_discrs v__split_fields1)) true))

;; H
  (assert
  (= (oeq (mk___rep1 v__split_discrs v__split_fields1) (empty_vector Tuple0)) true))

;; H
  (assert
  (and (= o13 (f 1))
  (and (and (= (of_rep 1) o) (= us_null_ext__ o1)) (= us_tag o2))))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__append__2__container__fields)) (+
  (length (mk___rep1 v__split_discrs v__split_fields1)) 1))
  (= (olt (model__ (mk___rep1 v__split_discrs v__split_fields1))
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__append__2__container__fields))) true))
  (= (let ((temp___410 (get
                       (model__
                       (mk___rep1 v__split_discrs
                       indefinite_unbounded_tagged__vect__append__2__container__fields))
                       (+ (last
                          (model__
                          (mk___rep1 v__split_discrs v__split_fields1))) 1))))
     (ite (= (attr__tag temp___410) o2) (us_dispatch_eq temp___410 o13)
     false)) true)))

;; H
  (assert (= result1 (mk___split_fields__ref1 v__split_fields1)))

;; H
  (assert
  (= v__split_fields2 indefinite_unbounded_tagged__vect__append__2__container__fields))

;; H
  (assert
  (and (= o12 (f 2))
  (and (and (= (of_rep 2) o3) (= us_null_ext__ o4)) (= us_tag o5))))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__append__2__container__fields1)) (+
  (length (mk___rep1 v__split_discrs v__split_fields2)) 1))
  (= (olt (model__ (mk___rep1 v__split_discrs v__split_fields2))
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__append__2__container__fields1))) true))
  (= (let ((temp___410 (get
                       (model__
                       (mk___rep1 v__split_discrs
                       indefinite_unbounded_tagged__vect__append__2__container__fields1))
                       (+ (last
                          (model__
                          (mk___rep1 v__split_discrs v__split_fields2))) 1))))
     (ite (= (attr__tag temp___410) o5) (us_dispatch_eq temp___410 o12)
     false)) true)))

;; H
  (assert (= result2 (mk___split_fields__ref1 v__split_fields2)))

;; H
  (assert
  (= v__split_fields3 indefinite_unbounded_tagged__vect__append__2__container__fields1))

;; H
  (assert
  (and (= o11 (f 3))
  (and (and (= (of_rep 3) o6) (= us_null_ext__ o7)) (= us_tag o8))))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__append__2__container__fields2)) (+
  (length (mk___rep1 v__split_discrs v__split_fields3)) 1))
  (= (olt (model__ (mk___rep1 v__split_discrs v__split_fields3))
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__append__2__container__fields2))) true))
  (= (let ((temp___410 (get
                       (model__
                       (mk___rep1 v__split_discrs
                       indefinite_unbounded_tagged__vect__append__2__container__fields2))
                       (+ (last
                          (model__
                          (mk___rep1 v__split_discrs v__split_fields3))) 1))))
     (ite (= (attr__tag temp___410) o8) (us_dispatch_eq temp___410 o11)
     false)) true)))

;; H
  (assert (= result3 (mk___split_fields__ref1 v__split_fields3)))

;; H
  (assert
  (= v__split_fields4 indefinite_unbounded_tagged__vect__append__2__container__fields2))

;; H
  (assert
  (not (= (is_empty (mk___rep1 v__split_discrs v__split_fields4)) true)))

;; H
  (assert (= (length (mk___rep1 v__split_discrs v__split_fields4)) 3))

;; H
  (assert
  (= (let ((temp___538 (f 1)))
     (let ((temp___537 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields4))
                       1)))
     (ite (= (attr__tag temp___537) (attr__tag temp___538))
     (us_dispatch_eq temp___537 temp___538) false))) true))

;; H
  (assert
  (= (let ((temp___542 (f 2)))
     (let ((temp___541 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields4))
                       2)))
     (ite (= (attr__tag temp___541) (attr__tag temp___542))
     (us_dispatch_eq temp___541 temp___542) false))) true))

;; H
  (assert
  (= (let ((temp___546 (f 3)))
     (let ((temp___545 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields4))
                       3)))
     (ite (= (attr__tag temp___545) (attr__tag temp___546))
     (us_dispatch_eq temp___545 temp___546) false))) true))

;; H
  (assert
  (= (oeq1
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__reserve_capacity__container__fields))
     (model__ (mk___rep1 v__split_discrs v__split_fields4))) true))

;; H
  (assert (= result4 (mk___split_fields__ref1 v__split_fields4)))

;; H
  (assert
  (= v__split_fields5 indefinite_unbounded_tagged__vect__reserve_capacity__container__fields))

;; H
  (assert
  (not (= (is_empty (mk___rep1 v__split_discrs v__split_fields5)) true)))

;; H
  (assert (= (length (mk___rep1 v__split_discrs v__split_fields5)) 3))

;; H
  (assert (<= 10 (capacity (mk___rep1 v__split_discrs v__split_fields5))))

;; H
  (assert
  (and
  (= indefinite_unbounded_tagged__test__B_1__w__assume (copy
                                                       (mk___rep1
                                                       v__split_discrs
                                                       v__split_fields5) 0))
  (and
  (= (oeq1 (model__ indefinite_unbounded_tagged__test__B_1__w__assume)
     (model__ (mk___rep1 v__split_discrs v__split_fields5))) true)
  (= (to_rep1
     (rec__indefinite_unbounded_tagged__vect__vector__capacity
     (us_split_discrs1 indefinite_unbounded_tagged__test__B_1__w__assume)))
  (length (mk___rep1 v__split_discrs v__split_fields5))))))

;; H
  (assert
  (= result5 (mk___split_fields__ref1 (mk___split_fields1 w__split_fields))))

;; H
  (assert
  (= w__split_fields1 (us_split_fields3
                      indefinite_unbounded_tagged__test__B_1__w__assume)))

;; H
  (assert
  (= w__split_discrs (us_split_discrs1
                     indefinite_unbounded_tagged__test__B_1__w__assume)))

;; H
  (assert
  (not (= (is_empty (mk___rep1 w__split_discrs w__split_fields1)) true)))

;; H
  (assert (= (length (mk___rep1 w__split_discrs w__split_fields1)) 3))

;; H
  (assert
  (= (let ((temp___551 (f 1)))
     (let ((temp___550 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields1))
                       1)))
     (ite (= (attr__tag temp___550) (attr__tag temp___551))
     (us_dispatch_eq temp___550 temp___551) false))) true))

;; H
  (assert
  (= (let ((temp___555 (f 2)))
     (let ((temp___554 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields1))
                       2)))
     (ite (= (attr__tag temp___554) (attr__tag temp___555))
     (us_dispatch_eq temp___554 temp___555) false))) true))

;; H
  (assert
  (= (let ((temp___559 (f 3)))
     (let ((temp___558 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields1))
                       3)))
     (ite (= (attr__tag temp___558) (attr__tag temp___559))
     (us_dispatch_eq temp___558 temp___559) false))) true))

;; H
  (assert
  (and
  (and
  (= (length (mk___rep1 w__split_discrs w__split_fields2)) (+ (length
                                                              (mk___rep1
                                                              w__split_discrs
                                                              w__split_fields1))
  (length (mk___rep1 v__split_discrs v__split_fields5))))
  (= (ole (model__ (mk___rep1 w__split_discrs w__split_fields1))
     (model__ (mk___rep1 w__split_discrs w__split_fields2))) true))
  (=> (< 0 (length (mk___rep1 v__split_discrs v__split_fields5)))
  (= (range_shifted (model__ (mk___rep1 v__split_discrs v__split_fields5))
     (model__ (mk___rep1 w__split_discrs w__split_fields2)) 1
     (last (model__ (mk___rep1 v__split_discrs v__split_fields5)))
     (+ (- (last (model__ (mk___rep1 w__split_discrs w__split_fields1))) 1) 1)) true))))

;; H
  (assert
  (not (= (is_empty (mk___rep1 w__split_discrs w__split_fields2)) true)))

;; H
  (assert (= (length (mk___rep1 w__split_discrs w__split_fields2)) 6))

;; H
  (assert
  (= (let ((temp___563 (f 1)))
     (let ((temp___562 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields2))
                       1)))
     (ite (= (attr__tag temp___562) (attr__tag temp___563))
     (us_dispatch_eq temp___562 temp___563) false))) true))

;; H
  (assert
  (= (let ((temp___567 (f 2)))
     (let ((temp___566 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields2))
                       2)))
     (ite (= (attr__tag temp___566) (attr__tag temp___567))
     (us_dispatch_eq temp___566 temp___567) false))) true))

;; H
  (assert
  (= (let ((temp___571 (f 3)))
     (let ((temp___570 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields2))
                       3)))
     (ite (= (attr__tag temp___570) (attr__tag temp___571))
     (us_dispatch_eq temp___570 temp___571) false))) true))

;; H
  (assert
  (= (let ((temp___575 (f 1)))
     (let ((temp___574 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields2))
                       4)))
     (ite (= (attr__tag temp___574) (attr__tag temp___575))
     (us_dispatch_eq temp___574 temp___575) false))) true))

;; H
  (assert
  (= (let ((temp___579 (f 2)))
     (let ((temp___578 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields2))
                       5)))
     (ite (= (attr__tag temp___578) (attr__tag temp___579))
     (us_dispatch_eq temp___578 temp___579) false))) true))

;; H
  (assert
  (= (let ((temp___583 (f 3)))
     (let ((temp___582 (get
                       (model__ (mk___rep1 w__split_discrs w__split_fields2))
                       6)))
     (ite (= (attr__tag temp___582) (attr__tag temp___583))
     (us_dispatch_eq temp___582 temp___583) false))) true))

;; H
  (assert (and (= o9 (empty_vector Tuple0)) (= (length o9) 0)))

;; H
  (assert
  (= (oeq1 (model__ (mk___rep1 w__split_discrs w__split_fields3))
     (model__ o9)) true))

;; H
  (assert (= (is_empty (mk___rep1 w__split_discrs w__split_fields3)) true))

;; H
  (assert
  (= (oeq (mk___rep1 w__split_discrs w__split_fields3) (empty_vector Tuple0)) true))

;; H
  (assert
  (and (= o10 (f 4))
  (= o10 (mk___rep (mk___split_fields (of_rep 4) us_null_ext__) us_tag))))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__replace_element__container__fields))
  (length (mk___rep1 v__split_discrs v__split_fields5)))
  (= (let ((temp___388 (get
                       (model__
                       (mk___rep1 v__split_discrs
                       indefinite_unbounded_tagged__vect__replace_element__container__fields))
                       2)))
     (ite (= (attr__tag temp___388) (attr__tag o10))
     (us_dispatch_eq temp___388 o10) false)) true))
  (= (equal_except (model__ (mk___rep1 v__split_discrs v__split_fields5))
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__replace_element__container__fields))
     2) true)))

;; H
  (assert (= result6 (mk___split_fields__ref1 v__split_fields5)))

;; H
  (assert
  (= v__split_fields6 indefinite_unbounded_tagged__vect__replace_element__container__fields))

;; H
  (assert
  (= (let ((temp___588 (f 1)))
     (let ((temp___587 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields6))
                       1)))
     (ite (= (attr__tag temp___587) (attr__tag temp___588))
     (us_dispatch_eq temp___587 temp___588) false))) true))

;; H
  (assert
  (= (let ((temp___592 (f 4)))
     (let ((temp___591 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields6))
                       2)))
     (ite (= (attr__tag temp___591) (attr__tag temp___592))
     (us_dispatch_eq temp___591 temp___592) false))) true))

;; H
  (assert
  (= (let ((temp___596 (f 3)))
     (let ((temp___595 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields6))
                       3)))
     (ite (= (attr__tag temp___595) (attr__tag temp___596))
     (us_dispatch_eq temp___595 temp___596) false))) true))

;; H
  (assert
  (= (m_elements_swapped
     (model__ (mk___rep1 v__split_discrs v__split_fields6))
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__swap__container__fields)) 1 3) true))

;; H
  (assert (= result7 (mk___split_fields__ref1 v__split_fields6)))

;; H
  (assert
  (= v__split_fields7 indefinite_unbounded_tagged__vect__swap__container__fields))

;; H
  (assert
  (= (let ((temp___601 (f 3)))
     (let ((temp___600 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields7))
                       1)))
     (ite (= (attr__tag temp___600) (attr__tag temp___601))
     (us_dispatch_eq temp___600 temp___601) false))) true))

;; H
  (assert
  (= (let ((temp___605 (f 4)))
     (let ((temp___604 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields7))
                       2)))
     (ite (= (attr__tag temp___604) (attr__tag temp___605))
     (us_dispatch_eq temp___604 temp___605) false))) true))

;; H
  (assert
  (= (let ((temp___609 (f 1)))
     (let ((temp___608 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields7))
                       3)))
     (ite (= (attr__tag temp___608) (attr__tag temp___609))
     (us_dispatch_eq temp___608 temp___609) false))) true))

;; H
  (assert
  (and
  (= (length
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__delete_last__container__fields)) (-
  (length (mk___rep1 v__split_discrs v__split_fields7)) 1))
  (= (olt
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__delete_last__container__fields))
     (model__ (mk___rep1 v__split_discrs v__split_fields7))) true)))

;; H
  (assert (= result8 (mk___split_fields__ref1 v__split_fields7)))

;; H
  (assert
  (= v__split_fields8 indefinite_unbounded_tagged__vect__delete_last__container__fields))

;; H
  (assert
  (not (= (is_empty (mk___rep1 v__split_discrs v__split_fields8)) true)))

;; H
  (assert (= (length (mk___rep1 v__split_discrs v__split_fields8)) 2))

;; H
  (assert
  (= (let ((temp___614 (f 3)))
     (let ((temp___613 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields8))
                       1)))
     (ite (= (attr__tag temp___613) (attr__tag temp___614))
     (us_dispatch_eq temp___613 temp___614) false))) true))

;; H
  (assert
  (= (let ((temp___618 (f 4)))
     (let ((temp___617 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields8))
                       2)))
     (ite (= (attr__tag temp___617) (attr__tag temp___618))
     (us_dispatch_eq temp___617 temp___618) false))) true))

;; H
  (assert
  (= (m_elements_reversed
     (model__ (mk___rep1 v__split_discrs v__split_fields8))
     (model__
     (mk___rep1 v__split_discrs
     indefinite_unbounded_tagged__vect__reverse_elements__container__fields))) true))

;; H
  (assert (= result9 (mk___split_fields__ref1 v__split_fields8)))

;; H
  (assert
  (= v__split_fields9 indefinite_unbounded_tagged__vect__reverse_elements__container__fields))

;; H
  (assert
  (not (= (is_empty (mk___rep1 v__split_discrs v__split_fields9)) true)))

;; H
  (assert (= (length (mk___rep1 v__split_discrs v__split_fields9)) 2))

;; H
  (assert
  (= (let ((temp___623 (f 4)))
     (let ((temp___622 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields9))
                       1)))
     (ite (= (attr__tag temp___622) (attr__tag temp___623))
     (us_dispatch_eq temp___622 temp___623) false))) true))

;; H
  (assert
  (= (let ((temp___627 (f 3)))
     (let ((temp___626 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields9))
                       2)))
     (ite (= (attr__tag temp___626) (attr__tag temp___627))
     (us_dispatch_eq temp___626 temp___627) false))) true))

;; H
  (assert
  (= (last (model__ (mk___rep1 v__split_discrs v__split_fields9))) 2))

;; H
  (assert
  (= (let ((temp___631 (f 4)))
     (let ((temp___630 (get
                       (model__ (mk___rep1 v__split_discrs v__split_fields9))
                       1)))
     (ite (= (attr__tag temp___630) (attr__tag temp___631))
     (us_dispatch_eq temp___630 temp___631) false))) true))

;; H
  (assert
  (= (let ((temp___635 (f 3)))
     (let ((temp___634 (last_element
                       (mk___rep1 v__split_discrs v__split_fields9))))
     (ite (= (attr__tag temp___634) (attr__tag temp___635))
     (us_dispatch_eq temp___634 temp___635) false))) true))

;; H
  (assert
  (= (find_index (mk___rep1 v__split_discrs v__split_fields9) (f 0) 1) 0))

;; H
  (assert
  (= (find_index (mk___rep1 v__split_discrs v__split_fields9) (f 4) 1) 1))

;; H
  (assert
  (= (find_index (mk___rep1 v__split_discrs v__split_fields9) (f 4) 2) 0))

;; H
  (assert
  (= (reverse_find_index (mk___rep1 v__split_discrs v__split_fields9)
     (f 0) 2147483647) 0))

;; H
  (assert
  (= (reverse_find_index (mk___rep1 v__split_discrs v__split_fields9)
     (f 4) 2147483647) 1))

;; H
  (assert
  (= (reverse_find_index (mk___rep1 v__split_discrs v__split_fields9)
     (f 4) 2) 1))

;; H
  (assert
  (= (contains1 (mk___rep1 v__split_discrs v__split_fields9) (f 4)) true))

;; H
  (assert
  (not
  (= (contains1 (mk___rep1 v__split_discrs v__split_fields9) (f 0)) true)))

;; H
  (assert
  (= (has_element (mk___rep1 v__split_discrs v__split_fields9) 1) true))

;; H
  (assert
  (not (= (has_element (mk___rep1 v__split_discrs v__split_fields9) 0) true)))

(assert
;; WP_parameter_def
 ;; File "a-cfinve.ads", line 813, characters 0-0
  (not
  (not (= (has_element (mk___rep1 v__split_discrs v__split_fields9) 3) true))))
(check-sat)
(exit)
