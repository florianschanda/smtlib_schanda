;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort e 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (e e) Bool)

(declare-const dummy e)

(declare-datatypes () ((e__ref (mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))

(declare-fun to_rep (e) Int)

(declare-fun of_rep (Int) e)

;; inversion_axiom
  (assert
  (forall ((x e)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert (forall ((x e)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__variants__t__c e)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) e (rec__variants__t__c
                                                                 a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__variants__t__d integer)(rec__variants__t__e integer)))))
(define-fun us_split_fields_D__projection ((a us_split_fields)) integer
  (rec__variants__t__d a))

(define-fun us_split_fields_E__projection ((a us_split_fields)) integer
  (rec__variants__t__e a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun variants__t__d__pred ((a us_rep)) Bool (= (to_rep
                                                      (rec__variants__t__c
                                                      (us_split_discrs1 a))) 0))

(define-fun variants__t__e__pred ((a us_rep)) Bool (= (to_rep
                                                      (rec__variants__t__c
                                                      (us_split_discrs1 a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__variants__t__c (us_split_discrs1 a)))
                        (to_rep (rec__variants__t__c (us_split_discrs1 b))))
                        (=> (variants__t__d__pred a)
                        (= (to_rep1
                           (rec__variants__t__d (us_split_fields1 a)))
                        (to_rep1 (rec__variants__t__d (us_split_fields1 b))))))
                        (=> (variants__t__e__pred a)
                        (= (to_rep1
                           (rec__variants__t__e (us_split_fields1 a)))
                        (to_rep1 (rec__variants__t__e (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const variants__t__c__first__bit Int)

(declare-const variants__t__c__last__bit Int)

(declare-const variants__t__c__position Int)

;; variants__t__c__first__bit_axiom
  (assert (<= 0 variants__t__c__first__bit))

;; variants__t__c__last__bit_axiom
  (assert (< variants__t__c__first__bit variants__t__c__last__bit))

;; variants__t__c__position_axiom
  (assert (<= 0 variants__t__c__position))

(declare-const variants__t__d__first__bit Int)

(declare-const variants__t__d__last__bit Int)

(declare-const variants__t__d__position Int)

;; variants__t__d__first__bit_axiom
  (assert (<= 0 variants__t__d__first__bit))

;; variants__t__d__last__bit_axiom
  (assert (< variants__t__d__first__bit variants__t__d__last__bit))

;; variants__t__d__position_axiom
  (assert (<= 0 variants__t__d__position))

(declare-const variants__t__e__first__bit Int)

(declare-const variants__t__e__last__bit Int)

(declare-const variants__t__e__position Int)

;; variants__t__e__first__bit_axiom
  (assert (<= 0 variants__t__e__first__bit))

;; variants__t__e__last__bit_axiom
  (assert (< variants__t__e__first__bit variants__t__e__last__bit))

;; variants__t__e__position_axiom
  (assert (<= 0 variants__t__e__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(define-fun default_initial_assumption ((temp___expr_143 us_rep)
  (temp___skip_top_level_144 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_143) false)
                                         (= (to_rep
                                            (rec__variants__t__c
                                            (us_split_discrs1
                                            temp___expr_143))) 0)))

(define-fun in_range2 ((rec__variants__t__c1 Int)
  (a us_rep)) Bool (= rec__variants__t__c1 (to_rep
                                           (rec__variants__t__c
                                           (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const variants__t__c__first__bit1 Int)

(declare-const variants__t__c__last__bit1 Int)

(declare-const variants__t__c__position1 Int)

;; variants__t__c__first__bit_axiom
  (assert (<= 0 variants__t__c__first__bit1))

;; variants__t__c__last__bit_axiom
  (assert (< variants__t__c__first__bit1 variants__t__c__last__bit1))

;; variants__t__c__position_axiom
  (assert (<= 0 variants__t__c__position1))

(declare-const variants__t__e__first__bit1 Int)

(declare-const variants__t__e__last__bit1 Int)

(declare-const variants__t__e__position1 Int)

;; variants__t__e__first__bit_axiom
  (assert (<= 0 variants__t__e__first__bit1))

;; variants__t__e__last__bit_axiom
  (assert (< variants__t__e__first__bit1 variants__t__e__last__bit1))

;; variants__t__e__position_axiom
  (assert (<= 0 variants__t__e__position1))

(declare-const variants__t__d__first__bit1 Int)

(declare-const variants__t__d__last__bit1 Int)

(declare-const variants__t__d__position1 Int)

;; variants__t__d__first__bit_axiom
  (assert (<= 0 variants__t__d__first__bit1))

;; variants__t__d__last__bit_axiom
  (assert (< variants__t__d__first__bit1 variants__t__d__last__bit1))

;; variants__t__d__position_axiom
  (assert (<= 0 variants__t__d__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((ta__ref (mk_ta__ref (ta__content us_rep)))))
(define-fun ta__ref___projection ((a ta__ref)) us_rep (ta__content a))

(define-fun dynamic_invariant ((temp___expr_151 us_rep)
  (temp___is_init_148 Bool) (temp___skip_constant_149 Bool)
  (temp___do_toplevel_150 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_149 true))
                                      (in_range2 0 temp___expr_151))
                                      (= (attr__constrained temp___expr_151) true)))

(define-fun default_initial_assumption1 ((temp___expr_153 us_rep)
  (temp___skip_top_level_154 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_153) true)
                                         (= (to_rep
                                            (rec__variants__t__c
                                            (us_split_discrs1
                                            temp___expr_153))) 0)))

(define-fun in_range3 ((rec__variants__t__c1 Int)
  (a us_rep)) Bool (= rec__variants__t__c1 (to_rep
                                           (rec__variants__t__c
                                           (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const variants__t__c__first__bit2 Int)

(declare-const variants__t__c__last__bit2 Int)

(declare-const variants__t__c__position2 Int)

;; variants__t__c__first__bit_axiom
  (assert (<= 0 variants__t__c__first__bit2))

;; variants__t__c__last__bit_axiom
  (assert (< variants__t__c__first__bit2 variants__t__c__last__bit2))

;; variants__t__c__position_axiom
  (assert (<= 0 variants__t__c__position2))

(declare-const variants__t__d__first__bit2 Int)

(declare-const variants__t__d__last__bit2 Int)

(declare-const variants__t__d__position2 Int)

;; variants__t__d__first__bit_axiom
  (assert (<= 0 variants__t__d__first__bit2))

;; variants__t__d__last__bit_axiom
  (assert (< variants__t__d__first__bit2 variants__t__d__last__bit2))

;; variants__t__d__position_axiom
  (assert (<= 0 variants__t__d__position2))

(declare-const variants__t__e__first__bit2 Int)

(declare-const variants__t__e__last__bit2 Int)

(declare-const variants__t__e__position2 Int)

;; variants__t__e__first__bit_axiom
  (assert (<= 0 variants__t__e__first__bit2))

;; variants__t__e__last__bit_axiom
  (assert (< variants__t__e__first__bit2 variants__t__e__last__bit2))

;; variants__t__e__position_axiom
  (assert (<= 0 variants__t__e__position2))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes () ((tb__ref (mk_tb__ref (tb__content us_rep)))))
(define-fun tb__ref___projection ((a tb__ref)) us_rep (tb__content a))

(define-fun dynamic_invariant1 ((temp___expr_161 us_rep)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_159 true))
                                      (in_range3 1 temp___expr_161))
                                      (= (attr__constrained temp___expr_161) true)))

(define-fun default_initial_assumption2 ((temp___expr_163 us_rep)
  (temp___skip_top_level_164 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_163) true)
                                         (= (to_rep
                                            (rec__variants__t__c
                                            (us_split_discrs1
                                            temp___expr_163))) 1)))

(declare-const x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y__split_discrs us_split_discrs)

(declare-const y__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const z__split_discrs us_split_discrs)

(declare-const z__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1)) (in_range temp___expr_135)))

(declare-const us Int)

;; H
  (assert
  (and (= 0 (to_rep (rec__variants__t__c y__split_discrs)))
  (= y__attr__constrained true)))

;; H
  (assert
  (and (= 1 (to_rep (rec__variants__t__c z__split_discrs)))
  (= z__attr__constrained true)))

;; H
  (assert
  (and (= us (to_rep (rec__variants__t__c (us_split_discrs1 x)))) (in_range
  (to_rep (rec__variants__t__c (us_split_discrs1 x))))))

(assert
;; WP_parameter_def
 ;; File "variants.ads", line 14, characters 0-0
  (not (= 1 (to_rep (rec__variants__t__c y__split_discrs)))))
(check-sat)
(exit)
