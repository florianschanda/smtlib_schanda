(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type coordinate_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : coordinate_type, coordinate_type -> bool

logic dummy2 : coordinate_type

type coordinate_type__ref = { coordinate_type__content : coordinate_type
}

function coordinate_type__ref___projection(a: coordinate_type__ref) : coordinate_type =
  (a).coordinate_type__content

logic to_rep : coordinate_type -> int

logic of_rep : int -> coordinate_type

axiom inversion_axiom :
  (forall x:coordinate_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:coordinate_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__raster_graphics__point__x : coordinate_type;
rec__raster_graphics__point__y : coordinate_type
}

function us_split_fields_X__projection(a: us_split_fields) : coordinate_type =
  (a).rec__raster_graphics__point__x

function us_split_fields_Y__projection(a: us_split_fields) : coordinate_type =
  (a).rec__raster_graphics__point__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__raster_graphics__point__x) = to_rep(((b).us_split_fields1).rec__raster_graphics__point__x)) and
  (to_rep(((a).us_split_fields1).rec__raster_graphics__point__y) = to_rep(((b).us_split_fields1).rec__raster_graphics__point__y))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__raster_graphics__point__x) = to_rep(((b).us_split_fields1).rec__raster_graphics__point__x)) and
  (to_rep(((a).us_split_fields1).rec__raster_graphics__point__y) = to_rep(((b).us_split_fields1).rec__raster_graphics__point__y)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:coordinate_type. forall a1:coordinate_type. (0 <= object__size({
  us_split_fields1 = { rec__raster_graphics__point__x = a;
  rec__raster_graphics__point__y = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:coordinate_type. forall a1:coordinate_type.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__raster_graphics__point__x = a; rec__raster_graphics__point__y = a1 }
  })))

logic raster_graphics__point__x__first__bit : int

logic raster_graphics__point__x__last__bit : int

logic raster_graphics__point__x__position : int

axiom raster_graphics__point__x__first__bit_axiom :
  (0 <= raster_graphics__point__x__first__bit)

axiom raster_graphics__point__x__last__bit_axiom :
  (raster_graphics__point__x__first__bit <  raster_graphics__point__x__last__bit)

axiom raster_graphics__point__x__position_axiom :
  (0 <= raster_graphics__point__x__position)

logic raster_graphics__point__y__first__bit : int

logic raster_graphics__point__y__last__bit : int

logic raster_graphics__point__y__position : int

axiom raster_graphics__point__y__first__bit_axiom :
  (0 <= raster_graphics__point__y__first__bit)

axiom raster_graphics__point__y__last__bit_axiom :
  (raster_graphics__point__y__first__bit <  raster_graphics__point__y__last__bit)

axiom raster_graphics__point__y__position_axiom :
  (0 <= raster_graphics__point__y__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : coordinate_type

logic dummy4 : coordinate_type

type point__ref = { point__content : us_rep
}

function point__ref___projection(a: point__ref) : us_rep = (a).point__content

type line_algorithm_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : line_algorithm_type, line_algorithm_type -> bool

logic dummy5 : line_algorithm_type

type line_algorithm_type__ref = { line_algorithm_type__content :
line_algorithm_type
}

function line_algorithm_type__ref___projection(a: line_algorithm_type__ref) : line_algorithm_type =
  (a).line_algorithm_type__content

type status_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : status_type, status_type -> bool

logic dummy6 : status_type

type status_type__ref = { status_type__content : status_type
}

function status_type__ref___projection(a: status_type__ref) : status_type =
  (a).status_type__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic a : coordinate_type

logic a1 : coordinate_type

logic attr__ATTRIBUTE_ADDRESS3 : int

logic b : coordinate_type

logic b1 : coordinate_type

logic attr__ATTRIBUTE_ADDRESS4 : int

logic min_distance : int

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom min_distance__def_axiom : (min_distance = 2)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall status:int. forall line_algorithm:int. forall line_count:int.
  forall status1:int. (((0 <= 2) -> in_range4(status)) ->
  (in_range3(line_algorithm) -> (in_range1(line_count) ->
  (in_range2(min_distance) -> (in_range4(status1) -> ((status1 = 0) ->
  ((line_algorithm = 0) -> in_range((line_count + 1))))))))))
