(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = {
rec__split_records__record_with_mutable_discrs__present : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__split_records__record_with_mutable_discrs__present

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__split_records__record_with_mutable_discrs__field : natural
}

function us_split_fields_Field__projection(a: us_split_fields) : natural =
  (a).rec__split_records__record_with_mutable_discrs__field

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate split_records__record_with_mutable_discrs__field__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present = ((b).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) and
  (split_records__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__split_records__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__split_records__record_with_mutable_discrs__field)))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present = ((b).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) and
  (split_records__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__split_records__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__split_records__record_with_mutable_discrs__field))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit : int

logic split_records__record_with_mutable_discrs__present__last__bit : int

logic split_records__record_with_mutable_discrs__present__position : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom :
  (split_records__record_with_mutable_discrs__present__first__bit <  split_records__record_with_mutable_discrs__present__last__bit)

axiom split_records__record_with_mutable_discrs__present__position_axiom :
  (0 <= split_records__record_with_mutable_discrs__present__position)

logic split_records__record_with_mutable_discrs__field__first__bit : int

logic split_records__record_with_mutable_discrs__field__last__bit : int

logic split_records__record_with_mutable_discrs__field__position : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom :
  (split_records__record_with_mutable_discrs__field__first__bit <  split_records__record_with_mutable_discrs__field__last__bit)

axiom split_records__record_with_mutable_discrs__field__position_axiom :
  (0 <= split_records__record_with_mutable_discrs__field__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : natural

logic dummy3 : bool

type record_with_mutable_discrs__ref = { record_with_mutable_discrs__content
: us_rep
}

function record_with_mutable_discrs__ref___projection(a: record_with_mutable_discrs__ref) : us_rep =
  (a).record_with_mutable_discrs__content

type us_split_fields2 = { rec__split_records__mutable_holder__content :
us_rep
}

function us_split_fields_Content__projection(a: us_split_fields2) : us_rep =
  (a).rec__split_records__mutable_holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  (((bool_eq3(((a).us_split_fields3).rec__split_records__mutable_holder__content,
  ((b).us_split_fields3).rec__split_records__mutable_holder__content) = true) ->
  (bool_eq4(a, b) = true)) and
  ((not (bool_eq3(((a).us_split_fields3).rec__split_records__mutable_holder__content,
  ((b).us_split_fields3).rec__split_records__mutable_holder__content) = true)) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size1({
  us_split_fields3 = { rec__split_records__mutable_holder__content = {
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__split_records__mutable_holder__content = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 } } })))

logic split_records__mutable_holder__content__first__bit : int

logic split_records__mutable_holder__content__last__bit : int

logic split_records__mutable_holder__content__position : int

axiom split_records__mutable_holder__content__first__bit_axiom :
  (0 <= split_records__mutable_holder__content__first__bit)

axiom split_records__mutable_holder__content__last__bit_axiom :
  (split_records__mutable_holder__content__first__bit <  split_records__mutable_holder__content__last__bit)

axiom split_records__mutable_holder__content__position_axiom :
  (0 <= split_records__mutable_holder__content__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : bool

logic dummy5 : natural

logic dummy6 : bool

type mutable_holder__ref = { mutable_holder__content : us_rep1
}

function mutable_holder__ref___projection(a: mutable_holder__ref) : us_rep1 =
  (a).mutable_holder__content

predicate in_range2(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size2({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit1 : int

logic split_records__record_with_mutable_discrs__present__last__bit1 : int

logic split_records__record_with_mutable_discrs__present__position1 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit1)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom1 :
  (split_records__record_with_mutable_discrs__present__first__bit1 <  split_records__record_with_mutable_discrs__present__last__bit1)

axiom split_records__record_with_mutable_discrs__present__position_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__present__position1)

logic split_records__record_with_mutable_discrs__field__first__bit1 : int

logic split_records__record_with_mutable_discrs__field__last__bit1 : int

logic split_records__record_with_mutable_discrs__field__position1 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit1)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom1 :
  (split_records__record_with_mutable_discrs__field__first__bit1 <  split_records__record_with_mutable_discrs__field__last__bit1)

axiom split_records__record_with_mutable_discrs__field__position_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__field__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy7 : bool

logic dummy8 : natural

logic dummy9 : bool

type t1s__ref = { t1s__content : us_rep
}

function t1s__ref___projection(a: t1s__ref) : us_rep = (a).t1s__content

type us_split_discrs2 = { rec__split_records__holder__present : bool
}

function us_split_discrs___2__projection(a: us_split_discrs2) : bool =
  (a).rec__split_records__holder__present

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__split_records__holder__content : us_rep
}

function us_split_fields_Content__2__projection(a: us_split_fields4) : us_rep =
  (a).rec__split_records__holder__content

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___6__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  ((((((a).us_split_discrs3).rec__split_records__holder__present = ((b).us_split_discrs3).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields5).rec__split_records__holder__content,
  ((b).us_split_fields5).rec__split_records__holder__content) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not ((((a).us_split_discrs3).rec__split_records__holder__present = ((b).us_split_discrs3).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields5).rec__split_records__holder__content,
  ((b).us_split_fields5).rec__split_records__holder__content) = true))) ->
  (bool_eq5(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size3({ us_split_discrs3 = {
  rec__split_records__holder__present = a }; us_split_fields5 = {
  rec__split_records__holder__content = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment3({ us_split_discrs3 = {
  rec__split_records__holder__present = a }; us_split_fields5 = {
  rec__split_records__holder__content = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic split_records__holder__present__first__bit : int

logic split_records__holder__present__last__bit : int

logic split_records__holder__present__position : int

axiom split_records__holder__present__first__bit_axiom :
  (0 <= split_records__holder__present__first__bit)

axiom split_records__holder__present__last__bit_axiom :
  (split_records__holder__present__first__bit <  split_records__holder__present__last__bit)

axiom split_records__holder__present__position_axiom :
  (0 <= split_records__holder__present__position)

logic split_records__holder__content__first__bit : int

logic split_records__holder__content__last__bit : int

logic split_records__holder__content__position : int

axiom split_records__holder__content__first__bit_axiom :
  (0 <= split_records__holder__content__first__bit)

axiom split_records__holder__content__last__bit_axiom :
  (split_records__holder__content__first__bit <  split_records__holder__content__last__bit)

axiom split_records__holder__content__position_axiom :
  (0 <= split_records__holder__content__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy10 : bool

logic dummy11 : bool

logic dummy12 : natural

logic dummy13 : bool

type holder__ref = { holder__content : us_rep2
}

function holder__ref___projection(a: holder__ref) : us_rep2 =
  (a).holder__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:bool. forall v1:natural. forall v2:bool.
  (forall i:int [(singleton({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = v };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = v1 };
  attr__constrained = v2 }, i)[i])]. ((singleton({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = v };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = v1 };
  attr__constrained = v2 }, i)[i]) = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = v };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = v1 };
  attr__constrained = v2 })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

predicate in_range3(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size4({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment4({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit2 : int

logic split_records__record_with_mutable_discrs__present__last__bit2 : int

logic split_records__record_with_mutable_discrs__present__position2 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom2 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit2)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom2 :
  (split_records__record_with_mutable_discrs__present__first__bit2 <  split_records__record_with_mutable_discrs__present__last__bit2)

axiom split_records__record_with_mutable_discrs__present__position_axiom2 :
  (0 <= split_records__record_with_mutable_discrs__present__position2)

logic split_records__record_with_mutable_discrs__field__first__bit2 : int

logic split_records__record_with_mutable_discrs__field__last__bit2 : int

logic split_records__record_with_mutable_discrs__field__position2 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom2 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit2)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom2 :
  (split_records__record_with_mutable_discrs__field__first__bit2 <  split_records__record_with_mutable_discrs__field__last__bit2)

axiom split_records__record_with_mutable_discrs__field__position_axiom2 :
  (0 <= split_records__record_with_mutable_discrs__field__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy14 : bool

logic dummy15 : natural

logic dummy16 : bool

type tc1S__ref = { tc1S__content : us_rep
}

function tc1S__ref___projection(a: tc1S__ref) : us_rep = (a).tc1S__content

logic c1__split_discrs : bool

logic c1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range4(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size5({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment5({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit3 : int

logic split_records__record_with_mutable_discrs__present__last__bit3 : int

logic split_records__record_with_mutable_discrs__present__position3 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom3 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit3)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom3 :
  (split_records__record_with_mutable_discrs__present__first__bit3 <  split_records__record_with_mutable_discrs__present__last__bit3)

axiom split_records__record_with_mutable_discrs__present__position_axiom3 :
  (0 <= split_records__record_with_mutable_discrs__present__position3)

logic split_records__record_with_mutable_discrs__field__first__bit3 : int

logic split_records__record_with_mutable_discrs__field__last__bit3 : int

logic split_records__record_with_mutable_discrs__field__position3 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom3 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit3)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom3 :
  (split_records__record_with_mutable_discrs__field__first__bit3 <  split_records__record_with_mutable_discrs__field__last__bit3)

axiom split_records__record_with_mutable_discrs__field__position_axiom3 :
  (0 <= split_records__record_with_mutable_discrs__field__position3)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy17 : bool

logic dummy18 : natural

logic dummy19 : bool

type t4b__ref = { t4b__content : us_rep
}

function t4b__ref___projection(a: t4b__ref) : us_rep = (a).t4b__content

logic c2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range5(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size6({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment6({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit4 : int

logic split_records__record_with_mutable_discrs__present__last__bit4 : int

logic split_records__record_with_mutable_discrs__present__position4 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom4 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit4)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom4 :
  (split_records__record_with_mutable_discrs__present__first__bit4 <  split_records__record_with_mutable_discrs__present__last__bit4)

axiom split_records__record_with_mutable_discrs__present__position_axiom4 :
  (0 <= split_records__record_with_mutable_discrs__present__position4)

logic split_records__record_with_mutable_discrs__field__first__bit4 : int

logic split_records__record_with_mutable_discrs__field__last__bit4 : int

logic split_records__record_with_mutable_discrs__field__position4 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom4 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit4)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom4 :
  (split_records__record_with_mutable_discrs__field__first__bit4 <  split_records__record_with_mutable_discrs__field__last__bit4)

axiom split_records__record_with_mutable_discrs__field__position_axiom4 :
  (0 <= split_records__record_with_mutable_discrs__field__position4)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy20 : bool

logic dummy21 : natural

logic dummy22 : bool

type t5b__ref = { t5b__content : us_rep
}

function t5b__ref___projection(a: t5b__ref) : us_rep = (a).t5b__content

type us_split_fields6 = { rec__split_records__holder__content1 : us_rep
}

function us_split_fields_Content__3__projection(a: us_split_fields6) : us_rep =
  (a).rec__split_records__holder__content1

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs4 : us_split_discrs2; us_split_fields7 :
us_split_fields6
}

function us_rep___7__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___8__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base(a: us_rep3) : us_rep2 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields5 = {
  rec__split_records__holder__content =
  ((a).us_split_fields7).rec__split_records__holder__content1 } }

function of_base(r: us_rep2) : us_rep3 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields7 = {
  rec__split_records__holder__content1 =
  ((r).us_split_fields5).rec__split_records__holder__content } }

logic bool_eq7 : us_rep3, us_rep3 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq7(a, b)].
  ((((((a).us_split_discrs4).rec__split_records__holder__present = ((b).us_split_discrs4).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields7).rec__split_records__holder__content1,
  ((b).us_split_fields7).rec__split_records__holder__content1) = true)) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((a).us_split_discrs4).rec__split_records__holder__present = ((b).us_split_discrs4).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields7).rec__split_records__holder__content1,
  ((b).us_split_fields7).rec__split_records__holder__content1) = true))) ->
  (bool_eq7(a, b) = false))))

predicate in_range6(rec__split_records__holder__present1: bool, a: us_rep2) =
  (rec__split_records__holder__present1 = ((a).us_split_discrs3).rec__split_records__holder__present)

logic value__size7 : int

logic object__size7 : us_rep3 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep3 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size7({ us_split_discrs4 = {
  rec__split_records__holder__present = a }; us_split_fields7 = {
  rec__split_records__holder__content1 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment7({ us_split_discrs4 = {
  rec__split_records__holder__present = a }; us_split_fields7 = {
  rec__split_records__holder__content1 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic split_records__holder__present__first__bit1 : int

logic split_records__holder__present__last__bit1 : int

logic split_records__holder__present__position1 : int

axiom split_records__holder__present__first__bit_axiom1 :
  (0 <= split_records__holder__present__first__bit1)

axiom split_records__holder__present__last__bit_axiom1 :
  (split_records__holder__present__first__bit1 <  split_records__holder__present__last__bit1)

axiom split_records__holder__present__position_axiom1 :
  (0 <= split_records__holder__present__position1)

logic split_records__holder__content__first__bit1 : int

logic split_records__holder__content__last__bit1 : int

logic split_records__holder__content__position1 : int

axiom split_records__holder__content__first__bit_axiom1 :
  (0 <= split_records__holder__content__first__bit1)

axiom split_records__holder__content__last__bit_axiom1 :
  (split_records__holder__content__first__bit1 <  split_records__holder__content__last__bit1)

axiom split_records__holder__content__position_axiom1 :
  (0 <= split_records__holder__content__position1)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy23 : bool

logic dummy24 : bool

logic dummy25 : natural

logic dummy26 : bool

type th1S__ref = { th1S__content : us_rep3
}

function th1S__ref___projection(a: th1S__ref) : us_rep3 = (a).th1S__content

predicate in_range7(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size8 : int

logic object__size8 : us_rep -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size8({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment8({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit5 : int

logic split_records__record_with_mutable_discrs__present__last__bit5 : int

logic split_records__record_with_mutable_discrs__present__position5 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom5 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit5)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom5 :
  (split_records__record_with_mutable_discrs__present__first__bit5 <  split_records__record_with_mutable_discrs__present__last__bit5)

axiom split_records__record_with_mutable_discrs__present__position_axiom5 :
  (0 <= split_records__record_with_mutable_discrs__present__position5)

logic split_records__record_with_mutable_discrs__field__first__bit5 : int

logic split_records__record_with_mutable_discrs__field__last__bit5 : int

logic split_records__record_with_mutable_discrs__field__position5 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom5 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit5)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom5 :
  (split_records__record_with_mutable_discrs__field__first__bit5 <  split_records__record_with_mutable_discrs__field__last__bit5)

axiom split_records__record_with_mutable_discrs__field__position_axiom5 :
  (0 <= split_records__record_with_mutable_discrs__field__position5)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy27 : bool

logic dummy28 : natural

logic dummy29 : bool

type t7b__ref = { t7b__content : us_rep
}

function t7b__ref___projection(a: t7b__ref) : us_rep = (a).t7b__content

type us_split_fields8 = { rec__split_records__holder__content2 : us_rep
}

function us_split_fields_Content__4__projection(a: us_split_fields8) : us_rep =
  (a).rec__split_records__holder__content2

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs5 : us_split_discrs2; us_split_fields9 :
us_split_fields8
}

function us_rep___9__projection(a: us_rep4) : us_split_discrs2 =
  (a).us_split_discrs5

function us_rep___10__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function to_base1(a: us_rep4) : us_rep2 = { us_split_discrs3 =
  (a).us_split_discrs5; us_split_fields5 = {
  rec__split_records__holder__content =
  ((a).us_split_fields9).rec__split_records__holder__content2 } }

function of_base1(r: us_rep2) : us_rep4 = { us_split_discrs5 =
  (r).us_split_discrs3; us_split_fields9 = {
  rec__split_records__holder__content2 =
  ((r).us_split_fields5).rec__split_records__holder__content } }

logic bool_eq8 : us_rep4, us_rep4 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq8(a, b)].
  ((((((a).us_split_discrs5).rec__split_records__holder__present = ((b).us_split_discrs5).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields9).rec__split_records__holder__content2,
  ((b).us_split_fields9).rec__split_records__holder__content2) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((((a).us_split_discrs5).rec__split_records__holder__present = ((b).us_split_discrs5).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields9).rec__split_records__holder__content2,
  ((b).us_split_fields9).rec__split_records__holder__content2) = true))) ->
  (bool_eq8(a, b) = false))))

predicate in_range8(rec__split_records__holder__present1: bool, a: us_rep2) =
  (rec__split_records__holder__present1 = ((a).us_split_discrs3).rec__split_records__holder__present)

logic value__size9 : int

logic object__size9 : us_rep4 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep4 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size9({ us_split_discrs5 = {
  rec__split_records__holder__present = a }; us_split_fields9 = {
  rec__split_records__holder__content2 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment9({ us_split_discrs5 = {
  rec__split_records__holder__present = a }; us_split_fields9 = {
  rec__split_records__holder__content2 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic split_records__holder__present__first__bit2 : int

logic split_records__holder__present__last__bit2 : int

logic split_records__holder__present__position2 : int

axiom split_records__holder__present__first__bit_axiom2 :
  (0 <= split_records__holder__present__first__bit2)

axiom split_records__holder__present__last__bit_axiom2 :
  (split_records__holder__present__first__bit2 <  split_records__holder__present__last__bit2)

axiom split_records__holder__present__position_axiom2 :
  (0 <= split_records__holder__present__position2)

logic split_records__holder__content__first__bit2 : int

logic split_records__holder__content__last__bit2 : int

logic split_records__holder__content__position2 : int

axiom split_records__holder__content__first__bit_axiom2 :
  (0 <= split_records__holder__content__first__bit2)

axiom split_records__holder__content__last__bit_axiom2 :
  (split_records__holder__content__first__bit2 <  split_records__holder__content__last__bit2)

axiom split_records__holder__content__position_axiom2 :
  (0 <= split_records__holder__content__position2)

logic user_eq10 : us_rep4, us_rep4 -> bool

logic dummy30 : bool

logic dummy31 : bool

logic dummy32 : natural

logic dummy33 : bool

type t6b__ref = { t6b__content : us_rep4
}

function t6b__ref___projection(a: t6b__ref) : us_rep4 = (a).t6b__content

predicate in_range9(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size10 : int

logic object__size10 : us_rep -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size10({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment10({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit6 : int

logic split_records__record_with_mutable_discrs__present__last__bit6 : int

logic split_records__record_with_mutable_discrs__present__position6 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom6 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit6)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom6 :
  (split_records__record_with_mutable_discrs__present__first__bit6 <  split_records__record_with_mutable_discrs__present__last__bit6)

axiom split_records__record_with_mutable_discrs__present__position_axiom6 :
  (0 <= split_records__record_with_mutable_discrs__present__position6)

logic split_records__record_with_mutable_discrs__field__first__bit6 : int

logic split_records__record_with_mutable_discrs__field__last__bit6 : int

logic split_records__record_with_mutable_discrs__field__position6 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom6 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit6)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom6 :
  (split_records__record_with_mutable_discrs__field__first__bit6 <  split_records__record_with_mutable_discrs__field__last__bit6)

axiom split_records__record_with_mutable_discrs__field__position_axiom6 :
  (0 <= split_records__record_with_mutable_discrs__field__position6)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy34 : bool

logic dummy35 : natural

logic dummy36 : bool

type t8b__ref = { t8b__content : us_rep
}

function t8b__ref___projection(a: t8b__ref) : us_rep = (a).t8b__content

logic h1__split_discrs : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range10(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size11 : int

logic object__size11 : us_rep -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size11({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment11({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit7 : int

logic split_records__record_with_mutable_discrs__present__last__bit7 : int

logic split_records__record_with_mutable_discrs__present__position7 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom7 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit7)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom7 :
  (split_records__record_with_mutable_discrs__present__first__bit7 <  split_records__record_with_mutable_discrs__present__last__bit7)

axiom split_records__record_with_mutable_discrs__present__position_axiom7 :
  (0 <= split_records__record_with_mutable_discrs__present__position7)

logic split_records__record_with_mutable_discrs__field__first__bit7 : int

logic split_records__record_with_mutable_discrs__field__last__bit7 : int

logic split_records__record_with_mutable_discrs__field__position7 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom7 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit7)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom7 :
  (split_records__record_with_mutable_discrs__field__first__bit7 <  split_records__record_with_mutable_discrs__field__last__bit7)

axiom split_records__record_with_mutable_discrs__field__position_axiom7 :
  (0 <= split_records__record_with_mutable_discrs__field__position7)

logic user_eq12 : us_rep, us_rep -> bool

logic dummy37 : bool

logic dummy38 : natural

logic dummy39 : bool

type t9b__ref = { t9b__content : us_rep
}

function t9b__ref___projection(a: t9b__ref) : us_rep = (a).t9b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTaSP1

predicate in_range11(x: int) = ((1 <= x) and (x <= 1))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq13 : tTaSP1, tTaSP1 -> bool

logic dummy40 : tTaSP1

type tTaSP1__ref = { tTaSP1__content : tTaSP1
}

function tTaSP1__ref___projection(a: tTaSP1__ref) : tTaSP1 =
  (a).tTaSP1__content

predicate in_range12(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size12 : int

logic object__size12 : us_rep -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size12({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment12({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit8 : int

logic split_records__record_with_mutable_discrs__present__last__bit8 : int

logic split_records__record_with_mutable_discrs__present__position8 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom8 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit8)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom8 :
  (split_records__record_with_mutable_discrs__present__first__bit8 <  split_records__record_with_mutable_discrs__present__last__bit8)

axiom split_records__record_with_mutable_discrs__present__position_axiom8 :
  (0 <= split_records__record_with_mutable_discrs__present__position8)

logic split_records__record_with_mutable_discrs__field__first__bit8 : int

logic split_records__record_with_mutable_discrs__field__last__bit8 : int

logic split_records__record_with_mutable_discrs__field__position8 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom8 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit8)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom8 :
  (split_records__record_with_mutable_discrs__field__first__bit8 <  split_records__record_with_mutable_discrs__field__last__bit8)

axiom split_records__record_with_mutable_discrs__field__position_axiom8 :
  (0 <= split_records__record_with_mutable_discrs__field__position8)

logic user_eq14 : us_rep, us_rep -> bool

logic dummy41 : bool

logic dummy42 : natural

logic dummy43 : bool

type t10b__ref = { t10b__content : us_rep
}

function t10b__ref___projection(a: t10b__ref) : us_rep = (a).t10b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range13(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size13 : int

logic object__size13 : us_rep -> int

logic value__alignment13 : int

logic object__alignment13 : us_rep -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size13({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment13({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit9 : int

logic split_records__record_with_mutable_discrs__present__last__bit9 : int

logic split_records__record_with_mutable_discrs__present__position9 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom9 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit9)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom9 :
  (split_records__record_with_mutable_discrs__present__first__bit9 <  split_records__record_with_mutable_discrs__present__last__bit9)

axiom split_records__record_with_mutable_discrs__present__position_axiom9 :
  (0 <= split_records__record_with_mutable_discrs__present__position9)

logic split_records__record_with_mutable_discrs__field__first__bit9 : int

logic split_records__record_with_mutable_discrs__field__last__bit9 : int

logic split_records__record_with_mutable_discrs__field__position9 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom9 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit9)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom9 :
  (split_records__record_with_mutable_discrs__field__first__bit9 <  split_records__record_with_mutable_discrs__field__last__bit9)

axiom split_records__record_with_mutable_discrs__field__position_axiom9 :
  (0 <= split_records__record_with_mutable_discrs__field__position9)

logic user_eq15 : us_rep, us_rep -> bool

logic dummy44 : bool

logic dummy45 : natural

logic dummy46 : bool

type tc3S__ref = { tc3S__content : us_rep
}

function tc3S__ref___projection(a: tc3S__ref) : us_rep = (a).tc3S__content

predicate in_range14(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size14 : int

logic object__size14 : us_rep -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size14({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment14({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit10 : int

logic split_records__record_with_mutable_discrs__present__last__bit10 : int

logic split_records__record_with_mutable_discrs__present__position10 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom10 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit10)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom10 :
  (split_records__record_with_mutable_discrs__present__first__bit10 <  split_records__record_with_mutable_discrs__present__last__bit10)

axiom split_records__record_with_mutable_discrs__present__position_axiom10 :
  (0 <= split_records__record_with_mutable_discrs__present__position10)

logic split_records__record_with_mutable_discrs__field__first__bit10 : int

logic split_records__record_with_mutable_discrs__field__last__bit10 : int

logic split_records__record_with_mutable_discrs__field__position10 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom10 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit10)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom10 :
  (split_records__record_with_mutable_discrs__field__first__bit10 <  split_records__record_with_mutable_discrs__field__last__bit10)

axiom split_records__record_with_mutable_discrs__field__position_axiom10 :
  (0 <= split_records__record_with_mutable_discrs__field__position10)

logic user_eq16 : us_rep, us_rep -> bool

logic dummy47 : bool

logic dummy48 : natural

logic dummy49 : bool

type t13b__ref = { t13b__content : us_rep
}

function t13b__ref___projection(a: t13b__ref) : us_rep = (a).t13b__content

logic c3 : bool

logic c31 : natural

logic c32 : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range15(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size15 : int

logic object__size15 : us_rep -> int

logic value__alignment15 : int

logic object__alignment15 : us_rep -> int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size15({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom15 : (0 <= value__alignment15)

axiom object__alignment_axiom15 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment15({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit11 : int

logic split_records__record_with_mutable_discrs__present__last__bit11 : int

logic split_records__record_with_mutable_discrs__present__position11 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom11 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit11)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom11 :
  (split_records__record_with_mutable_discrs__present__first__bit11 <  split_records__record_with_mutable_discrs__present__last__bit11)

axiom split_records__record_with_mutable_discrs__present__position_axiom11 :
  (0 <= split_records__record_with_mutable_discrs__present__position11)

logic split_records__record_with_mutable_discrs__field__first__bit11 : int

logic split_records__record_with_mutable_discrs__field__last__bit11 : int

logic split_records__record_with_mutable_discrs__field__position11 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom11 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit11)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom11 :
  (split_records__record_with_mutable_discrs__field__first__bit11 <  split_records__record_with_mutable_discrs__field__last__bit11)

axiom split_records__record_with_mutable_discrs__field__position_axiom11 :
  (0 <= split_records__record_with_mutable_discrs__field__position11)

logic user_eq17 : us_rep, us_rep -> bool

logic dummy50 : bool

logic dummy51 : natural

logic dummy52 : bool

type t14b__ref = { t14b__content : us_rep
}

function t14b__ref___projection(a: t14b__ref) : us_rep = (a).t14b__content

logic c4 : bool

logic c41 : natural

logic c42 : bool

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate in_range16(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size16 : int

logic object__size16 : us_rep -> int

logic value__alignment16 : int

logic object__alignment16 : us_rep -> int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size16({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom16 : (0 <= value__alignment16)

axiom object__alignment_axiom16 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment16({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit12 : int

logic split_records__record_with_mutable_discrs__present__last__bit12 : int

logic split_records__record_with_mutable_discrs__present__position12 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom12 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit12)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom12 :
  (split_records__record_with_mutable_discrs__present__first__bit12 <  split_records__record_with_mutable_discrs__present__last__bit12)

axiom split_records__record_with_mutable_discrs__present__position_axiom12 :
  (0 <= split_records__record_with_mutable_discrs__present__position12)

logic split_records__record_with_mutable_discrs__field__first__bit12 : int

logic split_records__record_with_mutable_discrs__field__last__bit12 : int

logic split_records__record_with_mutable_discrs__field__position12 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom12 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit12)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom12 :
  (split_records__record_with_mutable_discrs__field__first__bit12 <  split_records__record_with_mutable_discrs__field__last__bit12)

axiom split_records__record_with_mutable_discrs__field__position_axiom12 :
  (0 <= split_records__record_with_mutable_discrs__field__position12)

logic user_eq18 : us_rep, us_rep -> bool

logic dummy53 : bool

logic dummy54 : natural

logic dummy55 : bool

type t15b__ref = { t15b__content : us_rep
}

function t15b__ref___projection(a: t15b__ref) : us_rep = (a).t15b__content

type us_split_fields10 = { rec__split_records__holder__content3 : us_rep
}

function us_split_fields_Content__5__projection(a: us_split_fields10) : us_rep =
  (a).rec__split_records__holder__content3

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_discrs6 : us_split_discrs2; us_split_fields11 :
us_split_fields10
}

function us_rep___11__projection(a: us_rep5) : us_split_discrs2 =
  (a).us_split_discrs6

function us_rep___12__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

function to_base2(a: us_rep5) : us_rep2 = { us_split_discrs3 =
  (a).us_split_discrs6; us_split_fields5 = {
  rec__split_records__holder__content =
  ((a).us_split_fields11).rec__split_records__holder__content3 } }

function of_base2(r: us_rep2) : us_rep5 = { us_split_discrs6 =
  (r).us_split_discrs3; us_split_fields11 = {
  rec__split_records__holder__content3 =
  ((r).us_split_fields5).rec__split_records__holder__content } }

logic bool_eq10 : us_rep5, us_rep5 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq10(a, b)].
  ((((((a).us_split_discrs6).rec__split_records__holder__present = ((b).us_split_discrs6).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields11).rec__split_records__holder__content3,
  ((b).us_split_fields11).rec__split_records__holder__content3) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((a).us_split_discrs6).rec__split_records__holder__present = ((b).us_split_discrs6).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields11).rec__split_records__holder__content3,
  ((b).us_split_fields11).rec__split_records__holder__content3) = true))) ->
  (bool_eq10(a, b) = false))))

predicate in_range17(rec__split_records__holder__present1: bool,
  a: us_rep2) =
  (rec__split_records__holder__present1 = ((a).us_split_discrs3).rec__split_records__holder__present)

logic value__size17 : int

logic object__size17 : us_rep5 -> int

logic value__alignment17 : int

logic object__alignment17 : us_rep5 -> int

axiom value__size_axiom17 : (0 <= value__size17)

axiom object__size_axiom17 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size17({ us_split_discrs6 = {
  rec__split_records__holder__present = a }; us_split_fields11 = {
  rec__split_records__holder__content3 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom17 : (0 <= value__alignment17)

axiom object__alignment_axiom17 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment17({ us_split_discrs6 = {
  rec__split_records__holder__present = a }; us_split_fields11 = {
  rec__split_records__holder__content3 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic split_records__holder__present__first__bit3 : int

logic split_records__holder__present__last__bit3 : int

logic split_records__holder__present__position3 : int

axiom split_records__holder__present__first__bit_axiom3 :
  (0 <= split_records__holder__present__first__bit3)

axiom split_records__holder__present__last__bit_axiom3 :
  (split_records__holder__present__first__bit3 <  split_records__holder__present__last__bit3)

axiom split_records__holder__present__position_axiom3 :
  (0 <= split_records__holder__present__position3)

logic split_records__holder__content__first__bit3 : int

logic split_records__holder__content__last__bit3 : int

logic split_records__holder__content__position3 : int

axiom split_records__holder__content__first__bit_axiom3 :
  (0 <= split_records__holder__content__first__bit3)

axiom split_records__holder__content__last__bit_axiom3 :
  (split_records__holder__content__first__bit3 <  split_records__holder__content__last__bit3)

axiom split_records__holder__content__position_axiom3 :
  (0 <= split_records__holder__content__position3)

logic user_eq19 : us_rep5, us_rep5 -> bool

logic dummy56 : bool

logic dummy57 : bool

logic dummy58 : natural

logic dummy59 : bool

type th3S__ref = { th3S__content : us_rep5
}

function th3S__ref___projection(a: th3S__ref) : us_rep5 = (a).th3S__content

predicate in_range18(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size18 : int

logic object__size18 : us_rep -> int

logic value__alignment18 : int

logic object__alignment18 : us_rep -> int

axiom value__size_axiom18 : (0 <= value__size18)

axiom object__size_axiom18 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size18({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom18 : (0 <= value__alignment18)

axiom object__alignment_axiom18 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment18({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit13 : int

logic split_records__record_with_mutable_discrs__present__last__bit13 : int

logic split_records__record_with_mutable_discrs__present__position13 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom13 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit13)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom13 :
  (split_records__record_with_mutable_discrs__present__first__bit13 <  split_records__record_with_mutable_discrs__present__last__bit13)

axiom split_records__record_with_mutable_discrs__present__position_axiom13 :
  (0 <= split_records__record_with_mutable_discrs__present__position13)

logic split_records__record_with_mutable_discrs__field__first__bit13 : int

logic split_records__record_with_mutable_discrs__field__last__bit13 : int

logic split_records__record_with_mutable_discrs__field__position13 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom13 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit13)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom13 :
  (split_records__record_with_mutable_discrs__field__first__bit13 <  split_records__record_with_mutable_discrs__field__last__bit13)

axiom split_records__record_with_mutable_discrs__field__position_axiom13 :
  (0 <= split_records__record_with_mutable_discrs__field__position13)

logic user_eq20 : us_rep, us_rep -> bool

logic dummy60 : bool

logic dummy61 : natural

logic dummy62 : bool

type t17b__ref = { t17b__content : us_rep
}

function t17b__ref___projection(a: t17b__ref) : us_rep = (a).t17b__content

type us_split_fields12 = { rec__split_records__holder__content4 : us_rep
}

function us_split_fields_Content__6__projection(a: us_split_fields12) : us_rep =
  (a).rec__split_records__holder__content4

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_discrs7 : us_split_discrs2; us_split_fields13 :
us_split_fields12
}

function us_rep___13__projection(a: us_rep6) : us_split_discrs2 =
  (a).us_split_discrs7

function us_rep___14__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

function to_base3(a: us_rep6) : us_rep2 = { us_split_discrs3 =
  (a).us_split_discrs7; us_split_fields5 = {
  rec__split_records__holder__content =
  ((a).us_split_fields13).rec__split_records__holder__content4 } }

function of_base3(r: us_rep2) : us_rep6 = { us_split_discrs7 =
  (r).us_split_discrs3; us_split_fields13 = {
  rec__split_records__holder__content4 =
  ((r).us_split_fields5).rec__split_records__holder__content } }

logic bool_eq11 : us_rep6, us_rep6 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq11(a, b)].
  ((((((a).us_split_discrs7).rec__split_records__holder__present = ((b).us_split_discrs7).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields13).rec__split_records__holder__content4,
  ((b).us_split_fields13).rec__split_records__holder__content4) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((a).us_split_discrs7).rec__split_records__holder__present = ((b).us_split_discrs7).rec__split_records__holder__present) and
  (bool_eq3(((a).us_split_fields13).rec__split_records__holder__content4,
  ((b).us_split_fields13).rec__split_records__holder__content4) = true))) ->
  (bool_eq11(a, b) = false))))

predicate in_range19(rec__split_records__holder__present1: bool,
  a: us_rep2) =
  (rec__split_records__holder__present1 = ((a).us_split_discrs3).rec__split_records__holder__present)

logic value__size19 : int

logic object__size19 : us_rep6 -> int

logic value__alignment19 : int

logic object__alignment19 : us_rep6 -> int

axiom value__size_axiom19 : (0 <= value__size19)

axiom object__size_axiom19 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size19({ us_split_discrs7 = {
  rec__split_records__holder__present = a }; us_split_fields13 = {
  rec__split_records__holder__content4 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom19 : (0 <= value__alignment19)

axiom object__alignment_axiom19 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment19({ us_split_discrs7 = {
  rec__split_records__holder__present = a }; us_split_fields13 = {
  rec__split_records__holder__content4 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic split_records__holder__present__first__bit4 : int

logic split_records__holder__present__last__bit4 : int

logic split_records__holder__present__position4 : int

axiom split_records__holder__present__first__bit_axiom4 :
  (0 <= split_records__holder__present__first__bit4)

axiom split_records__holder__present__last__bit_axiom4 :
  (split_records__holder__present__first__bit4 <  split_records__holder__present__last__bit4)

axiom split_records__holder__present__position_axiom4 :
  (0 <= split_records__holder__present__position4)

logic split_records__holder__content__first__bit4 : int

logic split_records__holder__content__last__bit4 : int

logic split_records__holder__content__position4 : int

axiom split_records__holder__content__first__bit_axiom4 :
  (0 <= split_records__holder__content__first__bit4)

axiom split_records__holder__content__last__bit_axiom4 :
  (split_records__holder__content__first__bit4 <  split_records__holder__content__last__bit4)

axiom split_records__holder__content__position_axiom4 :
  (0 <= split_records__holder__content__position4)

logic user_eq21 : us_rep6, us_rep6 -> bool

logic dummy63 : bool

logic dummy64 : bool

logic dummy65 : natural

logic dummy66 : bool

type t16b__ref = { t16b__content : us_rep6
}

function t16b__ref___projection(a: t16b__ref) : us_rep6 = (a).t16b__content

predicate in_range20(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size20 : int

logic object__size20 : us_rep -> int

logic value__alignment20 : int

logic object__alignment20 : us_rep -> int

axiom value__size_axiom20 : (0 <= value__size20)

axiom object__size_axiom20 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size20({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom20 : (0 <= value__alignment20)

axiom object__alignment_axiom20 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment20({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit14 : int

logic split_records__record_with_mutable_discrs__present__last__bit14 : int

logic split_records__record_with_mutable_discrs__present__position14 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom14 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit14)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom14 :
  (split_records__record_with_mutable_discrs__present__first__bit14 <  split_records__record_with_mutable_discrs__present__last__bit14)

axiom split_records__record_with_mutable_discrs__present__position_axiom14 :
  (0 <= split_records__record_with_mutable_discrs__present__position14)

logic split_records__record_with_mutable_discrs__field__first__bit14 : int

logic split_records__record_with_mutable_discrs__field__last__bit14 : int

logic split_records__record_with_mutable_discrs__field__position14 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom14 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit14)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom14 :
  (split_records__record_with_mutable_discrs__field__first__bit14 <  split_records__record_with_mutable_discrs__field__last__bit14)

axiom split_records__record_with_mutable_discrs__field__position_axiom14 :
  (0 <= split_records__record_with_mutable_discrs__field__position14)

logic user_eq22 : us_rep, us_rep -> bool

logic dummy67 : bool

logic dummy68 : natural

logic dummy69 : bool

type t18b__ref = { t18b__content : us_rep
}

function t18b__ref___projection(a: t18b__ref) : us_rep = (a).t18b__content

logic h3 : bool

logic h31 : bool

logic h32 : natural

logic h33 : bool

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate in_range21(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size21 : int

logic object__size21 : us_rep -> int

logic value__alignment21 : int

logic object__alignment21 : us_rep -> int

axiom value__size_axiom21 : (0 <= value__size21)

axiom object__size_axiom21 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size21({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom21 : (0 <= value__alignment21)

axiom object__alignment_axiom21 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment21({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit15 : int

logic split_records__record_with_mutable_discrs__present__last__bit15 : int

logic split_records__record_with_mutable_discrs__present__position15 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom15 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit15)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom15 :
  (split_records__record_with_mutable_discrs__present__first__bit15 <  split_records__record_with_mutable_discrs__present__last__bit15)

axiom split_records__record_with_mutable_discrs__present__position_axiom15 :
  (0 <= split_records__record_with_mutable_discrs__present__position15)

logic split_records__record_with_mutable_discrs__field__first__bit15 : int

logic split_records__record_with_mutable_discrs__field__last__bit15 : int

logic split_records__record_with_mutable_discrs__field__position15 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom15 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit15)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom15 :
  (split_records__record_with_mutable_discrs__field__first__bit15 <  split_records__record_with_mutable_discrs__field__last__bit15)

axiom split_records__record_with_mutable_discrs__field__position_axiom15 :
  (0 <= split_records__record_with_mutable_discrs__field__position15)

logic user_eq23 : us_rep, us_rep -> bool

logic dummy70 : bool

logic dummy71 : natural

logic dummy72 : bool

type t19b__ref = { t19b__content : us_rep
}

function t19b__ref___projection(a: t19b__ref) : us_rep = (a).t19b__content

logic h4 : bool

logic h41 : natural

logic h42 : bool

logic attr__ATTRIBUTE_ADDRESS8 : int

type tTa2SP1

predicate in_range22(x: int) = ((1 <= x) and (x <= 1))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq24 : tTa2SP1, tTa2SP1 -> bool

logic dummy73 : tTa2SP1

type tTa2SP1__ref = { tTa2SP1__content : tTa2SP1
}

function tTa2SP1__ref___projection(a: tTa2SP1__ref) : tTa2SP1 =
  (a).tTa2SP1__content

predicate in_range23(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size22 : int

logic object__size22 : us_rep -> int

logic value__alignment22 : int

logic object__alignment22 : us_rep -> int

axiom value__size_axiom22 : (0 <= value__size22)

axiom object__size_axiom22 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size22({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom22 : (0 <= value__alignment22)

axiom object__alignment_axiom22 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment22({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit16 : int

logic split_records__record_with_mutable_discrs__present__last__bit16 : int

logic split_records__record_with_mutable_discrs__present__position16 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom16 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit16)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom16 :
  (split_records__record_with_mutable_discrs__present__first__bit16 <  split_records__record_with_mutable_discrs__present__last__bit16)

axiom split_records__record_with_mutable_discrs__present__position_axiom16 :
  (0 <= split_records__record_with_mutable_discrs__present__position16)

logic split_records__record_with_mutable_discrs__field__first__bit16 : int

logic split_records__record_with_mutable_discrs__field__last__bit16 : int

logic split_records__record_with_mutable_discrs__field__position16 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom16 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit16)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom16 :
  (split_records__record_with_mutable_discrs__field__first__bit16 <  split_records__record_with_mutable_discrs__field__last__bit16)

axiom split_records__record_with_mutable_discrs__field__position_axiom16 :
  (0 <= split_records__record_with_mutable_discrs__field__position16)

logic user_eq25 : us_rep, us_rep -> bool

logic dummy74 : bool

logic dummy75 : natural

logic dummy76 : bool

type t20b__ref = { t20b__content : us_rep
}

function t20b__ref___projection(a: t20b__ref) : us_rep = (a).t20b__content

logic a2 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

logic split_records__test__a2__aggregate_def : us_rep -> (int,us_rep) farray

axiom def_axiom :
  (forall temp___134:bool. forall temp___1341:natural.
  forall temp___1342:bool. ((split_records__test__a2__aggregate_def({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = temp___134 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = temp___1341 };
  attr__constrained = temp___1342 })[1]) = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = temp___134 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = temp___1341 };
  attr__constrained = temp___1342 }))

predicate in_range24(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size23 : int

logic object__size23 : us_rep -> int

logic value__alignment23 : int

logic object__alignment23 : us_rep -> int

axiom value__size_axiom23 : (0 <= value__size23)

axiom object__size_axiom23 :
  (forall a:bool. forall a1:natural. forall a3:bool. (0 <= object__size23({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a3 })))

axiom value__alignment_axiom23 : (0 <= value__alignment23)

axiom object__alignment_axiom23 :
  (forall a:bool. forall a1:natural. forall a3:bool.
  (0 <= object__alignment23({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a3 })))

logic split_records__record_with_mutable_discrs__present__first__bit17 : int

logic split_records__record_with_mutable_discrs__present__last__bit17 : int

logic split_records__record_with_mutable_discrs__present__position17 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom17 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit17)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom17 :
  (split_records__record_with_mutable_discrs__present__first__bit17 <  split_records__record_with_mutable_discrs__present__last__bit17)

axiom split_records__record_with_mutable_discrs__present__position_axiom17 :
  (0 <= split_records__record_with_mutable_discrs__present__position17)

logic split_records__record_with_mutable_discrs__field__first__bit17 : int

logic split_records__record_with_mutable_discrs__field__last__bit17 : int

logic split_records__record_with_mutable_discrs__field__position17 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom17 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit17)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom17 :
  (split_records__record_with_mutable_discrs__field__first__bit17 <  split_records__record_with_mutable_discrs__field__last__bit17)

axiom split_records__record_with_mutable_discrs__field__position_axiom17 :
  (0 <= split_records__record_with_mutable_discrs__field__position17)

logic user_eq26 : us_rep, us_rep -> bool

logic dummy77 : bool

logic dummy78 : natural

logic dummy79 : bool

type t23b__ref = { t23b__content : us_rep
}

function t23b__ref___projection(a: t23b__ref) : us_rep = (a).t23b__content

predicate in_range25(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size24 : int

logic object__size24 : us_rep -> int

logic value__alignment24 : int

logic object__alignment24 : us_rep -> int

axiom value__size_axiom24 : (0 <= value__size24)

axiom object__size_axiom24 :
  (forall a:bool. forall a1:natural. forall a3:bool. (0 <= object__size24({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a3 })))

axiom value__alignment_axiom24 : (0 <= value__alignment24)

axiom object__alignment_axiom24 :
  (forall a:bool. forall a1:natural. forall a3:bool.
  (0 <= object__alignment24({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a3 })))

logic split_records__record_with_mutable_discrs__present__first__bit18 : int

logic split_records__record_with_mutable_discrs__present__last__bit18 : int

logic split_records__record_with_mutable_discrs__present__position18 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom18 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit18)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom18 :
  (split_records__record_with_mutable_discrs__present__first__bit18 <  split_records__record_with_mutable_discrs__present__last__bit18)

axiom split_records__record_with_mutable_discrs__present__position_axiom18 :
  (0 <= split_records__record_with_mutable_discrs__present__position18)

logic split_records__record_with_mutable_discrs__field__first__bit18 : int

logic split_records__record_with_mutable_discrs__field__last__bit18 : int

logic split_records__record_with_mutable_discrs__field__position18 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom18 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit18)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom18 :
  (split_records__record_with_mutable_discrs__field__first__bit18 <  split_records__record_with_mutable_discrs__field__last__bit18)

axiom split_records__record_with_mutable_discrs__field__position_axiom18 :
  (0 <= split_records__record_with_mutable_discrs__field__position18)

logic user_eq27 : us_rep, us_rep -> bool

logic dummy80 : bool

logic dummy81 : natural

logic dummy82 : bool

type t24b__ref = { t24b__content : us_rep
}

function t24b__ref___projection(a: t24b__ref) : us_rep = (a).t24b__content

logic split_records__test__a__aggregate_def : us_rep -> (int,us_rep) farray

axiom def_axiom1 :
  (forall temp___248:bool. forall temp___2481:natural.
  forall temp___2482:bool. ((split_records__test__a__aggregate_def({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = temp___248 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = temp___2481 };
  attr__constrained = temp___2482 })[1]) = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = temp___248 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = temp___2481 };
  attr__constrained = temp___2482 }))

axiom c3__def_axiom : ((c3 = of_int(0)) and ((c31 = dummy) and (c32 = true)))

axiom c4__def_axiom : ((c4 = of_int(0)) and ((c41 = dummy) and (c42 = true)))

axiom h3__def_axiom : ((h3 = of_int(0)) and ((h31 = of_int(0)) and
  ((h32 = dummy) and (h33 = true))))

axiom h4__def_axiom : ((h4 = of_int(0)) and ((h41 = dummy) and
  (h42 = false)))

axiom a2__def_axiom : (a2 = split_records__test__a2__aggregate_def({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = of_int(0) };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = dummy };
  attr__constrained = false }))

 (* File "split_records.ads", line 24, characters 0-0 *)
goal WP_parameter_def :
  (forall c1__split_fields:natural. forall c2__split_fields:natural.
  forall c2__split_discrs:bool. forall h1__split_fields:bool.
  forall h1__split_fields1:natural. forall h1__split_fields2:bool.
  forall h2__split_fields:bool. forall h2__split_fields1:natural.
  forall h2__split_fields2:bool. forall a:(int,us_rep) farray.
  forall result:natural. forall c2__split_fields1:natural.
  forall result1:bool. forall c2__split_discrs1:bool.
  forall result2:us_split_fields__ref3.
  forall h1__split_fields3:us_split_fields6.
  forall result3:us_split_fields__ref1.
  forall h2__split_fields3:us_split_fields2. forall result4:map__ref.
  forall a1:(int,us_rep) farray.
  forall split_records__update_field_if_possible__r__discrs:us_split_discrs.
  forall split_records__update_field_if_possible__r__fields:us_split_fields.
  forall result5:us_split_fields__ref.
  forall c1__split_fields1:us_split_fields.
  forall c2__split_fields2:us_split_fields.
  forall c2__split_discrs2:us_split_discrs.
  forall split_records__update_field_if_possible__r__discrs1:us_split_discrs.
  forall split_records__update_field_if_possible__r__fields1:us_split_fields.
  forall result6:us_split_fields__ref3.
  forall h1__split_fields4:us_split_fields6.
  (((c1__attr__constrained = true) and (c1__split_discrs = of_int(0))) ->
  (((of_int(0) = c1__split_discrs) and (c1__attr__constrained = true)) ->
  ((((result = c2__split_fields) and (c2__split_fields1 = dummy)) and
  (((result1 = c2__split_discrs) and (c2__split_discrs1 = of_int(0))) and
  (c2__attr__constrained = false))) -> ((((result2 = {
  us_split_fields__content3 = { rec__split_records__holder__content1 = {
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = h1__split_fields
  }; us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = h1__split_fields1
  }; attr__constrained = h1__split_fields2 } } }) and (h1__split_fields3 = {
  rec__split_records__holder__content1 = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = of_int(0) };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = dummy };
  attr__constrained = true } })) and (h1__split_discrs = of_int(0))) ->
  (((of_int(0) = h1__split_discrs) and
  (((of_int(0) = (((h1__split_fields3).rec__split_records__holder__content1).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) and
  (((h1__split_fields3).rec__split_records__holder__content1).attr__constrained = true)) and
  (((h1__split_fields3).rec__split_records__holder__content1).attr__constrained = true))) ->
  (((result3 = { us_split_fields__content1 = {
  rec__split_records__mutable_holder__content = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = h2__split_fields
  }; us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = h2__split_fields1
  }; attr__constrained = h2__split_fields2 } } }) and (h2__split_fields3 = {
  rec__split_records__mutable_holder__content = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = of_int(0) };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = dummy };
  attr__constrained = false } })) ->
  ((((h2__split_fields3).rec__split_records__mutable_holder__content).attr__constrained = false) ->
  (((result4 = { map__content = a }) and
  (a1 = split_records__test__a__aggregate_def({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = of_int(0) };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = dummy };
  attr__constrained = false }))) ->
  ((forall temp___194:int. (((1 <= temp___194) and (temp___194 <= 1)) ->
   (((a1[temp___194])).attr__constrained = false))) ->
  (((of_int(0) = c3) and ((dummy = c31) and (true = c32))) ->
  (((of_int(0) = c3) and (c32 = true)) -> (((of_int(0) = c4) and
  ((dummy = c41) and (true = c42))) -> (((of_int(0) = c4) and
  (c42 = true)) -> (((of_int(0) = h3) and ((of_int(0) = h31) and
  ((dummy = h32) and (true = h33)))) -> (((of_int(0) = h3) and
  (((of_int(0) = h31) and (h33 = true)) and (h33 = true))) ->
  (((of_int(0) = h4) and ((dummy = h41) and (false = h42))) ->
  ((h42 = false) -> ((split_records__test__a2__aggregate_def({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = of_int(0) };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = dummy };
  attr__constrained = false }) = a2) ->
  ((forall temp___227:int. (((1 <= temp___227) and (temp___227 <= 1)) ->
   (((a2[temp___227])).attr__constrained = false))) ->
  (((((split_records__update_field_if_possible__r__discrs).rec__split_records__record_with_mutable_discrs__present = true) ->
  (to_rep((split_records__update_field_if_possible__r__fields).rec__split_records__record_with_mutable_discrs__field) = 0)) and
  (((result5 = { us_split_fields__content = {
  rec__split_records__record_with_mutable_discrs__field = c1__split_fields }
  }) and
  (c1__split_fields1 = split_records__update_field_if_possible__r__fields)) and
  ((c1__attr__constrained = true) ->
  (split_records__update_field_if_possible__r__discrs = {
  rec__split_records__record_with_mutable_discrs__present = c1__split_discrs
  })))) -> ((not (c1__split_discrs = true)) ->
  ((((c2__split_discrs2).rec__split_records__record_with_mutable_discrs__present = true) ->
  (to_rep((c2__split_fields2).rec__split_records__record_with_mutable_discrs__field) = 0)) ->
  ((not ((c2__split_discrs2).rec__split_records__record_with_mutable_discrs__present = true)) ->
  (((((split_records__update_field_if_possible__r__discrs1).rec__split_records__record_with_mutable_discrs__present = true) ->
  (to_rep((split_records__update_field_if_possible__r__fields1).rec__split_records__record_with_mutable_discrs__field) = 0)) and
  (((result6 = { us_split_fields__content3 = h1__split_fields3 }) and
  (h1__split_fields4 = { rec__split_records__holder__content1 = {
  us_split_discrs1 = split_records__update_field_if_possible__r__discrs1;
  us_split_fields1 = split_records__update_field_if_possible__r__fields1;
  attr__constrained =
  ((h1__split_fields3).rec__split_records__holder__content1).attr__constrained
  } })) and
  ((((h1__split_fields3).rec__split_records__holder__content1).attr__constrained = true) ->
  (split_records__update_field_if_possible__r__discrs1 = ((h1__split_fields3).rec__split_records__holder__content1).us_split_discrs1)))) ->
  ((not ((((h1__split_fields4).rec__split_records__holder__content1).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present = true)) ->
  (not (((h2__split_fields3).rec__split_records__mutable_holder__content).attr__constrained = true))))))))))))))))))))))))))))
