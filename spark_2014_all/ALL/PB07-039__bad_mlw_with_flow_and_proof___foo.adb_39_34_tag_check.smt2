;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun us_compatible_tags (Int Int) Bool)

;; __compatible_tags_refl
  (assert (forall ((tag Int)) (us_compatible_tags tag tag)))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__ext__ us_private)))))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content us_rep)))))
(define-fun t1__ref___projection ((a t1__ref)) us_rep (t1__content a))

(define-fun default_initial_assumption ((temp___expr_172 us_rep)
  (temp___skip_top_level_173 Bool)) Bool (= (attr__tag temp___expr_172)
  us_tag))

(declare-const t1_var__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun prim_func (us_split_fields) us_rep)

(declare-fun prim_func__function_guard (us_rep us_split_fields) Bool)

(declare-fun prim_func1 (Int us_split_fields) us_rep)

(declare-fun prim_func__function_guard1 (us_rep Int us_split_fields) Bool)

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content us_rep)))))
(define-fun t2__ref___projection ((a t2__ref)) us_rep (t2__content a))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((t3__ref (mk_t3__ref (t3__content us_rep)))))
(define-fun t3__ref___projection ((a t3__ref)) us_rep (t3__content a))

;; prim_func__post_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (attr__tag (prim_func foo__t1_pkg__t1_var__fields)) us_tag) :pattern (
  (prim_func foo__t1_pkg__t1_var__fields)) )))

;; prim_func__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (attr__tag (prim_func1 attr__tag1 foo__t1_pkg__t1_var__fields)) attr__tag1) :pattern (
  (prim_func1 attr__tag1 foo__t1_pkg__t1_var__fields)) ))))

;; foo__t1_pkg__t1__compat_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (prim_func foo__t1_pkg__t1_var__fields) (prim_func1 us_tag
                                                foo__t1_pkg__t1_var__fields)) :pattern (
  (prim_func1 us_tag foo__t1_pkg__t1_var__fields)) )))

;; foo__t2_pkg__t2__compat_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (prim_func foo__t1_pkg__t1_var__fields) (prim_func1 us_tag1
                                                foo__t1_pkg__t1_var__fields)) :pattern (
  (prim_func1 us_tag1 foo__t1_pkg__t1_var__fields)) )))

;; foo__t3_pkg__t3__compat_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (prim_func foo__t1_pkg__t1_var__fields) (prim_func1 us_tag2
                                                foo__t1_pkg__t1_var__fields)) :pattern (
  (prim_func1 us_tag2 foo__t1_pkg__t1_var__fields)) )))

;; prim_func__def_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (prim_func foo__t1_pkg__t1_var__fields) (mk___rep
                                                foo__t1_pkg__t1_var__fields
                                                t1_var__attr__tag)) :pattern (
  (prim_func foo__t1_pkg__t1_var__fields)) )))

(define-fun default_initial_assumption1 ((temp___expr_183 us_rep)
  (temp___skip_top_level_184 Bool)) Bool (= (attr__tag temp___expr_183)
  us_tag1))

(define-fun default_initial_assumption2 ((temp___expr_193 us_rep)
  (temp___skip_top_level_194 Bool)) Bool (= (attr__tag temp___expr_193)
  us_tag2))

(declare-const t1_var__split_fields us_private)

(declare-const temp___206 us_private)

(declare-const temp___2061 Int)

;; H
  (assert
  (and
  (= (mk___rep (mk___split_fields temp___206) temp___2061) (prim_func
                                                           (mk___split_fields
                                                           t1_var__split_fields)))
  (and (= t1_var__split_fields temp___206) (= t1_var__attr__tag temp___2061))))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 34, characters 0-0
  (not (us_compatible_tags temp___2061 us_tag1)))
(check-sat)
(exit)
