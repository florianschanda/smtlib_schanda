(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom :
  (forall c:int [is_digit(c)]. (in_range3(c) -> (((c = 48) ->
  (is_digit(c) = true)) and ((not (c = 48)) -> (((c = 49) ->
  (is_digit(c) = true)) and ((not (c = 49)) -> (((c = 50) ->
  (is_digit(c) = true)) and ((not (c = 50)) -> (((c = 51) ->
  (is_digit(c) = true)) and ((not (c = 51)) -> (((c = 52) ->
  (is_digit(c) = true)) and ((not (c = 52)) -> (((c = 53) ->
  (is_digit(c) = true)) and ((not (c = 53)) -> (((c = 54) ->
  (is_digit(c) = true)) and ((not (c = 54)) -> (((c = 55) ->
  (is_digit(c) = true)) and ((not (c = 55)) -> (((c = 56) ->
  (is_digit(c) = true)) and ((not (c = 56)) -> (((c = 57) ->
  (is_digit(c) = true)) and ((not (c = 57)) -> (((57 <  c) ->
  (not (is_digit(c) = true))) and ((not (57 <  c)) -> ((c <  48) ->
  (not (is_digit(c) = true)))))))))))))))))))))))))))

logic convert_character_digit_to_integer : int -> int

logic convert_character_digit_to_integer__function_guard : int, int -> prop

axiom convert_character_digit_to_integer__post_axiom :
  (forall source:int [convert_character_digit_to_integer(source)].
  ((in_range3(source) and (is_digit(source) = true)) ->
  ((((0 <= convert_character_digit_to_integer(source)) and
  (convert_character_digit_to_integer(source) <= 9)) and (((source = 48) ->
  (convert_character_digit_to_integer(source) = 0)) and
  ((not (source = 48)) -> (((source = 49) ->
  (convert_character_digit_to_integer(source) = 1)) and
  ((not (source = 49)) -> (((source = 50) ->
  (convert_character_digit_to_integer(source) = 2)) and
  ((not (source = 50)) -> (((source = 51) ->
  (convert_character_digit_to_integer(source) = 3)) and
  ((not (source = 51)) -> (((source = 52) ->
  (convert_character_digit_to_integer(source) = 4)) and
  ((not (source = 52)) -> (((source = 53) ->
  (convert_character_digit_to_integer(source) = 5)) and
  ((not (source = 53)) -> (((source = 54) ->
  (convert_character_digit_to_integer(source) = 6)) and
  ((not (source = 54)) -> (((source = 55) ->
  (convert_character_digit_to_integer(source) = 7)) and
  ((not (source = 55)) -> (((source = 56) ->
  (convert_character_digit_to_integer(source) = 8)) and
  ((not (source = 56)) -> ((source = 57) ->
  (convert_character_digit_to_integer(source) = 9))))))))))))))))))))) and
  in_range1(convert_character_digit_to_integer(source)))))

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : integer, int -> (int,integer) farray

axiom singleton_def1 :
  (forall v:integer.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic source : (int,character) farray

logic source1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type tnumber_array_typeD1__ref = { tnumber_array_typeD1__content : integer
}

function tnumber_array_typeD1__ref___16__projection(a: tnumber_array_typeD1__ref) : integer =
  (a).tnumber_array_typeD1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,integer) farray

logic dummy7 : t1

type number_array_type__ref = { number_array_type__content : us_t1
}

function number_array_type__ref___16__projection(a: number_array_type__ref) : us_t1 =
  (a).number_array_type__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t332b__ref = { t332b__content : integer
}

function t332b__ref___projection(a: t332b__ref) : integer =
  (a).t332b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq7((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,integer) farray

logic dummy10 : t2

type t333b__ref = { t333b__content : us_t2
}

function t333b__ref___projection(a: t333b__ref) : us_t2 = (a).t333b__content

logic n__first : integer

logic n__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type t334b__ref = { t334b__content : integer
}

function t334b__ref___projection(a: t334b__ref) : integer =
  (a).t334b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,integer) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,integer) farray = (a).elts3

function of_array3(a: (int,integer) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq13(x: us_t3, y: us_t3) : bool = bool_eq7((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,integer) farray

logic dummy13 : t3

type tnumber_array_typeB__ref = { tnumber_array_typeB__content : us_t3
}

function tnumber_array_typeB__ref___16__projection(a: tnumber_array_typeB__ref) : us_t3 =
  (a).tnumber_array_typeB__content

logic aida__conversion__calculate_positive_target_length_4__n__aggregate_def : int,
  int, int -> us_t2

axiom def_axiom :
  (forall temp___1699:int. forall temp___1700:int. forall temp___1701:int.
  ((dynamic_property6(to_rep1(first(source1)), (to_rep1(first(source1)) + 3),
  temp___1700, temp___1701) ->
  ((to_rep1(first4((aida__conversion__calculate_positive_target_length_4__n__aggregate_def(temp___1699,
  temp___1700, temp___1701)).rt2)) = temp___1700) and
  (to_rep1(last4((aida__conversion__calculate_positive_target_length_4__n__aggregate_def(temp___1699,
  temp___1700, temp___1701)).rt2)) = temp___1701))) and
  (forall temp___1702:int.
  (((aida__conversion__calculate_positive_target_length_4__n__aggregate_def(temp___1699,
  temp___1700, temp___1701)).elts2[temp___1702]) = of_rep1(temp___1699)))))

 (* File "aida-conversion.adb", line 955, characters 0-0 *)
goal WP_parameter_def :
  (forall target:int. forall has_failed:bool. forall n:(int,integer) farray.
  forall index:int. forall temp___1704:(int,integer) farray.
  forall temp___17041:t2.
  forall aida__conversion__calculate_positive_target_length_4__n__assume:(int,integer) farray.
  forall aida__conversion__calculate_positive_target_length_4__n__assume1:t1.
  forall temp___1711:int. forall temp___1709:int.
  forall temp___1707:(int,integer) farray. forall o:int. forall o1:integer.
  forall o2:int.
  forall aida__conversion__convert_character_digit_to_integer__2__target:int.
  forall o3:int. forall o4:character. forall o5:int. forall o6:integer.
  forall o7:int. forall o8:(int,integer) farray. forall temp___1712:int.
  forall o9:int. forall o10:integer. forall o11:int. forall temp___1713:int.
  forall o12:int. forall o13:integer. forall o14:int. forall o15:int.
  forall o16:int. forall o17:int. forall o18:int. forall temp___1714:int.
  forall o19:int. forall o20:integer. forall o21:int. forall o22:int.
  forall o23:int. forall o24:int. forall o25:int. forall temp___1715:int.
  forall o26:int. forall o27:integer. forall o28:int. forall o29:int.
  forall o30:int. forall o31:int. forall o32:int. forall temp___1718:int.
  forall o33:int. forall o34:character. forall o35:int.
  forall temp___1719:int. forall o36:int. forall o37:character.
  forall o38:int. forall o39:int. forall o40:int. forall o41:int.
  forall result:(int,integer) farray. forall n1:(int,integer) farray.
  forall result1:int. forall index1:int.
  forall aida__conversion__convert_character_digit_to_integer__2__target1:int.
  forall result2:(int,integer) farray. forall n2:(int,integer) farray.
  forall n3:(int,integer) farray. forall index2:int.
  forall n4:(int,integer) farray. forall index3:int.
  forall n5:(int,integer) farray. forall index4:int.
  forall n6:(int,integer) farray. forall index5:int.
  forall n7:(int,integer) farray. forall index6:int. forall result3:int.
  forall target1:int. forall result4:int. forall target2:int.
  forall result5:int. forall target3:int. forall result6:int.
  forall target4:int. forall result7:bool. forall has_failed1:bool.
  forall target5:int. forall has_failed2:bool.
  forall n8:(int,integer) farray. forall index7:int. forall target6:int.
  forall has_failed3:bool. forall n9:(int,integer) farray. forall index8:int.
  (dynamic_property(1, 2147483647, to_rep1(first(source1)),
  to_rep1(last(source1))) -> ((((-2147483648) <= 2147483647) ->
  in_range1(target)) -> (((length({ elts = source; rt = source1 }) = 4) and
  (forall index9:int. (((to_rep1(first(source1)) <= index9) and
  (index9 <= to_rep1(last(source1)))) ->
  (is_digit(to_rep((source[index9]))) = true)))) ->
  (((((((to_rep1(first4((aida__conversion__calculate_positive_target_length_4__n__aggregate_def(0,
  to_rep1(first(source1)),
  (to_rep1(first(source1)) + 3))).rt2)) = to_rep1(first(source1))) and
  ((to_rep1(last4((aida__conversion__calculate_positive_target_length_4__n__aggregate_def(0,
  to_rep1(first(source1)),
  (to_rep1(first(source1)) + 3))).rt2)) = (to_rep1(first(source1)) + 3)) and
  ({ elts2 = temp___1704; rt2 = temp___17041
  } = aida__conversion__calculate_positive_target_length_4__n__aggregate_def(0,
  to_rep1(first(source1)), (to_rep1(first(source1)) + 3))))) and
  ((((to_rep1(first4(temp___17041)) <= to_rep1(last4(temp___17041))) and
  (((to_rep1(first(source1)) <= (to_rep1(first(source1)) + 3)) and
  (((to_rep1(last4(temp___17041)) - to_rep1(first4(temp___17041))) + 1) = (((to_rep1(first(source1)) + 3) - to_rep1(first(source1))) + 1))) or
  ((not (to_rep1(first(source1)) <= (to_rep1(first(source1)) + 3))) and
  (((to_rep1(last4(temp___17041)) - to_rep1(first4(temp___17041))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___17041)) <= to_rep1(last4(temp___17041)))) and
  (((to_rep1(first(source1)) <= (to_rep1(first(source1)) + 3)) and
  (0 = (((to_rep1(first(source1)) + 3) - to_rep1(first(source1))) + 1))) or
  (not (to_rep1(first(source1)) <= (to_rep1(first(source1)) + 3)))))) and
  ((slide1(temp___1704, to_rep1(first4(temp___17041)),
  to_rep1(first(source1))) = aida__conversion__calculate_positive_target_length_4__n__assume) and
  (mk1(to_rep1(first(source1)),
  (to_rep1(first(source1)) + 3)) = aida__conversion__calculate_positive_target_length_4__n__assume1)))) and
  ((({ map__content1 = result } = { map__content1 = n }) and
  (n1 = aida__conversion__calculate_positive_target_length_4__n__assume)) and
  ((to_rep1(n__first) = to_rep1(first2(aida__conversion__calculate_positive_target_length_4__n__assume1))) and
  (to_rep1(n__last) = to_rep1(last2(aida__conversion__calculate_positive_target_length_4__n__assume1)))))) and
  ((dynamic_property2(to_rep1(first(source1)), (to_rep1(first(source1)) + 3),
  to_rep1(n__first), to_rep1(n__last)) and
  ((to_rep1(n__first) = to_rep1(first(source1))) and
  (to_rep1(n__last) = (to_rep1(first(source1)) + 3)))) and
  ((((temp___1711 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3))) and ((({ int__content = result1
  } = { int__content = index }) and (index1 = to_rep1(first(source1)))) and
  ((((to_rep1(first(source1)) <= index1) and (index1 <= temp___1711)) and
  ((((temp___1709 = index1) and ((temp___1707 = n1) and
  ((((((((to_rep1(n__first) <= index1) and (index1 <= to_rep1(n__last))) and
  (o = index1)) and (o1 = (n1[o]))) and (o2 = to_rep1(o1))) and
  (o2 = aida__conversion__convert_character_digit_to_integer__2__target)) and
  (((((((to_rep1(first(source1)) <= index1) and
  (index1 <= to_rep1(last(source1)))) and (o3 = index1)) and
  (o4 = (source[o3]))) and (o5 = to_rep(o4))) and
  (((((0 <= aida__conversion__convert_character_digit_to_integer__2__target1) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 <= 9)) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = convert_character_digit_to_integer(o5))) and
  (((bool_eq1(o5, 48) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 0)) or
  ((not (bool_eq1(o5, 48) = true)) and (((bool_eq1(o5, 49) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 1)) or
  ((not (bool_eq1(o5, 49) = true)) and (((bool_eq1(o5, 50) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 2)) or
  ((not (bool_eq1(o5, 50) = true)) and (((bool_eq1(o5, 51) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 3)) or
  ((not (bool_eq1(o5, 51) = true)) and (((bool_eq1(o5, 52) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 4)) or
  ((not (bool_eq1(o5, 52) = true)) and (((bool_eq1(o5, 53) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 5)) or
  ((not (bool_eq1(o5, 53) = true)) and (((bool_eq1(o5, 54) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 6)) or
  ((not (bool_eq1(o5, 54) = true)) and (((bool_eq1(o5, 55) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 7)) or
  ((not (bool_eq1(o5, 55) = true)) and (((bool_eq1(o5, 56) = true) and
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 8)) or
  ((not (bool_eq1(o5, 56) = true)) and ((bool_eq1(o5, 57) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target1 = 9))))))))))))))))))))) and
  in_range1(aida__conversion__convert_character_digit_to_integer__2__target1))) and
  (((to_rep1(o6) = aida__conversion__convert_character_digit_to_integer__2__target1) and
  ((((to_rep1(n__first) <= index1) and (index1 <= to_rep1(n__last))) and
  (o7 = index1)) and (o8 = (n1[o7 <- o6])))) and ((n1 = result2) and
  (n2 = o8))))) and
  ((forall j:int. (((to_rep1(first(source1)) <= j) and (j <= index2)) ->
   (to_rep1((n3[j])) = convert_character_digit_to_integer(to_rep((source[j])))))) and
  ((((forall temp___1708:int. (((to_rep1(n__first) <= temp___1708) and
     (temp___1708 <= to_rep1(n__last))) -> ((index2 <  temp___1708) ->
     ((n3[temp___1708]) = (temp___1707[temp___1708]))))) and
  ((to_rep1(first(source1)) <= (to_rep1(first(source1)) + 3)) ->
  dynamic_property5(to_rep1(first(source1)), (to_rep1(first(source1)) + 3),
  index2))) and ((to_rep1(first(source1)) <= index2) and
  (index2 <= (to_rep1(first(source1)) + 3)))) and
  (index2 = temp___1711)))))) and (((index2 = index3) and (n3 = n4)) and
  ((index4 = index2) and (n5 = n3)))) and ((({ int__content = index5 } = {
  int__content = index3 }) and ({ map__content1 = n6 } = { map__content1 = n4
  })) and ((index6 = index4) and (n7 = n5))))) or
  ((not ((to_rep1(first(source1)) <= index1) and
  (index1 <= temp___1711))) and (((index1 = index5) and (n1 = n6)) and
  ((index6 = index1) and (n7 = n1))))))) and
  (((((((temp___1712 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3))) and
  (((to_rep1(n__first) <= temp___1712) and
  (temp___1712 <= to_rep1(n__last))) and (o9 = temp___1712))) and
  (o10 = (n6[o9]))) and (o11 = to_rep1(o10))) and (({ int__content = result3
  } = { int__content = target }) and (target1 = o11))) and
  ((target1 <= 9) and
  (((((((((((temp___1713 = (to_rep1(first(source1)) + 2)) and
  in_range1((to_rep1(first(source1)) + 2))) and
  (((to_rep1(n__first) <= temp___1713) and
  (temp___1713 <= to_rep1(n__last))) and (o12 = temp___1713))) and
  (o13 = (n6[o12]))) and (o14 = to_rep1(o13))) and (o15 = (o14 * 10))) and
  ((o16 = o15) and in_range1(o15))) and (o17 = (target1 + o16))) and
  ((o18 = o17) and in_range1(o17))) and ((target1 = result4) and
  (target2 = o18))) and ((target2 <= 99) and
  (((((((((((temp___1714 = (to_rep1(first(source1)) + 1)) and
  in_range1((to_rep1(first(source1)) + 1))) and
  (((to_rep1(n__first) <= temp___1714) and
  (temp___1714 <= to_rep1(n__last))) and (o19 = temp___1714))) and
  (o20 = (n6[o19]))) and (o21 = to_rep1(o20))) and (o22 = (o21 * 100))) and
  ((o23 = o22) and in_range1(o22))) and (o24 = (target2 + o23))) and
  ((o25 = o24) and in_range1(o24))) and ((target2 = result5) and
  (target3 = o25))) and ((target3 <= 999) and
  (((((((((((temp___1715 = (to_rep1(first(source1)) + 0)) and
  in_range1((to_rep1(first(source1)) + 0))) and
  (((to_rep1(n__first) <= temp___1715) and
  (temp___1715 <= to_rep1(n__last))) and (o26 = temp___1715))) and
  (o27 = (n6[o26]))) and (o28 = to_rep1(o27))) and (o29 = (o28 * 1000))) and
  ((o30 = o29) and in_range1(o29))) and (o31 = (target3 + o30))) and
  ((o32 = o31) and in_range1(o31))) and ((target3 = result6) and
  (target4 = o32))) and ((target4 <= 9999) and ((result7 = has_failed) and
  (has_failed1 = of_int(0)))))))))))))) and ((({ int__content = index7 } = {
  int__content = index5 }) and (({ map__content1 = n8 } = { map__content1 =
  n6 }) and ((has_failed1 = has_failed2) and (target4 = target5)))) and
  ((index8 = index6) and ((n9 = n7) and ((has_failed3 = has_failed1) and
  (target6 = target4)))))) ->
  (((((((((temp___1719 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3))) and
  (((to_rep1(first(source1)) <= temp___1719) and
  (temp___1719 <= to_rep1(last(source1)))) and (o36 = temp___1719))) and
  (o37 = (source[o36]))) and (o38 = to_rep(o37))) and
  ((o39 = convert_character_digit_to_integer(o38)) and (in_range1(o39) and
  (((0 <= o39) and (o39 <= 9)) and (((bool_eq1(o38, 48) = true) and
  (o39 = 0)) or ((not (bool_eq1(o38, 48) = true)) and (((bool_eq1(o38,
  49) = true) and (o39 = 1)) or ((not (bool_eq1(o38, 49) = true)) and
  (((bool_eq1(o38, 50) = true) and (o39 = 2)) or ((not (bool_eq1(o38,
  50) = true)) and (((bool_eq1(o38, 51) = true) and (o39 = 3)) or
  ((not (bool_eq1(o38, 51) = true)) and (((bool_eq1(o38, 52) = true) and
  (o39 = 4)) or ((not (bool_eq1(o38, 52) = true)) and (((bool_eq1(o38,
  53) = true) and (o39 = 5)) or ((not (bool_eq1(o38, 53) = true)) and
  (((bool_eq1(o38, 54) = true) and (o39 = 6)) or ((not (bool_eq1(o38,
  54) = true)) and (((bool_eq1(o38, 55) = true) and (o39 = 7)) or
  ((not (bool_eq1(o38, 55) = true)) and (((bool_eq1(o38, 56) = true) and
  (o39 = 8)) or ((not (bool_eq1(o38, 56) = true)) and ((bool_eq1(o38,
  57) = true) -> (o39 = 9)))))))))))))))))))))))) and (o40 = (o39 * 1))) and
  ((o41 = o40) and in_range1(o40))) ->
  ((((((temp___1718 = (to_rep1(first(source1)) + 2)) and
  in_range1((to_rep1(first(source1)) + 2))) and
  (((to_rep1(first(source1)) <= temp___1718) and
  (temp___1718 <= to_rep1(last(source1)))) and (o33 = temp___1718))) and
  (o34 = (source[o33]))) and (o35 = to_rep(o34))) ->
  (is_digit(o35) = true))))))))
