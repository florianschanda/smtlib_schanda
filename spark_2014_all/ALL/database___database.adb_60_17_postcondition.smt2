;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort ext_account_num 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 200000)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (ext_account_num ext_account_num) Bool)

(declare-const dummy ext_account_num)

(declare-datatypes ()
((ext_account_num__ref
 (mk_ext_account_num__ref (ext_account_num__content ext_account_num)))))
(define-fun ext_account_num__ref___projection ((a ext_account_num__ref)) ext_account_num
  (ext_account_num__content a))

(define-fun dynamic_invariant ((temp___expr_209 Int)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)) Bool (=>
                                      (or (= temp___is_init_206 true)
                                      (<= 0 200000)) (in_range1
                                      temp___expr_209)))

(declare-fun to_rep (ext_account_num) Int)

(declare-fun of_rep (Int) ext_account_num)

;; inversion_axiom
  (assert
  (forall ((x ext_account_num))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x ext_account_num)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort account_num 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 200000)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (account_num account_num) Bool)

(declare-const dummy1 account_num)

(declare-datatypes ()
((account_num__ref (mk_account_num__ref (account_num__content account_num)))))
(define-fun account_num__ref___projection ((a account_num__ref)) account_num
  (account_num__content a))

(define-fun dynamic_invariant1 ((temp___expr_215 Int)
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool)) Bool (=>
                                      (or (= temp___is_init_212 true)
                                      (<= 1 200000)) (in_range2
                                      temp___expr_215)))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__database__availability__account_link__available Bool)(rec__database__availability__account_link__prev ext_account_num)(rec__database__availability__account_link__next ext_account_num)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) Bool
  (rec__database__availability__account_link__available a))

(define-fun us_split_fields_Prev__projection ((a us_split_fields)) ext_account_num
  (rec__database__availability__account_link__prev a))

(define-fun us_split_fields_Next__projection ((a us_split_fields)) ext_account_num
  (rec__database__availability__account_link__next a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (rec__database__availability__account_link__available
                           (us_split_fields1 a)) (rec__database__availability__account_link__available
                                                 (us_split_fields1 b)))
                        (= (to_rep
                           (rec__database__availability__account_link__prev
                           (us_split_fields1 a))) (to_rep
                                                  (rec__database__availability__account_link__prev
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__database__availability__account_link__next
                           (us_split_fields1 a))) (to_rep
                                                  (rec__database__availability__account_link__next
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const database__availability__account_link__available__first__bit Int)

(declare-const database__availability__account_link__available__last__bit Int)

(declare-const database__availability__account_link__available__position Int)

;; database__availability__account_link__available__first__bit_axiom
  (assert (<= 0 database__availability__account_link__available__first__bit))

;; database__availability__account_link__available__last__bit_axiom
  (assert
  (< database__availability__account_link__available__first__bit database__availability__account_link__available__last__bit))

;; database__availability__account_link__available__position_axiom
  (assert (<= 0 database__availability__account_link__available__position))

(declare-const database__availability__account_link__prev__first__bit Int)

(declare-const database__availability__account_link__prev__last__bit Int)

(declare-const database__availability__account_link__prev__position Int)

;; database__availability__account_link__prev__first__bit_axiom
  (assert (<= 0 database__availability__account_link__prev__first__bit))

;; database__availability__account_link__prev__last__bit_axiom
  (assert
  (< database__availability__account_link__prev__first__bit database__availability__account_link__prev__last__bit))

;; database__availability__account_link__prev__position_axiom
  (assert (<= 0 database__availability__account_link__prev__position))

(declare-const database__availability__account_link__next__first__bit Int)

(declare-const database__availability__account_link__next__last__bit Int)

(declare-const database__availability__account_link__next__position Int)

;; database__availability__account_link__next__first__bit_axiom
  (assert (<= 0 database__availability__account_link__next__first__bit))

;; database__availability__account_link__next__last__bit_axiom
  (assert
  (< database__availability__account_link__next__first__bit database__availability__account_link__next__last__bit))

;; database__availability__account_link__next__position_axiom
  (assert (<= 0 database__availability__account_link__next__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((account_link__ref (mk_account_link__ref (account_link__content us_rep)))))
(define-fun account_link__ref___projection ((a account_link__ref)) us_rep
  (account_link__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_141 Int))
                           (=>
                           (and (<= a__first temp___idx_141)
                           (<= temp___idx_141 a__last))
                           (= (bool_eq (select a temp___idx_141)
                              (select b (+ (- b__first a__first) temp___idx_141))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_141 Int))
  (=> (and (<= a__first temp___idx_141) (<= temp___idx_141 a__last))
  (= (bool_eq (select a temp___idx_141)
     (select b (+ (- b__first a__first) temp___idx_141))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun is_available (Int (Array Int us_rep)) Bool)

(declare-fun is_available__function_guard (Bool Int (Array Int us_rep)) Bool)

;; is_available__post_axiom
  (assert true)

;; is_available__def_axiom
  (assert
  (forall ((account Int))
  (forall ((database__availability__links (Array Int us_rep)))
  (! (= (= (is_available account database__availability__links) true)
     (= (rec__database__availability__account_link__available
        (us_split_fields1 (select database__availability__links account))) true)) :pattern (
  (is_available account database__availability__links)) ))))

(declare-const account Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const links (Array Int us_rep))

(declare-const first_available Int)

(declare-const o ext_account_num)

(declare-const o1 Bool)

(declare-const o2 ext_account_num)

(declare-const o3 ext_account_num)

(declare-const o4 Bool)

(declare-const o5 ext_account_num)

(declare-const o6 ext_account_num)

(declare-const o7 Int)

(declare-const o8 (Array Int us_rep))

(declare-const o9 ext_account_num)

(declare-const o10 Bool)

(declare-const o11 ext_account_num)

(declare-const o12 ext_account_num)

(declare-const o13 Bool)

(declare-const o14 ext_account_num)

(declare-const o15 ext_account_num)

(declare-const o16 Int)

(declare-const o17 (Array Int us_rep))

(declare-const o18 Int)

(declare-const o19 Bool)

(declare-const o20 ext_account_num)

(declare-const o21 ext_account_num)

(declare-const o22 Bool)

(declare-const o23 ext_account_num)

(declare-const o24 ext_account_num)

(declare-const o25 ext_account_num)

(declare-const o26 Int)

(declare-const o27 ext_account_num)

(declare-const o28 Bool)

(declare-const o29 ext_account_num)

(declare-const o30 ext_account_num)

(declare-const o31 Bool)

(declare-const o32 ext_account_num)

(declare-const o33 ext_account_num)

(declare-const o34 (Array Int us_rep))

(declare-const o35 ext_account_num)

(declare-const o36 Bool)

(declare-const o37 ext_account_num)

(declare-const o38 ext_account_num)

(declare-const o39 Bool)

(declare-const o40 ext_account_num)

(declare-const o41 ext_account_num)

(declare-const o42 (Array Int us_rep))

(declare-const links1 (Array Int us_rep))

(declare-const result (Array Int us_rep))

(declare-const links2 (Array Int us_rep))

(declare-const result1 (Array Int us_rep))

(declare-const links3 (Array Int us_rep))

(declare-const result2 (Array Int us_rep))

(declare-const links4 (Array Int us_rep))

(declare-const result3 (Array Int us_rep))

(declare-const links5 (Array Int us_rep))

(declare-const result4 map__ref)

(declare-const links6 (Array Int us_rep))

(declare-const result5 int__ref)

(declare-const first_available1 Int)

(declare-const links7 map__ref)

(declare-const first_available2 int__ref)

(declare-const links8 (Array Int us_rep))

(declare-const first_available3 Int)

;; H
  (assert (in_range1 first_available))

;; H
  (assert (in_range2 account))

;; H
  (assert (not (= (is_available account links) true)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= (to_rep o) (to_rep
                (rec__database__availability__account_link__next
                (us_split_fields1 (select links account)))))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= (rec__database__availability__account_link__available
     (us_split_fields1
     (select links (to_rep
                   (rec__database__availability__account_link__prev
                   (us_split_fields1 (select links account))))))) o1)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= (rec__database__availability__account_link__prev
     (us_split_fields1
     (select links (to_rep
                   (rec__database__availability__account_link__prev
                   (us_split_fields1 (select links account))))))) o2)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= o o3)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= o4 o1)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= o5 o2)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= o6 o3)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (and
  (<= 1 (to_rep
        (rec__database__availability__account_link__prev
        (us_split_fields1 (select links account)))))
  (<= (to_rep
      (rec__database__availability__account_link__prev
      (us_split_fields1 (select links account)))) 200000))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= o7 (to_rep
        (rec__database__availability__account_link__prev
        (us_split_fields1 (select links account)))))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= o8 (store links o7 (mk___rep (mk___split_fields o4 o5 o6))))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= (mk_map__ref result) (mk_map__ref links))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0))
  (= links2 o8)))

;; H
  (assert
  (=>
  (not
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0)))
  (= links2 links)))

;; H
  (assert
  (=>
  (not
  (not
  (= (to_rep
     (rec__database__availability__account_link__prev
     (us_split_fields1 (select links account)))) 0)))
  (= links2 links1)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= (to_rep o9) (to_rep
                 (rec__database__availability__account_link__prev
                 (us_split_fields1 (select links2 account)))))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= (rec__database__availability__account_link__available
     (us_split_fields1
     (select links2 (to_rep
                    (rec__database__availability__account_link__next
                    (us_split_fields1 (select links2 account))))))) o10)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= o9 o11)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= (rec__database__availability__account_link__next
     (us_split_fields1
     (select links2 (to_rep
                    (rec__database__availability__account_link__next
                    (us_split_fields1 (select links2 account))))))) o12)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= o13 o10)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= o14 o11)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= o15 o12)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (and
  (<= 1 (to_rep
        (rec__database__availability__account_link__next
        (us_split_fields1 (select links2 account)))))
  (<= (to_rep
      (rec__database__availability__account_link__next
      (us_split_fields1 (select links2 account)))) 200000))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= o16 (to_rep
         (rec__database__availability__account_link__next
         (us_split_fields1 (select links2 account)))))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= o17 (store links2 o16 (mk___rep (mk___split_fields o13 o14 o15))))))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= links2 result1)))

;; H
  (assert
  (=>
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0))
  (= links3 o17)))

;; H
  (assert
  (=>
  (not
  (not
  (= (to_rep
     (rec__database__availability__account_link__next
     (us_split_fields1 (select links2 account)))) 0)))
  (= links3 links2)))

;; H
  (assert
  (=> (not (= first_available 0))
  (and (<= 1 first_available) (<= first_available 200000))))

;; H
  (assert (=> (not (= first_available 0)) (= o18 first_available)))

;; H
  (assert
  (=> (not (= first_available 0))
  (= (mk___rep (mk___split_fields o19 o20 o21)) (select links3 o18))))

;; H
  (assert (=> (not (= first_available 0)) (= o19 o22)))

;; H
  (assert (=> (not (= first_available 0)) (= o20 o23)))

;; H
  (assert (=> (not (= first_available 0)) (= o21 o24)))

;; H
  (assert (=> (not (= first_available 0)) (= o25 o23)))

;; H
  (assert (=> (not (= first_available 0)) (= o26 (to_rep o25))))

;; H
  (assert (=> (not (= first_available 0)) (= (to_rep o27) o26)))

;; H
  (assert
  (=> (not (= first_available 0))
  (= (rec__database__availability__account_link__available
     (us_split_fields1 (select links3 account))) o28)))

;; H
  (assert (=> (not (= first_available 0)) (= o27 o29)))

;; H
  (assert
  (=> (not (= first_available 0))
  (= (rec__database__availability__account_link__next
     (us_split_fields1 (select links3 account))) o30)))

;; H
  (assert (=> (not (= first_available 0)) (= o31 o28)))

;; H
  (assert (=> (not (= first_available 0)) (= o32 o29)))

;; H
  (assert (=> (not (= first_available 0)) (= o33 o30)))

;; H
  (assert
  (=> (not (= first_available 0))
  (= o34 (store links3 account (mk___rep (mk___split_fields o31 o32 o33))))))

;; H
  (assert (=> (not (= first_available 0)) (= result2 links3)))

;; H
  (assert (=> (not (= first_available 0)) (= links4 o34)))

;; H
  (assert (=> (not (not (= first_available 0))) (= links4 links3)))

;; H
  (assert (= (to_rep o35) first_available))

;; H
  (assert
  (= (rec__database__availability__account_link__available
     (us_split_fields1 (select links4 account))) o36))

;; H
  (assert
  (= (rec__database__availability__account_link__prev
     (us_split_fields1 (select links4 account))) o37))

;; H
  (assert (= o35 o38))

;; H
  (assert (= o39 o36))

;; H
  (assert (= o40 o37))

;; H
  (assert (= o41 o38))

;; H
  (assert
  (= o42 (store links4 account (mk___rep (mk___split_fields o39 o40 o41)))))

;; H
  (assert (= result3 links4))

;; H
  (assert (= links5 o42))

;; H
  (assert (= result4 (mk_map__ref links5)))

;; H
  (assert
  (= links6 (store links5 account (mk___rep
                                  (mk___split_fields (of_int 1)
                                  (rec__database__availability__account_link__prev
                                  (us_split_fields1 (select links5 account)))
                                  (rec__database__availability__account_link__next
                                  (us_split_fields1 (select links5 account))))))))

;; H
  (assert (= result5 (mk_int__ref first_available)))

;; H
  (assert (= first_available1 account))

;; H
  (assert (= first_available2 (mk_int__ref first_available1)))

;; H
  (assert (= links7 (mk_map__ref links6)))

;; H
  (assert (= first_available3 first_available1))

;; H
  (assert (= links8 links6))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (is_available account (map__content links7)) true)))
(check-sat)
(exit)
