;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort degreespersec 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 180) x) (<= x 180)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (degreespersec degreespersec) Bool)

(declare-fun dummy1 () degreespersec)

(declare-datatypes ()
((degreespersec__ref
 (mk_degreespersec__ref (degreespersec__content degreespersec)))))
(define-fun degreespersec__ref___projection ((a degreespersec__ref)) degreespersec
  (degreespersec__content a))

(define-fun dynamic_invariant1 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= (- 180) 180)) (in_range2
                                      temp___expr_136)))

(declare-sort pitchangle 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 10) x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (pitchangle pitchangle) Bool)

(declare-fun dummy2 () pitchangle)

(declare-datatypes ()
((pitchangle__ref (mk_pitchangle__ref (pitchangle__content pitchangle)))))
(define-fun pitchangle__ref___projection ((a pitchangle__ref)) pitchangle
  (pitchangle__content a))

(define-fun dynamic_invariant2 ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= (- 10) 20)) (in_range3
                                      temp___expr_172)))

(declare-fun to_rep (pitchangle) Int)

(declare-fun of_rep (Int) pitchangle)

;; inversion_axiom
  (assert
  (forall ((x pitchangle))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x pitchangle)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int pitchangle))))))
(declare-fun slide ((Array Int pitchangle) Int Int) (Array Int pitchangle))

;; slide_eq
  (assert
  (forall ((a (Array Int pitchangle)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int pitchangle)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int pitchangle) Int Int (Array Int pitchangle)
  Int Int) (Array Int pitchangle))

;; concat_def
  (assert
  (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (pitchangle Int) (Array Int pitchangle))

;; singleton_def
  (assert
  (forall ((v pitchangle))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int pitchangle)) (a__first Int) (a__last Int)
  (b (Array Int pitchangle)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int pitchangle) Int Int (Array Int pitchangle)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun pitch () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort history_range 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (history_range history_range) Bool)

(declare-fun dummy3 () history_range)

(declare-datatypes ()
((history_range__ref
 (mk_history_range__ref (history_range__content history_range)))))
(define-fun history_range__ref___projection ((a history_range__ref)) history_range
  (history_range__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_invariant3 ((temp___expr_210 Int)
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)) Bool (=>
                                      (or (= temp___is_init_207 true)
                                      (<= 1 10)) (in_range4 temp___expr_210)))

(declare-fun present_pitchrate () Int)

(declare-fun pitch_history_c () (Array Int pitchangle))

(declare-fun average () Int)

(declare-fun early_pitch () Int)

(declare-fun sum () Int)

(declare-fun gap () Int)

(declare-fun average1 () Int)

(declare-fun i () Int)

(declare-fun temp___227 () Int)

(declare-fun temp___226 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun result () Int)

(declare-fun sum1 () Int)

(declare-fun result1 () Int)

(declare-fun i1 () Int)

(declare-fun sum2 () Int)

(declare-fun i2 () Int)

(declare-fun result2 () Int)

(declare-fun sum3 () Int)

(declare-fun sum4 () Int)

(declare-fun i3 () Int)

(declare-fun sum5 () Int)

(declare-fun i4 () Int)

(declare-fun sum6 () Int)

(declare-fun i5 () Int)

(declare-fun sum7 () Int)

(declare-fun i6 () Int)

(declare-fun result3 () Int)

(declare-fun gap1 () Int)

(declare-fun result4 () Int)

(declare-fun average2 () Int)

(declare-fun result5 () Int)

(declare-fun average3 () Int)

(declare-fun result6 () int__ref)

(declare-fun early_pitch1 () Int)

(declare-fun result7 () int__ref)

(declare-fun present_pitchrate1 () Int)

(declare-fun result8 () int__ref)

(declare-fun present_pitchrate2 () Int)

(declare-fun result9 () int__ref)

(declare-fun present_pitchrate3 () Int)

(declare-fun present_pitchrate4 () int__ref)

(declare-fun present_pitchrate5 () Int)

(declare-fun present_pitchrate6 () int__ref)

(declare-fun present_pitchrate7 () Int)

(define-fun present_pitchrate8 () int__ref (mk_int__ref present_pitchrate))

;; H
  (assert (in_range3 pitch))

;; H
  (assert (=> (<= (- 180) 180) (in_range2 present_pitchrate)))

;; H
  (assert (=> (<= (- 10) 20) (in_range3 average)))

;; H
  (assert (=> (<= (- 10) 20) (in_range3 early_pitch)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref sum)))

;; H
  (assert (= sum1 0))

;; H
  (assert (in_range1 sum1))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 gap)))

;; H
  (assert (=> (<= (- 10) 20) (in_range3 average1)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___227 i1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___226 sum1)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (and (<= sum2 (* i2 20)) (<= (* i2 (- 10)) sum2))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 sum2))
  (=> (<= 1 10) (in_range4 i2))) (and (<= 1 i2) (<= i2 10)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10))
  (and (= o (+ sum2 (to_rep (select pitch_history_c i2)))) (in_range1
  (+ sum2 (to_rep (select pitch_history_c i2)))))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= sum2 result2)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= sum3 o)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 10)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 i3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= sum3 sum4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i4 i2)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= sum5 sum3)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref sum6) (mk_int__ref sum4))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= i6 i4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 10)) (= sum7 sum5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= sum1 sum6)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 10))) (= sum7 sum1)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref gap)))

;; H
  (assert (= gap1 10))

;; H
  (assert (and (= o1 (div1 sum6 gap1)) (in_range1 (div1 sum6 gap1))))

;; H
  (assert (and (= o2 o1) (in_range3 o1)))

;; H
  (assert (= result4 average1))

;; H
  (assert (= average2 o2))

;; H
  (assert (= result5 average))

;; H
  (assert (= average3 average2))

;; H
  (assert (= result6 (mk_int__ref early_pitch)))

;; H
  (assert (= early_pitch1 (to_rep (select pitch_history_c 1))))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (and (= o3 (* (- pitch early_pitch1) 20)) (in_range1
  (* (- pitch early_pitch1) 20)))))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (= o4 (div1 o3 10))))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (and (= o5 o4) (in_range2 o4))))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (= result7 present_pitchrate8)))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (= present_pitchrate1 o5)))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (= present_pitchrate6 (mk_int__ref present_pitchrate1))))

;; H
  (assert
  (=> (and (<= early_pitch1 average3) (<= average3 pitch))
  (= present_pitchrate7 present_pitchrate1)))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (and (= o6 (* (- pitch early_pitch1) 10)) (in_range1
  (* (- pitch early_pitch1) 10))))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (= o7 (div1 o6 20)))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (and (= o8 o7) (in_range2 o7)))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (= result8 present_pitchrate8))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (= present_pitchrate2 o8))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (= present_pitchrate4 (mk_int__ref present_pitchrate2)))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (and (<= average3 early_pitch1) (<= pitch average3))
  (= present_pitchrate5 present_pitchrate2))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (not (and (<= average3 early_pitch1) (<= pitch average3)))
  (= result9 present_pitchrate8))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (not (and (<= average3 early_pitch1) (<= pitch average3)))
  (= present_pitchrate3 0))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (not (and (<= average3 early_pitch1) (<= pitch average3)))
  (= present_pitchrate4 (mk_int__ref present_pitchrate3)))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (=> (not (and (<= average3 early_pitch1) (<= pitch average3)))
  (= present_pitchrate5 present_pitchrate3))))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (= present_pitchrate6 present_pitchrate4)))

;; H
  (assert
  (=> (not (and (<= early_pitch1 average3) (<= average3 pitch)))
  (= present_pitchrate7 present_pitchrate5)))

(assert
;; WP_parameter_def
 ;; File "ap-altitude-pitch-rate.adb", line 11, characters 0-0
  (not (not (= 2 0))))
(check-sat)
(exit)
