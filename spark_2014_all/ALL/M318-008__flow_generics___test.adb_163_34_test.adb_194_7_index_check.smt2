;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort fruits_and_weapons 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (fruits_and_weapons fruits_and_weapons) Bool)

(declare-const dummy2 fruits_and_weapons)

(declare-datatypes ((fruits_and_weapons__ref 0))
(((mk_fruits_and_weapons__ref
  (fruits_and_weapons__content fruits_and_weapons)))))
(define-fun fruits_and_weapons__ref___projection ((a fruits_and_weapons__ref)) fruits_and_weapons
  (fruits_and_weapons__content a))

(declare-fun to_rep1 (fruits_and_weapons) Int)

(declare-fun of_rep1 (Int) fruits_and_weapons)

;; inversion_axiom
  (assert
  (forall ((x fruits_and_weapons))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x fruits_and_weapons)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort fruits 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (fruits fruits) Bool)

(declare-const dummy3 fruits)

(declare-datatypes ((fruits__ref 0))
(((mk_fruits__ref (fruits__content fruits)))))
(define-fun fruits__ref___projection ((a fruits__ref)) fruits (fruits__content
                                                              a))

(declare-fun to_rep2 (fruits) Int)

(declare-fun of_rep2 (Int) fruits)

;; inversion_axiom
  (assert
  (forall ((x fruits))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x fruits)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant ((temp___expr_229 Int)
  (temp___is_init_226 Bool) (temp___skip_constant_227 Bool)
  (temp___do_toplevel_228 Bool)) Bool (=>
                                      (or (= temp___is_init_226 true)
                                      (<= 0 9)) (in_range4 temp___expr_229)))

(declare-fun found_none (Int) Bool)

(declare-fun found_none__function_guard (Bool Int) Bool)

;; found_none__post_axiom
  (assert true)

;; found_none__def_axiom
  (assert
  (forall ((fruit Int))
  (! (= (= (found_none fruit) true) (= fruit 0)) :pattern ((found_none fruit)) )))

(define-fun dynamic_invariant1 ((temp___expr_223 Int)
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)) Bool (=>
                                      (or (= temp___is_init_220 true)
                                      (<= 0 12)) (in_range3 temp___expr_223)))

(declare-fun fruits_to_fruits_and_weapons (Int) Int)

(declare-fun fruits_to_fruits_and_weapons__function_guard (Int Int) Bool)

;; fruits_to_fruits_and_weapons__post_axiom
  (assert
  (forall ((fruit Int))
  (! (=> (dynamic_invariant fruit true true true) (dynamic_invariant1
     (fruits_to_fruits_and_weapons fruit) true false true)) :pattern (
  (fruits_to_fruits_and_weapons fruit)) )))

;; fruits_to_fruits_and_weapons__def_axiom
  (assert
  (forall ((fruit Int))
  (! (=> (dynamic_invariant fruit true true true)
     (= (fruits_to_fruits_and_weapons fruit) fruit)) :pattern ((fruits_to_fruits_and_weapons
                                                               fruit)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int fruits))))))
(declare-fun slide ((Array Int fruits) Int Int) (Array Int fruits))

;; slide_eq
  (assert
  (forall ((a (Array Int fruits)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int fruits)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int fruits) Int Int (Array Int fruits) Int
  Int) (Array Int fruits))

;; concat_def
  (assert
  (forall ((a (Array Int fruits)) (b (Array Int fruits)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (fruits Int) (Array Int fruits))

;; singleton_def
  (assert
  (forall ((v fruits))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int fruits)) (a__first Int) (a__last Int)
  (b (Array Int fruits)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep2 (select a temp___idx_134)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int fruits)) (b (Array Int fruits)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep2 (select a temp___idx_134)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int fruits) Int Int (Array Int fruits) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int fruits)) (b (Array Int fruits)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int fruits)) (b (Array Int fruits)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int fruits)) (b (Array Int fruits)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int fruits_and_weapons))))))
(declare-fun slide1 ((Array Int fruits_and_weapons) Int
  Int) (Array Int fruits_and_weapons))

;; slide_eq
  (assert
  (forall ((a (Array Int fruits_and_weapons)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int fruits_and_weapons)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int fruits_and_weapons) Int Int
  (Array Int fruits_and_weapons) Int Int) (Array Int fruits_and_weapons))

;; concat_def
  (assert
  (forall ((a (Array Int fruits_and_weapons))
  (b (Array Int fruits_and_weapons)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (fruits_and_weapons
  Int) (Array Int fruits_and_weapons))

;; singleton_def
  (assert
  (forall ((v fruits_and_weapons))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int fruits_and_weapons)) (a__first Int)
  (a__last Int) (b (Array Int fruits_and_weapons)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_135 Int))
                           (=>
                           (and (<= a__first temp___idx_135)
                           (<= temp___idx_135 a__last))
                           (= (to_rep1 (select a temp___idx_135)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_135)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int fruits_and_weapons))
  (b (Array Int fruits_and_weapons)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_135 Int))
  (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last))
  (= (to_rep1 (select a temp___idx_135)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_135)))))))))))

(declare-fun compare1 ((Array Int fruits_and_weapons) Int Int
  (Array Int fruits_and_weapons) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int fruits_and_weapons))
  (b (Array Int fruits_and_weapons)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int fruits_and_weapons))
  (b (Array Int fruits_and_weapons)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int fruits_and_weapons))
  (b (Array Int fruits_and_weapons)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int fruits))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int fruits) (elts a))

(define-fun of_array ((a (Array Int fruits)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int fruits)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int fruits)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int fruits)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int fruits))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int fruits))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int fruits))) (<= 0 (object__alignment a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((inventory_t__ref 0))
(((mk_inventory_t__ref (inventory_t__content us_t)))))
(define-fun inventory_t__ref___projection ((a inventory_t__ref)) us_t
  (inventory_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_317 us_t)
  (temp___is_init_314 Bool) (temp___skip_constant_315 Bool)
  (temp___do_toplevel_316 Bool)) Bool (=>
                                      (not (= temp___skip_constant_315 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_317)
                                      (last1 temp___expr_317))))

(declare-sort new_item_t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (new_item_t new_item_t) Bool)

(declare-const dummy5 new_item_t)

(declare-datatypes ((new_item_t__ref 0))
(((mk_new_item_t__ref (new_item_t__content new_item_t)))))
(define-fun new_item_t__ref___projection ((a new_item_t__ref)) new_item_t
  (new_item_t__content a))

(define-fun dynamic_invariant3 ((temp___expr_352 Int)
  (temp___is_init_349 Bool) (temp___skip_constant_350 Bool)
  (temp___do_toplevel_351 Bool)) Bool (=>
                                      (or (= temp___is_init_349 true)
                                      (<= 0 12)) (in_range5 temp___expr_352)))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int fruits_and_weapons))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int fruits_and_weapons) (elts1 a))

(define-fun of_array1 ((a (Array Int fruits_and_weapons)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int fruits_and_weapons)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int fruits_and_weapons)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int fruits_and_weapons)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int fruits_and_weapons)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq1 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((new_inventory_t__ref 0))
(((mk_new_inventory_t__ref (new_inventory_t__content us_t1)))))
(define-fun new_inventory_t__ref___projection ((a new_inventory_t__ref)) us_t1
  (new_inventory_t__content a))

(declare-const old_inventory us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const new_inventory__first integer)

(declare-const new_inventory__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const new_content Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_358 us_t1)
  (temp___is_init_355 Bool) (temp___skip_constant_356 Bool)
  (temp___do_toplevel_357 Bool)) Bool (=>
                                      (not (= temp___skip_constant_356 true))
                                      (dynamic_property1 1 2147483647
                                      (first3 temp___expr_358)
                                      (last3 temp___expr_358))))

(declare-const new_inventory (Array Int fruits_and_weapons))

(declare-const i Int)

(declare-const o Int)

(declare-const o1 fruits_and_weapons)

(declare-const result Int)

(declare-const i1 Int)

(declare-const new_inventory1 (Array Int fruits_and_weapons))

(declare-const i2 Int)

(declare-const result1 Bool)

;; H
  (assert (dynamic_invariant2 old_inventory true false true))

;; H
  (assert (dynamic_property1 1 2147483647 (to_rep new_inventory__first)
  (to_rep new_inventory__last)))

;; H
  (assert (in_range5 new_content))

;; H
  (assert
  (and (= (to_rep (first (rt old_inventory))) (to_rep new_inventory__first))
  (= (to_rep (last (rt old_inventory))) (to_rep new_inventory__last))))

;; H
  (assert (= result i))

;; H
  (assert (= i1 (to_rep (first (rt old_inventory)))))

;; H
  (assert (<= (to_rep (first (rt old_inventory))) i1))

;; H
  (assert (<= i1 (to_rep (last (rt old_inventory)))))

;; H
  (assert
  (and
  (forall ((temp___443 Int))
  (=>
  (and (<= (to_rep new_inventory__first) temp___443)
  (<= temp___443 (to_rep new_inventory__last)))
  (=> (<= i2 temp___443)
  (= (select new_inventory1 temp___443) (select new_inventory temp___443)))))
  (and (<= (to_rep (first (rt old_inventory))) i2)
  (<= i2 (to_rep (last (rt old_inventory)))))))

;; H
  (assert
  (and (= result1 (found_none (to_rep2 (select (elts old_inventory) i2))))
  (= (= result1 true) (= (to_rep2 (select (elts old_inventory) i2)) 0))))

;; H
  (assert (not (= result1 true)))

;; H
  (assert
  (and
  (= o (fruits_to_fruits_and_weapons
       (to_rep2 (select (elts old_inventory) i2))))
  (and (in_range3 o) (= o (to_rep2 (select (elts old_inventory) i2))))))

;; H
  (assert (= (to_rep1 o1) o))

(assert
;; WP_parameter_def
 ;; File "test.adb", line 191, characters 0-0
  (not (<= (to_rep new_inventory__first) i2)))
(check-sat)
(exit)
