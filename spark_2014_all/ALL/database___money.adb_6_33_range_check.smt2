;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort cur 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (cur cur) Bool)

(declare-fun dummy () cur)

(declare-datatypes () ((cur__ref (mk_cur__ref (cur__content cur)))))
(define-fun cur__ref___projection ((a cur__ref)) cur (cur__content a))

(declare-fun to_rep (cur) Int)

(declare-fun of_rep (Int) cur)

;; inversion_axiom
  (assert
  (forall ((x cur)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x cur)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort raw_amount 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1000000)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (raw_amount raw_amount) Bool)

(declare-fun dummy1 () raw_amount)

(declare-datatypes ()
((raw_amount__ref (mk_raw_amount__ref (raw_amount__content raw_amount)))))
(define-fun raw_amount__ref___projection ((a raw_amount__ref)) raw_amount 
  (raw_amount__content a))

(declare-fun to_rep1 (raw_amount) Int)

(declare-fun of_rep1 (Int) raw_amount)

;; inversion_axiom
  (assert
  (forall ((x raw_amount))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x raw_amount)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__money__amount__currency cur)(rec__money__amount__raw raw_amount)))))
(define-fun us_split_fields_Currency__projection ((a us_split_fields)) cur 
  (rec__money__amount__currency a))

(define-fun us_split_fields_Raw__projection ((a us_split_fields)) raw_amount 
  (rec__money__amount__raw a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__money__amount__currency
                           (us_split_fields1 a))) (to_rep
                                                  (rec__money__amount__currency
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__money__amount__raw (us_split_fields1 a))) 
                        (to_rep1
                        (rec__money__amount__raw (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun money__amount__currency__first__bit () Int)

(declare-fun money__amount__currency__last__bit () Int)

(declare-fun money__amount__currency__position () Int)

;; money__amount__currency__first__bit_axiom
  (assert (<= 0 money__amount__currency__first__bit))

;; money__amount__currency__last__bit_axiom
  (assert
  (< money__amount__currency__first__bit money__amount__currency__last__bit))

;; money__amount__currency__position_axiom
  (assert (<= 0 money__amount__currency__position))

(declare-fun money__amount__raw__first__bit () Int)

(declare-fun money__amount__raw__last__bit () Int)

(declare-fun money__amount__raw__position () Int)

;; money__amount__raw__first__bit_axiom
  (assert (<= 0 money__amount__raw__first__bit))

;; money__amount__raw__last__bit_axiom
  (assert (< money__amount__raw__first__bit money__amount__raw__last__bit))

;; money__amount__raw__position_axiom
  (assert (<= 0 money__amount__raw__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((amount__ref (mk_amount__ref (amount__content us_rep)))))
(define-fun amount__ref___projection ((a amount__ref)) us_rep (amount__content
                                                              a))

(declare-fun a () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun b () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 6)) (in_range1 temp___expr_135)))

(define-fun dynamic_invariant1 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 1000000)) (in_range2
                                      temp___expr_147)))

;; H
  (assert
  (and
  (= (to_rep (rec__money__amount__currency (us_split_fields1 a))) (to_rep
                                                                  (rec__money__amount__currency
                                                                  (us_split_fields1
                                                                  b))))
  (<= (+ (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1
                                                                  (rec__money__amount__raw
                                                                  (us_split_fields1
                                                                  b)))) 1000000)))

(assert
;; WP_parameter_def
 ;; File "money.ads", line 17, characters 0-0
  (not (in_range2
  (+ (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1
                                                              (rec__money__amount__raw
                                                              (us_split_fields1
                                                              b)))))))
(check-sat)
