;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort it1 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-const dummy it1)

(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range temp___expr_152)))

(declare-sort et1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (et1 et1) Bool)

(declare-const dummy1 et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant1 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range1 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun temp___641 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___643 (Array Int et1)))
  (forall ((temp___644 Int) (temp___645 Int) (temp___646 Int)
  (temp___647 Int))
  (let ((temp___642 (temp___641 temp___643 temp___644 temp___645 temp___646
                    temp___647)))
  (forall ((temp___648 Int))
  (ite (= temp___648 temp___646)
  (= (select temp___642 temp___648) (of_rep temp___647))
  (ite (= temp___648 temp___644)
  (= (select temp___642 temp___648) (of_rep temp___645))
  (= (select temp___642 temp___648) (select temp___643 temp___648)))))))))

(declare-fun temp___650 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___652 (Array Int et1)))
  (forall ((temp___653 Int) (temp___654 Int) (temp___655 Int)
  (temp___656 Int))
  (let ((temp___651 (temp___650 temp___652 temp___653 temp___654 temp___655
                    temp___656)))
  (forall ((temp___657 Int))
  (ite (= temp___657 temp___655)
  (= (select temp___651 temp___657) (of_rep temp___656))
  (ite (= temp___657 temp___653)
  (= (select temp___651 temp___657) (of_rep temp___654))
  (= (select temp___651 temp___657) (select temp___652 temp___657)))))))))

(declare-fun temp___659 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___661 (Array Int et1)))
  (forall ((temp___662 Int) (temp___663 Int) (temp___664 Int)
  (temp___665 Int))
  (let ((temp___660 (temp___659 temp___661 temp___662 temp___663 temp___664
                    temp___665)))
  (forall ((temp___666 Int))
  (ite (= temp___666 temp___664)
  (= (select temp___660 temp___666) (of_rep temp___665))
  (ite (= temp___666 temp___662)
  (= (select temp___660 temp___666) (of_rep temp___663))
  (= (select temp___660 temp___666) (select temp___661 temp___666)))))))))

(declare-fun temp___668 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___670 (Array Int et1)))
  (forall ((temp___671 Int) (temp___672 Int) (temp___673 Int)
  (temp___674 Int))
  (let ((temp___669 (temp___668 temp___670 temp___671 temp___672 temp___673
                    temp___674)))
  (forall ((temp___675 Int))
  (ite (= temp___675 temp___673)
  (= (select temp___669 temp___675) (of_rep temp___674))
  (ite (= temp___675 temp___671)
  (= (select temp___669 temp___675) (of_rep temp___672))
  (= (select temp___669 temp___675) (select temp___670 temp___675)))))))))

(declare-fun temp___4365 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___4367 (Array Int et1)))
  (forall ((temp___4368 Int) (temp___4369 Int))
  (let ((temp___4366 (temp___4365 temp___4367 temp___4368 temp___4369)))
  (forall ((temp___4370 Int))
  (ite (= temp___4370 temp___4368)
  (= (select temp___4366 temp___4370) (of_rep temp___4369))
  (= (select temp___4366 temp___4370) (select temp___4367 temp___4370))))))))

(declare-const a (Array Int et1))

(declare-const j Int)

(declare-const f Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 et1)

(declare-const o3 (Array Int et1))

(declare-const t (Array Int et1))

(declare-const a1 (Array Int et1))

(declare-const result Int)

(declare-const j1 Int)

(declare-const result1 Int)

(declare-const j2 Int)

(declare-const result2 Int)

(declare-const f1 Int)

(declare-const result3 Int)

(declare-const f2 Int)

(declare-const result4 (Array Int et1))

(declare-const a2 (Array Int et1))

(declare-const a3 (Array Int et1))

(declare-const j3 Int)

(declare-const f3 Int)

(declare-const t1 (Array Int et1))

(declare-const a4 (Array Int et1))

(declare-const j4 Int)

(declare-const f4 Int)

(declare-const t2 (Array Int et1))

(define-fun f5 () int__ref (mk_int__ref f))

(define-fun j5 () int__ref (mk_int__ref j))

;; H
  (assert (in_range i))

;; H
  (assert (in_range1 e))

;; H
  (assert (=> (<= 1 10) (in_range j)))

;; H
  (assert (=> (<= 0 99) (in_range1 f)))

;; H
  (assert (= (bool_eq a1 1 10 (temp___4365 t i e) 1 10) true))

;; H
  (assert (=> (= i 10) (= (mk_int__ref result) j5)))

;; H
  (assert (=> (= i 10) (= j1 1)))

;; H
  (assert (=> (not (= i 10)) (and (= o (+ i 1)) (in_range (+ i 1)))))

;; H
  (assert (=> (not (= i 10)) (= (mk_int__ref result1) j5)))

;; H
  (assert (=> (not (= i 10)) (= j2 o)))

;; H
  (assert (=> (not (= i 10)) (= j1 j2)))

;; H
  (assert (=> (= e 0) (= (mk_int__ref result2) f5)))

;; H
  (assert (=> (= e 0) (= f1 99)))

;; H
  (assert (=> (not (= e 0)) (and (= o1 (- e 1)) (in_range1 (- e 1)))))

;; H
  (assert (=> (not (= e 0)) (= (mk_int__ref result3) f5)))

;; H
  (assert (=> (not (= e 0)) (= f2 o1)))

;; H
  (assert (=> (not (= e 0)) (= f1 f2)))

;; H
  (assert (= (to_rep o2) f1))

;; H
  (assert (= o3 (store a1 j1 o2)))

;; H
  (assert (= a1 result4))

;; H
  (assert (= a2 o3))

;; H
  (assert (= t t1))

;; H
  (assert (= f1 f3))

;; H
  (assert (= j1 j3))

;; H
  (assert (= a2 a3))

;; H
  (assert (= t2 t))

;; H
  (assert (= f4 f1))

;; H
  (assert (= j4 j1))

;; H
  (assert (= a4 a2))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 62, characters 0-0
  (not
  (or
  (and (< i 10)
  (or
  (and (< 0 e)
  (= (bool_eq a3 1 10 (temp___641 a i e (+ i 1) (- e 1)) 1 10) true))
  (and (= e 0) (= (bool_eq a3 1 10 (temp___650 a i e (+ i 1) 99) 1 10) true))))
  (and (= i 10)
  (or
  (and (< 0 e) (= (bool_eq a3 1 10 (temp___659 a i e 1 (- e 1)) 1 10) true))
  (and (= e 0) (= (bool_eq a3 1 10 (temp___668 a i e 1 99) 1 10) true)))))))
(check-sat)
(exit)
