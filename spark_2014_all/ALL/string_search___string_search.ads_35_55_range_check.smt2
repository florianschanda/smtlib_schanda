;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((text__ref 0)) (((mk_text__ref (text__content us_t)))))
(define-fun text__ref___projection ((a text__ref)) us_t (text__content a))

(define-fun dynamic_invariant ((temp___expr_136 us_t)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_134 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_136)
                                      (last1 temp___expr_136)))
                                      (=> (= temp___do_toplevel_135 true)
                                      (=> (= temp___is_init_133 true)
                                      (= (first1 temp___expr_136) 1)))))

(define-fun dynamic_predicate ((temp___139 us_t)) Bool (= (first1 temp___139) 1))

(declare-fun match_at (us_t us_t Int) Bool)

(declare-fun match_at__function_guard (Bool us_t us_t Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-fun partial_match_at (us_t us_t Int Int) Bool)

(declare-fun partial_match_at__function_guard (Bool us_t us_t Int Int) Bool)

;; match_at__post_axiom
  (assert true)

;; match_at__def_axiom
  (assert
  (forall ((needle us_t) (haystack us_t))
  (forall ((loc Int))
  (! (= (= (match_at needle haystack loc) true)
     (and (<= (- loc 1) (- (length haystack) (length needle)))
     (= (partial_match_at needle haystack loc (length needle)) true))) :pattern (
  (match_at needle haystack loc)) ))))

(declare-const needle us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const haystack us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes ((t13b__ref 0))
(((mk_t13b__ref (t13b__content integer)))))
(define-fun t13b__ref___projection ((a t13b__ref)) integer (t13b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes ((t14b__ref 0))
(((mk_t14b__ref (t14b__content integer)))))
(define-fun t14b__ref___projection ((a t14b__ref)) integer (t14b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property2 range_first range_last low)
                   (dynamic_property2 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((t15b__ref 0)) (((mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (natural natural) Bool)

(declare-const dummy7 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; partial_match_at__post_axiom
  (assert true)

;; partial_match_at__def_axiom
  (assert
  (forall ((needle1 us_t) (haystack1 us_t))
  (forall ((loc Int) (len Int))
  (! (= (= (partial_match_at needle1 haystack1 loc len) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i len))
     (= (to_rep (select (to_array needle1) i)) (to_rep
                                               (select (to_array haystack1) (+ loc (- i 1)))))))) :pattern (
  (partial_match_at needle1 haystack1 loc len)) ))))

(declare-const i Int)

(declare-const string_search__brute_force_slice__result Int)

(declare-const temp___279 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const temp___280 Int)

(declare-const temp___278 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const temp___276 Int)

(declare-const o7 (Array Int character))

(declare-const temp___277 (Array Int character))

(declare-const temp___2771 t1)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const temp___2761 Int)

(declare-const o10 (Array Int character))

(declare-const temp___2772 (Array Int character))

(declare-const temp___2773 t1)

(declare-const o11 Int)

(declare-const string_search__brute_force_slice__result1 Int)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 Bool)

(declare-const result2 Int)

(declare-const string_search__brute_force_slice__result2 Int)

(declare-const i2 Int)

(declare-const string_search__brute_force_slice__result3 Int)

(declare-const result3 Int)

(declare-const i3 Int)

(declare-const result4 Bool)

(declare-const result5 Int)

(declare-const string_search__brute_force_slice__result4 Int)

(declare-const i4 Int)

(declare-const string_search__brute_force_slice__result5 Int)

(declare-const i5 Int)

(declare-const string_search__brute_force_slice__result6 Int)

(declare-const i6 Int)

(declare-const string_search__brute_force_slice__result7 Int)

(declare-const i7 Int)

(declare-const string_search__brute_force_slice__result8 Int)

(declare-const i8 Int)

(declare-const string_search__brute_force_slice__result9 Int)

(declare-const i9 Int)

(declare-const string_search__brute_force_slice__result10 Int)

(declare-const result6 Int)

(declare-const string_search__brute_force_slice__result11 Int)

(declare-const string_search__brute_force_slice__result12 Int)

(declare-const string_search__brute_force_slice__result13 Int)

(declare-const i10 Int)

(declare-const string_search__brute_force_slice__result14 Int)

(declare-const i11 Int)

(declare-const string_search__brute_force_slice__result15 Int)

(declare-const i12 Int)

(declare-const string_search__brute_force_slice__result16 int__ref)

(declare-const i13 Int)

(declare-const string_search__brute_force_slice__result17 Int)

(define-fun string_search__brute_force_slice__result18 () int__ref (mk_int__ref
                                                                   string_search__brute_force_slice__result14))

(define-fun i14 () int__ref (mk_int__ref i10))

(define-fun string_search__brute_force_slice__result19 () int__ref (mk_int__ref
                                                                   string_search__brute_force_slice__result9))

(define-fun i15 () int__ref (mk_int__ref i8))

(define-fun result7 () int__ref (mk_int__ref result))

(define-fun string_search__brute_force_slice__result20 () int__ref (mk_int__ref
                                                                   string_search__brute_force_slice__result))

(define-fun i16 () int__ref (mk_int__ref i))

;; H
  (assert (dynamic_invariant needle true false true))

;; H
  (assert (dynamic_invariant haystack true false true))

;; H
  (assert
  (and (<= 1 (length needle)) (<= (length needle) (length haystack))))

;; H
  (assert
  (or
  (and
  (and
  (and
  (= string_search__brute_force_slice__result18 (mk_int__ref
                                                string_search__brute_force_slice__result5))
  (= i14 (mk_int__ref i4)))
  (and
  (= string_search__brute_force_slice__result15 string_search__brute_force_slice__result6)
  (= i11 i5)))
  (and (= temp___279 1)
  (and
  (and
  (and
  (and
  (and (and (= o (length needle)) (in_range1 (length needle)))
  (and (and (= o1 (length haystack)) (in_range1 (length haystack)))
  (= o2 (- o1 o)))) (and (= o3 o2) (in_range1 o2))) (= o4 (+ o3 1)))
  (and (= temp___280 o4) (in_range1 o4)))
  (and (and (= result7 i16) (= i1 temp___279))
  (and (and (<= temp___279 i1) (<= i1 temp___280))
  (and (= temp___278 i1)
  (or
  (and
  (and
  (and
  (= string_search__brute_force_slice__result2 string_search__brute_force_slice__result5)
  (= i1 i4))
  (and
  (= string_search__brute_force_slice__result6 string_search__brute_force_slice__result2)
  (= i5 i1)))
  (and
  (and
  (and
  (and
  (and
  (and (= o5 (- (to_rep1 (last (rt needle))) 1)) (in_range1
  (- (to_rep1 (last (rt needle))) 1))) (= o6 (+ i1 o5)))
  (and (= temp___276 o6) (in_range1 o6)))
  (and
  (and
  (=> (<= i1 temp___276)
  (and
  (and (<= (to_rep1 (first (rt haystack))) i1)
  (<= i1 (to_rep1 (last (rt haystack)))))
  (and (<= (to_rep1 (first (rt haystack))) temp___276)
  (<= temp___276 (to_rep1 (last (rt haystack))))))) (= o7 (elts haystack)))
  (and (= o7 temp___277) (= (mk1 i1 temp___276) temp___2771))))
  (= result1 (bool_eq (elts needle) (to_rep1 (first (rt needle)))
             (to_rep1 (last (rt needle))) temp___277
             (to_rep1 (first2 temp___2771)) (to_rep1 (last2 temp___2771)))))
  (and (= result1 true)
  (and (= (mk_int__ref result2) string_search__brute_force_slice__result20)
  (= string_search__brute_force_slice__result2 i1)))))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o5 (- (to_rep1 (last (rt needle))) 1)) (in_range1
  (- (to_rep1 (last (rt needle))) 1))) (= o6 (+ i1 o5)))
  (and (= temp___276 o6) (in_range1 o6)))
  (and
  (and
  (=> (<= i1 temp___276)
  (and
  (and (<= (to_rep1 (first (rt haystack))) i1)
  (<= i1 (to_rep1 (last (rt haystack)))))
  (and (<= (to_rep1 (first (rt haystack))) temp___276)
  (<= temp___276 (to_rep1 (last (rt haystack))))))) (= o7 (elts haystack)))
  (and (= o7 temp___277) (= (mk1 i1 temp___276) temp___2771))))
  (= result1 (bool_eq (elts needle) (to_rep1 (first (rt needle)))
             (to_rep1 (last (rt needle))) temp___277
             (to_rep1 (first2 temp___2771)) (to_rep1 (last2 temp___2771)))))
  (and (not (= result1 true))
  (and
  (= string_search__brute_force_slice__result2 string_search__brute_force_slice__result)
  (= string_search__brute_force_slice__result2 string_search__brute_force_slice__result1))))
  (and
  (and
  (and
  (= string_search__brute_force_slice__result4 string_search__brute_force_slice__result5)
  (= i3 i4))
  (and
  (= string_search__brute_force_slice__result6 string_search__brute_force_slice__result4)
  (= i5 i3)))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i2)) (not (= (match_at needle haystack k) true))))
  (and
  (and
  (=> (<= 1 (+ (- (length haystack) (length needle)) 1)) (dynamic_property1 1
  (+ (- (length haystack) (length needle)) 1) i2))
  (and (<= 1 i2) (<= i2 (+ (- (length haystack) (length needle)) 1))))
  (and (not (= i2 temp___280))
  (and (and (= i2 result3) (= i3 (+ i2 1)))
  (and
  (and
  (and
  (and
  (and
  (and (= o8 (- (to_rep1 (last (rt needle))) 1)) (in_range1
  (- (to_rep1 (last (rt needle))) 1))) (= o9 (+ i3 o8)))
  (and (= temp___2761 o9) (in_range1 o9)))
  (and
  (and
  (=> (<= i3 temp___2761)
  (and
  (and (<= (to_rep1 (first (rt haystack))) i3)
  (<= i3 (to_rep1 (last (rt haystack)))))
  (and (<= (to_rep1 (first (rt haystack))) temp___2761)
  (<= temp___2761 (to_rep1 (last (rt haystack))))))) (= o10 (elts haystack)))
  (and (= o10 temp___2772) (= (mk1 i3 temp___2761) temp___2773))))
  (= result4 (bool_eq (elts needle) (to_rep1 (first (rt needle)))
             (to_rep1 (last (rt needle))) temp___2772
             (to_rep1 (first2 temp___2773)) (to_rep1 (last2 temp___2773)))))
  (and (= result4 true)
  (and (= string_search__brute_force_slice__result3 result5)
  (= string_search__brute_force_slice__result4 i3)))))))))))))))))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o (length needle)) (in_range1 (length needle)))
  (and (and (= o1 (length haystack)) (in_range1 (length haystack)))
  (= o2 (- o1 o)))) (and (= o3 o2) (in_range1 o2))) (= o4 (+ o3 1)))
  (and (= temp___280 o4) (in_range1 o4)))
  (and (and (= result7 i16) (= i1 1))
  (ite (and (<= 1 i1) (<= i1 temp___280))
  (and
  (and
  (and (= temp___278 i1)
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o5 (- (to_rep1 (last (rt needle))) 1)) (in_range1
  (- (to_rep1 (last (rt needle))) 1))) (= o6 (+ i1 o5)))
  (and (= temp___276 o6) (in_range1 o6)))
  (and
  (and
  (=> (<= i1 temp___276)
  (and
  (and (<= (to_rep1 (first (rt haystack))) i1)
  (<= i1 (to_rep1 (last (rt haystack)))))
  (and (<= (to_rep1 (first (rt haystack))) temp___276)
  (<= temp___276 (to_rep1 (last (rt haystack))))))) (= o7 (elts haystack)))
  (and (= o7 temp___277) (= (mk1 i1 temp___276) temp___2771))))
  (= result1 (bool_eq (elts needle) (to_rep1 (first (rt needle)))
             (to_rep1 (last (rt needle))) temp___277
             (to_rep1 (first2 temp___2771)) (to_rep1 (last2 temp___2771)))))
  (and (not (= result1 true))
  (and
  (= string_search__brute_force_slice__result2 string_search__brute_force_slice__result)
  (= string_search__brute_force_slice__result2 string_search__brute_force_slice__result1))))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i2)) (not (= (match_at needle haystack k) true))))
  (and
  (and
  (=> (<= 1 (+ (- (length haystack) (length needle)) 1)) (dynamic_property1 1
  (+ (- (length haystack) (length needle)) 1) i2))
  (and (<= 1 i2) (<= i2 (+ (- (length haystack) (length needle)) 1))))
  (= i2 temp___280)))))
  (and
  (and
  (= string_search__brute_force_slice__result3 string_search__brute_force_slice__result7)
  (= i2 i6))
  (and
  (= string_search__brute_force_slice__result8 string_search__brute_force_slice__result3)
  (= i7 i2))))
  (and
  (and
  (= string_search__brute_force_slice__result19 (mk_int__ref
                                                string_search__brute_force_slice__result7))
  (= i15 (mk_int__ref i6)))
  (and
  (= string_search__brute_force_slice__result10 string_search__brute_force_slice__result8)
  (= i9 i7))))
  (and
  (and
  (= string_search__brute_force_slice__result19 string_search__brute_force_slice__result20)
  (= i1 i8))
  (and
  (= string_search__brute_force_slice__result10 string_search__brute_force_slice__result1)
  (= i9 i1))))))
  (and
  (and
  (and
  (= string_search__brute_force_slice__result18 (mk_int__ref
                                                string_search__brute_force_slice__result12))
  (= i14 i15))
  (and
  (= string_search__brute_force_slice__result15 string_search__brute_force_slice__result13)
  (= i11 i9)))
  (and
  (and
  (= string_search__brute_force_slice__result11 string_search__brute_force_slice__result12)
  (= string_search__brute_force_slice__result13 string_search__brute_force_slice__result11))
  (and (= (mk_int__ref result6) string_search__brute_force_slice__result19)
  (= string_search__brute_force_slice__result11 0)))))))

;; H
  (assert
  (= string_search__brute_force_slice__result16 string_search__brute_force_slice__result18))

;; H
  (assert (= (mk_int__ref i12) i14))

;; H
  (assert
  (= string_search__brute_force_slice__result17 string_search__brute_force_slice__result15))

;; H
  (assert (= i13 i11))

;; H
  (assert (and (= o11 (length needle)) (in_range1 (length needle))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range1 (length haystack))))
(check-sat)
(exit)
