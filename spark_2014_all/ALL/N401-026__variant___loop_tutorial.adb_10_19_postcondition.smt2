;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const maximum_root Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; maximum_root__def_axiom
  (assert (= maximum_root 46341))

(declare-const lower Int)

(declare-const upper Int)

(declare-const middle Int)

(declare-const loop_tutorial__isqrt__result Int)

(declare-const o Int)

(declare-const temp___134 Int)

(declare-const temp___133 Int)

(declare-const temp___132 Int)

(declare-const temp___136 Int)

(declare-const temp___135 Int)

(declare-const o1 Int)

(declare-const result Int)

(declare-const lower1 Int)

(declare-const result1 Int)

(declare-const upper1 Int)

(declare-const result2 Int)

(declare-const upper2 Int)

(declare-const lower2 Int)

(declare-const upper3 Int)

(declare-const middle1 Int)

(declare-const temp___1361 Int)

(declare-const temp___1351 Int)

(declare-const result3 Int)

(declare-const temp___1362 Int)

(declare-const result4 Int)

(declare-const temp___1352 Int)

(declare-const result5 Bool)

(declare-const lower3 Int)

(declare-const upper4 Int)

(declare-const middle2 Int)

(declare-const lower4 Int)

(declare-const upper5 Int)

(declare-const middle3 Int)

(declare-const lower5 int__ref)

(declare-const upper6 int__ref)

(declare-const middle4 int__ref)

(declare-const lower6 Int)

(declare-const upper7 Int)

(declare-const middle5 Int)

(declare-const lower7 int__ref)

(declare-const upper8 int__ref)

(declare-const middle6 int__ref)

(declare-const lower8 Int)

(declare-const upper9 Int)

(declare-const middle7 Int)

(declare-const result6 int__ref)

(declare-const loop_tutorial__isqrt__result1 Int)

(declare-const loop_tutorial__isqrt__result2 int__ref)

(declare-const loop_tutorial__isqrt__result3 Int)

(declare-const lower9 int__ref)

(declare-const upper10 int__ref)

(declare-const middle8 int__ref)

(declare-const loop_tutorial__isqrt__result4 int__ref)

(declare-const lower10 Int)

(declare-const upper11 Int)

(declare-const middle9 Int)

(declare-const loop_tutorial__isqrt__result5 Int)

(define-fun upper12 () int__ref (mk_int__ref upper))

(declare-const result7 Int)

;; H
  (assert (in_range2 n))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 lower)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 upper)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 middle)))

;; H
  (assert (in_range2 maximum_root))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref lower)))

;; H
  (assert (= lower1 0))

;; H
  (assert (=> (<= 46341 n) (= (mk_int__ref result1) upper12)))

;; H
  (assert (=> (<= 46341 n) (= upper1 46341)))

;; H
  (assert (=> (not (<= 46341 n)) (and (= o (+ n 1)) (in_range1 (+ n 1)))))

;; H
  (assert (=> (not (<= 46341 n)) (= (mk_int__ref result2) upper12)))

;; H
  (assert (=> (not (<= 46341 n)) (= upper2 o)))

;; H
  (assert (=> (not (<= 46341 n)) (= upper1 upper2)))

;; H
  (assert (= temp___134 upper1))

;; H
  (assert (= temp___133 lower1))

;; H
  (assert (= temp___132 middle))

;; H
  (assert (= 0 temp___136))

;; H
  (assert (= 0 temp___135))

;; H
  (assert
  (and
  (and (and (and (<= 0 lower2) (<= upper3 46341)) (< lower2 upper3))
  (< n (* upper3 upper3))) (<= (* lower2 lower2) n)))

;; H
  (assert
  (and
  (and (=> (<= 0 2147483647) (in_range2 middle1))
  (=> (<= 0 2147483647) (in_range2 lower2)))
  (=> (<= 0 2147483647) (in_range2 upper3))))

;; H
  (assert (= temp___1361 result3))

;; H
  (assert (= temp___1362 lower2))

;; H
  (assert (= temp___1351 result4))

;; H
  (assert (= temp___1352 upper3))

;; H
  (assert (= middle1 middle2))

;; H
  (assert (= upper3 upper4))

;; H
  (assert (= lower2 lower3))

;; H
  (assert (= middle3 middle1))

;; H
  (assert (= upper5 upper3))

;; H
  (assert (= lower4 lower2))

;; H
  (assert (and (= o1 (+ lower2 1)) (in_range1 (+ lower2 1))))

;; H
  (assert (= result5 (ite (= o1 upper3) true false)))

;; H
  (assert (= result5 true))

;; H
  (assert (= middle4 (mk_int__ref middle2)))

;; H
  (assert (= upper6 (mk_int__ref upper4)))

;; H
  (assert (= lower5 (mk_int__ref lower3)))

;; H
  (assert (= middle5 middle3))

;; H
  (assert (= upper7 upper5))

;; H
  (assert (= lower6 lower4))

;; H
  (assert (= middle6 middle4))

;; H
  (assert (= upper8 upper6))

;; H
  (assert (= lower7 lower5))

;; H
  (assert (= middle7 middle5))

;; H
  (assert (= upper9 upper7))

;; H
  (assert (= lower8 lower6))

;; H
  (assert
  (= loop_tutorial__isqrt__result2 (mk_int__ref
                                   loop_tutorial__isqrt__result1)))

;; H
  (assert (= loop_tutorial__isqrt__result3 loop_tutorial__isqrt__result1))

;; H
  (assert (= result6 (mk_int__ref loop_tutorial__isqrt__result)))

;; H
  (assert (= loop_tutorial__isqrt__result1 (int__content lower7)))

;; H
  (assert (= loop_tutorial__isqrt__result4 loop_tutorial__isqrt__result2))

;; H
  (assert (= middle8 middle6))

;; H
  (assert (= upper10 upper8))

;; H
  (assert (= lower9 lower7))

;; H
  (assert (= loop_tutorial__isqrt__result5 loop_tutorial__isqrt__result3))

;; H
  (assert (= middle9 middle7))

;; H
  (assert (= upper11 upper9))

;; H
  (assert (= lower10 lower8))

;; H
  (assert (= result7 (int__content loop_tutorial__isqrt__result4)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (<= (* (int__content loop_tutorial__isqrt__result4) (int__content
                                                      loop_tutorial__isqrt__result4))
  n)))
(check-sat)
(exit)
