;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x word32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

;; oadd__post_axiom
  (assert true)

(declare-fun omultiply (us_rep us_rep) us_rep)

(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)

;; omultiply__post_axiom
  (assert true)

(declare-fun oexpon (us_rep Int) us_rep)

(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)

;; oexpon__post_axiom
  (assert true)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun from_word32 ((_ BitVec 32)) us_rep)

(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)

;; from_word32__post_axiom
  (assert true)

(declare-fun base (tuple0) us_rep)

(declare-fun base__function_guard (us_rep tuple0) Bool)

;; base__post_axiom
  (assert true)

;; base__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern (
  (base us_void_param)) )))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (big_int_range big_int_range) Bool)

(declare-const dummy4 big_int_range)

(declare-datatypes ()
((big_int_range__ref
 (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int word32)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ()
((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun num_of_big_int (us_t Int Int) us_rep)

(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)

;; num_of_big_int__post_axiom
  (assert true)

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const a_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const b us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const b_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c us_t)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const x (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const y (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes () ((t49b__ref (mk_t49b__ref (t49b__content integer)))))
(define-fun t49b__ref___projection ((a t49b__ref)) integer (t49b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant4 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

(declare-const a (Array Int word32))

(declare-const carry1 (_ BitVec 32))

(declare-const carry2 (_ BitVec 32))

(declare-const temp (_ BitVec 32))

(declare-const i Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Bool)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Bool)

(declare-const o10 Bool)

(declare-const o11 Bool)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Int)

(declare-const o18 Bool)

(declare-const o19 Bool)

(declare-const o20 Bool)

(declare-const temp___738 (Array Int word32))

(declare-const temp___731 (Array Int word32))

(declare-const temp___740 (Array Int word32))

(declare-const temp___742 (_ BitVec 32))

(declare-const temp___743 (Array Int word32))

(declare-const temp___730 (_ BitVec 32))

(declare-const temp___736 (_ BitVec 32))

(declare-const temp___728 (Array Int word32))

(declare-const temp___741 (_ BitVec 32))

(declare-const temp___729 (_ BitVec 32))

(declare-const temp___735 (_ BitVec 32))

(declare-const temp___734 Int)

(declare-const temp___733 (_ BitVec 32))

(declare-const o21 Int)

(declare-const o22 Int)

(declare-const o23 Int)

(declare-const o24 Int)

(declare-const o25 Int)

(declare-const o26 us_rep)

(declare-const o27 us_rep)

(declare-const o28 us_rep)

(declare-const o29 Int)

(declare-const o30 Int)

(declare-const o31 us_rep)

(declare-const o32 us_rep)

(declare-const o33 us_rep)

(declare-const o34 us_rep)

(declare-const o35 us_rep)

(declare-const o36 us_rep)

(declare-const o37 us_rep)

(declare-const o38 Int)

(declare-const o39 Int)

(declare-const o40 us_rep)

(declare-const o41 us_rep)

(declare-const o42 Int)

(declare-const o43 Int)

(declare-const o44 us_rep)

(declare-const o45 us_rep)

(declare-const o46 us_rep)

(declare-const o47 us_rep)

(declare-const o48 us_rep)

(declare-const o49 us_rep)

(declare-const o50 us_rep)

(declare-const o51 us_rep)

(declare-const k Int)

(declare-const us Int)

(declare-const o52 Int)

(declare-const o53 Bool)

(declare-const o54 Int)

(declare-const o55 word32)

(declare-const o56 (_ BitVec 32))

(declare-const o57 Bool)

(declare-const temp___725 Int)

(declare-const o58 Int)

(declare-const o59 word32)

(declare-const o60 (_ BitVec 32))

(declare-const o61 Int)

(declare-const o62 Int)

(declare-const temp___726 Int)

(declare-const o63 Int)

(declare-const o64 word32)

(declare-const o65 (_ BitVec 32))

(declare-const o66 Int)

(declare-const o67 Int)

(declare-const temp___727 Int)

(declare-const o68 Int)

(declare-const o69 word32)

(declare-const o70 (_ BitVec 32))

(declare-const o71 word32)

(declare-const o72 Int)

(declare-const o73 (Array Int word32))

(declare-const o74 Int)

(declare-const o75 Int)

(declare-const o76 Int)

(declare-const o77 Int)

(declare-const o78 Int)

(declare-const o79 Int)

(declare-const o80 Int)

(declare-const o81 Int)

(declare-const o82 Int)

(declare-const o83 us_rep)

(declare-const o84 us_rep)

(declare-const o85 us_rep)

(declare-const o86 Int)

(declare-const o87 Int)

(declare-const o88 Int)

(declare-const o89 Int)

(declare-const o90 us_rep)

(declare-const o91 us_rep)

(declare-const o92 us_rep)

(declare-const o93 us_rep)

(declare-const o94 us_rep)

(declare-const o95 us_rep)

(declare-const o96 us_rep)

(declare-const o97 Int)

(declare-const o98 Int)

(declare-const o99 Int)

(declare-const o100 Int)

(declare-const o101 us_rep)

(declare-const o102 us_rep)

(declare-const o103 Int)

(declare-const o104 Int)

(declare-const o105 Int)

(declare-const o106 Int)

(declare-const o107 us_rep)

(declare-const o108 us_rep)

(declare-const o109 us_rep)

(declare-const o110 us_rep)

(declare-const o111 us_rep)

(declare-const o112 us_rep)

(declare-const o113 us_rep)

(declare-const o114 us_rep)

(declare-const k1 Int)

(declare-const us1 Int)

(declare-const us2 Int)

(declare-const o115 Int)

(declare-const o116 Int)

(declare-const o117 Bool)

(declare-const o118 Bool)

(declare-const o119 Int)

(declare-const o120 word32)

(declare-const o121 (_ BitVec 32))

(declare-const o122 Bool)

(declare-const o123 Int)

(declare-const o124 Int)

(declare-const o125 Int)

(declare-const o126 Int)

(declare-const o127 Int)

(declare-const o128 Int)

(declare-const o129 Int)

(declare-const o130 Int)

(declare-const o131 Int)

(declare-const o132 us_rep)

(declare-const o133 us_rep)

(declare-const o134 us_rep)

(declare-const o135 Int)

(declare-const o136 Int)

(declare-const o137 Int)

(declare-const o138 Int)

(declare-const o139 us_rep)

(declare-const o140 us_rep)

(declare-const o141 us_rep)

(declare-const o142 us_rep)

(declare-const o143 us_rep)

(declare-const o144 us_rep)

(declare-const o145 us_rep)

(declare-const o146 Int)

(declare-const o147 Int)

(declare-const o148 Int)

(declare-const o149 Int)

(declare-const o150 us_rep)

(declare-const o151 us_rep)

(declare-const o152 Int)

(declare-const o153 Int)

(declare-const o154 Int)

(declare-const o155 Int)

(declare-const o156 us_rep)

(declare-const o157 us_rep)

(declare-const o158 us_rep)

(declare-const o159 us_rep)

(declare-const o160 us_rep)

(declare-const o161 us_rep)

(declare-const o162 us_rep)

(declare-const o163 us_rep)

(declare-const a1 (Array Int word32))

(declare-const carry11 (_ BitVec 32))

(declare-const carry21 (_ BitVec 32))

(declare-const temp1 (_ BitVec 32))

(declare-const result Int)

(declare-const i1 Int)

(declare-const a2 (Array Int word32))

(declare-const carry12 (_ BitVec 32))

(declare-const carry22 (_ BitVec 32))

(declare-const temp2 (_ BitVec 32))

(declare-const i2 Int)

(declare-const result1 Bool)

(declare-const result2 (_ BitVec 32))

(declare-const temp3 (_ BitVec 32))

(declare-const carry13 (_ BitVec 32))

(declare-const carry23 (_ BitVec 32))

(declare-const temp4 (_ BitVec 32))

(declare-const result3 (Array Int word32))

(declare-const a3 (Array Int word32))

(declare-const result4 Bool)

(declare-const result5 Int)

(declare-const i3 Int)

(declare-const a4 (Array Int word32))

(declare-const carry14 (_ BitVec 32))

(declare-const carry24 (_ BitVec 32))

(declare-const temp5 (_ BitVec 32))

(declare-const i4 Int)

(declare-const a5 (Array Int word32))

(declare-const carry15 (_ BitVec 32))

(declare-const carry25 (_ BitVec 32))

(declare-const temp6 (_ BitVec 32))

(declare-const i5 Int)

(declare-const a6 (Array Int word32))

(declare-const carry16 (_ BitVec 32))

(declare-const carry26 (_ BitVec 32))

(declare-const temp7 (_ BitVec 32))

(declare-const i6 Int)

(declare-const a7 (Array Int word32))

(declare-const carry17 (_ BitVec 32))

(declare-const carry27 (_ BitVec 32))

(declare-const temp8 (_ BitVec 32))

(declare-const i7 Int)

(declare-const a8 (Array Int word32))

(declare-const carry18 (_ BitVec 32))

(declare-const carry28 t__ref)

(declare-const temp9 t__ref)

(declare-const i8 int__ref)

(declare-const a9 (Array Int word32))

(declare-const carry19 (_ BitVec 32))

(declare-const carry29 (_ BitVec 32))

(declare-const temp10 (_ BitVec 32))

(declare-const i9 Int)

(declare-const a10 map__ref)

(declare-const carry110 t__ref)

(declare-const carry210 t__ref)

(declare-const temp11 t__ref)

(declare-const i10 int__ref)

(declare-const a11 (Array Int word32))

(declare-const carry111 (_ BitVec 32))

(declare-const carry211 (_ BitVec 32))

(declare-const temp12 (_ BitVec 32))

(declare-const i11 Int)

(define-fun carry112 () t__ref (mk_t__ref carry18))

(define-fun a12 () map__ref (mk_map__ref a8))

(define-fun i12 () int__ref (mk_int__ref i6))

(define-fun temp13 () t__ref (mk_t__ref temp7))

(define-fun carry212 () t__ref (mk_t__ref carry26))

(define-fun carry113 () t__ref (mk_t__ref carry16))

(define-fun a13 () map__ref (mk_map__ref a6))

(define-fun i13 () int__ref (mk_int__ref i4))

(define-fun temp14 () t__ref (mk_t__ref temp5))

(define-fun carry213 () t__ref (mk_t__ref carry24))

(define-fun carry114 () t__ref (mk_t__ref carry14))

(define-fun a14 () map__ref (mk_map__ref a4))

(define-fun result6 () int__ref (mk_int__ref result))

(define-fun i14 () int__ref (mk_int__ref i))

(define-fun temp15 () t__ref (mk_t__ref temp))

(define-fun carry214 () t__ref (mk_t__ref carry2))

(define-fun carry115 () t__ref (mk_t__ref carry1))

(define-fun a15 () map__ref (mk_map__ref a))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_invariant2 b true false true))

;; H
  (assert (in_range2 b_first))

;; H
  (assert (dynamic_invariant2 c true false true))

;; H
  (assert (in_range2 c_first))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last)))
  (and (<= (to_rep a__first) (+ a_last 1))
  (<= (+ a_last 1) (to_rep a__last)))) (<= a_first a_last))
  (and (<= (to_rep (first (rt b))) b_first)
  (<= b_first (to_rep (last (rt b))))))
  (and (<= (to_rep (first (rt b))) (+ b_first (- a_last a_first)))
  (<= (+ b_first (- a_last a_first)) (to_rep (last (rt b))))))
  (and (<= (to_rep (first (rt c))) c_first)
  (<= c_first (to_rep (last (rt c))))))
  (and (<= (to_rep (first (rt c))) (+ c_first (- a_last a_first)))
  (<= (+ c_first (- a_last a_first)) (to_rep (last (rt c)))))))

;; H
  (assert true)

;; H
  (assert (= result6 i14))

;; H
  (assert (= i1 a_first))

;; H
  (assert (<= a_first i1))

;; H
  (assert (<= i1 a_last))

;; H
  (assert
  (and
  (= (oeq
     (oadd
     (oadd
     (oadd
     (oadd
     (num_of_big_int (mk___t a (mk (to_rep a__first) (to_rep a__last)))
     (+ a_first 1) (- i2 a_first))
     (omultiply (num_of_big_int b b_first (- i2 a_first)) (from_word32 x)))
     (omultiply (num_of_big_int c c_first (- i2 a_first)) (from_word32 y)))
     (from_word32 carry1)) (omultiply (base Tuple0) (from_word32 carry2)))
     (oadd
     (num_of_big_int (mk___t a2 (mk (to_rep a__first) (to_rep a__last)))
     a_first (- i2 a_first))
     (omultiply (oexpon (base Tuple0) (- i2 a_first))
     (oadd (from_word32 carry12)
     (omultiply (base Tuple0) (from_word32 carry22)))))) true)
  (forall ((k2 Int))
  (=> (and (<= i2 k2) (<= k2 (+ a_last 1)))
  (= (to_rep1 (select a2 k2)) (to_rep1 (select a k2)))))))

;; H
  (assert
  (and
  (and (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2))
  (forall ((temp___739 Int))
  (=>
  (and (<= (to_rep a__first) temp___739) (<= temp___739 (to_rep a__last)))
  (=> (<= i2 temp___739) (= (select a2 temp___739) (select a temp___739))))))
  (and (<= a_first i2) (<= i2 a_last))))

;; H
  (assert (and (= temp___725 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert
  (and (<= (to_rep a__first) temp___725) (<= temp___725 (to_rep a__last))))

;; H
  (assert (= o58 temp___725))

;; H
  (assert (= o59 (select a2 o58)))

;; H
  (assert (= o60 (to_rep1 o59)))

;; H
  (assert (= temp2 result2))

;; H
  (assert (= temp3 o60))

;; H
  (assert (and (= o66 (- i2 a_first)) (in_range1 (- i2 a_first))))

;; H
  (assert (= o67 (+ c_first o66)))

;; H
  (assert (and (= temp___727 o67) (in_range1 o67)))

;; H
  (assert
  (and (<= (to_rep (first (rt c))) temp___727)
  (<= temp___727 (to_rep (last (rt c))))))

;; H
  (assert (= o68 temp___727))

;; H
  (assert (= o69 (select (elts c) o68)))

;; H
  (assert (= o70 (to_rep1 o69)))

;; H
  (assert (and (= o61 (- i2 a_first)) (in_range1 (- i2 a_first))))

;; H
  (assert (= o62 (+ b_first o61)))

;; H
  (assert (and (= temp___726 o62) (in_range1 o62)))

;; H
  (assert
  (and (<= (to_rep (first (rt b))) temp___726)
  (<= temp___726 (to_rep (last (rt b))))))

;; H
  (assert (= o63 temp___726))

;; H
  (assert (= o64 (select (elts b) o63)))

;; H
  (assert (= o65 (to_rep1 o64)))

;; H
  (assert
  (= (oeq
     (oadd
     (oadd
     (oadd
     (oadd (from_word32 temp3) (omultiply (from_word32 o65) (from_word32 x)))
     (omultiply (from_word32 o70) (from_word32 y))) (from_word32 carry12))
     (omultiply (base Tuple0) (from_word32 carry22)))
     (oadd (from_word32 temp4)
     (omultiply (base Tuple0)
     (oadd (from_word32 carry13)
     (omultiply (base Tuple0) (from_word32 carry23)))))) true))

;; H
  (assert (= (to_rep1 o71) temp4))

;; H
  (assert (and (<= (to_rep a__first) i2) (<= i2 (to_rep a__last))))

;; H
  (assert (= o72 i2))

;; H
  (assert (= o73 (store a2 o72 o71)))

;; H
  (assert (= a2 result3))

;; H
  (assert (= a3 o73))

;; H
  (assert (and (= o116 (+ a_last 1)) (in_range1 (+ a_last 1))))

;; H
  (assert (= o117 (ite (<= k1 o116) true false)))

;; H
  (assert (and (= o115 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= o118 (ite (<= o115 k1) true false)))

;; H
  (assert (= result4 (ite (= o118 true) o117 false)))

;; H
  (assert
  (= (= o122 true)
  (forall ((k2 Int))
  (=> (and (<= (+ i2 1) k2) (<= k2 (+ a_last 1)))
  (= (to_rep1 (select a3 k2)) (to_rep1 (select a k2)))))))

;; H
  (assert (= o110 (from_word32 carry23)))

;; H
  (assert
  (and (= o109 (base Tuple0))
  (= o109 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o111 (omultiply o109 o110)))

;; H
  (assert (= o108 (from_word32 carry13)))

;; H
  (assert (= o112 (oadd o108 o111)))

;; H
  (assert (and (= o103 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= o104 (- o103 a_first)))

;; H
  (assert (and (= o105 o104) (in_range1 o104)))

;; H
  (assert (and (= o106 o105) (in_range2 o105)))

;; H
  (assert
  (and (= o102 (base Tuple0))
  (= o102 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o107 (oexpon o102 o106)))

;; H
  (assert (= o113 (omultiply o107 o112)))

;; H
  (assert (and (= o97 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= o98 (- o97 a_first)))

;; H
  (assert (and (= o99 o98) (in_range1 o98)))

;; H
  (assert (and (= o100 o99) (in_range2 o99)))

;; H
  (assert
  (= o101 (num_of_big_int (mk___t a3 (mk (to_rep a__first) (to_rep a__last)))
          a_first o100)))

;; H
  (assert (= o114 (oadd o101 o113)))

;; H
  (assert (= o95 (from_word32 carry2)))

;; H
  (assert
  (and (= o94 (base Tuple0))
  (= o94 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o96 (omultiply o94 o95)))

;; H
  (assert (= o93 (from_word32 carry1)))

;; H
  (assert (= o91 (from_word32 y)))

;; H
  (assert (and (= o86 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= o87 (- o86 a_first)))

;; H
  (assert (and (= o88 o87) (in_range1 o87)))

(assert
;; WP_parameter_def
 ;; File "lsc-types.ads", line 54, characters 0-0
  (not (in_range2 o88)))
(check-sat)
(exit)
