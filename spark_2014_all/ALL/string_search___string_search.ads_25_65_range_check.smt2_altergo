(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,character) farray

logic dummy5 : t

type text__ref = { text__content : us_t
}

function text__ref___projection(a: text__ref) : us_t = (a).text__content

logic partial_match_at : us_t, us_t, int, int -> bool

logic partial_match_at__function_guard : bool, us_t, us_t, int, int -> prop

axiom partial_match_at__post_axiom : true

axiom partial_match_at__def_axiom :
  (forall needle:(int,character) farray. forall needle1:t.
  forall haystack:(int,character) farray. forall haystack1:t.
  (forall loc:int. forall len:int [partial_match_at({ elts = needle; rt =
  needle1 }, { elts = haystack; rt = haystack1 }, loc, len)].
  ((partial_match_at({ elts = needle; rt = needle1 }, { elts = haystack; rt =
  haystack1 }, loc, len) = true) <->
  (forall i:int. (((1 <= i) and (i <= len)) ->
  (to_rep((needle[i])) = to_rep((haystack[(loc + (i - 1))]))))))))

logic match_at : us_t, us_t, int -> bool

logic match_at__function_guard : bool, us_t, us_t, int -> prop

axiom match_at__post_axiom : true

axiom match_at__def_axiom :
  (forall needle:(int,character) farray. forall needle1:t.
  forall haystack:(int,character) farray. forall haystack1:t.
  (forall loc:int [match_at({ elts = needle; rt = needle1 }, { elts =
  haystack; rt = haystack1 }, loc)]. ((match_at({ elts = needle; rt = needle1
  }, { elts = haystack; rt = haystack1 }, loc) = true) <->
  (((loc - 1) <= (length({ elts = haystack; rt = haystack1 }) - length({
  elts = needle; rt = needle1 }))) and (partial_match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, loc, length({ elts =
  needle; rt = needle1 })) = true)))))

logic needle : (int,character) farray

logic needle1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic haystack : (int,character) farray

logic haystack1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t4b__ref = { t4b__content : integer
}

function t4b__ref___projection(a: t4b__ref) : integer = (a).t4b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall diff:bool. forall i:int. forall j:int.
  forall string_search__brute_force__result:int. forall temp___272:int.
  forall o:int. forall o1:int. forall o2:int. forall o3:int. forall o4:int.
  forall temp___273:int. forall temp___271:int. forall temp___270:bool.
  forall temp___266:int. forall temp___265:bool. forall temp___264:int.
  forall o5:int. forall o6:character. forall o7:int. forall o8:bool.
  forall o9:bool. forall temp___2641:int. forall o10:int.
  forall o11:character. forall o12:int. forall o13:bool. forall o14:bool.
  forall temp___2661:int. forall temp___2651:bool. forall temp___2642:int.
  forall o15:int. forall o16:character. forall o17:int. forall o18:bool.
  forall o19:bool. forall temp___2643:int. forall o20:int.
  forall o21:character. forall o22:int. forall o23:bool. forall o24:bool.
  forall diff1:bool. forall j1:int.
  forall string_search__brute_force__result1:int. forall result:int.
  forall i1:int. forall result1:bool. forall diff2:bool. forall result2:int.
  forall j2:int. forall result3:bool. forall diff3:bool. forall diff4:bool.
  forall j3:int. forall result4:int. forall j4:int. forall result5:bool.
  forall diff5:bool. forall diff6:bool. forall j5:int. forall diff7:bool.
  forall j6:int. forall diff8:bool. forall j7:int. forall diff9:bool.
  forall j8:int. forall diff10:bool. forall j9:int. forall diff11:bool.
  forall j10:int. forall diff12:bool. forall j11:int. forall diff13:bool.
  forall j12:int. forall result6:int.
  forall string_search__brute_force__result2:int.
  forall string_search__brute_force__result3:int.
  forall string_search__brute_force__result4:int. forall diff14:bool.
  forall i2:int. forall j13:int.
  forall string_search__brute_force__result5:int. forall result7:int.
  forall i3:int. forall result8:bool. forall diff15:bool. forall result9:int.
  forall j14:int. forall result10:bool. forall diff16:bool.
  forall diff17:bool. forall j15:int. forall result11:int. forall j16:int.
  forall result12:bool. forall diff18:bool. forall diff19:bool.
  forall j17:int. forall diff20:bool. forall j18:int. forall diff21:bool.
  forall j19:int. forall diff22:bool. forall j20:int. forall diff23:bool.
  forall j21:int. forall diff24:bool. forall j22:int. forall diff25:bool.
  forall j23:int. forall diff26:bool. forall j24:int. forall result13:int.
  forall string_search__brute_force__result6:int. forall diff27:bool__ref.
  forall i4:int__ref. forall j25:int__ref.
  forall string_search__brute_force__result7:int__ref. forall diff28:bool.
  forall i5:int. forall j26:int.
  forall string_search__brute_force__result8:int. forall diff29:bool__ref.
  forall i6:int__ref. forall j27:int__ref.
  forall string_search__brute_force__result9:int__ref. forall diff30:bool.
  forall i7:int. forall j28:int.
  forall string_search__brute_force__result10:int. forall diff31:bool__ref.
  forall i8:int__ref. forall j29:int__ref.
  forall string_search__brute_force__result11:int__ref. forall diff32:bool.
  forall i9:int. forall j30:int.
  forall string_search__brute_force__result12:int. forall result14:int__ref.
  forall string_search__brute_force__result13:int.
  forall string_search__brute_force__result14:int__ref.
  forall string_search__brute_force__result15:int. forall diff33:bool__ref.
  forall i10:int__ref. forall j31:int__ref.
  forall string_search__brute_force__result16:int__ref. forall diff34:bool.
  forall i11:int. forall j32:int.
  forall string_search__brute_force__result17:int. forall diff35:bool__ref.
  forall i12:int__ref. forall j33:int__ref.
  forall string_search__brute_force__result18:int__ref. forall diff36:bool.
  forall i13:int. forall j34:int.
  forall string_search__brute_force__result19:int. ((dynamic_property(1,
  2147483647, to_rep1(first(needle1)), to_rep1(last(needle1))) and
  (to_rep1(first(needle1)) = 1)) -> ((dynamic_property(1, 2147483647,
  to_rep1(first(haystack1)), to_rep1(last(haystack1))) and
  (to_rep1(first(haystack1)) = 1)) -> (((1 <= length({ elts = needle; rt =
  needle1 })) and (length({ elts = needle; rt = needle1 }) <= length({ elts =
  haystack; rt = haystack1 }))) ->
  (((((((string_search__brute_force__result16 = string_search__brute_force__result7) and
  ((j31 = j25) and ((i10 = i4) and (diff33 = diff27)))) and
  ((string_search__brute_force__result17 = string_search__brute_force__result8) and
  ((j32 = j26) and ((i11 = i5) and (diff34 = diff28))))) and
  ((temp___272 = 1) and (((((((o = length({ elts = needle; rt = needle1
  })) and in_range1(length({ elts = needle; rt = needle1 }))) and
  (((o1 = length({ elts = haystack; rt = haystack1 })) and in_range1(length({
  elts = haystack; rt = haystack1 }))) and (o2 = (o1 - o)))) and
  ((o3 = o2) and in_range1(o2))) and (o4 = (o3 + 1))) and
  ((temp___273 = o4) and in_range1(o4))) and ((({ int__content = result } = {
  int__content = i }) and (i1 = temp___272)) and (((temp___272 <= i1) and
  (i1 <= temp___273)) and ((temp___271 = i1) and ((temp___270 = diff) and
  ((({ bool__content = result1 } = { bool__content = diff }) and
  (diff2 = of_int(0))) and (((({ int__content = result2 } = { int__content =
  j }) and (j2 = to_rep1(first(needle1)))) and
  ((((to_rep1(first(needle1)) <= j2) and (j2 <= to_rep1(last(needle1)))) and
  ((((temp___266 = j2) and ((temp___265 = diff2) and
  (((((((((temp___264 = (j2 + (i1 - 1))) and in_range1((j2 + (i1 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___264) and
  (temp___264 <= to_rep1(last(haystack1)))) and (o5 = temp___264))) and
  (o6 = (haystack[o5]))) and (o7 = to_rep(o6))) and
  (((to_rep((needle[j2])) = o7) and (o8 = true)) or
  ((not (to_rep((needle[j2])) = o7)) and (o8 = false)))) and
  (((not (o8 = true)) and (o9 = true)) or ((o8 = true) and
  (o9 = false)))) and ((diff2 = result3) and (diff3 = o9))) and
  (((((j2 = j7) and (diff3 = diff8)) and ((j8 = j2) and (diff9 = diff3))) and
  (diff3 = true)) or ((not (diff3 = true)) and (((({ int__content = j7 } = {
  int__content = j5 }) and ({ bool__content = diff8 } = { bool__content =
  diff6 })) and ((j8 = j6) and (diff9 = diff7))) and (((partial_match_at({
  elts = needle; rt = needle1 }, { elts = haystack; rt = haystack1 }, i1,
  j3) = true) and ((diff4 = true) <->
  (not (to_rep((needle[j3])) = to_rep((haystack[(j3 + (i1 - 1))])))))) and
  ((((to_rep1(first(needle1)) <= to_rep1(last(needle1))) ->
  dynamic_property2(to_rep1(first(needle1)), to_rep1(last(needle1)), j3)) and
  ((to_rep1(first(needle1)) <= j3) and (j3 <= to_rep1(last(needle1))))) and
  (((((j3 = j5) and (diff4 = diff6)) and ((j6 = j3) and (diff7 = diff4))) and
  (j3 = to_rep1(last(needle1)))) or ((not (j3 = to_rep1(last(needle1)))) and
  ((((j4 = j5) and (diff5 = diff6)) and ((j6 = j4) and (diff7 = diff5))) and
  (((j3 = result4) and (j4 = (j3 + 1))) and
  (((((((((temp___2641 = (j4 + (i1 - 1))) and in_range1((j4 + (i1 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___2641) and
  (temp___2641 <= to_rep1(last(haystack1)))) and (o10 = temp___2641))) and
  (o11 = (haystack[o10]))) and (o12 = to_rep(o11))) and
  (((to_rep((needle[j4])) = o12) and (o13 = true)) or
  ((not (to_rep((needle[j4])) = o12)) and (o13 = false)))) and
  (((not (o13 = true)) and (o14 = true)) or ((o13 = true) and
  (o14 = false)))) and ((diff4 = result5) and (diff5 = o14))) and
  (diff5 = true)))))))))))))) and ((({ int__content = j9 } = { int__content =
  j7 }) and ({ bool__content = diff10 } = { bool__content = diff8 })) and
  ((j10 = j8) and (diff11 = diff9)))) and ((({ int__content = j11 } = {
  int__content = j9 }) and ({ bool__content = diff12 } = { bool__content =
  diff10 })) and ((j12 = j10) and (diff13 = diff11))))) or
  ((not ((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1))))) and (((j2 = j11) and (diff2 = diff12)) and
  ((j12 = j2) and (diff13 = diff2)))))) and
  (((((string_search__brute_force__result7 = { int__content =
  string_search__brute_force__result2 }) and ((j25 = { int__content = j11
  }) and ((i4 = { int__content = i1 }) and (diff27 = { bool__content = diff12
  })))) and
  ((string_search__brute_force__result8 = string_search__brute_force__result2) and
  ((j26 = j12) and ((i5 = i1) and (diff28 = diff13))))) and
  ((not (diff12 = true)) and (({ int__content = result6 } = { int__content =
  string_search__brute_force__result }) and
  (string_search__brute_force__result2 = i1)))) or (((diff12 = true) and (({
  int__content = string_search__brute_force__result3 } = { int__content =
  string_search__brute_force__result }) and
  (string_search__brute_force__result4 = string_search__brute_force__result1))) and
  ((((string_search__brute_force__result7 = { int__content =
  string_search__brute_force__result6 }) and ((j25 = { int__content = j23
  }) and ((i4 = { int__content = i3 }) and (diff27 = { bool__content = diff25
  })))) and
  ((string_search__brute_force__result8 = string_search__brute_force__result6) and
  ((j26 = j24) and ((i5 = i3) and (diff28 = diff26))))) and
  ((forall k:int. (((1 <= k) and (k <= i2)) -> (not (match_at({ elts =
   needle; rt = needle1 }, { elts = haystack; rt = haystack1 }, k) = true)))) and
  ((((1 <= ((length({ elts = haystack; rt = haystack1 }) - length({ elts =
  needle; rt = needle1 })) + 1)) -> dynamic_property1(1, ((length({ elts =
  haystack; rt = haystack1 }) - length({ elts = needle; rt = needle1
  })) + 1), i2)) and ((1 <= i2) and (i2 <= ((length({ elts = haystack; rt =
  haystack1 }) - length({ elts = needle; rt = needle1 })) + 1)))) and
  ((not (i2 = temp___273)) and (((result7 = i2) and (i3 = (i2 + 1))) and
  (((result8 = diff14) and (diff15 = of_int(0))) and ((((result9 = j13) and
  (j14 = to_rep1(first(needle1)))) and
  ((((to_rep1(first(needle1)) <= j14) and
  (j14 <= to_rep1(last(needle1)))) and ((((temp___2661 = j14) and
  ((temp___2651 = diff15) and (((((((((temp___2642 = (j14 + (i3 - 1))) and
  in_range1((j14 + (i3 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___2642) and
  (temp___2642 <= to_rep1(last(haystack1)))) and (o15 = temp___2642))) and
  (o16 = (haystack[o15]))) and (o17 = to_rep(o16))) and
  (((to_rep((needle[j14])) = o17) and (o18 = true)) or
  ((not (to_rep((needle[j14])) = o17)) and (o18 = false)))) and
  (((not (o18 = true)) and (o19 = true)) or ((o18 = true) and
  (o19 = false)))) and ((result10 = diff15) and (diff16 = o19))) and
  (((((j14 = j19) and (diff16 = diff21)) and ((j20 = j14) and
  (diff22 = diff16))) and (diff16 = true)) or ((not (diff16 = true)) and
  (((({ int__content = j19 } = { int__content = j17 }) and ({ bool__content =
  diff21 } = { bool__content = diff19 })) and ((j20 = j18) and
  (diff22 = diff20))) and (((partial_match_at({ elts = needle; rt = needle1
  }, { elts = haystack; rt = haystack1 }, i3, j15) = true) and
  ((diff17 = true) <->
  (not (to_rep((needle[j15])) = to_rep((haystack[(j15 + (i3 - 1))])))))) and
  ((((to_rep1(first(needle1)) <= to_rep1(last(needle1))) ->
  dynamic_property2(to_rep1(first(needle1)), to_rep1(last(needle1)),
  j15)) and ((to_rep1(first(needle1)) <= j15) and
  (j15 <= to_rep1(last(needle1))))) and (((((j15 = j17) and
  (diff17 = diff19)) and ((j18 = j15) and (diff20 = diff17))) and
  (j15 = to_rep1(last(needle1)))) or
  ((not (j15 = to_rep1(last(needle1)))) and ((((j16 = j17) and
  (diff18 = diff19)) and ((j18 = j16) and (diff20 = diff18))) and
  (((result11 = j15) and (j16 = (j15 + 1))) and
  (((((((((temp___2643 = (j16 + (i3 - 1))) and
  in_range1((j16 + (i3 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___2643) and
  (temp___2643 <= to_rep1(last(haystack1)))) and (o20 = temp___2643))) and
  (o21 = (haystack[o20]))) and (o22 = to_rep(o21))) and
  (((to_rep((needle[j16])) = o22) and (o23 = true)) or
  ((not (to_rep((needle[j16])) = o22)) and (o23 = false)))) and
  (((not (o23 = true)) and (o24 = true)) or ((o23 = true) and
  (o24 = false)))) and ((result12 = diff17) and (diff18 = o24))) and
  (diff18 = true)))))))))))))) and ((({ int__content = j21 } = {
  int__content = j19 }) and ({ bool__content = diff23 } = { bool__content =
  diff21 })) and ((j22 = j20) and (diff24 = diff22)))) and ((({
  int__content = j23 } = { int__content = j21 }) and ({ bool__content =
  diff25 } = { bool__content = diff23 })) and ((j24 = j22) and
  (diff26 = diff24))))) or ((not ((to_rep1(first(needle1)) <= j14) and
  (j14 <= to_rep1(last(needle1))))) and (((j14 = j23) and
  (diff15 = diff25)) and ((j24 = j14) and (diff26 = diff15)))))) and
  ((not (diff25 = true)) and
  ((result13 = string_search__brute_force__result5) and
  (string_search__brute_force__result6 = i3))))))))))))))))))))) or
  ((((((((o = length({ elts = needle; rt = needle1 })) and in_range1(length({
  elts = needle; rt = needle1 }))) and (((o1 = length({ elts = haystack; rt =
  haystack1 })) and in_range1(length({ elts = haystack; rt = haystack1
  }))) and (o2 = (o1 - o)))) and ((o3 = o2) and in_range1(o2))) and
  (o4 = (o3 + 1))) and ((temp___273 = o4) and in_range1(o4))) and ((({
  int__content = result } = { int__content = i }) and (i1 = 1)) and
  ((((1 <= i1) and (i1 <= temp___273)) and ((((temp___271 = i1) and
  ((temp___270 = diff) and ((({ bool__content = result1 } = { bool__content =
  diff }) and (diff2 = of_int(0))) and (((({ int__content = result2 } = {
  int__content = j }) and (j2 = to_rep1(first(needle1)))) and
  ((((to_rep1(first(needle1)) <= j2) and (j2 <= to_rep1(last(needle1)))) and
  ((((temp___266 = j2) and ((temp___265 = diff2) and
  (((((((((temp___264 = (j2 + (i1 - 1))) and in_range1((j2 + (i1 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___264) and
  (temp___264 <= to_rep1(last(haystack1)))) and (o5 = temp___264))) and
  (o6 = (haystack[o5]))) and (o7 = to_rep(o6))) and
  (((to_rep((needle[j2])) = o7) and (o8 = true)) or
  ((not (to_rep((needle[j2])) = o7)) and (o8 = false)))) and
  (((not (o8 = true)) and (o9 = true)) or ((o8 = true) and
  (o9 = false)))) and ((diff2 = result3) and (diff3 = o9))) and
  (((((j2 = j7) and (diff3 = diff8)) and ((j8 = j2) and (diff9 = diff3))) and
  (diff3 = true)) or ((not (diff3 = true)) and (((({ int__content = j7 } = {
  int__content = j5 }) and ({ bool__content = diff8 } = { bool__content =
  diff6 })) and ((j8 = j6) and (diff9 = diff7))) and (((partial_match_at({
  elts = needle; rt = needle1 }, { elts = haystack; rt = haystack1 }, i1,
  j3) = true) and ((diff4 = true) <->
  (not (to_rep((needle[j3])) = to_rep((haystack[(j3 + (i1 - 1))])))))) and
  ((((to_rep1(first(needle1)) <= to_rep1(last(needle1))) ->
  dynamic_property2(to_rep1(first(needle1)), to_rep1(last(needle1)), j3)) and
  ((to_rep1(first(needle1)) <= j3) and (j3 <= to_rep1(last(needle1))))) and
  (((((j3 = j5) and (diff4 = diff6)) and ((j6 = j3) and (diff7 = diff4))) and
  (j3 = to_rep1(last(needle1)))) or ((not (j3 = to_rep1(last(needle1)))) and
  ((((j4 = j5) and (diff5 = diff6)) and ((j6 = j4) and (diff7 = diff5))) and
  (((j3 = result4) and (j4 = (j3 + 1))) and
  (((((((((temp___2641 = (j4 + (i1 - 1))) and in_range1((j4 + (i1 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___2641) and
  (temp___2641 <= to_rep1(last(haystack1)))) and (o10 = temp___2641))) and
  (o11 = (haystack[o10]))) and (o12 = to_rep(o11))) and
  (((to_rep((needle[j4])) = o12) and (o13 = true)) or
  ((not (to_rep((needle[j4])) = o12)) and (o13 = false)))) and
  (((not (o13 = true)) and (o14 = true)) or ((o13 = true) and
  (o14 = false)))) and ((diff4 = result5) and (diff5 = o14))) and
  (diff5 = true)))))))))))))) and ((({ int__content = j9 } = { int__content =
  j7 }) and ({ bool__content = diff10 } = { bool__content = diff8 })) and
  ((j10 = j8) and (diff11 = diff9)))) and ((({ int__content = j11 } = {
  int__content = j9 }) and ({ bool__content = diff12 } = { bool__content =
  diff10 })) and ((j12 = j10) and (diff13 = diff11))))) or
  ((not ((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1))))) and (((j2 = j11) and (diff2 = diff12)) and
  ((j12 = j2) and (diff13 = diff2)))))) and (((diff12 = true) and (({
  int__content = string_search__brute_force__result3 } = { int__content =
  string_search__brute_force__result }) and
  (string_search__brute_force__result4 = string_search__brute_force__result1))) and
  ((forall k:int. (((1 <= k) and (k <= i2)) -> (not (match_at({ elts =
   needle; rt = needle1 }, { elts = haystack; rt = haystack1 }, k) = true)))) and
  ((((1 <= ((length({ elts = haystack; rt = haystack1 }) - length({ elts =
  needle; rt = needle1 })) + 1)) -> dynamic_property1(1, ((length({ elts =
  haystack; rt = haystack1 }) - length({ elts = needle; rt = needle1
  })) + 1), i2)) and ((1 <= i2) and (i2 <= ((length({ elts = haystack; rt =
  haystack1 }) - length({ elts = needle; rt = needle1 })) + 1)))) and
  (i2 = temp___273)))))))) and (((string_search__brute_force__result9 = {
  int__content = string_search__brute_force__result5 }) and ((j27 = {
  int__content = j13 }) and ((i6 = { int__content = i2 }) and (diff29 = {
  bool__content = diff14 })))) and
  ((string_search__brute_force__result10 = string_search__brute_force__result5) and
  ((j28 = j13) and ((i7 = i2) and (diff30 = diff14)))))) and
  (((string_search__brute_force__result11 = string_search__brute_force__result9) and
  ((j29 = j27) and ((i8 = i6) and (diff31 = diff29)))) and
  ((string_search__brute_force__result12 = string_search__brute_force__result10) and
  ((j30 = j28) and ((i9 = i7) and (diff32 = diff30))))))) or
  ((not ((1 <= i1) and (i1 <= temp___273))) and
  (((string_search__brute_force__result11 = { int__content =
  string_search__brute_force__result }) and ((j29 = { int__content = j }) and
  ((i8 = { int__content = i1 }) and (diff31 = { bool__content = diff
  })))) and
  ((string_search__brute_force__result12 = string_search__brute_force__result1) and
  ((j30 = j1) and ((i9 = i1) and (diff32 = diff1))))))))) and
  ((((string_search__brute_force__result16 = string_search__brute_force__result14) and
  ((j31 = j29) and ((i10 = i8) and (diff33 = diff31)))) and
  ((string_search__brute_force__result17 = string_search__brute_force__result15) and
  ((j32 = j30) and ((i11 = i9) and (diff34 = diff32))))) and
  (((string_search__brute_force__result14 = { int__content =
  string_search__brute_force__result13 }) and
  (string_search__brute_force__result15 = string_search__brute_force__result13)) and
  ((result14 = string_search__brute_force__result11) and
  (string_search__brute_force__result13 = 0)))))) and
  (((string_search__brute_force__result18 = string_search__brute_force__result16) and
  ((j33 = j31) and ((i12 = i10) and (diff35 = diff33)))) and
  ((string_search__brute_force__result19 = string_search__brute_force__result17) and
  ((j34 = j32) and ((i13 = i11) and (diff36 = diff34)))))) ->
  in_range1(length({ elts = needle; rt = needle1 })))))))
