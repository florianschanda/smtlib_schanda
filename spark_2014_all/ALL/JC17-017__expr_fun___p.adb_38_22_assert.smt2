;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun h_true (tuple0) Bool)

(declare-fun h_true__function_guard (Bool tuple0) Bool)

;; h_true__post_axiom
  (assert true)

;; h_true__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (h_true us_void_param) true) :pattern ((h_true us_void_param)) )))

(declare-fun h_x (Bool) Bool)

(declare-fun h_x__function_guard (Bool Bool) Bool)

;; h_x__post_axiom
  (assert true)

;; h_x__def_axiom
  (assert
  (forall ((p__sub__z Bool))
  (! (= (= (h_x p__sub__z) true) (= p__sub__z true)) :pattern ((h_x
                                                               p__sub__z)) )))

(declare-fun h_false (tuple0) Bool)

(declare-fun h_false__function_guard (Bool tuple0) Bool)

;; h_false__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (not (= (h_false us_void_param) true)) :pattern ((h_false us_void_param)) )))

;; h_false__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (not (= (h_false us_void_param) true)) :pattern ((h_false us_void_param)) )))

(declare-fun h_y (Bool) Bool)

(declare-fun h_y__function_guard (Bool Bool) Bool)

;; h_y__post_axiom
  (assert
  (forall ((p__sub__z Bool))
  (! (= (= (h_y p__sub__z) true) (= p__sub__z true)) :pattern ((h_y
                                                               p__sub__z)) )))

;; h_y__def_axiom
  (assert
  (forall ((p__sub__z Bool))
  (! (= (= (h_y p__sub__z) true) (= p__sub__z true)) :pattern ((h_y
                                                               p__sub__z)) )))

(declare-const z Bool)

(declare-const o Bool)

(declare-const o1 Bool)

(declare-const o2 Bool)

(declare-const o3 Bool)

(declare-const result Bool)

(declare-const z1 Bool)

(declare-const result1 Bool)

(declare-const z2 Bool)

(declare-const result2 Bool)

(declare-const z3 Bool)

(declare-const result3 Bool)

(declare-const z4 Bool)

;; H
  (assert (and (= o (h_true Tuple0)) (= o true)))

;; H
  (assert (= result z))

;; H
  (assert (= z1 o))

;; H
  (assert (= z1 true))

;; H
  (assert (and (= o1 (h_x z1)) (= (= o1 true) (= z1 true))))

;; H
  (assert (= result1 z1))

;; H
  (assert (= z2 o1))

;; H
  (assert (= z2 true))

;; H
  (assert (and (= o2 (h_false Tuple0)) (not (= o2 true))))

;; H
  (assert (= result2 z2))

;; H
  (assert (= z3 o2))

;; H
  (assert (not (= z3 true)))

;; H
  (assert (and (= o3 (h_y z3)) (= (= o3 true) (= z3 true))))

;; H
  (assert (= result3 z3))

;; H
  (assert (= z4 o3))

(assert
;; WP_parameter_def
 ;; File "p.adb", line 14, characters 0-0
  (not (not (= z4 true))))
(check-sat)
(exit)
