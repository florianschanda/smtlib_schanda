;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__discr__with_default__c natural)))))
(define-fun us_split_discrs___4__projection ((a us_split_discrs)) natural
  (rec__discr__with_default__c a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___4__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_discrs1 us_split_discrs)(attr__constrained Bool)))))
(define-fun us_rep___8__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___9__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__discr__with_default__c (us_split_discrs1 a)))
                   (to_rep
                   (rec__discr__with_default__c (us_split_discrs1 b)))) true
                   false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const discr__with_default__c__first__bit Int)

(declare-const discr__with_default__c__last__bit Int)

(declare-const discr__with_default__c__position Int)

;; discr__with_default__c__first__bit_axiom
  (assert (<= 0 discr__with_default__c__first__bit))

;; discr__with_default__c__last__bit_axiom
  (assert
  (< discr__with_default__c__first__bit discr__with_default__c__last__bit))

;; discr__with_default__c__position_axiom
  (assert (<= 0 discr__with_default__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((with_default__ref 0))
(((mk_with_default__ref (with_default__content us_rep)))))
(define-fun with_default__ref___projection ((a with_default__ref)) us_rep
  (with_default__content a))

(define-fun default_initial_assumption ((temp___expr_166 us_rep)
  (temp___skip_top_level_167 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_166) false)
                                         (= (to_rep
                                            (rec__discr__with_default__c
                                            (us_split_discrs1
                                            temp___expr_166))) 0)))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__discr__holder__content us_rep)))))
(define-fun us_split_fields_Content__2__projection ((a us_split_fields)) us_rep
  (rec__discr__holder__content a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___10__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (bool_eq
                            (rec__discr__holder__content
                            (us_split_fields1 a))
                            (rec__discr__holder__content
                            (us_split_fields1 b))) true)
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const discr__holder__content__first__bit Int)

(declare-const discr__holder__content__last__bit Int)

(declare-const discr__holder__content__position Int)

;; discr__holder__content__first__bit_axiom
  (assert (<= 0 discr__holder__content__first__bit))

;; discr__holder__content__last__bit_axiom
  (assert
  (< discr__holder__content__first__bit discr__holder__content__last__bit))

;; discr__holder__content__position_axiom
  (assert (<= 0 discr__holder__content__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((holder__ref 0))
(((mk_holder__ref (holder__content us_rep1)))))
(define-fun holder__ref___projection ((a holder__ref)) us_rep1 (holder__content
                                                               a))

(define-fun dynamic_invariant1 ((temp___expr_172 us_rep1)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (= (attr__constrained
                                         (rec__discr__holder__content
                                         (us_split_fields1 temp___expr_172))) false))

(define-fun default_initial_assumption1 ((temp___expr_174 us_rep1)
  (temp___skip_top_level_175 Bool)) Bool (and
                                         (= (attr__constrained
                                            (rec__discr__holder__content
                                            (us_split_fields1
                                            temp___expr_174))) false)
                                         (= (to_rep
                                            (rec__discr__with_default__c
                                            (us_split_discrs1
                                            (rec__discr__holder__content
                                            (us_split_fields1
                                            temp___expr_174))))) 0)))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range1 ((rec__discr__with_default__c1 Int)
  (a us_rep)) Bool (= rec__discr__with_default__c1 (to_rep
                                                   (rec__discr__with_default__c
                                                   (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const discr__with_default__c__first__bit1 Int)

(declare-const discr__with_default__c__last__bit1 Int)

(declare-const discr__with_default__c__position1 Int)

;; discr__with_default__c__first__bit_axiom
  (assert (<= 0 discr__with_default__c__first__bit1))

;; discr__with_default__c__last__bit_axiom
  (assert
  (< discr__with_default__c__first__bit1 discr__with_default__c__last__bit1))

;; discr__with_default__c__position_axiom
  (assert (<= 0 discr__with_default__c__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((td1S__ref 0)) (((mk_td1S__ref (td1S__content us_rep)))))
(define-fun td1S__ref___2__projection ((a td1S__ref)) us_rep (td1S__content
                                                             a))

(define-fun dynamic_invariant2 ((temp___expr_205 us_rep)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_203 true))
                                      (in_range1 c temp___expr_205))
                                      (= (attr__constrained temp___expr_205) true)))

(define-fun default_initial_assumption2 ((temp___expr_207 us_rep)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_207) true)
                                         (= (to_rep
                                            (rec__discr__with_default__c
                                            (us_split_discrs1
                                            temp___expr_207))) c)))

(define-fun in_range2 ((rec__discr__with_default__c1 Int)
  (a us_rep)) Bool (= rec__discr__with_default__c1 (to_rep
                                                   (rec__discr__with_default__c
                                                   (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const discr__with_default__c__first__bit2 Int)

(declare-const discr__with_default__c__last__bit2 Int)

(declare-const discr__with_default__c__position2 Int)

;; discr__with_default__c__first__bit_axiom
  (assert (<= 0 discr__with_default__c__first__bit2))

;; discr__with_default__c__last__bit_axiom
  (assert
  (< discr__with_default__c__first__bit2 discr__with_default__c__last__bit2))

;; discr__with_default__c__position_axiom
  (assert (<= 0 discr__with_default__c__position2))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((t20b__ref 0)) (((mk_t20b__ref (t20b__content us_rep)))))
(define-fun t20b__ref___projection ((a t20b__ref)) us_rep (t20b__content a))

(declare-const d1__split_discrs us_split_discrs)

(declare-const d1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range3 ((rec__discr__with_default__c1 Int)
  (a us_rep)) Bool (= rec__discr__with_default__c1 (to_rep
                                                   (rec__discr__with_default__c
                                                   (us_split_discrs1 a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-const discr__with_default__c__first__bit3 Int)

(declare-const discr__with_default__c__last__bit3 Int)

(declare-const discr__with_default__c__position3 Int)

;; discr__with_default__c__first__bit_axiom
  (assert (<= 0 discr__with_default__c__first__bit3))

;; discr__with_default__c__last__bit_axiom
  (assert
  (< discr__with_default__c__first__bit3 discr__with_default__c__last__bit3))

;; discr__with_default__c__position_axiom
  (assert (<= 0 discr__with_default__c__position3))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((t21b__ref 0)) (((mk_t21b__ref (t21b__content us_rep)))))
(define-fun t21b__ref___projection ((a t21b__ref)) us_rep (t21b__content a))

(declare-const d2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const d2__split_discrs natural)

(declare-const h__split_fields natural)

(declare-const h__split_fields1 Bool)

(declare-const us Int)

(declare-const o natural)

(declare-const o1 natural)

(declare-const o2 natural)

(declare-const o3 Bool)

(declare-const o4 natural)

(declare-const o5 Bool)

(declare-const o6 natural)

(declare-const o7 Bool)

(declare-const discr__r5__d1__assume natural)

(declare-const discr__r5__d1__assume1 Bool)

(declare-const o8 natural)

(declare-const o9 natural)

(declare-const discr__r5__d2__assume natural)

(declare-const discr__r5__d2__assume1 Bool)

(declare-const usq_ natural)

(declare-const usq_1 Bool)

(declare-const o10 natural)

(declare-const o11 Bool)

(declare-const o12 us_split_fields)

(declare-const temp___295 us_rep1)

(declare-const usq_2 us_rep)

(declare-const o13 us_rep)

(declare-const o14 us_split_fields)

(declare-const temp___299 us_rep1)

(declare-const result us_split_discrs__ref)

(declare-const d2__split_discrs1 us_split_discrs)

(declare-const result1 us_split_fields__ref)

(declare-const h__split_fields2 us_split_fields)

(declare-const result2 us_split_fields__ref)

(declare-const h__split_fields3 us_split_fields)

(define-fun o15 () us_rep (mk___rep (mk___split_discrs o6) o7))

(define-fun o16 () us_rep (mk___rep (mk___split_discrs o4) o5))

;; H
  (assert (in_range c))

;; H
  (assert (and (= us c) (in_range c)))

;; H
  (assert (= (to_rep o) c))

;; H
  (assert (= o o1))

;; H
  (assert (= o2 o1))

;; H
  (assert (= true o3))

;; H
  (assert (= o16 (mk___rep (mk___split_discrs o2) o3)))

;; H
  (assert (= o15 o16))

;; H
  (assert
  (= (mk___rep (mk___split_discrs discr__r5__d1__assume)
     discr__r5__d1__assume1) o15))

;; H
  (assert (= d1__split_discrs (mk___split_discrs discr__r5__d1__assume)))

;; H
  (assert (= d1__attr__constrained true))

;; H
  (assert
  (and (= c (to_rep (rec__discr__with_default__c d1__split_discrs)))
  (= d1__attr__constrained true)))

;; H
  (assert (= (to_rep o8) c))

;; H
  (assert (= o8 o9))

;; H
  (assert (= discr__r5__d2__assume o9))

;; H
  (assert (= true discr__r5__d2__assume1))

;; H
  (assert
  (= result (mk___split_discrs__ref (mk___split_discrs d2__split_discrs))))

;; H
  (assert (= d2__split_discrs1 (mk___split_discrs discr__r5__d2__assume)))

;; H
  (assert (= d2__attr__constrained false))

;; H
  (assert (and (= h__split_fields1 false) (= (to_rep h__split_fields) 0)))

;; H
  (assert (= h__split_fields1 false))

;; H
  (assert (= (to_rep h__split_fields) 0))

;; H
  (assert (not (= h__split_fields1 true)))

;; H
  (assert
  (=> (= h__split_fields1 true)
  (= (rec__discr__with_default__c d1__split_discrs) h__split_fields)))

;; H
  (assert (= d1__split_discrs (mk___split_discrs usq_)))

;; H
  (assert (= d1__attr__constrained usq_1))

;; H
  (assert (= usq_ o10))

;; H
  (assert (= h__split_fields1 o11))

;; H
  (assert (= o12 (mk___split_fields (mk___rep (mk___split_discrs o10) o11))))

;; H
  (assert (= temp___295 (mk___rep1 o12)))

;; H
  (assert
  (= result1 (mk___split_fields__ref
             (mk___split_fields
             (mk___rep (mk___split_discrs h__split_fields) h__split_fields1)))))

;; H
  (assert (= h__split_fields2 (us_split_fields1 temp___295)))

;; H
  (assert
  (not
  (= (attr__constrained (rec__discr__holder__content h__split_fields2)) true)))

;; H
  (assert
  (= (to_rep
     (rec__discr__with_default__c
     (us_split_discrs1 (rec__discr__holder__content h__split_fields2))))
  c))

;; H
  (assert
  (=>
  (= (attr__constrained (rec__discr__holder__content h__split_fields2)) true)
  (= (rec__discr__with_default__c d2__split_discrs1) (rec__discr__with_default__c
                                                     (us_split_discrs1
                                                     (rec__discr__holder__content
                                                     h__split_fields2))))))

;; H
  (assert (= usq_2 (mk___rep d2__split_discrs1 d2__attr__constrained)))

;; H
  (assert
  (= o13 (mk___rep (us_split_discrs1 usq_2)
         (attr__constrained (rec__discr__holder__content h__split_fields2)))))

;; H
  (assert (= o14 (mk___split_fields o13)))

;; H
  (assert (= temp___299 (mk___rep1 o14)))

;; H
  (assert (= result2 (mk___split_fields__ref h__split_fields2)))

;; H
  (assert (= h__split_fields3 (us_split_fields1 temp___299)))

(assert
;; WP_parameter_def
 ;; File "discr.adb", line 34, characters 0-0
  (not
  (not
  (= (attr__constrained (rec__discr__holder__content h__split_fields3)) true))))
(check-sat)
(exit)
