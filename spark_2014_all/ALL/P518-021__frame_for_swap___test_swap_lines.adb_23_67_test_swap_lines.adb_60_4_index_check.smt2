;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort map1 0)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) natural)

(declare-fun set (map1 Int Int natural) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a natural))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a natural))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j)
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_132 Int)
                             (temp___idx_133 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_132)
                             (<= temp___idx_132 a__last))
                             (and (<= a__first_2 temp___idx_133)
                             (<= temp___idx_133 a__last_2)))
                             (= (to_rep
                                (get a temp___idx_132 temp___idx_133))
                             (to_rep
                             (get b (+ (- b__first a__first) temp___idx_132)
                             (+ (- b__first_2 a__first_2) temp___idx_133)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_132 Int) (temp___idx_133 Int))
  (=>
  (and (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (and (<= a__first_2 temp___idx_133) (<= temp___idx_133 a__last_2)))
  (= (to_rep (get a temp___idx_132 temp___idx_133)) (to_rep
                                                    (get b
                                                    (+ (- b__first a__first) temp___idx_132)
                                                    (+ (- b__first_2 a__first_2) temp___idx_133)))))))))))

(declare-sort tTmSP1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tTmSP1 tTmSP1) Bool)

(declare-const dummy2 tTmSP1)

(declare-datatypes ((tTmSP1__ref 0))
(((mk_tTmSP1__ref (tTmSP1__content tTmSP1)))))
(define-fun tTmSP1__ref___projection ((a tTmSP1__ref)) tTmSP1 (tTmSP1__content
                                                              a))

(declare-sort tTmSP2 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tTmSP2 tTmSP2) Bool)

(declare-const dummy3 tTmSP2)

(declare-datatypes ((tTmSP2__ref 0))
(((mk_tTmSP2__ref (tTmSP2__content tTmSP2)))))
(define-fun tTmSP2__ref___projection ((a tTmSP2__ref)) tTmSP2 (tTmSP2__content
                                                              a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const c62b map1)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort t64b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (t64b t64b) Bool)

(declare-const dummy4 t64b)

(declare-datatypes ((t64b__ref 0)) (((mk_t64b__ref (t64b__content t64b)))))
(define-fun t64b__ref___projection ((a t64b__ref)) t64b (t64b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c77b map1)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort t79b 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (t79b t79b) Bool)

(declare-const dummy5 t79b)

(declare-datatypes ((t79b__ref 0)) (((mk_t79b__ref (t79b__content t79b)))))
(define-fun t79b__ref___projection ((a t79b__ref)) t79b (t79b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const c96b map1)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort t98b 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq6 (t98b t98b) Bool)

(declare-const dummy6 t98b)

(declare-datatypes ((t98b__ref 0)) (((mk_t98b__ref (t98b__content t98b)))))
(define-fun t98b__ref___projection ((a t98b__ref)) t98b (t98b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-fun temp___220 (Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___222 Int) (temp___223 Int) (temp___224 Int))
  (let ((temp___221 (temp___220 temp___222 temp___223 temp___224)))
  (forall ((temp___225 Int) (temp___226 Int))
  (ite (= temp___225 7)
  (= (get temp___221 temp___225 temp___226) (of_rep temp___223))
  (ite (= temp___225 5)
  (= (get temp___221 temp___225 temp___226) (of_rep temp___222))
  (= (get temp___221 temp___225 temp___226) (of_rep temp___224))))))))

(declare-fun temp___236 (Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___238 Int) (temp___239 Int) (temp___240 Int))
  (let ((temp___237 (temp___236 temp___238 temp___239 temp___240)))
  (forall ((temp___241 Int) (temp___242 Int))
  (ite (= temp___241 7)
  (= (get temp___237 temp___241 temp___242) (of_rep temp___239))
  (ite (= temp___241 5)
  (= (get temp___237 temp___241 temp___242) (of_rep temp___238))
  (= (get temp___237 temp___241 temp___242) (of_rep temp___240))))))))

(declare-fun temp___254 (Int) map1)

;; def_axiom
  (assert
  (forall ((temp___256 Int))
  (forall ((temp___257 Int) (temp___258 Int))
  (= (get (temp___254 temp___256) temp___257 temp___258) (of_rep temp___256)))))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const m map1)

(declare-const tmp Int)

(declare-const c Int)

(declare-const tmp1 Int)

(declare-const c1 Int)

(declare-const temp___231 Int)

(declare-const temp___230 Int)

(declare-const temp___227 map1)

(declare-const temp___233 map1)

(declare-const temp___232 map1)

(declare-const o natural)

(declare-const o1 map1)

(declare-const o2 natural)

(declare-const o3 map1)

(declare-const i Int)

(declare-const tmp2 Int)

(declare-const result map1)

(declare-const m1 map1)

(declare-const result1 Int)

(declare-const c2 Int)

(declare-const m2 map1)

(declare-const tmp3 Int)

(declare-const c3 Int)

(declare-const result2 Int)

(declare-const tmp4 Int)

(declare-const result3 map1)

(declare-const m3 map1)

(declare-const result4 map1)

(declare-const m4 map1)

(declare-const m5 map1)

(declare-const tmp5 Int)

(declare-const c4 Int)

(declare-const m6 map1)

(declare-const tmp6 Int)

(declare-const c5 Int)

(declare-const m7 map1)

(declare-const tmp7 Int)

(declare-const c6 Int)

(declare-const m8 map1)

(declare-const tmp8 Int)

(declare-const c7 Int)

(declare-const result5 map__ref)

(declare-const m9 map1)

(declare-const result6 int__ref)

(declare-const c8 Int)

(declare-const m10 map1)

(declare-const tmp9 Int)

(declare-const c9 Int)

(define-fun tmp10 () int__ref (mk_int__ref tmp7))

(define-fun m11 () map__ref (mk_map__ref m7))

;; H
  (assert (= result m))

;; H
  (assert (= m1 (temp___220 1 2 0)))

;; H
  (assert (= m1 c62b))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 tmp)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref c)))

;; H
  (assert (= c2 1))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= temp___231 tmp)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= temp___230 c2)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= temp___227 m1)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= temp___233 m1)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= temp___232 m1)))

;; H
  (assert
  (=> (and (<= 1 c2) (<= c2 10))
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 (- c3 1)))
  (and (= (to_rep (get m2 5 i1)) (to_rep (get temp___232 7 i1)))
  (= (to_rep (get m2 7 i1)) (to_rep (get temp___233 5 i1))))))))

;; H
  (assert
  (=> (and (<= 1 c2) (<= c2 10))
  (and
  (and
  (and
  (forall ((temp___228 Int) (temp___229 Int))
  (=>
  (and (and (<= 1 temp___228) (<= temp___228 10))
  (and (<= 1 temp___229) (<= temp___229 10)))
  (=>
  (and (or (<= c3 temp___229) (not (= 5 temp___228)))
  (or (<= c3 temp___229) (not (= 7 temp___228))))
  (= (get m2 temp___228 temp___229) (get temp___227 temp___228 temp___229)))))
  (=> (<= 1 10) (in_range5 c3))) (=> (<= 0 2147483647) (in_range2 tmp3)))
  (and (<= 1 c3) (<= c3 10)))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= tmp3 result2)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= tmp4 (to_rep (get m2 5 c3)))))

;; H
  (assert
  (=> (and (<= 1 c2) (<= c2 10)) (= (to_rep o) (to_rep (get m2 7 c3)))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= o1 (set m2 5 c3 o))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m2 result3)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m3 o1)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= (to_rep o2) tmp4)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= o3 (set m3 7 c3 o2))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m3 result4)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m4 o3)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= c3 10)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= c3 c4)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= tmp4 tmp5)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m4 m5)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= c5 c3)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= tmp6 tmp4)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m6 m4)))

;; H
  (assert
  (=> (and (<= 1 c2) (<= c2 10)) (= (mk_int__ref c6) (mk_int__ref c4))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= tmp10 (mk_int__ref tmp5))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m11 (mk_map__ref m5))))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= c7 c5)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= tmp8 tmp6)))

;; H
  (assert (=> (and (<= 1 c2) (<= c2 10)) (= m8 m6)))

;; H
  (assert (=> (not (and (<= 1 c2) (<= c2 10))) (= c2 c6)))

;; H
  (assert (=> (not (and (<= 1 c2) (<= c2 10))) (= tmp10 (mk_int__ref tmp))))

;; H
  (assert (=> (not (and (<= 1 c2) (<= c2 10))) (= m1 m7)))

;; H
  (assert (=> (not (and (<= 1 c2) (<= c2 10))) (= c7 c2)))

;; H
  (assert (=> (not (and (<= 1 c2) (<= c2 10))) (= tmp8 tmp2)))

;; H
  (assert (=> (not (and (<= 1 c2) (<= c2 10))) (= m8 m1)))

;; H
  (assert
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 10))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 10))
  (ite (= i1 5) (= (to_rep (get m7 i1 j)) 2)
  (ite (= i1 7) (= (to_rep (get m7 i1 j)) 1) (= (to_rep (get m7 i1 j)) 0))))))))

;; H
  (assert (= result5 m11))

;; H
  (assert (= m9 (temp___236 1 2 0)))

;; H
  (assert (= m9 c77b))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 tmp1)))

;; H
  (assert (= result6 (mk_int__ref c1)))

;; H
  (assert (= c8 0))

;; H
  (assert (<= 0 c8))

;; H
  (assert (<= c8 9))

;; H
  (assert
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 c9))
  (and (= (to_rep (get m10 5 i1)) (to_rep (get m9 7 i1)))
  (= (to_rep (get m10 7 i1)) (to_rep (get m9 5 i1)))))))

;; H
  (assert
  (forall ((i1 Int))
  (=> (and (<= (+ c9 1) i1) (<= i1 10))
  (and (= (to_rep (get m10 5 i1)) (to_rep (get m9 5 i1)))
  (= (to_rep (get m10 7 i1)) (to_rep (get m9 7 i1)))))))

;; H
  (assert
  (and
  (and
  (and (=> (<= 0 9) (in_range6 c9)) (=> (<= 0 2147483647) (in_range2 tmp9)))
  (forall ((temp___246 Int) (temp___247 Int))
  (=>
  (and (and (<= 1 temp___246) (<= temp___246 10))
  (and (<= 1 temp___247) (<= temp___247 10)))
  (=> (and (not (= 7 temp___246)) (not (= 5 temp___246)))
  (= (get m10 temp___246 temp___247) (get m9 temp___246 temp___247))))))
  (and (<= 0 c9) (<= c9 9))))

;; H
  (assert (<= 1 i))

;; H
  (assert (<= i c9))

(assert
;; WP_parameter_def
 ;; File "test_swap_lines.adb", line 1, characters 0-0
  (not (<= 1 i)))
(check-sat)
(exit)
