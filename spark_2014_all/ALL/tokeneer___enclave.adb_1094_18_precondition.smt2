;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort privileget 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (privileget privileget) Bool)

(declare-const dummy4 privileget)

(declare-datatypes ((privileget__ref 0))
(((mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget
  (privileget__content a))

(declare-fun to_rep2 (privileget) Int)

(declare-fun of_rep2 (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort opandnullt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (opandnullt opandnullt) Bool)

(declare-const dummy5 opandnullt)

(declare-datatypes ((opandnullt__ref 0))
(((mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt
  (opandnullt__content a))

(declare-fun to_rep3 (opandnullt) Int)

(declare-fun of_rep3 (Int) opandnullt)

;; inversion_axiom
  (assert
  (forall ((x opandnullt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x opandnullt)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__admin__t__rolepresent privileget)(rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget
  (rec__admin__t__rolepresent a))

(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt
  (rec__admin__t__currentop a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__admin__t__rolepresent (us_split_fields1 a)))
                        (to_rep2
                        (rec__admin__t__rolepresent (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__admin__t__currentop (us_split_fields1 a)))
                        (to_rep3
                        (rec__admin__t__currentop (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const admin__t__rolepresent__first__bit Int)

(declare-const admin__t__rolepresent__last__bit Int)

(declare-const admin__t__rolepresent__position Int)

;; admin__t__rolepresent__first__bit_axiom
  (assert (<= 0 admin__t__rolepresent__first__bit))

;; admin__t__rolepresent__last__bit_axiom
  (assert
  (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))

;; admin__t__rolepresent__position_axiom
  (assert (<= 0 admin__t__rolepresent__position))

(declare-const admin__t__currentop__first__bit Int)

(declare-const admin__t__currentop__last__bit Int)

(declare-const admin__t__currentop__position Int)

;; admin__t__currentop__first__bit_axiom
  (assert (<= 0 admin__t__currentop__first__bit))

;; admin__t__currentop__last__bit_axiom
  (assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))

;; admin__t__currentop__position_axiom
  (assert (<= 0 admin__t__currentop__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun rolepresent (us_rep) Int)

(declare-fun rolepresent__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 3)) (in_range4 temp___expr_179)))

;; rolepresent__post_axiom
  (assert
  (forall ((theadmin us_rep)) (! (dynamic_invariant (rolepresent theadmin)
  true false true) :pattern ((rolepresent theadmin)) )))

(declare-fun isdoingop (us_rep) Bool)

(declare-fun isdoingop__function_guard (Bool us_rep) Bool)

;; isdoingop__post_axiom
  (assert true)

(declare-fun thecurrentop (us_rep) Int)

(declare-fun thecurrentop__function_guard (Int us_rep) Bool)

(declare-sort opt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (opt opt) Bool)

(declare-const dummy7 opt)

(declare-datatypes ((opt__ref 0)) (((mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(define-fun dynamic_invariant1 ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= 1 4)) (in_range6 temp___expr_267)))

;; thecurrentop__post_axiom
  (assert
  (forall ((theadmin us_rep))
  (! (=> (= (isdoingop theadmin) true) (dynamic_invariant1
     (thecurrentop theadmin) true false true)) :pattern ((thecurrentop
                                                         theadmin)) )))

(declare-fun ispresent (us_rep) Bool)

(declare-fun ispresent__function_guard (Bool us_rep) Bool)

(declare-sort descriptioni 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 150)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (descriptioni descriptioni) Bool)

(declare-const dummy8 descriptioni)

(declare-datatypes ((descriptioni__ref 0))
(((mk_descriptioni__ref (descriptioni__content descriptioni)))))
(define-fun descriptioni__ref___projection ((a descriptioni__ref)) descriptioni
  (descriptioni__content a))

(declare-const nodescription (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___156 Int))
  (forall ((temp___157 Int))
  (= (select (audittypes__nodescription__aggregate_def temp___156) temp___157)
  (of_rep temp___156)))))

(declare-sort yearst 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (yearst yearst) Bool)

(declare-const dummy9 yearst)

(declare-datatypes ((yearst__ref 0))
(((mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep4 (yearst) Int)

(declare-fun of_rep4 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range8 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort monthst 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (monthst monthst) Bool)

(declare-const dummy10 monthst)

(declare-datatypes ((monthst__ref 0))
(((mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep5 (monthst) Int)

(declare-fun of_rep5 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range9 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort dayst 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (dayst dayst) Bool)

(declare-const dummy11 dayst)

(declare-datatypes ((dayst__ref 0))
(((mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep6 (dayst) Int)

(declare-fun of_rep6 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range10 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(declare-sort millisecst 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (millisecst millisecst) Bool)

(declare-const dummy12 millisecst)

(declare-datatypes ((millisecst__ref 0))
(((mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst
  (millisecst__content a))

(declare-fun to_rep7 (millisecst) Int)

(declare-fun of_rep7 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range11
  (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields2)) yearst
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields2)) monthst
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields2)) dayst
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields2)) millisecst
  (rec__clock__timet__millisec a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep4
                            (rec__clock__timet__year (us_split_fields3 a)))
                         (to_rep4
                         (rec__clock__timet__year (us_split_fields3 b))))
                         (= (to_rep5
                            (rec__clock__timet__month (us_split_fields3 a)))
                         (to_rep5
                         (rec__clock__timet__month (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__clock__timet__day (us_split_fields3 a)))
                         (to_rep6
                         (rec__clock__timet__day (us_split_fields3 b)))))
                         (= (to_rep7
                            (rec__clock__timet__millisec
                            (us_split_fields3 a))) (to_rep7
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ((timet__ref 0))
(((mk_timet__ref (timet__content us_rep1)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep1 (timet__content
                                                             a))

(declare-fun thecurrenttime (us_private) us_rep1)

(declare-fun thecurrenttime__function_guard (us_rep1 us_private) Bool)

;; thecurrenttime__post_axiom
  (assert true)

(declare-fun greaterthanorequal (us_rep1 us_rep1) Bool)

(declare-fun greaterthanorequal__function_guard (Bool us_rep1 us_rep1) Bool)

;; greaterthanorequal__post_axiom
  (assert true)

(declare-fun valid_numberlogentries (us_private) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool us_private) Bool)

(declare-fun theauthcertrole (us_private) Int)

(declare-fun theauthcertrole__function_guard (Int us_private) Bool)

;; theauthcertrole__post_axiom
  (assert
  (forall ((admintoken__state us_private)) (! (dynamic_invariant
  (theauthcertrole admintoken__state) true false
  true) :pattern ((theauthcertrole admintoken__state)) )))

(declare-fun isgood (us_private) Bool)

(declare-fun isgood__function_guard (Bool us_private) Bool)

;; isgood__post_axiom
  (assert true)

(declare-fun authcertvalid (us_private) Bool)

(declare-fun authcertvalid__function_guard (Bool us_private) Bool)

;; authcertvalid__post_axiom
  (assert true)

(declare-fun extractuser (us_private) (Array Int character))

(declare-fun extractuser__function_guard ((Array Int character)
  us_private) Bool)

;; extractuser__post_axiom
  (assert true)

(declare-fun islocked (us_private) Bool)

(declare-fun islocked__function_guard (Bool us_private) Bool)

;; islocked__post_axiom
  (assert true)

(declare-fun alarm_timeout (us_private) us_rep1)

(declare-fun alarm_timeout__function_guard (us_rep1 us_private) Bool)

;; alarm_timeout__post_axiom
  (assert true)

(declare-fun thecurrentdoor (us_private) Int)

(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)

(declare-sort t1 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq14 (t1 t1) Bool)

(declare-const dummy14 t1)

(declare-datatypes ((t__ref1 0)) (((mk_t__ref1 (t__content1 t1)))))
(define-fun t__ref___4__projection ((a t__ref1)) t1 (t__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_1036 Int)
  (temp___is_init_1033 Bool) (temp___skip_constant_1034 Bool)
  (temp___do_toplevel_1035 Bool)) Bool (=>
                                       (or (= temp___is_init_1033 true)
                                       (<= 0 1)) (in_range12
                                       temp___expr_1036)))

;; thecurrentdoor__post_axiom
  (assert
  (forall ((door__state us_private)) (! (dynamic_invariant2
  (thecurrentdoor door__state) true false
  true) :pattern ((thecurrentdoor door__state)) )))

(declare-fun thedooralarm (us_private) Int)

(declare-fun thedooralarm__function_guard (Int us_private) Bool)

(declare-sort statust 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq15 (statust statust) Bool)

(declare-const dummy15 statust)

(declare-datatypes ((statust__ref 0))
(((mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content
                                                                 a))

(define-fun dynamic_invariant3 ((temp___expr_306 Int)
  (temp___is_init_303 Bool) (temp___skip_constant_304 Bool)
  (temp___do_toplevel_305 Bool)) Bool (=>
                                      (or (= temp___is_init_303 true)
                                      (<= 0 1)) (in_range13 temp___expr_306)))

;; thedooralarm__post_axiom
  (assert
  (forall ((door__state us_private)) (! (dynamic_invariant3
  (thedooralarm door__state) true false
  true) :pattern ((thedooralarm door__state)) )))

(declare-fun latch_timeout (us_private) us_rep1)

(declare-fun latch_timeout__function_guard (us_rep1 us_private) Bool)

(declare-sort statust1 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq16 (statust1 statust1) Bool)

(declare-const dummy16 statust1)

(declare-datatypes ((statust__ref1 0))
(((mk_statust__ref1 (statust__content1 statust1)))))
(define-fun statust__ref___2__projection ((a statust__ref1)) statust1
  (statust__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_1792 Int)
  (temp___is_init_1789 Bool) (temp___skip_constant_1790 Bool)
  (temp___do_toplevel_1791 Bool)) Bool (=>
                                       (or (= temp___is_init_1789 true)
                                       (<= 0 8)) (in_range14
                                       temp___expr_1792)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant8 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant9 ((temp___expr_261 Int)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (or (= temp___is_init_258 true)
                                      (<= 0 4)) (in_range5 temp___expr_261)))

;; ispresent__post_axiom
  (assert true)

;; valid_numberlogentries__post_axiom
  (assert true)

(define-fun dynamic_invariant10 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 1 150)) (in_range7
                                      temp___expr_324)))

;; nodescription__def_axiom
  (assert (= nodescription (audittypes__nodescription__aggregate_def 32)))

(define-fun dynamic_invariant11 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 1901 2099)) (in_range8
                                      temp___expr_366)))

(define-fun dynamic_invariant12 ((temp___expr_372 Int)
  (temp___is_init_369 Bool) (temp___skip_constant_370 Bool)
  (temp___do_toplevel_371 Bool)) Bool (=>
                                      (or (= temp___is_init_369 true)
                                      (<= 1 12)) (in_range9 temp___expr_372)))

(define-fun dynamic_invariant13 ((temp___expr_378 Int)
  (temp___is_init_375 Bool) (temp___skip_constant_376 Bool)
  (temp___do_toplevel_377 Bool)) Bool (=>
                                      (or (= temp___is_init_375 true)
                                      (<= 1 31)) (in_range10
                                      temp___expr_378)))

(define-fun dynamic_invariant14 ((temp___expr_402 Int)
  (temp___is_init_399 Bool) (temp___skip_constant_400 Bool)
  (temp___do_toplevel_401 Bool)) Bool (=>
                                      (or (= temp___is_init_399 true)
                                      (<= 0 86399999)) (in_range11
                                      temp___expr_402)))

;; latch_timeout__post_axiom
  (assert true)

(declare-const currenttime us_private)

(declare-const state us_private)

(declare-const state1 us_private)

(declare-const status Int)

(declare-const theadmin__split_fields privileget)

(declare-const theadmin__split_fields1 opandnullt)

(declare-const o (Array Int character))

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Bool)

(declare-const o4 Bool)

(declare-const o5 Bool)

(declare-const o6 Bool)

(declare-const o7 Bool)

(declare-const o8 Bool)

(declare-const o9 Bool)

(declare-const o10 Bool)

(declare-const o11 Int)

(declare-const o12 Bool)

(declare-const o13 Bool)

(declare-const o14 Bool)

(declare-const state2 us_private)

(declare-const state3 us_private)

(declare-const state4 us_private)

(declare-const result Int)

(declare-const status1 Int)

(declare-const filestate us_private)

(declare-const state5 us_private)

(declare-const state6 us_private)

(declare-const state7 us_private)

(declare-const theadmin__split_fields2 privileget)

(declare-const theadmin__split_fields3 opandnullt)

(declare-const filestate1 us_private)

(declare-const state8 us_private)

(declare-const state9 us_private)

(declare-const state10 us_private)

(declare-const state11 us_private)

(declare-const state12 us_private)

(declare-const status2 Int)

(declare-const theadmin__split_fields4 privileget)

(declare-const theadmin__split_fields5 opandnullt)

(declare-const filestate2 us_private)

(declare-const state13 us_private)

(declare-const state14 us_private)

(declare-const state15 us_private)

(declare-const state16 us_private)

(declare-const state17 us_private)

(declare-const status3 Int)

(declare-const theadmin__split_fields6 us_split_fields)

(declare-const result1 Bool)

(declare-const result2 Bool)

(define-fun theadmin__split_fields7 () us_split_fields (mk___split_fields
                                                       theadmin__split_fields2
                                                       theadmin__split_fields3))

;; H
  (assert (= (audittypes__nodescription__aggregate_def 32) nodescription))

;; H
  (assert (=> (<= 0 8) (in_range14 status)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (and (and (= (isgood state) true) (= (authcertvalid state) true))
  (= (theauthcertrole state) 1))))
  (=>
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (or
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))))

;; H
  (assert (= o (extractuser state)))

;; H
  (assert (= (valid_numberlogentries state2) true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref status)))

;; H
  (assert (= status1 3))

;; H
  (assert
  (and
  (=
  (and (and (= (islocked state6) true) (= (thecurrentdoor state7) 0))
  (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state7)) true))
  (= (thedooralarm state7) 0))
  (= (= (islocked state6) true)
  (= (greaterthanorequal (thecurrenttime currenttime) (latch_timeout state6)) true))))

;; H
  (assert
  (and
  (and (not (= (isdoingop (mk___rep theadmin__split_fields7)) true))
  (= (rolepresent (mk___rep theadmin__split_fields7)) (rolepresent
                                                      (mk___rep
                                                      (mk___split_fields
                                                      theadmin__split_fields
                                                      theadmin__split_fields1)))))
  (= (ispresent (mk___rep theadmin__split_fields7)) true)))

;; H
  (assert (= theadmin__split_fields4 theadmin__split_fields2))

;; H
  (assert (= theadmin__split_fields5 theadmin__split_fields3))

;; H
  (assert (= status1 status2))

;; H
  (assert (= state3 state12))

;; H
  (assert (= state4 state11))

;; H
  (assert (= state7 state10))

;; H
  (assert (= state6 state9))

;; H
  (assert (= state5 state8))

;; H
  (assert (= filestate filestate1))

;; H
  (assert (= theadmin__split_fields6 theadmin__split_fields7))

;; H
  (assert (= status3 status1))

;; H
  (assert (= state17 state3))

;; H
  (assert (= state16 state4))

;; H
  (assert (= state15 state7))

;; H
  (assert (= state14 state6))

;; H
  (assert (= state13 state5))

;; H
  (assert (= filestate2 filestate))

;; H
  (assert (= o9 (islocked state9)))

;; H
  (assert (= o10 (ite (not (= o9 true)) true false)))

;; H
  (assert (= result1 (ite (= o10 true) (islocked state1) false)))

;; H
  (assert
  (=> (= result1 true)
  (and
  (= o11 (thecurrentop
         (mk___rep
         (mk___split_fields theadmin__split_fields theadmin__split_fields1))))
  (in_range6 o11))))

;; H
  (assert (=> (= result1 true) (= o12 (ite (= o11 3) true false))))

;; H
  (assert
  (=> (= result1 true)
  (= o13 (isdoingop
         (mk___rep
         (mk___split_fields theadmin__split_fields theadmin__split_fields1))))))

;; H
  (assert (=> (= result1 true) (= o14 (ite (= o13 true) o12 false))))

;; H
  (assert (=> (not (= result1 true)) (= o14 (of_int 1))))

;; H
  (assert
  (and
  (= o1 (rolepresent
        (mk___rep
        (mk___split_fields theadmin__split_fields4 theadmin__split_fields5))))
  (in_range4 o1)))

;; H
  (assert (= result2 (ite (= o1 1) true false)))

;; H
  (assert
  (=> (= result2 true)
  (= o5 (isdoingop
        (mk___rep
        (mk___split_fields theadmin__split_fields4 theadmin__split_fields5))))))

;; H
  (assert (=> (= result2 true) (= o6 (ite (not (= o5 true)) true false))))

;; H
  (assert
  (=> (= result2 true)
  (and
  (= o2 (thecurrentop
        (mk___rep
        (mk___split_fields theadmin__split_fields4 theadmin__split_fields5))))
  (in_range6 o2))))

;; H
  (assert (=> (= result2 true) (= o3 (ite (= o2 3) true false))))

;; H
  (assert
  (=> (= result2 true)
  (= o4 (isdoingop
        (mk___rep
        (mk___split_fields theadmin__split_fields4 theadmin__split_fields5))))))

;; H
  (assert (=> (= result2 true) (= o7 (ite (= o4 true) o3 false))))

;; H
  (assert (=> (= result2 true) (= o8 (ite (= o7 false) o6 true))))

;; H
  (assert (=> (not (= result2 true)) (= o8 (of_int 1))))

(assert
;; WP_parameter_def
 ;; File "enclave.adb", line 910, characters 0-0
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields4 theadmin__split_fields5))) true)))
(check-sat)
(exit)
