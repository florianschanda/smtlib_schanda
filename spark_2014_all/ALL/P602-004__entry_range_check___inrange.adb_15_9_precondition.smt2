;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort int20 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (int20 int20) Bool)

(declare-const dummy int20)

(declare-datatypes () ((int20__ref (mk_int20__ref (int20__content int20)))))
(define-fun int20__ref___projection ((a int20__ref)) int20 (int20__content a))

(declare-sort int10 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (int10 int10) Bool)

(declare-const dummy1 int10)

(declare-datatypes () ((int10__ref (mk_int10__ref (int10__content int10)))))
(define-fun int10__ref___projection ((a int10__ref)) int10 (int10__content a))

(define-fun dynamic_invariant ((temp___expr_177 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (or (= temp___is_init_174 true)
                                      (<= 1 10)) (in_range1 temp___expr_177)))

(declare-sort pt 0)

(declare-fun user_eq2 (pt pt) Bool)

(declare-const value__size Int)

(declare-fun object__size (pt) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (pt) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a pt)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a pt)) (<= 0 (object__alignment a))))

(declare-datatypes () ((pt__ref (mk_pt__ref (pt__content pt)))))
(define-fun pt__ref___projection ((a pt__ref)) pt (pt__content a))

(define-fun dynamic_invariant1 ((temp___expr_171 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (<= 1 20)) (in_range temp___expr_171)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x Int)

(declare-const y Int)

(declare-const o Int)

(declare-const inrange__pt__add_out__i Int)

(declare-const o1 pt)

(declare-const us_self__compl pt)

(declare-const result Int)

(declare-const x1 Int)

(declare-const result1 Int)

(declare-const y1 Int)

(declare-const po pt)

;; H
  (assert (= result x))

;; H
  (assert (= x1 10))

;; H
  (assert (in_range1 x1))

;; H
  (assert (= result1 y))

;; H
  (assert (= y1 10))

;; H
  (assert (in_range1 y1))

;; H
  (assert (and (= o x1) (in_range x1)))

;; H
  (assert (= o inrange__pt__add_out__i))

;; H
  (assert (= o1 po))

;; H
  (assert (= o1 us_self__compl))

(assert
;; WP_parameter_def
 ;; File "inrange.ads", line 6, characters 0-0
  (not (<= inrange__pt__add_out__i 10)))
(check-sat)
(exit)
