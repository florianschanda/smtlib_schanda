(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

axiom Power_non_neg :
  (forall x:int. forall y:int. (((0 <= x) and (0 <= y)) -> (0 <= power(x,
  y))))

axiom Power_monotonic :
  (forall x:int. forall n:int. forall m:int. (((0 <  x) and ((0 <= n) and
  (n <= m))) -> (power(x, n) <= power(x, m))))

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_01 : (pow2(0) = 1)

axiom Power_s1 :
  (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_11 : (pow2(1) = 2)

axiom Power_sum1 :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int : t -> int

logic of_int : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power1 : t, int -> t

axiom Power_02 : (forall x:t. (power1(x, 0) = one))

axiom Power_12 : (forall x:t. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t. forall n:int. ((0 <  n) -> (power1(x, n) = mul(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power1(mul(x, y),
  n) = mul(power1(x, n), power1(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic to_int1 : t1 -> int

logic of_int1 : int -> t1

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power2 : t1, int -> t1

axiom Power_03 : (forall x:t1. (power2(x, 0) = one1))

axiom Power_13 : (forall x:t1. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul1(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power2(x, n) = mul1(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul1(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power2(mul1(x, y),
  n) = mul1(power2(x, n), power2(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic to_int2 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type word32

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : word32, word32 -> bool

logic dummy2 : word32

type word32__ref = { word32__content : word32
}

function word32__ref___projection(a: word32__ref) : word32 =
  (a).word32__content

logic to_rep1 : word32 -> t

logic of_rep1 : t -> word32

axiom inversion_axiom1 :
  (forall x:word32 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int3(x: word32) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:word32 [to_int3(x)]. uint_in_range(to_int3(x)))

type word64

logic attr__ATTRIBUTE_MODULUS1 : t1

logic bool_eq7 : t1, t1 -> bool

axiom bool_eq_def6 :
  (forall x:t1. forall y:t1 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq3 : word64, word64 -> bool

logic dummy3 : word64

type word64__ref = { word64__content : word64
}

function word64__ref___projection(a: word64__ref) : word64 =
  (a).word64__content

type map__ref = { map__content : (int,word32) farray
}

logic slide : (int,word32) farray, int, int -> (int,word32) farray

axiom slide_eq :
  (forall a:(int,word32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,word32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,word32) farray, int, int, (int,word32) farray, int,
  int -> (int,word32) farray

axiom concat_def :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : word32, int -> (int,word32) farray

axiom singleton_def :
  (forall v:word32.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq8 : (int,word32) farray, int, int, (int,word32) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,word32) farray. forall a__first:int. forall a__last:int.
  forall b:(int,word32) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep1((a[temp___idx_134])) = to_rep1((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep1((a[temp___idx_134])) = to_rep1((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep1((a[temp___idx_134])) = to_rep1((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,word32) farray, int, int, (int,word32) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep1((a[(i + 1)])), to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep1((a[(j + 1)])), to_rep1((b[(i + 1)]))))))))))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq9 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type math_int__ref = { math_int__content : us_rep
}

function math_int__ref___projection(a: math_int__ref) : us_rep =
  (a).math_int__content

logic oadd : us_rep, us_rep -> us_rep

logic oadd__function_guard : us_rep, us_rep, us_rep -> prop

axiom oadd__post_axiom : true

logic osubtract : us_rep, us_rep -> us_rep

logic osubtract__function_guard : us_rep, us_rep, us_rep -> prop

axiom osubtract__post_axiom : true

logic omultiply : us_rep, us_rep -> us_rep

logic omultiply__function_guard : us_rep, us_rep, us_rep -> prop

axiom omultiply__post_axiom : true

logic odivide : us_rep, us_rep -> us_rep

logic odivide__function_guard : us_rep, us_rep, us_rep -> prop

axiom odivide__post_axiom : true

logic omod : us_rep, us_rep -> us_rep

logic omod__function_guard : us_rep, us_rep, us_rep -> prop

axiom omod__post_axiom : true

logic oexpon : us_rep, int -> us_rep

logic oexpon__function_guard : us_rep, us_rep, int -> prop

axiom oexpon__post_axiom : true

logic oexpon__2 : us_rep, us_rep -> us_rep

logic oexpon__2__function_guard : us_rep, us_rep, us_rep -> prop

axiom oexpon__2__post_axiom : true

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom oeq__post_axiom : true

logic olt : us_rep, us_rep -> bool

logic olt__function_guard : bool, us_rep, us_rep -> prop

axiom olt__post_axiom : true

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

axiom ole__post_axiom : true

logic from_integer : int -> us_rep

logic from_integer__function_guard : us_rep, int -> prop

axiom from_integer__post_axiom : true

logic from_word32 : t -> us_rep

logic from_word32__function_guard : us_rep, t -> prop

axiom from_word32__post_axiom : true

logic from_word64 : t1 -> us_rep

logic from_word64__function_guard : us_rep, t1 -> prop

axiom from_word64__post_axiom : true

logic base : unit -> us_rep

logic base__function_guard : us_rep, unit -> prop

axiom base__post_axiom : true

axiom base__def_axiom : (base(void) = oexpon(from_word32(of_int(2)), 32))

type big_int_range

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483646))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : big_int_range, big_int_range -> bool

logic dummy5 : big_int_range

type big_int_range__ref = { big_int_range__content : big_int_range
}

function big_int_range__ref___projection(a: big_int_range__ref) : big_int_range =
  (a).big_int_range__content

type t2

logic first : t2 -> integer

logic last : t2 -> integer

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,word32) farray; rt : t2
}

function to_array(a: us_t) : (int,word32) farray = (a).elts

function of_array(a: (int,word32) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,word32) farray -> int

logic value__component__size : int

logic object__component__size : (int,word32) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,word32) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,word32) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,word32) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,word32) farray. (0 <= object__alignment1(a)))

function bool_eq11(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : (int,word32) farray

logic dummy7 : t2

type big_int__ref = { big_int__content : us_t
}

function big_int__ref___projection(a: big_int__ref) : us_t =
  (a).big_int__content

logic num_of_big_int : us_t, int, int -> us_rep

logic num_of_big_int__function_guard : us_rep, us_t, int, int -> prop

axiom num_of_big_int__post_axiom : true

logic inverse : us_rep, us_rep -> us_rep

logic inverse__function_guard : us_rep, us_rep, us_rep -> prop

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic a_first : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic a_last : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic x : (int,word32) farray

logic x1 : t2

logic attr__ATTRIBUTE_ADDRESS3 : int

logic x_first : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic e : (int,word32) farray

logic e1 : t2

logic attr__ATTRIBUTE_ADDRESS5 : int

logic e_first : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic e_last : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic m : (int,word32) farray

logic m1 : t2

logic attr__ATTRIBUTE_ADDRESS8 : int

logic m_first : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic aux1__first : integer

logic aux1__last : integer

logic attr__ATTRIBUTE_ADDRESS11 : int

logic aux1_first : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic aux2__first : integer

logic aux2__last : integer

logic attr__ATTRIBUTE_ADDRESS13 : int

logic aux2_first : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic aux3__first : integer

logic aux3__last : integer

logic attr__ATTRIBUTE_ADDRESS15 : int

logic aux3_first : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic aux4__first : integer

logic aux4__last : integer

logic attr__ATTRIBUTE_ADDRESS17 : int

logic aux4_first : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic r : (int,word32) farray

logic r1 : t2

logic attr__ATTRIBUTE_ADDRESS19 : int

logic r_first : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic m_inv : t

logic attr__ATTRIBUTE_ADDRESS21 : int

logic bit_set : us_t, int, t1 -> bool

logic bit_set__function_guard : bool, us_t, int, t1 -> prop

axiom bit_set__post_axiom :
  (forall a:(int,word32) farray. forall a1:t2.
  (forall a_first1:int.
  (forall i:t1 [bit_set({ elts = a; rt = a1 }, a_first1, i)].
  ((in_range2(a_first1) and (((to_rep(first(a1)) <= a_first1) and
  (a_first1 <= to_rep(last(a1)))) and ule1(udiv1(i, of_int1(32)),
  of_int1((to_rep(last(a1)) - a_first1))))) -> (((bit_set({ elts = a; rt = a1
  }, a_first1, i) = true) -> (not (((tqtint1(urem1(i,
  of_int1(32))) <  4294967296) and
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i, of_int1(32)))))) = of_int(0))) or
  ((not (tqtint1(urem1(i, of_int1(32))) <  4294967296)) and
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  of_int(0)) = of_int(0)))))) and ((not (((tqtint1(urem1(i,
  of_int1(32))) <  4294967296) ->
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i,
  of_int1(32)))))) = of_int(0))) and ((not (tqtint1(urem1(i,
  of_int1(32))) <  4294967296)) ->
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  of_int(0)) = of_int(0))))) -> (bit_set({ elts = a; rt = a1 }, a_first1,
  i) = true)))))))

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic attr__ATTRIBUTE_ADDRESS26 : int

predicate dynamic_property1(first_int: int, last_int: int, x2: int) =
  ((first_int <= x2) and (x2 <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x2:int. forall y:int [bool_eq12(x2, y)]. (((x2 = y) ->
  (bool_eq12(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq12(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type t79b__ref = { t79b__content : integer
}

function t79b__ref___projection(a: t79b__ref) : integer = (a).t79b__content

logic attr__ATTRIBUTE_ADDRESS27 : int

logic r94b : int

logic attr__ATTRIBUTE_ADDRESS28 : int

predicate dynamic_property2(first_int: int, last_int: int, x2: int) =
  ((first_int <= x2) and (x2 <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x2:int. forall y:int [bool_eq13(x2, y)]. (((x2 = y) ->
  (bool_eq13(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq13(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy9 : integer

type t95b__ref = { t95b__content : integer
}

function t95b__ref___projection(a: t95b__ref) : integer = (a).t95b__content

logic attr__ATTRIBUTE_ADDRESS29 : int

axiom inverse__post_axiom : true

 (* File "lsc-bignum.ads", line 141, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,word32) farray. forall j:int. forall l:int. forall s:int.
  forall i:t1. forall h:int. forall o:int. forall o1:int.
  forall temp___638:int. forall temp___636:int.
  forall temp___633:(int,word32) farray.
  forall temp___631:(int,word32) farray. forall o2:int. forall o3:int.
  forall o4:t1. forall o5:t1. forall o6:t1. forall o7:t1.
  forall temp___645:int. forall temp___644:int. forall temp___643:t.
  forall o8:int. forall o9:int. forall o10:int. forall o11:int.
  forall o12:int. forall o13:us_rep. forall o14:us_rep. forall o15:us_rep.
  forall o16:us_rep. forall o17:us_rep. forall o18:us_rep. forall o19:us_rep.
  forall o20:us_rep. forall o21:us_rep. forall o22:us_rep. forall o23:us_rep.
  forall o24:int. forall o25:us_rep. forall o26:int. forall o27:us_rep.
  forall n:int. forall o28:int. forall o29:int. forall o30:int.
  forall o31:bool. forall o32:bool. forall o33:us_rep. forall o34:int.
  forall o35:int. forall o36:int. forall o37:int. forall o38:us_rep.
  forall o39:us_rep. forall o40:us_rep. forall o41:us_rep. forall o42:us_rep.
  forall o43:us_rep. forall o44:us_rep. forall o45:us_rep. forall o46:us_rep.
  forall o47:us_rep. forall o48:us_rep. forall o49:us_rep. forall o50:bool.
  forall o51:int. forall o52:bool. forall o53:us_rep. forall o54:us_rep.
  forall o55:us_rep. forall o56:us_rep. forall o57:bool. forall o58:int.
  forall o59:int. forall o60:t1. forall o61:t1. forall o62:t1.
  forall o63:bool. forall a1:(int,word32) farray. forall l1:int.
  forall aux1:(int,word32) farray. forall aux3:(int,word32) farray.
  forall aux4:(int,word32) farray. forall aux2:(int,word32) farray.
  forall result:int. forall h1:int. forall aux41:(int,word32) farray.
  forall h2:int. forall a2:(int,word32) farray.
  forall aux42:(int,word32) farray. forall a3:(int,word32) farray.
  forall aux43:(int,word32) farray. forall h3:int.
  forall a4:(int,word32) farray. forall aux44:(int,word32) farray.
  forall h4:int. forall a5:(int,word32) farray.
  forall aux45:(int,word32) farray. forall h5:int.
  forall a6:(int,word32) farray. forall aux46:(int,word32) farray.
  forall h6:int. forall result1:t1. forall i1:t1.
  forall aux31:(int,word32) farray. forall j1:int. forall s1:int.
  forall i2:t1. forall w:t. forall h7:int. forall result2:bool.
  forall result3:t. forall w1:t. forall result4:int. forall s2:int.
  forall result5:int. forall j2:int. forall j3:int. forall s3:int.
  forall w2:t. forall j4:int. forall s4:int. forall w3:t. forall j5:int.
  forall s5:int. forall w4:t. forall j6:int__ref. forall s6:int__ref.
  forall w5:t__ref. forall j7:int. forall s7:int. forall w6:t.
  forall j8:int__ref. forall s8:int__ref. forall w7:t__ref. forall j9:int.
  forall s9:int. forall w8:t. forall result6:int__ref. forall s10:int.
  forall result7:int__ref. forall h8:int. forall aux32:(int,word32) farray.
  forall h9:int. forall result8:bool. (dynamic_property(0, 2147483646,
  to_rep(a__first), to_rep(a__last)) -> (in_range2(a_first) ->
  (in_range2(a_last) -> (dynamic_property(0, 2147483646, to_rep(first(x1)),
  to_rep(last(x1))) -> (in_range2(x_first) -> (dynamic_property(0,
  2147483646, to_rep(first(e1)), to_rep(last(e1))) -> (in_range2(e_first) ->
  (in_range2(e_last) -> (dynamic_property(0, 2147483646, to_rep(first(m1)),
  to_rep(last(m1))) -> (in_range2(m_first) -> (in_range2(k) ->
  (dynamic_property(0, 2147483646, to_rep(aux1__first),
  to_rep(aux1__last)) -> (in_range2(aux1_first) -> (dynamic_property(0,
  2147483646, to_rep(aux2__first), to_rep(aux2__last)) ->
  (in_range2(aux2_first) -> (dynamic_property(0, 2147483646,
  to_rep(aux3__first), to_rep(aux3__last)) -> (in_range2(aux3_first) ->
  (dynamic_property(0, 2147483646, to_rep(aux4__first),
  to_rep(aux4__last)) -> (in_range2(aux4_first) -> (dynamic_property(0,
  2147483646, to_rep(first(r1)), to_rep(last(r1))) -> (in_range2(r_first) ->
  ((((to_rep(a__first) <= a_first) and (a_first <= to_rep(a__last))) and
  (((to_rep(a__first) <= a_last) and (a_last <= to_rep(a__last))) and
  ((a_first <  a_last) and (((to_rep(first(x1)) <= x_first) and
  (x_first <= to_rep(last(x1)))) and
  (((to_rep(first(x1)) <= (x_first + (a_last - a_first))) and
  ((x_first + (a_last - a_first)) <= to_rep(last(x1)))) and
  (((to_rep(first(e1)) <= e_first) and (e_first <= to_rep(last(e1)))) and
  (((to_rep(first(e1)) <= e_last) and (e_last <= to_rep(last(e1)))) and
  ((e_first <= e_last) and (((to_rep(first(m1)) <= m_first) and
  (m_first <= to_rep(last(m1)))) and
  (((to_rep(first(m1)) <= (m_first + (a_last - a_first))) and
  ((m_first + (a_last - a_first)) <= to_rep(last(m1)))) and
  (((to_rep(aux1__first) <= aux1_first) and
  (aux1_first <= to_rep(aux1__last))) and
  (((to_rep(aux1__first) <= (aux1_first + (a_last - a_first))) and
  ((aux1_first + (a_last - a_first)) <= to_rep(aux1__last))) and
  (((to_rep(aux2__first) <= aux2_first) and
  (aux2_first <= to_rep(aux2__last))) and
  (((to_rep(aux2__first) <= (aux2_first + (a_last - a_first))) and
  ((aux2_first + (a_last - a_first)) <= to_rep(aux2__last))) and
  (((to_rep(aux3__first) <= aux3_first) and
  (aux3_first <= to_rep(aux3__last))) and
  (((to_rep(aux3__first) <= (aux3_first + (a_last - a_first))) and
  ((aux3_first + (a_last - a_first)) <= to_rep(aux3__last))) and
  (((to_rep(aux4__first) <= aux4_first) and
  (aux4_first <= to_rep(aux4__last))) and
  (((to_rep(aux4__first) <= (aux4_first + ((power(2,
  k) * ((a_last - a_first) + 1)) - 1))) and ((aux4_first + ((power(2,
  k) * ((a_last - a_first) + 1)) - 1)) <= to_rep(aux4__last))) and
  ((k <= 30) and (((to_rep(first(r1)) <= r_first) and
  (r_first <= to_rep(last(r1)))) and
  (((to_rep(first(r1)) <= (r_first + (a_last - a_first))) and
  ((r_first + (a_last - a_first)) <= to_rep(last(r1)))) and
  ((oeq(num_of_big_int({ elts = r; rt = r1 }, r_first,
  ((a_last - a_first) + 1)), omod(oexpon__2(base(void),
  omultiply(from_integer(2), from_integer(((a_last - a_first) + 1)))),
  num_of_big_int({ elts = m; rt = m1 }, m_first,
  ((a_last - a_first) + 1)))) = true) and ((olt(from_word32(of_int(1)),
  num_of_big_int({ elts = m; rt = m1 }, m_first,
  ((a_last - a_first) + 1))) = true) and (add(of_int(1), mul(m_inv,
  to_rep1((m[m_first])))) = of_int(0))))))))))))))))))))))))) ->
  (((0 <= 2147483647) -> in_range2(j)) -> (((0 <= 2147483647) ->
  in_range2(l)) -> (((0 <= 2147483647) -> in_range2(s)) ->
  ((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts = aux1; rt =
  mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux3; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(oexpon(base(void), (l1 + 1)), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux4; rt =
  mk(to_rep(aux4__first), to_rep(aux4__last)) }, aux4_first, (l1 + 1)),
  omod(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1)),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) -> (((0 <= 2147483647) -> in_range2(l1)) ->
  ((((((o = power(2, k)) and in_range1(power(2, k))) and (o1 = (o - 1))) and
  ((temp___638 = o1) and in_range1(o1))) and ((({ int__content = result } = {
  int__content = h }) and (h1 = 1)) and ((((1 <= h1) and
  (h1 <= temp___638)) and ((((temp___636 = h1) and ((temp___633 = a) and
  ((temp___631 = aux4) and ((((((l1 = (a_last - a_first)) and
  (oeq(num_of_big_int({ elts = aux1; rt = mk(to_rep(aux1__first),
  to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux3; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(oexpon(base(void), (l1 + 1)), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and
  (forall n1:int. (((0 <= n1) and (n1 <= (h2 - 1))) -> (oeq(num_of_big_int({
  elts = aux41; rt = mk(to_rep(aux4__first), to_rep(aux4__last)) },
  (aux4_first + (n1 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n1) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and ((((1 <= (power(2,
  k) - 1)) -> dynamic_property1(1, (power(2, k) - 1), h2)) and ((1 <= h2) and
  (h2 <= (power(2, k) - 1)))) and ((((((l1 = (a_last - a_first)) and
  (oeq(num_of_big_int({ elts = aux1; rt = mk(to_rep(aux1__first),
  to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux3; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(oexpon(base(void), (l1 + 1)), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and
  (forall n1:int. (((0 <= n1) and (n1 <= h2)) -> (oeq(num_of_big_int({ elts =
  aux42; rt = mk(to_rep(aux4__first), to_rep(aux4__last)) },
  (aux4_first + (n1 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n1) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (((0 <= 2147483647) -> in_range2(l1)) and (((1 <= (power(2, k) - 1)) ->
  dynamic_property1(1, (power(2, k) - 1), h2)) and
  (h2 = temp___638))))))))) and (((h2 = h3) and ((aux42 = aux43) and
  (a2 = a3))) and ((h4 = h2) and ((aux44 = aux42) and (a4 = a2))))) and ((({
  int__content = h5 } = { int__content = h3 }) and (({ map__content = aux45
  } = { map__content = aux43 }) and ({ map__content = a5 } = { map__content =
  a3 }))) and ((h6 = h4) and ((aux46 = aux44) and (a6 = a4)))))) or
  ((not ((1 <= h1) and (h1 <= temp___638))) and (((h1 = h5) and
  ((aux4 = aux45) and ({ map__content = a5 } = { map__content = a }))) and
  ((h6 = h1) and ((aux46 = aux4) and (a6 = a1)))))))) ->
  (((((((((o2 = (e_last - e_first)) and in_range1((e_last - e_first))) and
  ((o3 = o2) and uint_in_range1(o2))) and (o4 = of_int1(o3))) and
  (o5 = add1(o4, of_int1(1)))) and (o6 = mul1(o5, of_int1(32)))) and
  (o7 = sub1(o6, of_int1(1)))) and ((result1 = i) and (i1 = o7))) ->
  (((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts = aux1; rt =
  mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux31; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(omultiply(oexpon__2(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), odivide(num_of_big_int({ elts = e; rt = e1 }, e_first,
  ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  oadd(from_word64(i2), from_word32(of_int(1)))))), oexpon(base(void),
  (l1 + 1))), num_of_big_int({ elts = m; rt = m1 }, m_first,
  (l1 + 1)))) = true)) and
  (forall n1:int. (((0 <= n1) and (n1 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux45; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n1 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n1) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32)))) ->
  ((((0 <= 2147483647) -> in_range2(j1)) and ((0 <= 2147483647) ->
  in_range2(s1))) -> (((result2 = bit_set({ elts = e; rt = e1 }, e_first,
  i2)) and (((result2 = true) or (not (((tqtint1(urem1(i2,
  of_int1(32))) <  4294967296) and
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i2,
  of_int1(32)))))) = of_int(0))) or ((not (tqtint1(urem1(i2,
  of_int1(32))) <  4294967296)) and
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  of_int(0)) = of_int(0)))))) -> ((result2 = true) and
  (not (((tqtint1(urem1(i2, of_int1(32))) <  4294967296) ->
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i2,
  of_int1(32)))))) = of_int(0))) and ((not (tqtint1(urem1(i2,
  of_int1(32))) <  4294967296)) ->
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  of_int(0)) = of_int(0)))))))) -> ((result2 = true) -> (((result3 = w) and
  (w1 = of_int(1))) -> (((result4 = s1) and (s2 = 0)) -> (((result5 = j1) and
  (j2 = 1)) -> (((((temp___645 = s2) and ((temp___644 = j2) and
  ((temp___643 = w1) and (((((((((((((l1 = (a_last - a_first)) and
  (oeq(num_of_big_int({ elts = aux1; rt = mk(to_rep(aux1__first),
  to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux31; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(omultiply(oexpon__2(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), odivide(num_of_big_int({ elts = e; rt = e1 }, e_first,
  ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  oadd(from_word64(i2), from_word32(of_int(1)))))), oexpon(base(void),
  (l1 + 1))), num_of_big_int({ elts = m; rt = m1 }, m_first,
  (l1 + 1)))) = true)) and
  (forall n1:int. (((0 <= n1) and (n1 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux45; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n1 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n1) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (oeq(omultiply(from_word32(w2), oexpon(from_word32(of_int(2)),
  ((j3 - s3) - 1))), omod(odivide(num_of_big_int({ elts = e; rt = e1 },
  e_first, ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  osubtract(from_word64(i2), osubtract(from_integer(j3),
  from_word32(of_int(1)))))), oexpon(from_word32(of_int(2)),
  j3))) = true)) and (urem(w2, of_int(2)) = of_int(1))) and (0 <= s3)) and
  (s3 <  j3)) and (j3 <= (k + 1))) and (ole(from_integer(j3),
  oadd(from_word64(i2), from_word32(of_int(1)))) = true)) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32)))) and
  ((((0 <= 2147483647) -> in_range2(j3)) and ((0 <= 2147483647) ->
  in_range2(s3))) and ((((w2 = w3) and ((s3 = s4) and (j3 = j4))) and
  ((w4 = w2) and ((s5 = s3) and (j5 = j3)))) and (not ((j3 <= k) and
  ule1(of_int1(j3), i2))))))))) and (((w5 = { t__content = w3 }) and ((s6 = {
  int__content = s4 }) and (j6 = { int__content = j4 }))) and ((w6 = w4) and
  ((s7 = s5) and (j7 = j5))))) and (((w7 = w5) and ((s8 = s6) and
  (j8 = j6))) and ((w8 = w6) and ((s9 = s7) and (j9 = j7))))) ->
  ((((o8 = ((s8).int__content + 1)) and
  in_range1(((s8).int__content + 1))) and ((result6 = s8) and (s10 = o8))) ->
  (((s10 = r94b) and in_range2(r94b)) -> (((result7 = { int__content = h7
  }) and (h8 = 1)) -> (((1 <= h8) and (h8 <= r94b)) ->
  ((((((((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts = aux1;
  rt = mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux32; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(omultiply(oexpon__2(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), omultiply(odivide(num_of_big_int({ elts = e; rt = e1 }, e_first,
  ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  oadd(from_word64(i2), from_word32(of_int(1))))),
  oexpon(from_word32(of_int(2)), (h9 - 1)))), oexpon(base(void), (l1 + 1))),
  num_of_big_int({ elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)) and
  (forall n1:int. (((0 <= n1) and (n1 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux45; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n1 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n1) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (oeq(from_word32((w7).t__content), omod(odivide(num_of_big_int({ elts = e;
  rt = e1 }, e_first, ((e_last - e_first) + 1)),
  oexpon__2(from_word32(of_int(2)), osubtract(from_word64(i2),
  osubtract(from_integer(s10), from_word32(of_int(1)))))),
  oexpon(from_word32(of_int(2)), s10))) = true)) and (urem((w7).t__content,
  of_int(2)) = of_int(1))) and (0 <= s10)) and (s10 <= (k + 1))) and
  (ole(from_integer(s10), oadd(from_word64(i2),
  from_word32(of_int(1)))) = true)) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32)))) ->
  ((((1 <= r94b) -> dynamic_property2(1, r94b, h9)) and ((1 <= h9) and
  (h9 <= r94b))) -> ((((((((o58 = (e_last - e_first)) and
  in_range1((e_last - e_first))) and ((o59 = o58) and
  uint_in_range1(o58))) and (o60 = of_int1(o59))) and (o61 = add1(o60,
  of_int1(1)))) and (o62 = mul1(o61, of_int1(32)))) and ((ult1(i2, o62) and
  (o63 = true)) or ((not ult1(i2, o62)) and (o63 = false)))) ->
  ((((o55 = from_word32(of_int(1))) and ((o54 = from_word64(i2)) and
  (o56 = oadd(o54, o55)))) and ((o53 = from_integer(s10)) and (o57 = ole(o53,
  o56)))) -> ((((o51 = (k + 1)) and in_range1((k + 1))) and
  (((s10 <= o51) and (o52 = true)) or ((not (s10 <= o51)) and
  (o52 = false)))) -> (((((o47 = from_word32(of_int(2))) and
  (o48 = oexpon(o47, s10))) and ((((((o42 = from_word32(of_int(1))) and
  ((o41 = from_integer(s10)) and (o43 = osubtract(o41, o42)))) and
  ((o40 = from_word64(i2)) and (o44 = osubtract(o40, o43)))) and
  ((o39 = from_word32(of_int(2))) and (o45 = oexpon__2(o39, o44)))) and
  (((((((o34 = (e_last - e_first)) and in_range1((e_last - e_first))) and
  (o35 = (o34 + 1))) and ((o36 = o35) and in_range1(o35))) and
  ((o37 = o36) and in_range2(o36))) and (o38 = num_of_big_int({ elts = e;
  rt = e1 }, e_first, o37))) and (o46 = odivide(o38, o45)))) and
  (o49 = omod(o46, o48)))) and ((o33 = from_word32((w7).t__content)) and
  (o50 = oeq(o33, o49)))) -> ((((((((o28 = power(2, k)) and
  in_range1(power(2, k))) and (o29 = (o28 - 1))) and ((o30 = o29) and
  in_range1(o29))) and (((n <= o30) and (o31 = true)) or
  ((not (n <= o30)) and (o31 = false)))) and (((0 <= n) and
  (result8 = o31)) or ((not (0 <= n)) and (result8 = false)))) and
  ((o32 = true) <->
  (forall n1:int. (((0 <= n1) and (n1 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux45; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n1 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n1) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true))))) ->
  ((((o26 = (l1 + 1)) and in_range1((l1 + 1))) and (o27 = num_of_big_int({
  elts = m; rt = m1 }, m_first, o26))) -> ((((o24 = (l1 + 1)) and
  in_range1((l1 + 1))) and (((o23 = base(void)) and
  (o23 = oexpon(from_word32(of_int(2)), 32))) and (o25 = oexpon(o23,
  o24)))) -> ((((o20 = from_word32(of_int(2))) and (o21 = oexpon(o20,
  (h9 - 1)))) and (((((o16 = from_word32(of_int(1))) and
  ((o15 = from_word64(i2)) and (o17 = oadd(o15, o16)))) and
  ((o14 = from_word32(of_int(2))) and (o18 = oexpon__2(o14, o17)))) and
  (((((((o9 = (e_last - e_first)) and in_range1((e_last - e_first))) and
  (o10 = (o9 + 1))) and ((o11 = o10) and in_range1(o10))) and
  ((o12 = o11) and in_range2(o11))) and (o13 = num_of_big_int({ elts = e;
  rt = e1 }, e_first, o12))) and (o19 = odivide(o13, o18)))) and
  (o22 = omultiply(o19, o21)))) ->
  in_range1((l1 + 1))))))))))))))))))))))))))))))))))))))))))))))))))))))
