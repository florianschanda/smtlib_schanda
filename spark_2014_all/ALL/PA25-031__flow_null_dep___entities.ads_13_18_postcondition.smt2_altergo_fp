(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type id_index

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : id_index, id_index -> bool

logic dummy1 : id_index

type id_index__ref = { id_index__content : id_index
}

function id_index__ref___projection(a: id_index__ref) : id_index =
  (a).id_index__content

logic attr__ATTRIBUTE_ADDRESS : int

logic get_current_cycles : int -> int

logic get_current_cycles__function_guard : int, int -> prop

logic get_current_cycles1 : int -> int

logic get_current_cycles__function_guard1 : int, int -> prop

axiom get_current_cycles__post_axiom :
  (forall entities__current_cycles:int
  [get_current_cycles(entities__current_cycles)].
  (in_range(entities__current_cycles) ->
  in_range(get_current_cycles(entities__current_cycles))))

axiom get_current_cycles__post_refine_axiom :
  (forall entities__current_cycles:int
  [get_current_cycles1(entities__current_cycles)].
  (in_range(entities__current_cycles) ->
  ((get_current_cycles1(entities__current_cycles) = entities__current_cycles) and
  in_range(get_current_cycles1(entities__current_cycles)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic get_current_id : int -> int

logic get_current_id__function_guard : int, int -> prop

logic get_current_id1 : int -> int

logic get_current_id__function_guard1 : int, int -> prop

axiom get_current_id__post_axiom :
  (forall entities__current_id:int [get_current_id(entities__current_id)].
  (in_range1(entities__current_id) ->
  in_range1(get_current_id(entities__current_id))))

axiom get_current_id__post_refine_axiom :
  (forall entities__current_id:int [get_current_id1(entities__current_id)].
  (in_range1(entities__current_id) ->
  ((get_current_id1(entities__current_id) = entities__current_id) and
  in_range1(get_current_id1(entities__current_id)))))

 (* File "entities.ads", line 7, characters 0-0 *)
goal WP_parameter_def :
  (forall current_id:int. forall current_cycles:int. forall result:int.
  forall current_id1:int. forall result1:int. forall current_cycles1:int.
  forall current_id2:int. forall current_cycles2:int. forall current_id3:int.
  forall current_cycles3:int. ((((1 <= 10) -> in_range1(current_id)) and
  (((1 <= 2147483647) -> in_range(current_cycles)) and
  ((((result = current_id) and (current_id1 = 1)) and
  ((result1 = current_cycles) and (current_cycles1 = 2147483647))) and
  (((current_cycles1 = current_cycles2) and (current_id1 = current_id2)) and
  ((current_cycles3 = current_cycles1) and
  (current_id3 = current_id1)))))) -> (get_current_id1(current_id2) = 1)))
