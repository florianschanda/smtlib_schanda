;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort capacity_range 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (capacity_range capacity_range) Bool)

(declare-const dummy capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___2__projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__names__entry_tables__vector__capacity capacity_range)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) capacity_range
  (rec__names__entry_tables__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__names__entry_tables__vector us_main_type)))))
(define-fun us_split_fields_Vector__2__projection ((a us_split_fields)) us_main_type
  (rec__names__entry_tables__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___5__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const names__entry_tables__vector__capacity__first__bit Int)

(declare-const names__entry_tables__vector__capacity__last__bit Int)

(declare-const names__entry_tables__vector__capacity__position Int)

;; names__entry_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__first__bit))

;; names__entry_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__entry_tables__vector__capacity__first__bit names__entry_tables__vector__capacity__last__bit))

;; names__entry_tables__vector__capacity__position_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((vector__ref 0))
(((mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___2__projection ((a vector__ref)) us_rep (vector__content
                                                                 a))

(declare-fun to_rep (capacity_range) Int)

(declare-fun of_rep (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun in_range1 ((rec__names__entry_tables__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__names__entry_tables__vector__capacity1 (to_rep
                                                                  (rec__names__entry_tables__vector__capacity
                                                                  (us_split_discrs1
                                                                  a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const names__entry_tables__vector__capacity__first__bit1 Int)

(declare-const names__entry_tables__vector__capacity__last__bit1 Int)

(declare-const names__entry_tables__vector__capacity__position1 Int)

;; names__entry_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__first__bit1))

;; names__entry_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__entry_tables__vector__capacity__first__bit1 names__entry_tables__vector__capacity__last__bit1))

;; names__entry_tables__vector__capacity__position_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((tentry_tableS__ref 0))
(((mk_tentry_tableS__ref (tentry_tableS__content us_rep)))))
(define-fun tentry_tableS__ref___projection ((a tentry_tableS__ref)) us_rep
  (tentry_tableS__content a))

(declare-const entry_table__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_570 us_rep)
  (temp___is_init_567 Bool) (temp___skip_constant_568 Bool)
  (temp___do_toplevel_569 Bool)) Bool (=>
                                      (not (= temp___skip_constant_568 true))
                                      (in_range1 128 temp___expr_570)))

(define-fun default_initial_assumption ((temp___expr_572 us_rep)
  (temp___skip_top_level_573 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__names__entry_tables__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_572))) 128)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_573 true))
                                         (= (is_empty temp___expr_572) true))))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort name_id 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq3 (name_id name_id) Bool)

(declare-const dummy3 name_id)

(declare-datatypes ((name_id__ref 0))
(((mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content
                                                                 a))

(declare-fun to_rep1 (name_id) Int)

(declare-fun of_rep1 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 32) name_id))))))
(declare-fun slide ((Array (_ BitVec 32) name_id) (_ BitVec 32)
  (_ BitVec 32)) (Array (_ BitVec 32) name_id))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 32) name_id)))
  (forall ((first (_ BitVec 32)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 32) name_id)))
  (forall ((old_first (_ BitVec 32)))
  (forall ((new_first (_ BitVec 32)))
  (forall ((i (_ BitVec 32)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 32) name_id) (_ BitVec 32)
  (_ BitVec 32) (Array (_ BitVec 32) name_id) (_ BitVec 32)
  (_ BitVec 32)) (Array (_ BitVec 32) name_id))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 32) name_id))
  (b (Array (_ BitVec 32) name_id)))
  (forall ((a_first (_ BitVec 32)) (a_last (_ BitVec 32))
  (b_first (_ BitVec 32)) (b_last (_ BitVec 32)))
  (forall ((i (_ BitVec 32)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x00000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (name_id
  (_ BitVec 32)) (Array (_ BitVec 32) name_id))

;; singleton_def
  (assert
  (forall ((v name_id))
  (forall ((i (_ BitVec 32)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 32) name_id))
  (a__first (_ BitVec 32)) (a__last (_ BitVec 32))
  (b (Array (_ BitVec 32) name_id)) (b__first (_ BitVec 32))
  (b__last (_ BitVec 32))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 32)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep1 (select a temp___idx_132))
                                     (to_rep1
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 32) name_id))
  (b (Array (_ BitVec 32) name_id)))
  (forall ((a__first (_ BitVec 32)) (a__last (_ BitVec 32))
  (b__first (_ BitVec 32)) (b__last (_ BitVec 32)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 32)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 32) name_id) (_ BitVec 32)
  (_ BitVec 32) (Array (_ BitVec 32) name_id) (_ BitVec 32)
  (_ BitVec 32)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 32) name_id))
  (b (Array (_ BitVec 32) name_id)))
  (forall ((a_first (_ BitVec 32)) (a_last (_ BitVec 32))
  (b_first (_ BitVec 32)) (b_last (_ BitVec 32)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 32) name_id))
  (b (Array (_ BitVec 32) name_id)))
  (forall ((a_first (_ BitVec 32)) (a_last (_ BitVec 32))
  (b_first (_ BitVec 32)) (b_last (_ BitVec 32)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 32)) (j (_ BitVec 32)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (< (to_rep1 (select a (bvadd i #x00000001))) (to_rep1
                                                  (select b (bvadd j #x00000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 32) name_id))
  (b (Array (_ BitVec 32) name_id)))
  (forall ((a_first (_ BitVec 32)) (a_last (_ BitVec 32))
  (b_first (_ BitVec 32)) (b_last (_ BitVec 32)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 32)) (j (_ BitVec 32)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (< (to_rep1 (select b (bvadd i #x00000001))) (to_rep1
                                                  (select a (bvadd j #x00000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort capacity_range1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (capacity_range1 capacity_range1) Bool)

(declare-const dummy4 capacity_range1)

(declare-datatypes ((capacity_range__ref1 0))
(((mk_capacity_range__ref1 (capacity_range__content1 capacity_range1)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref1)) capacity_range1
  (capacity_range__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((mk___split_discrs1
  (rec__names__char_tables__vector__capacity capacity_range1)))))
(define-fun us_split_discrs___projection ((a us_split_discrs2)) capacity_range1
  (rec__names__char_tables__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__names__char_tables__vector us_main_type1)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type1
  (rec__names__char_tables__vector a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3
                                                               a))

(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const names__char_tables__vector__capacity__first__bit Int)

(declare-const names__char_tables__vector__capacity__last__bit Int)

(declare-const names__char_tables__vector__capacity__position Int)

;; names__char_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__char_tables__vector__capacity__first__bit))

;; names__char_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__char_tables__vector__capacity__first__bit names__char_tables__vector__capacity__last__bit))

;; names__char_tables__vector__capacity__position_axiom
  (assert (<= 0 names__char_tables__vector__capacity__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((vector__ref1 0))
(((mk_vector__ref1 (vector__content1 us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref1)) us_rep1 (vector__content1
                                                                a))

(declare-fun to_rep2 (capacity_range1) Int)

(declare-fun of_rep2 (Int) capacity_range1)

;; inversion_axiom
  (assert
  (forall ((x capacity_range1))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range1)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun in_range4 ((rec__names__char_tables__vector__capacity1 Int)
  (a us_rep1)) Bool (= rec__names__char_tables__vector__capacity1 (to_rep2
                                                                  (rec__names__char_tables__vector__capacity
                                                                  (us_split_discrs3
                                                                  a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const names__char_tables__vector__capacity__first__bit1 Int)

(declare-const names__char_tables__vector__capacity__last__bit1 Int)

(declare-const names__char_tables__vector__capacity__position1 Int)

;; names__char_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__char_tables__vector__capacity__first__bit1))

;; names__char_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__char_tables__vector__capacity__first__bit1 names__char_tables__vector__capacity__last__bit1))

;; names__char_tables__vector__capacity__position_axiom
  (assert (<= 0 names__char_tables__vector__capacity__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((tchar_tableS__ref 0))
(((mk_tchar_tableS__ref (tchar_tableS__content us_rep1)))))
(define-fun tchar_tableS__ref___projection ((a tchar_tableS__ref)) us_rep1
  (tchar_tableS__content a))

(declare-const char_table__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

(define-fun dynamic_invariant1 ((temp___expr_404 us_rep1)
  (temp___is_init_401 Bool) (temp___skip_constant_402 Bool)
  (temp___do_toplevel_403 Bool)) Bool (=>
                                      (not (= temp___skip_constant_402 true))
                                      (in_range4 1024 temp___expr_404)))

(define-fun default_initial_assumption1 ((temp___expr_406 us_rep1)
  (temp___skip_top_level_407 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__names__char_tables__vector__capacity
                                            (us_split_discrs3
                                            temp___expr_406))) 1024)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_407 true))
                                         (= (is_empty1 temp___expr_406) true))))

(declare-fun names__hash_table__aggregate_def (Int) (Array (_ BitVec 32) name_id))

;; def_axiom
  (assert
  (forall ((temp___601 Int))
  (forall ((temp___602 (_ BitVec 32)))
  (= (select (names__hash_table__aggregate_def temp___601) temp___602)
  (of_rep1 temp___601)))))

(define-fun dynamic_invariant2 ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_180)))

(define-fun dynamic_invariant3 ((temp___expr_280 Int)
  (temp___is_init_277 Bool) (temp___skip_constant_278 Bool)
  (temp___do_toplevel_279 Bool)) Bool (=>
                                      (or (= temp___is_init_277 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_280)))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range5 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

(define-fun capacity ((container us_rep1)) Int (ite (= (of_int 0) true)
                                               (to_rep2
                                               (rec__names__char_tables__vector__capacity
                                               (us_split_discrs3 container)))
                                               2147483647))

(declare-fun capacity__function_guard (Int us_rep1) Bool)

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant3 result true
     false true))) :pattern ((length container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true) (= (length container) 0)) :pattern (
  (is_empty1 container)) )))

(define-fun dynamic_invariant4 ((temp___expr_443 Int)
  (temp___is_init_440 Bool) (temp___skip_constant_441 Bool)
  (temp___do_toplevel_442 Bool)) Bool (=>
                                      (or (= temp___is_init_440 true)
                                      (<= 0 2147483647)) (in_range
                                      temp___expr_443)))

(define-fun capacity1 ((container us_rep)) Int (ite (= (of_int 0) true)
                                               (to_rep
                                               (rec__names__entry_tables__vector__capacity
                                               (us_split_discrs1 container)))
                                               2147483647))

(declare-fun capacity__function_guard1 (Int us_rep) Bool)

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard1 (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length1 container)))
     (and (<= result (capacity1 container)) (dynamic_invariant4 result true
     false true))) :pattern ((length1 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

(declare-const hash_table (Array (_ BitVec 32) name_id))

(declare-const char_table__split_fields us_main_type1)

(declare-const us Int)

(declare-const result (Array (_ BitVec 32) name_id))

(declare-const hash_table1 (Array (_ BitVec 32) name_id))

;; H
  (assert (= result hash_table))

;; H
  (assert (= hash_table1 (names__hash_table__aggregate_def 0)))

;; H
  (assert (and (= us 1024) (in_range3 1024)))

;; H
  (assert (default_initial_assumption1
  (mk___rep1 char_table__split_discrs
  (mk___split_fields1 char_table__split_fields)) false))

;; H
  (assert
  (= 1024 (to_rep2
          (rec__names__char_tables__vector__capacity
          char_table__split_discrs))))

(assert
;; WP_parameter_def
 ;; File "a-cofove.ads", line 806, characters 0-0
  (not (in_range 128)))
(check-sat)
(exit)
