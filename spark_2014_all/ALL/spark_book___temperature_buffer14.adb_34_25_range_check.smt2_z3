;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort time_type 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (time_type time_type) Bool)

(declare-const dummy time_type)

(declare-datatypes ()
((time_type__ref (mk_time_type__ref (time_type__content time_type)))))
(define-fun time_type__ref___projection ((a time_type__ref)) time_type
  (time_type__content a))

(declare-fun to_rep (time_type) Int)

(declare-fun of_rep (Int) time_type)

;; inversion_axiom
  (assert
  (forall ((x time_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x time_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort temperature_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 4095)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (temperature_type temperature_type) Bool)

(declare-const dummy1 temperature_type)

(declare-datatypes ()
((temperature_type__ref
 (mk_temperature_type__ref (temperature_type__content temperature_type)))))
(define-fun temperature_type__ref___projection ((a temperature_type__ref)) temperature_type
  (temperature_type__content a))

(declare-fun to_rep1 (temperature_type) Int)

(declare-fun of_rep1 (Int) temperature_type)

;; inversion_axiom
  (assert
  (forall ((x temperature_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x temperature_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__temperature_buffer14__temperature_record__time_stamp time_type)(rec__temperature_buffer14__temperature_record__value temperature_type)))))
(define-fun us_split_fields_Time_Stamp__projection ((a us_split_fields)) time_type
  (rec__temperature_buffer14__temperature_record__time_stamp a))

(define-fun us_split_fields_Value__projection ((a us_split_fields)) temperature_type
  (rec__temperature_buffer14__temperature_record__value a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__temperature_buffer14__temperature_record__time_stamp
                           (us_split_fields1 a))) (to_rep
                                                  (rec__temperature_buffer14__temperature_record__time_stamp
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__temperature_buffer14__temperature_record__value
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__temperature_buffer14__temperature_record__value
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const temperature_buffer14__temperature_record__time_stamp__first__bit Int)

(declare-const temperature_buffer14__temperature_record__time_stamp__last__bit Int)

(declare-const temperature_buffer14__temperature_record__time_stamp__position Int)

;; temperature_buffer14__temperature_record__time_stamp__first__bit_axiom
  (assert
  (<= 0 temperature_buffer14__temperature_record__time_stamp__first__bit))

;; temperature_buffer14__temperature_record__time_stamp__last__bit_axiom
  (assert
  (< temperature_buffer14__temperature_record__time_stamp__first__bit
  temperature_buffer14__temperature_record__time_stamp__last__bit))

;; temperature_buffer14__temperature_record__time_stamp__position_axiom
  (assert
  (<= 0 temperature_buffer14__temperature_record__time_stamp__position))

(declare-const temperature_buffer14__temperature_record__value__first__bit Int)

(declare-const temperature_buffer14__temperature_record__value__last__bit Int)

(declare-const temperature_buffer14__temperature_record__value__position Int)

;; temperature_buffer14__temperature_record__value__first__bit_axiom
  (assert (<= 0 temperature_buffer14__temperature_record__value__first__bit))

;; temperature_buffer14__temperature_record__value__last__bit_axiom
  (assert
  (< temperature_buffer14__temperature_record__value__first__bit temperature_buffer14__temperature_record__value__last__bit))

;; temperature_buffer14__temperature_record__value__position_axiom
  (assert (<= 0 temperature_buffer14__temperature_record__value__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((temperature_record__ref
 (mk_temperature_record__ref (temperature_record__content us_rep)))))
(define-fun temperature_record__ref___projection ((a temperature_record__ref)) us_rep
  (temperature_record__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_132 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_132)
                                    (bvule temp___idx_132 a__last))
                                    (= (bool_eq (select a temp___idx_132)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const item us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort buffer_index_type 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 7))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (buffer_index_type buffer_index_type) Bool)

(declare-const dummy3 buffer_index_type)

(declare-datatypes ()
((buffer_index_type__ref
 (mk_buffer_index_type__ref (buffer_index_type__content buffer_index_type)))))
(define-fun buffer_index_type__ref___projection ((a buffer_index_type__ref)) buffer_index_type
  (buffer_index_type__content a))

(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (or (= temp___is_init_157 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 7)))
                                      (in_range2 temp___expr_160)))

(declare-sort buffer_count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (buffer_count_type buffer_count_type) Bool)

(declare-const dummy4 buffer_count_type)

(declare-datatypes ()
((buffer_count_type__ref
 (mk_buffer_count_type__ref (buffer_count_type__content buffer_count_type)))))
(define-fun buffer_count_type__ref___projection ((a buffer_count_type__ref)) buffer_count_type
  (buffer_count_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_177 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (or (= temp___is_init_174 true)
                                      (<= 0 8)) (in_range3 temp___expr_177)))

(define-fun dynamic_invariant2 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 4095)) (in_range1
                                      temp___expr_142)))

(define-fun dynamic_invariant3 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range temp___expr_136)))

(declare-const buffer (Array (_ BitVec 8) us_rep))

(declare-const count Int)

(declare-const next_in (_ BitVec 8))

(declare-const next_out (_ BitVec 8))

(declare-const o Int)

(declare-const result (Array (_ BitVec 8) us_rep))

(declare-const buffer1 (Array (_ BitVec 8) us_rep))

(declare-const result1 (_ BitVec 8))

(declare-const next_in1 (_ BitVec 8))

;; H
  (assert (in_range3 count))

;; H
  (assert (in_range2 next_in))

;; H
  (assert (in_range2 next_out))

;; H
  (assert (= result buffer))

;; H
  (assert (= buffer1 (store buffer next_in item)))

;; H
  (assert (= result1 next_in))

;; H
  (assert
  (= next_in1 (bvurem (bvadd next_in ((_ int2bv 8) 1)) ((_ int2bv 8) 8))))

;; H
  (assert (not (= count 8)))

(assert
;; WP_parameter_def
 ;; File "temperature_buffer14.adb", line 57, characters 0-0
  (not (in_range3 (+ count 1))))
(check-sat)
(exit)
