;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__private_record__result_ty__found Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__private_record__result_ty__found
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__private_record__result_ty us_main_type)))))
(define-fun us_split_fields_Result_Ty__projection ((a us_split_fields)) us_main_type
  (rec__private_record__result_ty a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__private_record__result_ty__found
                           (us_split_discrs1 a)) (rec__private_record__result_ty__found
                                                 (us_split_discrs1 b)))
                        (= (us_main_eq
                           (rec__private_record__result_ty
                           (us_split_fields1 a))
                           (rec__private_record__result_ty
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const private_record__result_ty__found__first__bit Int)

(declare-const private_record__result_ty__found__last__bit Int)

(declare-const private_record__result_ty__found__position Int)

;; private_record__result_ty__found__first__bit_axiom
  (assert (<= 0 private_record__result_ty__found__first__bit))

;; private_record__result_ty__found__last__bit_axiom
  (assert
  (< private_record__result_ty__found__first__bit private_record__result_ty__found__last__bit))

;; private_record__result_ty__found__position_axiom
  (assert (<= 0 private_record__result_ty__found__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((result_ty__ref 0))
(((mk_result_ty__ref (result_ty__content us_rep)))))
(define-fun result_ty__ref___projection ((a result_ty__ref)) us_rep (result_ty__content
                                                                    a))

(declare-fun get_content (us_rep) Int)

(declare-fun get_content__function_guard (Int us_rep) Bool)

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int natural)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((nat_array__ref 0))
(((mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(define-fun dynamic_invariant2 ((temp___expr_155 us_t)
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (not (= temp___skip_constant_153 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_155)
                                      (last1 temp___expr_155))))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes ((t3s__ref 0)) (((mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___projection ((a t3s__ref)) integer (t3s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int natural))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int natural) (elts1 a))

(define-fun of_array1 ((a (Array Int natural)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int natural)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq1 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((t4s__ref 0)) (((mk_t4s__ref (t4s__content us_t1)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t1 (t4s__content a))

(declare-datatypes ((us_split_discrs2 0))
(((mk___split_discrs1 (rec__record_discr__interm_result__upto natural)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs2)) natural
  (rec__record_discr__interm_result__upto a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__record_discr__interm_result__to_search us_t1)))))
(define-fun us_split_fields_To_Search__projection ((a us_split_fields2)) us_t1
  (rec__record_discr__interm_result__to_search a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3
                                                                a))

(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__record_discr__interm_result__upto
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__record_discr__interm_result__upto
                                                   (us_split_discrs3 b))))
                         (= (bool_eq3
                            (rec__record_discr__interm_result__to_search
                            (us_split_fields3 a))
                            (rec__record_discr__interm_result__to_search
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const record_discr__interm_result__upto__first__bit Int)

(declare-const record_discr__interm_result__upto__last__bit Int)

(declare-const record_discr__interm_result__upto__position Int)

;; record_discr__interm_result__upto__first__bit_axiom
  (assert (<= 0 record_discr__interm_result__upto__first__bit))

;; record_discr__interm_result__upto__last__bit_axiom
  (assert
  (< record_discr__interm_result__upto__first__bit record_discr__interm_result__upto__last__bit))

;; record_discr__interm_result__upto__position_axiom
  (assert (<= 0 record_discr__interm_result__upto__position))

(declare-const record_discr__interm_result__to_search__first__bit Int)

(declare-const record_discr__interm_result__to_search__last__bit Int)

(declare-const record_discr__interm_result__to_search__position Int)

;; record_discr__interm_result__to_search__first__bit_axiom
  (assert (<= 0 record_discr__interm_result__to_search__first__bit))

;; record_discr__interm_result__to_search__last__bit_axiom
  (assert
  (< record_discr__interm_result__to_search__first__bit record_discr__interm_result__to_search__last__bit))

;; record_discr__interm_result__to_search__position_axiom
  (assert (<= 0 record_discr__interm_result__to_search__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((interm_result__ref 0))
(((mk_interm_result__ref (interm_result__content us_rep1)))))
(define-fun interm_result__ref___projection ((a interm_result__ref)) us_rep1
  (interm_result__content a))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun search_upto (us_rep1 Int) us_rep)

(declare-fun search_upto__function_guard (us_rep us_rep1 Int) Bool)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ((tT19bP1__ref 0))
(((mk_tT19bP1__ref (tT19bP1__content integer)))))
(define-fun tT19bP1__ref___projection ((a1 tT19bP1__ref)) integer (tT19bP1__content
                                                                  a1))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ((us_t2 0))
(((mk___t2 (elts2 (Array Int natural))(rt2 t2)))))
(define-fun to_array2 ((a1 us_t2)) (Array Int natural) (elts2 a1))

(define-fun of_array2 ((a1 (Array Int natural)) (f Int)
  (l Int)) us_t2 (mk___t2 a1 (mk2 f l)))

(define-fun first5 ((a1 us_t2)) Int (to_rep1 (first4 (rt2 a1))))

(define-fun last5 ((a1 us_t2)) Int (to_rep1 (last4 (rt2 a1))))

(define-fun length2 ((a1 us_t2)) Int (ite (<= (first5 a1) (last5 a1))
                                     (+ (- (last5 a1) (first5 a1)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int natural)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int natural)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a1 (Array Int natural))) (<= 0 (object__size4 a1))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a1 (Array Int natural))) (<= 0 (object__component__size2 a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a1 (Array Int natural))) (<= 0 (object__alignment4 a1))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq1 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq9 (us_t2 us_t2) Bool)

(declare-const dummy9 us_t2)

(declare-datatypes ((t19b__ref 0)) (((mk_t19b__ref (t19b__content us_t2)))))
(define-fun t19b__ref___projection ((a1 t19b__ref)) us_t2 (t19b__content a1))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__record_discr__interm_result__to_search1 us_t2)))))
(define-fun us_split_fields_To_Search6__projection ((a1 us_split_fields4)) us_t2
  (rec__record_discr__interm_result__to_search1 a1))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_7__projection ((a1 us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a1))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs4 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep_13__projection ((a1 us_rep2)) us_split_discrs2 (us_split_discrs4
                                                                  a1))

(define-fun us_rep_14__projection ((a1 us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a1))

(define-fun to_base ((a1 us_rep2)) us_rep1 (mk___rep1 (us_split_discrs4 a1)
                                           (mk___split_fields1
                                           (let ((temp___141 (rec__record_discr__interm_result__to_search1
                                                             (us_split_fields5
                                                             a1))))
                                           (of_array1 (to_array2 temp___141)
                                           (first5 temp___141)
                                           (last5 temp___141))))))

(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep2 (us_split_discrs3 r)
                                          (mk___split_fields2
                                          (let ((temp___140 (rec__record_discr__interm_result__to_search
                                                            (us_split_fields3
                                                            r))))
                                          (of_array2 (to_array1 temp___140)
                                          (first3 temp___140)
                                          (last3 temp___140))))))

(define-fun bool_eq6 ((a1 us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__record_discr__interm_result__upto
                            (us_split_discrs4 a1))) (to_rep
                                                    (rec__record_discr__interm_result__upto
                                                    (us_split_discrs4 b))))
                         (= (bool_eq5
                            (rec__record_discr__interm_result__to_search1
                            (us_split_fields5 a1))
                            (rec__record_discr__interm_result__to_search1
                            (us_split_fields5 b))) true))
                    true false))

(define-fun in_range4 ((rec__record_discr__interm_result__upto1 Int)
  (a1 us_rep1)) Bool (= rec__record_discr__interm_result__upto1 (to_rep
                                                                (rec__record_discr__interm_result__upto
                                                                (us_split_discrs3
                                                                a1)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a1 us_rep2)) (<= 0 (object__size5 a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a1 us_rep2)) (<= 0 (object__alignment5 a1))))

(declare-const record_discr__interm_result__upto__first__bit1 Int)

(declare-const record_discr__interm_result__upto__last__bit1 Int)

(declare-const record_discr__interm_result__upto__position1 Int)

;; record_discr__interm_result__upto__first__bit_axiom
  (assert (<= 0 record_discr__interm_result__upto__first__bit1))

;; record_discr__interm_result__upto__last__bit_axiom
  (assert
  (< record_discr__interm_result__upto__first__bit1 record_discr__interm_result__upto__last__bit1))

;; record_discr__interm_result__upto__position_axiom
  (assert (<= 0 record_discr__interm_result__upto__position1))

(declare-const record_discr__interm_result__to_search__first__bit1 Int)

(declare-const record_discr__interm_result__to_search__last__bit1 Int)

(declare-const record_discr__interm_result__to_search__position1 Int)

;; record_discr__interm_result__to_search__first__bit_axiom
  (assert (<= 0 record_discr__interm_result__to_search__first__bit1))

;; record_discr__interm_result__to_search__last__bit_axiom
  (assert
  (< record_discr__interm_result__to_search__first__bit1 record_discr__interm_result__to_search__last__bit1))

;; record_discr__interm_result__to_search__position_axiom
  (assert (<= 0 record_discr__interm_result__to_search__position1))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((my_interm__ref 0))
(((mk_my_interm__ref (my_interm__content us_rep2)))))
(define-fun my_interm__ref___projection ((a1 my_interm__ref)) us_rep2
  (my_interm__content a1))

(define-fun dynamic_invariant3 ((temp___expr_236 us_rep2)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_234 true))
                                      (in_range4 (last1 a)
                                      (to_base temp___expr_236)))
                                      (and (dynamic_property4 1 (last1 a)
                                      (first5
                                      (rec__record_discr__interm_result__to_search1
                                      (us_split_fields5 temp___expr_236)))
                                      (last5
                                      (rec__record_discr__interm_result__to_search1
                                      (us_split_fields5 temp___expr_236))))
                                      (and
                                      (= (first5
                                         (rec__record_discr__interm_result__to_search1
                                         (us_split_fields5 temp___expr_236))) 1)
                                      (= (last5
                                         (rec__record_discr__interm_result__to_search1
                                         (us_split_fields5 temp___expr_236)))
                                      (last1 a))))))

(define-fun default_initial_assumption ((temp___expr_239 us_rep2)
  (temp___skip_top_level_240 Bool)) Bool (= (to_rep
                                            (rec__record_discr__interm_result__upto
                                            (us_split_discrs4
                                            temp___expr_239))) (last1 a)))

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq11 (integer integer) Bool)

(declare-const dummy11 integer)

(declare-datatypes ((tT21bP1__ref 0))
(((mk_tT21bP1__ref (tT21bP1__content integer)))))
(define-fun tT21bP1__ref___projection ((a1 tT21bP1__ref)) integer (tT21bP1__content
                                                                  a1))

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last6 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first6 (mk3 f l))) f)
     (= (to_rep1 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes ((us_t3 0))
(((mk___t3 (elts3 (Array Int natural))(rt3 t3)))))
(define-fun to_array3 ((a1 us_t3)) (Array Int natural) (elts3 a1))

(define-fun of_array3 ((a1 (Array Int natural)) (f Int)
  (l Int)) us_t3 (mk___t3 a1 (mk3 f l)))

(define-fun first7 ((a1 us_t3)) Int (to_rep1 (first6 (rt3 a1))))

(define-fun last7 ((a1 us_t3)) Int (to_rep1 (last6 (rt3 a1))))

(define-fun length3 ((a1 us_t3)) Int (ite (<= (first7 a1) (last7 a1))
                                     (+ (- (last7 a1) (first7 a1)) 1) 0))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array Int natural)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int natural)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a1 (Array Int natural))) (<= 0 (object__size6 a1))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a1 (Array Int natural))) (<= 0 (object__component__size3 a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a1 (Array Int natural))) (<= 0 (object__alignment6 a1))))

(define-fun bool_eq7 ((x us_t3)
  (y us_t3)) Bool (bool_eq1 (elts3 x) (to_rep1 (first6 (rt3 x)))
                  (to_rep1 (last6 (rt3 x))) (elts3 y)
                  (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))

(declare-fun user_eq12 (us_t3 us_t3) Bool)

(declare-const dummy12 us_t3)

(declare-datatypes ((t21b__ref 0)) (((mk_t21b__ref (t21b__content us_t3)))))
(define-fun t21b__ref___projection ((a1 t21b__ref)) us_t3 (t21b__content a1))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3 (rec__record_discr__interm_result__to_search2 us_t3)))))
(define-fun us_split_fields_To_Search7__projection ((a1 us_split_fields6)) us_t3
  (rec__record_discr__interm_result__to_search2 a1))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_8__projection ((a1 us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a1))

(declare-datatypes ((us_rep3 0))
(((mk___rep3
  (us_split_discrs5 us_split_discrs2)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep_15__projection ((a1 us_rep3)) us_split_discrs2 (us_split_discrs5
                                                                  a1))

(define-fun us_rep_16__projection ((a1 us_rep3)) us_split_fields6 (us_split_fields7
                                                                  a1))

(define-fun to_base1 ((a1 us_rep3)) us_rep1 (mk___rep1 (us_split_discrs5 a1)
                                            (mk___split_fields1
                                            (let ((temp___143 (rec__record_discr__interm_result__to_search2
                                                              (us_split_fields7
                                                              a1))))
                                            (of_array1 (to_array3 temp___143)
                                            (first7 temp___143)
                                            (last7 temp___143))))))

(define-fun of_base1 ((r us_rep1)) us_rep3 (mk___rep3 (us_split_discrs3 r)
                                           (mk___split_fields3
                                           (let ((temp___142 (rec__record_discr__interm_result__to_search
                                                             (us_split_fields3
                                                             r))))
                                           (of_array3 (to_array1 temp___142)
                                           (first3 temp___142)
                                           (last3 temp___142))))))

(define-fun bool_eq8 ((a1 us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__record_discr__interm_result__upto
                            (us_split_discrs5 a1))) (to_rep
                                                    (rec__record_discr__interm_result__upto
                                                    (us_split_discrs5 b))))
                         (= (bool_eq7
                            (rec__record_discr__interm_result__to_search2
                            (us_split_fields7 a1))
                            (rec__record_discr__interm_result__to_search2
                            (us_split_fields7 b))) true))
                    true false))

(define-fun in_range5 ((rec__record_discr__interm_result__upto1 Int)
  (a1 us_rep1)) Bool (= rec__record_discr__interm_result__upto1 (to_rep
                                                                (rec__record_discr__interm_result__upto
                                                                (us_split_discrs3
                                                                a1)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep3) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a1 us_rep3)) (<= 0 (object__size7 a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a1 us_rep3)) (<= 0 (object__alignment7 a1))))

(declare-const record_discr__interm_result__upto__first__bit2 Int)

(declare-const record_discr__interm_result__upto__last__bit2 Int)

(declare-const record_discr__interm_result__upto__position2 Int)

;; record_discr__interm_result__upto__first__bit_axiom
  (assert (<= 0 record_discr__interm_result__upto__first__bit2))

;; record_discr__interm_result__upto__last__bit_axiom
  (assert
  (< record_discr__interm_result__upto__first__bit2 record_discr__interm_result__upto__last__bit2))

;; record_discr__interm_result__upto__position_axiom
  (assert (<= 0 record_discr__interm_result__upto__position2))

(declare-const record_discr__interm_result__to_search__first__bit2 Int)

(declare-const record_discr__interm_result__to_search__last__bit2 Int)

(declare-const record_discr__interm_result__to_search__position2 Int)

;; record_discr__interm_result__to_search__first__bit_axiom
  (assert (<= 0 record_discr__interm_result__to_search__first__bit2))

;; record_discr__interm_result__to_search__last__bit_axiom
  (assert
  (< record_discr__interm_result__to_search__first__bit2 record_discr__interm_result__to_search__last__bit2))

;; record_discr__interm_result__to_search__position_axiom
  (assert (<= 0 record_discr__interm_result__to_search__position2))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-const dummy13 us_rep3)

(declare-datatypes ((t20b__ref 0))
(((mk_t20b__ref (t20b__content us_rep3)))))
(define-fun t20b__ref___projection ((a1 t20b__ref)) us_rep3 (t20b__content
                                                            a1))

(declare-const init us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))

;; init__def_axiom
  (assert
  (= init (of_base
          (to_base1
          (mk___rep3 (mk___split_discrs1 (of_rep (last1 a)))
          (mk___split_fields3
          (of_array3 (slide (to_array a) (first1 a) 1) 1 (last1 a))))))))

(define-fun dynamic_invariant5 ((temp___expr_160 us_rep1)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (let ((temp___161 (rec__record_discr__interm_result__upto
                                                        (us_split_discrs3
                                                        temp___expr_160))))
                                      (and (dynamic_property2 1
                                      (to_rep temp___161)
                                      (first3
                                      (rec__record_discr__interm_result__to_search
                                      (us_split_fields3 temp___expr_160)))
                                      (last3
                                      (rec__record_discr__interm_result__to_search
                                      (us_split_fields3 temp___expr_160))))
                                      (and
                                      (= (first3
                                         (rec__record_discr__interm_result__to_search
                                         (us_split_fields3 temp___expr_160))) 1)
                                      (= (last3
                                         (rec__record_discr__interm_result__to_search
                                         (us_split_fields3 temp___expr_160)))
                                      (to_rep temp___161))))))

(declare-const record_discr__search__result Bool)

(declare-const record_discr__search__result1 us_main_type)

(declare-const us Int)

(declare-const o Int)

(declare-const o1 natural)

(declare-const o2 (Array Int natural))

(declare-const o3 t3)

(declare-const o4 (Array Int natural))

(declare-const o5 t3)

(declare-const o6 natural)

(declare-const o7 natural)

(declare-const o8 (Array Int natural))

(declare-const o9 t3)

(declare-const o10 natural)

(declare-const o11 (Array Int natural))

(declare-const o12 t1)

(declare-const o13 natural)

(declare-const o14 (Array Int natural))

(declare-const o15 t1)

(declare-const record_discr__search__init__assume natural)

(declare-const record_discr__search__init__assume1 (Array Int natural))

(declare-const record_discr__search__init__assume2 t2)

(declare-const o16 us_rep)

(declare-const i Int)

(declare-const result result_ty__ref)

(declare-const record_discr__search__result2 us_rep)

(declare-const record_discr__search__result3 result_ty__ref)

(declare-const record_discr__search__result4 us_rep)

(declare-const record_discr__search__result5 result_ty__ref)

(declare-const record_discr__search__result6 us_rep)

(define-fun record_discr__search__init__assume3 () us_rep2 (mk___rep2
                                                           (mk___split_discrs1
                                                           record_discr__search__init__assume)
                                                           (mk___split_fields2
                                                           (mk___t2
                                                           record_discr__search__init__assume1
                                                           record_discr__search__init__assume2))))

(define-fun o17 () us_rep1 (mk___rep1 (mk___split_discrs1 o13)
                           (mk___split_fields1 (mk___t1 o14 o15))))

(define-fun o18 () us_rep1 (mk___rep1 (mk___split_discrs1 o10)
                           (mk___split_fields1 (mk___t1 o11 o12))))

;; H
  (assert (dynamic_invariant2 a true false true))

;; H
  (assert (in_range1 e))

;; H
  (assert
  (and (= (to_rep1 (first (rt a))) 1) (<= 0 (to_rep1 (last (rt a))))))

;; H
  (assert
  (and (= us (to_rep1 (last (rt a)))) (in_range1 (to_rep1 (last (rt a))))))

;; H
  (assert
  (= (ite (<= (to_rep1 (first (rt a))) (to_rep1 (last (rt a))))
     (+ (- (to_rep1 (last (rt a))) (to_rep1 (first (rt a)))) 1) 0) (ite (<= 1
                                                                   (to_rep1
                                                                   (last
                                                                   (rt a))))
                                                                   (+ (-
                                                                   (to_rep1
                                                                   (last
                                                                   (rt a))) 1) 1)
                                                                   0)))

;; H
  (assert (= (slide (elts a) (to_rep1 (first (rt a))) 1) o2))

;; H
  (assert (= (mk3 1 (to_rep1 (last (rt a)))) o3))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

;; H
  (assert
  (and (= o (to_rep1 (last (rt a)))) (in_range1 (to_rep1 (last (rt a))))))

;; H
  (assert (= (to_rep o1) o))

;; H
  (assert (= o1 o6))

;; H
  (assert (= o7 o6))

;; H
  (assert (= o8 o4))

;; H
  (assert (= o9 o5))

;; H
  (assert
  (= o18 (to_base1
         (mk___rep3 (mk___split_discrs1 o7)
         (mk___split_fields3 (mk___t3 o8 o9))))))

;; H
  (assert (= o17 o18))

;; H
  (assert (= record_discr__search__init__assume3 (of_base o17)))

;; H
  (assert (= record_discr__search__init__assume3 init))

;; H
  (assert (dynamic_invariant3 init true false true))

;; H
  (assert
  (= record_discr__search__result3 (mk_result_ty__ref
                                   record_discr__search__result2)))

;; H
  (assert (= record_discr__search__result4 record_discr__search__result2))

;; H
  (assert
  (and (= o16 (search_upto (to_base init) e))
  (ite (= (rec__private_record__result_ty__found (us_split_discrs1 o16)) true)
  (and
  (<= (get_content o16) (to_rep
                        (rec__record_discr__interm_result__upto
                        (us_split_discrs3 (to_base init)))))
  (= (to_rep
     (select (elts1
             (rec__record_discr__interm_result__to_search
             (us_split_fields3 (to_base init)))) (get_content o16)))
  e))
  (forall ((i1 Int))
  (=>
  (and (<= 1 i1)
  (<= i1 (to_rep
         (rec__record_discr__interm_result__upto
         (us_split_discrs3 (to_base init))))))
  (not
  (= (to_rep
     (select (elts1
             (rec__record_discr__interm_result__to_search
             (us_split_fields3 (to_base init)))) i1)) e)))))))

;; H
  (assert
  (= result (mk_result_ty__ref
            (mk___rep (mk___split_discrs record_discr__search__result)
            (mk___split_fields record_discr__search__result1)))))

;; H
  (assert (= record_discr__search__result2 o16))

;; H
  (assert (= record_discr__search__result5 record_discr__search__result3))

;; H
  (assert (= record_discr__search__result6 record_discr__search__result4))

;; H
  (assert
  (not
  (= (rec__private_record__result_ty__found
     (us_split_discrs1 (result_ty__content record_discr__search__result5))) true)))

;; H
  (assert (<= (to_rep1 (first (rt a))) i))

;; H
  (assert (<= i (to_rep1 (last (rt a)))))

(assert
;; WP_parameter_def
 ;; File "private_record.ads", line 2, characters 0-0
  (not (<= (to_rep1 (first (rt a))) i)))
(check-sat)
(exit)
