;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort it1 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-fun dummy () it1)

(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range temp___expr_152)))

(declare-sort it2 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (it2 it2) Bool)

(declare-fun dummy1 () it2)

(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 5 50)) (in_range1 temp___expr_158)))

(declare-sort et1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (et1 et1) Bool)

(declare-fun dummy2 () et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant2 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range2 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy3 () (Array Int et1))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int et1)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int et1)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int et1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int
  Int) (Array Int (Array Int et1)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int et1)) Int Int
  (Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int et1) Int) (Array Int (Array Int et1)))

;; singleton_def
  (assert
  (forall ((v (Array Int et1)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int (Array Int et1))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int et1))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq3 (select a temp___idx_133) 1 10
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq3 (select a temp___idx_133) 1 10
     (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun j () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun e () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun temp___967 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___969 (Array Int (Array Int et1))))
  (forall ((temp___970 Int) (temp___972 Int))
  (forall ((temp___971 (Array Int et1)) (temp___973 (Array Int et1)))
  (let ((temp___968 (temp___967 temp___969 temp___970 temp___971 temp___972
                    temp___973)))
  (forall ((temp___974 Int))
  (ite (= temp___974 temp___972)
  (= (select temp___968 temp___974) temp___973)
  (ite (= temp___974 temp___970)
  (= (select temp___968 temp___974) temp___971)
  (= (select temp___968 temp___974) (select temp___969 temp___974))))))))))

(declare-fun temp___975 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___977 (Array Int et1)))
  (forall ((temp___978 Int) (temp___979 Int))
  (let ((temp___976 (temp___975 temp___977 temp___978 temp___979)))
  (forall ((temp___980 Int))
  (ite (= temp___980 temp___978)
  (= (select temp___976 temp___980) (of_rep temp___979))
  (= (select temp___976 temp___980) (select temp___977 temp___980))))))))

(declare-fun temp___982 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___984 (Array Int et1)))
  (forall ((temp___985 Int) (temp___986 Int))
  (let ((temp___983 (temp___982 temp___984 temp___985 temp___986)))
  (forall ((temp___987 Int))
  (ite (= temp___987 temp___985)
  (= (select temp___983 temp___987) (of_rep temp___986))
  (= (select temp___983 temp___987) (select temp___984 temp___987))))))))

(declare-fun temp___990 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___992 (Array Int (Array Int et1))))
  (forall ((temp___993 Int) (temp___995 Int))
  (forall ((temp___994 (Array Int et1)) (temp___996 (Array Int et1)))
  (let ((temp___991 (temp___990 temp___992 temp___993 temp___994 temp___995
                    temp___996)))
  (forall ((temp___997 Int))
  (ite (= temp___997 temp___995)
  (= (select temp___991 temp___997) temp___996)
  (ite (= temp___997 temp___993)
  (= (select temp___991 temp___997) temp___994)
  (= (select temp___991 temp___997) (select temp___992 temp___997))))))))))

(declare-fun temp___998 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1000 (Array Int et1)))
  (forall ((temp___1001 Int) (temp___1002 Int))
  (let ((temp___999 (temp___998 temp___1000 temp___1001 temp___1002)))
  (forall ((temp___1003 Int))
  (ite (= temp___1003 temp___1001)
  (= (select temp___999 temp___1003) (of_rep temp___1002))
  (= (select temp___999 temp___1003) (select temp___1000 temp___1003))))))))

(declare-fun temp___1005 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1007 (Array Int et1)))
  (forall ((temp___1008 Int) (temp___1009 Int))
  (let ((temp___1006 (temp___1005 temp___1007 temp___1008 temp___1009)))
  (forall ((temp___1010 Int))
  (ite (= temp___1010 temp___1008)
  (= (select temp___1006 temp___1010) (of_rep temp___1009))
  (= (select temp___1006 temp___1010) (select temp___1007 temp___1010))))))))

(declare-fun temp___1013 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1015 (Array Int (Array Int et1))))
  (forall ((temp___1016 Int) (temp___1018 Int))
  (forall ((temp___1017 (Array Int et1)) (temp___1019 (Array Int et1)))
  (let ((temp___1014 (temp___1013 temp___1015 temp___1016 temp___1017
                     temp___1018 temp___1019)))
  (forall ((temp___1020 Int))
  (ite (= temp___1020 temp___1018)
  (= (select temp___1014 temp___1020) temp___1019)
  (ite (= temp___1020 temp___1016)
  (= (select temp___1014 temp___1020) temp___1017)
  (= (select temp___1014 temp___1020) (select temp___1015 temp___1020))))))))))

(declare-fun temp___1021 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1023 (Array Int et1)))
  (forall ((temp___1024 Int) (temp___1025 Int))
  (let ((temp___1022 (temp___1021 temp___1023 temp___1024 temp___1025)))
  (forall ((temp___1026 Int))
  (ite (= temp___1026 temp___1024)
  (= (select temp___1022 temp___1026) (of_rep temp___1025))
  (= (select temp___1022 temp___1026) (select temp___1023 temp___1026))))))))

(declare-fun temp___1028 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1030 (Array Int et1)))
  (forall ((temp___1031 Int) (temp___1032 Int))
  (let ((temp___1029 (temp___1028 temp___1030 temp___1031 temp___1032)))
  (forall ((temp___1033 Int))
  (ite (= temp___1033 temp___1031)
  (= (select temp___1029 temp___1033) (of_rep temp___1032))
  (= (select temp___1029 temp___1033) (select temp___1030 temp___1033))))))))

(declare-fun temp___1036 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1038 (Array Int (Array Int et1))))
  (forall ((temp___1039 Int) (temp___1041 Int))
  (forall ((temp___1040 (Array Int et1)) (temp___1042 (Array Int et1)))
  (let ((temp___1037 (temp___1036 temp___1038 temp___1039 temp___1040
                     temp___1041 temp___1042)))
  (forall ((temp___1043 Int))
  (ite (= temp___1043 temp___1041)
  (= (select temp___1037 temp___1043) temp___1042)
  (ite (= temp___1043 temp___1039)
  (= (select temp___1037 temp___1043) temp___1040)
  (= (select temp___1037 temp___1043) (select temp___1038 temp___1043))))))))))

(declare-fun temp___1044 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1046 (Array Int et1)))
  (forall ((temp___1047 Int) (temp___1048 Int))
  (let ((temp___1045 (temp___1044 temp___1046 temp___1047 temp___1048)))
  (forall ((temp___1049 Int))
  (ite (= temp___1049 temp___1047)
  (= (select temp___1045 temp___1049) (of_rep temp___1048))
  (= (select temp___1045 temp___1049) (select temp___1046 temp___1049))))))))

(declare-fun temp___1051 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1053 (Array Int et1)))
  (forall ((temp___1054 Int) (temp___1055 Int))
  (let ((temp___1052 (temp___1051 temp___1053 temp___1054 temp___1055)))
  (forall ((temp___1056 Int))
  (ite (= temp___1056 temp___1054)
  (= (select temp___1052 temp___1056) (of_rep temp___1055))
  (= (select temp___1052 temp___1056) (select temp___1053 temp___1056))))))))

(declare-fun temp___4639 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___4641 (Array Int (Array Int et1))))
  (forall ((temp___4642 Int))
  (forall ((temp___4643 (Array Int et1)))
  (let ((temp___4640 (temp___4639 temp___4641 temp___4642 temp___4643)))
  (forall ((temp___4644 Int))
  (ite (= temp___4644 temp___4642)
  (= (select temp___4640 temp___4644) temp___4643)
  (= (select temp___4640 temp___4644) (select temp___4641 temp___4644)))))))))

(declare-fun temp___4645 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___4647 (Array Int et1)))
  (forall ((temp___4648 Int) (temp___4649 Int))
  (let ((temp___4646 (temp___4645 temp___4647 temp___4648 temp___4649)))
  (forall ((temp___4650 Int))
  (ite (= temp___4650 temp___4648)
  (= (select temp___4646 temp___4650) (of_rep temp___4649))
  (= (select temp___4646 temp___4650) (select temp___4647 temp___4650))))))))

(declare-fun j_next () Int)

(declare-fun f () Int)

(declare-fun o () Int)

(declare-fun t () (Array Int (Array Int et1)))

(declare-fun a () (Array Int (Array Int et1)))

(declare-fun result () Int)

(declare-fun j_next1 () Int)

(declare-fun result1 () Int)

(declare-fun j_next2 () Int)

(define-fun j_next3 () int__ref (mk_int__ref j_next))

;; H
  (assert (in_range i))

;; H
  (assert (in_range1 j))

;; H
  (assert (in_range2 e))

;; H
  (assert (=> (<= 5 50) (in_range1 j_next)))

;; H
  (assert (=> (<= 0 99) (in_range2 f)))

;; H
  (assert
  (= (bool_eq4 a 5 50 (temp___4639 t j (temp___4645 (select t j) i e)) 5 50) true))

;; H
  (assert (=> (= j 50) (= (mk_int__ref result) j_next3)))

;; H
  (assert (=> (= j 50) (= j_next1 5)))

;; H
  (assert (=> (not (= j 50)) (and (= o (+ j 1)) (in_range1 (+ j 1)))))

;; H
  (assert (=> (not (= j 50)) (= (mk_int__ref result1) j_next3)))

;; H
  (assert (=> (not (= j 50)) (= j_next2 o)))

;; H
  (assert (=> (not (= j 50)) (= j_next1 j_next2)))

;; H
  (assert (not (= e 0)))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 329, characters 0-0
  (not (in_range2 (- e 1))))
(check-sat)
