;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 16)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-sort modular 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 16))

(declare-fun user_eq (modular modular) Bool)

(declare-fun dummy () modular)

(declare-datatypes ()
((modular__ref (mk_modular__ref (modular__content modular)))))
(define-fun modular__ref_4__projection ((a modular__ref)) modular (modular__content
                                                                  a))

(define-fun dynamic_invariant ((temp___expr_265 (_ BitVec 16))
  (temp___is_init_262 Bool) (temp___skip_constant_263 Bool)
  (temp___do_toplevel_264 Bool)) Bool true)

(declare-fun shift_right ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun shift_right__function_guard ((_ BitVec 16) (_ BitVec 16)
  Int) Bool)

(declare-fun nth1 ((_ BitVec 8) Int) Bool)

(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun to_int2 ((_ BitVec 8)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

;; shift_right__post_axiom
  (assert
  (forall ((v (_ BitVec 16)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant1 amount
     true true true)) (dynamic_invariant (shift_right v amount) true false
     true)) :pattern ((shift_right v amount)) ))))

;; shift_right__def_axiom
  (assert
  (forall ((v (_ BitVec 16)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant1 amount
     true true true))
     (= (shift_right v amount) (ite (and (<= 1 16) (<= 16 8))
                               ((_ zero_extend 8) (ite (< amount 8)
                                                  (bvlshr ((_ extract 7 0) v) ((_ int2bv 8) amount))
                                                  ((_ int2bv 8) 0)))
                               (ite (and (<= 9 16) (<= 16 16))
                               (ite (< amount 16)
                               (bvlshr v ((_ int2bv 16) amount))
                               ((_ int2bv 16) 0))
                               (ite (and (<= 17 16) (<= 16 32))
                               ((_ extract 15 0) (bvlshr ((_ zero_extend 16) v) ((_ int2bv 32) amount)))
                               ((_ extract 15 0) (bvlshr ((_ zero_extend 48) v) ((_ int2bv 64) amount)))))))) :pattern (
  (shift_right v amount)) ))))

(declare-sort bit_position 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (bit_position bit_position) Bool)

(declare-fun dummy2 () bit_position)

(declare-datatypes ()
((bit_position__ref
 (mk_bit_position__ref (bit_position__content bit_position)))))
(define-fun bit_position__ref_3__projection ((a bit_position__ref)) bit_position
  (bit_position__content a))

(define-fun dynamic_invariant2 ((temp___expr_271 Int)
  (temp___is_init_268 Bool) (temp___skip_constant_269 Bool)
  (temp___do_toplevel_270 Bool)) Bool (=>
                                      (or (= temp___is_init_268 true)
                                      (<= 0 15)) (in_range1 temp___expr_271)))

(declare-fun msb_index_fast_inline_always ((_ BitVec 16)) Int)

(declare-fun msb_index_fast_inline_always__function_guard (Int
  (_ BitVec 16)) Bool)

(declare-fun value () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result () Int)

(declare-fun o () Int)

(declare-fun result () Int)

(declare-fun bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result1 () Int)

(declare-fun bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result2 () Int)

(declare-fun bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result3 () Int)

(declare-fun bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result4 () Int)

(declare-fun bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result5 () Int)

(declare-fun result1 () Int)

;; H
  (assert true)

;; H
  (assert (not (= value ((_ int2bv 16) 0))))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result1
  bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result2))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result3
  bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result1))

;; H
  (assert
  (and (= o (msb_index_fast_inline_always value))
  (and (in_range1 o) (= (shift_right value o) ((_ int2bv 16) 1)))))

;; H
  (assert
  (= result bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result1
  o))

;; H
  (assert
  (= (mk_int__ref
     bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result4)
  (mk_int__ref
  bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result2)))

;; H
  (assert
  (= bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result5
  bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result3))

;; H
  (assert
  (= result1 bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result4))

(assert
;; WP_parameter_def
 ;; File "bits_manipulation.ads", line 10, characters 0-0
  (not
  (= (shift_right value
     bits_manipulation_unsigned__unsigned_16__functions__msb_index_fast_inline__result4) ((_ int2bv 16) 1))))
(check-sat)
(exit)
