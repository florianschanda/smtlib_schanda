;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort log_count 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (log_count log_count) Bool)

(declare-const dummy log_count)

(declare-datatypes ()
((log_count__ref (mk_log_count__ref (log_count__content log_count)))))
(define-fun log_count__ref___projection ((a log_count__ref)) log_count
  (log_count__content a))

(declare-fun to_rep (log_count) Int)

(declare-fun of_rep (Int) log_count)

;; inversion_axiom
  (assert
  (forall ((x log_count))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x log_count)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__logging__log_type_public__tmp log_count)(rec__ext__ us_private)))))
(define-fun us_split_fields_Tmp__projection ((a us_split_fields)) log_count
  (rec__logging__log_type_public__tmp a))

(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__logging__log_type_public__tmp
                           (us_split_fields1 a))) (to_rep
                                                  (rec__logging__log_type_public__tmp
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const logging__log_type_public__tmp__first__bit Int)

(declare-const logging__log_type_public__tmp__last__bit Int)

(declare-const logging__log_type_public__tmp__position Int)

;; logging__log_type_public__tmp__first__bit_axiom
  (assert (<= 0 logging__log_type_public__tmp__first__bit))

;; logging__log_type_public__tmp__last__bit_axiom
  (assert
  (< logging__log_type_public__tmp__first__bit logging__log_type_public__tmp__last__bit))

;; logging__log_type_public__tmp__position_axiom
  (assert (<= 0 logging__log_type_public__tmp__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((log_type_public__ref
 (mk_log_type_public__ref (log_type_public__content us_rep)))))
(define-fun log_type_public__ref___projection ((a log_type_public__ref)) us_rep
  (log_type_public__content a))

(define-fun default_initial_assumption ((temp___expr_182 us_rep)
  (temp___skip_top_level_183 Bool)) Bool (= (attr__tag temp___expr_182)
  us_tag))

(declare-fun log_size__2 (us_rep) Int)

(declare-fun log_size__2__function_guard (Int us_rep) Bool)

(declare-fun log_size__21 (Int us_rep) Int)

(declare-fun log_size__2__function_guard1 (Int Int us_rep) Bool)

(declare-fun init_log__2__specific_post (Int us_split_fields Int
  us_split_fields) Bool)

;; logging__log_type_public__compat_axiom
  (assert
  (forall ((logging__init_log__2__log__fields us_split_fields)
  (logging__init_log__2__log__old__fields us_split_fields))
  (forall ((log__attr__tag Int))
  (! (=> (init_log__2__specific_post us_tag logging__init_log__2__log__fields
     log__attr__tag logging__init_log__2__log__old__fields)
     (= (log_size__2
        (mk___rep logging__init_log__2__log__fields log__attr__tag)) 0)) :pattern ((init_log__2__specific_post
  us_tag logging__init_log__2__log__fields log__attr__tag
  logging__init_log__2__log__old__fields)) ))))

(declare-fun append_to_log__2__specific_post (Int us_split_fields Int Int
  us_split_fields) Bool)

;; logging__log_type_public__compat_axiom
  (assert
  (forall ((logging__append_to_log__2__log__fields us_split_fields)
  (logging__append_to_log__2__log__old__fields us_split_fields))
  (forall ((log__attr__tag Int) (incr Int))
  (! (=> (append_to_log__2__specific_post us_tag
     logging__append_to_log__2__log__fields log__attr__tag incr
     logging__append_to_log__2__log__old__fields)
     (= (log_size__2
        (mk___rep logging__append_to_log__2__log__fields log__attr__tag)) (+
     (log_size__2
     (mk___rep logging__append_to_log__2__log__old__fields log__attr__tag)) 1))) :pattern ((append_to_log__2__specific_post
  us_tag logging__append_to_log__2__log__fields log__attr__tag incr
  logging__append_to_log__2__log__old__fields)) ))))

(declare-const log__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 10000)) (in_range
                                      temp___expr_136)))

;; log_size__2__post_axiom
  (assert
  (forall ((log us_rep)) (! (dynamic_invariant (log_size__2 log) true false
  true) :pattern ((log_size__2 log)) )))

;; log_size__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((log us_rep)) (! (dynamic_invariant (log_size__21 attr__tag1 log)
  true false true) :pattern ((log_size__21 attr__tag1 log)) ))))

;; logging__log_type_public__compat_axiom
  (assert
  (forall ((log us_rep))
  (! (= (log_size__2 log) (log_size__21 us_tag log)) :pattern ((log_size__21
                                                               us_tag log)) )))

(declare-const log__split_fields log_count)

(declare-const log__split_fields1 us_private)

(declare-const log__split_fields2 log_count)

(declare-const log__split_fields3 us_private)

(define-fun log__split_fields4 () us_split_fields (mk___split_fields
                                                  log__split_fields2
                                                  log__split_fields3))

;; H
  (assert
  (and
  (= (log_size__21 log__attr__tag
     (mk___rep log__split_fields4 log__attr__tag)) 0)
  (init_log__2__specific_post log__attr__tag log__split_fields4
  log__attr__tag (mk___split_fields log__split_fields log__split_fields1))))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 22, characters 0-0
  (not
  (< (log_size__21 log__attr__tag
     (mk___rep log__split_fields4 log__attr__tag)) 10000)))
(check-sat)
(exit)
