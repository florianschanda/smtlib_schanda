;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index_type index_type) Bool)

(declare-fun dummy1 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_152)))

(declare-sort extended_index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (extended_index_type extended_index_type) Bool)

(declare-fun dummy2 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 0 100)) (in_range3
                                      temp___expr_158)))

(declare-fun to_rep (extended_index_type) Int)

(declare-fun of_rep (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range3
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq3 (us_rep us_rep) Bool)

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq3
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy4 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq4 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq4 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq6 (us_rep2 us_rep2) Bool)

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy5 () us_rep2)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))

(declare-fun oeq (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption ((temp___expr_241 us_rep2)
  (temp___skip_top_level_242 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_242 true))
                                         (= (is_empty temp___expr_241) true)))

(declare-fun ole (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq left right)) )))

(declare-datatypes ()
((value_set__ref (mk_value_set__ref (value_set__content us_rep2)))))
(define-fun value_set__ref___projection ((a value_set__ref)) us_rep2 
  (value_set__content a))

(declare-fun is_add__2 (us_rep2 Int us_rep2) Bool)

(declare-fun is_add__2__function_guard (Bool us_rep2 Int us_rep2) Bool)

(declare-fun contains (us_rep2 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)

(declare-fun included_except (us_rep2 us_rep2 Int) Bool)

(declare-fun included_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)

(define-fun default_initial_assumption1 ((temp___expr_254 us_rep2)
  (temp___skip_top_level_255 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_255 true))
                                         (= (is_empty temp___expr_254) true)))

;; is_add__2__post_axiom
  (assert true)

;; is_add__2__def_axiom
  (assert
  (forall ((s1 us_rep2) (s2 us_rep2))
  (forall ((e Int))
  (! (= (= (is_add__2 s1 e s2) true)
     (and
     (and (and (not (= (contains s1 e) true)) (= (contains s2 e) true))
     (= (ole s1 s2) true)) (= (included_except s2 s1 e) true))) :pattern (
  (is_add__2 s1 e s2)) ))))

(declare-sort position_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (position_type position_type) Bool)

(declare-fun dummy6 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep1 (position_type) Int)

(declare-fun of_rep1 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep3)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq8 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy7 () us_rep3)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep3)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep3 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq9 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq8 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq9 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq8 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy8 () (Array Int us_rep3))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int us_rep3)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep3)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int us_rep3)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq8 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep3))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep3) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep4)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq10 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq9
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy9 () us_rep4)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep4)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep4 (forest__content
                                                               a))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq11 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep2 (select a temp___idx_134)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq11 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep2 (select a temp___idx_134)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq11 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq11 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq11 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy10 () (Array Int natural))

(declare-fun value__size6 () Int)

(declare-fun object__size6 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment6 a))))

(declare-fun user_eq10 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep4)(rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields6)) extended_index_type 
  (rec__search_trees__search_tree__root a))

(define-fun us_split_fields_Struct__projection ((a us_split_fields6)) us_rep4 
  (rec__search_trees__search_tree__struct a))

(define-fun us_split_fields_Values__projection ((a us_split_fields6)) (Array Int natural) 
  (rec__search_trees__search_tree__values a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep5 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_4__projection ((a us_rep5)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq12 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__search_trees__search_tree__root
                            (us_split_fields7 a))) (to_rep
                                                   (rec__search_trees__search_tree__root
                                                   (us_split_fields7 b))))
                         (= (bool_eq10
                            (rec__search_trees__search_tree__struct
                            (us_split_fields7 a))
                            (rec__search_trees__search_tree__struct
                            (us_split_fields7 b))) true))
                         (= (bool_eq11
                            (rec__search_trees__search_tree__values
                            (us_split_fields7 a)) 1 100
                            (rec__search_trees__search_tree__values
                            (us_split_fields7 b)) 1 100) true))
                    true false))

(declare-fun user_eq11 (us_rep5 us_rep5) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-fun search_trees__search_tree__root__first__bit () Int)

(declare-fun search_trees__search_tree__root__last__bit () Int)

(declare-fun search_trees__search_tree__root__position () Int)

;; search_trees__search_tree__root__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__root__first__bit))

;; search_trees__search_tree__root__last__bit_axiom
  (assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; search_trees__search_tree__root__position_axiom
  (assert (<= 0 search_trees__search_tree__root__position))

(declare-fun search_trees__search_tree__struct__first__bit () Int)

(declare-fun search_trees__search_tree__struct__last__bit () Int)

(declare-fun search_trees__search_tree__struct__position () Int)

;; search_trees__search_tree__struct__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__struct__first__bit))

;; search_trees__search_tree__struct__last__bit_axiom
  (assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; search_trees__search_tree__struct__position_axiom
  (assert (<= 0 search_trees__search_tree__struct__position))

(declare-fun search_trees__search_tree__values__first__bit () Int)

(declare-fun search_trees__search_tree__values__last__bit () Int)

(declare-fun search_trees__search_tree__values__position () Int)

;; search_trees__search_tree__values__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__values__first__bit))

;; search_trees__search_tree__values__last__bit_axiom
  (assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; search_trees__search_tree__values__position_axiom
  (assert (<= 0 search_trees__search_tree__values__position))

(declare-fun dummy11 () us_rep5)

(declare-datatypes ()
((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep5)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep5 
  (search_tree__content a))

(declare-fun size (us_rep5) Int)

(declare-fun size__function_guard (Int us_rep5) Bool)

(declare-fun size1 (us_rep4) Int)

(declare-fun size__function_guard1 (Int us_rep4) Bool)

(declare-fun valid_root (us_rep4 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep4 Int) Bool)

(declare-fun tree_structure (us_rep4) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep4) Bool)

(declare-fun ordered_leafs (us_rep4 Int (Array Int natural)) Bool)

(declare-fun ordered_leafs__function_guard (Bool us_rep4 Int
  (Array Int natural)) Bool)

(declare-fun temp___390 (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___392 Int))
  (forall ((temp___393 Int))
  (= (select (temp___390 temp___392) temp___393) (of_rep2 temp___392)))))

(define-fun dynamic_invariant3 ((temp___expr_378 us_rep5)
  (temp___is_init_375 Bool) (temp___skip_constant_376 Bool)
  (temp___do_toplevel_377 Bool)) Bool (and
                                      (ite (= (size1
                                              (rec__search_trees__search_tree__struct
                                              (us_split_fields7
                                              temp___expr_378))) 0)
                                      (= (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___expr_378))) 0)
                                      (and
                                      (and
                                      (not
                                      (= (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___expr_378))) 0))
                                      (= (valid_root
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___expr_378))
                                         (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___expr_378)))) true))
                                      (= (ordered_leafs
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___expr_378))
                                         (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___expr_378)))
                                         (rec__search_trees__search_tree__values
                                         (us_split_fields7 temp___expr_378))) true)))
                                      (= (tree_structure
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___expr_378))) true)))

(define-fun default_initial_assumption2 ((temp___expr_383 us_rep5)
  (temp___skip_top_level_384 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__search_trees__search_tree__root
                                            (us_split_fields7
                                            temp___expr_383))) 0)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            temp___expr_383))))) 0)
                                         (forall ((temp___387 Int))
                                         (=>
                                         (and (<= 1 temp___387)
                                         (<= temp___387 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_383)))) temp___387)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_383)))) temp___387)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_383)))) temp___387)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_383)))) temp___387)))) 2)))))
                                         (= (size1
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            temp___expr_383))) 0)))
                                         (= (rec__search_trees__search_tree__values
                                            (us_split_fields7
                                            temp___expr_383)) (temp___390 0)))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_384 true))
                                         (= (size temp___expr_383) 0))))

(define-fun type_invariant ((temp___395 us_rep5)) Bool (ite (= (size1
                                                               (rec__search_trees__search_tree__struct
                                                               (us_split_fields7
                                                               temp___395))) 0)
                                                       (= (to_rep
                                                          (rec__search_trees__search_tree__root
                                                          (us_split_fields7
                                                          temp___395))) 0)
                                                       (and
                                                       (and
                                                       (not
                                                       (= (to_rep
                                                          (rec__search_trees__search_tree__root
                                                          (us_split_fields7
                                                          temp___395))) 0))
                                                       (= (valid_root
                                                          (rec__search_trees__search_tree__struct
                                                          (us_split_fields7
                                                          temp___395))
                                                          (to_rep
                                                          (rec__search_trees__search_tree__root
                                                          (us_split_fields7
                                                          temp___395)))) true))
                                                       (= (ordered_leafs
                                                          (rec__search_trees__search_tree__struct
                                                          (us_split_fields7
                                                          temp___395))
                                                          (to_rep
                                                          (rec__search_trees__search_tree__root
                                                          (us_split_fields7
                                                          temp___395)))
                                                          (rec__search_trees__search_tree__values
                                                          (us_split_fields7
                                                          temp___395))) true))))

;; size__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant3 t true true true) (dynamic_invariant2 (size t)
     true false true)) :pattern ((size t)) )))

;; size__def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant3 t true true true)
     (= (size t) (size1
                 (rec__search_trees__search_tree__struct
                 (us_split_fields7 t))))) :pattern ((size t)) )))

(declare-fun root (us_rep5) Int)

(declare-fun root__function_guard (Int us_rep5) Bool)

;; root__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant3 t true true true) (not (= (size t) 0)))
     (dynamic_invariant1 (root t) true false true)) :pattern ((root t)) )))

;; root__def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant3 t true true true)
     (= (root t) (to_rep
                 (rec__search_trees__search_tree__root (us_split_fields7 t))))) :pattern (
  (root t)) )))

(declare-fun parent (us_rep5 Int) Int)

(declare-fun parent__function_guard (Int us_rep5 Int) Bool)

(declare-fun parent1 (us_rep4 Int) Int)

(declare-fun parent__function_guard1 (Int us_rep4 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant3 t true true true) (dynamic_invariant1 i true
     true true))
     (let ((result (parent t i)))
     (and (=> (= (size t) 0) (= result 0)) (dynamic_invariant2 result true
     false true)))) :pattern ((parent t i)) ))))

;; parent__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant3 t true true true) (dynamic_invariant1 i true
     true true))
     (= (parent t i) (parent1
                     (rec__search_trees__search_tree__struct
                     (us_split_fields7 t)) i))) :pattern ((parent t i)) ))))

(declare-sort direction 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq12 (direction direction) Bool)

(declare-fun dummy12 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(define-fun dynamic_invariant4 ((temp___expr_170 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (<= 0 1)) (in_range5 temp___expr_170)))

(declare-fun position (us_rep4 Int) Int)

(declare-fun position__function_guard (Int us_rep4 Int) Bool)

(declare-fun position1 (us_rep5 Int) Int)

(declare-fun position__function_guard1 (Int us_rep5 Int) Bool)

;; position__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant3 t true true true) (dynamic_invariant1 i true
     true true)) (not (= (parent t i) 0))) (dynamic_invariant4
     (position1 t i) true false true)) :pattern ((position1 t i)) ))))

;; position__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant3 t true true true) (dynamic_invariant1 i true
     true true))
     (= (position1 t i) (position
                        (rec__search_trees__search_tree__struct
                        (us_split_fields7 t)) i))) :pattern ((position1 t i)) ))))

(declare-fun model__ (us_rep5) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep5) Bool)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant5 ((temp___expr_218 (Array Int us_rep1))
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (forall ((temp___219 Int))
                                      (=>
                                      (and (<= 1 temp___219)
                                      (<= temp___219 100))
                                      (=> (= temp___is_init_215 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_218 temp___219)))) 100)))))

(define-fun default_initial_assumption3 ((temp___expr_221 (Array Int us_rep1))
  (temp___skip_top_level_222 Bool)) Bool (forall ((temp___223 Int))
                                         (=>
                                         (and (<= 1 temp___223)
                                         (<= temp___223 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_221 temp___223)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_221 temp___223))) 
                                         (of_int 0))))))

(declare-fun model__1 (us_rep4 Int) (Array Int us_rep1))

(declare-fun model____function_guard1 ((Array Int us_rep1) us_rep4 Int) Bool)

;; model____post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant3 t true true true) (not (= (size t) 0)))
     (dynamic_invariant5 (model__ t) true false true)) :pattern ((model__ t)) )))

;; model____def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant3 t true true true)
     (= (model__ t) (model__1
                    (rec__search_trees__search_tree__struct
                    (us_split_fields7 t))
                    (to_rep
                    (rec__search_trees__search_tree__root
                    (us_split_fields7 t)))))) :pattern ((model__ t)) )))

(declare-fun peek (us_rep5 Int Int) Int)

(declare-fun peek__function_guard (Int us_rep5 Int Int) Bool)

(declare-fun peek1 (us_rep4 Int Int) Int)

(declare-fun peek__function_guard1 (Int us_rep4 Int Int) Bool)

;; peek__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant3 t true true true) (dynamic_invariant1 i true
     true true)) (dynamic_invariant4 d true true true))
     (and (not (= (size t) 0))
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___422 (model__ t))) (select temp___422 i)))) true)))
     (dynamic_invariant2 (peek t i d) true false true)) :pattern ((peek t i
                                                                  d)) ))))

;; peek__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant3 t true true true) (dynamic_invariant1 i true
     true true)) (dynamic_invariant4 d true true true))
     (= (peek t i d) (peek1
                     (rec__search_trees__search_tree__struct
                     (us_split_fields7 t)) i d))) :pattern ((peek t i d)) ))))

(declare-fun values (us_rep5) us_rep2)

(declare-fun values__function_guard (us_rep2 us_rep5) Bool)

;; values__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant3 t true true true)
     (=> (= (size t) 0) (= (is_empty (values t)) true))) :pattern ((values t)) )))

(declare-sort color_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq14 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq13 (color_type color_type) Bool)

(declare-fun dummy13 () color_type)

(declare-datatypes ()
((color_type__ref (mk_color_type__ref (color_type__content color_type)))))
(define-fun color_type__ref___projection ((a color_type__ref)) color_type 
  (color_type__content a))

(declare-fun to_rep3 (color_type) Int)

(declare-fun of_rep3 (Int) color_type)

;; inversion_axiom
  (assert
  (forall ((x color_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x color_type)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int color_type))))))
(declare-fun slide3 ((Array Int color_type) Int Int) (Array Int color_type))

;; slide_eq
  (assert
  (forall ((a (Array Int color_type)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int color_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int color_type) Int Int (Array Int color_type)
  Int Int) (Array Int color_type))

;; concat_def
  (assert
  (forall ((a (Array Int color_type)) (b (Array Int color_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (color_type Int) (Array Int color_type))

;; singleton_def
  (assert
  (forall ((v color_type))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq15 ((a (Array Int color_type)) (a__first Int)
  (a__last Int) (b (Array Int color_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_135 Int))
                           (=>
                           (and (<= a__first temp___idx_135)
                           (<= temp___idx_135 a__last))
                           (= (to_rep3 (select a temp___idx_135)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_135)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int color_type)) (b (Array Int color_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq15 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_135 Int))
  (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last))
  (= (to_rep3 (select a temp___idx_135)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_135)))))))))))

(declare-fun compare1 ((Array Int color_type) Int Int (Array Int color_type)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int color_type)) (b (Array Int color_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq15 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int color_type)) (b (Array Int color_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq15 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int color_type)) (b (Array Int color_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq15 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun dummy14 () (Array Int color_type))

(declare-fun value__size8 () Int)

(declare-fun object__size8 ((Array Int color_type)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int color_type)) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 ((Array Int color_type)) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a (Array Int color_type))) (<= 0 (object__size8 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int color_type))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int color_type))) (<= 0 (object__alignment8 a))))

(declare-fun user_eq14 ((Array Int color_type) (Array Int color_type)) Bool)

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__red_black_trees__rbt__struct us_rep5)(rec__red_black_trees__rbt__color (Array Int color_type))))))
(define-fun us_split_fields_Struct2__projection ((a us_split_fields8)) us_rep5 
  (rec__red_black_trees__rbt__struct a))

(define-fun us_split_fields_Color__projection ((a us_split_fields8)) (Array Int color_type) 
  (rec__red_black_trees__rbt__color a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep6 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_5__projection ((a us_rep6)) us_split_fields8 (us_split_fields9
                                                                a))

(define-fun bool_eq16 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (bool_eq12
                            (rec__red_black_trees__rbt__struct
                            (us_split_fields9 a))
                            (rec__red_black_trees__rbt__struct
                            (us_split_fields9 b))) true)
                         (= (bool_eq15
                            (rec__red_black_trees__rbt__color
                            (us_split_fields9 a)) 1 100
                            (rec__red_black_trees__rbt__color
                            (us_split_fields9 b)) 1 100) true))
                    true false))

(declare-fun user_eq15 (us_rep6 us_rep6) Bool)

(declare-fun value__size9 () Int)

(declare-fun object__size9 (us_rep6) Int)

(declare-fun value__alignment9 () Int)

(declare-fun object__alignment9 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment9 a))))

(declare-fun red_black_trees__rbt__struct__first__bit () Int)

(declare-fun red_black_trees__rbt__struct__last__bit () Int)

(declare-fun red_black_trees__rbt__struct__position () Int)

;; red_black_trees__rbt__struct__first__bit_axiom
  (assert (<= 0 red_black_trees__rbt__struct__first__bit))

;; red_black_trees__rbt__struct__last__bit_axiom
  (assert
  (< red_black_trees__rbt__struct__first__bit red_black_trees__rbt__struct__last__bit))

;; red_black_trees__rbt__struct__position_axiom
  (assert (<= 0 red_black_trees__rbt__struct__position))

(declare-fun red_black_trees__rbt__color__first__bit () Int)

(declare-fun red_black_trees__rbt__color__last__bit () Int)

(declare-fun red_black_trees__rbt__color__position () Int)

;; red_black_trees__rbt__color__first__bit_axiom
  (assert (<= 0 red_black_trees__rbt__color__first__bit))

;; red_black_trees__rbt__color__last__bit_axiom
  (assert
  (< red_black_trees__rbt__color__first__bit red_black_trees__rbt__color__last__bit))

;; red_black_trees__rbt__color__position_axiom
  (assert (<= 0 red_black_trees__rbt__color__position))

(declare-fun dummy15 () us_rep6)

(declare-datatypes () ((rbt__ref (mk_rbt__ref (rbt__content us_rep6)))))
(define-fun rbt__ref___projection ((a rbt__ref)) us_rep6 (rbt__content a))

(declare-fun invariant__ (us_rep6) Bool)

(declare-fun invariant____function_guard (Bool us_rep6) Bool)

(declare-fun temp___502 (Int) (Array Int color_type))

;; def_axiom
  (assert
  (forall ((temp___504 Int))
  (forall ((temp___505 Int))
  (= (select (temp___502 temp___504) temp___505) (of_rep3 temp___504)))))

(define-fun dynamic_invariant6 ((temp___expr_487 us_rep6)
  (temp___is_init_484 Bool) (temp___skip_constant_485 Bool)
  (temp___do_toplevel_486 Bool)) Bool (and
                                      (let ((temp___488 (rec__red_black_trees__rbt__struct
                                                        (us_split_fields9
                                                        temp___expr_487))))
                                      (ite (= (size1
                                              (rec__search_trees__search_tree__struct
                                              (us_split_fields7 temp___488))) 0)
                                      (= (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___488))) 0)
                                      (and
                                      (and
                                      (not
                                      (= (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___488))) 0))
                                      (= (valid_root
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___488))
                                         (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___488)))) true))
                                      (= (ordered_leafs
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___488))
                                         (to_rep
                                         (rec__search_trees__search_tree__root
                                         (us_split_fields7 temp___488)))
                                         (rec__search_trees__search_tree__values
                                         (us_split_fields7 temp___488))) true))))
                                      (= (tree_structure
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7
                                         (rec__red_black_trees__rbt__struct
                                         (us_split_fields9 temp___expr_487))))) true)))

(define-fun default_initial_assumption4 ((temp___expr_493 us_rep6)
  (temp___skip_top_level_494 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__search_trees__search_tree__root
                                            (us_split_fields7
                                            (rec__red_black_trees__rbt__struct
                                            (us_split_fields9
                                            temp___expr_493))))) 0)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            (rec__red_black_trees__rbt__struct
                                            (us_split_fields9
                                            temp___expr_493))))))) 0)
                                         (forall ((temp___498 Int))
                                         (=>
                                         (and (<= 1 temp___498)
                                         (<= temp___498 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    (rec__red_black_trees__rbt__struct
                                                    (us_split_fields9
                                                    temp___expr_493)))))) temp___498)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    (rec__red_black_trees__rbt__struct
                                                    (us_split_fields9
                                                    temp___expr_493)))))) temp___498)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    (rec__red_black_trees__rbt__struct
                                                    (us_split_fields9
                                                    temp___expr_493)))))) temp___498)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    (rec__red_black_trees__rbt__struct
                                                    (us_split_fields9
                                                    temp___expr_493)))))) temp___498)))) 2)))))
                                         (= (size1
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            (rec__red_black_trees__rbt__struct
                                            (us_split_fields9
                                            temp___expr_493))))) 0)))
                                         (= (rec__search_trees__search_tree__values
                                            (us_split_fields7
                                            (rec__red_black_trees__rbt__struct
                                            (us_split_fields9
                                            temp___expr_493)))) (temp___390
                                                                0)))
                                         (= (size
                                            (rec__red_black_trees__rbt__struct
                                            (us_split_fields9
                                            temp___expr_493))) 0))
                                         (= (rec__red_black_trees__rbt__color
                                            (us_split_fields9
                                            temp___expr_493)) (temp___502 0))))

(define-fun type_invariant1 ((temp___507 us_rep6)) Bool (= (invariant__
                                                           temp___507) true))

(declare-fun size2 (us_rep6) Int)

(declare-fun size__function_guard2 (Int us_rep6) Bool)

;; size__post_axiom
  (assert
  (forall ((t us_rep6))
  (! (=> (and (dynamic_invariant6 t true true true) (type_invariant1 t))
     (dynamic_invariant2 (size2 t) true false true)) :pattern ((size2 t)) )))

;; size__def_axiom
  (assert
  (forall ((t us_rep6))
  (! (=> (dynamic_invariant6 t true true true)
     (= (size2 t) (size
                  (rec__red_black_trees__rbt__struct (us_split_fields9 t))))) :pattern (
  (size2 t)) )))

(declare-fun values1 (us_rep6) us_rep2)

(declare-fun values__function_guard1 (us_rep2 us_rep6) Bool)

;; values__post_axiom
  (assert
  (forall ((t us_rep6))
  (! (=> (and (dynamic_invariant6 t true true true) (type_invariant1 t))
     (=> (= (size2 t) 0) (= (is_empty (values1 t)) true))) :pattern (
  (values1 t)) )))

;; values__def_axiom
  (assert
  (forall ((t us_rep6))
  (! (=> (dynamic_invariant6 t true true true)
     (= (values1 t) (values
                    (rec__red_black_trees__rbt__struct (us_split_fields9 t))))) :pattern (
  (values1 t)) )))

(declare-fun contains1 (us_rep6 Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep6 Int) Bool)

(declare-fun contains2 (us_rep5 Int) Bool)

(declare-fun contains__function_guard2 (Bool us_rep5 Int) Bool)

;; contains__post_axiom
  (assert
  (forall ((t us_rep6))
  (forall ((v Int))
  (! (=>
     (and
     (and (dynamic_invariant6 t true true true) (dynamic_invariant v true
     true true)) (type_invariant1 t))
     (= (= (contains1 t v) true) (= (contains (values1 t) v) true))) :pattern (
  (contains1 t v)) ))))

;; contains__def_axiom
  (assert
  (forall ((t us_rep6))
  (forall ((v Int))
  (! (= (= (contains1 t v) true)
     (= (contains2 (rec__red_black_trees__rbt__struct (us_split_fields9 t))
        v) true)) :pattern ((contains1 t v)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun v () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun color (us_rep6 Int) Int)

(declare-fun color__function_guard (Int us_rep6 Int) Bool)

(define-fun dynamic_invariant7 ((temp___expr_472 Int)
  (temp___is_init_469 Bool) (temp___skip_constant_470 Bool)
  (temp___do_toplevel_471 Bool)) Bool (=>
                                      (or (= temp___is_init_469 true)
                                      (<= 0 1)) (in_range6 temp___expr_472)))

;; color__post_axiom
  (assert
  (forall ((t us_rep6))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant6 t true true true) (dynamic_invariant2 i true
     true true)) (dynamic_invariant7 (color t i) true false true)) :pattern (
  (color t i)) ))))

;; color__def_axiom
  (assert
  (forall ((t us_rep6))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant6 t true true true) (dynamic_invariant2 i true
     true true))
     (= (color t i) (ite (= i 0) 0
                    (to_rep3
                    (let ((temp___534 (rec__red_black_trees__rbt__color
                                      (us_split_fields9 t))))
                    (select temp___534 i)))))) :pattern ((color t i)) ))))

(declare-fun same_nb_blacks (us_rep6) Bool)

(declare-fun same_nb_blacks__function_guard (Bool us_rep6) Bool)

(declare-datatypes ()
((us_split_fields10
 (mk___split_fields5
 (rec__red_black_trees__black_count__status Bool)(rec__red_black_trees__black_count__depth extended_index_type)(rec__red_black_trees__black_count__count extended_index_type)))))
(define-fun us_split_fields_Status__projection ((a us_split_fields10)) Bool 
  (rec__red_black_trees__black_count__status a))

(define-fun us_split_fields_Depth__projection ((a us_split_fields10)) extended_index_type 
  (rec__red_black_trees__black_count__depth a))

(define-fun us_split_fields_Count__projection ((a us_split_fields10)) extended_index_type 
  (rec__red_black_trees__black_count__count a))

(declare-datatypes ()
((us_split_fields__ref5
 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep7 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep_6__projection ((a us_rep7)) us_split_fields10 (us_split_fields11
                                                                 a))

(define-fun bool_eq17 ((a us_rep7)
  (b us_rep7)) Bool (ite (and
                         (and
                         (= (rec__red_black_trees__black_count__status
                            (us_split_fields11 a)) (rec__red_black_trees__black_count__status
                                                   (us_split_fields11 b)))
                         (= (to_rep
                            (rec__red_black_trees__black_count__depth
                            (us_split_fields11 a))) (to_rep
                                                    (rec__red_black_trees__black_count__depth
                                                    (us_split_fields11 b)))))
                         (= (to_rep
                            (rec__red_black_trees__black_count__count
                            (us_split_fields11 a))) (to_rep
                                                    (rec__red_black_trees__black_count__count
                                                    (us_split_fields11 b)))))
                    true false))

(declare-fun user_eq16 (us_rep7 us_rep7) Bool)

(declare-fun value__size10 () Int)

(declare-fun object__size10 (us_rep7) Int)

(declare-fun value__alignment10 () Int)

(declare-fun object__alignment10 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment10 a))))

(declare-fun red_black_trees__black_count__status__first__bit () Int)

(declare-fun red_black_trees__black_count__status__last__bit () Int)

(declare-fun red_black_trees__black_count__status__position () Int)

;; red_black_trees__black_count__status__first__bit_axiom
  (assert (<= 0 red_black_trees__black_count__status__first__bit))

;; red_black_trees__black_count__status__last__bit_axiom
  (assert
  (< red_black_trees__black_count__status__first__bit red_black_trees__black_count__status__last__bit))

;; red_black_trees__black_count__status__position_axiom
  (assert (<= 0 red_black_trees__black_count__status__position))

(declare-fun red_black_trees__black_count__depth__first__bit () Int)

(declare-fun red_black_trees__black_count__depth__last__bit () Int)

(declare-fun red_black_trees__black_count__depth__position () Int)

;; red_black_trees__black_count__depth__first__bit_axiom
  (assert (<= 0 red_black_trees__black_count__depth__first__bit))

;; red_black_trees__black_count__depth__last__bit_axiom
  (assert
  (< red_black_trees__black_count__depth__first__bit red_black_trees__black_count__depth__last__bit))

;; red_black_trees__black_count__depth__position_axiom
  (assert (<= 0 red_black_trees__black_count__depth__position))

(declare-fun red_black_trees__black_count__count__first__bit () Int)

(declare-fun red_black_trees__black_count__count__last__bit () Int)

(declare-fun red_black_trees__black_count__count__position () Int)

;; red_black_trees__black_count__count__first__bit_axiom
  (assert (<= 0 red_black_trees__black_count__count__first__bit))

;; red_black_trees__black_count__count__last__bit_axiom
  (assert
  (< red_black_trees__black_count__count__first__bit red_black_trees__black_count__count__last__bit))

;; red_black_trees__black_count__count__position_axiom
  (assert (<= 0 red_black_trees__black_count__count__position))

(declare-fun dummy16 () us_rep7)

(declare-datatypes ()
((black_count__ref (mk_black_count__ref (black_count__content us_rep7)))))
(define-fun black_count__ref___projection ((a black_count__ref)) us_rep7 
  (black_count__content a))

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int us_rep7))))))
(declare-fun slide4 ((Array Int us_rep7) Int Int) (Array Int us_rep7))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep7)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep7)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int us_rep7) Int Int (Array Int us_rep7) Int
  Int) (Array Int us_rep7))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep7)) (b (Array Int us_rep7)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 (us_rep7 Int) (Array Int us_rep7))

;; singleton_def
  (assert
  (forall ((v1 us_rep7))
  (forall ((i Int))
  (! (= (select (singleton5 v1 i) i) v1) :pattern ((select (singleton5 v1 i) i)) ))))

(define-fun bool_eq18 ((a (Array Int us_rep7)) (a__first Int) (a__last Int)
  (b (Array Int us_rep7)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_136 Int))
                           (=>
                           (and (<= a__first temp___idx_136)
                           (<= temp___idx_136 a__last))
                           (= (bool_eq17 (select a temp___idx_136)
                              (select b (+ (- b__first a__first) temp___idx_136))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep7)) (b (Array Int us_rep7)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq18 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_136 Int))
  (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last))
  (= (bool_eq17 (select a temp___idx_136)
     (select b (+ (- b__first a__first) temp___idx_136))) true))))))))

(declare-fun nb_blacks (us_rep6) (Array Int us_rep7))

(declare-fun nb_blacks__function_guard ((Array Int us_rep7) us_rep6) Bool)

;; same_nb_blacks__post_axiom
  (assert true)

;; same_nb_blacks__def_axiom
  (assert
  (forall ((t us_rep6))
  (! (= (= (same_nb_blacks t) true)
     (or
     (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 t))) 0)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___538 (model__
                          (rec__red_black_trees__rbt__struct
                          (us_split_fields9 t)))))
        (select temp___538 i)))) true)
     (= (rec__red_black_trees__black_count__status
        (us_split_fields11
        (let ((temp___537 (nb_blacks t))) (select temp___537 i)))) true)))))) :pattern (
  (same_nb_blacks t)) )))

(declare-fun eq (us_rep7 us_rep7) Bool)

(declare-fun eq__function_guard (Bool us_rep7 us_rep7) Bool)

;; eq__post_axiom
  (assert true)

;; eq__def_axiom
  (assert
  (forall ((x us_rep7) (y us_rep7))
  (! (= (= (eq x y) true)
     (and
     (=
     (= (rec__red_black_trees__black_count__status (us_split_fields11 x)) true)
     (= (rec__red_black_trees__black_count__status (us_split_fields11 y)) true))
     (= (to_rep
        (rec__red_black_trees__black_count__count (us_split_fields11 x))) 
     (to_rep
     (rec__red_black_trees__black_count__count (us_split_fields11 y)))))) :pattern (
  (eq x y)) )))

;; nb_blacks__post_axiom
  (assert
  (forall ((t us_rep6))
  (! (=>
     (and (dynamic_invariant6 t true true true)
     (not
     (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 t))) 0)))
     (let ((result (nb_blacks t)))
     (and
     (= (bool_eq17 (select result 0)
        (mk___rep5 (mk___split_fields5 (of_int 1) (of_rep 0) (of_rep 0)))) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___567 (model__
                          (rec__red_black_trees__rbt__struct
                          (us_split_fields9 t)))))
        (select temp___567 i)))) true)
     (and
     (and
     (=
     (= (rec__red_black_trees__black_count__status
        (us_split_fields11 (select result i))) true)
     (= (to_rep
        (rec__red_black_trees__black_count__count
        (us_split_fields11
        (select result (peek
                       (rec__red_black_trees__rbt__struct
                       (us_split_fields9 t)) i 0))))) (to_rep
                                                      (rec__red_black_trees__black_count__count
                                                      (us_split_fields11
                                                      (select result 
                                                      (peek
                                                      (rec__red_black_trees__rbt__struct
                                                      (us_split_fields9 t)) i
                                                      1)))))))
     (= (to_rep
        (rec__red_black_trees__black_count__depth
        (us_split_fields11 (select result i)))) (+ 1 (ite (< (to_rep
                                                             (rec__red_black_trees__black_count__depth
                                                             (us_split_fields11
                                                             (select result 
                                                             (peek
                                                             (rec__red_black_trees__rbt__struct
                                                             (us_split_fields9
                                                             t)) i 0))))) 
     (to_rep
     (rec__red_black_trees__black_count__depth
     (us_split_fields11
     (select result (peek
                    (rec__red_black_trees__rbt__struct (us_split_fields9 t))
                    i 1)))))) (to_rep
                              (rec__red_black_trees__black_count__depth
                              (us_split_fields11
                              (select result (peek
                                             (rec__red_black_trees__rbt__struct
                                             (us_split_fields9 t)) i 1))))) 
     (to_rep
     (rec__red_black_trees__black_count__depth
     (us_split_fields11
     (select result (peek
                    (rec__red_black_trees__rbt__struct (us_split_fields9 t))
                    i 0)))))))))
     (= (to_rep
        (rec__red_black_trees__black_count__count
        (us_split_fields11 (select result i)))) (+ (ite (= (to_rep3
                                                           (let ((temp___566 
                                                           (rec__red_black_trees__rbt__color
                                                           (us_split_fields9
                                                           t))))
                                                           (select temp___566 i))) 0)
                                                   1 0) (to_rep
                                                        (rec__red_black_trees__black_count__count
                                                        (us_split_fields11
                                                        (select result 
                                                        (peek
                                                        (rec__red_black_trees__rbt__struct
                                                        (us_split_fields9 t))
                                                        i 0)))))))))))))) :pattern (
  (nb_blacks t)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun c60b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun c61b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun c66b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun c67b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun c74b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun c75b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun c76b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun c80b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun c81b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun c82b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun y () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun c86b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun c87b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun c88b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun y1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun c93b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun c94b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun c95b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun c99b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun c100b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun c101b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun y2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(declare-fun c105b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun c106b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun c107b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun y3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun c113b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun c114b () us_rep6)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

;; invariant____post_axiom
  (assert true)

;; invariant____def_axiom
  (assert
  (forall ((t us_rep6))
  (! (= (= (invariant__ t) true)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (or
     (= (parent (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i) 0)
     (= (to_rep3
        (let ((temp___542 (rec__red_black_trees__rbt__color
                          (us_split_fields9 t))))
        (select temp___542 (parent
                           (rec__red_black_trees__rbt__struct
                           (us_split_fields9 t)) i)))) 1))
     (= (to_rep3
        (let ((temp___541 (rec__red_black_trees__rbt__color
                          (us_split_fields9 t))))
        (select temp___541 i))) 0))))
     (= (same_nb_blacks t) true))) :pattern ((invariant__ t)) )))

(define-fun dynamic_invariant8 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 0 2)) (in_range4 temp___expr_164)))

(define-fun dynamic_invariant9 ((temp___expr_207 us_rep1)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)) Bool (=> (= temp___do_toplevel_206 true)
                                      (=> (= temp___is_init_204 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_207))) 100))))

(define-fun default_initial_assumption5 ((temp___expr_209 us_rep1)
  (temp___skip_top_level_210 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_209))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_209)) (of_int 0))))

(define-fun dynamic_predicate ((temp___213 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___213))) 100))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq1 ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption6 ((temp___expr_201 us_rep)
  (temp___skip_top_level_202 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_202 true))
                                         (= (length temp___expr_201) 0)))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2)) ))))

(declare-sort count_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq19 ((x Int) (y4 Int)) Bool (ite (= x y4) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq17 (count_type count_type) Bool)

(declare-fun dummy17 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant10 ((temp___expr_146 Int)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_146)))

;; contains__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((v1 Int))
  (! (=>
     (and (dynamic_invariant3 t true true true) (dynamic_invariant v1 true
     true true))
     (= (= (contains2 t v1) true) (= (contains (values t) v1) true))) :pattern (
  (contains2 t v1)) ))))

(define-fun dynamic_invariant11 ((temp___expr_275 us_rep4)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)) Bool (= (tree_structure temp___expr_275) true))

(define-fun default_initial_assumption7 ((temp___expr_278 us_rep4)
  (temp___skip_top_level_279 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_278))) 0)
                                         (forall ((temp___281 Int))
                                         (=>
                                         (and (<= 1 temp___281)
                                         (<= temp___281 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_278)) temp___281)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_278)) temp___281)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_278)) temp___281)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_278)) temp___281)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_279 true))
                                         (= (size1 temp___expr_278) 0))))

(define-fun type_invariant2 ((temp___284 us_rep4)) Bool (= (tree_structure
                                                           temp___284) true))

;; ordered_leafs__post_axiom
  (assert true)

;; size__post_axiom
  (assert
  (forall ((f us_rep4))
  (! (=> (dynamic_invariant11 f true true true) (dynamic_invariant2 (size1 f)
     true false true)) :pattern ((size1 f)) )))

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant11 f true true true) (dynamic_invariant1 i true
     true true)) (=> (< (size1 f) i) (not (= (valid_root f i) true)))) :pattern (
  (valid_root f i)) ))))

;; parent__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant11 f true true true) (dynamic_invariant1 i true
     true true))
     (let ((result (parent1 f i)))
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size1 f) 0) (= result 0))) (dynamic_invariant2 result true false
     true)))) :pattern ((parent1 f i)) ))))

;; position__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant11 f true true true) (dynamic_invariant1 i true
     true true)) (not (= (parent1 f i) 0))) (dynamic_invariant4
     (position f i) true false true)) :pattern ((position f i)) ))))

;; peek__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant11 f true true true) (dynamic_invariant1 i true
     true true)) (dynamic_invariant4 d true true true))
     (let ((result (peek1 f i d)))
     (and
     (and
     (ite (not (= result 0))
     (and (= (position f result) d) (= (parent1 f result) i))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (= (parent1 f j) i) (not (= (position f j) d))))))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (and (= (parent1 f j) i) (= (position f j) d)) (= result j)))))
     (dynamic_invariant2 result true false true)))) :pattern ((peek1 f i d)) ))))

;; model____post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((root1 Int))
  (! (=>
     (and
     (and (dynamic_invariant11 f true true true) (dynamic_invariant1 root1
     true true true)) (= (valid_root f root1) true))
     (let ((result (model__1 f root1)))
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root1))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root1)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root1))
     (ite (and (not (= (parent1 f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent1 f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root1)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent1 f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq1
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant5 result true false true)))) :pattern (
  (model__1 f root1)) ))))

(define-fun default_initial_assumption8 ((temp___expr_261 us_rep3)
  (temp___skip_top_level_262 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_261))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_261))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_261))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_261))) 2)))

(define-fun default_initial_assumption9 ((temp___expr_268 (Array Int us_rep3))
  (temp___skip_top_level_269 Bool)) Bool (forall ((temp___270 Int))
                                         (=>
                                         (and (<= 1 temp___270)
                                         (<= temp___270 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_268 temp___270)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_268 temp___270)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_268 temp___270)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_268 temp___270)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

(declare-sort extended_index 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq20 ((x Int) (y4 Int)) Bool (ite (= x y4) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq18 (extended_index extended_index) Bool)

(declare-fun dummy18 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant12 ((temp___expr_194 Int)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)) Bool (=>
                                      (or (= temp___is_init_191 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_194)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant10 result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq21 ((x Int) (y4 Int)) Bool (ite (= x y4) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq19 (element_type element_type) Bool)

(declare-fun dummy19 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant13 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= 0 1)) (in_range9 temp___expr_188)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position2 Int))
  (! (=>
     (and (dynamic_invariant12 position2 true true true)
     (and (<= 1 position2) (<= position2 (last container))))
     (dynamic_invariant13 (get container position2) true false true)) :pattern (
  (get container position2)) ))))

(declare-sort element_type1 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq22 ((x Int) (y4 Int)) Bool (ite (= x y4) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq20 (element_type1 element_type1) Bool)

(declare-fun dummy20 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant14 ((temp___expr_234 Int)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)) Bool (=>
                                      (or (= temp___is_init_231 true)
                                      (<= 0 2147483647)) (in_range10
                                      temp___expr_234)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((item Int))
  (! (=> (dynamic_invariant14 item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range10 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant10 (length1 container)
  true false true) :pattern ((length1 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range10 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range10 item) (= (contains container item) true)))))
     (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty
                                                               container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((item Int))
  (! (=> (dynamic_invariant14 item true true true)
     (= (= (included_except left right item) true)
     (forall ((e Int))
     (=> (and (in_range10 e) (= (contains left e) true))
     (or (= (contains right e) true) (= e item)))))) :pattern ((included_except
                                                               left right
                                                               item)) ))))

(declare-fun t__split_fields () extended_index_type)

(declare-fun t__split_fields1 () extended_index_type)

(declare-fun t__split_fields2 () (Array Int us_rep3))

(declare-fun t__split_fields3 () (Array Int natural))

(declare-fun t__split_fields4 () (Array Int color_type))

(declare-fun x () Int)

(declare-fun y4 () Int)

(declare-fun t_old__split_fields () extended_index_type)

(declare-fun t_old__split_fields1 () extended_index_type)

(declare-fun t_old__split_fields2 () (Array Int us_rep3))

(declare-fun t_old__split_fields3 () (Array Int natural))

(declare-fun t_old__split_fields4 () (Array Int color_type))

(declare-fun n () Int)

(declare-fun o () color_type)

(declare-fun o1 () Int)

(declare-fun o2 () (Array Int color_type))

(declare-fun o3 () us_split_fields8)

(declare-fun temp___604 () us_rep6)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Bool)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () Int)

(declare-fun o24 () Int)

(declare-fun o25 () Int)

(declare-fun o26 () Int)

(declare-fun red_black_trees__insert__L_8__C101b__assume () Int)

(declare-fun o27 () Int)

(declare-fun red_black_trees__insert__L_8__B102b__y__assume () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun n1 () Int)

(declare-fun result () us_split_fields__ref4)

(declare-fun t_old__split_fields5 () us_split_fields8)

(declare-fun x1 () Int)

(declare-fun search_trees__insert__t__fields () us_split_fields6)

(declare-fun result1 () us_split_fields__ref4)

(declare-fun t__split_fields5 () us_split_fields8)

(declare-fun n2 () int__ref)

(declare-fun n3 () Int)

(declare-fun result2 () us_split_fields__ref4)

(declare-fun t__split_fields6 () us_split_fields8)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

(declare-fun t__split_fields7 () us_split_fields8)

(declare-fun x2 () Int)

(declare-fun y5 () Int)

(declare-fun t_old__split_fields6 () us_split_fields8)

(declare-fun n4 () Int)

(declare-fun rho () us_split_fields6)

(declare-fun result5 () us_split_fields__ref4)

(declare-fun t_old__split_fields7 () us_split_fields8)

(declare-fun result6 () Bool)

(declare-fun result7 () int__ref)

(declare-fun y6 () Int)

(declare-fun result8 () Bool)

(declare-fun result9 () Bool)

(declare-fun result10 () int__ref)

(declare-fun x3 () Int)

(declare-fun search_trees__right_rotate__t__fields () us_split_fields6)

(declare-fun result11 () us_split_fields__ref4)

(declare-fun t__split_fields8 () us_split_fields8)

(declare-fun n5 () int__ref)

(declare-fun n6 () Int)

(declare-fun result12 () us_split_fields__ref4)

(declare-fun t_old__split_fields8 () us_split_fields8)

(declare-fun t__split_fields9 () us_split_fields__ref4)

(declare-fun x4 () int__ref)

(declare-fun t_old__split_fields9 () us_split_fields__ref4)

(declare-fun n7 () int__ref)

(declare-fun t__split_fields10 () us_split_fields8)

(declare-fun x5 () Int)

(declare-fun t_old__split_fields10 () us_split_fields8)

(declare-fun n8 () Int)

(declare-fun rho1 () us_split_fields6)

;; H
  (assert (dynamic_invariant6
  (mk___rep4
  (mk___split_fields4
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) t__split_fields4)) true false true))

;; H
  (assert (in_range1 v))

;; H
  (assert
  (= (invariant__
     (mk___rep4
     (mk___split_fields4
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)) t__split_fields4))) true))

;; H
  (assert
  (< (size2
     (mk___rep4
     (mk___split_fields4
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)) t__split_fields4))) 100))

;; H
  (assert (=> (<= 0 100) (in_range3 x)))

;; H
  (assert (=> (<= 0 100) (in_range3 y4)))

;; H
  (assert
  (= result (mk___split_fields__ref4
            (mk___split_fields4
            (mk___rep3
            (mk___split_fields3 t_old__split_fields
            (mk___rep2
            (mk___split_fields2 t_old__split_fields1 t_old__split_fields2))
            t_old__split_fields3)) t_old__split_fields4))))

;; H
  (assert
  (= t_old__split_fields5 (mk___split_fields4
                          (mk___rep3
                          (mk___split_fields3 t__split_fields
                          (mk___rep2
                          (mk___split_fields2 t__split_fields1
                          t__split_fields2)) t__split_fields3))
                          t__split_fields4)))

;; H
  (assert (dynamic_invariant6 (mk___rep4 t_old__split_fields5) true false
  true))

;; H
  (assert
  (and
  (ite (= (contains
          (values
          (mk___rep3
          (mk___split_fields3 t__split_fields
          (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
          t__split_fields3))) v) true)
  (and
  (and
  (and
  (and
  (and
  (and (= x1 0)
  (= (oeq (values (mk___rep3 search_trees__insert__t__fields))
     (values
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)))) true))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (= (parent (mk___rep3 search_trees__insert__t__fields) j) (parent
                                                            (mk___rep3
                                                            (mk___split_fields3
                                                            t__split_fields
                                                            (mk___rep2
                                                            (mk___split_fields2
                                                            t__split_fields1
                                                            t__split_fields2))
                                                            t__split_fields3))
                                                            j)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=> (not (= (parent (mk___rep3 search_trees__insert__t__fields) j) 0))
  (= (position1 (mk___rep3 search_trees__insert__t__fields) j) (position1
                                                               (mk___rep3
                                                               (mk___split_fields3
                                                               t__split_fields
                                                               (mk___rep2
                                                               (mk___split_fields2
                                                               t__split_fields1
                                                               t__split_fields2))
                                                               t__split_fields3))
                                                               j))))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) j))) true)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) j))) true)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (forall ((d Int))
  (=> (and (<= 0 d) (<= d 1))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) j))) true)
  (= (peek
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)) j d) (peek
                             (mk___rep3 search_trees__insert__t__fields) j d))))))))
  (ite (= (= (size
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) 0) true)
  (and
  (and
  (and
  (and
  (and (not (= x1 0))
  (= (size (mk___rep3 search_trees__insert__t__fields)) 1))
  (= (root (mk___rep3 search_trees__insert__t__fields)) x1))
  (= (is_add__2
     (values
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3))) v
     (values (mk___rep3 search_trees__insert__t__fields))) true))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i (root (mk___rep3 search_trees__insert__t__fields))))
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) i))) true))))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (= (parent (mk___rep3 search_trees__insert__t__fields) i) (parent
                                                            (mk___rep3
                                                            (mk___split_fields3
                                                            t__split_fields
                                                            (mk___rep2
                                                            (mk___split_fields2
                                                            t__split_fields1
                                                            t__split_fields2))
                                                            t__split_fields3))
                                                            i)))))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= x1 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) x1))) true))
  (= (root (mk___rep3 search_trees__insert__t__fields)) (root
                                                        (mk___rep3
                                                        (mk___split_fields3
                                                        t__split_fields
                                                        (mk___rep2
                                                        (mk___split_fields2
                                                        t__split_fields1
                                                        t__split_fields2))
                                                        t__split_fields3)))))
  (= (size (mk___rep3 search_trees__insert__t__fields)) (+ (size
                                                           (mk___rep3
                                                           (mk___split_fields3
                                                           t__split_fields
                                                           (mk___rep2
                                                           (mk___split_fields2
                                                           t__split_fields1
                                                           t__split_fields2))
                                                           t__split_fields3))) 1)))
  (= (is_add__2
     (values
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3))) v
     (values (mk___rep3 search_trees__insert__t__fields))) true))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=> (not (= x1 j))
  (= (parent (mk___rep3 search_trees__insert__t__fields) j) (parent
                                                            (mk___rep3
                                                            (mk___split_fields3
                                                            t__split_fields
                                                            (mk___rep2
                                                            (mk___split_fields2
                                                            t__split_fields1
                                                            t__split_fields2))
                                                            t__split_fields3))
                                                            j))))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and (not (= x1 j))
  (not (= (parent (mk___rep3 search_trees__insert__t__fields) j) 0)))
  (= (position1 (mk___rep3 search_trees__insert__t__fields) j) (position1
                                                               (mk___rep3
                                                               (mk___split_fields3
                                                               t__split_fields
                                                               (mk___rep2
                                                               (mk___split_fields2
                                                               t__split_fields1
                                                               t__split_fields2))
                                                               t__split_fields3))
                                                               j))))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and (not (= x1 j))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) j))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) j))) true)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) j))) true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) j))) true)
  (not (= x1 j)))))))
  (forall ((d Int))
  (=> (and (<= 0 d) (<= d 1))
  (= (peek (mk___rep3 search_trees__insert__t__fields) x1 d) 0))))
  (= (peek
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3))
     (parent (mk___rep3 search_trees__insert__t__fields) x1)
     (position1 (mk___rep3 search_trees__insert__t__fields) x1)) 0))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (forall ((d Int))
  (=> (and (<= 0 d) (<= d 1))
  (=>
  (and
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__insert__t__fields)) j))) true)
  (not (= x1 j)))
  (or (not (= j (parent (mk___rep3 search_trees__insert__t__fields) x1)))
  (not (= d (position1 (mk___rep3 search_trees__insert__t__fields) x1)))))
  (= (peek
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)) j d) (peek
                             (mk___rep3 search_trees__insert__t__fields) j d))))))))))
  (and (dynamic_invariant3 (mk___rep3 search_trees__insert__t__fields) true
  true true) (in_range3 x1))))

;; H
  (assert
  (= result1 (mk___split_fields__ref4
             (mk___split_fields4
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3)) t__split_fields4))))

;; H
  (assert
  (= t__split_fields5 (mk___split_fields4
                      (mk___rep3 search_trees__insert__t__fields)
                      t__split_fields4)))

;; H
  (assert (not (= x1 0)))

;; H
  (assert (= n2 (mk_int__ref n)))

;; H
  (assert (= n3 n1))

;; H
  (assert (= (to_rep3 o) 1))

;; H
  (assert (and (<= 1 x1) (<= x1 100)))

;; H
  (assert (= o1 x1))

;; H
  (assert
  (= o2 (store (rec__red_black_trees__rbt__color t__split_fields5) o1 
  o)))

;; H
  (assert
  (= o3 (mk___split_fields4
        (rec__red_black_trees__rbt__struct t__split_fields5) o2)))

;; H
  (assert (= temp___604 (mk___rep4 o3)))

;; H
  (assert (= result2 (mk___split_fields__ref4 t__split_fields5)))

;; H
  (assert (= t__split_fields6 (us_split_fields9 temp___604)))

;; H
  (assert (= (mk___rep4 t_old__split_fields5) c66b))

;; H
  (assert (dynamic_invariant6 c66b true false true))

;; H
  (assert (= (mk___rep4 t__split_fields6) c67b))

;; H
  (assert (dynamic_invariant6 c67b true false true))

;; H
  (assert (= (same_nb_blacks c67b) true))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and (not (= i x1))
  (or (= (parent (rec__red_black_trees__rbt__struct t__split_fields6) i) 0)
  (= (to_rep3
     (select (rec__red_black_trees__rbt__color t__split_fields6) (parent
                                                                 (rec__red_black_trees__rbt__struct
                                                                 t__split_fields6)
                                                                 i))) 1)))
  (= (to_rep3 (select (rec__red_black_trees__rbt__color t__split_fields6) i)) 0)))))

;; H
  (assert
  (and (= o7 (root (rec__red_black_trees__rbt__struct t__split_fields6)))
  (and (in_range2 o7)
  (= o7 (to_rep
        (rec__search_trees__search_tree__root
        (us_split_fields7
        (rec__red_black_trees__rbt__struct t__split_fields6))))))))

;; H
  (assert (= o8 (ite (= x1 o7) true false)))

;; H
  (assert (= result4 (ite (not (= o8 true)) true false)))

;; H
  (assert (=> (= result4 true) (and (= o4 x1) (in_range2 x1))))

;; H
  (assert
  (=> (= result4 true)
  (and
  (= o5 (parent (rec__red_black_trees__rbt__struct t__split_fields6) o4))
  (and (in_range3 o5)
  (and
  (= o5 (parent1
        (rec__search_trees__search_tree__struct
        (us_split_fields7
        (rec__red_black_trees__rbt__struct t__split_fields6))) o4))
  (=> (= (size (rec__red_black_trees__rbt__struct t__split_fields6)) 0)
  (= o5 0)))))))

;; H
  (assert
  (=> (= result4 true)
  (and (= o6 (color (mk___rep4 t__split_fields6) o5))
  (and (in_range6 o6)
  (= o6 (ite (= o5 0) 0
        (to_rep3
        (select (rec__red_black_trees__rbt__color t__split_fields6) o5))))))))

;; H
  (assert (=> (= result4 true) (= result3 (ite (= o6 1) true false))))

;; H
  (assert (=> (not (= result4 true)) (= result3 false)))

;; H
  (assert (= result3 true))

;; H
  (assert (not (= x2 0)))

;; H
  (assert
  (= (size (rec__red_black_trees__rbt__struct t__split_fields7)) (size
                                                                 (rec__red_black_trees__rbt__struct
                                                                 t__split_fields6))))

;; H
  (assert
  (= (root (rec__red_black_trees__rbt__struct t__split_fields7)) (root
                                                                 (rec__red_black_trees__rbt__struct
                                                                 t__split_fields6))))

;; H
  (assert
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (rec__red_black_trees__rbt__struct t__split_fields7)) 
     x2))) true))

;; H
  (assert (= (color (mk___rep4 t__split_fields7) x2) 1))

;; H
  (assert
  (= (color (mk___rep4 t__split_fields7)
     (root (rec__red_black_trees__rbt__struct t__split_fields7))) 0))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and (not (= i x2))
  (or (= (parent (rec__red_black_trees__rbt__struct t__split_fields7) i) 0)
  (= (to_rep3
     (select (rec__red_black_trees__rbt__color t__split_fields7) (parent
                                                                 (rec__red_black_trees__rbt__struct
                                                                 t__split_fields7)
                                                                 i))) 1)))
  (= (to_rep3 (select (rec__red_black_trees__rbt__color t__split_fields7) i)) 0)))))

;; H
  (assert
  (= (oeq (values (rec__red_black_trees__rbt__struct t__split_fields7))
     (values (rec__red_black_trees__rbt__struct t__split_fields6))) true))

;; H
  (assert (= (same_nb_blacks (mk___rep4 t__split_fields7)) true))

;; H
  (assert
  (and
  (and
  (and
  (and (=> (<= 0 100) (in_range3 x2)) (dynamic_invariant6
  (mk___rep4 t__split_fields7) true true true))
  (=> (<= 0 100) (in_range3 y5))) (dynamic_invariant6
  (mk___rep4 t_old__split_fields6) false true true))
  (and
  (not (= x2 (root (rec__red_black_trees__rbt__struct t__split_fields7))))
  (= (color (mk___rep4 t__split_fields7)
     (parent (rec__red_black_trees__rbt__struct t__split_fields7) x2)) 1))))

;; H
  (assert (= result5 (mk___split_fields__ref4 t_old__split_fields6)))

;; H
  (assert (= t_old__split_fields7 t__split_fields7))

;; H
  (assert (and (= o9 x2) (in_range2 x2)))

;; H
  (assert
  (and
  (= o10 (parent (rec__red_black_trees__rbt__struct t__split_fields7) o9))
  (and (in_range3 o10)
  (and
  (= o10 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o9))
  (=> (= (size (rec__red_black_trees__rbt__struct t__split_fields7)) 0)
  (= o10 0))))))

;; H
  (assert (and (= o11 o10) (in_range2 o10)))

;; H
  (assert
  (and
  (= o12 (position1 (rec__red_black_trees__rbt__struct t__split_fields7) o11))
  (and (in_range5 o12)
  (= o12 (position
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o11)))))

;; H
  (assert (= result6 (ite (= o12 0) true false)))

;; H
  (assert (not (= result6 true)))

;; H
  (assert (and (= o13 x2) (in_range2 x2)))

;; H
  (assert
  (and
  (= o14 (parent (rec__red_black_trees__rbt__struct t__split_fields7) o13))
  (and (in_range3 o14)
  (and
  (= o14 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o13))
  (=> (= (size (rec__red_black_trees__rbt__struct t__split_fields7)) 0)
  (= o14 0))))))

;; H
  (assert (and (= o15 o14) (in_range2 o14)))

;; H
  (assert
  (and
  (= o16 (parent (rec__red_black_trees__rbt__struct t__split_fields7) o15))
  (and (in_range3 o16)
  (and
  (= o16 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o15))
  (=> (= (size (rec__red_black_trees__rbt__struct t__split_fields7)) 0)
  (= o16 0))))))

;; H
  (assert (and (= o17 o16) (in_range2 o16)))

;; H
  (assert
  (and
  (= o18 (peek (rec__red_black_trees__rbt__struct t__split_fields7) o17 0))
  (and (in_range3 o18)
  (= o18 (peek1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o17 0)))))

;; H
  (assert (= result7 (mk_int__ref y5)))

;; H
  (assert (= y6 o18))

;; H
  (assert
  (and (= o19 (color (mk___rep4 t__split_fields7) y6))
  (and (in_range6 o19)
  (= o19 (ite (= y6 0) 0
         (to_rep3
         (select (rec__red_black_trees__rbt__color t__split_fields7) 
         y6)))))))

;; H
  (assert (= result8 (ite (= o19 1) true false)))

;; H
  (assert (not (= result8 true)))

;; H
  (assert (and (= o20 x2) (in_range2 x2)))

;; H
  (assert
  (and
  (= o21 (parent (rec__red_black_trees__rbt__struct t__split_fields7) o20))
  (and (in_range3 o21)
  (and
  (= o21 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o20))
  (=> (= (size (rec__red_black_trees__rbt__struct t__split_fields7)) 0)
  (= o21 0))))))

;; H
  (assert (and (= o22 o21) (in_range2 o21)))

;; H
  (assert
  (and
  (= o23 (peek (rec__red_black_trees__rbt__struct t__split_fields7) o22 0))
  (and (in_range3 o23)
  (= o23 (peek1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o22 0)))))

;; H
  (assert (= result9 (ite (= x2 o23) true false)))

;; H
  (assert (=> (= result9 true) (and (= o24 x2) (in_range2 x2))))

;; H
  (assert
  (=> (= result9 true)
  (and
  (= o25 (parent (rec__red_black_trees__rbt__struct t__split_fields7) o24))
  (and (in_range3 o25)
  (and
  (= o25 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct t__split_fields7))) o24))
  (=> (= (size (rec__red_black_trees__rbt__struct t__split_fields7)) 0)
  (= o25 0)))))))

;; H
  (assert (=> (= result9 true) (= result10 (mk_int__ref x2))))

;; H
  (assert (=> (= result9 true) (= x3 o25)))

;; H
  (assert (=> (= result9 true) (and (= o26 x3) (in_range2 x3))))

;; H
  (assert
  (=> (= result9 true)
  (and
  (and
  (= (size (mk___rep3 search_trees__right_rotate__t__fields)) (size
                                                              (mk___rep3
                                                              (us_split_fields7
                                                              (rec__red_black_trees__rbt__struct
                                                              t__split_fields7)))))
  (and
  (ite (not
       (= (root
          (mk___rep3
          (us_split_fields7
          (rec__red_black_trees__rbt__struct t__split_fields7)))) o26))
  (= (root (mk___rep3 search_trees__right_rotate__t__fields)) (root
                                                              (mk___rep3
                                                              (us_split_fields7
                                                              (rec__red_black_trees__rbt__struct
                                                              t__split_fields7)))))
  (= (root (mk___rep3 search_trees__right_rotate__t__fields)) (peek
                                                              (mk___rep3
                                                              (us_split_fields7
                                                              (rec__red_black_trees__rbt__struct
                                                              t__split_fields7)))
                                                              o26 0)))
  (and
  (= (parent (mk___rep3 search_trees__right_rotate__t__fields) o26) (peek
                                                                    (mk___rep3
                                                                    (us_split_fields7
                                                                    (rec__red_black_trees__rbt__struct
                                                                    t__split_fields7)))
                                                                    o26 0))
  (and
  (= (position1 (mk___rep3 search_trees__right_rotate__t__fields) o26) 1)
  (and
  (= (parent (mk___rep3 search_trees__right_rotate__t__fields)
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26 0)) (parent
             (mk___rep3
             (us_split_fields7
             (rec__red_black_trees__rbt__struct t__split_fields7))) o26))
  (and
  (=>
  (not
  (= (root
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))) 
  o26))
  (= (position1 (mk___rep3 search_trees__right_rotate__t__fields)
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26 0)) (position1
             (mk___rep3
             (us_split_fields7
             (rec__red_black_trees__rbt__struct t__split_fields7))) o26)))
  (and
  (=>
  (not
  (= (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26 0) 1) 0))
  (and
  (= (parent (mk___rep3 search_trees__right_rotate__t__fields)
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26 0) 1)) o26)
  (= (position1 (mk___rep3 search_trees__right_rotate__t__fields)
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26 0) 1)) 0)))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (and (not (= j o26))
  (or
  (not
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) o26))
  (= (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) 1)))
  (or
  (or
  (or
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) 0)
  (not
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j)) o26)))
  (= (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j)) 1))
  (= (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) 0)))
  (= (parent (mk___rep3 search_trees__right_rotate__t__fields) j) (parent
                                                                  (mk___rep3
                                                                  (us_split_fields7
                                                                  (rec__red_black_trees__rbt__struct
                                                                  t__split_fields7)))
                                                                  j)))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (and
  (and (not (= j o26))
  (not
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) 0)))
  (or
  (not
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) o26))
  (= (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) 1)))
  (or
  (or
  (not
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j)) o26))
  (= (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j)) 1))
  (= (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     j) 0)))
  (= (position1 (mk___rep3 search_trees__right_rotate__t__fields) j) 
  (position1
  (mk___rep3
  (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7))) j)))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__right_rotate__t__fields)) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep3
             (us_split_fields7
             (rec__red_black_trees__rbt__struct t__split_fields7)))) j))) true))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep3
             (us_split_fields7
             (rec__red_black_trees__rbt__struct t__split_fields7)))) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__right_rotate__t__fields)) j))) true))))
  (and
  (= (oeq (values (mk___rep3 search_trees__right_rotate__t__fields))
     (values
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7))))) true)
  (and
  (= (peek (mk___rep3 search_trees__right_rotate__t__fields) o26 0) (peek
                                                                    (mk___rep3
                                                                    (us_split_fields7
                                                                    (rec__red_black_trees__rbt__struct
                                                                    t__split_fields7)))
                                                                    (peek
                                                                    (mk___rep3
                                                                    (us_split_fields7
                                                                    (rec__red_black_trees__rbt__struct
                                                                    t__split_fields7)))
                                                                    o26 0) 1))
  (and
  (=>
  (not
  (= (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26) 0))
  (= (peek (mk___rep3 search_trees__right_rotate__t__fields)
     (parent
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26)
     (position1
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26)) (peek
           (mk___rep3
           (us_split_fields7
           (rec__red_black_trees__rbt__struct t__split_fields7))) o26 0)))
  (and
  (= (peek (mk___rep3 search_trees__right_rotate__t__fields)
     (peek
     (mk___rep3
     (us_split_fields7 (rec__red_black_trees__rbt__struct t__split_fields7)))
     o26 0) 1) o26)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (forall ((d Int))
  (=> (and (<= 0 d) (<= d 1))
  (=>
  (and
  (and
  (and (or (not (= j o26)) (= d 1))
  (or
  (not
  (= j (parent
       (mk___rep3
       (us_split_fields7
       (rec__red_black_trees__rbt__struct t__split_fields7))) o26)))
  (not
  (= d (position1
       (mk___rep3
       (us_split_fields7
       (rec__red_black_trees__rbt__struct t__split_fields7))) o26)))))
  (or
  (not
  (= j (peek
       (mk___rep3
       (us_split_fields7
       (rec__red_black_trees__rbt__struct t__split_fields7))) o26 0)))
  (= d 0)))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep3 search_trees__right_rotate__t__fields)) j))) true))
  (= (peek (mk___rep3 search_trees__right_rotate__t__fields) j d) (peek
                                                                  (mk___rep3
                                                                  (us_split_fields7
                                                                  (rec__red_black_trees__rbt__struct
                                                                  t__split_fields7)))
                                                                  j d))))))))))))))))))))))
  (dynamic_invariant3 (mk___rep3 search_trees__right_rotate__t__fields) true
  true true))))

;; H
  (assert
  (=> (= result9 true)
  (= result11 (mk___split_fields__ref4 t__split_fields7))))

;; H
  (assert
  (=> (= result9 true)
  (= t__split_fields8 (mk___split_fields4
                      (mk___rep3 search_trees__right_rotate__t__fields)
                      (rec__red_black_trees__rbt__color t__split_fields7)))))

;; H
  (assert (=> (= result9 true) (= (mk___rep4 t_old__split_fields7) c99b)))

;; H
  (assert (=> (= result9 true) (dynamic_invariant6 c99b true false true)))

;; H
  (assert (=> (= result9 true) (= (mk___rep4 t__split_fields8) c100b)))

;; H
  (assert (=> (= result9 true) (dynamic_invariant6 c100b true false true)))

;; H
  (assert
  (=> (= result9 true)
  (and (= red_black_trees__insert__L_8__C101b__assume x3) (in_range2 x3))))

;; H
  (assert
  (=> (= result9 true) (= red_black_trees__insert__L_8__C101b__assume c101b)))

;; H
  (assert (=> (= result9 true) (in_range2 c101b)))

;; H
  (assert
  (=> (= result9 true)
  (and
  (= o27 (parent (rec__red_black_trees__rbt__struct (us_split_fields9 c100b))
         c101b))
  (and (in_range3 o27)
  (and
  (= o27 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct (us_split_fields9 c100b))))
         c101b))
  (=>
  (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 c100b))) 0)
  (= o27 0)))))))

;; H
  (assert
  (=> (= result9 true)
  (and (= red_black_trees__insert__L_8__B102b__y__assume o27) (in_range2
  o27))))

;; H
  (assert
  (=> (= result9 true) (= red_black_trees__insert__L_8__B102b__y__assume y2)))

;; H
  (assert (=> (= result9 true) (in_range2 y2)))

;; H
  (assert (=> (= result9 true) (= (same_nb_blacks c100b) true)))

;; H
  (assert
  (=> (= result9 true)
  (= result12 (mk___split_fields__ref4 t_old__split_fields7))))

;; H
  (assert (=> (= result9 true) (= t_old__split_fields8 t__split_fields8)))

;; H
  (assert (=> (= result9 true) (= n7 n5)))

;; H
  (assert
  (=> (= result9 true)
  (= t_old__split_fields9 (mk___split_fields__ref4 t_old__split_fields8))))

;; H
  (assert (=> (= result9 true) (= x4 (mk_int__ref x3))))

;; H
  (assert
  (=> (= result9 true)
  (= t__split_fields9 (mk___split_fields__ref4 t__split_fields8))))

;; H
  (assert
  (=> (= result9 true) (= rho1 search_trees__right_rotate__t__fields)))

;; H
  (assert (=> (= result9 true) (= n8 n6)))

;; H
  (assert
  (=> (= result9 true) (= t_old__split_fields10 t_old__split_fields8)))

;; H
  (assert (=> (= result9 true) (= x5 x3)))

;; H
  (assert (=> (= result9 true) (= t__split_fields10 t__split_fields8)))

;; H
  (assert (=> (not (= result9 true)) (= n7 (mk_int__ref n4))))

;; H
  (assert
  (=> (not (= result9 true))
  (= t_old__split_fields9 (mk___split_fields__ref4 t_old__split_fields7))))

;; H
  (assert (=> (not (= result9 true)) (= x4 (mk_int__ref x2))))

;; H
  (assert
  (=> (not (= result9 true))
  (= t__split_fields9 (mk___split_fields__ref4 t__split_fields7))))

;; H
  (assert (=> (not (= result9 true)) (= rho1 rho)))

;; H
  (assert (=> (not (= result9 true)) (= n8 n4)))

;; H
  (assert
  (=> (not (= result9 true)) (= t_old__split_fields10 t_old__split_fields7)))

;; H
  (assert (=> (not (= result9 true)) (= x5 x2)))

;; H
  (assert (=> (not (= result9 true)) (= t__split_fields10 t__split_fields7)))

;; H
  (assert
  (not
  (= (parent
     (rec__red_black_trees__rbt__struct
     (us_split_fields__content4 t__split_fields9))
     (parent
     (rec__red_black_trees__rbt__struct
     (us_split_fields__content4 t__split_fields9)) (int__content x4))) 0)))

;; H
  (assert (and (= o28 (int__content x4)) (in_range2 (int__content x4))))

;; H
  (assert
  (and
  (= o29 (parent
         (rec__red_black_trees__rbt__struct
         (us_split_fields__content4 t__split_fields9)) o28))
  (and (in_range3 o29)
  (and
  (= o29 (parent1
         (rec__search_trees__search_tree__struct
         (us_split_fields7
         (rec__red_black_trees__rbt__struct
         (us_split_fields__content4 t__split_fields9)))) o28))
  (=>
  (= (size
     (rec__red_black_trees__rbt__struct
     (us_split_fields__content4 t__split_fields9))) 0)
  (= o29 0))))))

(assert
;; WP_parameter_def
 ;; File "red_black_trees.ads", line 59, characters 0-0
  (not (in_range2 o29)))
(check-sat)
