;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort elementt 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 43)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (elementt elementt) Bool)

(declare-const dummy elementt)

(declare-datatypes ()
((elementt__ref (mk_elementt__ref (elementt__content elementt)))))
(define-fun elementt__ref___projection ((a elementt__ref)) elementt (elementt__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_313 Int)
  (temp___is_init_310 Bool) (temp___skip_constant_311 Bool)
  (temp___do_toplevel_312 Bool)) Bool (=>
                                      (or (= temp___is_init_310 true)
                                      (<= 0 43)) (in_range1 temp___expr_313)))

(declare-sort severityt 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (severityt severityt) Bool)

(declare-const dummy1 severityt)

(declare-datatypes ()
((severityt__ref (mk_severityt__ref (severityt__content severityt)))))
(define-fun severityt__ref___projection ((a severityt__ref)) severityt
  (severityt__content a))

(define-fun dynamic_invariant1 ((temp___expr_319 Int)
  (temp___is_init_316 Bool) (temp___skip_constant_317 Bool)
  (temp___do_toplevel_318 Bool)) Bool (=>
                                      (or (= temp___is_init_316 true)
                                      (<= 0 2)) (in_range2 temp___expr_319)))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-sort fileentrycountt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (fileentrycountt fileentrycountt) Bool)

(declare-const dummy4 fileentrycountt)

(declare-datatypes ()
((fileentrycountt__ref
 (mk_fileentrycountt__ref (fileentrycountt__content fileentrycountt)))))
(define-fun fileentrycountt__ref___projection ((a fileentrycountt__ref)) fileentrycountt
  (fileentrycountt__content a))

(declare-fun to_rep1 (fileentrycountt) Int)

(declare-fun of_rep1 (Int) fileentrycountt)

;; inversion_axiom
  (assert
  (forall ((x fileentrycountt))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x fileentrycountt)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int fileentrycountt))))))
(declare-fun slide1 ((Array Int fileentrycountt) Int
  Int) (Array Int fileentrycountt))

;; slide_eq
  (assert
  (forall ((a (Array Int fileentrycountt)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int fileentrycountt)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int fileentrycountt) Int Int
  (Array Int fileentrycountt) Int Int) (Array Int fileentrycountt))

;; concat_def
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (fileentrycountt Int) (Array Int fileentrycountt))

;; singleton_def
  (assert
  (forall ((v fileentrycountt))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int fileentrycountt)) (a__first Int)
  (a__last Int) (b (Array Int fileentrycountt)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_162 Int))
                           (=>
                           (and (<= a__first temp___idx_162)
                           (<= temp___idx_162 a__last))
                           (= (to_rep1 (select a temp___idx_162)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_162)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_162 Int))
  (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last))
  (= (to_rep1 (select a temp___idx_162)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_162)))))))))))

(declare-fun compare1 ((Array Int fileentrycountt) Int Int
  (Array Int fileentrycountt) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort logfilecountt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 17)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (logfilecountt logfilecountt) Bool)

(declare-const dummy5 logfilecountt)

(declare-datatypes ()
((logfilecountt__ref
 (mk_logfilecountt__ref (logfilecountt__content logfilecountt)))))
(define-fun logfilecountt__ref___projection ((a logfilecountt__ref)) logfilecountt
  (logfilecountt__content a))

(declare-fun to_rep2 (logfilecountt) Int)

(declare-fun of_rep2 (Int) logfilecountt)

;; inversion_axiom
  (assert
  (forall ((x logfilecountt))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x logfilecountt)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort logfileindext 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 17)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (logfileindext logfileindext) Bool)

(declare-const dummy6 logfileindext)

(declare-datatypes ()
((logfileindext__ref
 (mk_logfileindext__ref (logfileindext__content logfileindext)))))
(define-fun logfileindext__ref___projection ((a logfileindext__ref)) logfileindext
  (logfileindext__content a))

(declare-fun to_rep3 (logfileindext) Int)

(declare-fun of_rep3 (Int) logfileindext)

;; inversion_axiom
  (assert
  (forall ((x logfileindext))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x logfileindext)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int logfileindext))))))
(declare-fun slide2 ((Array Int logfileindext) Int
  Int) (Array Int logfileindext))

;; slide_eq
  (assert
  (forall ((a (Array Int logfileindext)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int logfileindext)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int logfileindext) Int Int
  (Array Int logfileindext) Int Int) (Array Int logfileindext))

;; concat_def
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (logfileindext Int) (Array Int logfileindext))

;; singleton_def
  (assert
  (forall ((v logfileindext))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int logfileindext)) (a__first Int)
  (a__last Int) (b (Array Int logfileindext)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_152 Int))
                           (=>
                           (and (<= a__first temp___idx_152)
                           (<= temp___idx_152 a__last))
                           (= (to_rep3 (select a temp___idx_152)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_152)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_152 Int))
  (=> (and (<= a__first temp___idx_152) (<= temp___idx_152 a__last))
  (= (to_rep3 (select a temp___idx_152)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_152)))))))))))

(declare-fun compare2 ((Array Int logfileindext) Int Int
  (Array Int logfileindext) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-const dummy7 (Array Int logfileindext))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int logfileindext)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int logfileindext)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int logfileindext)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int logfileindext))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int logfileindext))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int logfileindext))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int logfileindext)
  (Array Int logfileindext)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__auditlog__logfilelistt__list (Array Int logfileindext))(rec__auditlog__logfilelistt__head logfileindext)(rec__auditlog__logfilelistt__lasti logfileindext)(rec__auditlog__logfilelistt__length logfilecountt)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) (Array Int logfileindext)
  (rec__auditlog__logfilelistt__list a))

(define-fun us_split_fields_Head__projection ((a us_split_fields)) logfileindext
  (rec__auditlog__logfilelistt__head a))

(define-fun us_split_fields_LastI__projection ((a us_split_fields)) logfileindext
  (rec__auditlog__logfilelistt__lasti a))

(define-fun us_split_fields_Length__2__projection ((a us_split_fields)) logfilecountt
  (rec__auditlog__logfilelistt__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___8__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                 a))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__auditlog__logfilelistt__list
                            (us_split_fields1 a)) 1 17
                            (rec__auditlog__logfilelistt__list
                            (us_split_fields1 b)) 1 17) true)
                         (= (to_rep3
                            (rec__auditlog__logfilelistt__head
                            (us_split_fields1 a))) (to_rep3
                                                   (rec__auditlog__logfilelistt__head
                                                   (us_split_fields1 b)))))
                         (= (to_rep3
                            (rec__auditlog__logfilelistt__lasti
                            (us_split_fields1 a))) (to_rep3
                                                   (rec__auditlog__logfilelistt__lasti
                                                   (us_split_fields1 b)))))
                         (= (to_rep2
                            (rec__auditlog__logfilelistt__length
                            (us_split_fields1 a))) (to_rep2
                                                   (rec__auditlog__logfilelistt__length
                                                   (us_split_fields1 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const auditlog__logfilelistt__list__first__bit Int)

(declare-const auditlog__logfilelistt__list__last__bit Int)

(declare-const auditlog__logfilelistt__list__position Int)

;; auditlog__logfilelistt__list__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__list__first__bit))

;; auditlog__logfilelistt__list__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__list__first__bit auditlog__logfilelistt__list__last__bit))

;; auditlog__logfilelistt__list__position_axiom
  (assert (<= 0 auditlog__logfilelistt__list__position))

(declare-const auditlog__logfilelistt__head__first__bit Int)

(declare-const auditlog__logfilelistt__head__last__bit Int)

(declare-const auditlog__logfilelistt__head__position Int)

;; auditlog__logfilelistt__head__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__head__first__bit))

;; auditlog__logfilelistt__head__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__head__first__bit auditlog__logfilelistt__head__last__bit))

;; auditlog__logfilelistt__head__position_axiom
  (assert (<= 0 auditlog__logfilelistt__head__position))

(declare-const auditlog__logfilelistt__lasti__first__bit Int)

(declare-const auditlog__logfilelistt__lasti__last__bit Int)

(declare-const auditlog__logfilelistt__lasti__position Int)

;; auditlog__logfilelistt__lasti__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__lasti__first__bit))

;; auditlog__logfilelistt__lasti__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__lasti__first__bit auditlog__logfilelistt__lasti__last__bit))

;; auditlog__logfilelistt__lasti__position_axiom
  (assert (<= 0 auditlog__logfilelistt__lasti__position))

(declare-const auditlog__logfilelistt__length__first__bit Int)

(declare-const auditlog__logfilelistt__length__last__bit Int)

(declare-const auditlog__logfilelistt__length__position Int)

;; auditlog__logfilelistt__length__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__length__first__bit))

;; auditlog__logfilelistt__length__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__length__first__bit auditlog__logfilelistt__length__last__bit))

;; auditlog__logfilelistt__length__position_axiom
  (assert (<= 0 auditlog__logfilelistt__length__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ()
((logfilelistt__ref (mk_logfilelistt__ref (logfilelistt__content us_rep1)))))
(define-fun logfilelistt__ref___projection ((a logfilelistt__ref)) us_rep1
  (logfilelistt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep))))))
(declare-fun slide3 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_149 Int))
                           (=>
                           (and (<= a__first temp___idx_149)
                           (<= temp___idx_149 a__last))
                           (= (bool_eq1 (select a temp___idx_149)
                              (select b (+ (- b__first a__first) temp___idx_149))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_149 Int))
  (=> (and (<= a__first temp___idx_149) (<= temp___idx_149 a__last))
  (= (bool_eq1 (select a temp___idx_149)
     (select b (+ (- b__first a__first) temp___idx_149))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort filestatust 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (filestatust filestatust) Bool)

(declare-const dummy9 filestatust)

(declare-datatypes ()
((filestatust__ref (mk_filestatust__ref (filestatust__content filestatust)))))
(define-fun filestatust__ref___projection ((a filestatust__ref)) filestatust
  (filestatust__content a))

(declare-fun to_rep4 (filestatust) Int)

(declare-fun of_rep4 (Int) filestatust)

;; inversion_axiom
  (assert
  (forall ((x filestatust))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x filestatust)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int filestatust))))))
(declare-fun slide4 ((Array Int filestatust) Int
  Int) (Array Int filestatust))

;; slide_eq
  (assert
  (forall ((a (Array Int filestatust)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int filestatust)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int filestatust) Int Int (Array Int filestatust)
  Int Int) (Array Int filestatust))

;; concat_def
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 (filestatust Int) (Array Int filestatust))

;; singleton_def
  (assert
  (forall ((v filestatust))
  (forall ((i Int))
  (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int filestatust)) (a__first Int)
  (a__last Int) (b (Array Int filestatust)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_150 Int))
                           (=>
                           (and (<= a__first temp___idx_150)
                           (<= temp___idx_150 a__last))
                           (= (to_rep4 (select a temp___idx_150)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_150)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_150 Int))
  (=> (and (<= a__first temp___idx_150) (<= temp___idx_150 a__last))
  (= (to_rep4 (select a temp___idx_150)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_150)))))))))))

(declare-fun compare3 ((Array Int filestatust) Int Int
  (Array Int filestatust) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare3 a a_first a_last b b_first b_last) 0)
     (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern (
  (compare3 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare3 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq6 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare3 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare3 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq6 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare3 a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant2 ((temp___expr_925 Int)
  (temp___is_init_922 Bool) (temp___skip_constant_923 Bool)
  (temp___do_toplevel_924 Bool)) Bool (=>
                                      (or (= temp___is_init_922 true)
                                      (<= 1 17)) (in_range6 temp___expr_925)))

(declare-fun nextlistindex (Int) Int)

(declare-fun nextlistindex__function_guard (Int Int) Bool)

;; nextlistindex__post_axiom
  (assert
  (forall ((value Int))
  (! (=> (dynamic_invariant2 value true true true) (dynamic_invariant2
     (nextlistindex value) true false true)) :pattern ((nextlistindex value)) )))

;; nextlistindex__def_axiom
  (assert
  (forall ((value Int))
  (! (=> (dynamic_invariant2 value true true true)
     (= (nextlistindex value) (ite (= value 17) 1 (+ value 1)))) :pattern (
  (nextlistindex value)) )))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const elementid Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const severity Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const user (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const description (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_919 Int)
  (temp___is_init_916 Bool) (temp___skip_constant_917 Bool)
  (temp___do_toplevel_918 Bool)) Bool (=>
                                      (or (= temp___is_init_916 true)
                                      (<= 0 17)) (in_range5 temp___expr_919)))

(define-fun dynamic_invariant5 ((temp___expr_931 Int)
  (temp___is_init_928 Bool) (temp___skip_constant_929 Bool)
  (temp___do_toplevel_930 Bool)) Bool (=>
                                      (or (= temp___is_init_928 true)
                                      (<= 0 2)) (in_range7 temp___expr_931)))

(define-fun dynamic_invariant6 ((temp___expr_1055 Int)
  (temp___is_init_1052 Bool) (temp___skip_constant_1053 Bool)
  (temp___do_toplevel_1054 Bool)) Bool (=>
                                       (or (= temp___is_init_1052 true)
                                       (<= 0 1024)) (in_range4
                                       temp___expr_1055)))

(declare-const logfiles (Array Int us_rep))

(declare-const currentlogfile Int)

(declare-const logfilesstatus (Array Int filestatust))

(declare-const usedlogfiles__split_fields (Array Int logfileindext))

(declare-const usedlogfiles__split_fields1 logfileindext)

(declare-const usedlogfiles__split_fields2 logfileindext)

(declare-const usedlogfiles__split_fields3 logfilecountt)

(declare-const logfileentries (Array Int fileentrycountt))

(declare-const thefile us_rep)

(declare-const o filestatust)

(declare-const o1 (Array Int filestatust))

(declare-const o2 Int)

(declare-const o3 logfilecountt)

(declare-const o4 (Array Int logfileindext))

(declare-const o5 logfileindext)

(declare-const o6 logfileindext)

(declare-const o7 logfilecountt)

(declare-const temp___1408 (Array Int logfileindext))

(declare-const temp___14081 logfileindext)

(declare-const temp___14082 logfileindext)

(declare-const temp___14083 logfilecountt)

(declare-const o8 Int)

(declare-const o9 logfileindext)

(declare-const o10 (Array Int logfileindext))

(declare-const o11 logfileindext)

(declare-const o12 logfileindext)

(declare-const o13 logfilecountt)

(declare-const temp___1410 (Array Int logfileindext))

(declare-const temp___14101 logfileindext)

(declare-const temp___14102 logfileindext)

(declare-const temp___14103 logfilecountt)

(declare-const o14 logfileindext)

(declare-const o15 (Array Int logfileindext))

(declare-const o16 (Array Int logfileindext))

(declare-const o17 logfileindext)

(declare-const o18 logfileindext)

(declare-const o19 logfilecountt)

(declare-const temp___1413 (Array Int logfileindext))

(declare-const temp___14131 logfileindext)

(declare-const temp___14132 logfileindext)

(declare-const temp___14133 logfilecountt)

(declare-const o20 fileentrycountt)

(declare-const o21 (Array Int fileentrycountt))

(declare-const currentlogfile1 Int)

(declare-const result (Array Int filestatust))

(declare-const logfilesstatus1 (Array Int filestatust))

(declare-const result1 (Array Int logfileindext))

(declare-const result2 logfileindext)

(declare-const result3 logfileindext)

(declare-const result4 logfilecountt)

(declare-const usedlogfiles__split_fields4 (Array Int logfileindext))

(declare-const usedlogfiles__split_fields5 logfileindext)

(declare-const usedlogfiles__split_fields6 logfileindext)

(declare-const usedlogfiles__split_fields7 logfilecountt)

(declare-const result5 us_split_fields__ref)

(declare-const usedlogfiles__split_fields8 us_split_fields)

(declare-const result6 us_split_fields__ref)

(declare-const usedlogfiles__split_fields9 us_split_fields)

(declare-const result7 t__ref)

(declare-const thefile1 us_rep)

(declare-const auditsystemfault Bool)

(declare-const thefile2 us_rep)

(declare-const result8 map__ref3)

(declare-const logfiles1 (Array Int us_rep))

(declare-const result9 map__ref1)

(declare-const logfileentries1 (Array Int fileentrycountt))

(declare-const logfiles2 map__ref3)

(declare-const currentlogfile2 int__ref)

(declare-const logfilesstatus2 map__ref4)

(declare-const usedlogfiles__split_fields10 us_split_fields__ref)

(declare-const logfileentries2 map__ref1)

(declare-const auditsystemfault1 bool__ref)

(declare-const thefile3 t__ref)

(declare-const logfiles3 (Array Int us_rep))

(declare-const currentlogfile3 Int)

(declare-const logfilesstatus3 (Array Int filestatust))

(declare-const usedlogfiles__split_fields11 us_split_fields)

(declare-const logfileentries3 (Array Int fileentrycountt))

(declare-const auditsystemfault2 Bool)

(declare-const thefile4 us_rep)

;; H
  (assert (in_range6 currentlogfile))

;; H
  (assert (in_range1 elementid))

;; H
  (assert (in_range2 severity))

;; H
  (assert (< (to_rep2 usedlogfiles__split_fields3) 17))

;; H
  (assert (in_range6 currentlogfile1))

;; H
  (assert (= (to_rep4 o) 2))

;; H
  (assert (= o1 (store logfilesstatus currentlogfile1 o)))

;; H
  (assert (= (mk_map__ref4 result) (mk_map__ref4 logfilesstatus)))

;; H
  (assert (= logfilesstatus1 o1))

;; H
  (assert
  (and (= o2 (+ (to_rep2 usedlogfiles__split_fields3) 1)) (in_range5
  (+ (to_rep2 usedlogfiles__split_fields3) 1))))

;; H
  (assert (= (to_rep2 o3) o2))

;; H
  (assert (= usedlogfiles__split_fields o4))

;; H
  (assert (= usedlogfiles__split_fields1 o5))

;; H
  (assert (= usedlogfiles__split_fields2 o6))

;; H
  (assert (= o3 o7))

;; H
  (assert (= temp___1408 o4))

;; H
  (assert (= temp___14081 o5))

;; H
  (assert (= temp___14082 o6))

;; H
  (assert (= temp___14083 o7))

;; H
  (assert (= result1 usedlogfiles__split_fields))

;; H
  (assert (= result2 usedlogfiles__split_fields1))

;; H
  (assert (= result3 usedlogfiles__split_fields2))

;; H
  (assert (= result4 usedlogfiles__split_fields3))

;; H
  (assert (= temp___1408 usedlogfiles__split_fields4))

;; H
  (assert (= temp___14081 usedlogfiles__split_fields5))

;; H
  (assert (= temp___14082 usedlogfiles__split_fields6))

;; H
  (assert (= temp___14083 usedlogfiles__split_fields7))

;; H
  (assert
  (and (= o8 (nextlistindex (to_rep3 usedlogfiles__split_fields6)))
  (and (in_range6 o8)
  (= o8 (ite (= (to_rep3 usedlogfiles__split_fields6) 17) 1
        (+ (to_rep3 usedlogfiles__split_fields6) 1))))))

;; H
  (assert (= (to_rep3 o9) o8))

;; H
  (assert (= usedlogfiles__split_fields4 o10))

;; H
  (assert (= usedlogfiles__split_fields5 o11))

;; H
  (assert (= o9 o12))

;; H
  (assert (= usedlogfiles__split_fields7 o13))

;; H
  (assert (= temp___1410 o10))

;; H
  (assert (= temp___14101 o11))

;; H
  (assert (= temp___14102 o12))

;; H
  (assert (= temp___14103 o13))

;; H
  (assert
  (= result5 (mk___split_fields__ref
             (mk___split_fields usedlogfiles__split_fields4
             usedlogfiles__split_fields5 usedlogfiles__split_fields6
             usedlogfiles__split_fields7))))

;; H
  (assert
  (= usedlogfiles__split_fields8 (mk___split_fields temp___1410 temp___14101
                                 temp___14102 temp___14103)))

;; H
  (assert (= (to_rep3 o14) currentlogfile1))

;; H
  (assert
  (= o15 (store (rec__auditlog__logfilelistt__list
                usedlogfiles__split_fields8) (to_rep3
                                             (rec__auditlog__logfilelistt__lasti
                                             usedlogfiles__split_fields8))
  o14)))

;; H
  (assert (= o15 o16))

;; H
  (assert
  (= (rec__auditlog__logfilelistt__head usedlogfiles__split_fields8)
  o17))

;; H
  (assert
  (= (rec__auditlog__logfilelistt__lasti usedlogfiles__split_fields8)
  o18))

;; H
  (assert
  (= (rec__auditlog__logfilelistt__length usedlogfiles__split_fields8)
  o19))

;; H
  (assert (= temp___1413 o16))

;; H
  (assert (= temp___14131 o17))

;; H
  (assert (= temp___14132 o18))

;; H
  (assert (= temp___14133 o19))

;; H
  (assert (= result6 (mk___split_fields__ref usedlogfiles__split_fields8)))

;; H
  (assert
  (= usedlogfiles__split_fields9 (mk___split_fields temp___1413 temp___14131
                                 temp___14132 temp___14133)))

;; H
  (assert (= result7 (mk_t__ref thefile)))

;; H
  (assert (= thefile1 (select logfiles currentlogfile1)))

;; H
  (assert (= result8 (mk_map__ref3 logfiles)))

;; H
  (assert (= logfiles1 (store logfiles currentlogfile1 thefile2)))

;; H
  (assert (= (to_rep1 o20) 1))

;; H
  (assert (= o21 (store logfileentries currentlogfile1 o20)))

;; H
  (assert (= result9 (mk_map__ref1 logfileentries)))

;; H
  (assert (= logfileentries1 o21))

;; H
  (assert (= thefile3 (mk_t__ref thefile2)))

;; H
  (assert (= auditsystemfault1 (mk_bool__ref auditsystemfault)))

;; H
  (assert (= logfileentries2 (mk_map__ref1 logfileentries1)))

;; H
  (assert
  (= usedlogfiles__split_fields10 (mk___split_fields__ref
                                  usedlogfiles__split_fields9)))

;; H
  (assert (= logfilesstatus2 (mk_map__ref4 logfilesstatus1)))

;; H
  (assert (= currentlogfile2 (mk_int__ref currentlogfile1)))

;; H
  (assert (= logfiles2 (mk_map__ref3 logfiles1)))

;; H
  (assert (= thefile4 thefile2))

;; H
  (assert (= auditsystemfault2 auditsystemfault))

;; H
  (assert (= logfileentries3 logfileentries1))

;; H
  (assert (= usedlogfiles__split_fields11 usedlogfiles__split_fields9))

;; H
  (assert (= logfilesstatus3 logfilesstatus1))

;; H
  (assert (= currentlogfile3 currentlogfile1))

;; H
  (assert (= logfiles3 logfiles1))

(assert
;; WP_parameter_def
 ;; File "auditlog.adb", line 43, characters 0-0
  (not
  (= (to_rep2
     (rec__auditlog__logfilelistt__length
     (us_split_fields__content usedlogfiles__split_fields10))) (+ (to_rep2
                                                                  usedlogfiles__split_fields3) 1))))
(check-sat)
(exit)
