;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-sort sixty 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 60)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (sixty sixty) Bool)

(declare-fun dummy1 () sixty)

(declare-datatypes () ((sixty__ref (mk_sixty__ref (sixty__content sixty)))))
(define-fun sixty__ref___projection ((a sixty__ref)) sixty (sixty__content a))

(declare-fun to_rep (sixty) Int)

(declare-fun of_rep (Int) sixty)

;; inversion_axiom
  (assert
  (forall ((x sixty)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x sixty)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort twenty_four 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 24)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (twenty_four twenty_four) Bool)

(declare-fun dummy2 () twenty_four)

(declare-datatypes ()
((twenty_four__ref (mk_twenty_four__ref (twenty_four__content twenty_four)))))
(define-fun twenty_four__ref___projection ((a twenty_four__ref)) twenty_four 
  (twenty_four__content a))

(declare-fun to_rep1 (twenty_four) Int)

(declare-fun of_rep1 (Int) twenty_four)

;; inversion_axiom
  (assert
  (forall ((x twenty_four))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x twenty_four)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-fun dummy3 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy4 () (Array Int character))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__instr__instrument__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) 
  (rec__instr__instrument__name a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (= (bool_eq4
                           (rec__instr__instrument__name
                           (us_split_fields1 a)) 1 14
                           (rec__instr__instrument__name
                           (us_split_fields1 b)) 1 14) true)
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun instr__instrument__name__first__bit () Int)

(declare-fun instr__instrument__name__last__bit () Int)

(declare-fun instr__instrument__name__position () Int)

;; instr__instrument__name__first__bit_axiom
  (assert (<= 0 instr__instrument__name__first__bit))

;; instr__instrument__name__last__bit_axiom
  (assert
  (< instr__instrument__name__first__bit instr__instrument__name__last__bit))

;; instr__instrument__name__position_axiom
  (assert (<= 0 instr__instrument__name__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((instrument__ref (mk_instrument__ref (instrument__content us_rep)))))
(define-fun instrument__ref___projection ((a instrument__ref)) us_rep 
  (instrument__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__instr__clock__seconds sixty)(rec__instr__clock__minutes sixty)(rec__instr__clock__hours twenty_four)(rec__instr__instrument__name1 (Array Int character))(rec__ext__1 us_private)))))
(define-fun us_split_fields_Seconds__projection ((a us_split_fields2)) sixty 
  (rec__instr__clock__seconds a))

(define-fun us_split_fields_Minutes__projection ((a us_split_fields2)) sixty 
  (rec__instr__clock__minutes a))

(define-fun us_split_fields_Hours__projection ((a us_split_fields2)) twenty_four 
  (rec__instr__clock__hours a))

(define-fun us_split_fields_Name5__projection ((a us_split_fields2)) (Array Int character) 
  (rec__instr__instrument__name1 a))

(define-fun us_split_fields_5__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_10__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (sixty sixty twenty_four us_private) us_private)

(declare-fun extract__seconds (us_private) sixty)

;; extract__seconds__conv
  (assert
  (forall ((seconds sixty) (minutes sixty))
  (forall ((hours twenty_four))
  (forall ((rec__ext__2 us_private))
  (= (extract__seconds (hide_ext__ seconds minutes hours rec__ext__2)) seconds)))))

(declare-fun extract__minutes (us_private) sixty)

;; extract__minutes__conv
  (assert
  (forall ((seconds sixty) (minutes sixty))
  (forall ((hours twenty_four))
  (forall ((rec__ext__2 us_private))
  (= (extract__minutes (hide_ext__ seconds minutes hours rec__ext__2)) minutes)))))

(declare-fun extract__hours (us_private) twenty_four)

;; extract__hours__conv
  (assert
  (forall ((seconds sixty) (minutes sixty))
  (forall ((hours twenty_four))
  (forall ((rec__ext__2 us_private))
  (= (extract__hours (hide_ext__ seconds minutes hours rec__ext__2)) hours)))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep
                                         (mk___split_fields
                                         (rec__instr__instrument__name1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__instr__clock__seconds
                                         (us_split_fields3 a))
                                         (rec__instr__clock__minutes
                                         (us_split_fields3 a))
                                         (rec__instr__clock__hours
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1
                                         (mk___split_fields1
                                         (extract__seconds
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__minutes
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__hours
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__instr__instrument__name
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__instr__clock__seconds (us_split_fields3 a))) 
                         (to_rep
                         (rec__instr__clock__seconds (us_split_fields3 b))))
                         (= (to_rep
                            (rec__instr__clock__minutes (us_split_fields3 a))) 
                         (to_rep
                         (rec__instr__clock__minutes (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__instr__clock__hours (us_split_fields3 a))) 
                         (to_rep1
                         (rec__instr__clock__hours (us_split_fields3 b)))))
                         (= (bool_eq4
                            (rec__instr__instrument__name1
                            (us_split_fields3 a)) 1 14
                            (rec__instr__instrument__name1
                            (us_split_fields3 b)) 1 14) true))
                    true false))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun us_tag1 () Int)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun instr__clock__seconds__first__bit () Int)

(declare-fun instr__clock__seconds__last__bit () Int)

(declare-fun instr__clock__seconds__position () Int)

;; instr__clock__seconds__first__bit_axiom
  (assert (<= 0 instr__clock__seconds__first__bit))

;; instr__clock__seconds__last__bit_axiom
  (assert
  (< instr__clock__seconds__first__bit instr__clock__seconds__last__bit))

;; instr__clock__seconds__position_axiom
  (assert (<= 0 instr__clock__seconds__position))

(declare-fun instr__clock__minutes__first__bit () Int)

(declare-fun instr__clock__minutes__last__bit () Int)

(declare-fun instr__clock__minutes__position () Int)

;; instr__clock__minutes__first__bit_axiom
  (assert (<= 0 instr__clock__minutes__first__bit))

;; instr__clock__minutes__last__bit_axiom
  (assert
  (< instr__clock__minutes__first__bit instr__clock__minutes__last__bit))

;; instr__clock__minutes__position_axiom
  (assert (<= 0 instr__clock__minutes__position))

(declare-fun instr__clock__hours__first__bit () Int)

(declare-fun instr__clock__hours__last__bit () Int)

(declare-fun instr__clock__hours__position () Int)

;; instr__clock__hours__first__bit_axiom
  (assert (<= 0 instr__clock__hours__first__bit))

;; instr__clock__hours__last__bit_axiom
  (assert (< instr__clock__hours__first__bit instr__clock__hours__last__bit))

;; instr__clock__hours__position_axiom
  (assert (<= 0 instr__clock__hours__position))

(declare-fun instr__instrument__name__first__bit1 () Int)

(declare-fun instr__instrument__name__last__bit1 () Int)

(declare-fun instr__instrument__name__position1 () Int)

;; instr__instrument__name__first__bit_axiom
  (assert (<= 0 instr__instrument__name__first__bit1))

;; instr__instrument__name__last__bit_axiom
  (assert
  (< instr__instrument__name__first__bit1 instr__instrument__name__last__bit1))

;; instr__instrument__name__position_axiom
  (assert (<= 0 instr__instrument__name__position1))

(declare-fun dummy6 () us_rep1)

(declare-datatypes ()
((clock__ref (mk_clock__ref (clock__content us_rep1)))))
(define-fun clock__ref___projection ((a clock__ref)) us_rep1 (clock__content
                                                             a))

(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 1)) 32)
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 2)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 3)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 4)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 5)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 6)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 7)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 8)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 9)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 10)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 11)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 12)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 13)) 32))
     (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 14)) 32)) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(define-fun default_initial_assumption ((temp___expr_250 us_rep1)
  (temp___skip_top_level_251 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_250) 
                                         us_tag1)
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__instr__clock__seconds
                                            (us_split_fields3
                                            temp___expr_250))) 0)
                                         (= (to_rep
                                            (rec__instr__clock__minutes
                                            (us_split_fields3
                                            temp___expr_250))) 0))
                                         (= (to_rep1
                                            (rec__instr__clock__hours
                                            (us_split_fields3
                                            temp___expr_250))) 0))
                                         (= (rec__instr__instrument__name1
                                            (us_split_fields3
                                            temp___expr_250)) (temp___String_Literal_163
                                                              Tuple0)))))

(declare-fun x__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun inc () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_236 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (or (= temp___is_init_233 true)
                                      (<= 0 60)) (in_range1 temp___expr_236)))

(define-fun dynamic_invariant3 ((temp___expr_242 Int)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)) Bool (=>
                                      (or (= temp___is_init_239 true)
                                      (<= 0 24)) (in_range2 temp___expr_242)))

(define-fun default_initial_assumption1 ((temp___expr_161 us_rep)
  (temp___skip_top_level_162 Bool)) Bool (and
                                         (= (attr__tag temp___expr_161) 
                                         us_tag)
                                         (= (rec__instr__instrument__name
                                            (us_split_fields1
                                            temp___expr_161)) (temp___String_Literal_163
                                                              Tuple0))))

(declare-fun x__split_fields () sixty)

(declare-fun x__split_fields1 () sixty)

(declare-fun x__split_fields2 () twenty_four)

(declare-fun x__split_fields3 () (Array Int character))

(declare-fun x__split_fields4 () us_private)

(declare-fun ninc () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () sixty)

(declare-fun o3 () sixty)

(declare-fun o4 () sixty)

(declare-fun o5 () twenty_four)

(declare-fun o6 () (Array Int character))

(declare-fun o7 () us_private)

(declare-fun temp___367 () sixty)

(declare-fun temp___3671 () sixty)

(declare-fun temp___3672 () twenty_four)

(declare-fun temp___3673 () (Array Int character))

(declare-fun temp___3674 () us_private)

(declare-fun temp___3675 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () sixty)

(declare-fun o13 () sixty)

(declare-fun o14 () sixty)

(declare-fun o15 () twenty_four)

(declare-fun o16 () (Array Int character))

(declare-fun o17 () us_private)

(declare-fun temp___369 () sixty)

(declare-fun temp___3691 () sixty)

(declare-fun temp___3692 () twenty_four)

(declare-fun temp___3693 () (Array Int character))

(declare-fun temp___3694 () us_private)

(declare-fun temp___3695 () Int)

(declare-fun result () sixty)

(declare-fun result1 () sixty)

(declare-fun result2 () twenty_four)

(declare-fun result3 () (Array Int character))

(declare-fun result4 () us_private)

(declare-fun x__split_fields5 () sixty)

(declare-fun x__split_fields6 () sixty)

(declare-fun x__split_fields7 () twenty_four)

(declare-fun x__split_fields8 () (Array Int character))

(declare-fun x__split_fields9 () us_private)

(declare-fun result5 () Int)

(declare-fun ninc1 () Int)

(declare-fun result6 () sixty)

(declare-fun result7 () sixty)

(declare-fun result8 () twenty_four)

(declare-fun result9 () (Array Int character))

(declare-fun result10 () us_private)

(declare-fun x__split_fields10 () sixty)

(declare-fun x__split_fields11 () sixty)

(declare-fun x__split_fields12 () twenty_four)

(declare-fun x__split_fields13 () (Array Int character))

(declare-fun x__split_fields14 () us_private)

;; H
  (assert (in_range inc))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range ninc)))

;; H
  (assert
  (and (= o (+ (to_rep x__split_fields) inc)) (in_range
  (+ (to_rep x__split_fields) inc))))

;; H
  (assert (= o1 (mod2 o 60)))

;; H
  (assert (= (to_rep o2) o1))

;; H
  (assert (= o2 o3))

;; H
  (assert (= x__split_fields1 o4))

;; H
  (assert (= x__split_fields2 o5))

;; H
  (assert (= x__split_fields3 o6))

;; H
  (assert (= x__split_fields4 o7))

;; H
  (assert (= temp___367 o3))

;; H
  (assert (= temp___3671 o4))

;; H
  (assert (= temp___3672 o5))

;; H
  (assert (= temp___3673 o6))

;; H
  (assert (= temp___3674 o7))

;; H
  (assert (= x__attr__tag temp___3675))

;; H
  (assert (= result x__split_fields))

;; H
  (assert (= result1 x__split_fields1))

;; H
  (assert (= result2 x__split_fields2))

;; H
  (assert (= result3 x__split_fields3))

;; H
  (assert (= result4 x__split_fields4))

;; H
  (assert (= temp___367 x__split_fields5))

;; H
  (assert (= temp___3671 x__split_fields6))

;; H
  (assert (= temp___3672 x__split_fields7))

;; H
  (assert (= temp___3673 x__split_fields8))

;; H
  (assert (= temp___3674 x__split_fields9))

;; H
  (assert
  (and (= o8 (+ (to_rep x__split_fields5) inc)) (in_range
  (+ (to_rep x__split_fields5) inc))))

;; H
  (assert (= o9 (div1 o8 60)))

;; H
  (assert (= result5 ninc))

;; H
  (assert (= ninc1 o9))

;; H
  (assert
  (and (= o10 (+ (to_rep x__split_fields6) ninc1)) (in_range
  (+ (to_rep x__split_fields6) ninc1))))

;; H
  (assert (= o11 (mod2 o10 60)))

;; H
  (assert (= (to_rep o12) o11))

;; H
  (assert (= x__split_fields5 o13))

;; H
  (assert (= o12 o14))

;; H
  (assert (= x__split_fields7 o15))

;; H
  (assert (= x__split_fields8 o16))

;; H
  (assert (= x__split_fields9 o17))

;; H
  (assert (= temp___369 o13))

;; H
  (assert (= temp___3691 o14))

;; H
  (assert (= temp___3692 o15))

;; H
  (assert (= temp___3693 o16))

;; H
  (assert (= temp___3694 o17))

;; H
  (assert (= x__attr__tag temp___3695))

;; H
  (assert (= result6 x__split_fields5))

;; H
  (assert (= result7 x__split_fields6))

;; H
  (assert (= result8 x__split_fields7))

;; H
  (assert (= result9 x__split_fields8))

;; H
  (assert (= result10 x__split_fields9))

;; H
  (assert (= temp___369 x__split_fields10))

;; H
  (assert (= temp___3691 x__split_fields11))

;; H
  (assert (= temp___3692 x__split_fields12))

;; H
  (assert (= temp___3693 x__split_fields13))

;; H
  (assert (= temp___3694 x__split_fields14))

(assert
;; WP_parameter_def
 ;; File "instr.ads", line 61, characters 0-0
  (not (in_range (+ (to_rep x__split_fields11) ninc1))))
(check-sat)
