;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun read_variable (us_private) Bool)

(declare-fun read_variable__function_guard (Bool us_private) Bool)

;; read_variable__post_axiom
  (assert true)

(declare-fun simply_true (tuple0) Bool)

(declare-fun simply_true__function_guard (Bool tuple0) Bool)

;; simply_true__post_axiom
  (assert true)

(declare-const variable_constant Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const ordinary_constant Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun both_are_true (tuple0) Bool)

(declare-fun both_are_true__function_guard (Bool tuple0) Bool)

;; both_are_true__post_axiom
  (assert true)

;; both_are_true__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (both_are_true us_void_param) true)
     (and (= variable_constant true) (= ordinary_constant true))) :pattern (
  (both_are_true us_void_param)) )))

;; ordinary_constant__def_axiom
  (assert (= ordinary_constant (simply_true Tuple0)))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 6, characters 0-0
  (not true))
(check-sat)
(exit)
