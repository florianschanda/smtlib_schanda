(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, int -> (int,integer) farray

logic set : map, int, int, (int,integer) farray -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:(int,integer) farray [set(m, i, j, a)]. (get(set(m, i, j, a), i,
  j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:(int,integer) farray [get(set(m, i, j, a), i2, j2)| set(m, i, j,
  a), get(m, i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j,
  a), i2, j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, int, int -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq5 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def4 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq5(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_133:int. forall temp___idx_134:int.
  (((((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))) and
  (bool_eq4(get(a, temp___idx_133, temp___idx_134), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_133),
  ((b__first_2 - a__first_2) + temp___idx_134)), 1, 3) = true)) or
  (not (((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))))))) ->
  (bool_eq5(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_133:int. forall temp___idx_134:int.
  ((((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))) ->
  (bool_eq4(get(a, temp___idx_133, temp___idx_134), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_133),
  ((b__first_2 - a__first_2) + temp___idx_134)), 1, 3) = true))))) ->
  (bool_eq5(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = false))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_133:int. forall temp___idx_134:int.
  ((((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))) ->
  (bool_eq4(get(a, temp___idx_133, temp___idx_134), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_133),
  ((b__first_2 - a__first_2) + temp___idx_134)), 1, 3) = true)))))))

logic dummy3 : map

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

logic user_eq3 : map, map -> bool

type map__ref2 = { map__content2 : (int,map) farray
}

logic slide2 : (int,map) farray, int, int -> (int,map) farray

axiom slide_eq1 :
  (forall a:(int,map) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,map) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,map) farray, int, int, (int,map) farray, int,
  int -> (int,map) farray

axiom concat_def1 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : map, int -> (int,map) farray

axiom singleton_def1 :
  (forall v:map.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq6 : (int,map) farray, int, int, (int,map) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,map) farray. forall a__first:int. forall a__last:int.
  forall b:(int,map) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and (bool_eq5((a[temp___idx_135]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_135)]), 1, 3, 1, 3) = true)) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) -> (bool_eq5((a[temp___idx_135]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_135)]), 1, 3, 1, 3) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) -> (bool_eq5((a[temp___idx_135]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_135)]), 1, 3, 1, 3) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (int,map) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y1:int [bool_eq7(x, y1)]. (((x = y1) -> (bool_eq7(x,
  y1) = true)) and ((not (x = y1)) -> (bool_eq7(x, y1) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t12b__ref = { t12b__content : integer
}

function t12b__ref___projection(a: t12b__ref) : integer = (a).t12b__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq8(x: us_t, y1: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y1).elts,
  to_rep(first((y1).rt)), to_rep(last((y1).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,integer) farray

logic dummy6 : t

type t13b__ref = { t13b__content : us_t
}

function t13b__ref___projection(a: t13b__ref) : us_t = (a).t13b__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y1:int [bool_eq9(x, y1)]. (((x = y1) -> (bool_eq9(x,
  y1) = true)) and ((not (x = y1)) -> (bool_eq9(x, y1) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t14b__ref = { t14b__content : integer
}

function t14b__ref___projection(a: t14b__ref) : integer = (a).t14b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t1, y1: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y1).elts1,
  to_rep(first2((y1).rt1)), to_rep(last2((y1).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,integer) farray

logic dummy9 : t1

type t15b__ref = { t15b__content : us_t1
}

function t15b__ref___projection(a: t15b__ref) : us_t1 = (a).t15b__content

logic p_slice__x__aggregate_def : map -> (int,map) farray

axiom def_axiom :
  (forall temp___219:map.
  (forall temp___220:int.
  ((p_slice__x__aggregate_def(temp___219)[temp___220]) = temp___219)))

logic temp___221 : (int,integer) farray -> map

axiom def_axiom1 :
  (forall temp___223:(int,integer) farray.
  (forall temp___224:int. forall temp___225:int. (get(temp___221(temp___223),
  temp___224, temp___225) = temp___223)))

logic temp___226 : int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___228:int.
  (forall temp___229:int.
  ((temp___226(temp___228)[temp___229]) = of_rep(temp___228))))

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,integer) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,integer) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,integer) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__alignment4(a)))

function bool_eq11(x: us_t2, y1: us_t2) : bool = bool_eq4((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y1).elts2,
  to_rep(first4((y1).rt2)), to_rep(last4((y1).rt2)))

logic user_eq8 : us_t2, us_t2 -> bool

logic dummy10 : (int,integer) farray

logic dummy11 : t2

type tt1B__ref = { tt1B__content : us_t2
}

function tt1B__ref___projection(a: tt1B__ref) : us_t2 = (a).tt1B__content

logic temp___230 : int, int, int -> us_t1

axiom def_axiom3 :
  (forall temp___232:int. forall temp___233:int. forall temp___234:int.
  ((dynamic_property4(1, 3, temp___233, temp___234) ->
  ((to_rep(first2((temp___230(temp___232, temp___233,
  temp___234)).rt1)) = temp___233) and (to_rep(last2((temp___230(temp___232,
  temp___233, temp___234)).rt1)) = temp___234))) and
  (forall temp___235:int. (((temp___230(temp___232, temp___233,
  temp___234)).elts1[temp___235]) = of_rep(temp___232)))))

 (* File "p_slice.adb", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,map) farray. forall i3:int. forall i21:int. forall i22:int.
  forall i1:int. forall temp___237:(int,integer) farray.
  forall temp___2371:t1. forall temp___238:(int,integer) farray.
  forall temp___2381:t. forall o:(int,integer) farray.
  forall temp___242:(int,integer) farray. forall temp___2421:t.
  forall result:map__ref2. forall x1:(int,map) farray.
  forall result1:int__ref. forall i31:int. forall result2:int__ref.
  forall i211:int. forall result3:int__ref. forall i221:int.
  forall result4:int__ref. forall i11:int. (((result = { map__content2 = x
  }) and (x1 = p_slice__x__aggregate_def(temp___221(temp___226(0))))) ->
  ((x1 = y) -> (((result1 = { int__content = i3 }) and (i31 = 1)) ->
  (((result2 = { int__content = i21 }) and (i211 = 1)) -> (((result3 = {
  int__content = i22 }) and (i221 = 1)) -> (((result4 = { int__content = i1
  }) and (i11 = 1)) -> ((((to_rep(first2((temp___230(1, i11,
  2)).rt1)) = i11) and ((to_rep(last2((temp___230(1, i11, 2)).rt1)) = 2) and
  ({ elts1 = temp___237; rt1 = temp___2371 } = temp___230(1, i11, 2)))) and
  ((((to_rep(first2(temp___2371)) <= to_rep(last2(temp___2371))) and
  (((i11 <= 2) and
  (((to_rep(last2(temp___2371)) - to_rep(first2(temp___2371))) + 1) = ((2 - i11) + 1))) or
  ((not (i11 <= 2)) and
  (((to_rep(last2(temp___2371)) - to_rep(first2(temp___2371))) + 1) = 0)))) or
  ((not (to_rep(first2(temp___2371)) <= to_rep(last2(temp___2371)))) and
  (((i11 <= 2) and (0 = ((2 - i11) + 1))) or (not (i11 <= 2))))) and
  ((slide(temp___237, to_rep(first2(temp___2371)), i11) = temp___238) and
  (mk(i11, 2) = temp___2381)))) -> (((((i11 <= 2) -> (((1 <= i11) and
  (i11 <= 3)) and ((1 <= 2) and (2 <= 3)))) and (o = get((x1[i31]), i211,
  i221))) and ((o = temp___242) and (mk(i11, 2) = temp___2421))) ->
  (((to_rep(first(temp___2381)) <= to_rep(last(temp___2381))) ->
  (((to_rep(first(temp___2421)) <= to_rep(last(temp___2421))) ->
  (((to_rep(last(temp___2381)) - to_rep(first(temp___2381))) + 1) = ((to_rep(last(temp___2421)) - to_rep(first(temp___2421))) + 1))) and
  ((not (to_rep(first(temp___2421)) <= to_rep(last(temp___2421)))) ->
  (((to_rep(last(temp___2381)) - to_rep(first(temp___2381))) + 1) = 0)))) and
  ((not (to_rep(first(temp___2381)) <= to_rep(last(temp___2381)))) ->
  ((to_rep(first(temp___2421)) <= to_rep(last(temp___2421))) ->
  (0 = ((to_rep(last(temp___2421)) - to_rep(first(temp___2421))) + 1))))))))))))))
