(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type us_split_fields = { rec__foo__t__f : integer; rec__foo__t__f2 : integer;
rec__foo__t__f3 : integer; rec__foo__t__f4 : integer; rec__foo__t__f5 :
integer
}

function us_split_fields_F__projection(a1: us_split_fields) : integer =
  (a1).rec__foo__t__f

function us_split_fields_F2__projection(a1: us_split_fields) : integer =
  (a1).rec__foo__t__f2

function us_split_fields_F3__projection(a1: us_split_fields) : integer =
  (a1).rec__foo__t__f3

function us_split_fields_F4__projection(a1: us_split_fields) : integer =
  (a1).rec__foo__t__f4

function us_split_fields_F5__projection(a1: us_split_fields) : integer =
  (a1).rec__foo__t__f5

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a1: us_split_fields__ref) : us_split_fields =
  (a1).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a1: us_rep) : us_split_fields =
  (a1).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a1:us_rep. forall b1:us_rep [bool_eq2(a1, b1)].
  (((((((to_rep(((a1).us_split_fields1).rec__foo__t__f) = to_rep(((b1).us_split_fields1).rec__foo__t__f)) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f2) = to_rep(((b1).us_split_fields1).rec__foo__t__f2))) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f3) = to_rep(((b1).us_split_fields1).rec__foo__t__f3))) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f4) = to_rep(((b1).us_split_fields1).rec__foo__t__f4))) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f5) = to_rep(((b1).us_split_fields1).rec__foo__t__f5))) ->
  (bool_eq2(a1, b1) = true)) and
  ((not (((((to_rep(((a1).us_split_fields1).rec__foo__t__f) = to_rep(((b1).us_split_fields1).rec__foo__t__f)) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f2) = to_rep(((b1).us_split_fields1).rec__foo__t__f2))) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f3) = to_rep(((b1).us_split_fields1).rec__foo__t__f3))) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f4) = to_rep(((b1).us_split_fields1).rec__foo__t__f4))) and
  (to_rep(((a1).us_split_fields1).rec__foo__t__f5) = to_rep(((b1).us_split_fields1).rec__foo__t__f5)))) ->
  (bool_eq2(a1, b1) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a1:integer. forall a2:integer. forall a3:integer.
  forall a4:integer. forall a5:integer. (0 <= object__size({
  us_split_fields1 = { rec__foo__t__f = a1; rec__foo__t__f2 = a2;
  rec__foo__t__f3 = a3; rec__foo__t__f4 = a4; rec__foo__t__f5 = a5 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a1:integer. forall a2:integer. forall a3:integer.
  forall a4:integer. forall a5:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__foo__t__f = a1; rec__foo__t__f2 = a2;
  rec__foo__t__f3 = a3; rec__foo__t__f4 = a4; rec__foo__t__f5 = a5 } })))

logic foo__t__f__first__bit : int

logic foo__t__f__last__bit : int

logic foo__t__f__position : int

axiom foo__t__f__first__bit_axiom : (0 <= foo__t__f__first__bit)

axiom foo__t__f__last__bit_axiom :
  (foo__t__f__first__bit <  foo__t__f__last__bit)

axiom foo__t__f__position_axiom : (0 <= foo__t__f__position)

logic foo__t__f2__first__bit : int

logic foo__t__f2__last__bit : int

logic foo__t__f2__position : int

axiom foo__t__f2__first__bit_axiom : (0 <= foo__t__f2__first__bit)

axiom foo__t__f2__last__bit_axiom :
  (foo__t__f2__first__bit <  foo__t__f2__last__bit)

axiom foo__t__f2__position_axiom : (0 <= foo__t__f2__position)

logic foo__t__f3__first__bit : int

logic foo__t__f3__last__bit : int

logic foo__t__f3__position : int

axiom foo__t__f3__first__bit_axiom : (0 <= foo__t__f3__first__bit)

axiom foo__t__f3__last__bit_axiom :
  (foo__t__f3__first__bit <  foo__t__f3__last__bit)

axiom foo__t__f3__position_axiom : (0 <= foo__t__f3__position)

logic foo__t__f4__first__bit : int

logic foo__t__f4__last__bit : int

logic foo__t__f4__position : int

axiom foo__t__f4__first__bit_axiom : (0 <= foo__t__f4__first__bit)

axiom foo__t__f4__last__bit_axiom :
  (foo__t__f4__first__bit <  foo__t__f4__last__bit)

axiom foo__t__f4__position_axiom : (0 <= foo__t__f4__position)

logic foo__t__f5__first__bit : int

logic foo__t__f5__last__bit : int

logic foo__t__f5__position : int

axiom foo__t__f5__first__bit_axiom : (0 <= foo__t__f5__first__bit)

axiom foo__t__f5__last__bit_axiom :
  (foo__t__f5__first__bit <  foo__t__f5__last__bit)

axiom foo__t__f5__position_axiom : (0 <= foo__t__f5__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : integer

type t__ref = { t__content : us_rep
}

function t__ref___projection(a1: t__ref) : us_rep = (a1).t__content

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "foo.ads", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall c:int. forall r__split_fields:integer.
  forall r__split_fields1:integer. forall r__split_fields2:integer.
  forall r__split_fields3:integer. forall r__split_fields4:integer.
  forall foo__p__y__fields:integer. forall foo__p__y__fields1:integer.
  forall foo__p__y__fields2:integer. forall foo__p__y__fields3:integer.
  forall foo__p__y__fields4:integer. forall foo__p__x__fields:integer.
  forall foo__p__x__fields1:integer. forall foo__p__x__fields2:integer.
  forall foo__p__x__fields3:integer. forall foo__p__x__fields4:integer.
  forall result:integer. forall result1:integer. forall result2:integer.
  forall result3:integer. forall result4:integer.
  forall r__split_fields5:integer. forall r__split_fields6:integer.
  forall r__split_fields7:integer. forall r__split_fields8:integer.
  forall r__split_fields9:integer. forall result5:integer.
  forall result6:integer. forall result7:integer. forall result8:integer.
  forall result9:integer. forall r__split_fields10:integer.
  forall r__split_fields11:integer. forall r__split_fields12:integer.
  forall r__split_fields13:integer. forall r__split_fields14:integer.
  forall result10:int. forall c1:int. forall c2:int.
  forall r__split_fields15:integer. forall r__split_fields16:integer.
  forall r__split_fields17:integer. forall r__split_fields18:integer.
  forall r__split_fields19:integer. forall c3:int.
  forall r__split_fields20:integer. forall r__split_fields21:integer.
  forall r__split_fields22:integer. forall r__split_fields23:integer.
  forall r__split_fields24:integer. ((in_range(a) and (in_range(b) and
  ((((-2147483648) <= 2147483647) -> in_range(c)) and
  ((((((result = r__split_fields) and ((result1 = r__split_fields1) and
  ((result2 = r__split_fields2) and ((result3 = r__split_fields3) and
  (result4 = r__split_fields4))))) and
  ((r__split_fields5 = foo__p__x__fields) and
  ((r__split_fields6 = foo__p__x__fields1) and
  ((r__split_fields7 = foo__p__x__fields2) and
  ((r__split_fields8 = foo__p__x__fields3) and
  (r__split_fields9 = foo__p__x__fields4)))))) and
  (((result5 = r__split_fields5) and ((result6 = r__split_fields6) and
  ((result7 = r__split_fields7) and ((result8 = r__split_fields8) and
  (result9 = r__split_fields9))))) and
  ((r__split_fields10 = foo__p__y__fields) and
  ((r__split_fields11 = foo__p__y__fields1) and
  ((r__split_fields12 = foo__p__y__fields2) and
  ((r__split_fields13 = foo__p__y__fields3) and
  (r__split_fields14 = foo__p__y__fields4))))))) and ((result10 = c) and
  (c1 = to_rep(r__split_fields10)))) and
  ((((r__split_fields15 = r__split_fields10) and
  ((r__split_fields16 = r__split_fields11) and
  ((r__split_fields17 = r__split_fields12) and
  ((r__split_fields18 = r__split_fields13) and
  (r__split_fields19 = r__split_fields14))))) and (c1 = c2)) and
  (((r__split_fields20 = r__split_fields10) and
  ((r__split_fields21 = r__split_fields11) and
  ((r__split_fields22 = r__split_fields12) and
  ((r__split_fields23 = r__split_fields13) and
  (r__split_fields24 = r__split_fields14))))) and (c3 = c1))))))) ->
  (c2 = a)))
