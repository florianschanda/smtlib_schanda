;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const res Int)

(declare-const math__sqrt__result Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const temp___134 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Bool)

(declare-const result Int)

(declare-const res1 Int)

(declare-const result1 Bool)

(declare-const res2 Int)

(declare-const result2 Int)

(declare-const res3 Int)

(declare-const result3 Bool)

(declare-const res4 Int)

(declare-const res5 Int)

(declare-const res6 Int)

(declare-const res7 Int)

(declare-const result4 Int)

(declare-const math__sqrt__result1 Int)

(declare-const math__sqrt__result2 Int)

(declare-const math__sqrt__result3 Int)

(declare-const res8 Int)

(declare-const math__sqrt__result4 Int)

(declare-const res9 Int)

(declare-const math__sqrt__result5 Int)

(define-fun res10 () int__ref (mk_int__ref res6))

(declare-const result5 Int)

;; H
  (assert (in_range1 x))

;; H
  (assert (<= 0 x))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref res)))

;; H
  (assert (= res1 0))

;; H
  (assert (in_range1 res1))

;; H
  (assert (and (= o (+ res1 1)) (in_range1 (+ res1 1))))

;; H
  (assert (and (= o1 (+ res1 1)) (in_range1 (+ res1 1))))

;; H
  (assert (= o2 (* o1 o)))

;; H
  (assert (and (= o3 o2) (in_range1 o2)))

;; H
  (assert (= result1 (ite (<= o3 x) true false)))

;; H
  (assert (=> (= result1 true) (= temp___134 res1)))

;; H
  (assert
  (=> (= result1 true)
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 res2))
  (<= (* (+ res2 1) (+ res2 1)) x))))

;; H
  (assert
  (=> (= result1 true) (and (= o4 (+ res2 1)) (in_range1 (+ res2 1)))))

;; H
  (assert (=> (= result1 true) (= res2 result2)))

;; H
  (assert (=> (= result1 true) (= res3 o4)))

;; H
  (assert
  (=> (= result1 true) (and (= o5 (+ res3 1)) (in_range1 (+ res3 1)))))

;; H
  (assert
  (=> (= result1 true) (and (= o6 (+ res3 1)) (in_range1 (+ res3 1)))))

;; H
  (assert (=> (= result1 true) (= o7 (* o6 o5))))

;; H
  (assert (=> (= result1 true) (and (= o8 o7) (in_range1 o7))))

;; H
  (assert (=> (= result1 true) (= o9 (ite (<= o8 x) true false))))

;; H
  (assert
  (=> (= result1 true) (= result3 (ite (not (= o9 true)) true false))))

;; H
  (assert (=> (= result1 true) (= result3 true)))

;; H
  (assert (=> (= result1 true) (= res3 res4)))

;; H
  (assert (=> (= result1 true) (= res5 res3)))

;; H
  (assert (=> (= result1 true) (= res10 (mk_int__ref res4))))

;; H
  (assert (=> (= result1 true) (= res7 res5)))

;; H
  (assert (=> (not (= result1 true)) (= res1 res6)))

;; H
  (assert (=> (not (= result1 true)) (= res7 res1)))

;; H
  (assert (= math__sqrt__result1 math__sqrt__result2))

;; H
  (assert (= math__sqrt__result3 math__sqrt__result1))

;; H
  (assert (= (mk_int__ref result4) (mk_int__ref math__sqrt__result)))

;; H
  (assert (= math__sqrt__result1 res6))

;; H
  (assert
  (= (mk_int__ref math__sqrt__result4) (mk_int__ref math__sqrt__result2)))

;; H
  (assert (= (mk_int__ref res8) res10))

;; H
  (assert (= math__sqrt__result5 math__sqrt__result3))

;; H
  (assert (= res9 res7))

;; H
  (assert (=> (= (= x 0) true) (= math__sqrt__result4 0)))

;; H
  (assert (=> (= (> x 0) true) (< 0 math__sqrt__result4)))

;; H
  (assert (= result5 math__sqrt__result4))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= 0 math__sqrt__result4)))
(check-sat)
(exit)
