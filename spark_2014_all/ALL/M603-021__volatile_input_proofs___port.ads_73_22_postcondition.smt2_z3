;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort u32 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq (u32 u32) Bool)

(declare-fun dummy () u32)

(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))

(define-fun dynamic_invariant ((temp___expr_141 (_ BitVec 32))
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool true)

(declare-sort s1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 17)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (s1 s1) Bool)

(declare-fun dummy1 () s1)

(declare-datatypes () ((s1__ref (mk_s1__ref (s1__content s1)))))
(define-fun s1__ref___projection ((a s1__ref)) s1 (s1__content a))

(define-fun dynamic_invariant1 ((temp___expr_153 Int)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true)
                                      (<= 0 17)) (in_range1 temp___expr_153)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort source 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (source source) Bool)

(declare-fun dummy2 () source)

(declare-datatypes ()
((source__ref (mk_source__ref (source__content source)))))
(define-fun source__ref___projection ((a source__ref)) source (source__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_159 (_ BitVec 32))
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)) Bool true)

(declare-sort target 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (target target) Bool)

(declare-fun dummy3 () target)

(declare-datatypes ()
((target__ref (mk_target__ref (target__content target)))))
(define-fun target__ref___projection ((a target__ref)) target (target__content
                                                              a))

(define-fun dynamic_invariant3 ((temp___expr_165 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)) Bool (=>
                                      (or (= temp___is_init_162 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_165)))

(declare-fun c ((_ BitVec 32)) Int)

(declare-fun c__function_guard (Int (_ BitVec 32)) Bool)

;; c__post_axiom
  (assert
  (forall ((s (_ BitVec 32)))
  (! (=> (dynamic_invariant2 s true true true) (dynamic_invariant3 (c s) true
     false true)) :pattern ((c s)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun v1raw () (_ BitVec 32))

(declare-fun x () Int)

(declare-fun tmp () (_ BitVec 32))

(declare-fun o () (_ BitVec 32))

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun v1raw1 () (_ BitVec 32))

(declare-fun result () (_ BitVec 32))

(declare-fun tmp1 () (_ BitVec 32))

(declare-fun result1 () Int)

(declare-fun x1 () Int)

(declare-fun v1raw2 () (_ BitVec 32))

(declare-fun x2 () Int)

(declare-fun tmp2 () (_ BitVec 32))

(declare-fun v1raw3 () (_ BitVec 32))

(declare-fun x3 () Int)

(declare-fun tmp3 () (_ BitVec 32))

(define-fun result2 () t__ref (mk_t__ref result))

(define-fun tmp4 () t__ref (mk_t__ref tmp))

;; H
  (assert true)

;; H
  (assert (=> (<= 0 17) (in_range1 x)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= o v1raw1))

;; H
  (assert (= result2 tmp4))

;; H
  (assert (= tmp1 o))

;; H
  (assert (and (= o1 (c tmp1)) (in_range2 o1)))

;; H
  (assert (and (= o2 o1) (in_range1 o1)))

;; H
  (assert (= result1 x))

;; H
  (assert (= x1 o2))

;; H
  (assert (= tmp2 tmp1))

;; H
  (assert (= x1 x2))

;; H
  (assert (= v1raw2 v1raw1))

;; H
  (assert (= tmp3 tmp1))

;; H
  (assert (= x3 x1))

;; H
  (assert (= v1raw3 v1raw1))

(assert
;; WP_parameter_def
 ;; File "port.ads", line 21, characters 0-0
  (not true))
(check-sat)
(exit)
