;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun get_line__4 (tuple0) us_t)

(declare-fun get_line__4__function_guard (us_t tuple0) Bool)

;; get_line__4__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant1
  (get_line__4 us_void_param) true false
  true) :pattern ((get_line__4 us_void_param)) )))

(declare-sort slot 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (slot slot) Bool)

(declare-const dummy4 slot)

(declare-datatypes () ((slot__ref (mk_slot__ref (slot__content slot)))))
(define-fun slot__ref___projection ((a slot__ref)) slot (slot__content a))

(declare-fun to_rep2 (slot) Int)

(declare-fun of_rep2 (Int) slot)

;; inversion_axiom
  (assert
  (forall ((x slot)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x slot)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort pos 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (pos pos) Bool)

(declare-const dummy5 pos)

(declare-datatypes () ((pos__ref (mk_pos__ref (pos__content pos)))))
(define-fun pos__ref___projection ((a pos__ref)) pos (pos__content a))

(declare-fun to_rep3 (pos) Int)

(declare-fun of_rep3 (Int) pos)

;; inversion_axiom
  (assert
  (forall ((x pos)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x pos)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int slot))))))
(declare-fun slide1 ((Array Int slot) Int Int) (Array Int slot))

;; slide_eq
  (assert
  (forall ((a (Array Int slot)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int slot)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int slot) Int Int (Array Int slot) Int
  Int) (Array Int slot))

;; concat_def
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (slot Int) (Array Int slot))

;; singleton_def
  (assert
  (forall ((v slot))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int slot)) (a__first Int) (a__last Int)
  (b (Array Int slot)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_151 Int))
                           (=>
                           (and (<= a__first temp___idx_151)
                           (<= temp___idx_151 a__last))
                           (= (to_rep2 (select a temp___idx_151)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_151)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_151 Int))
  (=> (and (<= a__first temp___idx_151) (<= temp___idx_151 a__last))
  (= (to_rep2 (select a temp___idx_151)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_151)))))))))))

(declare-fun compare1 ((Array Int slot) Int Int (Array Int slot) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const dummy6 (Array Int slot))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int slot)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int slot)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int slot)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int slot))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int slot))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int slot))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 ((Array Int slot) (Array Int slot)) Bool)

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int slot)))))))
(declare-fun slide2 ((Array Int (Array Int slot)) Int
  Int) (Array Int (Array Int slot)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int (Array Int slot)) Int Int
  (Array Int (Array Int slot)) Int Int) (Array Int (Array Int slot)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 ((Array Int slot) Int) (Array Int (Array Int slot)))

;; singleton_def
  (assert
  (forall ((v (Array Int slot)))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int (Array Int slot))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int slot))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_152 Int))
                           (=>
                           (and (<= a__first temp___idx_152)
                           (<= temp___idx_152 a__last))
                           (= (bool_eq2 (select a temp___idx_152) 1 3
                              (select b (+ (- b__first a__first) temp___idx_152))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_152 Int))
  (=> (and (<= a__first temp___idx_152) (<= temp___idx_152 a__last))
  (= (bool_eq2 (select a temp___idx_152) 1 3
     (select b (+ (- b__first a__first) temp___idx_152)) 1 3) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)

(declare-fun num_free_slots__function_guard (Int
  (Array Int (Array Int slot))) Bool)

(declare-sort natural 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (natural natural) Bool)

(declare-const dummy7 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_33)))

(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)

(declare-fun count_free_slots__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; num_free_slots__post_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (dynamic_invariant2 (num_free_slots tictactoe__my_board) true false
  true) :pattern ((num_free_slots tictactoe__my_board)) )))

;; num_free_slots__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3
                                             tictactoe__my_board)) :pattern (
  (num_free_slots tictactoe__my_board)) )))

(declare-fun is_full ((Array Int (Array Int slot))) Bool)

(declare-fun is_full__function_guard (Bool
  (Array Int (Array Int slot))) Bool)

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (= (= (is_full tictactoe__my_board) true)
     (= (num_free_slots tictactoe__my_board) 0)) :pattern ((is_full
                                                           tictactoe__my_board)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tictactoe__position__x pos)(rec__tictactoe__position__y pos)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) pos (rec__tictactoe__position__x
                                                                    a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) pos (rec__tictactoe__position__y
                                                                    a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep3
                           (rec__tictactoe__position__x (us_split_fields1 a)))
                        (to_rep3
                        (rec__tictactoe__position__x (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__tictactoe__position__y (us_split_fields1 a)))
                        (to_rep3
                        (rec__tictactoe__position__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const tictactoe__position__x__first__bit Int)

(declare-const tictactoe__position__x__last__bit Int)

(declare-const tictactoe__position__x__position Int)

;; tictactoe__position__x__first__bit_axiom
  (assert (<= 0 tictactoe__position__x__first__bit))

;; tictactoe__position__x__last__bit_axiom
  (assert
  (< tictactoe__position__x__first__bit tictactoe__position__x__last__bit))

;; tictactoe__position__x__position_axiom
  (assert (<= 0 tictactoe__position__x__position))

(declare-const tictactoe__position__y__first__bit Int)

(declare-const tictactoe__position__y__last__bit Int)

(declare-const tictactoe__position__y__position Int)

;; tictactoe__position__y__first__bit_axiom
  (assert (<= 0 tictactoe__position__y__first__bit))

;; tictactoe__position__y__last__bit_axiom
  (assert
  (< tictactoe__position__y__first__bit tictactoe__position__y__last__bit))

;; tictactoe__position__y__position_axiom
  (assert (<= 0 tictactoe__position__y__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
((position__ref (mk_position__ref (position__content us_rep)))))
(define-fun position__ref___projection ((a position__ref)) us_rep (position__content
                                                                  a))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep))))))
(declare-fun slide3 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first2 Int))
  (! (= (slide3 a first2 first2) a) :pattern ((slide3 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_153 Int))
                           (=>
                           (and (<= a__first temp___idx_153)
                           (<= temp___idx_153 a__last))
                           (= (bool_eq4 (select a temp___idx_153)
                              (select b (+ (- b__first a__first) temp___idx_153))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_153 Int))
  (=> (and (<= a__first temp___idx_153) (<= temp___idx_153 a__last))
  (= (bool_eq4 (select a temp___idx_153)
     (select b (+ (- b__first a__first) temp___idx_153))) true))))))))

(declare-const dummy9 (Array Int us_rep))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int us_rep)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int us_rep)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq9 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int us_rep)))))))
(declare-fun slide4 ((Array Int (Array Int us_rep)) Int
  Int) (Array Int (Array Int us_rep)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((first2 Int))
  (! (= (slide4 a first2 first2) a) :pattern ((slide4 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int (Array Int us_rep)) Int Int
  (Array Int (Array Int us_rep)) Int Int) (Array Int (Array Int us_rep)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int us_rep)))
  (b (Array Int (Array Int us_rep))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 ((Array Int us_rep)
  Int) (Array Int (Array Int us_rep)))

;; singleton_def
  (assert
  (forall ((v (Array Int us_rep)))
  (forall ((i Int))
  (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int (Array Int us_rep))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int us_rep))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq5 (select a temp___idx_154) 1 3
                              (select b (+ (- b__first a__first) temp___idx_154))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int us_rep)))
  (b (Array Int (Array Int us_rep))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq5 (select a temp___idx_154) 1 3
     (select b (+ (- b__first a__first) temp___idx_154)) 1 3) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun won ((Array Int (Array Int slot))
  (Array Int (Array Int us_rep))) Int)

(declare-fun won__function_guard (Int (Array Int (Array Int slot))
  (Array Int (Array Int us_rep))) Bool)

(define-fun dynamic_invariant3 ((temp___expr_519 Int)
  (temp___is_init_516 Bool) (temp___skip_constant_517 Bool)
  (temp___do_toplevel_518 Bool)) Bool (=>
                                      (or (= temp___is_init_516 true)
                                      (<= 0 2)) (in_range4 temp___expr_519)))

;; won__post_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (forall ((tictactoe__all_solutions (Array Int (Array Int us_rep))))
  (! (dynamic_invariant3 (won tictactoe__my_board tictactoe__all_solutions)
  true false
  true) :pattern ((won tictactoe__my_board tictactoe__all_solutions)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const s__first integer)

(declare-const s__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_525 Int)
  (temp___is_init_522 Bool) (temp___skip_constant_523 Bool)
  (temp___do_toplevel_524 Bool)) Bool (=>
                                      (or (= temp___is_init_522 true)
                                      (<= 1 3)) (in_range5 temp___expr_525)))

(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)

(declare-fun one_free_slot__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; one_free_slot__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true) (dynamic_invariant6 y true
     true true)) (dynamic_invariant4 (one_free_slot x y tictactoe__my_board)
     true false true)) :pattern ((one_free_slot x y tictactoe__my_board)) ))))

;; one_free_slot__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true) (dynamic_invariant6 y true
     true true))
     (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep2
                                                        (let ((temp___554 (select tictactoe__my_board x)))
                                                        (select temp___554 y))) 0)
                                                1 0))) :pattern ((one_free_slot
                                                                 x y
                                                                 tictactoe__my_board)) ))))

;; count_free_slots__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true) (dynamic_invariant6 y true
     true true)) (dynamic_invariant4
     (count_free_slots x y tictactoe__my_board) true false true)) :pattern (
  (count_free_slots x y tictactoe__my_board)) ))))

;; count_free_slots__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true) (dynamic_invariant6 y true
     true true))
     (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot
                                                               1 1
                                                               tictactoe__my_board)
     (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y)
                                                               (one_free_slot
                                                               1 3
                                                               tictactoe__my_board)
                                                               0)) (ite (<= 2 x)
                                                                   (+ (+
                                                                   (one_free_slot
                                                                   2 1
                                                                   tictactoe__my_board)
                                                                   (ite (<= 2 y)
                                                                   (one_free_slot
                                                                   2 2
                                                                   tictactoe__my_board)
                                                                   0))
                                                                   (ite (<= 3 y)
                                                                   (one_free_slot
                                                                   2 3
                                                                   tictactoe__my_board)
                                                                   0)) 0))
     (ite (<= 3 x)
     (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y)
                                                   (one_free_slot 3 2
                                                   tictactoe__my_board) 0))
     (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0)))) :pattern (
  (count_free_slots x y tictactoe__my_board)) ))))

(declare-const my_board (Array Int (Array Int slot)))

(declare-const p__split_fields pos)

(declare-const p__split_fields1 pos)

(declare-const all_solutions (Array Int (Array Int us_rep)))

(declare-const temp___785 pos)

(declare-const temp___7851 pos)

(declare-const tictactoe__player_play__B_2__s__assume (Array Int character))

(declare-const tictactoe__player_play__B_2__s__assume1 t)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 character)

(declare-const o3 Int)

(declare-const o4 pos)

(declare-const o5 pos)

(declare-const o6 pos)

(declare-const o7 pos)

(declare-const temp___773 pos)

(declare-const temp___7731 pos)

(declare-const o8 pos)

(declare-const o9 pos)

(declare-const o10 pos)

(declare-const o11 pos)

(declare-const temp___774 pos)

(declare-const temp___7741 pos)

(declare-const o12 pos)

(declare-const o13 pos)

(declare-const o14 pos)

(declare-const o15 pos)

(declare-const temp___775 pos)

(declare-const temp___7751 pos)

(declare-const o16 pos)

(declare-const o17 pos)

(declare-const o18 pos)

(declare-const o19 pos)

(declare-const temp___776 pos)

(declare-const temp___7761 pos)

(declare-const o20 pos)

(declare-const o21 pos)

(declare-const o22 us_split_fields)

(declare-const temp___777 us_rep)

(declare-const o23 pos)

(declare-const o24 pos)

(declare-const o25 us_split_fields)

(declare-const temp___778 us_rep)

(declare-const o26 pos)

(declare-const o27 pos)

(declare-const o28 us_split_fields)

(declare-const temp___779 us_rep)

(declare-const o29 pos)

(declare-const o30 pos)

(declare-const o31 us_split_fields)

(declare-const temp___780 us_rep)

(declare-const o32 pos)

(declare-const o33 pos)

(declare-const o34 us_split_fields)

(declare-const temp___781 us_rep)

(declare-const o35 pos)

(declare-const o36 pos)

(declare-const o37 us_split_fields)

(declare-const temp___782 us_rep)

(declare-const p__split_fields2 us_split_fields)

(declare-const s (Array Int character))

(declare-const found Bool)

(declare-const c Int)

(declare-const result map__ref)

(declare-const s1 (Array Int character))

(declare-const result1 bool__ref)

(declare-const found1 Bool)

(declare-const result2 Bool)

(declare-const result3 int__ref)

(declare-const c1 Int)

(declare-const result4 us_split_fields__ref)

(declare-const p__split_fields3 us_split_fields)

(declare-const result5 us_split_fields__ref)

(declare-const p__split_fields4 us_split_fields)

(declare-const result6 us_split_fields__ref)

(declare-const p__split_fields5 us_split_fields)

(declare-const result7 us_split_fields__ref)

(declare-const p__split_fields6 us_split_fields)

(declare-const result8 us_split_fields__ref)

(declare-const p__split_fields7 us_split_fields)

(declare-const result9 us_split_fields__ref)

(declare-const p__split_fields8 us_split_fields)

(declare-const result10 us_split_fields__ref)

(declare-const p__split_fields9 us_split_fields)

(declare-const result11 us_split_fields__ref)

(declare-const p__split_fields10 us_split_fields)

(declare-const result12 us_split_fields__ref)

(declare-const p__split_fields11 us_split_fields)

(declare-const result13 us_split_fields__ref)

(declare-const p__split_fields12 us_split_fields)

(declare-const result14 bool__ref)

(declare-const found2 Bool)

(declare-const p__split_fields13 us_split_fields__ref)

(declare-const found3 bool__ref)

(declare-const c2 int__ref)

(declare-const p__split_fields14 us_split_fields)

(declare-const found4 Bool)

(declare-const c3 Int)

(declare-const p__split_fields15 us_split_fields__ref)

(declare-const s2 map__ref)

(declare-const found5 bool__ref)

(declare-const c4 int__ref)

(declare-const p__split_fields16 us_split_fields)

(declare-const s3 (Array Int character))

(declare-const found6 Bool)

(declare-const c5 Int)

(declare-const p__split_fields17 us_split_fields__ref)

(declare-const s4 map__ref)

(declare-const found7 bool__ref)

(declare-const c6 int__ref)

(declare-const p__split_fields18 us_split_fields)

(declare-const s5 (Array Int character))

(declare-const found8 Bool)

(declare-const c7 Int)

(define-fun tictactoe__player_play__B_2__s__assume2 () us_t (mk___t
                                                            tictactoe__player_play__B_2__s__assume
                                                            tictactoe__player_play__B_2__s__assume1))

;; H
  (assert
  (and (not (= (is_full my_board) true)) (= (won my_board all_solutions) 0)))

;; H
  (assert
  (and (= p__split_fields temp___785) (= p__split_fields1 temp___7851)))

;; H
  (assert
  (and (= tictactoe__player_play__B_2__s__assume2 (get_line__4 Tuple0))
  (dynamic_invariant1 tictactoe__player_play__B_2__s__assume2 true false
  true)))

;; H
  (assert (= result (mk_map__ref s)))

;; H
  (assert (= s1 tictactoe__player_play__B_2__s__assume))

;; H
  (assert
  (= (to_rep1 s__first) (to_rep1
                        (first tictactoe__player_play__B_2__s__assume1))))

;; H
  (assert
  (= (to_rep1 s__last) (to_rep1
                       (last tictactoe__player_play__B_2__s__assume1))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 s__first)
  (to_rep1 s__last)))

;; H
  (assert (= result1 (mk_bool__ref found)))

;; H
  (assert (= found1 (of_int 1)))

;; H
  (assert (= c2 (mk_int__ref c1)))

;; H
  (assert (= found3 (mk_bool__ref found2)))

;; H
  (assert (= p__split_fields13 (mk___split_fields__ref p__split_fields4)))

;; H
  (assert (= c3 c1))

;; H
  (assert (= found4 found2))

;; H
  (assert (= p__split_fields14 p__split_fields4))

;; H
  (assert
  (=> (<= (to_rep1 s__first) (to_rep1 s__last))
  (= o (+ (- (to_rep1 s__last) (to_rep1 s__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep1 s__first) (to_rep1 s__last))) (= o 0)))

;; H
  (assert (= result2 (ite (<= 1 o) true false)))

;; H
  (assert (= result2 true))

;; H
  (assert
  (and (<= (to_rep1 s__first) (to_rep1 s__first))
  (<= (to_rep1 s__first) (to_rep1 s__last))))

;; H
  (assert (= o1 (to_rep1 s__first)))

;; H
  (assert (= o2 (select s1 o1)))

;; H
  (assert (= o3 (to_rep o2)))

;; H
  (assert (= result3 (mk_int__ref c)))

;; H
  (assert (= c1 o3))

;; H
  (assert (in_range3 c1))

;; H
  (assert (= (to_rep3 o4) 1))

;; H
  (assert (= (to_rep3 o5) 1))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= temp___773 o6))

;; H
  (assert (= temp___7731 o7))

;; H
  (assert (= result4 (mk___split_fields__ref p__split_fields2)))

;; H
  (assert (= p__split_fields3 (mk___split_fields temp___773 temp___7731)))

;; H
  (assert (=> (= c1 49) (= (to_rep3 o8) 1)))

;; H
  (assert (=> (= c1 49) (= (to_rep3 o9) 1)))

;; H
  (assert (=> (= c1 49) (= o9 o10)))

;; H
  (assert (=> (= c1 49) (= o8 o11)))

;; H
  (assert (=> (= c1 49) (= temp___774 o10)))

;; H
  (assert (=> (= c1 49) (= temp___7741 o11)))

;; H
  (assert
  (=> (= c1 49) (= result5 (mk___split_fields__ref p__split_fields3))))

;; H
  (assert
  (=> (= c1 49)
  (= p__split_fields4 (mk___split_fields temp___774 temp___7741))))

;; H
  (assert (=> (= c1 49) (= found2 found1)))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= (to_rep3 o12) 1))))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= (to_rep3 o13) 2))))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= o13 o14))))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= o12 o15))))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= temp___775 o14))))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= temp___7751 o15))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (= c1 50) (= result6 (mk___split_fields__ref p__split_fields3)))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (= c1 50)
  (= p__split_fields5 (mk___split_fields temp___775 temp___7751)))))

;; H
  (assert (=> (not (= c1 49)) (=> (= c1 50) (= found2 found1))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50)) (=> (= c1 51) (= (to_rep3 o16) 1)))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50)) (=> (= c1 51) (= (to_rep3 o17) 3)))))

;; H
  (assert
  (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= o17 o18)))))

;; H
  (assert
  (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= o16 o19)))))

;; H
  (assert
  (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= temp___776 o18)))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50)) (=> (= c1 51) (= temp___7761 o19)))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (= c1 51) (= result7 (mk___split_fields__ref p__split_fields3))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (= c1 51)
  (= p__split_fields6 (mk___split_fields temp___776 temp___7761))))))

;; H
  (assert
  (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= found2 found1)))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51)) (=> (= c1 52) (= (to_rep3 o20) 2))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51)) (=> (= c1 52) (= (to_rep3 o21) 1))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51)) (=> (= c1 52) (= o22 (mk___split_fields o21 o20)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51)) (=> (= c1 52) (= temp___777 (mk___rep o22)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (= c1 52) (= result8 (mk___split_fields__ref p__split_fields3)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (= c1 52) (= p__split_fields7 (us_split_fields1 temp___777)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (= c1 52) (= found2 found1))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52)) (=> (= c1 53) (= (to_rep3 o23) 2)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52)) (=> (= c1 53) (= (to_rep3 o24) 2)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52)) (=> (= c1 53) (= o25 (mk___split_fields o24 o23))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52)) (=> (= c1 53) (= temp___778 (mk___rep o25))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (= c1 53) (= result9 (mk___split_fields__ref p__split_fields3))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (= c1 53) (= p__split_fields8 (us_split_fields1 temp___778))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (= c1 53) (= found2 found1)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53)) (=> (= c1 54) (= (to_rep3 o26) 2))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53)) (=> (= c1 54) (= (to_rep3 o27) 3))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53)) (=> (= c1 54) (= o28 (mk___split_fields o27 o26)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53)) (=> (= c1 54) (= temp___779 (mk___rep o28)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (= c1 54) (= result10 (mk___split_fields__ref p__split_fields3)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (= c1 54) (= p__split_fields9 (us_split_fields1 temp___779)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (= c1 54) (= found2 found1))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54)) (=> (= c1 55) (= (to_rep3 o29) 3)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54)) (=> (= c1 55) (= (to_rep3 o30) 1)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54)) (=> (= c1 55) (= o31 (mk___split_fields o30 o29))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54)) (=> (= c1 55) (= temp___780 (mk___rep o31))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (= c1 55) (= result11 (mk___split_fields__ref p__split_fields3))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (= c1 55) (= p__split_fields10 (us_split_fields1 temp___780))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (= c1 55) (= found2 found1)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55)) (=> (= c1 56) (= (to_rep3 o32) 3))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55)) (=> (= c1 56) (= (to_rep3 o33) 2))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55)) (=> (= c1 56) (= o34 (mk___split_fields o33 o32)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55)) (=> (= c1 56) (= temp___781 (mk___rep o34)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (= c1 56) (= result12 (mk___split_fields__ref p__split_fields3)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (= c1 56) (= p__split_fields11 (us_split_fields1 temp___781)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (= c1 56) (= found2 found1))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56)) (=> (= c1 57) (= (to_rep3 o35) 3)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56)) (=> (= c1 57) (= (to_rep3 o36) 3)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56)) (=> (= c1 57) (= o37 (mk___split_fields o36 o35))))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56)) (=> (= c1 57) (= temp___782 (mk___rep o37))))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56))
  (=> (= c1 57) (= result13 (mk___split_fields__ref p__split_fields3))))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56))
  (=> (= c1 57) (= p__split_fields12 (us_split_fields1 temp___782))))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (= c1 57) (= found2 found1)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56))
  (=> (not (= c1 57)) (= result14 (mk_bool__ref found1))))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56)) (=> (not (= c1 57)) (= found2 (of_int 0))))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56))
  (=> (not (= c1 57)) (= p__split_fields12 p__split_fields3)))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55))
  (=> (not (= c1 56)) (= p__split_fields11 p__split_fields12))))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54))
  (=> (not (= c1 55)) (= p__split_fields10 p__split_fields11)))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53))
  (=> (not (= c1 54)) (= p__split_fields9 p__split_fields10))))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52))
  (=> (not (= c1 53)) (= p__split_fields8 p__split_fields9)))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51))
  (=> (not (= c1 52)) (= p__split_fields7 p__split_fields8))))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50))
  (=> (not (= c1 51)) (= p__split_fields6 p__split_fields7)))))

;; H
  (assert
  (=> (not (= c1 49))
  (=> (not (= c1 50)) (= p__split_fields5 p__split_fields6))))

;; H
  (assert (=> (not (= c1 49)) (= p__split_fields4 p__split_fields5)))

;; H
  (assert (= found2 true))

;; H
  (assert
  (= (to_rep2
     (select (select my_board (to_rep3
                              (rec__tictactoe__position__x p__split_fields4)))
     (to_rep3 (rec__tictactoe__position__y p__split_fields4)))) 0))

;; H
  (assert (= c4 c2))

;; H
  (assert (= found5 found3))

;; H
  (assert (= s2 (mk_map__ref s1)))

;; H
  (assert (= p__split_fields15 p__split_fields13))

;; H
  (assert (= c5 c3))

;; H
  (assert (= found6 found4))

;; H
  (assert (= s3 s1))

;; H
  (assert (= p__split_fields16 p__split_fields14))

;; H
  (assert (= c6 c4))

;; H
  (assert (= found7 found5))

;; H
  (assert (= s4 s2))

;; H
  (assert (= p__split_fields17 p__split_fields15))

;; H
  (assert (= c7 c5))

;; H
  (assert (= found8 found6))

;; H
  (assert (= s5 s3))

;; H
  (assert (= p__split_fields18 p__split_fields16))

(assert
;; WP_parameter_def
 ;; File "tictactoe.ads", line 5, characters 0-0
  (not
  (= (to_rep2
     (select (select my_board (to_rep3
                              (rec__tictactoe__position__x
                              (us_split_fields__content p__split_fields17))))
     (to_rep3
     (rec__tictactoe__position__y
     (us_split_fields__content p__split_fields17))))) 0)))
(check-sat)
(exit)
