;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes ((t__ref1 0)) (((mk_t__ref1 (t__content1 Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned_8 unsigned_8) Bool)

(declare-const dummy unsigned_8)

(declare-datatypes ((unsigned_8__ref 0))
(((mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8
  (unsigned_8__content a))

(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(declare-sort battery_level_type 0)

(declare-fun user_eq1 (battery_level_type battery_level_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 battery_level_type)

(declare-datatypes ((battery_level_type__ref 0))
(((mk_battery_level_type__ref
  (battery_level_type__content battery_level_type)))))
(define-fun battery_level_type__ref___projection ((a battery_level_type__ref)) battery_level_type
  (battery_level_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_202 Float32)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_202) (fp.isNaN temp___expr_202)))))

(declare-fun to_rep (battery_level_type) Float32)

(declare-fun of_rep (Float32) battery_level_type)

;; inversion_axiom
  (assert
  (forall ((x battery_level_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x battery_level_type))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-sort time_slot 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 49))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 49)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (time_slot time_slot) Bool)

(declare-const dummy2 time_slot)

(declare-datatypes ((time_slot__ref 0))
(((mk_time_slot__ref (time_slot__content time_slot)))))
(define-fun time_slot__ref___projection ((a time_slot__ref)) time_slot
  (time_slot__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 49)))
                                      (in_range2 temp___expr_208)))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 8) battery_level_type))))))
(declare-fun slide ((Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8) (Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type))
  (b (Array (_ BitVec 8) battery_level_type)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (battery_level_type
  (_ BitVec 8)) (Array (_ BitVec 8) battery_level_type))

;; singleton_def
  (assert
  (forall ((v battery_level_type))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 8) battery_level_type))
  (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b (Array (_ BitVec 8) battery_level_type)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_132 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_132)
                                    (bvule temp___idx_132 a__last))
                                    (= (to_rep (select a temp___idx_132))
                                    (to_rep
                                    (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) battery_level_type))
  (b (Array (_ BitVec 8) battery_level_type)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun time_below_threshold ((Array (_ BitVec 8) battery_level_type)
  (_ BitVec 8)) (_ BitVec 8))

(declare-fun time_below_threshold__function_guard ((_ BitVec 8)
  (Array (_ BitVec 8) battery_level_type) (_ BitVec 8)) Bool)

(declare-sort time_slot_length 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 50))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (time_slot_length time_slot_length) Bool)

(declare-const dummy3 time_slot_length)

(declare-datatypes ((time_slot_length__ref 0))
(((mk_time_slot_length__ref (time_slot_length__content time_slot_length)))))
(define-fun time_slot_length__ref___projection ((a time_slot_length__ref)) time_slot_length
  (time_slot_length__content a))

(define-fun dynamic_invariant3 ((temp___expr_214 (_ BitVec 8))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 50)))
                                      (in_range3 temp___expr_214)))

;; time_below_threshold__post_axiom
  (assert
  (forall
  ((failsafe__model__battery_level_at (Array (_ BitVec 8) battery_level_type)))
  (forall ((failsafe__model__current_time (_ BitVec 8)))
  (! (=> (dynamic_invariant2 failsafe__model__current_time true true true)
     (let ((result (time_below_threshold failsafe__model__battery_level_at
                   failsafe__model__current_time)))
     (and
     (ite (fp.leq (fp #b0 #b01111100 #b10011001100110011001101) (to_rep
                                                                (select failsafe__model__battery_level_at failsafe__model__current_time)))
     (= result ((_ int2bv 8) 0))
     (ite (forall ((s (_ BitVec 8)))
          (=> (and (bvule ((_ int2bv 8) 0) s) (bvule s ((_ int2bv 8) 49)))
          (fp.lt (to_rep (select failsafe__model__battery_level_at s)) (fp #b0 #b01111100 #b10011001100110011001101))))
     (= result ((_ int2bv 8) 50))
     (and
     (and (bvult result ((_ int2bv 8) 50))
     (fp.leq (fp #b0 #b01111100 #b10011001100110011001101) (to_rep
                                                           (select failsafe__model__battery_level_at
                                                           (let ((temp___230 (bvsub failsafe__model__current_time result)))
                                                           (ite (bvult failsafe__model__current_time result)
                                                           (bvadd temp___230 ((_ int2bv 8) 50))
                                                           temp___230))))))
     (ite (bvuge failsafe__model__current_time (bvsub result ((_ int2bv 8) 1)))
     (forall ((s (_ BitVec 8)))
     (=>
     (and
     (bvule (let ((temp___231 (bvsub failsafe__model__current_time (bvsub result ((_ int2bv 8) 1)))))
            (ite (bvult failsafe__model__current_time (bvsub result ((_ int2bv 8) 1)))
            (bvadd temp___231 ((_ int2bv 8) 50)) temp___231)) s)
     (bvule s failsafe__model__current_time))
     (fp.lt (to_rep (select failsafe__model__battery_level_at s)) (fp #b0 #b01111100 #b10011001100110011001101))))
     (and
     (forall ((s (_ BitVec 8)))
     (=>
     (and (bvule ((_ int2bv 8) 0) s) (bvule s failsafe__model__current_time))
     (fp.lt (to_rep (select failsafe__model__battery_level_at s)) (fp #b0 #b01111100 #b10011001100110011001101))))
     (forall ((s (_ BitVec 8)))
     (=>
     (and
     (bvule (let ((temp___232 (bvsub failsafe__model__current_time (bvsub result ((_ int2bv 8) 1)))))
            (ite (bvult failsafe__model__current_time (bvsub result ((_ int2bv 8) 1)))
            (bvadd temp___232 ((_ int2bv 8) 50)) temp___232)) s)
     (bvule s ((_ int2bv 8) 49)))
     (fp.lt (to_rep (select failsafe__model__battery_level_at s)) (fp #b0 #b01111100 #b10011001100110011001101)))))))))
     (dynamic_invariant3 result true false true)))) :pattern ((time_below_threshold
                                                              failsafe__model__battery_level_at
                                                              failsafe__model__current_time)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun is_valid ((Array (_ BitVec 8) battery_level_type) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(declare-fun is_valid__function_guard (Bool
  (Array (_ BitVec 8) battery_level_type) (_ BitVec 8) (_ BitVec 8)) Bool)

(declare-sort tcounterS 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 50))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (tcounterS tcounterS) Bool)

(declare-const dummy4 tcounterS)

(declare-datatypes ((tcounterS__ref 0))
(((mk_tcounterS__ref (tcounterS__content tcounterS)))))
(define-fun tcounterS__ref___projection ((a tcounterS__ref)) tcounterS
  (tcounterS__content a))

(define-fun dynamic_invariant4 ((temp___expr_244 (_ BitVec 8))
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)) Bool (=>
                                      (or (= temp___is_init_241 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 50)))
                                      (in_range4 temp___expr_244)))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall
  ((failsafe__model__battery_level_at (Array (_ BitVec 8) battery_level_type)))
  (forall ((failsafe__model__current_time (_ BitVec 8))
  (failsafe__counter (_ BitVec 8)))
  (! (=
     (= (is_valid failsafe__model__battery_level_at
        failsafe__model__current_time failsafe__counter) true)
     (= failsafe__counter (time_below_threshold
                          failsafe__model__battery_level_at
                          failsafe__model__current_time))) :pattern (
  (is_valid failsafe__model__battery_level_at failsafe__model__current_time
  failsafe__counter)) ))))

(declare-const battery_level Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const battery_level_at (Array (_ BitVec 8) battery_level_type))

(declare-const current_time (_ BitVec 8))

(declare-const counter (_ BitVec 8))

(declare-const o (_ BitVec 8))

(declare-const o1 battery_level_type)

(declare-const o2 (Array (_ BitVec 8) battery_level_type))

(declare-const o3 (_ BitVec 8))

(declare-const o4 Bool)

(declare-const o5 Bool)

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const temp___280 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 8))

(declare-const temp___282 (_ BitVec 8))

(declare-const o10 (_ BitVec 8))

(declare-const o11 (_ BitVec 8))

(declare-const temp___279 (_ BitVec 8))

(declare-const o12 (_ BitVec 8))

(declare-const o13 (_ BitVec 8))

(declare-const o14 battery_level_type)

(declare-const o15 Float32)

(declare-const result (_ BitVec 8))

(declare-const current_time1 (_ BitVec 8))

(declare-const result1 (Array (_ BitVec 8) battery_level_type))

(declare-const battery_level_at1 (Array (_ BitVec 8) battery_level_type))

(declare-const result2 (_ BitVec 8))

(declare-const counter1 (_ BitVec 8))

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 (_ BitVec 8))

(declare-const counter2 (_ BitVec 8))

(declare-const battery_level_at2 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time2 (_ BitVec 8))

(declare-const counter3 (_ BitVec 8))

(declare-const battery_level_at3 (Array (_ BitVec 8) battery_level_type))

(declare-const current_time3 (_ BitVec 8))

(declare-const counter4 (_ BitVec 8))

(define-fun result9 () t__ref (mk_t__ref result2))

(define-fun result10 () map__ref (mk_map__ref result1))

(define-fun result11 () t__ref (mk_t__ref result))

(define-fun counter5 () t__ref (mk_t__ref counter))

(define-fun current_time4 () t__ref (mk_t__ref current_time))

(define-fun battery_level_at4 () map__ref (mk_map__ref battery_level_at))

;; H
  (assert (in_range4 counter))

;; H
  (assert (in_range2 current_time))

;; H
  (assert (not (or (fp.isInfinite battery_level) (fp.isNaN battery_level))))

;; H
  (assert (= (is_valid battery_level_at current_time counter) true))

;; H
  (assert (= counter c))

;; H
  (assert true)

;; H
  (assert (= counter (time_below_threshold battery_level_at current_time)))

;; H
  (assert
  (=>
  (forall ((s (_ BitVec 8)))
  (=> (and (bvule ((_ int2bv 8) 0) s) (bvule s ((_ int2bv 8) 49)))
  (fp.lt (to_rep (select battery_level_at s)) (fp #b0 #b01111100 #b10011001100110011001101))))
  (= counter ((_ int2bv 8) 50))))

;; H
  (assert
  (=>
  (forall ((s (_ BitVec 8)))
  (=> (and (bvule ((_ int2bv 8) 0) s) (bvule s ((_ int2bv 8) 49)))
  (=>
  (not
  (= s (let ((temp___277 (bvadd current_time ((_ int2bv 8) 1))))
       (ite (bvule (bvsub ((_ int2bv 8) 50) current_time) ((_ int2bv 8) 1))
       (bvsub temp___277 ((_ int2bv 8) 50)) temp___277))))
  (fp.lt (to_rep (select battery_level_at s)) (fp #b0 #b01111100 #b10011001100110011001101)))))
  (bvuge counter ((_ int2bv 8) 49))))

;; H
  (assert
  (=> (bvule (bvsub ((_ int2bv 8) 50) current_time) ((_ int2bv 8) 1))
  (= o (bvsub (bvadd current_time ((_ int2bv 8) 1)) ((_ int2bv 8) 50)))))

;; H
  (assert
  (=> (not (bvule (bvsub ((_ int2bv 8) 50) current_time) ((_ int2bv 8) 1)))
  (= o (bvadd current_time ((_ int2bv 8) 1)))))

;; H
  (assert (= result11 current_time4))

;; H
  (assert (= current_time1 o))

;; H
  (assert (= (to_rep o1) battery_level))

;; H
  (assert (= o2 (store battery_level_at current_time1 o1)))

;; H
  (assert (= result10 battery_level_at4))

;; H
  (assert (= battery_level_at1 o2))

;; H
  (assert
  (fp.lt battery_level (fp #b0 #b01111100 #b10011001100110011001101)))

;; H
  (assert
  (and (= o3 (bv_min (bvadd counter ((_ int2bv 8) 1)) ((_ int2bv 8) 50)))
  (in_range4 (bv_min (bvadd counter ((_ int2bv 8) 1)) ((_ int2bv 8) 50)))))

;; H
  (assert (= result9 counter5))

;; H
  (assert (= counter1 o3))

;; H
  (assert
  (fp.leq (fp #b0 #b01111100 #b10011001100110011001101) (to_rep
                                                        (select battery_level_at1
                                                        current_time1))))

(assert
;; WP_parameter_def
 ;; File "failsafe.adb", line 31, characters 0-0
  (not (= counter1 ((_ int2bv 8) 0))))
(check-sat)
(exit)
