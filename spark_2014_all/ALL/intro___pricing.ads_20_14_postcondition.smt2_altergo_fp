(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type my_int

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : my_int, my_int -> bool

logic dummy : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref___projection(a: my_int__ref) : my_int =
  (a).my_int__content

logic to_rep : my_int -> int

logic of_rep : int -> my_int

axiom inversion_axiom :
  (forall x:my_int [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_int [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic mult : int, int -> int

logic mult__function_guard : int, int, int -> prop

axiom mult__post_axiom :
  (forall x:int. forall y:int [mult(x, y)]. ((in_range(x) and in_range(y)) ->
  (((((x * y) <  10000) -> (mult(x, y) = (x * y))) and
  ((not ((x * y) <  10000)) -> ((10000 <= (x * y)) -> (mult(x,
  y) = 10000)))) and in_range(mult(x, y)))))

type us_split_fields = { rec__pricing__item__price : my_int;
rec__pricing__item__number : my_int
}

function us_split_fields_Price__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__price

function us_split_fields_Number__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__number

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__pricing__item__price) = to_rep(((b).us_split_fields1).rec__pricing__item__price)) and
  (to_rep(((a).us_split_fields1).rec__pricing__item__number) = to_rep(((b).us_split_fields1).rec__pricing__item__number))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__pricing__item__price) = to_rep(((b).us_split_fields1).rec__pricing__item__price)) and
  (to_rep(((a).us_split_fields1).rec__pricing__item__number) = to_rep(((b).us_split_fields1).rec__pricing__item__number)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:my_int. forall a1:my_int. (0 <= object__size({ us_split_fields1 =
  { rec__pricing__item__price = a; rec__pricing__item__number = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:my_int. forall a1:my_int. (0 <= object__alignment({
  us_split_fields1 = { rec__pricing__item__price = a;
  rec__pricing__item__number = a1 } })))

logic pricing__item__price__first__bit : int

logic pricing__item__price__last__bit : int

logic pricing__item__price__position : int

axiom pricing__item__price__first__bit_axiom :
  (0 <= pricing__item__price__first__bit)

axiom pricing__item__price__last__bit_axiom :
  (pricing__item__price__first__bit <  pricing__item__price__last__bit)

axiom pricing__item__price__position_axiom :
  (0 <= pricing__item__price__position)

logic pricing__item__number__first__bit : int

logic pricing__item__number__last__bit : int

logic pricing__item__number__position : int

axiom pricing__item__number__first__bit_axiom :
  (0 <= pricing__item__number__first__bit)

axiom pricing__item__number__last__bit_axiom :
  (pricing__item__number__first__bit <  pricing__item__number__last__bit)

axiom pricing__item__number__position_axiom :
  (0 <= pricing__item__number__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : my_int

logic dummy2 : my_int

type item__ref = { item__content : us_rep
}

function item__ref___projection(a: item__ref) : us_rep = (a).item__content

logic it : my_int

logic it1 : my_int

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "sat.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall pricing__price_of_item__result:int. forall o:int.
  forall result:int. forall pricing__price_of_item__result1:int.
  forall pricing__price_of_item__result2:int.
  forall pricing__price_of_item__result3:int.
  forall pricing__price_of_item__result4:int.
  forall pricing__price_of_item__result5:int.
  (forall result1:int.
  ((((((pricing__price_of_item__result1 = pricing__price_of_item__result2) and
  (pricing__price_of_item__result3 = pricing__price_of_item__result1)) and
  (((o = mult(to_rep(it), to_rep(it1))) and (in_range(o) and
  (((bool_lt((to_rep(it) * to_rep(it1)), 10000) = true) and
  (o = (to_rep(it) * to_rep(it1)))) or
  ((not (bool_lt((to_rep(it) * to_rep(it1)), 10000) = true)) and
  ((bool_ge((to_rep(it) * to_rep(it1)), 10000) = true) ->
  (o = 10000)))))) and ((result = pricing__price_of_item__result) and
  (pricing__price_of_item__result1 = o)))) and
  ((pricing__price_of_item__result4 = pricing__price_of_item__result2) and
  (pricing__price_of_item__result5 = pricing__price_of_item__result3))) and
  (result1 = pricing__price_of_item__result4)) ->
  (pricing__price_of_item__result4 = mult(to_rep(it), to_rep(it1))))))
