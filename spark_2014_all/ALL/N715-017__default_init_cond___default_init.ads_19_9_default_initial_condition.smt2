;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun init (Int) Int)

(declare-fun init__function_guard (Int Int) Bool)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

;; init__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (dynamic_invariant (init x)
     true false true)) :pattern ((init x)) )))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__default_init__mut_discr__b Bool)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) Bool
  (rec__default_init__mut_discr__b a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__default_init__mut_discr__f natural)))))
(define-fun us_split_fields_F__5__projection ((a us_split_fields)) natural
  (rec__default_init__mut_discr__f a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___6__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___7__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___8__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun default_init__mut_discr__f__pred ((a us_rep)) Bool (= (to_int1
                                                                  (rec__default_init__mut_discr__b
                                                                  (us_split_discrs1
                                                                  a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__default_init__mut_discr__b
                           (us_split_discrs1 a)) (rec__default_init__mut_discr__b
                                                 (us_split_discrs1 b)))
                        (=> (default_init__mut_discr__f__pred a)
                        (= (to_rep
                           (rec__default_init__mut_discr__f
                           (us_split_fields1 a))) (to_rep
                                                  (rec__default_init__mut_discr__f
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const default_init__mut_discr__b__first__bit Int)

(declare-const default_init__mut_discr__b__last__bit Int)

(declare-const default_init__mut_discr__b__position Int)

;; default_init__mut_discr__b__first__bit_axiom
  (assert (<= 0 default_init__mut_discr__b__first__bit))

;; default_init__mut_discr__b__last__bit_axiom
  (assert
  (< default_init__mut_discr__b__first__bit default_init__mut_discr__b__last__bit))

;; default_init__mut_discr__b__position_axiom
  (assert (<= 0 default_init__mut_discr__b__position))

(declare-const default_init__mut_discr__f__first__bit Int)

(declare-const default_init__mut_discr__f__last__bit Int)

(declare-const default_init__mut_discr__f__position Int)

;; default_init__mut_discr__f__first__bit_axiom
  (assert (<= 0 default_init__mut_discr__f__first__bit))

;; default_init__mut_discr__f__last__bit_axiom
  (assert
  (< default_init__mut_discr__f__first__bit default_init__mut_discr__f__last__bit))

;; default_init__mut_discr__f__position_axiom
  (assert (<= 0 default_init__mut_discr__f__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((mut_discr__ref 0))
(((mk_mut_discr__ref (mut_discr__content us_rep)))))
(define-fun mut_discr__ref___projection ((a mut_discr__ref)) us_rep (mut_discr__content
                                                                    a))

(declare-fun mut_discr_ok (us_rep) Bool)

(declare-fun mut_discr_ok__function_guard (Bool us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_220 us_rep)
  (temp___skip_top_level_221 Bool)) Bool (and
                                         (and
                                         (= (attr__constrained
                                            temp___expr_220) false)
                                         (and
                                         (= (rec__default_init__mut_discr__b
                                            (us_split_discrs1
                                            temp___expr_220)) (of_int 0))
                                         (=>
                                         (default_init__mut_discr__f__pred
                                         temp___expr_220)
                                         (= (to_rep
                                            (rec__default_init__mut_discr__f
                                            (us_split_fields1
                                            temp___expr_220))) (init 0)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_221 true))
                                         (= (mut_discr_ok temp___expr_220) true))))

;; mut_discr_ok__post_axiom
  (assert true)

;; mut_discr_ok__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (mut_discr_ok x) true)
     (not (= (rec__default_init__mut_discr__b (us_split_discrs1 x)) true))) :pattern (
  (mut_discr_ok x)) )))

(declare-const temp___296 Bool)

(declare-const temp___295 Bool)

(declare-const temp___297 Bool)

(declare-const temp___2971 natural)

(declare-const temp___2972 Bool)

;; H
  (assert (= temp___296 temp___295))

;; H
  (assert
  (and (= temp___2972 false)
  (=> (= (to_int1 temp___297) 1) (= (to_rep temp___2971) (init 0)))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (= (mut_discr_ok
     (mk___rep (mk___split_discrs temp___297) (mk___split_fields temp___2971)
     temp___2972)) true)))
(check-sat)
(exit)
