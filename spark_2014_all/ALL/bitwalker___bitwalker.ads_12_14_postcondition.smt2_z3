;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned_8 unsigned_8) Bool)

(declare-const dummy1 unsigned_8)

(declare-datatypes ((unsigned_8__ref 0))
(((mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8
  (unsigned_8__content a))

(define-fun dynamic_invariant1 ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(declare-const byte (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const left Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const ret Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

;; ret__def_axiom
  (assert
  (= ret (not (= (bvand byte (ite (< (- 7 left) 8)
                             (bvshl ((_ int2bv 8) 1) ((_ int2bv 8) (- 7
                             left))) ((_ int2bv 8) 0))) ((_ int2bv 8) 0)))))

(declare-const bitwalker__peekbit8__result Bool)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 (_ BitVec 8))

(declare-const o3 (_ BitVec 8))

(declare-const o4 (_ BitVec 8))

(declare-const o5 Bool)

(declare-const bitwalker__peekbit8__ret__assume Bool)

(declare-const o6 Int)

(declare-const o7 Bool)

(declare-const result Bool)

(declare-const result1 Bool)

(declare-const bitwalker__peekbit8__result1 Bool)

(declare-const bitwalker__peekbit8__result2 Bool)

(declare-const bitwalker__peekbit8__result3 Bool)

(declare-const bitwalker__peekbit8__result4 Bool)

(declare-const bitwalker__peekbit8__result5 Bool)

(define-fun bitwalker__peekbit8__result6 () bool__ref (mk_bool__ref
                                                      bitwalker__peekbit8__result4))

(define-fun bitwalker__peekbit8__result7 () bool__ref (mk_bool__ref
                                                      bitwalker__peekbit8__result2))

(define-fun result2 () bool__ref (mk_bool__ref result1))

(define-fun bitwalker__peekbit8__result8 () bool__ref (mk_bool__ref
                                                      bitwalker__peekbit8__result))

(declare-const result3 Bool)

;; H
  (assert true)

;; H
  (assert (in_range1 left))

;; H
  (assert (< left 8))

;; H
  (assert (and (= o (- 7 left)) (in_range1 (- 7 left))))

;; H
  (assert (= result (ite (< o 8) true false)))

;; H
  (assert
  (=> (= result true) (and (= o1 (- 7 left)) (in_range1 (- 7 left)))))

;; H
  (assert (=> (= result true) (= o2 ((_ int2bv 8) o1))))

;; H
  (assert (=> (= result true) (= o3 (bvshl ((_ int2bv 8) 1) o2))))

;; H
  (assert (=> (not (= result true)) (= o3 ((_ int2bv 8) 0))))

;; H
  (assert (= o4 (bvand byte o3)))

;; H
  (assert (= o5 (ite (= o4 ((_ int2bv 8) 0)) true false)))

;; H
  (assert
  (= bitwalker__peekbit8__ret__assume (ite (not (= o5 true)) true false)))

;; H
  (assert (= bitwalker__peekbit8__ret__assume ret))

;; H
  (assert (= bitwalker__peekbit8__result1 bitwalker__peekbit8__result2))

;; H
  (assert (= bitwalker__peekbit8__result3 bitwalker__peekbit8__result1))

;; H
  (assert (= result2 bitwalker__peekbit8__result8))

;; H
  (assert (= bitwalker__peekbit8__result1 ret))

;; H
  (assert (= bitwalker__peekbit8__result6 bitwalker__peekbit8__result7))

;; H
  (assert (= bitwalker__peekbit8__result5 bitwalker__peekbit8__result3))

;; H
  (assert (= result3 bitwalker__peekbit8__result4))

;; H
  (assert (= bitwalker__peekbit8__result4 true))

(assert
;; WP_parameter_def
 ;; File "bitwalker.ads", line 9, characters 0-0
  (not (= (nth byte (- 7 left)) true)))
(check-sat)
(exit)
