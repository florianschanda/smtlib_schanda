;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-fun to_int1 (RoundingMode Float64) Int)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float64) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort coordinate_type 0)

(define-fun in_range2 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq1 (coordinate_type coordinate_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)

(declare-const dummy1 coordinate_type)

(declare-datatypes ()
((coordinate_type__ref
 (mk_coordinate_type__ref (coordinate_type__content coordinate_type)))))
(define-fun coordinate_type__ref___projection ((a coordinate_type__ref)) coordinate_type
  (coordinate_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_135 Float64)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
                                      (in_range2 temp___expr_135)))

(declare-fun to_rep (coordinate_type) Float64)

(declare-fun of_rep (Float64) coordinate_type)

;; inversion_axiom
  (assert
  (forall ((x coordinate_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x coordinate_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort radius_type 0)

(define-fun in_range3 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq2 (radius_type radius_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float64)

(declare-const dummy2 radius_type)

(declare-datatypes ()
((radius_type__ref (mk_radius_type__ref (radius_type__content radius_type)))))
(define-fun radius_type__ref___projection ((a radius_type__ref)) radius_type
  (radius_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_141 Float64)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))
                                      (in_range3 temp___expr_141)))

(declare-fun to_rep1 (radius_type) Float64)

(declare-fun of_rep1 (Float64) radius_type)

;; inversion_axiom
  (assert
  (forall ((x radius_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x radius_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__shapes5__circle__center_x coordinate_type)(rec__shapes5__circle__center_y coordinate_type)(rec__shapes5__circle__radius radius_type)))))
(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__shapes5__circle__center_x
                           (us_split_fields1 a))) (to_rep
                                                  (rec__shapes5__circle__center_x
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__shapes5__circle__center_y
                           (us_split_fields1 a))) (to_rep
                                                  (rec__shapes5__circle__center_y
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__shapes5__circle__radius
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__shapes5__circle__radius
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const shapes5__circle__center_x__first__bit Int)

(declare-const shapes5__circle__center_x__last__bit Int)

(declare-const shapes5__circle__center_x__position Int)

;; shapes5__circle__center_x__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_x__first__bit))

;; shapes5__circle__center_x__last__bit_axiom
  (assert
  (< shapes5__circle__center_x__first__bit shapes5__circle__center_x__last__bit))

;; shapes5__circle__center_x__position_axiom
  (assert (<= 0 shapes5__circle__center_x__position))

(declare-const shapes5__circle__center_y__first__bit Int)

(declare-const shapes5__circle__center_y__last__bit Int)

(declare-const shapes5__circle__center_y__position Int)

;; shapes5__circle__center_y__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_y__first__bit))

;; shapes5__circle__center_y__last__bit_axiom
  (assert
  (< shapes5__circle__center_y__first__bit shapes5__circle__center_y__last__bit))

;; shapes5__circle__center_y__position_axiom
  (assert (<= 0 shapes5__circle__center_y__position))

(declare-const shapes5__circle__radius__first__bit Int)

(declare-const shapes5__circle__radius__last__bit Int)

(declare-const shapes5__circle__radius__position Int)

;; shapes5__circle__radius__first__bit_axiom
  (assert (<= 0 shapes5__circle__radius__first__bit))

;; shapes5__circle__radius__last__bit_axiom
  (assert
  (< shapes5__circle__radius__first__bit shapes5__circle__radius__last__bit))

;; shapes5__circle__radius__position_axiom
  (assert (<= 0 shapes5__circle__radius__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((circle__ref (mk_circle__ref (circle__content us_rep)))))
(define-fun circle__ref___projection ((a circle__ref)) us_rep (circle__content
                                                              a))

(declare-const x Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const radius Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun in_bounds (us_rep Int) Bool)

(declare-fun in_bounds__function_guard (Bool us_rep Int) Bool)

;; in_bounds__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const wild_man Int)

(declare-const r Float64)

(declare-const shapes5__make_circle__result coordinate_type)

(declare-const shapes5__make_circle__result1 coordinate_type)

(declare-const shapes5__make_circle__result2 radius_type)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const o4 radius_type)

(declare-const o5 coordinate_type)

(declare-const o6 coordinate_type)

(declare-const o7 coordinate_type)

(declare-const o8 coordinate_type)

(declare-const o9 radius_type)

(declare-const o10 coordinate_type)

(declare-const o11 coordinate_type)

(declare-const o12 radius_type)

(declare-const result Float64)

(declare-const r1 Float64)

(declare-const result1 Float64)

(declare-const r2 Float64)

(declare-const result2 Float64)

(declare-const r3 Float64)

(declare-const result3 Float64)

(declare-const r4 Float64)

(declare-const result4 Float64)

(declare-const r5 Float64)

(declare-const result5 coordinate_type)

(declare-const result6 coordinate_type)

(declare-const result7 radius_type)

(declare-const shapes5__make_circle__result3 coordinate_type)

(declare-const shapes5__make_circle__result4 coordinate_type)

(declare-const shapes5__make_circle__result5 radius_type)

(declare-const shapes5__make_circle__result6 coordinate_type)

(declare-const shapes5__make_circle__result7 coordinate_type)

(declare-const shapes5__make_circle__result8 radius_type)

(declare-const shapes5__make_circle__result9 us_rep)

(declare-const r6 t__ref)

(declare-const shapes5__make_circle__result10 circle__ref)

(declare-const r7 Float64)

(declare-const shapes5__make_circle__result11 us_rep)

(define-fun shapes5__make_circle__result12 () us_rep (mk___rep
                                                     (mk___split_fields
                                                     shapes5__make_circle__result3
                                                     shapes5__make_circle__result4
                                                     shapes5__make_circle__result5)))

;; H
  (assert (in_range2 x))

;; H
  (assert (in_range2 y))

;; H
  (assert (in_range3 radius))

;; H
  (assert (in_range1 wild_man))

;; H
  (assert (= (mk_t__ref result) (mk_t__ref r)))

;; H
  (assert (= r1 radius))

;; H
  (assert (in_range3 r1))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1)
  (and
  (= o (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x))
  (fp.isFinite64 (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x)))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1) (= r1 result1)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1) (= r2 o)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1)) (= r2 r1)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2)
  (and
  (= o1 (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000))))
  (fp.isFinite64 (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2) (= r2 result2)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2) (= r3 o1)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2)) (= r3 r2)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3)
  (and
  (= o2 (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y))
  (fp.isFinite64 (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y)))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3) (= r3 result3)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3) (= r4 o2)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3)) (= r4 r3)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r4)
  (and
  (= o3 (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000))))
  (fp.isFinite64 (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r4) (= result4 r4)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r4) (= r5 o3)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r4)) (= r5 r4)))

;; H
  (assert (= shapes5__make_circle__result6 shapes5__make_circle__result3))

;; H
  (assert (= shapes5__make_circle__result7 shapes5__make_circle__result4))

;; H
  (assert (= shapes5__make_circle__result8 shapes5__make_circle__result5))

;; H
  (assert (= shapes5__make_circle__result9 shapes5__make_circle__result12))

;; H
  (assert (= (to_rep1 o4) r5))

;; H
  (assert (= (to_rep o5) y))

;; H
  (assert (= (to_rep o6) x))

;; H
  (assert (= o6 o7))

;; H
  (assert (= o5 o8))

;; H
  (assert (= o4 o9))

;; H
  (assert (= o10 o7))

;; H
  (assert (= o11 o8))

;; H
  (assert (= o12 o9))

;; H
  (assert (= result5 shapes5__make_circle__result))

;; H
  (assert (= result6 shapes5__make_circle__result1))

;; H
  (assert (= result7 shapes5__make_circle__result2))

;; H
  (assert
  (= shapes5__make_circle__result12 (mk___rep
                                    (mk___split_fields o10 o11 o12))))

;; H
  (assert
  (= shapes5__make_circle__result10 (mk_circle__ref
                                    (mk___rep
                                    (mk___split_fields
                                    shapes5__make_circle__result6
                                    shapes5__make_circle__result7
                                    shapes5__make_circle__result8)))))

;; H
  (assert (= r6 (mk_t__ref r5)))

;; H
  (assert (= shapes5__make_circle__result11 shapes5__make_circle__result9))

;; H
  (assert (= r7 r5))

(assert
;; WP_parameter_def
 ;; File "shapes5.ads", line 27, characters 0-0
  (not (in_range2
  (fp.add RNE (to_rep
              (rec__shapes5__circle__center_x
              (us_split_fields1
              (circle__content shapes5__make_circle__result10)))) (to_rep1
                                                                  (rec__shapes5__circle__radius
                                                                  (us_split_fields1
                                                                  (circle__content
                                                                  shapes5__make_circle__result10))))))))
(check-sat)
(exit)
