;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__rec_aggregate__r2__x integer)(rec__rec_aggregate__r2__y integer)))))
(define-fun us_split_fields_X2__projection ((a us_split_fields)) integer
  (rec__rec_aggregate__r2__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer
  (rec__rec_aggregate__r2__y a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__rec_aggregate__r2__x (us_split_fields1 a)))
                        (to_rep
                        (rec__rec_aggregate__r2__x (us_split_fields1 b))))
                        (= (to_rep
                           (rec__rec_aggregate__r2__y (us_split_fields1 a)))
                        (to_rep
                        (rec__rec_aggregate__r2__y (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun rec_aggregate__r2__x__first__bit () Int)

(declare-fun rec_aggregate__r2__x__last__bit () Int)

(declare-fun rec_aggregate__r2__x__position () Int)

;; rec_aggregate__r2__x__first__bit_axiom
  (assert (<= 0 rec_aggregate__r2__x__first__bit))

;; rec_aggregate__r2__x__last__bit_axiom
  (assert
  (< rec_aggregate__r2__x__first__bit rec_aggregate__r2__x__last__bit))

;; rec_aggregate__r2__x__position_axiom
  (assert (<= 0 rec_aggregate__r2__x__position))

(declare-fun rec_aggregate__r2__y__first__bit () Int)

(declare-fun rec_aggregate__r2__y__last__bit () Int)

(declare-fun rec_aggregate__r2__y__position () Int)

;; rec_aggregate__r2__y__first__bit_axiom
  (assert (<= 0 rec_aggregate__r2__y__first__bit))

;; rec_aggregate__r2__y__last__bit_axiom
  (assert
  (< rec_aggregate__r2__y__first__bit rec_aggregate__r2__y__last__bit))

;; rec_aggregate__r2__y__position_axiom
  (assert (<= 0 rec_aggregate__r2__y__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((r2__ref (mk_r2__ref (r2__content us_rep)))))
(define-fun r2__ref___projection ((a r2__ref)) us_rep (r2__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun one () Int)

(declare-fun r__split_fields () integer)

(declare-fun r__split_fields1 () integer)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun temp___172 () integer)

(declare-fun temp___1721 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun o6 () integer)

(declare-fun o7 () integer)

(declare-fun temp___173 () integer)

(declare-fun temp___1731 () integer)

(declare-fun o8 () integer)

(declare-fun o9 () integer)

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun temp___174 () integer)

(declare-fun temp___1741 () integer)

(declare-fun o12 () integer)

(declare-fun o13 () integer)

(declare-fun o14 () integer)

(declare-fun o15 () integer)

(declare-fun temp___175 () integer)

(declare-fun temp___1751 () integer)

(declare-fun o16 () integer)

(declare-fun o17 () integer)

(declare-fun o18 () integer)

(declare-fun o19 () integer)

(declare-fun temp___176 () integer)

(declare-fun temp___1761 () integer)

(declare-fun result () integer)

(declare-fun result1 () integer)

(declare-fun r__split_fields2 () integer)

(declare-fun r__split_fields3 () integer)

(declare-fun result2 () us_split_fields__ref)

(declare-fun r__split_fields4 () us_split_fields)

(declare-fun result3 () us_split_fields__ref)

(declare-fun r__split_fields5 () us_split_fields)

(declare-fun result4 () us_split_fields__ref)

(declare-fun r__split_fields6 () us_split_fields)

(declare-fun result5 () us_split_fields__ref)

(declare-fun r__split_fields7 () us_split_fields)

(declare-fun r__split_fields8 () us_split_fields__ref)

(declare-fun r__split_fields9 () us_split_fields)

(define-fun r__split_fields10 () us_split_fields (mk___split_fields
                                                 r__split_fields2
                                                 r__split_fields3))

(define-fun r__split_fields11 () us_split_fields__ref (mk___split_fields__ref
                                                      (mk___split_fields
                                                      r__split_fields
                                                      r__split_fields1)))

;; H
  (assert (in_range one))

;; H
  (assert (in_range b))

;; H
  (assert (= one 1))

;; H
  (assert (=> (= b 1) (= (to_rep o) 2)))

;; H
  (assert (=> (= b 1) (= (to_rep o1) one)))

;; H
  (assert (=> (= b 1) (= o1 o2)))

;; H
  (assert (=> (= b 1) (= o o3)))

;; H
  (assert (=> (= b 1) (= temp___172 o2)))

;; H
  (assert (=> (= b 1) (= temp___1721 o3)))

;; H
  (assert
  (=> (= b 1)
  (= (mk___split_fields__ref (mk___split_fields result result1)) r__split_fields11)))

;; H
  (assert (=> (= b 1) (= temp___172 r__split_fields2)))

;; H
  (assert (=> (= b 1) (= temp___1721 r__split_fields3)))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o4) one))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o5) one))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o5 o6))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o4 o7))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= temp___173 o6))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= temp___1731 o7))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= result2 r__split_fields11))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (= b 2)
  (= r__split_fields4 (mk___split_fields temp___173 temp___1731)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o8) one)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o9) one)))))

;; H
  (assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= o9 o10)))))

;; H
  (assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= o8 o11)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= temp___174 o10)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= temp___1741 o11)))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= result3 r__split_fields11)))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (= b 3)
  (= r__split_fields5 (mk___split_fields temp___174 temp___1741))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o12) one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o13) 2))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= o13 o14))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= o12 o15))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= temp___175 o14))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= temp___1751 o15))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= result4 r__split_fields11))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3))
  (=> (= b 4)
  (= r__split_fields6 (mk___split_fields temp___175 temp___1751)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o16) 2))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o17) one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= o17 o18))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= o16 o19))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= temp___176 o18))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= temp___1761 o19))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= result5 r__split_fields11))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3))
  (=> (not (= b 4))
  (= r__split_fields7 (mk___split_fields temp___176 temp___1761)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= r__split_fields6 r__split_fields7))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (= r__split_fields5 r__split_fields6)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (= r__split_fields4 r__split_fields5))))

;; H
  (assert (=> (not (= b 1)) (= r__split_fields10 r__split_fields4)))

;; H
  (assert (= r__split_fields8 (mk___split_fields__ref r__split_fields10)))

;; H
  (assert (= r__split_fields9 r__split_fields10))

;; H
  (assert (= b 1))

(assert
;; WP_parameter_def
 ;; File "rec_aggregate.ads", line 3, characters 0-0
  (not
  (= (bool_eq (mk___rep (us_split_fields__content r__split_fields8))
     (mk___rep (mk___split_fields (of_rep one) (of_rep (* 2 one))))) true)))
(check-sat)
(exit)
