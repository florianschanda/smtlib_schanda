;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr3 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr3 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl3 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left4 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right4 v (bv2nat n)))))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv3 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth3 x (bv2nat i)) (nth_bv3 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-const dummy1 unsigned16)

(declare-datatypes ()
((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-const dummy2 unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-const dummy3 unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (eax x86__rax)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((eax x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ecx__post_axiom
  (assert
  (forall ((x86__rcx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rcx true true true)
     (let ((result (ecx x86__rcx)))
     (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ecx x86__rcx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true
     false true)))) :pattern ((edx x86__rdx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)

(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 16)) Bool)

(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ebx__post_axiom
  (assert
  (forall ((x86__rbx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rbx true true true)
     (let ((result (ebx x86__rbx)))
     (and (= result (readreg32 x86__rbx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ebx x86__rbx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esp__post_axiom
  (assert
  (forall ((x86__rsp (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsp true true true)
     (let ((result (esp x86__rsp)))
     (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true
     false true)))) :pattern ((esp x86__rsp)) )))

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__rsi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsi true true true)
     (let ((result (esi x86__rsi)))
     (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true
     false true)))) :pattern ((esi x86__rsi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true
     false true)))) :pattern ((edi x86__rdi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3
     result true false true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant2 result true false true)))) :pattern ((readmem32 addr
                                                              x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-const dummy4 unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-sort unsigned81 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (unsigned81 unsigned81) Bool)

(declare-const dummy5 unsigned81)

(declare-datatypes ()
((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref___2__projection ((a unsigned8__ref1)) unsigned81
  (unsigned8__content1 a))

(define-fun dynamic_invariant5 ((temp___expr_292 (_ BitVec 8))
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))

(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)

;; readreg16__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg16 reg)))
     (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg16 reg)) )))

;; writereg16post__post_axiom
  (assert
  (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 16)))
  (! (=>
     (and
     (and (dynamic_invariant regold true true true) (dynamic_invariant regnew
     true true true)) (dynamic_invariant1 val__ true true true))
     (= (= (writereg16post regold regnew val__) true)
     (and (= (readreg16 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080)))))) :pattern (
  (writereg16post regold regnew val__)) ))))

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const xmm0 (_ BitVec 64))

(declare-const xmm1 (_ BitVec 64))

(declare-const xmm2 (_ BitVec 64))

(declare-const xmm3 (_ BitVec 64))

(declare-const rbx t__ref3)

(declare-const rsp t__ref3)

(declare-const rbp t__ref3)

(declare-const rsi t__ref3)

(declare-const rdi t__ref3)

(declare-const r12 t__ref3)

(declare-const r13 t__ref3)

(declare-const r14 t__ref3)

(declare-const r15 t__ref3)

(declare-const memory map__ref)

(declare-const savestackptr t__ref3)

(declare-const ra0 t__ref)

(declare-const ra1 t__ref)

(declare-const ra2 t__ref)

(declare-const ra3 t__ref)

(declare-const ra4 t__ref)

(declare-const ra5 t__ref)

(declare-const ra6 t__ref)

(declare-const ra7 t__ref)

(declare-const saverbx t__ref3)

(declare-const saverbp t__ref3)

(declare-const saver12 t__ref3)

(declare-const saver13 t__ref3)

(declare-const saver14 t__ref3)

(declare-const saver15 t__ref3)

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 8))

(declare-const o2 (_ BitVec 8))

(declare-const o3 (_ BitVec 8))

(declare-const o4 (_ BitVec 8))

(declare-const o5 (_ BitVec 8))

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 8))

(declare-const o10 (_ BitVec 8))

(declare-const o11 (_ BitVec 8))

(declare-const o12 (_ BitVec 8))

(declare-const o13 (_ BitVec 8))

(declare-const o14 (_ BitVec 8))

(declare-const o15 (_ BitVec 8))

(declare-const o16 (_ BitVec 8))

(declare-const o17 (_ BitVec 64))

(declare-const o18 (_ BitVec 64))

(declare-const o19 (_ BitVec 64))

(declare-const o20 (_ BitVec 64))

(declare-const o21 (_ BitVec 64))

(declare-const o22 (_ BitVec 64))

(declare-const o23 (_ BitVec 64))

(declare-const o24 (_ BitVec 64))

(declare-const o25 (_ BitVec 64))

(declare-const o26 (_ BitVec 64))

(declare-const o27 (_ BitVec 32))

(declare-const o28 (_ BitVec 32))

(declare-const o29 (_ BitVec 64))

(declare-const o30 (_ BitVec 32))

(declare-const o31 (_ BitVec 32))

(declare-const o32 (_ BitVec 32))

(declare-const o33 (_ BitVec 32))

(declare-const o34 Bool)

(declare-const o35 (_ BitVec 32))

(declare-const o36 (_ BitVec 32))

(declare-const o37 (_ BitVec 32))

(declare-const o38 Bool)

(declare-const o39 (_ BitVec 64))

(declare-const o40 (_ BitVec 32))

(declare-const o41 (_ BitVec 32))

(declare-const o42 (_ BitVec 32))

(declare-const o43 (_ BitVec 32))

(declare-const o44 (_ BitVec 32))

(declare-const o45 Bool)

(declare-const o46 (_ BitVec 32))

(declare-const o47 (_ BitVec 32))

(declare-const o48 (_ BitVec 32))

(declare-const o49 Bool)

(declare-const o50 (_ BitVec 32))

(declare-const o51 (_ BitVec 32))

(declare-const o52 Bool)

(declare-const o53 (_ BitVec 32))

(declare-const o54 (_ BitVec 32))

(declare-const o55 (_ BitVec 32))

(declare-const o56 (_ BitVec 32))

(declare-const o57 Bool)

(declare-const o58 Bool)

(declare-const o59 Bool)

(declare-const result t__ref3)

(declare-const savestackptr1 (_ BitVec 64))

(declare-const result1 t__ref)

(declare-const ra01 (_ BitVec 8))

(declare-const result2 t__ref)

(declare-const ra11 (_ BitVec 8))

(declare-const result3 t__ref)

(declare-const ra21 (_ BitVec 8))

(declare-const result4 t__ref)

(declare-const ra31 (_ BitVec 8))

(declare-const result5 t__ref)

(declare-const ra41 (_ BitVec 8))

(declare-const result6 t__ref)

(declare-const ra51 (_ BitVec 8))

(declare-const result7 t__ref)

(declare-const ra61 (_ BitVec 8))

(declare-const result8 t__ref)

(declare-const ra71 (_ BitVec 8))

(declare-const result9 t__ref3)

(declare-const saverbx1 (_ BitVec 64))

(declare-const result10 t__ref3)

(declare-const saverbp1 (_ BitVec 64))

(declare-const result11 t__ref3)

(declare-const saver121 (_ BitVec 64))

(declare-const result12 t__ref3)

(declare-const saver131 (_ BitVec 64))

(declare-const result13 t__ref3)

(declare-const saver141 (_ BitVec 64))

(declare-const result14 t__ref3)

(declare-const saver151 (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const result15 t__ref3)

(declare-const rsp1 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const result16 t__ref3)

(declare-const rsp2 (_ BitVec 64))

(declare-const rdi1 (_ BitVec 64))

(declare-const memory3 (Array (_ BitVec 64) unsigned8))

(declare-const result17 t__ref3)

(declare-const rsp3 (_ BitVec 64))

(declare-const memory4 (Array (_ BitVec 64) unsigned8))

(declare-const result18 t__ref3)

(declare-const rsp4 (_ BitVec 64))

(declare-const memory5 (Array (_ BitVec 64) unsigned8))

(declare-const result19 t__ref3)

(declare-const rsp5 (_ BitVec 64))

(declare-const memory6 (Array (_ BitVec 64) unsigned8))

(declare-const result20 t__ref3)

(declare-const rsp6 (_ BitVec 64))

(declare-const rbx1 (_ BitVec 64))

(declare-const result21 t__ref3)

(declare-const rsp7 (_ BitVec 64))

(declare-const result22 t__ref3)

(declare-const rsp8 (_ BitVec 64))

(declare-const rsp9 (_ BitVec 64))

(declare-const result23 t__ref3)

(declare-const rsi1 (_ BitVec 64))

(declare-const result24 t__ref3)

(declare-const rdi2 (_ BitVec 64))

(declare-const result25 t__ref3)

(declare-const rbp1 (_ BitVec 64))

(declare-const result26 t__ref3)

(declare-const xmm31 (_ BitVec 64))

(declare-const result27 t__ref3)

(declare-const xmm21 (_ BitVec 64))

(declare-const result28 t__ref3)

(declare-const xmm11 (_ BitVec 64))

(declare-const result29 t__ref3)

(declare-const xmm01 (_ BitVec 64))

(declare-const result30 t__ref3)

(declare-const rsp10 (_ BitVec 64))

(declare-const rsp11 (_ BitVec 64))

(declare-const rdi3 (_ BitVec 64))

(declare-const rax (_ BitVec 64))

(declare-const result31 t__ref3)

(declare-const rsp12 (_ BitVec 64))

(declare-const rsp13 (_ BitVec 64))

(declare-const rdi4 (_ BitVec 64))

(declare-const result32 bool__ref)

(declare-const zeroflag1 Bool)

(declare-const result33 bool__ref)

(declare-const signflag1 Bool)

(declare-const result34 bool__ref)

(declare-const carryflag1 Bool)

(declare-const result35 bool__ref)

(declare-const overflowflag1 Bool)

(declare-const zeroflag2 Bool)

(declare-const carryflag2 Bool)

(declare-const signflag2 Bool)

(declare-const overflowflag2 Bool)

(declare-const xmm02 (_ BitVec 64))

(declare-const rbx2 (_ BitVec 64))

(declare-const rsp14 (_ BitVec 64))

(declare-const rbp2 (_ BitVec 64))

(declare-const result36 t__ref3)

(declare-const xmm03 (_ BitVec 64))

(declare-const rdi5 (_ BitVec 64))

(declare-const rax1 (_ BitVec 64))

(declare-const rbx3 (_ BitVec 64))

(declare-const result37 t__ref3)

(declare-const rbp3 (_ BitVec 64))

(declare-const result38 t__ref3)

(declare-const rsp15 (_ BitVec 64))

(declare-const rsp16 (_ BitVec 64))

(declare-const result39 bool__ref)

(declare-const zeroflag3 Bool)

(declare-const result40 bool__ref)

(declare-const signflag3 Bool)

(declare-const result41 bool__ref)

(declare-const carryflag3 Bool)

(declare-const result42 Bool)

(declare-const result43 Bool)

(declare-const result44 bool__ref)

(declare-const overflowflag3 Bool)

;; H
  (assert (= o (t__content3 rsp)))

;; H
  (assert (= result savestackptr))

;; H
  (assert (= (let ((subject savestackptr)) savestackptr1) o))

;; H
  (assert
  (and (= o1 (readmem8 (t__content3 rsp) (map__content memory)))
  (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))

;; H
  (assert (= o2 o1))

;; H
  (assert (= result1 ra0))

;; H
  (assert (= (let ((subject ra0)) ra01) o2))

;; H
  (assert
  (and
  (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
        (map__content memory)))
  (= o3 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))

;; H
  (assert (= o4 o3))

;; H
  (assert (= result2 ra1))

;; H
  (assert (= (let ((subject ra1)) ra11) o4))

;; H
  (assert
  (and
  (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
        (map__content memory)))
  (= o5 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))

;; H
  (assert (= o6 o5))

;; H
  (assert (= result3 ra2))

;; H
  (assert (= (let ((subject ra2)) ra21) o6))

;; H
  (assert
  (and
  (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
        (map__content memory)))
  (= o7 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= result4 ra3))

;; H
  (assert (= (let ((subject ra3)) ra31) o8))

;; H
  (assert
  (and
  (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
        (map__content memory)))
  (= o9 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= result5 ra4))

;; H
  (assert (= (let ((subject ra4)) ra41) o10))

;; H
  (assert
  (and
  (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
         (map__content memory)))
  (= o11 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= result6 ra5))

;; H
  (assert (= (let ((subject ra5)) ra51) o12))

;; H
  (assert
  (and
  (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
         (map__content memory)))
  (= o13 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))

;; H
  (assert (= o14 o13))

;; H
  (assert (= result7 ra6))

;; H
  (assert (= (let ((subject ra6)) ra61) o14))

;; H
  (assert
  (and
  (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
         (map__content memory)))
  (= o15 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))

;; H
  (assert (= o16 o15))

;; H
  (assert (= result8 ra7))

;; H
  (assert (= (let ((subject ra7)) ra71) o16))

;; H
  (assert (= o17 (t__content3 rbx)))

;; H
  (assert (= result9 saverbx))

;; H
  (assert (= (let ((subject saverbx)) saverbx1) o17))

;; H
  (assert (= o18 (t__content3 rbp)))

;; H
  (assert (= result10 saverbp))

;; H
  (assert (= (let ((subject saverbp)) saverbp1) o18))

;; H
  (assert (= o19 (t__content3 r12)))

;; H
  (assert (= result11 saver12))

;; H
  (assert (= (let ((subject saver12)) saver121) o19))

;; H
  (assert (= o20 (t__content3 r13)))

;; H
  (assert (= result12 saver13))

;; H
  (assert (= (let ((subject saver13)) saver131) o20))

;; H
  (assert (= o21 (t__content3 r14)))

;; H
  (assert (= result13 saver14))

;; H
  (assert (= (let ((subject saver14)) saver141) o21))

;; H
  (assert (= o22 (t__content3 r15)))

;; H
  (assert (= result14 saver15))

;; H
  (assert (= (let ((subject saver15)) saver151) o22))

;; H
  (assert (= (t__content3 rsp) ((_ int2bv 64) 12105675798371893247)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r15) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep
                                                          (select (map__content
                                                                  memory) i))))))))

;; H
  (assert (= result15 rsp))

;; H
  (assert
  (= (let ((subject rsp)) rsp1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r14) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory1) i))))))))

;; H
  (assert (= result16 (let ((subject rsp)) (mk_t__ref3 rsp1))))

;; H
  (assert
  (= (let ((subject rsp)) rsp2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi1) ((_ int2bv 32) 4198504)) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r13) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory2) i))))))))

;; H
  (assert (= result17 (let ((subject rsp)) (mk_t__ref3 rsp2))))

;; H
  (assert
  (= (let ((subject rsp)) rsp3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r12) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory3) i))))))))

;; H
  (assert (= result18 (let ((subject rsp)) (mk_t__ref3 rsp3))))

;; H
  (assert
  (= (let ((subject rsp)) rsp4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory4) i))))))))

;; H
  (assert (= result19 (let ((subject rsp)) (mk_t__ref3 rsp4))))

;; H
  (assert
  (= (let ((subject rsp)) rsp5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory5) i))))))))

;; H
  (assert (= result20 (let ((subject rsp)) (mk_t__ref3 rsp5))))

;; H
  (assert
  (= (let ((subject rsp)) rsp6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx1) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result21 (let ((subject rsp)) (mk_t__ref3 rsp6))))

;; H
  (assert
  (= (let ((subject rsp)) rsp7) (bvsub (let ((subject rsp)) rsp6) ((_ int2bv 64) 104))))

;; H
  (assert (= result22 (let ((subject rsp)) (mk_t__ref3 rsp7))))

;; H
  (assert
  (= (let ((subject rsp)) rsp8) (bvsub (let ((subject rsp)) rsp7) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp9) (bvadd (let ((subject rsp)) rsp8) ((_ int2bv 64) 8))))

;; H
  (assert (= result23 rsi))

;; H
  (assert
  (= (let ((subject rsi)) rsi1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))

;; H
  (assert (= result24 (let ((subject rdi)) (mk_t__ref3 rdi1))))

;; H
  (assert
  (= (let ((subject rdi)) rdi2) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 44))))

;; H
  (assert (= result25 rbp))

;; H
  (assert
  (= (let ((subject rbp)) rbp1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))

;; H
  (assert
  (and
  (= o23 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o23 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198776)))))
  (= (bvand o23 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o23 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o23 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o23 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o23 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o23 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o23 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result26 (mk_t__ref3 xmm3)))

;; H
  (assert (= xmm31 o23))

;; H
  (assert
  (and
  (= o24 (readmem64 ((_ int2bv 64) 4198784) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o24 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198784)))))
  (= (bvand o24 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o24 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o24 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o24 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o24 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o24 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o24 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result27 (mk_t__ref3 xmm2)))

;; H
  (assert (= xmm21 o24))

;; H
  (assert
  (and
  (= o25 (readmem64 ((_ int2bv 64) 4198792) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o25 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198792)))))
  (= (bvand o25 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o25 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o25 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o25 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o25 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o25 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o25 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result28 (mk_t__ref3 xmm1)))

;; H
  (assert (= xmm11 o25))

;; H
  (assert
  (and
  (= o26 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o26 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o26 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o26 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o26 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o26 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o26 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o26 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o26 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result29 (mk_t__ref3 xmm0)))

;; H
  (assert (= xmm01 o26))

;; H
  (assert (= result30 (let ((subject rsp)) (mk_t__ref3 rsp9))))

;; H
  (assert
  (= (let ((subject rsp)) rsp10) (bvsub (let ((subject rsp)) rsp9) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp11) (bvadd (let ((subject rsp)) rsp10) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi3) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= (writereg32post rax ((_ int2bv 32) 0)) true))

;; H
  (assert (= result31 (let ((subject rsp)) (mk_t__ref3 rsp11))))

;; H
  (assert
  (= (let ((subject rsp)) rsp12) (bvsub (let ((subject rsp)) rsp11) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp13) (bvadd (let ((subject rsp)) rsp12) ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o27 (esp (let ((subject rsp)) rsp13)))
  (= o27 (readreg32 (let ((subject rsp)) rsp13)))))

;; H
  (assert (= o28 (bvadd o27 ((_ int2bv 32) 44))))

;; H
  (assert (= o29 ((_ zero_extend 32) o28)))

;; H
  (assert
  (and (= o30 (readmem32 o29 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o30 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6)
                                                         o29))))
  (= (bvand o30 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd
                                                                  o29 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o30 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o30 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post (let ((subject rdi)) rdi4) o30) true))

;; H
  (assert
  (and (= o31 (edi (let ((subject rdi)) rdi4)))
  (= o31 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert
  (and (= o32 (edi (let ((subject rdi)) rdi4)))
  (= o32 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert (= o33 (bvand o32 o31)))

;; H
  (assert (= o34 (ite (= o33 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result32 (mk_bool__ref zeroflag)))

;; H
  (assert (= zeroflag1 o34))

;; H
  (assert
  (and (= o35 (edi (let ((subject rdi)) rdi4)))
  (= o35 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert
  (and (= o36 (edi (let ((subject rdi)) rdi4)))
  (= o36 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert (= o37 (bvand o36 o35)))

;; H
  (assert (= o38 (ite (bvugt o37 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result33 (mk_bool__ref signflag)))

;; H
  (assert (= signflag1 o38))

;; H
  (assert (= result34 (mk_bool__ref carryflag)))

;; H
  (assert (= carryflag1 (of_int 0)))

;; H
  (assert (= result35 (mk_bool__ref overflowflag)))

;; H
  (assert (= overflowflag1 (of_int 0)))

;; H
  (assert (not (= zeroflag1 true)))

;; H
  (assert (= (to_int5 signflag1) (to_int5 overflowflag1)))

;; H
  (assert (= (let ((subject rsp)) rsp14) (let ((subject rsp)) rsp13)))

;; H
  (assert
  (and (not (= zeroflag2 true))
  (= (= signflag2 true) (= overflowflag2 true))))

;; H
  (assert
  (and
  (= o39 (readmem64 (let ((subject rbp)) rbp2)
         (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o39 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6)
                                                         (let ((subject
                                                         rbp)) rbp2)))))
  (= (bvand o39 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd
                                                                  (let ((subject
                                                                  rbp))
                                                                  rbp2) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o39 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o39 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o39 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o39 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o39 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o39 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result36 (mk_t__ref3 xmm02)))

;; H
  (assert (= xmm03 o39))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi5) ((_ int2bv 32) 4198699)) true))

;; H
  (assert (= (writereg32post rax1 ((_ int2bv 32) 1)) true))

;; H
  (assert
  (and (= o40 (ebx (let ((subject rbx)) rbx2)))
  (= o40 (readreg32 (let ((subject rbx)) rbx2)))))

;; H
  (assert (= o41 (bvadd o40 ((_ int2bv 32) 1))))

;; H
  (assert (= (writereg32post (let ((subject rbx)) rbx3) o41) true))

;; H
  (assert (= result37 (let ((subject rbp)) (mk_t__ref3 rbp2))))

;; H
  (assert
  (= (let ((subject rbp)) rbp3) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 8))))

;; H
  (assert (= result38 (let ((subject rsp)) (mk_t__ref3 rsp14))))

;; H
  (assert
  (= (let ((subject rsp)) rsp15) (bvsub (let ((subject rsp)) rsp14) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp16) (bvadd (let ((subject rsp)) rsp15) ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o42 (ebx (let ((subject rbx)) rbx3)))
  (= o42 (readreg32 (let ((subject rbx)) rbx3)))))

;; H
  (assert
  (and
  (= o43 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o43 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) (bvsub (bvadd
                                                         (let ((subject
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o43 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd
                                                                  (let ((subject
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o43 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o43 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= o44 (bvsub o43 o42)))

;; H
  (assert (= o45 (ite (= o44 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result39 (mk_bool__ref zeroflag2)))

;; H
  (assert (= zeroflag3 o45))

;; H
  (assert
  (and (= o46 (ebx (let ((subject rbx)) rbx3)))
  (= o46 (readreg32 (let ((subject rbx)) rbx3)))))

;; H
  (assert
  (and
  (= o47 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o47 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) (bvsub (bvadd
                                                         (let ((subject
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o47 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd
                                                                  (let ((subject
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o47 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o47 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= o48 (bvsub o47 o46)))

;; H
  (assert (= o49 (ite (bvugt o48 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result40 (mk_bool__ref signflag2)))

;; H
  (assert (= signflag3 o49))

;; H
  (assert
  (and (= o50 (ebx (let ((subject rbx)) rbx3)))
  (= o50 (readreg32 (let ((subject rbx)) rbx3)))))

;; H
  (assert
  (and
  (= o51 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o51 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) (bvsub (bvadd
                                                         (let ((subject
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o51 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd
                                                                  (let ((subject
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o51 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o51 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= o52 (ite (bvult o51 o50) true false)))

;; H
  (assert (= result41 (mk_bool__ref carryflag2)))

;; H
  (assert (= carryflag3 o52))

;; H
  (assert
  (=> (not (= signflag3 true))
  (and
  (= o56 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o56 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) (bvsub (bvadd
                                                         (let ((subject
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o56 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd
                                                                  (let ((subject
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o56 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o56 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=> (not (= signflag3 true))
  (= result42 (ite (bvugt o56 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert (=> (not (not (= signflag3 true))) (= result42 false)))

;; H
  (assert
  (=> (= result42 true)
  (and (= o55 (ebx (let ((subject rbx)) rbx3)))
  (= o55 (readreg32 (let ((subject rbx)) rbx3))))))

;; H
  (assert
  (=> (= result42 true)
  (= o57 (ite (bvule o55 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert (=> (not (= result42 true)) (= o57 false)))

;; H
  (assert
  (=> (= signflag3 true)
  (and (= o54 (ebx (let ((subject rbx)) rbx3)))
  (= o54 (readreg32 (let ((subject rbx)) rbx3))))))

;; H
  (assert
  (=> (= signflag3 true)
  (= result43 (ite (bvugt o54 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert (=> (not (= signflag3 true)) (= result43 false)))

;; H
  (assert
  (=> (= result43 true)
  (and
  (= o53 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o53 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory6) (bvsub (bvadd
                                                         (let ((subject
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o53 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd
                                                                  (let ((subject
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o53 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o53 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject
                                                                rsp))
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=> (= result43 true)
  (= o58 (ite (bvule o53 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert (=> (not (= result43 true)) (= o58 false)))

;; H
  (assert (= o59 (ite (= o58 false) o57 true)))

;; H
  (assert (= result44 (mk_bool__ref overflowflag2)))

;; H
  (assert (= overflowflag3 o59))

;; H
  (assert (not (= zeroflag3 true)))

;; H
  (assert (= (to_int5 signflag3) (to_int5 overflowflag3)))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not (= (let ((subject rsp)) rsp16) (let ((subject rsp)) rsp13))))
(check-sat)
(exit)
