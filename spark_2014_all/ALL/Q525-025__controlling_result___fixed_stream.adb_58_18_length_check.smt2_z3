;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tstream_element_offsetB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tstream_element_offsetB tstream_element_offsetB) Bool)

(declare-const dummy2 tstream_element_offsetB)

(declare-datatypes ((tstream_element_offsetB__ref 0))
(((mk_tstream_element_offsetB__ref
  (tstream_element_offsetB__content tstream_element_offsetB)))))
(define-fun tstream_element_offsetB__ref___projection ((a tstream_element_offsetB__ref)) tstream_element_offsetB
  (tstream_element_offsetB__content a))

(declare-fun to_rep1 (tstream_element_offsetB) Int)

(declare-fun of_rep1 (Int) tstream_element_offsetB)

;; inversion_axiom
  (assert
  (forall ((x tstream_element_offsetB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tstream_element_offsetB)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort stream_element_offset 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (stream_element_offset stream_element_offset) Bool)

(declare-const dummy3 stream_element_offset)

(declare-datatypes ((stream_element_offset__ref 0))
(((mk_stream_element_offset__ref
  (stream_element_offset__content stream_element_offset)))))
(define-fun stream_element_offset__ref___projection ((a stream_element_offset__ref)) stream_element_offset
  (stream_element_offset__content a))

(declare-sort stream_element 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (stream_element stream_element) Bool)

(declare-const dummy4 stream_element)

(declare-datatypes ((stream_element__ref 0))
(((mk_stream_element__ref (stream_element__content stream_element)))))
(define-fun stream_element__ref___projection ((a stream_element__ref)) stream_element
  (stream_element__content a))

(declare-fun to_rep2 (stream_element) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) stream_element)

;; inversion_axiom
  (assert
  (forall ((x stream_element))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int2 ((x stream_element)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x stream_element)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int stream_element))))))
(declare-fun slide ((Array Int stream_element) Int
  Int) (Array Int stream_element))

;; slide_eq
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int stream_element) Int Int
  (Array Int stream_element) Int Int) (Array Int stream_element))

;; concat_def
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (stream_element Int) (Array Int stream_element))

;; singleton_def
  (assert
  (forall ((v stream_element))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int stream_element)) (a__first Int)
  (a__last Int) (b (Array Int stream_element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep2 (select a temp___idx_132)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep2 (select a temp___idx_132)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int stream_element) Int Int
  (Array Int stream_element) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep2 (select a (+ j 1))) (to_rep2 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) tstream_element_offsetB)

(declare-fun last (t) tstream_element_offsetB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int stream_element))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int stream_element) (elts a))

(define-fun of_array ((a (Array Int stream_element)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int stream_element)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int stream_element)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int stream_element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int stream_element))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int stream_element)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int stream_element))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ((stream_element_array__ref 0))
(((mk_stream_element_array__ref (stream_element_array__content us_t)))))
(define-fun stream_element_array__ref___projection ((a stream_element_array__ref)) us_t
  (stream_element_array__content a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (character character) Bool)

(declare-const dummy6 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep3 (character) Int)

(declare-fun of_rep3 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int character))))))
(declare-fun slide1 ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep3 (select a temp___idx_78)) (to_rep3
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep3 (select a temp___idx_78)) (to_rep3
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare1 ((Array Int character) Int Int (Array Int character)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const dummy7 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__fixed_stream__object__width natural)(rec__fixed_stream__object__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_Width__projection ((a us_split_fields)) natural
  (rec__fixed_stream__object__width a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__fixed_stream__object__name a))

(define-fun us_split_fields_2__projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_4__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__fixed_stream__object__width
                           (us_split_fields1 a))) (to_rep
                                                  (rec__fixed_stream__object__width
                                                  (us_split_fields1 b))))
                        (= (bool_eq2
                           (rec__fixed_stream__object__name
                           (us_split_fields1 a)) 1 20
                           (rec__fixed_stream__object__name
                           (us_split_fields1 b)) 1 20) true))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const fixed_stream__object__width__first__bit Int)

(declare-const fixed_stream__object__width__last__bit Int)

(declare-const fixed_stream__object__width__position Int)

;; fixed_stream__object__width__first__bit_axiom
  (assert (<= 0 fixed_stream__object__width__first__bit))

;; fixed_stream__object__width__last__bit_axiom
  (assert
  (< fixed_stream__object__width__first__bit fixed_stream__object__width__last__bit))

;; fixed_stream__object__width__position_axiom
  (assert (<= 0 fixed_stream__object__width__position))

(declare-const fixed_stream__object__name__first__bit Int)

(declare-const fixed_stream__object__name__last__bit Int)

(declare-const fixed_stream__object__name__position Int)

;; fixed_stream__object__name__first__bit_axiom
  (assert (<= 0 fixed_stream__object__name__first__bit))

;; fixed_stream__object__name__last__bit_axiom
  (assert
  (< fixed_stream__object__name__first__bit fixed_stream__object__name__last__bit))

;; fixed_stream__object__name__position_axiom
  (assert (<= 0 fixed_stream__object__name__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((object__ref 0))
(((mk_object__ref (object__content us_rep)))))
(define-fun object__ref___projection ((a object__ref)) us_rep (object__content
                                                              a))

(declare-fun temp___178 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___180 Int))
  (forall ((temp___181 Int))
  (= (select (temp___178 temp___180) temp___181) (of_rep3 temp___180)))))

(define-fun default_initial_assumption ((temp___expr_176 us_rep)
  (temp___skip_top_level_177 Bool)) Bool (and
                                         (= (attr__tag temp___expr_176)
                                         us_tag)
                                         (and
                                         (= (to_rep
                                            (rec__fixed_stream__object__width
                                            (us_split_fields1
                                            temp___expr_176))) 0)
                                         (= (rec__fixed_stream__object__name
                                            (us_split_fields1
                                            temp___expr_176)) (temp___178 0)))))

(declare-fun elements (us_rep) Int)

(declare-fun elements__function_guard (Int us_rep) Bool)

(declare-fun elements1 (Int us_rep) Int)

(declare-fun elements__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

;; elements__post_axiom
  (assert
  (forall ((this us_rep)) (! (dynamic_invariant (elements this) true false
  true) :pattern ((elements this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep)) (! (dynamic_invariant (elements1 attr__tag1 this)
  true false true) :pattern ((elements1 attr__tag1 this)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (elements1 us_tag this)) :pattern ((elements1
                                                           us_tag this)) )))

;; elements__def_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (to_rep
                        (rec__fixed_stream__object__width
                        (us_split_fields1 this)))) :pattern ((elements this)) )))

(declare-const this us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (tstream_element_offsetB tstream_element_offsetB) Bool)

(declare-const dummy9 tstream_element_offsetB)

(declare-datatypes ((tTvalueSP1__ref 0))
(((mk_tTvalueSP1__ref (tTvalueSP1__content tstream_element_offsetB)))))
(define-fun tTvalueSP1__ref___projection ((a tTvalueSP1__ref)) tstream_element_offsetB
  (tTvalueSP1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) tstream_element_offsetB)

(declare-fun last2 (t1) tstream_element_offsetB)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int stream_element))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int stream_element) (elts1 a))

(define-fun of_array1 ((a (Array Int stream_element)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int stream_element)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int stream_element)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int stream_element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int stream_element))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int stream_element)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int stream_element))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq10 (us_t1 us_t1) Bool)

(declare-const dummy10 us_t1)

(declare-datatypes ((tvalueS__ref 0))
(((mk_tvalueS__ref (tvalueS__content us_t1)))))
(define-fun tvalueS__ref___projection ((a tvalueS__ref)) us_t1 (tvalueS__content
                                                               a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (tstream_element_offsetB
  tstream_element_offsetB) Bool)

(declare-const dummy11 tstream_element_offsetB)

(declare-datatypes ((t15b__ref 0))
(((mk_t15b__ref (t15b__content tstream_element_offsetB)))))
(define-fun t15b__ref___projection ((a t15b__ref)) tstream_element_offsetB
  (t15b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) tstream_element_offsetB)

(declare-fun last4 (t2) tstream_element_offsetB)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ((us_t2 0))
(((mk___t2 (elts2 (Array Int stream_element))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int stream_element) (elts2 a))

(define-fun of_array2 ((a (Array Int stream_element)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int stream_element)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int stream_element)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int stream_element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int stream_element))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int stream_element)))
  (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int stream_element))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq12 (us_t2 us_t2) Bool)

(declare-const dummy12 us_t2)

(declare-datatypes ((t16b__ref 0)) (((mk_t16b__ref (t16b__content us_t2)))))
(define-fun t16b__ref___projection ((a t16b__ref)) us_t2 (t16b__content a))

(declare-const value__first tstream_element_offsetB)

(declare-const value__last tstream_element_offsetB)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun fixed_stream__null_string__value__aggregate_def ((_ BitVec 8)
  Int Int) us_t2)

;; def_axiom
  (assert
  (forall ((temp___264 (_ BitVec 8)))
  (forall ((temp___265 Int) (temp___266 Int))
  (let ((temp___263 (fixed_stream__null_string__value__aggregate_def
                    temp___264 temp___265 temp___266)))
  (and
  (=> (dynamic_property (- 9223372036854775808) 9223372036854775807
  temp___265 temp___266)
  (and (= (first5 temp___263) temp___265) (= (last5 temp___263) temp___266)))
  (forall ((temp___267 Int))
  (= (select (to_array2 temp___263) temp___267) (of_rep2 temp___264))))))))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_142 (_ BitVec 8))
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= (- 9223372036854775808) 9223372036854775807))
                                      (in_range3 temp___expr_148)))

(define-fun dynamic_invariant5 ((temp___expr_160 us_t)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (not (= temp___skip_constant_158 true))
                                      (dynamic_property
                                      (- 9223372036854775808)
                                      9223372036854775807
                                      (first1 temp___expr_160)
                                      (last1 temp___expr_160))))

(define-fun dynamic_invariant6 ((temp___expr_236 us_t1)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (not (= temp___skip_constant_234 true))
                                      (and (dynamic_property2 1
                                      (to_rep
                                      (rec__fixed_stream__object__width
                                      (us_split_fields1 this)))
                                      (first3 temp___expr_236)
                                      (last3 temp___expr_236))
                                      (and (= (first3 temp___expr_236) 1)
                                      (= (last3 temp___expr_236) (to_rep
                                                                 (rec__fixed_stream__object__width
                                                                 (us_split_fields1
                                                                 this))))))))

(declare-const value (Array Int stream_element))

(declare-const fixed_stream__null_string__result (Array Int stream_element))

(declare-const fixed_stream__null_string__result1 t)

(declare-const temp___269 (Array Int stream_element))

(declare-const temp___2691 t2)

(declare-const fixed_stream__null_string__value__assume (Array Int stream_element))

(declare-const fixed_stream__null_string__value__assume1 t1)

(declare-const o Int)

(declare-const o1 Int)

(declare-const result (Array Int stream_element))

(declare-const value1 (Array Int stream_element))

(declare-const result1 (Array Int stream_element))

(declare-const result2 t)

(declare-const fixed_stream__null_string__result2 (Array Int stream_element))

(declare-const fixed_stream__null_string__result3 t)

(declare-const fixed_stream__null_string__result4 (Array Int stream_element))

(declare-const fixed_stream__null_string__result5 t)

(declare-const fixed_stream__null_string__result6 (Array Int stream_element))

(declare-const fixed_stream__null_string__result7 t)

(declare-const value2 (Array Int stream_element))

(declare-const fixed_stream__null_string__result8 (Array Int stream_element))

(declare-const fixed_stream__null_string__result9 t)

(declare-const value3 (Array Int stream_element))

(declare-const fixed_stream__null_string__result10 (Array Int stream_element))

(declare-const fixed_stream__null_string__result11 t)

(define-fun fixed_stream__null_string__result12 () us_t (mk___t
                                                        fixed_stream__null_string__result10
                                                        fixed_stream__null_string__result11))

(define-fun fixed_stream__null_string__result13 () stream_element_array__ref
  (mk_stream_element_array__ref
  (mk___t fixed_stream__null_string__result8
  fixed_stream__null_string__result9)))

(define-fun fixed_stream__null_string__result14 () us_t (mk___t
                                                        fixed_stream__null_string__result6
                                                        fixed_stream__null_string__result7))

(define-fun fixed_stream__null_string__result15 () stream_element_array__ref
  (mk_stream_element_array__ref
  (mk___t fixed_stream__null_string__result4
  fixed_stream__null_string__result5)))

(define-fun fixed_stream__null_string__result16 () us_t (mk___t
                                                        fixed_stream__null_string__result2
                                                        fixed_stream__null_string__result3))

(define-fun result3 () stream_element_array__ref (mk_stream_element_array__ref
                                                 (mk___t result1 result2)))

(define-fun result4 () map__ref (mk_map__ref result))

(define-fun temp___2692 () us_t2 (mk___t2 temp___269 temp___2691))

(define-fun fixed_stream__null_string__result17 () stream_element_array__ref
  (mk_stream_element_array__ref
  (mk___t fixed_stream__null_string__result
  fixed_stream__null_string__result1)))

(define-fun value4 () map__ref (mk_map__ref value))

;; H
  (assert
  (= (to_rep1
     (first4
     (rt2
     (fixed_stream__null_string__value__aggregate_def ((_ int2bv 8) 0) 1
     (to_rep (rec__fixed_stream__object__width (us_split_fields1 this))))))) 1))

;; H
  (assert
  (= (to_rep1
     (last4
     (rt2
     (fixed_stream__null_string__value__aggregate_def ((_ int2bv 8) 0) 1
     (to_rep (rec__fixed_stream__object__width (us_split_fields1 this)))))))
  (to_rep (rec__fixed_stream__object__width (us_split_fields1 this)))))

;; H
  (assert
  (= temp___2692 (fixed_stream__null_string__value__aggregate_def
                 ((_ int2bv 8) 0) 1
                 (to_rep
                 (rec__fixed_stream__object__width (us_split_fields1 this))))))

(assert
;; WP_parameter_def
 ;; File "a-stream.ads", line 54, characters 0-0
  (not
  (= (ite (<= (to_rep1 (first4 temp___2691)) (to_rep1 (last4 temp___2691)))
     (+ (- (to_rep1 (last4 temp___2691)) (to_rep1 (first4 temp___2691))) 1)
     0) (ite (<= 1 (to_rep
                   (rec__fixed_stream__object__width (us_split_fields1 this))))
        (+ (- (to_rep
              (rec__fixed_stream__object__width (us_split_fields1 this))) 1) 1)
        0))))
(check-sat)
(exit)
