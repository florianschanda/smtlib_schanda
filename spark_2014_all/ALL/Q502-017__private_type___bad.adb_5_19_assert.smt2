;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__p1__t1__d Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__p1__t1__d
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__p1__t1 us_main_type)))))
(define-fun us_split_fields_T1__projection ((a us_split_fields)) us_main_type
  (rec__p1__t1 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__p1__t1__d (us_split_discrs1 a)) (rec__p1__t1__d
                                                                 (us_split_discrs1
                                                                 b)))
                        (= (us_main_eq (rec__p1__t1 (us_split_fields1 a))
                           (rec__p1__t1 (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const p1__t1__d__first__bit Int)

(declare-const p1__t1__d__last__bit Int)

(declare-const p1__t1__d__position Int)

;; p1__t1__d__first__bit_axiom
  (assert (<= 0 p1__t1__d__first__bit))

;; p1__t1__d__last__bit_axiom
  (assert (< p1__t1__d__first__bit p1__t1__d__last__bit))

;; p1__t1__d__position_axiom
  (assert (<= 0 p1__t1__d__position))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((t1__ref 0)) (((mk_t1__ref (t1__content us_rep)))))
(define-fun t1__ref___projection ((a t1__ref)) us_rep (t1__content a))

(declare-fun always_true (us_rep us_rep) Bool)

(declare-fun always_true__function_guard (Bool us_rep us_rep) Bool)

;; always_true__post_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (and (= (always_true x y) true)
     (=>
     (= (= (rec__p1__t1__d (us_split_discrs1 x)) true)
     (= (rec__p1__t1__d (us_split_discrs1 y)) true)) (= (bool_eq x y) true))) :pattern (
  (always_true x y)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((mk___split_discrs1 (rec__p2__t2__d Bool)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs2)) Bool
  (rec__p2__t2__d a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__p2__t2 us_main_type1)))))
(define-fun us_split_fields_T2__projection ((a us_split_fields2)) us_main_type1
  (rec__p2__t2 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3
                                                                  a))

(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (rec__p2__t2__d (us_split_discrs3 a)) (rec__p2__t2__d
                                                                  (us_split_discrs3
                                                                  b)))
                         (= (us_main_eq1 (rec__p2__t2 (us_split_fields3 a))
                            (rec__p2__t2 (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const p2__t2__d__first__bit Int)

(declare-const p2__t2__d__last__bit Int)

(declare-const p2__t2__d__position Int)

;; p2__t2__d__first__bit_axiom
  (assert (<= 0 p2__t2__d__first__bit))

;; p2__t2__d__last__bit_axiom
  (assert (< p2__t2__d__first__bit p2__t2__d__last__bit))

;; p2__t2__d__position_axiom
  (assert (<= 0 p2__t2__d__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ((t2__ref 0)) (((mk_t2__ref (t2__content us_rep1)))))
(define-fun t2__ref___projection ((a t2__ref)) us_rep1 (t2__content a))

(declare-fun always_true1 (us_rep1 us_rep1) Bool)

(declare-fun always_true__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; always_true__post_axiom
  (assert
  (forall ((x us_rep1) (y us_rep1))
  (! (and (= (always_true1 x y) true) (not (= (bool_eq1 x y) true))) :pattern (
  (always_true1 x y)) )))

(declare-const x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(assert
;; WP_parameter_def
 ;; File "p2.ads", line 2, characters 0-0
  (not (= (always_true x x) true)))
(check-sat)
(exit)
