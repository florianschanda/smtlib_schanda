;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort card 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 52)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (card card) Bool)

(declare-const dummy1 card)

(declare-datatypes () ((card__ref (mk_card__ref (card__content card)))))
(define-fun card__ref___projection ((a card__ref)) card (card__content a))

(define-fun dynamic_invariant1 ((temp___expr_166 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool (=>
                                      (or (= temp___is_init_163 true)
                                      (<= 1 52)) (in_range2 temp___expr_166)))

(declare-fun to_rep (card) Int)

(declare-fun of_rep (Int) card)

;; inversion_axiom
  (assert
  (forall ((x card)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x card)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int card))))))
(declare-fun slide ((Array Int card) Int Int) (Array Int card))

;; slide_eq
  (assert
  (forall ((a (Array Int card)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int card)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int card) Int Int (Array Int card) Int
  Int) (Array Int card))

;; concat_def
  (assert
  (forall ((a (Array Int card)) (b (Array Int card)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (card Int) (Array Int card))

;; singleton_def
  (assert
  (forall ((v card))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int card)) (a__first Int) (a__last Int)
  (b (Array Int card)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int card)) (b (Array Int card)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int card) Int Int (Array Int card) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int card)) (b (Array Int card)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int card)) (b (Array Int card)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int card)) (b (Array Int card)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort cardindex 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (cardindex cardindex) Bool)

(declare-const dummy2 cardindex)

(declare-datatypes ()
((cardindex__ref (mk_cardindex__ref (cardindex__content cardindex)))))
(define-fun cardindex__ref___projection ((a cardindex__ref)) cardindex
  (cardindex__content a))

(define-fun dynamic_invariant2 ((temp___expr_177 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (or (= temp___is_init_174 true)
                                      (<= (- 1) 100)) (in_range3
                                      temp___expr_177)))

(declare-fun to_rep1 (cardindex) Int)

(declare-fun of_rep1 (Int) cardindex)

;; inversion_axiom
  (assert
  (forall ((x cardindex))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x cardindex)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort tcardarrayD1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tcardarrayD1 tcardarrayD1) Bool)

(declare-const dummy3 tcardarrayD1)

(declare-datatypes ()
((tcardarrayD1__ref
 (mk_tcardarrayD1__ref (tcardarrayD1__content tcardarrayD1)))))
(define-fun tcardarrayD1__ref___projection ((a tcardarrayD1__ref)) tcardarrayD1
  (tcardarrayD1__content a))

(declare-sort tindexarrayD1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (tindexarrayD1 tindexarrayD1) Bool)

(declare-const dummy4 tindexarrayD1)

(declare-datatypes ()
((tindexarrayD1__ref
 (mk_tindexarrayD1__ref (tindexarrayD1__content tindexarrayD1)))))
(define-fun tindexarrayD1__ref___projection ((a tindexarrayD1__ref)) tindexarrayD1
  (tindexarrayD1__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int cardindex))))))
(declare-fun slide1 ((Array Int cardindex) Int Int) (Array Int cardindex))

;; slide_eq
  (assert
  (forall ((a (Array Int cardindex)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int cardindex)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int cardindex) Int Int (Array Int cardindex) Int
  Int) (Array Int cardindex))

;; concat_def
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (cardindex Int) (Array Int cardindex))

;; singleton_def
  (assert
  (forall ((v cardindex))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int cardindex)) (a__first Int) (a__last Int)
  (b (Array Int cardindex)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array Int cardindex) Int Int (Array Int cardindex)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort tindexmatrixD1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (tindexmatrixD1 tindexmatrixD1) Bool)

(declare-const dummy5 tindexmatrixD1)

(declare-datatypes ()
((tindexmatrixD1__ref
 (mk_tindexmatrixD1__ref (tindexmatrixD1__content tindexmatrixD1)))))
(define-fun tindexmatrixD1__ref___projection ((a tindexmatrixD1__ref)) tindexmatrixD1
  (tindexmatrixD1__content a))

(declare-const dummy6 (Array Int cardindex))

(declare-const value__size Int)

(declare-fun object__size ((Array Int cardindex)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int cardindex)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int cardindex)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int cardindex))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int cardindex))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int cardindex))) (<= 0 (object__alignment a))))

(declare-fun user_eq6 ((Array Int cardindex) (Array Int cardindex)) Bool)

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int cardindex)))))))
(declare-fun slide2 ((Array Int (Array Int cardindex)) Int
  Int) (Array Int (Array Int cardindex)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int (Array Int cardindex)) Int Int
  (Array Int (Array Int cardindex)) Int
  Int) (Array Int (Array Int cardindex)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int cardindex)))
  (b (Array Int (Array Int cardindex))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 ((Array Int cardindex)
  Int) (Array Int (Array Int cardindex)))

;; singleton_def
  (assert
  (forall ((v (Array Int cardindex)))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int (Array Int cardindex))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int cardindex))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (bool_eq1 (select a temp___idx_134) 0 99
                              (select b (+ (- b__first a__first) temp___idx_134))
                              0 99) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int cardindex)))
  (b (Array Int (Array Int cardindex))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (bool_eq1 (select a temp___idx_134) 0 99
     (select b (+ (- b__first a__first) temp___idx_134)) 0 99) true))))))))

(declare-const dummy7 (Array Int card))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int card)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int card)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int card)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int card))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int card))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int card))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int card) (Array Int card)) Bool)

(declare-const dummy8 (Array Int (Array Int cardindex)))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int (Array Int cardindex))) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int (Array Int cardindex))) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int (Array Int cardindex))) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert
  (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (<= 0 (object__alignment2 a))))

(declare-fun user_eq8 ((Array Int (Array Int cardindex))
  (Array Int (Array Int cardindex))) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__patience__state__numelts cardindex)(rec__patience__state__values (Array Int card))(rec__patience__state__numstacks cardindex)(rec__patience__state__stacksizes (Array Int cardindex))(rec__patience__state__stacks (Array Int (Array Int cardindex)))(rec__patience__state__posstack (Array Int cardindex))(rec__patience__state__posheight (Array Int cardindex))(rec__patience__state__preds (Array Int cardindex))))))
(define-fun us_split_fields_NumElts__projection ((a us_split_fields)) cardindex
  (rec__patience__state__numelts a))

(define-fun us_split_fields_Values__projection ((a us_split_fields)) (Array Int card)
  (rec__patience__state__values a))

(define-fun us_split_fields_NumStacks__projection ((a us_split_fields)) cardindex
  (rec__patience__state__numstacks a))

(define-fun us_split_fields_StackSizes__projection ((a us_split_fields)) (Array Int cardindex)
  (rec__patience__state__stacksizes a))

(define-fun us_split_fields_Stacks__projection ((a us_split_fields)) (Array Int (Array Int cardindex))
  (rec__patience__state__stacks a))

(define-fun us_split_fields_PosStack__projection ((a us_split_fields)) (Array Int cardindex)
  (rec__patience__state__posstack a))

(define-fun us_split_fields_PosHeight__projection ((a us_split_fields)) (Array Int cardindex)
  (rec__patience__state__posheight a))

(define-fun us_split_fields_Preds__projection ((a us_split_fields)) (Array Int cardindex)
  (rec__patience__state__preds a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__patience__state__numelts
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__patience__state__numelts
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__patience__state__values
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__values
                           (us_split_fields1 b)) 0 99) true))
                        (= (to_rep1
                           (rec__patience__state__numstacks
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__patience__state__numstacks
                                                  (us_split_fields1 b)))))
                        (= (bool_eq1
                           (rec__patience__state__stacksizes
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__stacksizes
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq2
                           (rec__patience__state__stacks
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__stacks
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq1
                           (rec__patience__state__posstack
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__posstack
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq1
                           (rec__patience__state__posheight
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__posheight
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq1
                           (rec__patience__state__preds (us_split_fields1 a))
                           0 99
                           (rec__patience__state__preds (us_split_fields1 b))
                           0 99) true))
                   true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const patience__state__numelts__first__bit Int)

(declare-const patience__state__numelts__last__bit Int)

(declare-const patience__state__numelts__position Int)

;; patience__state__numelts__first__bit_axiom
  (assert (<= 0 patience__state__numelts__first__bit))

;; patience__state__numelts__last__bit_axiom
  (assert
  (< patience__state__numelts__first__bit patience__state__numelts__last__bit))

;; patience__state__numelts__position_axiom
  (assert (<= 0 patience__state__numelts__position))

(declare-const patience__state__values__first__bit Int)

(declare-const patience__state__values__last__bit Int)

(declare-const patience__state__values__position Int)

;; patience__state__values__first__bit_axiom
  (assert (<= 0 patience__state__values__first__bit))

;; patience__state__values__last__bit_axiom
  (assert
  (< patience__state__values__first__bit patience__state__values__last__bit))

;; patience__state__values__position_axiom
  (assert (<= 0 patience__state__values__position))

(declare-const patience__state__numstacks__first__bit Int)

(declare-const patience__state__numstacks__last__bit Int)

(declare-const patience__state__numstacks__position Int)

;; patience__state__numstacks__first__bit_axiom
  (assert (<= 0 patience__state__numstacks__first__bit))

;; patience__state__numstacks__last__bit_axiom
  (assert
  (< patience__state__numstacks__first__bit patience__state__numstacks__last__bit))

;; patience__state__numstacks__position_axiom
  (assert (<= 0 patience__state__numstacks__position))

(declare-const patience__state__stacksizes__first__bit Int)

(declare-const patience__state__stacksizes__last__bit Int)

(declare-const patience__state__stacksizes__position Int)

;; patience__state__stacksizes__first__bit_axiom
  (assert (<= 0 patience__state__stacksizes__first__bit))

;; patience__state__stacksizes__last__bit_axiom
  (assert
  (< patience__state__stacksizes__first__bit patience__state__stacksizes__last__bit))

;; patience__state__stacksizes__position_axiom
  (assert (<= 0 patience__state__stacksizes__position))

(declare-const patience__state__stacks__first__bit Int)

(declare-const patience__state__stacks__last__bit Int)

(declare-const patience__state__stacks__position Int)

;; patience__state__stacks__first__bit_axiom
  (assert (<= 0 patience__state__stacks__first__bit))

;; patience__state__stacks__last__bit_axiom
  (assert
  (< patience__state__stacks__first__bit patience__state__stacks__last__bit))

;; patience__state__stacks__position_axiom
  (assert (<= 0 patience__state__stacks__position))

(declare-const patience__state__posstack__first__bit Int)

(declare-const patience__state__posstack__last__bit Int)

(declare-const patience__state__posstack__position Int)

;; patience__state__posstack__first__bit_axiom
  (assert (<= 0 patience__state__posstack__first__bit))

;; patience__state__posstack__last__bit_axiom
  (assert
  (< patience__state__posstack__first__bit patience__state__posstack__last__bit))

;; patience__state__posstack__position_axiom
  (assert (<= 0 patience__state__posstack__position))

(declare-const patience__state__posheight__first__bit Int)

(declare-const patience__state__posheight__last__bit Int)

(declare-const patience__state__posheight__position Int)

;; patience__state__posheight__first__bit_axiom
  (assert (<= 0 patience__state__posheight__first__bit))

;; patience__state__posheight__last__bit_axiom
  (assert
  (< patience__state__posheight__first__bit patience__state__posheight__last__bit))

;; patience__state__posheight__position_axiom
  (assert (<= 0 patience__state__posheight__position))

(declare-const patience__state__preds__first__bit Int)

(declare-const patience__state__preds__last__bit Int)

(declare-const patience__state__preds__position Int)

;; patience__state__preds__first__bit_axiom
  (assert (<= 0 patience__state__preds__first__bit))

;; patience__state__preds__last__bit_axiom
  (assert
  (< patience__state__preds__first__bit patience__state__preds__last__bit))

;; patience__state__preds__position_axiom
  (assert (<= 0 patience__state__preds__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes () ((state__ref (mk_state__ref (state__content us_rep)))))
(define-fun state__ref___projection ((a state__ref)) us_rep (state__content
                                                            a))

(declare-fun inv (us_rep) Bool)

(declare-fun inv__function_guard (Bool us_rep) Bool)

;; inv__post_axiom
  (assert true)

;; inv__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (= (inv s) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (<= 0 (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))))
     (<= (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s)))
     (to_rep1 (rec__patience__state__numelts (us_split_fields1 s)))))
     (<= (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 100))
     (or (= (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 0)
     (< 0 (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (and
     (and
     (<= 1 (to_rep1
           (let ((temp___306 (rec__patience__state__stacksizes
                             (us_split_fields1 s))))
           (select temp___306 i))))
     (<= (to_rep1
         (let ((temp___307 (rec__patience__state__stacksizes
                           (us_split_fields1 s))))
         (select temp___307 i))) (to_rep1
                                 (rec__patience__state__numelts
                                 (us_split_fields1 s)))))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep1
              (let ((temp___308 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___308 i))) 1)))
     (and
     (<= 0 (to_rep1
           (let ((temp___310 (let ((temp___309 (rec__patience__state__stacks
                                               (us_split_fields1 s))))
                             (select temp___309 i))))
           (select temp___310 j))))
     (< (to_rep1
        (let ((temp___312 (let ((temp___311 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___311 i))))
        (select temp___312 j))) (to_rep1
                                (rec__patience__state__numelts
                                (us_split_fields1 s)))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 1)))
     (and
     (and
     (and
     (<= 0 (to_rep1
           (let ((temp___313 (rec__patience__state__posstack
                             (us_split_fields1 s))))
           (select temp___313 i))))
     (<= (to_rep1
         (let ((temp___313 (rec__patience__state__posstack
                           (us_split_fields1 s))))
         (select temp___313 i))) (- (to_rep1
                                    (rec__patience__state__numstacks
                                    (us_split_fields1 s))) 1)))
     (and
     (<= 0 (to_rep1
           (let ((temp___314 (rec__patience__state__posheight
                             (us_split_fields1 s))))
           (select temp___314 i))))
     (<= (to_rep1
         (let ((temp___314 (rec__patience__state__posheight
                           (us_split_fields1 s))))
         (select temp___314 i))) (- (to_rep1
                                    (let ((temp___315 (rec__patience__state__stacksizes
                                                      (us_split_fields1 s))))
                                    (select temp___315 (to_rep1
                                                       (let ((temp___316
                                                       (rec__patience__state__posstack
                                                       (us_split_fields1 s))))
                                                       (select temp___316 i)))))) 1))))
     (= (to_rep1
        (let ((temp___319 (let ((temp___317 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___317 (to_rep1
                                             (let ((temp___318 (rec__patience__state__posstack
                                                               (us_split_fields1
                                                               s))))
                                             (select temp___318 i)))))))
        (select temp___319 (to_rep1
                           (let ((temp___320 (rec__patience__state__posheight
                                             (us_split_fields1 s))))
                           (select temp___320 i)))))) i)))))
     (forall ((ist Int))
     (=>
     (and (<= 0 ist)
     (<= ist (- (to_rep1
                (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((ip Int))
     (=>
     (and (<= 0 ip)
     (<= ip (- (to_rep1
               (let ((temp___321 (rec__patience__state__stacksizes
                                 (us_split_fields1 s))))
               (select temp___321 ist))) 1)))
     (and
     (= ist (to_rep1
            (let ((temp___322 (rec__patience__state__posstack
                              (us_split_fields1 s))))
            (select temp___322 (to_rep1
                               (let ((temp___324 (let ((temp___323 (rec__patience__state__stacks
                                                                   (us_split_fields1
                                                                   s))))
                                                 (select temp___323 ist))))
                               (select temp___324 ip)))))))
     (= ip (to_rep1
           (let ((temp___325 (rec__patience__state__posheight
                             (us_split_fields1 s))))
           (select temp___325 (to_rep1
                              (let ((temp___327 (let ((temp___326 (rec__patience__state__stacks
                                                                  (us_split_fields1
                                                                  s))))
                                                (select temp___326 ist))))
                              (select temp___327 ip)))))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep1
              (let ((temp___328 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___328 i))) 2)))
     (forall ((k Int))
     (=>
     (and (<= (+ j 1) k)
     (<= k (- (to_rep1
              (let ((temp___329 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___329 i))) 1)))
     (< (to_rep1
        (let ((temp___331 (let ((temp___330 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___330 i))))
        (select temp___331 j))) (to_rep1
                                (let ((temp___333 (let ((temp___332 (rec__patience__state__stacks
                                                                    (us_split_fields1
                                                                    s))))
                                                  (select temp___332 i))))
                                (select temp___333 k)))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep1
              (let ((temp___334 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___334 i))) 2)))
     (forall ((k Int))
     (=>
     (and (<= (+ j 1) k)
     (<= k (- (to_rep1
              (let ((temp___335 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___335 i))) 1)))
     (<= (to_rep
         (let ((temp___339 (rec__patience__state__values
                           (us_split_fields1 s))))
         (select temp___339 (to_rep1
                            (let ((temp___341 (let ((temp___340 (rec__patience__state__stacks
                                                                (us_split_fields1
                                                                s))))
                                              (select temp___340 i))))
                            (select temp___341 k)))))) (to_rep
                                                       (let ((temp___336
                                                       (rec__patience__state__values
                                                       (us_split_fields1 s))))
                                                       (select temp___336
                                                       (to_rep1
                                                       (let ((temp___338
                                                       (let ((temp___337
                                                       (rec__patience__state__stacks
                                                       (us_split_fields1 s))))
                                                       (select temp___337 i))))
                                                       (select temp___338 j))))))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 1)))
     (and
     (and
     (and
     (<= (- 1) (to_rep1
               (let ((temp___342 (rec__patience__state__preds
                                 (us_split_fields1 s))))
               (select temp___342 i))))
     (<= (to_rep1
         (let ((temp___342 (rec__patience__state__preds (us_split_fields1 s))))
         (select temp___342 i))) (- (to_rep1
                                    (rec__patience__state__numelts
                                    (us_split_fields1 s))) 1)))
     (< (to_rep1
        (let ((temp___343 (rec__patience__state__preds (us_split_fields1 s))))
        (select temp___343 i))) i))
     (ite (< (to_rep1
             (let ((temp___352 (rec__patience__state__preds
                               (us_split_fields1 s))))
             (select temp___352 i))) 0)
     (= (to_rep1
        (let ((temp___344 (rec__patience__state__posstack
                          (us_split_fields1 s))))
        (select temp___344 i))) 0)
     (and
     (and
     (< (to_rep
        (let ((temp___345 (rec__patience__state__values (us_split_fields1 s))))
        (select temp___345 (to_rep1
                           (let ((temp___346 (rec__patience__state__preds
                                             (us_split_fields1 s))))
                           (select temp___346 i)))))) (to_rep
                                                      (let ((temp___347
                                                      (rec__patience__state__values
                                                      (us_split_fields1 s))))
                                                      (select temp___347 i))))
     (< 0 (to_rep1
          (let ((temp___348 (rec__patience__state__posstack
                            (us_split_fields1 s))))
          (select temp___348 i)))))
     (= (to_rep1
        (let ((temp___349 (rec__patience__state__posstack
                          (us_split_fields1 s))))
        (select temp___349 (to_rep1
                           (let ((temp___350 (rec__patience__state__preds
                                             (us_split_fields1 s))))
                           (select temp___350 i)))))) (- (to_rep1
                                                         (let ((temp___351
                                                         (rec__patience__state__posstack
                                                         (us_split_fields1 s))))
                                                         (select temp___351 i))) 1))))))))) :pattern (
  (inv s)) )))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const s__split_fields cardindex)

(declare-const s__split_fields1 (Array Int card))

(declare-const s__split_fields2 cardindex)

(declare-const s__split_fields3 (Array Int cardindex))

(declare-const s__split_fields4 (Array Int (Array Int cardindex)))

(declare-const s__split_fields5 (Array Int cardindex))

(declare-const s__split_fields6 (Array Int cardindex))

(declare-const s__split_fields7 (Array Int cardindex))

(declare-const idx Int)

(declare-const pred Int)

(declare-const i Int)

(declare-const stackisize Int)

(declare-const topstacki Int)

(declare-const temp___568 Int)

(declare-const temp___567 Int)

(declare-const temp___566 Int)

(declare-const temp___565 Int)

(declare-const o Int)

(declare-const o1 cardindex)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const temp___535 (Array Int cardindex))

(declare-const o4 Int)

(declare-const o5 cardindex)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 card)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 card)

(declare-const o12 Int)

(declare-const o13 (Array Int card))

(declare-const o14 cardindex)

(declare-const o15 (Array Int card))

(declare-const o16 cardindex)

(declare-const o17 (Array Int cardindex))

(declare-const o18 (Array Int (Array Int cardindex)))

(declare-const o19 (Array Int cardindex))

(declare-const o20 (Array Int cardindex))

(declare-const o21 (Array Int cardindex))

(declare-const temp___584 cardindex)

(declare-const temp___5841 (Array Int card))

(declare-const temp___5842 cardindex)

(declare-const temp___5843 (Array Int cardindex))

(declare-const temp___5844 (Array Int (Array Int cardindex)))

(declare-const temp___5845 (Array Int cardindex))

(declare-const temp___5846 (Array Int cardindex))

(declare-const temp___5847 (Array Int cardindex))

(declare-const o22 Int)

(declare-const o23 Int)

(declare-const o24 cardindex)

(declare-const o25 cardindex)

(declare-const o26 (Array Int card))

(declare-const o27 cardindex)

(declare-const o28 (Array Int cardindex))

(declare-const o29 (Array Int (Array Int cardindex)))

(declare-const o30 (Array Int cardindex))

(declare-const o31 (Array Int cardindex))

(declare-const o32 (Array Int cardindex))

(declare-const temp___586 cardindex)

(declare-const temp___5861 (Array Int card))

(declare-const temp___5862 cardindex)

(declare-const temp___5863 (Array Int cardindex))

(declare-const temp___5864 (Array Int (Array Int cardindex)))

(declare-const temp___5865 (Array Int cardindex))

(declare-const temp___5866 (Array Int cardindex))

(declare-const temp___5867 (Array Int cardindex))

(declare-const o33 Int)

(declare-const o34 cardindex)

(declare-const o35 Int)

(declare-const o36 (Array Int cardindex))

(declare-const o37 cardindex)

(declare-const o38 (Array Int card))

(declare-const o39 cardindex)

(declare-const o40 (Array Int cardindex))

(declare-const o41 (Array Int (Array Int cardindex)))

(declare-const o42 (Array Int cardindex))

(declare-const o43 (Array Int cardindex))

(declare-const o44 (Array Int cardindex))

(declare-const temp___589 cardindex)

(declare-const temp___5891 (Array Int card))

(declare-const temp___5892 cardindex)

(declare-const temp___5893 (Array Int cardindex))

(declare-const temp___5894 (Array Int (Array Int cardindex)))

(declare-const temp___5895 (Array Int cardindex))

(declare-const temp___5896 (Array Int cardindex))

(declare-const temp___5897 (Array Int cardindex))

(declare-const o45 Int)

(declare-const o46 cardindex)

(declare-const o47 cardindex)

(declare-const o48 (Array Int card))

(declare-const o49 cardindex)

(declare-const o50 (Array Int cardindex))

(declare-const o51 (Array Int (Array Int cardindex)))

(declare-const o52 (Array Int cardindex))

(declare-const o53 (Array Int cardindex))

(declare-const o54 (Array Int cardindex))

(declare-const temp___606 cardindex)

(declare-const temp___6061 (Array Int card))

(declare-const temp___6062 cardindex)

(declare-const temp___6063 (Array Int cardindex))

(declare-const temp___6064 (Array Int (Array Int cardindex)))

(declare-const temp___6065 (Array Int cardindex))

(declare-const temp___6066 (Array Int cardindex))

(declare-const temp___6067 (Array Int cardindex))

(declare-const o55 cardindex)

(declare-const o56 Int)

(declare-const o57 (Array Int cardindex))

(declare-const o58 cardindex)

(declare-const o59 (Array Int card))

(declare-const o60 cardindex)

(declare-const o61 (Array Int cardindex))

(declare-const o62 (Array Int (Array Int cardindex)))

(declare-const o63 (Array Int cardindex))

(declare-const o64 (Array Int cardindex))

(declare-const o65 (Array Int cardindex))

(declare-const temp___609 cardindex)

(declare-const temp___6091 (Array Int card))

(declare-const temp___6092 cardindex)

(declare-const temp___6093 (Array Int cardindex))

(declare-const temp___6094 (Array Int (Array Int cardindex)))

(declare-const temp___6095 (Array Int cardindex))

(declare-const temp___6096 (Array Int cardindex))

(declare-const temp___6097 (Array Int cardindex))

(declare-const o66 Int)

(declare-const o67 cardindex)

(declare-const o68 (Array Int cardindex))

(declare-const o69 Int)

(declare-const o70 (Array Int (Array Int cardindex)))

(declare-const o71 us_split_fields)

(declare-const temp___614 us_rep)

(declare-const o72 Int)

(declare-const o73 cardindex)

(declare-const o74 Int)

(declare-const o75 (Array Int cardindex))

(declare-const o76 us_split_fields)

(declare-const temp___617 us_rep)

(declare-const o77 cardindex)

(declare-const o78 Int)

(declare-const o79 (Array Int cardindex))

(declare-const o80 us_split_fields)

(declare-const temp___620 us_rep)

(declare-const o81 Int)

(declare-const o82 cardindex)

(declare-const o83 Int)

(declare-const o84 Int)

(declare-const o85 cardindex)

(declare-const o86 Int)

(declare-const o87 (Array Int cardindex))

(declare-const o88 us_split_fields)

(declare-const temp___593 us_rep)

(declare-const o89 Int)

(declare-const o90 cardindex)

(declare-const o91 Int)

(declare-const o92 (Array Int cardindex))

(declare-const o93 Int)

(declare-const o94 (Array Int (Array Int cardindex)))

(declare-const o95 us_split_fields)

(declare-const temp___598 us_rep)

(declare-const o96 Int)

(declare-const o97 cardindex)

(declare-const o98 Int)

(declare-const o99 (Array Int cardindex))

(declare-const o100 us_split_fields)

(declare-const temp___601 us_rep)

(declare-const o101 cardindex)

(declare-const o102 Int)

(declare-const o103 (Array Int cardindex))

(declare-const o104 us_split_fields)

(declare-const temp___604 us_rep)

(declare-const i1 Int)

(declare-const stackisize1 Int)

(declare-const topstacki1 Int)

(declare-const result int__ref)

(declare-const pred1 Int)

(declare-const result1 int__ref)

(declare-const i2 Int)

(declare-const pred2 Int)

(declare-const i3 Int)

(declare-const stackisize2 Int)

(declare-const topstacki2 Int)

(declare-const result2 int__ref)

(declare-const stackisize3 Int)

(declare-const result3 int__ref)

(declare-const topstacki3 Int)

(declare-const result4 Bool)

(declare-const result5 int__ref)

(declare-const pred3 Int)

(declare-const result6 int__ref)

(declare-const i4 Int)

(declare-const pred4 int__ref)

(declare-const i5 int__ref)

(declare-const pred5 Int)

(declare-const i6 Int)

(declare-const pred6 int__ref)

(declare-const i7 int__ref)

(declare-const stackisize4 int__ref)

(declare-const topstacki4 int__ref)

(declare-const pred7 Int)

(declare-const i8 Int)

(declare-const stackisize5 Int)

(declare-const topstacki5 Int)

(declare-const pred8 int__ref)

(declare-const i9 int__ref)

(declare-const stackisize6 int__ref)

(declare-const topstacki6 int__ref)

(declare-const pred9 Int)

(declare-const i10 Int)

(declare-const stackisize7 Int)

(declare-const topstacki7 Int)

(declare-const result7 int__ref)

(declare-const idx1 Int)

(declare-const result8 us_split_fields__ref)

(declare-const s__split_fields8 us_split_fields)

(declare-const result9 us_split_fields__ref)

(declare-const s__split_fields9 us_split_fields)

(declare-const result10 us_split_fields__ref)

(declare-const s__split_fields10 us_split_fields)

(declare-const result11 int__ref)

(declare-const i11 Int)

(declare-const result12 us_split_fields__ref)

(declare-const s__split_fields11 us_split_fields)

(declare-const result13 us_split_fields__ref)

(declare-const s__split_fields12 us_split_fields)

(declare-const result14 us_split_fields__ref)

(declare-const s__split_fields13 us_split_fields)

(declare-const result15 us_split_fields__ref)

(declare-const s__split_fields14 us_split_fields)

(declare-const result16 us_split_fields__ref)

(declare-const s__split_fields15 us_split_fields)

(declare-const result17 int__ref)

(declare-const stackisize8 Int)

(declare-const result18 us_split_fields__ref)

(declare-const s__split_fields16 us_split_fields)

(declare-const result19 us_split_fields__ref)

(declare-const s__split_fields17 us_split_fields)

(declare-const result20 us_split_fields__ref)

(declare-const s__split_fields18 us_split_fields)

(declare-const result21 us_split_fields__ref)

(declare-const s__split_fields19 us_split_fields)

(declare-const s__split_fields20 us_split_fields__ref)

(declare-const i12 int__ref)

(declare-const stackisize9 int__ref)

(declare-const s__split_fields21 us_split_fields)

(declare-const i13 Int)

(declare-const stackisize10 Int)

;; H
  (assert (in_range2 c))

;; H
  (assert
  (and
  (= (inv
     (mk___rep
     (mk___split_fields s__split_fields s__split_fields1 s__split_fields2
     s__split_fields3 s__split_fields4 s__split_fields5 s__split_fields6
     s__split_fields7))) true)
  (< (to_rep1 s__split_fields) 100)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 idx)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 pred)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 i)))

;; H
  (assert (=> (<= (- 1) 100) (in_range3 stackisize)))

;; H
  (assert (=> (<= (- 1) 100) (in_range3 topstacki)))

;; H
  (assert (= result (mk_int__ref pred)))

;; H
  (assert (= pred1 (- 1)))

;; H
  (assert (= result1 (mk_int__ref i)))

;; H
  (assert (= i2 0))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= temp___568 topstacki)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= temp___567 stackisize)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= temp___566 i2)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= temp___565 pred1)))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (and (<= 0 i3) (<= i3 (to_rep1 s__split_fields2)))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (ite (= i3 0) (= pred2 (- 1))
  (and
  (and
  (and (and (<= 0 pred2) (<= pred2 (- (to_rep1 s__split_fields) 1)))
  (= pred2 (to_rep1
           (select (select s__split_fields4 (- i3 1)) (- (to_rep1
                                                         (select s__split_fields3 (-
                                                         i3 1))) 1)))))
  (< (to_rep (select s__split_fields1 pred2)) c))
  (= (to_rep1 (select s__split_fields5 pred2)) (- i3 1))))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (and
  (and
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 pred2))
  (=> (<= (- 2147483648) 2147483647) (in_range1 i3)))
  (=> (<= (- 1) 100) (in_range3 stackisize2)))
  (=> (<= (- 1) 100) (in_range3 topstacki2)))
  (< i3 (to_rep1 s__split_fields2)))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (and (<= 0 i3) (<= i3 99))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= o i3)))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2)) (= o1 (select s__split_fields3 o))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= o2 (to_rep1 o1))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (= result2 (mk_int__ref stackisize2))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= stackisize3 o2)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (and (<= 0 i3) (<= i3 99))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= o3 i3)))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (= temp___535 (select s__split_fields4 o3))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (and (<= 0 (- stackisize3 1)) (<= (- stackisize3 1) 99))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= o4 (- stackisize3 1))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2)) (= o5 (select temp___535 o4))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= o6 (to_rep1 o5))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2)) (= result3 (mk_int__ref topstacki2))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= topstacki3 o6)))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (or
  (and
  (and (and (= i5 (mk_int__ref i3)) (= pred4 (mk_int__ref pred2)))
  (and (= i6 i3) (= pred5 pred2)))
  (and
  (and
  (and
  (and (and (and (<= 0 topstacki3) (<= topstacki3 99)) (= o7 topstacki3))
  (= o8 (select s__split_fields1 o7))) (= o9 (to_rep o8)))
  (= result4 (ite (<= c o9) true false))) (= result4 true)))
  (and
  (and
  (and
  (and
  (and (and (and (<= 0 topstacki3) (<= topstacki3 99)) (= o7 topstacki3))
  (= o8 (select s__split_fields1 o7))) (= o9 (to_rep o8)))
  (= result4 (ite (<= c o9) true false))) (not (= result4 true)))
  (and
  (and (and (= i5 (mk_int__ref i4)) (= pred4 (mk_int__ref pred3)))
  (and (= i6 i4) (= pred5 pred3)))
  (and (and (<= 0 topstacki3) (< topstacki3 (to_rep1 s__split_fields)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (<= 0 (to_rep1 (select s__split_fields5 topstacki3)))
  (< (to_rep1 (select s__split_fields5 topstacki3)) (to_rep1
                                                    s__split_fields2)))
  (<= 0 (to_rep1 (select s__split_fields6 topstacki3))))
  (< (to_rep1 (select s__split_fields6 topstacki3)) (to_rep1
                                                    (select s__split_fields3
                                                    (to_rep1
                                                    (select s__split_fields5
                                                    topstacki3))))))
  (= (to_rep1
     (select (select s__split_fields4 (to_rep1
                                      (select s__split_fields5 topstacki3)))
     (to_rep1 (select s__split_fields6 topstacki3)))) topstacki3))
  (= (to_rep1 (select s__split_fields5 topstacki3)) i3))
  (= (to_rep1 (select s__split_fields6 topstacki3)) (- stackisize3 1)))
  (and (and (= result5 (mk_int__ref pred2)) (= pred3 topstacki3))
  (and
  (and (and (= o10 (+ i3 1)) (in_range1 (+ i3 1)))
  (and (= result6 (mk_int__ref i3)) (= i4 o10)))
  (not (< i4 (to_rep1 s__split_fields2))))))))))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (= topstacki4 (mk_int__ref topstacki3))))

;; H
  (assert
  (=> (< i2 (to_rep1 s__split_fields2))
  (= stackisize4 (mk_int__ref stackisize3))))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= i7 i5)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= pred6 pred4)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= topstacki5 topstacki3)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= stackisize5 stackisize3)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= i8 i6)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= pred7 pred5)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= topstacki6 topstacki4)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= stackisize6 stackisize4)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= i9 i7)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= pred8 pred6)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= topstacki7 topstacki5)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= stackisize7 stackisize5)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= i10 i8)))

;; H
  (assert (=> (< i2 (to_rep1 s__split_fields2)) (= pred9 pred7)))

;; H
  (assert
  (=> (not (< i2 (to_rep1 s__split_fields2)))
  (= topstacki6 (mk_int__ref topstacki))))

;; H
  (assert
  (=> (not (< i2 (to_rep1 s__split_fields2)))
  (= stackisize6 (mk_int__ref stackisize))))

;; H
  (assert
  (=> (not (< i2 (to_rep1 s__split_fields2))) (= i9 (mk_int__ref i2))))

;; H
  (assert
  (=> (not (< i2 (to_rep1 s__split_fields2))) (= pred8 (mk_int__ref pred1))))

;; H
  (assert
  (=> (not (< i2 (to_rep1 s__split_fields2))) (= topstacki7 topstacki1)))

;; H
  (assert
  (=> (not (< i2 (to_rep1 s__split_fields2))) (= stackisize7 stackisize1)))

;; H
  (assert (=> (not (< i2 (to_rep1 s__split_fields2))) (= i10 i2)))

;; H
  (assert (=> (not (< i2 (to_rep1 s__split_fields2))) (= pred9 pred1)))

;; H
  (assert (= result7 (mk_int__ref idx)))

;; H
  (assert (= idx1 (to_rep1 s__split_fields)))

;; H
  (assert (= (to_rep o11) c))

;; H
  (assert (and (<= 0 idx1) (<= idx1 99)))

;; H
  (assert (= o12 idx1))

;; H
  (assert (= o13 (store s__split_fields1 o12 o11)))

;; H
  (assert (= s__split_fields o14))

;; H
  (assert (= o13 o15))

;; H
  (assert (= s__split_fields2 o16))

;; H
  (assert (= s__split_fields3 o17))

;; H
  (assert (= s__split_fields4 o18))

;; H
  (assert (= s__split_fields5 o19))

;; H
  (assert (= s__split_fields6 o20))

;; H
  (assert (= s__split_fields7 o21))

;; H
  (assert (= temp___584 o14))

;; H
  (assert (= temp___5841 o15))

;; H
  (assert (= temp___5842 o16))

;; H
  (assert (= temp___5843 o17))

;; H
  (assert (= temp___5844 o18))

;; H
  (assert (= temp___5845 o19))

;; H
  (assert (= temp___5846 o20))

;; H
  (assert (= temp___5847 o21))

;; H
  (assert
  (= result8 (mk___split_fields__ref
             (mk___split_fields s__split_fields s__split_fields1
             s__split_fields2 s__split_fields3 s__split_fields4
             s__split_fields5 s__split_fields6 s__split_fields7))))

;; H
  (assert
  (= s__split_fields8 (mk___split_fields temp___584 temp___5841 temp___5842
                      temp___5843 temp___5844 temp___5845 temp___5846
                      temp___5847)))

;; H
  (assert (and (= o22 (+ idx1 1)) (in_range1 (+ idx1 1))))

;; H
  (assert (and (= o23 o22) (in_range3 o22)))

;; H
  (assert (= (to_rep1 o24) o23))

;; H
  (assert (= o24 o25))

;; H
  (assert (= (rec__patience__state__values s__split_fields8) o26))

;; H
  (assert (= (rec__patience__state__numstacks s__split_fields8) o27))

;; H
  (assert (= (rec__patience__state__stacksizes s__split_fields8) o28))

;; H
  (assert (= (rec__patience__state__stacks s__split_fields8) o29))

;; H
  (assert (= (rec__patience__state__posstack s__split_fields8) o30))

;; H
  (assert (= (rec__patience__state__posheight s__split_fields8) o31))

;; H
  (assert (= (rec__patience__state__preds s__split_fields8) o32))

;; H
  (assert (= temp___586 o25))

;; H
  (assert (= temp___5861 o26))

;; H
  (assert (= temp___5862 o27))

;; H
  (assert (= temp___5863 o28))

;; H
  (assert (= temp___5864 o29))

;; H
  (assert (= temp___5865 o30))

;; H
  (assert (= temp___5866 o31))

;; H
  (assert (= temp___5867 o32))

;; H
  (assert (= result9 (mk___split_fields__ref s__split_fields8)))

;; H
  (assert
  (= s__split_fields9 (mk___split_fields temp___586 temp___5861 temp___5862
                      temp___5863 temp___5864 temp___5865 temp___5866
                      temp___5867)))

;; H
  (assert
  (and (= o33 (int__content pred8)) (in_range3 (int__content pred8))))

;; H
  (assert (= (to_rep1 o34) o33))

;; H
  (assert (and (<= 0 idx1) (<= idx1 99)))

;; H
  (assert (= o35 idx1))

;; H
  (assert
  (= o36 (store (rec__patience__state__preds s__split_fields9) o35 o34)))

;; H
  (assert (= (rec__patience__state__numelts s__split_fields9) o37))

;; H
  (assert (= (rec__patience__state__values s__split_fields9) o38))

;; H
  (assert (= (rec__patience__state__numstacks s__split_fields9) o39))

;; H
  (assert (= (rec__patience__state__stacksizes s__split_fields9) o40))

;; H
  (assert (= (rec__patience__state__stacks s__split_fields9) o41))

;; H
  (assert (= (rec__patience__state__posstack s__split_fields9) o42))

;; H
  (assert (= (rec__patience__state__posheight s__split_fields9) o43))

;; H
  (assert (= o36 o44))

;; H
  (assert (= temp___589 o37))

;; H
  (assert (= temp___5891 o38))

;; H
  (assert (= temp___5892 o39))

;; H
  (assert (= temp___5893 o40))

;; H
  (assert (= temp___5894 o41))

;; H
  (assert (= temp___5895 o42))

;; H
  (assert (= temp___5896 o43))

;; H
  (assert (= temp___5897 o44))

;; H
  (assert (= result10 (mk___split_fields__ref s__split_fields9)))

;; H
  (assert
  (= s__split_fields10 (mk___split_fields temp___589 temp___5891 temp___5892
                       temp___5893 temp___5894 temp___5895 temp___5896
                       temp___5897)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= result11 i9)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= i11 (to_rep1 (rec__patience__state__numstacks s__split_fields10)))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and
  (= o45 (+ (to_rep1 (rec__patience__state__numstacks s__split_fields10)) 1))
  (in_range3
  (+ (to_rep1 (rec__patience__state__numstacks s__split_fields10)) 1)))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (to_rep1 o46) o45)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__numelts s__split_fields10) o47)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__values s__split_fields10) o48)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o46 o49)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__stacksizes s__split_fields10) o50)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__stacks s__split_fields10) o51)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__posstack s__split_fields10) o52)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__posheight s__split_fields10) o53)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__preds s__split_fields10) o54)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___606 o47)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6061 o48)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6062 o49)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6063 o50)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6064 o51)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6065 o52)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6066 o53)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6067 o54)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= result12 (mk___split_fields__ref s__split_fields10))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields11 (mk___split_fields temp___606 temp___6061 temp___6062
                       temp___6063 temp___6064 temp___6065 temp___6066
                       temp___6067))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (to_rep1 o55) 1)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and (<= 0 i11) (<= i11 99))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o56 i11)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o57 (store (rec__patience__state__stacksizes s__split_fields11)
  o56 o55))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__numelts s__split_fields11) o58)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__values s__split_fields11) o59)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__numstacks s__split_fields11) o60)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o57 o61)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__stacks s__split_fields11) o62)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__posstack s__split_fields11) o63)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__posheight s__split_fields11) o64)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (rec__patience__state__preds s__split_fields11) o65)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___609 o58)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6091 o59)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6092 o60)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6093 o61)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6094 o62)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6095 o63)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6096 o64)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___6097 o65)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= result13 (mk___split_fields__ref s__split_fields11))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields12 (mk___split_fields temp___609 temp___6091 temp___6092
                       temp___6093 temp___6094 temp___6095 temp___6096
                       temp___6097))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and (= o66 idx1) (in_range3 idx1))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (to_rep1 o67) o66)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o68 (store (select (rec__patience__state__stacks s__split_fields12)
  i11) 0 o67))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and (<= 0 i11) (<= i11 99))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o69 i11)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o70 (store (rec__patience__state__stacks s__split_fields12) o69
  o68))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o71 (mk___split_fields (rec__patience__state__numelts s__split_fields12)
         (rec__patience__state__values s__split_fields12)
         (rec__patience__state__numstacks s__split_fields12)
         (rec__patience__state__stacksizes s__split_fields12) o70
         (rec__patience__state__posstack s__split_fields12)
         (rec__patience__state__posheight s__split_fields12)
         (rec__patience__state__preds s__split_fields12)))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___614 (mk___rep o71))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= result14 (mk___split_fields__ref s__split_fields12))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields13 (us_split_fields1 temp___614))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and (= o72 i11) (in_range3 i11))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (to_rep1 o73) o72)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and (<= 0 idx1) (<= idx1 99))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o74 idx1)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o75 (store (rec__patience__state__posstack s__split_fields13) o74
  o73))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o76 (mk___split_fields (rec__patience__state__numelts s__split_fields13)
         (rec__patience__state__values s__split_fields13)
         (rec__patience__state__numstacks s__split_fields13)
         (rec__patience__state__stacksizes s__split_fields13)
         (rec__patience__state__stacks s__split_fields13) o75
         (rec__patience__state__posheight s__split_fields13)
         (rec__patience__state__preds s__split_fields13)))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___617 (mk___rep o76))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= result15 (mk___split_fields__ref s__split_fields13))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields14 (us_split_fields1 temp___617))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= (to_rep1 o77) 0)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (and (<= 0 idx1) (<= idx1 99))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o78 idx1)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o79 (store (rec__patience__state__posheight s__split_fields14) o78
  o77))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= o80 (mk___split_fields (rec__patience__state__numelts s__split_fields14)
         (rec__patience__state__values s__split_fields14)
         (rec__patience__state__numstacks s__split_fields14)
         (rec__patience__state__stacksizes s__split_fields14)
         (rec__patience__state__stacks s__split_fields14)
         (rec__patience__state__posstack s__split_fields14) o79
         (rec__patience__state__preds s__split_fields14)))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= temp___620 (mk___rep o80))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= result16 (mk___split_fields__ref s__split_fields14))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields15 (us_split_fields1 temp___620))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= stackisize9 stackisize6)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= i12 (mk_int__ref i11))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields20 (mk___split_fields__ref s__split_fields15))))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= stackisize10 stackisize7)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= i13 i11)))

;; H
  (assert
  (=>
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10)))
  (= s__split_fields21 s__split_fields15)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (<= 0 (int__content i9)) (<= (int__content i9) 99))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o81 (int__content i9))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o82 (select (rec__patience__state__stacksizes s__split_fields10)
  o81))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o83 (to_rep1 o82))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= result17 stackisize6)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= stackisize8 o83)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (= o84 (+ stackisize8 1)) (in_range3 (+ stackisize8 1)))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= (to_rep1 o85) o84)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (<= 0 (int__content i9)) (<= (int__content i9) 99))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o86 (int__content i9))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o87 (store (rec__patience__state__stacksizes s__split_fields10)
  o86 o85))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o88 (mk___split_fields (rec__patience__state__numelts s__split_fields10)
         (rec__patience__state__values s__split_fields10)
         (rec__patience__state__numstacks s__split_fields10) o87
         (rec__patience__state__stacks s__split_fields10)
         (rec__patience__state__posstack s__split_fields10)
         (rec__patience__state__posheight s__split_fields10)
         (rec__patience__state__preds s__split_fields10)))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= temp___593 (mk___rep o88))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= result18 (mk___split_fields__ref s__split_fields10))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= s__split_fields16 (us_split_fields1 temp___593))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (= o89 idx1) (in_range3 idx1))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= (to_rep1 o90) o89)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (<= 0 stackisize8) (<= stackisize8 99))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o91 stackisize8)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o92 (store (select (rec__patience__state__stacks s__split_fields16)
  (int__content i9)) o91 o90))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (<= 0 (int__content i9)) (<= (int__content i9) 99))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o93 (int__content i9))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o94 (store (rec__patience__state__stacks s__split_fields16) o93
  o92))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o95 (mk___split_fields (rec__patience__state__numelts s__split_fields16)
         (rec__patience__state__values s__split_fields16)
         (rec__patience__state__numstacks s__split_fields16)
         (rec__patience__state__stacksizes s__split_fields16) o94
         (rec__patience__state__posstack s__split_fields16)
         (rec__patience__state__posheight s__split_fields16)
         (rec__patience__state__preds s__split_fields16)))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= temp___598 (mk___rep o95))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= result19 (mk___split_fields__ref s__split_fields16))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= s__split_fields17 (us_split_fields1 temp___598))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (= o96 (int__content i9)) (in_range3 (int__content i9)))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= (to_rep1 o97) o96)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (<= 0 idx1) (<= idx1 99))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o98 idx1)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o99 (store (rec__patience__state__posstack s__split_fields17) o98
  o97))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o100 (mk___split_fields
          (rec__patience__state__numelts s__split_fields17)
          (rec__patience__state__values s__split_fields17)
          (rec__patience__state__numstacks s__split_fields17)
          (rec__patience__state__stacksizes s__split_fields17)
          (rec__patience__state__stacks s__split_fields17) o99
          (rec__patience__state__posheight s__split_fields17)
          (rec__patience__state__preds s__split_fields17)))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= temp___601 (mk___rep o100))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= result20 (mk___split_fields__ref s__split_fields17))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= s__split_fields18 (us_split_fields1 temp___601))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= (to_rep1 o101) stackisize8)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (and (<= 0 idx1) (<= idx1 99))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o102 idx1)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o103 (store (rec__patience__state__posheight s__split_fields18)
  o102 o101))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= o104 (mk___split_fields
          (rec__patience__state__numelts s__split_fields18)
          (rec__patience__state__values s__split_fields18)
          (rec__patience__state__numstacks s__split_fields18)
          (rec__patience__state__stacksizes s__split_fields18)
          (rec__patience__state__stacks s__split_fields18)
          (rec__patience__state__posstack s__split_fields18) o103
          (rec__patience__state__preds s__split_fields18)))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= temp___604 (mk___rep o104))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= result21 (mk___split_fields__ref s__split_fields18))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= s__split_fields19 (us_split_fields1 temp___604))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= stackisize9 (mk_int__ref stackisize8))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= i12 i9)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= s__split_fields20 (mk___split_fields__ref s__split_fields19))))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= stackisize10 stackisize8)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= i13 i10)))

;; H
  (assert
  (=>
  (not
  (= (int__content i9) (to_rep1
                       (rec__patience__state__numstacks s__split_fields10))))
  (= s__split_fields21 s__split_fields19)))

;; H
  (assert
  (and
  (and
  (and
  (<= 0 (to_rep1
        (rec__patience__state__numstacks
        (us_split_fields__content s__split_fields20))))
  (<= (to_rep1
      (rec__patience__state__numstacks
      (us_split_fields__content s__split_fields20))) (to_rep1
                                                     (rec__patience__state__numelts
                                                     (us_split_fields__content
                                                     s__split_fields20)))))
  (<= (to_rep1
      (rec__patience__state__numelts
      (us_split_fields__content s__split_fields20))) 100))
  (or
  (= (to_rep1
     (rec__patience__state__numelts
     (us_split_fields__content s__split_fields20))) 0)
  (< 0 (to_rep1
       (rec__patience__state__numstacks
       (us_split_fields__content s__split_fields20)))))))

;; H
  (assert (<= 0 i1))

;; H
  (assert
  (<= i1 (- (to_rep1
            (rec__patience__state__numstacks
            (us_split_fields__content s__split_fields20))) 1)))

(assert
;; WP_parameter_def
 ;; File "patience.ads", line 53, characters 0-0
  (not (<= 0 i1)))
(check-sat)
(exit)
