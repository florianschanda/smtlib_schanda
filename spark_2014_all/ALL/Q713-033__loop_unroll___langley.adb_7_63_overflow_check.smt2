;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tinteger_32B 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (tinteger_32B tinteger_32B) Bool)

(declare-const dummy tinteger_32B)

(declare-datatypes ((tinteger_32B__ref 0))
(((mk_tinteger_32B__ref (tinteger_32B__content tinteger_32B)))))
(define-fun tinteger_32B__ref___projection ((a tinteger_32B__ref)) tinteger_32B
  (tinteger_32B__content a))

(declare-sort integer_32 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer_32 integer_32) Bool)

(declare-const dummy1 integer_32)

(declare-datatypes ((integer_32__ref 0))
(((mk_integer_32__ref (integer_32__content integer_32)))))
(define-fun integer_32__ref_2__projection ((a integer_32__ref)) integer_32
  (integer_32__content a))

(declare-fun to_rep (integer_32) Int)

(declare-fun of_rep (Int) integer_32)

;; inversion_axiom
  (assert
  (forall ((x integer_32))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer_32)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int integer_32))))))
(declare-fun slide ((Array Int integer_32) Int Int) (Array Int integer_32))

;; slide_eq
  (assert
  (forall ((a (Array Int integer_32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer_32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer_32) Int Int (Array Int integer_32)
  Int Int) (Array Int integer_32))

;; concat_def
  (assert
  (forall ((a (Array Int integer_32)) (b (Array Int integer_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer_32 Int) (Array Int integer_32))

;; singleton_def
  (assert
  (forall ((v integer_32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer_32)) (a__first Int) (a__last Int)
  (b (Array Int integer_32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer_32)) (b (Array Int integer_32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer_32) Int Int (Array Int integer_32)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer_32)) (b (Array Int integer_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer_32)) (b (Array Int integer_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer_32)) (b (Array Int integer_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const x (Array Int integer_32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y (Array Int integer_32))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_172)))

(declare-const sum (Array Int integer_32))

(declare-const i Int)

(declare-const langley__add__result (Array Int integer_32))

(declare-const o Int)

(declare-const o1 integer_32)

(declare-const o2 (Array Int integer_32))

(declare-const o3 Int)

(declare-const o4 integer_32)

(declare-const o5 (Array Int integer_32))

(declare-const o6 Int)

(declare-const o7 integer_32)

(declare-const o8 (Array Int integer_32))

(declare-const o9 Int)

(declare-const o10 integer_32)

(declare-const o11 (Array Int integer_32))

(declare-const o12 Int)

(declare-const o13 integer_32)

(declare-const o14 (Array Int integer_32))

(declare-const o15 Int)

(declare-const o16 integer_32)

(declare-const o17 (Array Int integer_32))

(declare-const o18 Int)

(declare-const o19 integer_32)

(declare-const o20 (Array Int integer_32))

(declare-const o21 Int)

(declare-const o22 integer_32)

(declare-const o23 (Array Int integer_32))

(declare-const o24 Int)

(declare-const o25 integer_32)

(declare-const o26 (Array Int integer_32))

(declare-const o27 Int)

(declare-const o28 integer_32)

(declare-const o29 (Array Int integer_32))

(declare-const i1 Int)

(declare-const result Int)

(declare-const i2 Int)

(declare-const result1 (Array Int integer_32))

(declare-const sum1 (Array Int integer_32))

(declare-const result2 Int)

(declare-const i3 Int)

(declare-const result3 (Array Int integer_32))

(declare-const sum2 (Array Int integer_32))

(declare-const result4 Int)

(declare-const i4 Int)

(declare-const result5 (Array Int integer_32))

(declare-const sum3 (Array Int integer_32))

(declare-const result6 Int)

(declare-const i5 Int)

(declare-const result7 (Array Int integer_32))

(declare-const sum4 (Array Int integer_32))

(declare-const result8 Int)

(declare-const i6 Int)

(declare-const result9 (Array Int integer_32))

(declare-const sum5 (Array Int integer_32))

(declare-const result10 Int)

(declare-const i7 Int)

(declare-const result11 (Array Int integer_32))

(declare-const sum6 (Array Int integer_32))

(declare-const result12 Int)

(declare-const i8 Int)

(declare-const result13 (Array Int integer_32))

(declare-const sum7 (Array Int integer_32))

(declare-const result14 Int)

(declare-const i9 Int)

(declare-const result15 (Array Int integer_32))

(declare-const sum8 (Array Int integer_32))

(declare-const result16 Int)

(declare-const i10 Int)

(declare-const result17 (Array Int integer_32))

(declare-const sum9 (Array Int integer_32))

(declare-const result18 int__ref)

(declare-const i11 Int)

(declare-const result19 map__ref)

(declare-const sum10 (Array Int integer_32))

(declare-const result20 map__ref)

(declare-const langley__add__result1 (Array Int integer_32))

(declare-const langley__add__result2 map__ref)

(declare-const langley__add__result3 (Array Int integer_32))

(declare-const sum11 map__ref)

(declare-const i12 int__ref)

(declare-const langley__add__result4 map__ref)

(declare-const sum12 (Array Int integer_32))

(declare-const i13 Int)

(declare-const langley__add__result5 (Array Int integer_32))

;; H
  (assert
  (forall ((i14 Int))
  (=> (and (<= 0 i14) (<= i14 9))
  (and
  (and
  (and (< (to_rep (select x i14)) 1073741824)
  (< (- 1073741824) (to_rep (select x i14))))
  (< (to_rep (select y i14)) 1073741824))
  (< (- 1073741824) (to_rep (select y i14)))))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i2 0))

;; H
  (assert
  (and (= o (+ (to_rep (select x i2)) (to_rep (select y i2)))) (in_range1
  (+ (to_rep (select x i2)) (to_rep (select y i2))))))

;; H
  (assert (= (to_rep o1) o))

;; H
  (assert (= o2 (store sum i2 o1)))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref sum)))

;; H
  (assert (= sum1 o2))

;; H
  (assert (= i2 result2))

;; H
  (assert (= i3 1))

;; H
  (assert
  (and (= o3 (+ (to_rep (select x i3)) (to_rep (select y i3)))) (in_range1
  (+ (to_rep (select x i3)) (to_rep (select y i3))))))

;; H
  (assert (= (to_rep o4) o3))

;; H
  (assert (= o5 (store sum1 i3 o4)))

;; H
  (assert (= sum1 result3))

;; H
  (assert (= sum2 o5))

;; H
  (assert (= i3 result4))

;; H
  (assert (= i4 2))

;; H
  (assert
  (and (= o6 (+ (to_rep (select x i4)) (to_rep (select y i4)))) (in_range1
  (+ (to_rep (select x i4)) (to_rep (select y i4))))))

;; H
  (assert (= (to_rep o7) o6))

;; H
  (assert (= o8 (store sum2 i4 o7)))

;; H
  (assert (= sum2 result5))

;; H
  (assert (= sum3 o8))

;; H
  (assert (= i4 result6))

;; H
  (assert (= i5 3))

;; H
  (assert
  (and (= o9 (+ (to_rep (select x i5)) (to_rep (select y i5)))) (in_range1
  (+ (to_rep (select x i5)) (to_rep (select y i5))))))

;; H
  (assert (= (to_rep o10) o9))

;; H
  (assert (= o11 (store sum3 i5 o10)))

;; H
  (assert (= sum3 result7))

;; H
  (assert (= sum4 o11))

;; H
  (assert (= i5 result8))

;; H
  (assert (= i6 4))

;; H
  (assert
  (and (= o12 (+ (to_rep (select x i6)) (to_rep (select y i6)))) (in_range1
  (+ (to_rep (select x i6)) (to_rep (select y i6))))))

;; H
  (assert (= (to_rep o13) o12))

;; H
  (assert (= o14 (store sum4 i6 o13)))

;; H
  (assert (= sum4 result9))

;; H
  (assert (= sum5 o14))

;; H
  (assert (= i6 result10))

;; H
  (assert (= i7 5))

;; H
  (assert
  (and (= o15 (+ (to_rep (select x i7)) (to_rep (select y i7)))) (in_range1
  (+ (to_rep (select x i7)) (to_rep (select y i7))))))

;; H
  (assert (= (to_rep o16) o15))

;; H
  (assert (= o17 (store sum5 i7 o16)))

;; H
  (assert (= sum5 result11))

;; H
  (assert (= sum6 o17))

;; H
  (assert (= i7 result12))

;; H
  (assert (= i8 6))

;; H
  (assert
  (and (= o18 (+ (to_rep (select x i8)) (to_rep (select y i8)))) (in_range1
  (+ (to_rep (select x i8)) (to_rep (select y i8))))))

;; H
  (assert (= (to_rep o19) o18))

;; H
  (assert (= o20 (store sum6 i8 o19)))

;; H
  (assert (= sum6 result13))

;; H
  (assert (= sum7 o20))

;; H
  (assert (= i8 result14))

;; H
  (assert (= i9 7))

;; H
  (assert
  (and (= o21 (+ (to_rep (select x i9)) (to_rep (select y i9)))) (in_range1
  (+ (to_rep (select x i9)) (to_rep (select y i9))))))

;; H
  (assert (= (to_rep o22) o21))

;; H
  (assert (= o23 (store sum7 i9 o22)))

;; H
  (assert (= sum7 result15))

;; H
  (assert (= sum8 o23))

;; H
  (assert (= i9 result16))

;; H
  (assert (= i10 8))

;; H
  (assert
  (and (= o24 (+ (to_rep (select x i10)) (to_rep (select y i10)))) (in_range1
  (+ (to_rep (select x i10)) (to_rep (select y i10))))))

;; H
  (assert (= (to_rep o25) o24))

;; H
  (assert (= o26 (store sum8 i10 o25)))

;; H
  (assert (= sum8 result17))

;; H
  (assert (= sum9 o26))

;; H
  (assert (= result18 (mk_int__ref i10)))

;; H
  (assert (= i11 9))

;; H
  (assert
  (and (= o27 (+ (to_rep (select x i11)) (to_rep (select y i11)))) (in_range1
  (+ (to_rep (select x i11)) (to_rep (select y i11))))))

;; H
  (assert (= (to_rep o28) o27))

;; H
  (assert (= o29 (store sum9 i11 o28)))

;; H
  (assert (= result19 (mk_map__ref sum9)))

;; H
  (assert (= sum10 o29))

;; H
  (assert (= langley__add__result2 (mk_map__ref langley__add__result1)))

;; H
  (assert (= langley__add__result3 langley__add__result1))

;; H
  (assert (= result20 (mk_map__ref langley__add__result)))

;; H
  (assert (= langley__add__result1 sum10))

;; H
  (assert (= langley__add__result4 langley__add__result2))

;; H
  (assert (= i12 (mk_int__ref i11)))

;; H
  (assert (= sum11 (mk_map__ref sum10)))

;; H
  (assert (= langley__add__result5 langley__add__result3))

;; H
  (assert (= i13 i11))

;; H
  (assert (= sum12 sum10))

;; H
  (assert (<= 0 i1))

;; H
  (assert (<= i1 9))

(assert
;; WP_parameter_def
 ;; File "langley.adb", line 3, characters 0-0
  (not (in_range1 (+ (to_rep (select x i1)) (to_rep (select y i1))))))
(check-sat)
(exit)
