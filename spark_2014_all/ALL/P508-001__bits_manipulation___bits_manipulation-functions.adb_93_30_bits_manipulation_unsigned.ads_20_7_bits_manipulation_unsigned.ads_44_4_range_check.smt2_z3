;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort modular 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq (modular modular) Bool)

(declare-const dummy modular)

(declare-datatypes ()
((modular__ref (mk_modular__ref (modular__content modular)))))
(define-fun modular__ref___6__projection ((a modular__ref)) modular (modular__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_309 (_ BitVec 32))
  (temp___is_init_306 Bool) (temp___skip_constant_307 Bool)
  (temp___do_toplevel_308 Bool)) Bool true)

(declare-sort bit_position 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (bit_position bit_position) Bool)

(declare-const dummy1 bit_position)

(declare-datatypes ()
((bit_position__ref
 (mk_bit_position__ref (bit_position__content bit_position)))))
(define-fun bit_position__ref___5__projection ((a bit_position__ref)) bit_position
  (bit_position__content a))

(define-fun dynamic_invariant1 ((temp___expr_315 Int)
  (temp___is_init_312 Bool) (temp___skip_constant_313 Bool)
  (temp___do_toplevel_314 Bool)) Bool (=>
                                      (or (= temp___is_init_312 true)
                                      (<= 0 31)) (in_range1 temp___expr_315)))

(declare-fun shift_right ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun shift_right__function_guard ((_ BitVec 32) (_ BitVec 32)
  Int) Bool)

(declare-fun nth1 ((_ BitVec 8) Int) Bool)

(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun to_int3 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 16) Int) Bool)

(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left3 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int4 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv2 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 16))))))
(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int5 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-const dummy2 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

;; shift_right__post_axiom
  (assert
  (forall ((v (_ BitVec 32)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant2 amount
     true true true)) (dynamic_invariant (shift_right v amount) true false
     true)) :pattern ((shift_right v amount)) ))))

;; shift_right__def_axiom
  (assert
  (forall ((v (_ BitVec 32)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant2 amount
     true true true))
     (= (shift_right v amount) (ite (and (<= 1 32) (<= 32 8))
                               ((_ zero_extend 24) (ite (< amount 8)
                                                   (bvlshr ((_ extract 7 0) v) ((_ int2bv 8) amount))
                                                   ((_ int2bv 8) 0)))
                               (ite (and (<= 9 32) (<= 32 16))
                               ((_ zero_extend 16) (ite (< amount 16)
                                                   (bvlshr ((_ extract 15 0) v) ((_ int2bv 16) amount))
                                                   ((_ int2bv 16) 0)))
                               (ite (and (<= 17 32) (<= 32 32))
                               (bvlshr v ((_ int2bv 32) amount))
                               ((_ extract 31 0) (bvlshr ((_ zero_extend 32) v) ((_ int2bv 64) amount)))))))) :pattern (
  (shift_right v amount)) ))))

(declare-const value (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const shift_amount Int)

(declare-const result__ Int)

(declare-const v (_ BitVec 32))

(declare-const new_v (_ BitVec 32))

(declare-const bits_manipulation_unsigned__unsigned_32__functions__msb_index_fast_inline_always__result Int)

(declare-const temp___451 (_ BitVec 32))

(declare-const temp___450 (_ BitVec 32))

(declare-const temp___449 Int)

(declare-const temp___448 Int)

(declare-const o (_ BitVec 32))

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const new_v1 (_ BitVec 32))

(declare-const result Int)

(declare-const shift_amount1 Int)

(declare-const result1 Int)

(declare-const result__1 Int)

(declare-const result2 (_ BitVec 32))

(declare-const v1 (_ BitVec 32))

(declare-const shift_amount2 Int)

(declare-const result__2 Int)

(declare-const v2 (_ BitVec 32))

(declare-const new_v2 (_ BitVec 32))

(declare-const result3 (_ BitVec 32))

(declare-const new_v3 (_ BitVec 32))

(declare-const result4 Int)

(declare-const result__3 Int)

(declare-const result5 (_ BitVec 32))

(declare-const v3 (_ BitVec 32))

(declare-const result6 Int)

(declare-const shift_amount3 Int)

(declare-const shift_amount4 Int)

(declare-const result__4 Int)

(declare-const v4 (_ BitVec 32))

(declare-const new_v4 (_ BitVec 32))

(declare-const shift_amount5 Int)

(declare-const result__5 Int)

(declare-const v5 (_ BitVec 32))

(declare-const new_v5 (_ BitVec 32))

(declare-const shift_amount6 Int)

(declare-const result__6 int__ref)

(declare-const v6 t__ref)

(declare-const new_v6 t__ref)

(declare-const shift_amount7 Int)

(declare-const result__7 Int)

(declare-const v7 (_ BitVec 32))

(declare-const new_v7 (_ BitVec 32))

(declare-const result7 int__ref)

(declare-const bits_manipulation_unsigned__unsigned_32__functions__msb_index_fast_inline_always__result1 Int)

(declare-const bits_manipulation_unsigned__unsigned_32__functions__msb_index_fast_inline_always__result2 int__ref)

(declare-const bits_manipulation_unsigned__unsigned_32__functions__msb_index_fast_inline_always__result3 Int)

(declare-const shift_amount8 int__ref)

(declare-const result__8 int__ref)

(declare-const v8 t__ref)

(declare-const new_v8 t__ref)

(declare-const bits_manipulation_unsigned__unsigned_32__functions__msb_index_fast_inline_always__result4 int__ref)

(declare-const shift_amount9 Int)

(declare-const result__9 Int)

(declare-const v9 (_ BitVec 32))

(declare-const new_v9 (_ BitVec 32))

(declare-const bits_manipulation_unsigned__unsigned_32__functions__msb_index_fast_inline_always__result5 Int)

(define-fun shift_amount10 () int__ref (mk_int__ref shift_amount6))

(define-fun result8 () t__ref (mk_t__ref result2))

(define-fun result9 () int__ref (mk_int__ref result1))

(define-fun result10 () int__ref (mk_int__ref result))

(define-fun v10 () t__ref (mk_t__ref v))

(define-fun result__10 () int__ref (mk_int__ref result__))

(define-fun shift_amount11 () int__ref (mk_int__ref shift_amount))

;; H
  (assert true)

;; H
  (assert (not (= value ((_ int2bv 32) 0))))

;; H
  (assert (= result10 shift_amount11))

;; H
  (assert (= shift_amount1 15))

;; H
  (assert (in_range1 shift_amount1))

;; H
  (assert (= result9 result__10))

;; H
  (assert (= result__1 0))

;; H
  (assert (in_range1 result__1))

;; H
  (assert (= result8 v10))

;; H
  (assert (= v1 value))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (not (= shift_amount1 0)))

;; H
  (assert (not (= v1 ((_ int2bv 32) 0))))

;; H
  (assert
  (and
  (and (=> (<= 0 31) (in_range1 shift_amount2))
  (=> (<= 0 31) (in_range1 result__2)))
  (and (not (= shift_amount2 0)) (not (= v2 ((_ int2bv 32) 0))))))

;; H
  (assert
  (and (= o (shift_right v2 shift_amount2))
  (= o (ite (and (<= 1 32) (<= 32 8))
       ((_ zero_extend 24) (ite (< shift_amount2 8)
                           (bvlshr ((_ extract 7 0) v2) ((_ int2bv 8)
                           shift_amount2)) ((_ int2bv 8) 0)))
       (ite (and (<= 9 32) (<= 32 16))
       ((_ zero_extend 16) (ite (< shift_amount2 16)
                           (bvlshr ((_ extract 15 0) v2) ((_ int2bv 16)
                           shift_amount2)) ((_ int2bv 16) 0)))
       (ite (and (<= 17 32) (<= 32 32))
       (bvlshr v2 ((_ int2bv 32) shift_amount2))
       ((_ extract 31 0) (bvlshr ((_ zero_extend 32) v2) ((_ int2bv 64)
       shift_amount2)))))))))

;; H
  (assert (= new_v2 result3))

;; H
  (assert (= new_v3 o))

;; H
  (assert (not (= new_v3 ((_ int2bv 32) 0))))

;; H
  (assert (in_range1 (+ result__2 shift_amount2)))

(assert
;; WP_parameter_def
 ;; File "bits_manipulation.ads", line 10, characters 0-0
  (not (in_range1 (+ result__2 shift_amount2))))
(check-sat)
(exit)
