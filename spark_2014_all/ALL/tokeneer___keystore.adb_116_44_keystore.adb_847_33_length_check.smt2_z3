;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool)
  (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort descriptioni 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 150)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (descriptioni descriptioni) Bool)

(declare-const dummy4 descriptioni)

(declare-datatypes ((descriptioni__ref 0))
(((mk_descriptioni__ref (descriptioni__content descriptioni)))))
(define-fun descriptioni__ref___projection ((a descriptioni__ref)) descriptioni
  (descriptioni__content a))

(declare-const nodescription (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___133 Int))
  (forall ((temp___134 Int))
  (= (select (audittypes__nodescription__aggregate_def temp___133) temp___134)
  (of_rep temp___133)))))

(declare-const nouser (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun temp___String_Literal_135 (tuple0) (Array Int character))

;; temp___String_Literal_135__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 33)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 36)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 40)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 41)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 43)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 45)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 48)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 49)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 50)) 32)) :pattern (
  (temp___String_Literal_135 us_void_param)) )))

(declare-sort unsigned32t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (unsigned32t unsigned32t) Bool)

(declare-const dummy5 unsigned32t)

(declare-datatypes ((unsigned32t__ref 0))
(((mk_unsigned32t__ref (unsigned32t__content unsigned32t)))))
(define-fun unsigned32t__ref___projection ((a unsigned32t__ref)) unsigned32t
  (unsigned32t__content a))

(declare-fun to_rep2 (unsigned32t) Int)

(declare-fun of_rep2 (Int) unsigned32t)

;; inversion_axiom
  (assert
  (forall ((x unsigned32t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned32t)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort namecountt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (namecountt namecountt) Bool)

(declare-const dummy6 namecountt)

(declare-datatypes ((namecountt__ref 0))
(((mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt
  (namecountt__content a))

(declare-fun to_rep3 (namecountt) Int)

(declare-fun of_rep3 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy7 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-sort issueridt 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (issueridt issueridt) Bool)

(declare-const dummy8 issueridt)

(declare-datatypes ((issueridt__ref 0))
(((mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt
  (issueridt__content a))

(declare-fun to_rep4 (issueridt) Int)

(declare-fun of_rep4 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep4
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((issuert__ref 0))
(((mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-sort keyidt 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (keyidt keyidt) Bool)

(declare-const dummy10 keyidt)

(declare-datatypes ((keyidt__ref 0))
(((mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content
                                                              a))

(declare-fun to_rep5 (keyidt) Int)

(declare-fun of_rep5 (Int) keyidt)

;; inversion_axiom
  (assert
  (forall ((x keyidt))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x keyidt)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort keylengtht 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (keylengtht keylengtht) Bool)

(declare-const dummy11 keylengtht)

(declare-datatypes ((keylengtht__ref 0))
(((mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht
  (keylengtht__content a))

(declare-fun to_rep6 (keylengtht) Int)

(declare-fun of_rep6 (Int) keylengtht)

;; inversion_axiom
  (assert
  (forall ((x keylengtht))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x keylengtht)) (! (in_range9
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort algorithmt 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (algorithmt algorithmt) Bool)

(declare-const dummy12 algorithmt)

(declare-datatypes ((algorithmt__ref 0))
(((mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt
  (algorithmt__content a))

(declare-fun to_rep7 (algorithmt) Int)

(declare-fun of_rep7 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range10
  (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields2)) algorithmt
  (rec__cryptotypes__keypartt__algorithmid a))

(define-fun us_split_fields_KeyID__projection ((a us_split_fields2)) keyidt
  (rec__cryptotypes__keypartt__keyid a))

(define-fun us_split_fields_KeyLength__projection ((a us_split_fields2)) keylengtht
  (rec__cryptotypes__keypartt__keylength a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep7
                            (rec__cryptotypes__keypartt__algorithmid
                            (us_split_fields3 a))) (to_rep7
                                                   (rec__cryptotypes__keypartt__algorithmid
                                                   (us_split_fields3 b))))
                         (= (to_rep5
                            (rec__cryptotypes__keypartt__keyid
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__cryptotypes__keypartt__keyid
                                                   (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__cryptotypes__keypartt__keylength
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__cryptotypes__keypartt__keylength
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; cryptotypes__keypartt__algorithmid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; cryptotypes__keypartt__algorithmid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; cryptotypes__keypartt__algorithmid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; cryptotypes__keypartt__keyid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; cryptotypes__keypartt__keyid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; cryptotypes__keypartt__keyid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; cryptotypes__keypartt__keylength__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; cryptotypes__keypartt__keylength__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; cryptotypes__keypartt__keylength__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ((keypartt__ref 0))
(((mk_keypartt__ref (keypartt__content us_rep1)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep1 (keypartt__content
                                                                   a))

(declare-fun valid_numberlogentries (us_private) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool us_private) Bool)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__keystore__optionalprivatekeyt__ispresent Bool)(rec__keystore__optionalprivatekeyt__owner us_rep)))))
(define-fun us_split_fields_IsPresent__projection ((a us_split_fields4)) Bool
  (rec__keystore__optionalprivatekeyt__ispresent a))

(define-fun us_split_fields_Owner__2__projection ((a us_split_fields4)) us_rep
  (rec__keystore__optionalprivatekeyt__owner a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___12__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                   a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (rec__keystore__optionalprivatekeyt__ispresent
                            (us_split_fields5 a)) (rec__keystore__optionalprivatekeyt__ispresent
                                                  (us_split_fields5 b)))
                         (= (bool_eq2
                            (rec__keystore__optionalprivatekeyt__owner
                            (us_split_fields5 a))
                            (rec__keystore__optionalprivatekeyt__owner
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const keystore__optionalprivatekeyt__ispresent__first__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__last__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__position Int)

;; keystore__optionalprivatekeyt__ispresent__first__bit_axiom
  (assert (<= 0 keystore__optionalprivatekeyt__ispresent__first__bit))

;; keystore__optionalprivatekeyt__ispresent__last__bit_axiom
  (assert
  (< keystore__optionalprivatekeyt__ispresent__first__bit keystore__optionalprivatekeyt__ispresent__last__bit))

;; keystore__optionalprivatekeyt__ispresent__position_axiom
  (assert (<= 0 keystore__optionalprivatekeyt__ispresent__position))

(declare-const keystore__optionalprivatekeyt__owner__first__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__last__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__position Int)

;; keystore__optionalprivatekeyt__owner__first__bit_axiom
  (assert (<= 0 keystore__optionalprivatekeyt__owner__first__bit))

;; keystore__optionalprivatekeyt__owner__last__bit_axiom
  (assert
  (< keystore__optionalprivatekeyt__owner__first__bit keystore__optionalprivatekeyt__owner__last__bit))

;; keystore__optionalprivatekeyt__owner__position_axiom
  (assert (<= 0 keystore__optionalprivatekeyt__owner__position))

(declare-fun user_eq14 (us_rep2 us_rep2) Bool)

(declare-const dummy14 us_rep2)

(declare-datatypes ((optionalprivatekeyt__ref 0))
(((mk_optionalprivatekeyt__ref (optionalprivatekeyt__content us_rep2)))))
(define-fun optionalprivatekeyt__ref___projection ((a optionalprivatekeyt__ref)) us_rep2
  (optionalprivatekeyt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun privatekeypresent (us_split_fields4) Bool)

(declare-fun privatekeypresent__function_guard (Bool us_split_fields4) Bool)

;; privatekeypresent__post_axiom
  (assert true)

;; privatekeypresent__def_axiom
  (assert
  (forall ((keystore__thistisinfo__fields us_split_fields4))
  (! (= (= (privatekeypresent keystore__thistisinfo__fields) true)
     (= (rec__keystore__optionalprivatekeyt__ispresent
        (us_split_fields5 (mk___rep2 keystore__thistisinfo__fields))) true)) :pattern (
  (privatekeypresent keystore__thistisinfo__fields)) )))

(declare-const theowner us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const thekey us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const ispublic Bool)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-sort maskt 0)

(define-fun in_range11 ((x (_ BitVec 32))) Bool (and
                                                (bvule ((_ int2bv 32) 0) x)
                                                (bvule x ((_ int2bv 32) 15))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 32))

(declare-fun user_eq15 (maskt maskt) Bool)

(declare-const dummy15 maskt)

(declare-datatypes ((maskt__ref 0))
(((mk_maskt__ref (maskt__content maskt)))))
(define-fun maskt__ref___projection ((a maskt__ref)) maskt (maskt__content a))

(declare-fun to_rep8 (maskt) (_ BitVec 32))

(declare-fun of_rep8 ((_ BitVec 32)) maskt)

;; inversion_axiom
  (assert
  (forall ((x maskt))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x maskt)) (! (in_range11 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (let ((y (bvurem x ((_ int2bv 32) 16))))
     (=> (in_range11 y) (= (to_rep8 (of_rep8 x)) y))) :pattern ((to_rep8
                                                                (of_rep8 x))) )))

(define-fun to_int3 ((x maskt)) Int (bv2int (to_rep8 x)))

;; range_int_axiom
  (assert
  (forall ((x maskt)) (! (in_range_int (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__keystore__interfac__keytemplatet__attrmask maskt)(rec__keystore__interfac__keytemplatet__owner us_rep)(rec__keystore__interfac__keytemplatet__keyid unsigned32t)(rec__keystore__interfac__keytemplatet__keylength unsigned32t)(rec__keystore__interfac__keytemplatet__ispublic Bool)))))
(define-fun us_split_fields_AttrMask__projection ((a us_split_fields6)) maskt
  (rec__keystore__interfac__keytemplatet__attrmask a))

(define-fun us_split_fields_Owner__projection ((a us_split_fields6)) us_rep
  (rec__keystore__interfac__keytemplatet__owner a))

(define-fun us_split_fields_KeyID__2__projection ((a us_split_fields6)) unsigned32t
  (rec__keystore__interfac__keytemplatet__keyid a))

(define-fun us_split_fields_KeyLength__2__projection ((a us_split_fields6)) unsigned32t
  (rec__keystore__interfac__keytemplatet__keylength a))

(define-fun us_split_fields_IsPublic__projection ((a us_split_fields6)) Bool
  (rec__keystore__interfac__keytemplatet__ispublic a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___11__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                   a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep8
                            (rec__keystore__interfac__keytemplatet__attrmask
                            (us_split_fields7 a))) (to_rep8
                                                   (rec__keystore__interfac__keytemplatet__attrmask
                                                   (us_split_fields7 b))))
                         (= (bool_eq2
                            (rec__keystore__interfac__keytemplatet__owner
                            (us_split_fields7 a))
                            (rec__keystore__interfac__keytemplatet__owner
                            (us_split_fields7 b))) true))
                         (= (to_rep2
                            (rec__keystore__interfac__keytemplatet__keyid
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__keystore__interfac__keytemplatet__keyid
                                                   (us_split_fields7 b)))))
                         (= (to_rep2
                            (rec__keystore__interfac__keytemplatet__keylength
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__keystore__interfac__keytemplatet__keylength
                                                   (us_split_fields7 b)))))
                         (= (rec__keystore__interfac__keytemplatet__ispublic
                            (us_split_fields7 a)) (rec__keystore__interfac__keytemplatet__ispublic
                                                  (us_split_fields7 b))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const keystore__interfac__keytemplatet__attrmask__first__bit Int)

(declare-const keystore__interfac__keytemplatet__attrmask__last__bit Int)

(declare-const keystore__interfac__keytemplatet__attrmask__position Int)

;; keystore__interfac__keytemplatet__attrmask__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__attrmask__first__bit))

;; keystore__interfac__keytemplatet__attrmask__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__attrmask__first__bit keystore__interfac__keytemplatet__attrmask__last__bit))

;; keystore__interfac__keytemplatet__attrmask__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__attrmask__position))

(declare-const keystore__interfac__keytemplatet__owner__first__bit Int)

(declare-const keystore__interfac__keytemplatet__owner__last__bit Int)

(declare-const keystore__interfac__keytemplatet__owner__position Int)

;; keystore__interfac__keytemplatet__owner__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__owner__first__bit))

;; keystore__interfac__keytemplatet__owner__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__owner__first__bit keystore__interfac__keytemplatet__owner__last__bit))

;; keystore__interfac__keytemplatet__owner__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__owner__position))

(declare-const keystore__interfac__keytemplatet__keyid__first__bit Int)

(declare-const keystore__interfac__keytemplatet__keyid__last__bit Int)

(declare-const keystore__interfac__keytemplatet__keyid__position Int)

;; keystore__interfac__keytemplatet__keyid__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keyid__first__bit))

;; keystore__interfac__keytemplatet__keyid__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__keyid__first__bit keystore__interfac__keytemplatet__keyid__last__bit))

;; keystore__interfac__keytemplatet__keyid__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keyid__position))

(declare-const keystore__interfac__keytemplatet__keylength__first__bit Int)

(declare-const keystore__interfac__keytemplatet__keylength__last__bit Int)

(declare-const keystore__interfac__keytemplatet__keylength__position Int)

;; keystore__interfac__keytemplatet__keylength__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keylength__first__bit))

;; keystore__interfac__keytemplatet__keylength__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__keylength__first__bit keystore__interfac__keytemplatet__keylength__last__bit))

;; keystore__interfac__keytemplatet__keylength__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keylength__position))

(declare-const keystore__interfac__keytemplatet__ispublic__first__bit Int)

(declare-const keystore__interfac__keytemplatet__ispublic__last__bit Int)

(declare-const keystore__interfac__keytemplatet__ispublic__position Int)

;; keystore__interfac__keytemplatet__ispublic__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__ispublic__first__bit))

;; keystore__interfac__keytemplatet__ispublic__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__ispublic__first__bit keystore__interfac__keytemplatet__ispublic__last__bit))

;; keystore__interfac__keytemplatet__ispublic__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__ispublic__position))

(declare-fun user_eq16 (us_rep3 us_rep3) Bool)

(declare-const dummy16 us_rep3)

(declare-datatypes ((keytemplatet__ref 0))
(((mk_keytemplatet__ref (keytemplatet__content us_rep3)))))
(define-fun keytemplatet__ref___projection ((a keytemplatet__ref)) us_rep3
  (keytemplatet__content a))

(declare-sort returnvaluet 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 28)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq17 (returnvaluet returnvaluet) Bool)

(declare-const dummy17 returnvaluet)

(declare-datatypes ((returnvaluet__ref 0))
(((mk_returnvaluet__ref (returnvaluet__content returnvaluet)))))
(define-fun returnvaluet__ref___projection ((a returnvaluet__ref)) returnvaluet
  (returnvaluet__content a))

(define-fun dynamic_invariant1 ((temp___expr_1038 Int)
  (temp___is_init_1035 Bool) (temp___skip_constant_1036 Bool)
  (temp___do_toplevel_1037 Bool)) Bool (=>
                                       (or (= temp___is_init_1035 true)
                                       (<= 0 28)) (in_range12
                                       temp___expr_1038)))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int Bool))))))
(declare-fun slide1 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (select a temp___idx_157) (select b (+ (- b__first a__first) temp___idx_157))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (select a temp___idx_157) (select b (+ (- b__first a__first) temp___idx_157))))))))))

(declare-fun compare1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq6 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int2 (select a (+ i 1))) (to_int2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq6 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int2 (select b (+ i 1))) (to_int2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-const issystem (Array Int Bool))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun keystore__issystem__aggregate_def (Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___159 Bool) (temp___160 Bool) (temp___161 Bool)
  (temp___162 Bool) (temp___163 Bool) (temp___164 Bool) (temp___165 Bool)
  (temp___166 Bool) (temp___167 Bool) (temp___168 Bool) (temp___169 Bool)
  (temp___170 Bool) (temp___171 Bool) (temp___172 Bool) (temp___173 Bool)
  (temp___174 Bool) (temp___175 Bool) (temp___176 Bool) (temp___177 Bool)
  (temp___178 Bool) (temp___179 Bool) (temp___180 Bool) (temp___181 Bool)
  (temp___182 Bool) (temp___183 Bool) (temp___184 Bool) (temp___185 Bool)
  (temp___186 Bool) (temp___187 Bool))
  (let ((temp___158 (keystore__issystem__aggregate_def temp___159 temp___160
                    temp___161 temp___162 temp___163 temp___164 temp___165
                    temp___166 temp___167 temp___168 temp___169 temp___170
                    temp___171 temp___172 temp___173 temp___174 temp___175
                    temp___176 temp___177 temp___178 temp___179 temp___180
                    temp___181 temp___182 temp___183 temp___184 temp___185
                    temp___186 temp___187)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___158 0) temp___159)
  (= (select temp___158 1) temp___160)) (= (select temp___158 2) temp___161))
  (= (select temp___158 3) temp___162)) (= (select temp___158 4) temp___163))
  (= (select temp___158 5) temp___164)) (= (select temp___158 6) temp___165))
  (= (select temp___158 7) temp___166)) (= (select temp___158 8) temp___167))
  (= (select temp___158 9) temp___168))
  (= (select temp___158 10) temp___169))
  (= (select temp___158 11) temp___170))
  (= (select temp___158 12) temp___171))
  (= (select temp___158 13) temp___172))
  (= (select temp___158 14) temp___173))
  (= (select temp___158 15) temp___174))
  (= (select temp___158 16) temp___175))
  (= (select temp___158 17) temp___176))
  (= (select temp___158 18) temp___177))
  (= (select temp___158 19) temp___178))
  (= (select temp___158 20) temp___179))
  (= (select temp___158 21) temp___180))
  (= (select temp___158 22) temp___181))
  (= (select temp___158 23) temp___182))
  (= (select temp___158 24) temp___183))
  (= (select temp___158 25) temp___184))
  (= (select temp___158 26) temp___185))
  (= (select temp___158 27) temp___186))
  (= (select temp___158 28) temp___187)))))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c149b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const thestring us_t)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq18 (integer integer) Bool)

(declare-const dummy18 integer)

(declare-datatypes ((t155b__ref 0))
(((mk_t155b__ref (t155b__content integer)))))
(define-fun t155b__ref___projection ((a t155b__ref)) integer (t155b__content
                                                             a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array Int character)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq7 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq19 (us_t1 us_t1) Bool)

(declare-const dummy19 us_t1)

(declare-datatypes ((t156b__ref 0))
(((mk_t156b__ref (t156b__content us_t1)))))
(define-fun t156b__ref___projection ((a t156b__ref)) us_t1 (t156b__content a))

(declare-fun temp___String_Literal_1187 (tuple0) (Array Int character))

;; temp___String_Literal_1187__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1187 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_1187 us_void_param) 2)) 100))
     (= (to_rep (select (temp___String_Literal_1187 us_void_param) 3)) 100))
     (= (to_rep (select (temp___String_Literal_1187 us_void_param) 4)) 75))
     (= (to_rep (select (temp___String_Literal_1187 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1187 us_void_param) 6)) 121)) :pattern (
  (temp___String_Literal_1187 us_void_param)) )))

(declare-fun temp___String_Literal_1197 (tuple0) (Array Int character))

;; temp___String_Literal_1197__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 2)) 114))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 3)) 121))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 4)) 112))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 5)) 116))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 8)) 76))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 10)) 98))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 11)) 114))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 12)) 97))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 14)) 121))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 16)) 69))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 18)) 114))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 19)) 111))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 20)) 114))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 23)) 110))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 25)) 65))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 26)) 100))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 27)) 100))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 28)) 75))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 29)) 101))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 30)) 121))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 32)) 58))
     (= (to_rep (select (temp___String_Literal_1197 us_void_param) 33)) 32)) :pattern (
  (temp___String_Literal_1197 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; issystem__def_axiom
  (assert
  (= issystem (keystore__issystem__aggregate_def (of_int 0) (of_int 1)
              (of_int 1) (of_int 1) (of_int 0) (of_int 0) (of_int 0)
              (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
              (of_int 1) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
              (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 1)
              (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 1)
              (of_int 1) (of_int 1))))

(define-fun dynamic_invariant5 ((temp___expr_259 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)) Bool (=>
                                      (or (= temp___is_init_256 true)
                                      (<= 0 4294967295)) (in_range5
                                      temp___expr_259)))

(define-fun dynamic_invariant6 ((temp___expr_703 Int)
  (temp___is_init_700 Bool) (temp___skip_constant_701 Bool)
  (temp___do_toplevel_702 Bool)) Bool (=>
                                      (or (= temp___is_init_700 true)
                                      (<= 0 40)) (in_range6 temp___expr_703)))

(define-fun dynamic_invariant7 ((temp___expr_724 Int)
  (temp___is_init_721 Bool) (temp___skip_constant_722 Bool)
  (temp___do_toplevel_723 Bool)) Bool (=>
                                      (or (= temp___is_init_721 true)
                                      (<= 0 4294967295)) (in_range7
                                      temp___expr_724)))

(define-fun dynamic_invariant8 ((temp___expr_742 Int)
  (temp___is_init_739 Bool) (temp___skip_constant_740 Bool)
  (temp___do_toplevel_741 Bool)) Bool (=>
                                      (or (= temp___is_init_739 true)
                                      (<= 0 10)) (in_range10
                                      temp___expr_742)))

(define-fun dynamic_invariant9 ((temp___expr_754 Int)
  (temp___is_init_751 Bool) (temp___skip_constant_752 Bool)
  (temp___do_toplevel_753 Bool)) Bool (=>
                                      (or (= temp___is_init_751 true)
                                      (<= 0 4294967295)) (in_range8
                                      temp___expr_754)))

(define-fun dynamic_invariant10 ((temp___expr_760 Int)
  (temp___is_init_757 Bool) (temp___skip_constant_758 Bool)
  (temp___do_toplevel_759 Bool)) Bool (=>
                                      (or (= temp___is_init_757 true)
                                      (<= 0 128)) (in_range9
                                      temp___expr_760)))

(define-fun dynamic_invariant11 ((temp___expr_217 Int)
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool (=>
                                      (or (= temp___is_init_214 true)
                                      (<= 1 150)) (in_range4
                                      temp___expr_217)))

;; nodescription__def_axiom
  (assert (= nodescription (audittypes__nodescription__aggregate_def 32)))

;; nouser__def_axiom
  (assert (= nouser (temp___String_Literal_135 Tuple0)))

;; valid_numberlogentries__post_axiom
  (assert true)

(define-fun dynamic_invariant12 ((temp___expr_979 (_ BitVec 32))
  (temp___is_init_976 Bool) (temp___skip_constant_977 Bool)
  (temp___do_toplevel_978 Bool)) Bool (=>
                                      (or (= temp___is_init_976 true)
                                      (bvule ((_ int2bv 32) 0) ((_ int2bv 32) 15)))
                                      (in_range11 temp___expr_979)))

(declare-const filestate us_private)

(declare-const state us_private)

(declare-const added Bool)

(declare-const thistisinfo__split_fields Bool)

(declare-const thistisinfo__split_fields1 issueridt)

(declare-const thistisinfo__split_fields2 namecountt)

(declare-const thistisinfo__split_fields3 (Array Int character))

(declare-const thekeytemplate__split_fields maskt)

(declare-const thekeytemplate__split_fields1 issueridt)

(declare-const thekeytemplate__split_fields2 namecountt)

(declare-const thekeytemplate__split_fields3 (Array Int character))

(declare-const thekeytemplate__split_fields4 unsigned32t)

(declare-const thekeytemplate__split_fields5 unsigned32t)

(declare-const thekeytemplate__split_fields6 Bool)

(declare-const retval Int)

(declare-const c151b (Array Int character))

(declare-const result__ (Array Int character))

(declare-const o unsigned32t)

(declare-const o1 unsigned32t)

(declare-const o2 maskt)

(declare-const o3 maskt)

(declare-const o4 issueridt)

(declare-const o5 namecountt)

(declare-const o6 (Array Int character))

(declare-const o7 unsigned32t)

(declare-const o8 unsigned32t)

(declare-const o9 Bool)

(declare-const temp___1185 maskt)

(declare-const temp___11851 issueridt)

(declare-const temp___11852 namecountt)

(declare-const temp___11853 (Array Int character))

(declare-const temp___11854 unsigned32t)

(declare-const temp___11855 unsigned32t)

(declare-const temp___11856 Bool)

(declare-const o10 Int)

(declare-const o11 Int)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const keystore__addkey__B153b__thestring__assume us_t)

(declare-const o16 Int)

(declare-const temp___1191 us_t1)

(declare-const temp___1195 us_t1)

(declare-const o17 (Array Int character))

(declare-const temp___1190 us_t)

(declare-const o18 (Array Int character))

(declare-const filestate1 us_private)

(declare-const state1 us_private)

(declare-const thistisinfo__split_fields4 us_split_fields4)

(declare-const c151b1 (Array Int character))

(declare-const result__1 (Array Int character))

(declare-const result us_split_fields__ref3)

(declare-const thekeytemplate__split_fields7 us_split_fields6)

(declare-const store1 us_private)

(declare-const retval1 Int)

(declare-const result1 bool__ref)

(declare-const added1 Bool)

(declare-const result2 us_split_fields__ref2)

(declare-const thistisinfo__split_fields5 us_split_fields4)

(declare-const result3 map__ref)

(declare-const result__2 (Array Int character))

(declare-const result4 Bool)

(declare-const result5 map__ref)

(declare-const result__3 (Array Int character))

(declare-const result6 map__ref)

(declare-const result__4 (Array Int character))

(declare-const result7 map__ref)

(declare-const c151b2 (Array Int character))

(declare-const filestate2 us_private)

(declare-const state2 us_private)

(declare-const filestate3 us_private__ref)

(declare-const state3 us_private__ref)

(declare-const added2 bool__ref)

(declare-const store2 us_private__ref)

(declare-const thistisinfo__split_fields6 us_split_fields__ref2)

(declare-const thekeytemplate__split_fields8 us_split_fields__ref3)

(declare-const retval2 int__ref)

(declare-const c151b3 map__ref)

(declare-const result__5 map__ref)

(declare-const filestate4 us_private)

(declare-const state4 us_private)

(declare-const added3 Bool)

(declare-const store3 us_private)

(declare-const thistisinfo__split_fields7 us_split_fields4)

(declare-const thekeytemplate__split_fields9 us_split_fields6)

(declare-const retval3 Int)

(declare-const c151b4 (Array Int character))

(declare-const result__6 (Array Int character))

(define-fun result__7 () map__ref (mk_map__ref result__))

(define-fun c151b5 () map__ref (mk_map__ref c151b))

(define-fun thekeytemplate__split_fields10 () us_split_fields__ref3 (mk___split_fields__ref3
                                                                    (mk___split_fields3
                                                                    thekeytemplate__split_fields
                                                                    (mk___rep
                                                                    (mk___split_fields
                                                                    thekeytemplate__split_fields1
                                                                    thekeytemplate__split_fields2
                                                                    thekeytemplate__split_fields3))
                                                                    thekeytemplate__split_fields4
                                                                    thekeytemplate__split_fields5
                                                                    thekeytemplate__split_fields6)))

(define-fun thistisinfo__split_fields8 () us_split_fields__ref2 (mk___split_fields__ref2
                                                                (mk___split_fields2
                                                                thistisinfo__split_fields
                                                                (mk___rep
                                                                (mk___split_fields
                                                                thistisinfo__split_fields1
                                                                thistisinfo__split_fields2
                                                                thistisinfo__split_fields3)))))

(define-fun added4 () bool__ref (mk_bool__ref added))

;; H
  (assert
  (= (keystore__issystem__aggregate_def (of_int 0) (of_int 1) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
     (of_int 0) (of_int 1) (of_int 1) (of_int 1) (of_int 0) (of_int 0)
     (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 1)
     (of_int 1) (of_int 1)) issystem))

;; H
  (assert (= (audittypes__nodescription__aggregate_def 32) nodescription))

;; H
  (assert (= (temp___String_Literal_135 Tuple0) nouser))

;; H
  (assert (=> (<= 0 28) (in_range12 retval)))

;; H
  (assert
  (= (to_rep2 o) (to_rep6
                 (rec__cryptotypes__keypartt__keylength
                 (us_split_fields3 thekey)))))

;; H
  (assert
  (= (to_rep2 o1) (to_rep5
                  (rec__cryptotypes__keypartt__keyid
                  (us_split_fields3 thekey)))))

;; H
  (assert (= (to_rep8 o2) ((_ int2bv 32) 15)))

;; H
  (assert (= o2 o3))

;; H
  (assert (= theowner (mk___rep (mk___split_fields o4 o5 o6))))

;; H
  (assert (= o1 o7))

;; H
  (assert (= o o8))

;; H
  (assert (= ispublic o9))

;; H
  (assert (= temp___1185 o3))

;; H
  (assert (= temp___11851 o4))

;; H
  (assert (= temp___11852 o5))

;; H
  (assert (= temp___11853 o6))

;; H
  (assert (= temp___11854 o7))

;; H
  (assert (= temp___11855 o8))

;; H
  (assert (= temp___11856 o9))

;; H
  (assert (= result thekeytemplate__split_fields10))

;; H
  (assert
  (= thekeytemplate__split_fields7 (mk___split_fields3 temp___1185
                                   (mk___rep
                                   (mk___split_fields temp___11851
                                   temp___11852 temp___11853)) temp___11854
                                   temp___11855 temp___11856)))

;; H
  (assert (in_range12 retval1))

;; H
  (assert (= result1 added4))

;; H
  (assert (= added1 (ite (= retval1 0) true false)))

;; H
  (assert
  (=> (ite (= added1 true) (not (= ispublic true)) false)
  (= result2 thistisinfo__split_fields8)))

;; H
  (assert
  (=> (ite (= added1 true) (not (= ispublic true)) false)
  (= thistisinfo__split_fields5 (mk___split_fields2 (of_int 1) theowner))))

;; H
  (assert
  (=> (not (ite (= added1 true) (not (= ispublic true)) false))
  (= thistisinfo__split_fields5 (mk___split_fields2 thistisinfo__split_fields
                                (mk___rep
                                (mk___split_fields thistisinfo__split_fields1
                                thistisinfo__split_fields2
                                thistisinfo__split_fields3))))))

;; H
  (assert
  (=> (not (ite (= added1 true) (not (= ispublic true)) false))
  (= thistisinfo__split_fields5 thistisinfo__split_fields4)))

;; H
  (assert (= (select issystem retval1) true))

;; H
  (assert (= retval1 c149b))

;; H
  (assert (in_range12 c149b))

;; H
  (assert (= result3 result__7))

;; H
  (assert (= result__2 nodescription))

;; H
  (assert
  (=>
  (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE12 c149b)))))
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE12 c149b))))))
  (= o10 (+ (- (to_rep1
               (last (rt (to_string (attr__ATTRIBUTE_IMAGE12 c149b)))))
  (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE12 c149b)))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE12 c149b)))))
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE12 c149b)))))))
  (= o10 0)))

;; H
  (assert (=> (<= 1 33) (= o11 (+ (- 33 1) 1))))

;; H
  (assert (=> (not (<= 1 33)) (= o11 0)))

;; H
  (assert (= o12 (+ o11 o10)))

;; H
  (assert (= o13 (+ 1 o12)))

;; H
  (assert (= o14 (- o13 1)))

;; H
  (assert (and (= o15 o14) (in_range2 o14)))

;; H
  (assert
  (= keystore__addkey__B153b__thestring__assume (mk___t
                                                (concat1
                                                (temp___String_Literal_1197
                                                Tuple0) 1 33
                                                (elts
                                                (to_string
                                                (attr__ATTRIBUTE_IMAGE12
                                                c149b)))
                                                (to_rep1
                                                (first
                                                (rt
                                                (to_string
                                                (attr__ATTRIBUTE_IMAGE12
                                                c149b)))))
                                                (to_rep1
                                                (last
                                                (rt
                                                (to_string
                                                (attr__ATTRIBUTE_IMAGE12
                                                c149b)))))) (mk 1 o15))))

;; H
  (assert (= keystore__addkey__B153b__thestring__assume thestring))

;; H
  (assert (dynamic_invariant thestring true false true))

;; H
  (assert (and (= o16 (length thestring)) (in_range1 (length thestring))))

;; H
  (assert (= result4 (ite (<= o16 150) true false)))

;; H
  (assert (= result4 true))

(assert
;; WP_parameter_def
 ;; File "keystore.adb", line 714, characters 0-0
  (not
  (= (ite (<= (to_rep1 (first (rt thestring))) (to_rep1
                                               (last (rt thestring))))
     (+ (- (to_rep1 (last (rt thestring))) (to_rep1 (first (rt thestring)))) 1)
     0) (ite (<= 1 (length thestring)) (+ (- (length thestring) 1) 1) 0))))
(check-sat)
(exit)
