;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort octet 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (octet octet) Bool)

(declare-fun dummy () octet)

(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))

(declare-fun to_rep (octet) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x octet)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_def
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (octet Int) (Array Int octet))

;; singleton_def
  (assert
  (forall ((v octet))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int octet) Int Int (Array Int octet) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort tdigit_index_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tdigit_index_typeB tdigit_index_typeB) Bool)

(declare-fun dummy1 () tdigit_index_typeB)

(declare-datatypes ()
((tdigit_index_typeB__ref
 (mk_tdigit_index_typeB__ref
 (tdigit_index_typeB__content tdigit_index_typeB)))))
(define-fun tdigit_index_typeB__ref___projection ((a tdigit_index_typeB__ref)) tdigit_index_typeB
  (tdigit_index_typeB__content a))

(declare-sort digit_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (digit_index_type digit_index_type) Bool)

(declare-fun dummy2 () digit_index_type)

(declare-datatypes ()
((digit_index_type__ref
 (mk_digit_index_type__ref (digit_index_type__content digit_index_type)))))
(define-fun digit_index_type__ref___projection ((a digit_index_type__ref)) digit_index_type
  (digit_index_type__content a))

(define-fun dynamic_invariant ((temp___expr_271 Int)
  (temp___is_init_268 Bool) (temp___skip_constant_269 Bool)
  (temp___do_toplevel_270 Bool)) Bool (=>
                                      (or (= temp___is_init_268 true)
                                      (<= 1 2147483647)) (in_range2
                                      temp___expr_271)))

(declare-fun to_rep1 (digit_index_type) Int)

(declare-fun of_rep1 (Int) digit_index_type)

;; inversion_axiom
  (assert
  (forall ((x digit_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x digit_index_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun to_rep2 (tdigit_index_typeB) Int)

(declare-fun of_rep2 (Int) tdigit_index_typeB)

;; inversion_axiom
  (assert
  (forall ((x tdigit_index_typeB))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x tdigit_index_typeB)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tdigit_index_typeB tdigit_index_typeB) Bool)

(declare-fun dummy3 () tdigit_index_typeB)

(declare-datatypes ()
((t21s__ref (mk_t21s__ref (t21s__content tdigit_index_typeB)))))
(define-fun t21s__ref___projection ((a t21s__ref)) tdigit_index_typeB
  (t21s__content a))

(declare-sort t 0)

(declare-fun first (t) tdigit_index_typeB)

(declare-fun last (t) tdigit_index_typeB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int octet)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int octet)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes () ((t22s__ref (mk_t22s__ref (t22s__content us_t)))))
(define-fun t22s__ref___projection ((a t22s__ref)) us_t (t22s__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__aco__math__very_longs__very_long__octet_length digit_index_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) digit_index_type
  (rec__aco__math__very_longs__very_long__octet_length a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__aco__math__very_longs__very_long__long_digits us_t)))))
(define-fun us_split_fields_Long_Digits__projection ((a us_split_fields)) us_t
  (rec__aco__math__very_longs__very_long__long_digits a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__aco__math__very_longs__very_long__octet_length
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__aco__math__very_longs__very_long__octet_length
                                                  (us_split_discrs1 b))))
                        (= (bool_eq1
                           (rec__aco__math__very_longs__very_long__long_digits
                           (us_split_fields1 a))
                           (rec__aco__math__very_longs__very_long__long_digits
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun aco__math__very_longs__very_long__octet_length__first__bit () Int)

(declare-fun aco__math__very_longs__very_long__octet_length__last__bit () Int)

(declare-fun aco__math__very_longs__very_long__octet_length__position () Int)

;; aco__math__very_longs__very_long__octet_length__first__bit_axiom
  (assert (<= 0 aco__math__very_longs__very_long__octet_length__first__bit))

;; aco__math__very_longs__very_long__octet_length__last__bit_axiom
  (assert
  (< aco__math__very_longs__very_long__octet_length__first__bit aco__math__very_longs__very_long__octet_length__last__bit))

;; aco__math__very_longs__very_long__octet_length__position_axiom
  (assert (<= 0 aco__math__very_longs__very_long__octet_length__position))

(declare-fun aco__math__very_longs__very_long__long_digits__first__bit () Int)

(declare-fun aco__math__very_longs__very_long__long_digits__last__bit () Int)

(declare-fun aco__math__very_longs__very_long__long_digits__position () Int)

;; aco__math__very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 aco__math__very_longs__very_long__long_digits__first__bit))

;; aco__math__very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< aco__math__very_longs__very_long__long_digits__first__bit aco__math__very_longs__very_long__long_digits__last__bit))

;; aco__math__very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 aco__math__very_longs__very_long__long_digits__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((very_long__ref (mk_very_long__ref (very_long__content us_rep)))))
(define-fun very_long__ref___projection ((a very_long__ref)) us_rep (very_long__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_282 us_rep)
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)) Bool (let ((temp___283 (rec__aco__math__very_longs__very_long__octet_length
                                                        (us_split_discrs1
                                                        temp___expr_282))))
                                      (and (dynamic_property1 1
                                      (to_rep1 temp___283)
                                      (first1
                                      (rec__aco__math__very_longs__very_long__long_digits
                                      (us_split_fields1 temp___expr_282)))
                                      (last1
                                      (rec__aco__math__very_longs__very_long__long_digits
                                      (us_split_fields1 temp___expr_282))))
                                      (and
                                      (= (first1
                                         (rec__aco__math__very_longs__very_long__long_digits
                                         (us_split_fields1 temp___expr_282))) 1)
                                      (= (last1
                                         (rec__aco__math__very_longs__very_long__long_digits
                                         (us_split_fields1 temp___expr_282)))
                                      (to_rep1 temp___283))))))

(declare-fun is_zero (us_rep) Bool)

(declare-fun is_zero__function_guard (Bool us_rep) Bool)

;; is_zero__post_axiom
  (assert true)

;; is_zero__def_axiom
  (assert
  (forall ((number us_rep))
  (! (= (= (is_zero number) true)
     (forall ((i Int))
     (=>
     (and (<= 1 i)
     (<= i (last1
           (rec__aco__math__very_longs__very_long__long_digits
           (us_split_fields1 number)))))
     (= (to_rep
        (let ((temp___341 (rec__aco__math__very_longs__very_long__long_digits
                          (us_split_fields1 number))))
        (select (to_array temp___341) i))) ((_ int2bv 8) 0))))) :pattern (
  (is_zero number)) )))

(declare-fun number () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (tdigit_index_typeB tdigit_index_typeB) Bool)

(declare-fun dummy6 () tdigit_index_typeB)

(declare-datatypes ()
((t106b__ref (mk_t106b__ref (t106b__content tdigit_index_typeB)))))
(define-fun t106b__ref___projection ((a t106b__ref)) tdigit_index_typeB
  (t106b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant2 ((temp___expr_219 (_ BitVec 8))
  (temp___is_init_216 Bool) (temp___skip_constant_217 Bool)
  (temp___do_toplevel_218 Bool)) Bool true)

(declare-fun digit_index () Int)

(declare-fun i () Int)

(declare-fun aco__math__very_longs__divide__get_msd__result () Int)

(declare-fun us () Int)

(declare-fun temp___1435 () Int)

(declare-fun temp___1434 () Int)

(declare-fun o () Int)

(declare-fun o1 () octet)

(declare-fun o2 () (_ BitVec 8))

(declare-fun o3 () Bool)

(declare-fun j () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Bool)

(declare-fun o6 () Bool)

(declare-fun j1 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Bool)

(declare-fun o9 () Int)

(declare-fun o10 () octet)

(declare-fun o11 () (_ BitVec 8))

(declare-fun o12 () Bool)

(declare-fun i1 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Bool)

(declare-fun o15 () Bool)

(declare-fun result () Int)

(declare-fun digit_index1 () Int)

(declare-fun result1 () Int)

(declare-fun i2 () Int)

(declare-fun result2 () Bool)

(declare-fun result3 () Int)

(declare-fun digit_index2 () Int)

(declare-fun digit_index3 () Int)

(declare-fun i3 () Int)

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () Int)

(declare-fun i4 () Int)

(declare-fun result7 () Bool)

(declare-fun result8 () Int)

(declare-fun digit_index4 () Int)

(declare-fun digit_index5 () Int)

(declare-fun i5 () Int)

(declare-fun digit_index6 () Int)

(declare-fun i6 () Int)

(declare-fun digit_index7 () Int)

(declare-fun i7 () Int)

(declare-fun digit_index8 () Int)

(declare-fun i8 () Int)

(declare-fun result9 () Int)

(declare-fun aco__math__very_longs__divide__get_msd__result1 () Int)

(declare-fun aco__math__very_longs__divide__get_msd__result2 () Int)

(declare-fun aco__math__very_longs__divide__get_msd__result3 () Int)

(declare-fun digit_index9 () Int)

(declare-fun i9 () Int)

(declare-fun aco__math__very_longs__divide__get_msd__result4 () Int)

(declare-fun digit_index10 () Int)

(declare-fun i10 () Int)

(declare-fun aco__math__very_longs__divide__get_msd__result5 () Int)

(declare-fun result10 () Bool)

(define-fun aco__math__very_longs__divide__get_msd__result6 () int__ref
  (mk_int__ref aco__math__very_longs__divide__get_msd__result4))

(define-fun i11 () int__ref (mk_int__ref i9))

(define-fun digit_index11 () int__ref (mk_int__ref digit_index9))

(define-fun aco__math__very_longs__divide__get_msd__result7 () int__ref
  (mk_int__ref aco__math__very_longs__divide__get_msd__result2))

(define-fun result11 () int__ref (mk_int__ref result9))

(define-fun i12 () int__ref (mk_int__ref i7))

(define-fun digit_index12 () int__ref (mk_int__ref digit_index7))

(define-fun i13 () int__ref (mk_int__ref i5))

(define-fun digit_index13 () int__ref (mk_int__ref digit_index5))

(define-fun result12 () int__ref (mk_int__ref result1))

(define-fun result13 () int__ref (mk_int__ref result))

(define-fun aco__math__very_longs__divide__get_msd__result8 () int__ref
  (mk_int__ref aco__math__very_longs__divide__get_msd__result))

(define-fun i14 () int__ref (mk_int__ref i))

(define-fun digit_index14 () int__ref (mk_int__ref digit_index))

;; H
  (assert (dynamic_invariant1 number true false true))

;; H
  (assert (not (= (is_zero number) true)))

;; H
  (assert
  (and
  (= us (to_rep1
        (rec__aco__math__very_longs__very_long__octet_length
        (us_split_discrs1 number))))
  (in_range2
  (to_rep1
  (rec__aco__math__very_longs__very_long__octet_length
  (us_split_discrs1 number))))))

;; H
  (assert (= result13 digit_index14))

;; H
  (assert (= digit_index1 1))

;; H
  (assert (in_range2 digit_index1))

;; H
  (assert (= result12 i14))

;; H
  (assert (= i2 1))

;; H
  (assert (<= 1 i2))

;; H
  (assert
  (<= i2 (to_rep2
         (last
         (rt
         (rec__aco__math__very_longs__very_long__long_digits
         (us_split_fields1 number)))))))

;; H
  (assert
  (and
  (<= (to_rep2
      (first
      (rt
      (rec__aco__math__very_longs__very_long__long_digits
      (us_split_fields1 number))))) i2)
  (<= i2 (to_rep2
         (last
         (rt
         (rec__aco__math__very_longs__very_long__long_digits
         (us_split_fields1 number))))))))

;; H
  (assert (= o i2))

;; H
  (assert
  (= o1 (select (elts
                (rec__aco__math__very_longs__very_long__long_digits
                (us_split_fields1 number))) o)))

;; H
  (assert (= o2 (to_rep o1)))

;; H
  (assert (= o3 (ite (= o2 ((_ int2bv 8) 0)) true false)))

;; H
  (assert (= result2 (ite (not (= o3 true)) true false)))

;; H
  (assert (=> (= result2 true) (= digit_index1 result3)))

;; H
  (assert (=> (= result2 true) (= digit_index2 i2)))

;; H
  (assert (=> (not (= result2 true)) (= digit_index2 digit_index1)))

;; H
  (assert
  (or
  (not
  (= (to_rep
     (select (elts
             (rec__aco__math__very_longs__very_long__long_digits
             (us_split_fields1 number))) digit_index3)) ((_ int2bv 8) 0)))
  (exists ((j2 Int))
  (and
  (and (<= (+ i3 1) j2)
  (<= j2 (to_rep2
         (last
         (rt
         (rec__aco__math__very_longs__very_long__long_digits
         (us_split_fields1 number)))))))
  (not
  (= (to_rep
     (select (elts
             (rec__aco__math__very_longs__very_long__long_digits
             (us_split_fields1 number))) j2)) ((_ int2bv 8) 0)))))))

;; H
  (assert
  (=> (< digit_index3 i3)
  (forall ((j2 Int))
  (=> (and (<= (+ digit_index3 1) j2) (<= j2 i3))
  (= (to_rep
     (select (elts
             (rec__aco__math__very_longs__very_long__long_digits
             (us_split_fields1 number))) j2)) ((_ int2bv 8) 0))))))

;; H
  (assert
  (and
  (and (=> (<= 1 2147483647) (in_range2 digit_index3))
  (=>
  (<= 1 (to_rep2
        (last
        (rt
        (rec__aco__math__very_longs__very_long__long_digits
        (us_split_fields1 number))))))
  (dynamic_property2 1
  (to_rep2
  (last
  (rt
  (rec__aco__math__very_longs__very_long__long_digits
  (us_split_fields1 number))))) i3)))
  (and (<= 1 i3)
  (<= i3 (to_rep2
         (last
         (rt
         (rec__aco__math__very_longs__very_long__long_digits
         (us_split_fields1 number)))))))))

;; H
  (assert (< digit_index3 i3))

(assert
;; WP_parameter_def
 ;; File "aco-math-very_longs.ads", line 16, characters 0-0
  (not (in_range1 (+ digit_index3 1))))
(check-sat)
(exit)
