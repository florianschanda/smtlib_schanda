;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-fun dummy2 () word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x word32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (big_int_range big_int_range) Bool)

(declare-fun dummy3 () big_int_range)

(declare-datatypes ()
((big_int_range__ref
 (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int word32)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes ()
((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun a () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun a_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun a_last () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun b__first () integer)

(declare-fun b__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun b_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes () ((t17b__ref (mk_t17b__ref (t17b__content integer)))))
(define-fun t17b__ref___projection ((a1 t17b__ref)) integer (t17b__content
                                                            a1))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

(define-fun dynamic_invariant4 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-fun b () (Array Int word32))

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun temp___566 () (Array Int word32))

(declare-fun temp___564 () Int)

(declare-fun temp___562 () (Array Int word32))

(declare-fun temp___558 () (Array Int word32))

(declare-fun k () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Bool)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun temp___565 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () word32)

(declare-fun o17 () (_ BitVec 32))

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () Bool)

(declare-fun o24 () Bool)

(declare-fun o25 () Int)

(declare-fun o26 () word32)

(declare-fun o27 () Int)

(declare-fun o28 () word32)

(declare-fun o29 () (_ BitVec 32))

(declare-fun o30 () (_ BitVec 32))

(declare-fun o31 () Bool)

(declare-fun o32 () Int)

(declare-fun o33 () Int)

(declare-fun temp___556 () Int)

(declare-fun o34 () Int)

(declare-fun o35 () word32)

(declare-fun o36 () (_ BitVec 32))

(declare-fun o37 () word32)

(declare-fun o38 () Int)

(declare-fun o39 () (Array Int word32))

(declare-fun k1 () Int)

(declare-fun o40 () Int)

(declare-fun o41 () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Int)

(declare-fun o44 () Int)

(declare-fun o45 () Int)

(declare-fun o46 () Int)

(declare-fun o47 () Bool)

(declare-fun o48 () Int)

(declare-fun o49 () Int)

(declare-fun temp___559 () Int)

(declare-fun o50 () Int)

(declare-fun o51 () word32)

(declare-fun o52 () (_ BitVec 32))

(declare-fun o53 () Int)

(declare-fun o54 () Int)

(declare-fun o55 () Int)

(declare-fun o56 () Int)

(declare-fun o57 () Int)

(declare-fun o58 () Int)

(declare-fun o59 () Int)

(declare-fun o60 () Bool)

(declare-fun o61 () Bool)

(declare-fun o62 () Int)

(declare-fun o63 () word32)

(declare-fun o64 () Int)

(declare-fun o65 () word32)

(declare-fun o66 () (_ BitVec 32))

(declare-fun o67 () (_ BitVec 32))

(declare-fun o68 () Bool)

(declare-fun k2 () Int)

(declare-fun o69 () Int)

(declare-fun o70 () Int)

(declare-fun o71 () Int)

(declare-fun o72 () Bool)

(declare-fun o73 () Int)

(declare-fun o74 () Int)

(declare-fun temp___570 () Int)

(declare-fun o75 () Int)

(declare-fun o76 () word32)

(declare-fun o77 () (_ BitVec 32))

(declare-fun o78 () Int)

(declare-fun o79 () Int)

(declare-fun o80 () Int)

(declare-fun o81 () Bool)

(declare-fun o82 () Bool)

(declare-fun o83 () Int)

(declare-fun o84 () word32)

(declare-fun o85 () Int)

(declare-fun o86 () word32)

(declare-fun o87 () (_ BitVec 32))

(declare-fun o88 () (_ BitVec 32))

(declare-fun o89 () Bool)

(declare-fun b1 () (Array Int word32))

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun b2 () (Array Int word32))

(declare-fun i2 () Int)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(declare-fun result3 () (Array Int word32))

(declare-fun b3 () (Array Int word32))

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () Int)

(declare-fun i3 () Int)

(declare-fun b4 () (Array Int word32))

(declare-fun i4 () Int)

(declare-fun b5 () (Array Int word32))

(declare-fun i5 () Int)

(declare-fun b6 () (Array Int word32))

(declare-fun i6 () Int)

(declare-fun b7 () (Array Int word32))

(declare-fun i7 () Int)

(declare-fun b8 () (Array Int word32))

(declare-fun i8 () Int)

(declare-fun b9 () (Array Int word32))

(declare-fun i9 () Int)

(declare-fun b10 () (Array Int word32))

(declare-fun i10 () Int)

(declare-fun b11 () (Array Int word32))

(declare-fun i11 () Int)

(declare-fun result7 () Bool)

(declare-fun result8 () Bool)

(define-fun i12 () int__ref (mk_int__ref i10))

(define-fun b12 () map__ref (mk_map__ref b10))

(define-fun i13 () int__ref (mk_int__ref i8))

(define-fun b13 () map__ref (mk_map__ref b8))

(define-fun i14 () int__ref (mk_int__ref i6))

(define-fun b14 () map__ref (mk_map__ref b6))

(define-fun i15 () int__ref (mk_int__ref i4))

(define-fun b15 () map__ref (mk_map__ref b4))

(define-fun result9 () int__ref (mk_int__ref result))

(define-fun i16 () int__ref (mk_int__ref i))

(define-fun b16 () map__ref (mk_map__ref b))

;; H
  (assert (dynamic_invariant1 a true false true))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep b__first) (to_rep b__last)))

;; H
  (assert (in_range2 b_first))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (<= (to_rep (first (rt a))) a_first)
  (<= a_first (to_rep (last (rt a)))))
  (and (<= (to_rep (first (rt a))) a_last)
  (<= a_last (to_rep (last (rt a)))))) (<= a_first a_last))
  (and (<= (to_rep b__first) b_first) (<= b_first (to_rep b__last))))
  (and (<= (to_rep b__first) (+ b_first (- a_last a_first)))
  (<= (+ b_first (- a_last a_first)) (to_rep b__last)))))

;; H
  (assert (= result9 i16))

;; H
  (assert (= i1 a_first))

;; H
  (assert (<= a_first i1))

;; H
  (assert (<= i1 a_last))

;; H
  (assert
  (forall ((k3 Int))
  (=> (and (<= (to_rep b__first) k3) (<= k3 (to_rep b__last)))
  (and
  (=> (and (<= b_first k3) (<= k3 (- (- (+ b_first i2) a_first) 1)))
  (= (to_rep1 (select b2 k3)) (to_rep1
                              (select (elts a) (- (+ a_first k3) b_first)))))
  (=> (=> (<= b_first k3) (not (<= k3 (- (- (+ b_first i2) a_first) 1))))
  (= (to_rep1 (select b2 k3)) (to_rep1 (select b k3))))))))

;; H
  (assert
  (and (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2))
  (and (<= a_first i2) (<= i2 a_last))))

;; H
  (assert (<= (to_rep b__first) k))

;; H
  (assert (<= k (to_rep b__last)))

;; H
  (assert (and (= o18 (+ b_first i2)) (in_range1 (+ b_first i2))))

;; H
  (assert (= o19 (- o18 a_first)))

;; H
  (assert (and (= o20 o19) (in_range1 o19)))

;; H
  (assert (= o21 (- o20 1)))

;; H
  (assert (and (= o22 o21) (in_range1 o21)))

;; H
  (assert (= o23 (ite (<= k o22) true false)))

;; H
  (assert (= o24 (ite (<= b_first k) o23 false)))

;; H
  (assert (= result1 (ite (not (= o24 true)) true false)))

;; H
  (assert
  (=> (= result1 true)
  (and (<= (to_rep b__first) k) (<= k (to_rep b__last)))))

;; H
  (assert (=> (= result1 true) (= o27 k)))

;; H
  (assert (=> (= result1 true) (= o28 (select b o27))))

;; H
  (assert (=> (= result1 true) (= o29 (to_rep1 o28))))

;; H
  (assert
  (=> (= result1 true)
  (and (<= (to_rep b__first) k) (<= k (to_rep b__last)))))

;; H
  (assert (=> (= result1 true) (= o25 k)))

;; H
  (assert (=> (= result1 true) (= o26 (select b2 o25))))

;; H
  (assert (=> (= result1 true) (= o30 (to_rep1 o26))))

;; H
  (assert (=> (= result1 true) (= o31 (ite (= o30 o29) true false))))

;; H
  (assert (=> (not (= result1 true)) (= o31 (of_int 1))))

;; H
  (assert (and (= o7 (+ b_first i2)) (in_range1 (+ b_first i2))))

;; H
  (assert (= o8 (- o7 a_first)))

;; H
  (assert (and (= o9 o8) (in_range1 o8)))

;; H
  (assert (= o10 (- o9 1)))

;; H
  (assert (and (= o11 o10) (in_range1 o10)))

;; H
  (assert (= o12 (ite (<= k o11) true false)))

;; H
  (assert (= result2 (ite (<= b_first k) o12 false)))

;; H
  (assert (= result2 true))

;; H
  (assert (and (= o13 (+ a_first k)) (in_range1 (+ a_first k))))

;; H
  (assert (= o14 (- o13 b_first)))

;; H
  (assert (and (= temp___565 o14) (in_range1 o14)))

;; H
  (assert
  (and (<= (to_rep (first (rt a))) temp___565)
  (<= temp___565 (to_rep (last (rt a))))))

;; H
  (assert (= o15 temp___565))

;; H
  (assert (= o16 (select (elts a) o15)))

;; H
  (assert (= o17 (to_rep1 o16)))

(assert
;; WP_parameter_def
 ;; File "lsc-bignum.adb", line 40, characters 0-0
  (not (<= (to_rep b__first) k)))
(check-sat)
(exit)
