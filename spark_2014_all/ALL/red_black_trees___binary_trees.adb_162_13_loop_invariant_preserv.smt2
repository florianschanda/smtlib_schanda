;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index_type index_type) Bool)

(declare-fun dummy () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range1
                                      temp___expr_150)))

(declare-sort extended_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (extended_index_type extended_index_type) Bool)

(declare-fun dummy1 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_156)))

(declare-fun to_rep (extended_index_type) Int)

(declare-fun of_rep (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort position_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (position_type position_type) Bool)

(declare-fun dummy2 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep1 (position_type) Int)

(declare-fun of_rep1 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort direction 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (direction direction) Bool)

(declare-fun dummy3 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq4 (us_rep us_rep) Bool)

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (count_type count_type) Bool)

(declare-fun dummy5 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_144)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_199 us_rep)
  (temp___skip_top_level_200 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_200 true))
                                         (= (length temp___expr_199) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length container)) )))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

(declare-sort element_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (element_type element_type) Bool)

(declare-fun dummy6 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_186 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (=>
                                      (or (= temp___is_init_183 true)
                                      (<= 0 1)) (in_range6 temp___expr_186)))

(define-fun ole ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-fun add (us_rep Int) us_rep)

(declare-fun add__function_guard (us_rep us_rep Int) Bool)

;; add__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((new_item Int))
  (! (=>
     (and (dynamic_invariant3 new_item true true true)
     (and (< (length container) 2147483647) (< (last container) 2147483647)))
     (let ((result (add container new_item)))
     (and (= (length result) (+ (length container) 1))
     (and (= (get result (last result)) new_item)
     (= (ole container result) true))))) :pattern ((add container new_item)) ))))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq7 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq4
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_205 us_rep1)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true)
                                      (=> (= temp___is_init_202 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_205))) 100))))

(define-fun default_initial_assumption1 ((temp___expr_207 us_rep1)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_207))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_207)) (of_int 0))))

(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___211))) 100))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq8 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq7 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq7 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(define-fun dynamic_invariant5 ((temp___expr_216 (Array Int us_rep1))
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int))
                                      (=>
                                      (and (<= 1 temp___217)
                                      (<= temp___217 100))
                                      (=> (= temp___is_init_213 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_216 temp___217)))) 100)))))

(define-fun default_initial_assumption2 ((temp___expr_219 (Array Int us_rep1))
  (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int))
                                         (=>
                                         (and (<= 1 temp___221)
                                         (<= temp___221 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221))) 
                                         (of_int 0))))))

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(define-fun dynamic_invariant6 ((temp___expr_168 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (or (= temp___is_init_165 true)
                                      (<= 0 1)) (in_range4 temp___expr_168)))

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2)) ))))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq9 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy8 () us_rep2)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq10 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq9 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq10 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq9 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy9 () (Array Int us_rep2))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int us_rep2)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep2)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int us_rep2)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq9 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq11 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq10
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq10 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy10 () us_rep3)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content
                                                               a))

(declare-fun size (us_rep3) Int)

(declare-fun size__function_guard (Int us_rep3) Bool)

(declare-fun tree_structure (us_rep3) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)

(define-fun default_initial_assumption3 ((temp___expr_275 us_rep3)
  (temp___skip_top_level_276 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_275))) 0)
                                         (forall ((temp___278 Int))
                                         (=>
                                         (and (<= 1 temp___278)
                                         (<= temp___278 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_276 true))
                                         (= (size temp___expr_275) 0))))

(define-fun type_invariant ((temp___281 us_rep3)) Bool (= (tree_structure
                                                          temp___281) true))

(declare-fun valid_root (us_rep3 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (and (dynamic_invariant i true true true) (type_invariant f))
     (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root
                                                                    f i)) ))))

;; valid_root__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (= (= (valid_root f i) true)
     (and (<= i (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___288 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___288 i))))) 2))) :pattern ((valid_root f i)) ))))

(declare-fun parent (us_rep3 Int) Int)

(declare-fun parent__function_guard (Int us_rep3 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (and (dynamic_invariant i true true true) (type_invariant f))
     (let ((result (parent f i)))
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false
     true)))) :pattern ((parent f i)) ))))

;; parent__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true)
     (= (parent f i) (to_rep
                     (rec__binary_trees__cell__parent
                     (us_split_fields3
                     (let ((temp___292 (rec__binary_trees__forest__c
                                       (us_split_fields5 f))))
                     (select temp___292 i))))))) :pattern ((parent f i)) ))))

(declare-fun position (us_rep3 Int) Int)

(declare-fun position__function_guard (Int us_rep3 Int) Bool)

;; position__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (and (dynamic_invariant i true true true) (type_invariant f))
     (not (= (parent f i) 0))) (dynamic_invariant6 (position f i) true false
     true)) :pattern ((position f i)) ))))

;; position__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true)
     (= (position f i) (to_rep1
                       (rec__binary_trees__cell__position
                       (us_split_fields3
                       (let ((temp___296 (rec__binary_trees__forest__c
                                         (us_split_fields5 f))))
                       (select temp___296 i))))))) :pattern ((position f i)) ))))

(declare-fun f () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun root () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort element_type1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (element_type1 element_type1) Bool)

(declare-fun dummy11 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_3__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq13 (us_rep4 us_rep4) Bool)

(declare-fun user_eq12 (us_rep4 us_rep4) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun dummy12 () us_rep4)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep4)))))
(define-fun set__ref_2__projection ((a set__ref)) us_rep4 (set__content a))

(declare-fun is_empty (us_rep4) Bool)

(declare-fun is_empty__function_guard (Bool us_rep4) Bool)

(define-fun default_initial_assumption4 ((temp___expr_431 us_rep4)
  (temp___skip_top_level_432 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_432 true))
                                         (= (is_empty temp___expr_431) true)))

(declare-fun contains (us_rep4 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep4 Int) Bool)

(define-fun dynamic_invariant7 ((temp___expr_424 Int)
  (temp___is_init_421 Bool) (temp___skip_constant_422 Bool)
  (temp___do_toplevel_423 Bool)) Bool (=>
                                      (or (= temp___is_init_421 true)
                                      (<= 1 100)) (in_range7
                                      temp___expr_424)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((item Int))
  (! (=> (dynamic_invariant7 item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range7 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

(declare-fun length1 (us_rep4) Int)

(declare-fun length__function_guard1 (Int us_rep4) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant2 (length1 container)
  true false true) :pattern ((length1 container)) )))

(declare-fun ole1 (us_rep4 us_rep4) Bool)

(declare-fun ole__function_guard1 (Bool us_rep4 us_rep4) Bool)

(declare-fun included_except (us_rep4 us_rep4 Int) Bool)

(declare-fun included_except__function_guard (Bool us_rep4 us_rep4 Int) Bool)

(declare-fun remove (us_rep4 Int) us_rep4)

(declare-fun remove__function_guard (us_rep4 us_rep4 Int) Bool)

;; remove__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((item Int))
  (! (=>
     (and (dynamic_invariant7 item true true true)
     (= (contains container item) true))
     (let ((result (remove container item)))
     (and
     (and
     (and (= (length1 result) (- (length1 container) 1))
     (not (= (contains result item) true))) (= (ole1 result container) true))
     (= (included_except container result item) true)))) :pattern ((remove
                                                                   container
                                                                   item)) ))))

(declare-fun all_indexes (tuple0) us_rep4)

(declare-fun all_indexes__function_guard (us_rep4 tuple0) Bool)

;; all_indexes__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (all_indexes us_void_param)))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100)) (= (contains result i) true)))
     (= (length1 result) 100))) :pattern ((all_indexes us_void_param)) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int Bool))))))
(declare-fun slide2 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq14 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq14 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq14 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq14 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq14 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select 
  (notb a a_first a_last) i)) )))))

(declare-fun next ((Array Int Bool)) Int)

(declare-fun next__function_guard (Int (Array Int Bool)) Bool)

;; next__post_axiom
  (assert
  (forall ((todo (Array Int Bool)))
  (! (let ((result (next todo)))
     (and
     (ite (= result 0)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100)) (not (= (select todo i) true))))
     (= (select todo result) true)) (dynamic_invariant1 result true false
     true))) :pattern ((next todo)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun binary_trees__model__todo__aggregate_def (Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___588 Bool))
  (forall ((temp___589 Int))
  (= (select (binary_trees__model__todo__aggregate_def temp___588) temp___589) temp___588))))

;; size__post_axiom
  (assert
  (forall ((f1 us_rep3))
  (! (=> (type_invariant f1) (dynamic_invariant1 (size f1) true false true)) :pattern (
  (size f1)) )))

;; size__def_axiom
  (assert
  (forall ((f1 us_rep3))
  (! (= (size f1) (to_rep
                  (rec__binary_trees__forest__s (us_split_fields5 f1)))) :pattern (
  (size f1)) )))

(define-fun default_initial_assumption5 ((temp___expr_259 us_rep2)
  (temp___skip_top_level_260 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_259))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_259))) 2)))

(define-fun default_initial_assumption6 ((temp___expr_266 (Array Int us_rep2))
  (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int))
                                         (=>
                                         (and (<= 1 temp___268)
                                         (<= temp___268 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

;; tree_structure__def_axiom
  (assert
  (forall ((f1 us_rep3))
  (! (= (= (tree_structure f1) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (forall ((i Int))
     (=>
     (and
     (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields5 f1))) 1) i)
     (<= i 100))
     (= (bool_eq9
        (let ((temp___397 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___397 i))
        (mk___rep1
        (mk___split_fields1 (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true)))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__parent
           (us_split_fields3
           (let ((temp___398 (rec__binary_trees__forest__c
                             (us_split_fields5 f1))))
           (select temp___398 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__parent
         (us_split_fields3
         (let ((temp___398 (rec__binary_trees__forest__c
                           (us_split_fields5 f1))))
         (select temp___398 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields5 f1))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__left
           (us_split_fields3
           (let ((temp___399 (rec__binary_trees__forest__c
                             (us_split_fields5 f1))))
           (select temp___399 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__left
         (us_split_fields3
         (let ((temp___399 (rec__binary_trees__forest__c
                           (us_split_fields5 f1))))
         (select temp___399 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields5 f1))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__right
           (us_split_fields3
           (let ((temp___400 (rec__binary_trees__forest__c
                             (us_split_fields5 f1))))
           (select temp___400 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__right
         (us_split_fields3
         (let ((temp___400 (rec__binary_trees__forest__c
                           (us_split_fields5 f1))))
         (select temp___400 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields5 f1))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___402 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___402 i))))) 2)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___401 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___401 i))))) 0)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields3
        (let ((temp___407 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___407 i))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___403 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___403 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields3
                           (let ((temp___404 (rec__binary_trees__forest__c
                                             (us_split_fields5 f1))))
                           (select temp___404 i)))))))))) 0)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___405 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___405 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields3
                           (let ((temp___406 (rec__binary_trees__forest__c
                                             (us_split_fields5 f1))))
                           (select temp___406 i)))))))))) i))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields3
        (let ((temp___412 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___412 i))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___408 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___408 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields3
                           (let ((temp___409 (rec__binary_trees__forest__c
                                             (us_split_fields5 f1))))
                           (select temp___409 i)))))))))) 1)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___410 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___410 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields3
                           (let ((temp___411 (rec__binary_trees__forest__c
                                             (us_split_fields5 f1))))
                           (select temp___411 i)))))))))) i))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___415 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___415 i))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___416 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___416 i))))) 0))
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields3
        (let ((temp___413 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___413 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields3
                           (let ((temp___414 (rec__binary_trees__forest__c
                                             (us_split_fields5 f1))))
                           (select temp___414 i)))))))))) i)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___419 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___419 i))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___420 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___420 i))))) 1))
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields3
        (let ((temp___417 (rec__binary_trees__forest__c
                          (us_split_fields5 f1))))
        (select temp___417 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields3
                           (let ((temp___418 (rec__binary_trees__forest__c
                                             (us_split_fields5 f1))))
                           (select temp___418 i)))))))))) i)))))) :pattern (
  (tree_structure f1)) )))

(define-fun dynamic_invariant8 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 0 2)) (in_range3 temp___expr_162)))

(declare-sort extended_index 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (extended_index extended_index) Bool)

(declare-fun dummy13 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant9 ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_192)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position1 Int))
  (! (=>
     (and (dynamic_invariant9 position1 true true true)
     (and (<= 1 position1) (<= position1 (last container))))
     (dynamic_invariant3 (get container position1) true false true)) :pattern (
  (get container position1)) ))))

;; ole__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (ole1 left right) true)
     (forall ((item Int))
     (=> (and (in_range7 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range7 item) (= (contains container item) true)))))
     (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty
                                                               container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((item Int))
  (! (=> (dynamic_invariant7 item true true true)
     (= (= (included_except left right item) true)
     (forall ((e Int))
     (=> (and (in_range7 e) (= (contains left e) true))
     (or (= (contains right e) true) (= e item)))))) :pattern ((included_except
                                                               left right
                                                               item)) ))))

(declare-fun todo () (Array Int Bool))

(declare-fun unseen () us_rep4)

(declare-fun r () (Array Int us_rep1))

(declare-fun i () Int)

(declare-fun o () us_rep4)

(declare-fun o1 () Int)

(declare-fun o2 () us_rep)

(declare-fun o3 () Bool)

(declare-fun o4 () (Array Int us_rep1))

(declare-fun o5 () Int)

(declare-fun o6 () us_rep4)

(declare-fun o7 () Int)

(declare-fun o8 () extended_index_type)

(declare-fun o9 () extended_index_type)

(declare-fun o10 () extended_index_type)

(declare-fun o11 () position_type)

(declare-fun o12 () extended_index_type)

(declare-fun o13 () extended_index_type)

(declare-fun o14 () extended_index_type)

(declare-fun o15 () position_type)

(declare-fun o16 () extended_index_type)

(declare-fun o17 () Int)

(declare-fun o18 () us_rep)

(declare-fun o19 () Bool)

(declare-fun o20 () Int)

(declare-fun o21 () (Array Int us_rep1))

(declare-fun o22 () Int)

(declare-fun o23 () extended_index_type)

(declare-fun o24 () extended_index_type)

(declare-fun o25 () extended_index_type)

(declare-fun o26 () position_type)

(declare-fun o27 () us_split_fields2)

(declare-fun o28 () extended_index_type)

(declare-fun temp___599 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () us_rep1)

(declare-fun o31 () us_split_fields)

(declare-fun o32 () us_rep)

(declare-fun o33 () us_rep)

(declare-fun o34 () us_split_fields)

(declare-fun temp___601 () us_rep1)

(declare-fun o35 () us_rep1)

(declare-fun o36 () Int)

(declare-fun o37 () (Array Int us_rep1))

(declare-fun o38 () Int)

(declare-fun o39 () (Array Int Bool))

(declare-fun o40 () Int)

(declare-fun o41 () us_rep2)

(declare-fun o42 () us_split_fields2)

(declare-fun o43 () extended_index_type)

(declare-fun o44 () Int)

(declare-fun o45 () us_rep1)

(declare-fun o46 () Int)

(declare-fun o47 () (Array Int us_rep1))

(declare-fun o48 () Int)

(declare-fun o49 () us_rep2)

(declare-fun o50 () us_split_fields2)

(declare-fun o51 () extended_index_type)

(declare-fun temp___606 () Int)

(declare-fun o52 () Int)

(declare-fun o53 () us_rep1)

(declare-fun o54 () us_split_fields)

(declare-fun o55 () us_rep)

(declare-fun o56 () us_rep)

(declare-fun o57 () us_split_fields)

(declare-fun temp___608 () us_rep1)

(declare-fun o58 () us_rep1)

(declare-fun o59 () Int)

(declare-fun o60 () (Array Int us_rep1))

(declare-fun o61 () Int)

(declare-fun o62 () (Array Int Bool))

(declare-fun o63 () Int)

(declare-fun o64 () (Array Int Bool))

(declare-fun o65 () Int)

(declare-fun result () map__ref2)

(declare-fun todo1 () (Array Int Bool))

(declare-fun result1 () set__ref)

(declare-fun unseen1 () us_rep4)

(declare-fun result2 () int__ref)

(declare-fun i1 () Int)

(declare-fun result3 () map__ref2)

(declare-fun todo2 () (Array Int Bool))

(declare-fun result4 () map__ref)

(declare-fun r1 () (Array Int us_rep1))

(declare-fun todo3 () (Array Int Bool))

(declare-fun unseen2 () us_rep4)

(declare-fun r2 () (Array Int us_rep1))

(declare-fun i2 () Int)

(declare-fun j () Int)

(declare-fun temp___644 () Int)

(declare-fun result5 () int__ref)

(declare-fun temp___6441 () Int)

(declare-fun result6 () set__ref)

(declare-fun unseen3 () us_rep4)

(declare-fun result7 () int__ref)

(declare-fun j1 () Int)

(declare-fun result8 () map__ref)

(declare-fun r3 () (Array Int us_rep1))

(declare-fun result9 () map__ref)

(declare-fun r4 () (Array Int us_rep1))

(declare-fun result10 () map__ref2)

(declare-fun todo4 () (Array Int Bool))

(declare-fun result11 () int__ref)

(declare-fun j2 () Int)

(declare-fun result12 () map__ref)

(declare-fun r5 () (Array Int us_rep1))

(declare-fun result13 () map__ref)

(declare-fun r6 () (Array Int us_rep1))

(declare-fun result14 () map__ref2)

(declare-fun todo5 () (Array Int Bool))

(declare-fun result15 () map__ref2)

(declare-fun todo6 () (Array Int Bool))

(declare-fun result16 () int__ref)

(declare-fun i3 () Int)

;; H
  (assert (in_range1 root))

;; H
  (assert (= (tree_structure f) true))

;; H
  (assert (= (valid_root f root) true))

;; H
  (assert (= result (mk_map__ref2 todo)))

;; H
  (assert (= todo1 (binary_trees__model__todo__aggregate_def (of_int 0))))

;; H
  (assert
  (and (= o (all_indexes Tuple0))
  (and
  (forall ((i4 Int))
  (=> (and (<= 1 i4) (<= i4 100)) (= (contains o i4) true)))
  (= (length1 o) 100))))

;; H
  (assert (= result1 (mk_set__ref unseen)))

;; H
  (assert (= unseen1 o))

;; H
  (assert (default_initial_assumption2 r false))

;; H
  (assert (dynamic_invariant5 r false false true))

;; H
  (assert (and (= o1 root) (in_range2 root)))

;; H
  (assert (= result2 (mk_int__ref i)))

;; H
  (assert (= i1 o1))

;; H
  (assert (in_range2 i1))

;; H
  (assert (= result3 (mk_map__ref2 todo1)))

;; H
  (assert (= todo2 (store todo1 root (of_int 1))))

;; H
  (assert
  (< (length
     (rec__tree_model__path_type__a (us_split_fields1 (select r root)))) 100))

;; H
  (assert
  (= (rec__tree_model__path_type__a (us_split_fields1 (select r root))) 
  o2))

;; H
  (assert (= (of_int 1) o3))

;; H
  (assert (= o4 (store r root (mk___rep (mk___split_fields o2 o3)))))

;; H
  (assert (= result4 (mk_map__ref r)))

;; H
  (assert (= r1 o4))

;; H
  (assert (not (= i1 0)))

;; H
  (assert (= (select todo3 i2) true))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=> (= (select todo3 j3) true)
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)))))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=> (= (select todo3 j3) true)
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k 100))
  (=>
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 k))) true)
  (not
  (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select r2 j3)))
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 k)))) true)))))))))

;; H
  (assert
  (and
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 root))) true)
  (= (length
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 root)))) 0)))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)
  (not (= j3 root)))
  (and
  (not
  (= (to_rep
     (rec__binary_trees__cell__parent
     (us_split_fields3
     (select (rec__binary_trees__forest__c (us_split_fields5 f)) j3)))) 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select r2 (to_rep
                (rec__binary_trees__cell__parent
                (us_split_fields3
                (select (rec__binary_trees__forest__c (us_split_fields5 f)) j3))))))) true))))))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (ite (and
       (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)
       (not (= j3 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select r2 (to_rep
                (rec__binary_trees__cell__parent
                (us_split_fields3
                (select (rec__binary_trees__forest__c (us_split_fields5 f)) j3)))))))
     (to_rep1
     (rec__binary_trees__cell__position
     (us_split_fields3
     (select (rec__binary_trees__forest__c (us_split_fields5 f)) j3))))
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 j3)))) true)
  (= (length
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 j3)))) 0)))))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=> (not (= j3 root))
  (ite (and
       (not
       (= (to_rep
          (rec__binary_trees__cell__parent
          (us_split_fields3
          (select (rec__binary_trees__forest__c (us_split_fields5 f)) j3)))) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select r2 (to_rep
                     (rec__binary_trees__cell__parent
                     (us_split_fields3
                     (select (rec__binary_trees__forest__c
                             (us_split_fields5 f)) j3))))))) true))
  (or
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)
  (= (select todo3 (to_rep
                   (rec__binary_trees__cell__parent
                   (us_split_fields3
                   (select (rec__binary_trees__forest__c
                           (us_split_fields5 f)) j3))))) true))
  (not
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)))))))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)
  (not (= j3 root)))
  (not
  (= (select todo3 (to_rep
                   (rec__binary_trees__cell__parent
                   (us_split_fields3
                   (select (rec__binary_trees__forest__c
                           (us_split_fields5 f)) j3))))) true))))))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true)
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 k))) true)
  (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select r2 k)))
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 j3)))) true))
  (= j3 k))))))))

;; H
  (assert
  (and
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 root))) true)
  (= (length
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 root)))) 0)))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (<= (length
      (rec__tree_model__path_type__a (us_split_fields1 (select r2 j3)))) (- 100 
  (length1 unseen2))))))

;; H
  (assert
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (= (= (contains unseen2 j3) true)
  (or
  (not
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r2 j3))) true))
  (= (select todo3 j3) true))))))

;; H
  (assert
  (and
  (and (dynamic_invariant5 r2 false true true)
  (=> (<= 0 100) (in_range2 i2))) (not (= i2 0))))

;; H
  (assert (= result5 (mk_int__ref temp___644)))

;; H
  (assert (= temp___6441 (length1 unseen2)))

;; H
  (assert (and (= o5 i2) (in_range7 i2)))

;; H
  (assert
  (and (= o6 (remove unseen2 o5))
  (and
  (and
  (and (= (length1 o6) (- (length1 unseen2) 1))
  (not (= (contains o6 o5) true))) (= (ole1 o6 unseen2) true))
  (= (included_except unseen2 o6 o5) true))))

;; H
  (assert (= result6 (mk_set__ref unseen2)))

;; H
  (assert (= unseen3 o6))

;; H
  (assert (=> (<= 0 100) (in_range2 j)))

;; H
  (assert (and (<= 1 i2) (<= i2 100)))

;; H
  (assert (= o7 i2))

;; H
  (assert
  (= (mk___rep1 (mk___split_fields1 o8 o9 o10 o11)) (select (rec__binary_trees__forest__c
                                                            (us_split_fields5
                                                            f)) o7)))

;; H
  (assert (= o8 o12))

;; H
  (assert (= o9 o13))

;; H
  (assert (= o10 o14))

;; H
  (assert (= o11 o15))

;; H
  (assert (= o16 o12))

;; H
  (assert (= o17 (to_rep o16)))

;; H
  (assert (= result7 (mk_int__ref j)))

;; H
  (assert (= j1 o17))

;; H
  (assert (=> (not (= j1 0)) (< 0 (length1 unseen3))))

;; H
  (assert
  (=> (not (= j1 0))
  (< (length
     (rec__tree_model__path_type__a (us_split_fields1 (select r2 j1)))) 100)))

;; H
  (assert
  (=> (not (= j1 0))
  (= (rec__tree_model__path_type__a (us_split_fields1 (select r2 j1))) 
  o18)))

;; H
  (assert (=> (not (= j1 0)) (= (of_int 1) o19)))

;; H
  (assert (=> (not (= j1 0)) (and (<= 1 j1) (<= j1 100))))

;; H
  (assert (=> (not (= j1 0)) (= o20 j1)))

;; H
  (assert
  (=> (not (= j1 0))
  (= o21 (store r2 o20 (mk___rep (mk___split_fields o18 o19))))))

;; H
  (assert (=> (not (= j1 0)) (= result8 (mk_map__ref r2))))

;; H
  (assert (=> (not (= j1 0)) (= r3 o21)))

;; H
  (assert (=> (not (= j1 0)) (and (<= 1 j1) (<= j1 100))))

;; H
  (assert (=> (not (= j1 0)) (= o22 j1)))

;; H
  (assert
  (=> (not (= j1 0))
  (= (mk___rep1 (mk___split_fields1 o23 o24 o25 o26)) (select (rec__binary_trees__forest__c
                                                              (us_split_fields5
                                                              f)) o22))))

;; H
  (assert (=> (not (= j1 0)) (= o27 (mk___split_fields1 o23 o24 o25 o26))))

;; H
  (assert (=> (not (= j1 0)) (= o28 (rec__binary_trees__cell__parent o27))))

;; H
  (assert (=> (not (= j1 0)) (= temp___599 (to_rep o28))))

;; H
  (assert (=> (not (= j1 0)) (and (<= 1 temp___599) (<= temp___599 100))))

;; H
  (assert (=> (not (= j1 0)) (= o29 temp___599)))

;; H
  (assert (=> (not (= j1 0)) (= o30 (select r3 o29))))

;; H
  (assert (=> (not (= j1 0)) (= o31 (us_split_fields1 o30))))

;; H
  (assert (=> (not (= j1 0)) (= o32 (rec__tree_model__path_type__a o31))))

;; H
  (assert
  (=> (not (= j1 0))
  (and (= o33 (add o32 0))
  (and (= (length o33) (+ (length o32) 1))
  (and (= (get o33 (last o33)) 0) (= (ole o32 o33) true))))))

;; H
  (assert
  (=> (not (= j1 0))
  (= o34 (mk___split_fields o33
         (rec__tree_model__path_type__k (us_split_fields1 (select r3 j1)))))))

;; H
  (assert (=> (not (= j1 0)) (= temp___601 (mk___rep o34))))

;; H
  (assert
  (=> (not (= j1 0))
  (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___601))) 100)))

;; H
  (assert (=> (not (= j1 0)) (= o35 temp___601)))

;; H
  (assert (=> (not (= j1 0)) (and (<= 1 j1) (<= j1 100))))

;; H
  (assert (=> (not (= j1 0)) (= o36 j1)))

;; H
  (assert (=> (not (= j1 0)) (= o37 (store r3 o36 o35))))

;; H
  (assert (=> (not (= j1 0)) (= result9 (mk_map__ref r3))))

;; H
  (assert (=> (not (= j1 0)) (= r4 o37)))

;; H
  (assert (=> (not (= j1 0)) (and (<= 1 j1) (<= j1 100))))

;; H
  (assert (=> (not (= j1 0)) (= o38 j1)))

;; H
  (assert (=> (not (= j1 0)) (= o39 (store todo3 o38 (of_int 1)))))

;; H
  (assert (=> (not (= j1 0)) (= result10 (mk_map__ref2 todo3))))

;; H
  (assert (=> (not (= j1 0)) (= todo4 o39)))

;; H
  (assert (=> (not (not (= j1 0))) (= r4 r2)))

;; H
  (assert (=> (not (not (= j1 0))) (= todo4 todo3)))

;; H
  (assert (and (<= 1 i2) (<= i2 100)))

;; H
  (assert (= o40 i2))

;; H
  (assert
  (= o41 (select (rec__binary_trees__forest__c (us_split_fields5 f)) 
  o40)))

;; H
  (assert (= o42 (us_split_fields3 o41)))

;; H
  (assert (= o43 (rec__binary_trees__cell__right o42)))

;; H
  (assert (= o44 (to_rep o43)))

;; H
  (assert (= result11 (mk_int__ref j1)))

;; H
  (assert (= j2 o44))

;; H
  (assert (=> (not (= j2 0)) (< 0 (length1 unseen3))))

;; H
  (assert
  (=> (not (= j2 0))
  (< (length
     (rec__tree_model__path_type__a (us_split_fields1 (select r4 j2)))) 100)))

;; H
  (assert
  (=> (not (= j2 0))
  (= o45 (mk___rep
         (mk___split_fields
         (rec__tree_model__path_type__a (us_split_fields1 (select r4 j2)))
         (of_int 1))))))

;; H
  (assert (=> (not (= j2 0)) (and (<= 1 j2) (<= j2 100))))

;; H
  (assert (=> (not (= j2 0)) (= o46 j2)))

;; H
  (assert (=> (not (= j2 0)) (= o47 (store r4 o46 o45))))

;; H
  (assert (=> (not (= j2 0)) (= result12 (mk_map__ref r4))))

;; H
  (assert (=> (not (= j2 0)) (= r5 o47)))

;; H
  (assert (=> (not (= j2 0)) (and (<= 1 j2) (<= j2 100))))

;; H
  (assert (=> (not (= j2 0)) (= o48 j2)))

;; H
  (assert
  (=> (not (= j2 0))
  (= o49 (select (rec__binary_trees__forest__c (us_split_fields5 f)) 
  o48))))

;; H
  (assert (=> (not (= j2 0)) (= o50 (us_split_fields3 o49))))

;; H
  (assert (=> (not (= j2 0)) (= o51 (rec__binary_trees__cell__parent o50))))

;; H
  (assert (=> (not (= j2 0)) (= temp___606 (to_rep o51))))

;; H
  (assert (=> (not (= j2 0)) (and (<= 1 temp___606) (<= temp___606 100))))

;; H
  (assert (=> (not (= j2 0)) (= o52 temp___606)))

;; H
  (assert (=> (not (= j2 0)) (= o53 (select r5 o52))))

;; H
  (assert (=> (not (= j2 0)) (= o54 (us_split_fields1 o53))))

;; H
  (assert (=> (not (= j2 0)) (= o55 (rec__tree_model__path_type__a o54))))

;; H
  (assert
  (=> (not (= j2 0))
  (and (= o56 (add o55 1))
  (and (= (length o56) (+ (length o55) 1))
  (and (= (get o56 (last o56)) 1) (= (ole o55 o56) true))))))

;; H
  (assert
  (=> (not (= j2 0))
  (= o57 (mk___split_fields o56
         (rec__tree_model__path_type__k (us_split_fields1 (select r5 j2)))))))

;; H
  (assert (=> (not (= j2 0)) (= temp___608 (mk___rep o57))))

;; H
  (assert
  (=> (not (= j2 0))
  (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___608))) 100)))

;; H
  (assert (=> (not (= j2 0)) (= o58 temp___608)))

;; H
  (assert (=> (not (= j2 0)) (and (<= 1 j2) (<= j2 100))))

;; H
  (assert (=> (not (= j2 0)) (= o59 j2)))

;; H
  (assert (=> (not (= j2 0)) (= o60 (store r5 o59 o58))))

;; H
  (assert (=> (not (= j2 0)) (= result13 (mk_map__ref r5))))

;; H
  (assert (=> (not (= j2 0)) (= r6 o60)))

;; H
  (assert (=> (not (= j2 0)) (and (<= 1 j2) (<= j2 100))))

;; H
  (assert (=> (not (= j2 0)) (= o61 j2)))

;; H
  (assert (=> (not (= j2 0)) (= o62 (store todo4 o61 (of_int 1)))))

;; H
  (assert (=> (not (= j2 0)) (= result14 (mk_map__ref2 todo4))))

;; H
  (assert (=> (not (= j2 0)) (= todo5 o62)))

;; H
  (assert (=> (not (not (= j2 0))) (= r6 r4)))

;; H
  (assert (=> (not (not (= j2 0))) (= todo5 todo4)))

;; H
  (assert (and (<= 1 i2) (<= i2 100)))

;; H
  (assert (= o63 i2))

;; H
  (assert (= o64 (store todo5 o63 (of_int 0))))

;; H
  (assert (= result15 (mk_map__ref2 todo5)))

;; H
  (assert (= todo6 o64))

;; H
  (assert
  (and (= o65 (next todo6))
  (and (in_range2 o65)
  (ite (= o65 0)
  (forall ((i4 Int))
  (=> (and (<= 1 i4) (<= i4 100)) (not (= (select todo6 i4) true))))
  (= (select todo6 o65) true)))))

;; H
  (assert (= result16 (mk_int__ref i2)))

;; H
  (assert (= i3 o65))

;; H
  (assert (not (= i3 0)))

(declare-fun j3 () Int)

;; H
  (assert (<= 1 j3))

;; H
  (assert (<= j3 100))

;; H
  (assert
  (= (rec__tree_model__path_type__k (us_split_fields1 (select r6 j3))) true))

;; H
  (assert (not (= j3 root)))

(assert
;; WP_parameter_def
 ;; File "tree_model.ads", line 49, characters 0-0
  (not
  (not
  (= (to_rep
     (rec__binary_trees__cell__parent
     (us_split_fields3
     (select (rec__binary_trees__forest__c (us_split_fields5 f)) j3)))) 0))))
(check-sat)
