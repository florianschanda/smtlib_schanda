;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index_type index_type) Bool)

(declare-const dummy1 index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort element_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (element_type element_type) Bool)

(declare-const dummy2 element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant ((temp___expr_163 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)) Bool (=>
                                      (or (= temp___is_init_160 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_163)))

(declare-sort index_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index_type1 index_type1) Bool)

(declare-const dummy3 index_type1)

(declare-datatypes ()
((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref___2__projection ((a index_type__ref1)) index_type1
  (index_type__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_169 Int)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)) Bool (=>
                                      (or (= temp___is_init_166 true)
                                      (<= 1 10)) (in_range4 temp___expr_169)))

(declare-const search_item Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const items (Array Int natural))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= 1 10)) (in_range2 temp___expr_148)))

(declare-const found Bool)

(declare-const result__ Int)

(declare-const low_index Int)

(declare-const mid_index Int)

(declare-const high_index Int)

(declare-const o Int)

(declare-const o1 natural)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const result Int)

(declare-const low_index1 Int)

(declare-const result1 Int)

(declare-const high_index1 Int)

(declare-const result2 Bool)

(declare-const found1 Bool)

(declare-const result3 Int)

(declare-const result__1 Int)

(declare-const result4 Int)

(declare-const mid_index1 Int)

(declare-const found2 Bool)

(declare-const result__2 Int)

(declare-const found3 Bool)

(declare-const result__3 Int)

(declare-const low_index2 Int)

(declare-const mid_index2 Int)

(declare-const high_index2 Int)

(declare-const temp___189 Int)

(declare-const temp___188 Int)

(declare-const result5 Int)

(declare-const temp___1891 Int)

(declare-const result6 Int)

(declare-const temp___1881 Int)

(declare-const result7 Bool)

(declare-const result8 Int)

(declare-const low_index3 Int)

(declare-const result9 Int)

(declare-const high_index3 Int)

(declare-const result10 Int)

(declare-const mid_index3 Int)

(declare-const found4 Bool)

(declare-const result__4 Int)

;; H
  (assert (in_range3 search_item))

;; H
  (assert (=> (<= 1 10) (in_range4 result__)))

;; H
  (assert
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 10))
  (forall ((k Int))
  (=> (and (<= (+ j 1) k) (<= k 10))
  (< (to_rep (select items j)) (to_rep (select items k))))))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref low_index)))

;; H
  (assert (= low_index1 1))

;; H
  (assert (in_range4 low_index1))

;; H
  (assert (=> (<= 1 10) (in_range4 mid_index)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref high_index)))

;; H
  (assert (= high_index1 10))

;; H
  (assert (in_range4 high_index1))

;; H
  (assert (= (mk_bool__ref result2) (mk_bool__ref found)))

;; H
  (assert (= found1 (of_int 0)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref result__)))

;; H
  (assert (= result__1 1))

;; H
  (assert
  (not (not (not (< search_item (to_rep (select items low_index1)))))))

;; H
  (assert (not (< (to_rep (select items high_index1)) search_item)))

;; H
  (assert (= (mk_int__ref result4) (mk_int__ref mid_index)))

;; H
  (assert (= mid_index1 (div1 (+ low_index1 high_index1) 2)))

;; H
  (assert (not (= search_item (to_rep (select items mid_index1)))))

;; H
  (assert (= result__2 result__1))

;; H
  (assert (= found2 found1))

;; H
  (assert (not (= low_index1 high_index1)))

;; H
  (assert (not (= found3 true)))

;; H
  (assert (and (<= low_index2 mid_index2) (< mid_index2 high_index2)))

;; H
  (assert
  (or (< (to_rep (select items low_index2)) search_item)
  (= (to_rep (select items low_index2)) search_item)))

;; H
  (assert
  (or (< search_item (to_rep (select items high_index2)))
  (= search_item (to_rep (select items high_index2)))))

;; H
  (assert
  (and
  (and
  (and (=> (<= 1 10) (in_range4 low_index2))
  (=> (<= 1 10) (in_range4 result__3)))
  (=> (<= 1 10) (in_range4 mid_index2)))
  (=> (<= 1 10) (in_range4 high_index2))))

;; H
  (assert (= temp___189 result5))

;; H
  (assert (= temp___1891 low_index2))

;; H
  (assert (= temp___188 result6))

;; H
  (assert (= temp___1881 high_index2))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (and (<= 1 (+ mid_index2 1)) (<= (+ mid_index2 1) 10))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (= o (+ mid_index2 1))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (= o1 (select items o))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item) (= o2 (to_rep o1))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (= result7 (ite (< search_item o2) true false))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (not (= result7 true))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (and (= o3 (+ mid_index2 1)) (in_range4 (+ mid_index2 1)))))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (= low_index2 result8)))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item) (= low_index3 o3)))

;; H
  (assert
  (=> (< (to_rep (select items mid_index2)) search_item)
  (= high_index3 high_index2)))

;; H
  (assert
  (=> (not (< (to_rep (select items mid_index2)) search_item))
  (= high_index2 result9)))

;; H
  (assert
  (=> (not (< (to_rep (select items mid_index2)) search_item))
  (= high_index3 mid_index2)))

;; H
  (assert
  (=> (not (< (to_rep (select items mid_index2)) search_item))
  (= low_index3 low_index2)))

;; H
  (assert (= mid_index2 result10))

;; H
  (assert (= mid_index3 (div1 (+ low_index3 high_index3) 2)))

;; H
  (assert (not (= search_item (to_rep (select items mid_index3)))))

;; H
  (assert (= result__4 result__3))

;; H
  (assert (= found4 found3))

;; H
  (assert (not (= low_index3 high_index3)))

(assert
;; WP_parameter_def
 ;; File "prime_search.adb", line 3, characters 0-0
  (not (<= low_index3 mid_index3)))
(check-sat)
(exit)
