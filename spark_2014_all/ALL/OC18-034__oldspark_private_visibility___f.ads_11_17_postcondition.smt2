;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort myp 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (myp myp) Bool)

(declare-const dummy myp)

(declare-datatypes ((myp__ref 0)) (((mk_myp__ref (myp__content myp)))))
(define-fun myp__ref___projection ((a myp__ref)) myp (myp__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 1 10)) (in_range1 temp___expr_135)))

(declare-fun to_rep (myp) Int)

(declare-fun of_rep (Int) myp)

;; inversion_axiom
  (assert
  (forall ((x myp)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x myp)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__bt__o__t__f1 myp)(rec__bt__o__t__f2 myp)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) myp
  (rec__bt__o__t__f1 a))

(define-fun us_split_fields_F2__projection ((a us_split_fields)) myp
  (rec__bt__o__t__f2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__bt__o__t__f1 (us_split_fields1 a)))
                        (to_rep (rec__bt__o__t__f1 (us_split_fields1 b))))
                        (= (to_rep (rec__bt__o__t__f2 (us_split_fields1 a)))
                        (to_rep (rec__bt__o__t__f2 (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const bt__o__t__f1__first__bit Int)

(declare-const bt__o__t__f1__last__bit Int)

(declare-const bt__o__t__f1__position Int)

;; bt__o__t__f1__first__bit_axiom
  (assert (<= 0 bt__o__t__f1__first__bit))

;; bt__o__t__f1__last__bit_axiom
  (assert (< bt__o__t__f1__first__bit bt__o__t__f1__last__bit))

;; bt__o__t__f1__position_axiom
  (assert (<= 0 bt__o__t__f1__position))

(declare-const bt__o__t__f2__first__bit Int)

(declare-const bt__o__t__f2__last__bit Int)

(declare-const bt__o__t__f2__position Int)

;; bt__o__t__f2__first__bit_axiom
  (assert (<= 0 bt__o__t__f2__first__bit))

;; bt__o__t__f2__last__bit_axiom
  (assert (< bt__o__t__f2__first__bit bt__o__t__f2__last__bit))

;; bt__o__t__f2__position_axiom
  (assert (<= 0 bt__o__t__f2__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun sf (us_rep) Int)

(declare-fun sf__function_guard (Int us_rep) Bool)

;; sf__post_axiom
  (assert
  (forall ((s us_rep)) (! (dynamic_invariant (sf s) true false
  true) :pattern ((sf s)) )))

(declare-datatypes ((os__ref 0)) (((mk_os__ref (os__content us_rep)))))
(define-fun os__ref___projection ((a os__ref)) us_rep (os__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__f__r1__f1 us_rep)))))
(define-fun us_split_fields_F1__2__projection ((a us_split_fields2)) us_rep
  (rec__f__r1__f1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (bool_eq (rec__f__r1__f1 (us_split_fields3 a))
                            (rec__f__r1__f1 (us_split_fields3 b))) true)
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const f__r1__f1__first__bit Int)

(declare-const f__r1__f1__last__bit Int)

(declare-const f__r1__f1__position Int)

;; f__r1__f1__first__bit_axiom
  (assert (<= 0 f__r1__f1__first__bit))

;; f__r1__f1__last__bit_axiom
  (assert (< f__r1__f1__first__bit f__r1__f1__last__bit))

;; f__r1__f1__position_axiom
  (assert (<= 0 f__r1__f1__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((r1__ref 0)) (((mk_r1__ref (r1__content us_rep1)))))
(define-fun r1__ref___projection ((a r1__ref)) us_rep1 (r1__content a))

(declare-const x us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const y Int)

(declare-const f__v__result Bool)

(declare-const o Int)

(declare-const result Int)

(declare-const y1 Int)

(declare-const result1 Bool)

(declare-const f__v__result1 Bool)

(declare-const f__v__result2 Bool)

(declare-const f__v__result3 Bool)

(declare-const y2 Int)

(declare-const f__v__result4 Bool)

(declare-const y3 Int)

(declare-const f__v__result5 Bool)

(declare-const result2 Bool)

;; H
  (assert (=> (<= 1 10) (in_range1 y)))

;; H
  (assert
  (and (= o (sf (rec__f__r1__f1 (us_split_fields3 x)))) (in_range1 o)))

;; H
  (assert (= result y))

;; H
  (assert (= y1 o))

;; H
  (assert (= f__v__result1 f__v__result2))

;; H
  (assert (= f__v__result3 f__v__result1))

;; H
  (assert (= result1 f__v__result))

;; H
  (assert (= f__v__result1 (ite (= y1 2) true false)))

;; H
  (assert (= (mk_bool__ref f__v__result4) (mk_bool__ref f__v__result2)))

;; H
  (assert (= y2 y1))

;; H
  (assert (= f__v__result5 f__v__result3))

;; H
  (assert (= y3 y1))

;; H
  (assert (= result2 f__v__result4))

;; H
  (assert (= f__v__result4 true))

(assert
;; WP_parameter_def
 ;; File "f.ads", line 10, characters 0-0
  (not (= (sf (rec__f__r1__f1 (us_split_fields3 x))) 2)))
(check-sat)
(exit)
