;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun a () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__foo__t__f integer)(rec__foo__t__f2 integer)(rec__foo__t__f3 integer)(rec__foo__t__f4 integer)(rec__foo__t__f5 integer)))))
(define-fun us_split_fields_F__projection ((a1 us_split_fields)) integer
  (rec__foo__t__f a1))

(define-fun us_split_fields_F2__projection ((a1 us_split_fields)) integer
  (rec__foo__t__f2 a1))

(define-fun us_split_fields_F3__projection ((a1 us_split_fields)) integer
  (rec__foo__t__f3 a1))

(define-fun us_split_fields_F4__projection ((a1 us_split_fields)) integer
  (rec__foo__t__f4 a1))

(define-fun us_split_fields_F5__projection ((a1 us_split_fields)) integer
  (rec__foo__t__f5 a1))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a1 us_split_fields__ref)) us_split_fields
  (us_split_fields__content a1))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a1 us_rep)) us_split_fields (us_split_fields1
                                                              a1))

(define-fun bool_eq ((a1 us_rep)
  (b1 us_rep)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep (rec__foo__t__f (us_split_fields1 a1)))
                         (to_rep (rec__foo__t__f (us_split_fields1 b1))))
                         (= (to_rep (rec__foo__t__f2 (us_split_fields1 a1)))
                         (to_rep (rec__foo__t__f2 (us_split_fields1 b1)))))
                         (= (to_rep (rec__foo__t__f3 (us_split_fields1 a1)))
                         (to_rep (rec__foo__t__f3 (us_split_fields1 b1)))))
                         (= (to_rep (rec__foo__t__f4 (us_split_fields1 a1)))
                         (to_rep (rec__foo__t__f4 (us_split_fields1 b1)))))
                         (= (to_rep (rec__foo__t__f5 (us_split_fields1 a1)))
                         (to_rep (rec__foo__t__f5 (us_split_fields1 b1)))))
                    true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__size a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__alignment a1))))

(declare-fun foo__t__f__first__bit () Int)

(declare-fun foo__t__f__last__bit () Int)

(declare-fun foo__t__f__position () Int)

;; foo__t__f__first__bit_axiom
  (assert (<= 0 foo__t__f__first__bit))

;; foo__t__f__last__bit_axiom
  (assert (< foo__t__f__first__bit foo__t__f__last__bit))

;; foo__t__f__position_axiom
  (assert (<= 0 foo__t__f__position))

(declare-fun foo__t__f2__first__bit () Int)

(declare-fun foo__t__f2__last__bit () Int)

(declare-fun foo__t__f2__position () Int)

;; foo__t__f2__first__bit_axiom
  (assert (<= 0 foo__t__f2__first__bit))

;; foo__t__f2__last__bit_axiom
  (assert (< foo__t__f2__first__bit foo__t__f2__last__bit))

;; foo__t__f2__position_axiom
  (assert (<= 0 foo__t__f2__position))

(declare-fun foo__t__f3__first__bit () Int)

(declare-fun foo__t__f3__last__bit () Int)

(declare-fun foo__t__f3__position () Int)

;; foo__t__f3__first__bit_axiom
  (assert (<= 0 foo__t__f3__first__bit))

;; foo__t__f3__last__bit_axiom
  (assert (< foo__t__f3__first__bit foo__t__f3__last__bit))

;; foo__t__f3__position_axiom
  (assert (<= 0 foo__t__f3__position))

(declare-fun foo__t__f4__first__bit () Int)

(declare-fun foo__t__f4__last__bit () Int)

(declare-fun foo__t__f4__position () Int)

;; foo__t__f4__first__bit_axiom
  (assert (<= 0 foo__t__f4__first__bit))

;; foo__t__f4__last__bit_axiom
  (assert (< foo__t__f4__first__bit foo__t__f4__last__bit))

;; foo__t__f4__position_axiom
  (assert (<= 0 foo__t__f4__position))

(declare-fun foo__t__f5__first__bit () Int)

(declare-fun foo__t__f5__last__bit () Int)

(declare-fun foo__t__f5__position () Int)

;; foo__t__f5__first__bit_axiom
  (assert (<= 0 foo__t__f5__first__bit))

;; foo__t__f5__last__bit_axiom
  (assert (< foo__t__f5__first__bit foo__t__f5__last__bit))

;; foo__t__f5__position_axiom
  (assert (<= 0 foo__t__f5__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a1 t__ref)) us_rep (t__content a1))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun c () Int)

(declare-fun r__split_fields () integer)

(declare-fun r__split_fields1 () integer)

(declare-fun r__split_fields2 () integer)

(declare-fun r__split_fields3 () integer)

(declare-fun r__split_fields4 () integer)

(declare-fun foo__p__y__fields () integer)

(declare-fun foo__p__y__fields1 () integer)

(declare-fun foo__p__y__fields2 () integer)

(declare-fun foo__p__y__fields3 () integer)

(declare-fun foo__p__y__fields4 () integer)

(declare-fun foo__p__x__fields () integer)

(declare-fun foo__p__x__fields1 () integer)

(declare-fun foo__p__x__fields2 () integer)

(declare-fun foo__p__x__fields3 () integer)

(declare-fun foo__p__x__fields4 () integer)

(declare-fun result () integer)

(declare-fun result1 () integer)

(declare-fun result2 () integer)

(declare-fun result3 () integer)

(declare-fun result4 () integer)

(declare-fun r__split_fields5 () integer)

(declare-fun r__split_fields6 () integer)

(declare-fun r__split_fields7 () integer)

(declare-fun r__split_fields8 () integer)

(declare-fun r__split_fields9 () integer)

(declare-fun result5 () integer)

(declare-fun result6 () integer)

(declare-fun result7 () integer)

(declare-fun result8 () integer)

(declare-fun result9 () integer)

(declare-fun r__split_fields10 () integer)

(declare-fun r__split_fields11 () integer)

(declare-fun r__split_fields12 () integer)

(declare-fun r__split_fields13 () integer)

(declare-fun r__split_fields14 () integer)

(declare-fun result10 () Int)

(declare-fun c1 () Int)

(declare-fun c2 () Int)

(declare-fun r__split_fields15 () integer)

(declare-fun r__split_fields16 () integer)

(declare-fun r__split_fields17 () integer)

(declare-fun r__split_fields18 () integer)

(declare-fun r__split_fields19 () integer)

(declare-fun c3 () Int)

(declare-fun r__split_fields20 () integer)

(declare-fun r__split_fields21 () integer)

(declare-fun r__split_fields22 () integer)

(declare-fun r__split_fields23 () integer)

(declare-fun r__split_fields24 () integer)

;; H
  (assert (in_range1 a))

;; H
  (assert (in_range1 b))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))

;; H
  (assert (= result r__split_fields))

;; H
  (assert (= result1 r__split_fields1))

;; H
  (assert (= result2 r__split_fields2))

;; H
  (assert (= result3 r__split_fields3))

;; H
  (assert (= result4 r__split_fields4))

;; H
  (assert
  (= (mk___split_fields r__split_fields5 r__split_fields6 r__split_fields7
     r__split_fields8 r__split_fields9) (mk___split_fields foo__p__x__fields
                                        foo__p__x__fields1 foo__p__x__fields2
                                        foo__p__x__fields3
                                        foo__p__x__fields4)))

;; H
  (assert (= result5 r__split_fields5))

;; H
  (assert (= result6 r__split_fields6))

;; H
  (assert (= result7 r__split_fields7))

;; H
  (assert (= result8 r__split_fields8))

;; H
  (assert (= result9 r__split_fields9))

;; H
  (assert
  (= (mk___split_fields r__split_fields10 r__split_fields11 r__split_fields12
     r__split_fields13 r__split_fields14) (mk___split_fields
                                          foo__p__y__fields
                                          foo__p__y__fields1
                                          foo__p__y__fields2
                                          foo__p__y__fields3
                                          foo__p__y__fields4)))

;; H
  (assert (= result10 c))

;; H
  (assert (= c1 (to_rep r__split_fields10)))

;; H
  (assert (= r__split_fields15 r__split_fields10))

;; H
  (assert (= r__split_fields16 r__split_fields11))

;; H
  (assert (= r__split_fields17 r__split_fields12))

;; H
  (assert (= r__split_fields18 r__split_fields13))

;; H
  (assert (= r__split_fields19 r__split_fields14))

;; H
  (assert (= c1 c2))

;; H
  (assert (= r__split_fields20 r__split_fields10))

;; H
  (assert (= r__split_fields21 r__split_fields11))

;; H
  (assert (= r__split_fields22 r__split_fields12))

;; H
  (assert (= r__split_fields23 r__split_fields13))

;; H
  (assert (= r__split_fields24 r__split_fields14))

;; H
  (assert (= c3 c1))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 12, characters 0-0
  (not (or (= c2 a) (= c2 b))))
(check-sat)
(exit)
