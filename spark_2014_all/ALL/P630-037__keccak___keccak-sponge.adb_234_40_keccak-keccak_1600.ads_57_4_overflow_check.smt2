;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (byte byte) Bool)

(declare-const dummy3 byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(define-fun dynamic_invariant3 ((temp___expr_249 (_ BitVec 8))
  (temp___is_init_246 Bool) (temp___skip_constant_247 Bool)
  (temp___do_toplevel_248 Bool)) Bool true)

(declare-fun to_rep (byte) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x byte)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort index_number 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (index_number index_number) Bool)

(declare-const dummy4 index_number)

(declare-datatypes ()
((index_number__ref
 (mk_index_number__ref (index_number__content index_number)))))
(define-fun index_number__ref___projection ((a index_number__ref)) index_number
  (index_number__content a))

(define-fun dynamic_invariant4 ((temp___expr_255 Int)
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool)) Bool (=>
                                      (or (= temp___is_init_252 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_255)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))

;; slide_eq
  (assert
  (forall ((a (Array Int byte)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int byte)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int byte) Int Int (Array Int byte) Int
  Int) (Array Int byte))

;; concat_def
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte Int) (Array Int byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int)
  (b (Array Int byte)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int byte) Int Int (Array Int byte) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))

(define-fun of_array ((a (Array Int byte)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int byte)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int byte)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ()
((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(define-fun dynamic_invariant5 ((temp___expr_261 us_t)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (not (= temp___skip_constant_259 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_261)
                                      (last1 temp___expr_261))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort lane_type 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

(declare-fun user_eq6 (lane_type lane_type) Bool)

(declare-const dummy6 lane_type)

(declare-datatypes ()
((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type
  (lane_type__content a))

(declare-fun to_rep2 (lane_type) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) lane_type)

;; inversion_axiom
  (assert
  (forall ((x lane_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int5 ((x lane_type)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x lane_type)) (! (uint_in_range1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)

(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (forall ((a lane_type))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8)))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((a lane_type))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8)))
  (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j)
  (get a (bvsub i (bvsub new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide1 a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1)
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8))
  (b__last_2 (_ BitVec 8))) Bool (ite (and
                                      (and
                                      (ite (bvule a__first a__last)
                                      (and (bvule b__first b__last)
                                      (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                      (bvugt b__first b__last))
                                      (ite (bvule a__first_2 a__last_2)
                                      (and (bvule b__first_2 b__last_2)
                                      (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                      (bvugt b__first_2 b__last_2)))
                                      (forall ((temp___idx_133 (_ BitVec 8))
                                      (temp___idx_134 (_ BitVec 8)))
                                      (=>
                                      (and
                                      (and (bvule a__first temp___idx_133)
                                      (bvule temp___idx_133 a__last))
                                      (and (bvule a__first_2 temp___idx_134)
                                      (bvule temp___idx_134 a__last_2)))
                                      (= (to_rep2
                                         (get a temp___idx_133
                                         temp___idx_134)) (to_rep2
                                                          (get b
                                                          (bvadd (bvsub b__first a__first) temp___idx_133)
                                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))
                                 true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_133 (_ BitVec 8)) (temp___idx_134 (_ BitVec 8)))
  (=>
  (and (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (and (bvule a__first_2 temp___idx_134) (bvule temp___idx_134 a__last_2)))
  (= (to_rep2 (get a temp___idx_133 temp___idx_134)) (to_rep2
                                                     (get b
                                                     (bvadd (bvsub b__first a__first) temp___idx_133)
                                                     (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-const dummy7 map1)

(declare-const value__size1 Int)

(declare-fun object__size1 (map1) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 (map1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 (map1 map1) Bool)

(declare-sort states 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (states states) Bool)

(declare-const dummy8 states)

(declare-datatypes ()
((states__ref (mk_states__ref (states__content states)))))
(define-fun states__ref___projection ((a states__ref)) states (states__content
                                                              a))

(declare-fun to_rep3 (states) Int)

(declare-fun of_rep3 (Int) states)

;; inversion_axiom
  (assert
  (forall ((x states))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x states)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort byte_absorption_number 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (byte_absorption_number byte_absorption_number) Bool)

(declare-const dummy9 byte_absorption_number)

(declare-datatypes ()
((byte_absorption_number__ref
 (mk_byte_absorption_number__ref
 (byte_absorption_number__content byte_absorption_number)))))
(define-fun byte_absorption_number__ref___projection ((a byte_absorption_number__ref)) byte_absorption_number
  (byte_absorption_number__content a))

(declare-fun to_rep4 (byte_absorption_number) Int)

(declare-fun of_rep4 (Int) byte_absorption_number)

;; inversion_axiom
  (assert
  (forall ((x byte_absorption_number))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x byte_absorption_number)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-const dummy10 (Array Int byte))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int byte)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int byte)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 ((Array Int byte) (Array Int byte)) Bool)

(declare-sort bit_absorption_number 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1599)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (bit_absorption_number bit_absorption_number) Bool)

(declare-const dummy11 bit_absorption_number)

(declare-datatypes ()
((bit_absorption_number__ref
 (mk_bit_absorption_number__ref
 (bit_absorption_number__content bit_absorption_number)))))
(define-fun bit_absorption_number__ref___projection ((a bit_absorption_number__ref)) bit_absorption_number
  (bit_absorption_number__content a))

(declare-fun to_rep5 (bit_absorption_number) Int)

(declare-fun of_rep5 (Int) bit_absorption_number)

;; inversion_axiom
  (assert
  (forall ((x bit_absorption_number))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x bit_absorption_number)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort rate_number 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (rate_number rate_number) Bool)

(declare-const dummy12 rate_number)

(declare-datatypes ()
((rate_number__ref (mk_rate_number__ref (rate_number__content rate_number)))))
(define-fun rate_number__ref___projection ((a rate_number__ref)) rate_number
  (rate_number__content a))

(declare-fun to_rep6 (rate_number) Int)

(declare-fun of_rep6 (Int) rate_number)

;; inversion_axiom
  (assert
  (forall ((x rate_number))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x rate_number)) (! (in_range8
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__keccak__keccak_1600__sponge__context__state map1)(rec__keccak__keccak_1600__sponge__context__block (Array Int byte))(rec__keccak__keccak_1600__sponge__context__bits_absorbed bit_absorption_number)(rec__keccak__keccak_1600__sponge__context__bytes_squeezed byte_absorption_number)(rec__keccak__keccak_1600__sponge__context__rate rate_number)(rec__keccak__keccak_1600__sponge__context__curr_state states)))))
(define-fun us_split_fields_State__projection ((a us_split_fields)) map1
  (rec__keccak__keccak_1600__sponge__context__state a))

(define-fun us_split_fields_Block__projection ((a us_split_fields)) (Array Int byte)
  (rec__keccak__keccak_1600__sponge__context__block a))

(define-fun us_split_fields_Bits_Absorbed__projection ((a us_split_fields)) bit_absorption_number
  (rec__keccak__keccak_1600__sponge__context__bits_absorbed a))

(define-fun us_split_fields_Bytes_Squeezed__projection ((a us_split_fields)) byte_absorption_number
  (rec__keccak__keccak_1600__sponge__context__bytes_squeezed a))

(define-fun us_split_fields_Rate__projection ((a us_split_fields)) rate_number
  (rec__keccak__keccak_1600__sponge__context__rate a))

(define-fun us_split_fields_Curr_State__projection ((a us_split_fields)) states
  (rec__keccak__keccak_1600__sponge__context__curr_state a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (= (bool_eq2
                           (rec__keccak__keccak_1600__sponge__context__state
                           (us_split_fields1 a)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0) ((_ int2bv 8) 4)
                           (rec__keccak__keccak_1600__sponge__context__state
                           (us_split_fields1 b)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4)) true)
                        (= (bool_eq
                           (rec__keccak__keccak_1600__sponge__context__block
                           (us_split_fields1 a)) 0 199
                           (rec__keccak__keccak_1600__sponge__context__block
                           (us_split_fields1 b)) 0 199) true))
                        (= (to_rep5
                           (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                                                  (us_split_fields1 b)))))
                        (= (to_rep4
                           (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__keccak__keccak_1600__sponge__context__rate
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__keccak__keccak_1600__sponge__context__rate
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__keccak__keccak_1600__sponge__context__curr_state
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__keccak__keccak_1600__sponge__context__curr_state
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const keccak__keccak_1600__sponge__context__state__first__bit Int)

(declare-const keccak__keccak_1600__sponge__context__state__last__bit Int)

(declare-const keccak__keccak_1600__sponge__context__state__position Int)

;; keccak__keccak_1600__sponge__context__state__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__state__first__bit))

;; keccak__keccak_1600__sponge__context__state__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__state__first__bit keccak__keccak_1600__sponge__context__state__last__bit))

;; keccak__keccak_1600__sponge__context__state__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__state__position))

(declare-const keccak__keccak_1600__sponge__context__block__first__bit Int)

(declare-const keccak__keccak_1600__sponge__context__block__last__bit Int)

(declare-const keccak__keccak_1600__sponge__context__block__position Int)

;; keccak__keccak_1600__sponge__context__block__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__block__first__bit))

;; keccak__keccak_1600__sponge__context__block__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__block__first__bit keccak__keccak_1600__sponge__context__block__last__bit))

;; keccak__keccak_1600__sponge__context__block__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__block__position))

(declare-const keccak__keccak_1600__sponge__context__bits_absorbed__first__bit Int)

(declare-const keccak__keccak_1600__sponge__context__bits_absorbed__last__bit Int)

(declare-const keccak__keccak_1600__sponge__context__bits_absorbed__position Int)

;; keccak__keccak_1600__sponge__context__bits_absorbed__first__bit_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bits_absorbed__first__bit))

;; keccak__keccak_1600__sponge__context__bits_absorbed__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__bits_absorbed__first__bit
  keccak__keccak_1600__sponge__context__bits_absorbed__last__bit))

;; keccak__keccak_1600__sponge__context__bits_absorbed__position_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bits_absorbed__position))

(declare-const keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit Int)

(declare-const keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit Int)

(declare-const keccak__keccak_1600__sponge__context__bytes_squeezed__position Int)

;; keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit))

;; keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit
  keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit))

;; keccak__keccak_1600__sponge__context__bytes_squeezed__position_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bytes_squeezed__position))

(declare-const keccak__keccak_1600__sponge__context__rate__first__bit Int)

(declare-const keccak__keccak_1600__sponge__context__rate__last__bit Int)

(declare-const keccak__keccak_1600__sponge__context__rate__position Int)

;; keccak__keccak_1600__sponge__context__rate__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__rate__first__bit))

;; keccak__keccak_1600__sponge__context__rate__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__rate__first__bit keccak__keccak_1600__sponge__context__rate__last__bit))

;; keccak__keccak_1600__sponge__context__rate__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__rate__position))

(declare-const keccak__keccak_1600__sponge__context__curr_state__first__bit Int)

(declare-const keccak__keccak_1600__sponge__context__curr_state__last__bit Int)

(declare-const keccak__keccak_1600__sponge__context__curr_state__position Int)

;; keccak__keccak_1600__sponge__context__curr_state__first__bit_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__curr_state__first__bit))

;; keccak__keccak_1600__sponge__context__curr_state__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__curr_state__first__bit keccak__keccak_1600__sponge__context__curr_state__last__bit))

;; keccak__keccak_1600__sponge__context__curr_state__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__curr_state__position))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ()
((context__ref (mk_context__ref (context__content us_rep)))))
(define-fun context__ref___projection ((a context__ref)) us_rep (context__content
                                                                a))

(declare-fun state_of (us_rep) Int)

(declare-fun state_of__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant6 ((temp___expr_364 Int)
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)) Bool (=>
                                      (or (= temp___is_init_361 true)
                                      (<= 0 1)) (in_range5 temp___expr_364)))

;; state_of__post_axiom
  (assert
  (forall ((ctx us_rep)) (! (dynamic_invariant6 (state_of ctx) true false
  true) :pattern ((state_of ctx)) )))

;; state_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (state_of ctx) (to_rep3
                       (rec__keccak__keccak_1600__sponge__context__curr_state
                       (us_split_fields1 ctx)))) :pattern ((state_of ctx)) )))

(declare-fun rate_of (us_rep) Int)

(declare-fun rate_of__function_guard (Int us_rep) Bool)

;; rate_of__post_axiom
  (assert
  (forall ((ctx us_rep))
  (! (let ((result (rate_of ctx)))
     (and (< result 1600) (dynamic_invariant1 result true false true))) :pattern (
  (rate_of ctx)) )))

;; rate_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (rate_of ctx) (* (to_rep6
                         (rec__keccak__keccak_1600__sponge__context__rate
                         (us_split_fields1 ctx))) 8)) :pattern ((rate_of ctx)) )))

(declare-fun in_queue_bit_length (us_rep) Int)

(declare-fun in_queue_bit_length__function_guard (Int us_rep) Bool)

;; in_queue_bit_length__post_axiom
  (assert
  (forall ((ctx us_rep))
  (! (let ((result (in_queue_bit_length ctx)))
     (and (< result 1600) (dynamic_invariant result true false true))) :pattern (
  (in_queue_bit_length ctx)) )))

;; in_queue_bit_length__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (in_queue_bit_length ctx) (to_rep5
                                  (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                                  (us_split_fields1 ctx)))) :pattern (
  (in_queue_bit_length ctx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const message us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const bit_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const suffix (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const suffix_len Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort tTsuffix_arraySP1 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 0)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (tTsuffix_arraySP1 tTsuffix_arraySP1) Bool)

(declare-const dummy14 tTsuffix_arraySP1)

(declare-datatypes ()
((tTsuffix_arraySP1__ref
 (mk_tTsuffix_arraySP1__ref (tTsuffix_arraySP1__content tTsuffix_arraySP1)))))
(define-fun tTsuffix_arraySP1__ref___projection ((a tTsuffix_arraySP1__ref)) tTsuffix_arraySP1
  (tTsuffix_arraySP1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r105s Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq15 (integer integer) Bool)

(declare-const dummy15 integer)

(declare-datatypes ()
((t106s__ref (mk_t106s__ref (t106s__content integer)))))
(define-fun t106s__ref___projection ((a t106s__ref)) integer (t106s__content
                                                             a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int byte))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int byte) (elts1 a))

(define-fun of_array1 ((a (Array Int byte)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int byte)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int byte)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq16 (us_t1 us_t1) Bool)

(declare-const dummy16 us_t1)

(declare-datatypes () ((t107s__ref (mk_t107s__ref (t107s__content us_t1)))))
(define-fun t107s__ref___projection ((a t107s__ref)) us_t1 (t107s__content a))

(declare-const r108s Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq17 (integer integer) Bool)

(declare-const dummy17 integer)

(declare-datatypes ()
((t109s__ref (mk_t109s__ref (t109s__content integer)))))
(define-fun t109s__ref___projection ((a t109s__ref)) integer (t109s__content
                                                             a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int byte))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int byte) (elts2 a))

(define-fun of_array2 ((a (Array Int byte)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int byte)) Int)

(declare-const value__component__size4 Int)

(declare-fun object__component__size4 ((Array Int byte)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq18 (us_t2 us_t2) Bool)

(declare-const dummy18 us_t2)

(declare-datatypes () ((t110s__ref (mk_t110s__ref (t110s__content us_t2)))))
(define-fun t110s__ref___projection ((a t110s__ref)) us_t2 (t110s__content a))

(declare-fun keccak__keccak_1600__sponge__absorb_with_suffix__suffix_array__aggregate_def ((_ BitVec 8)) (Array Int byte))

;; def_axiom
  (assert
  (forall ((temp___878 (_ BitVec 8)))
  (= (select (keccak__keccak_1600__sponge__absorb_with_suffix__suffix_array__aggregate_def
             temp___878) 0) (of_rep temp___878))))

(define-fun dynamic_invariant7 ((temp___expr_391 Int)
  (temp___is_init_388 Bool) (temp___skip_constant_389 Bool)
  (temp___do_toplevel_390 Bool)) Bool (=>
                                      (or (= temp___is_init_388 true)
                                      (<= 1 199)) (in_range8
                                      temp___expr_391)))

(define-fun dynamic_invariant8 ((temp___expr_370 Int)
  (temp___is_init_367 Bool) (temp___skip_constant_368 Bool)
  (temp___do_toplevel_369 Bool)) Bool (=>
                                      (or (= temp___is_init_367 true)
                                      (<= 0 199)) (in_range6
                                      temp___expr_370)))

(define-fun dynamic_invariant9 ((temp___expr_385 Int)
  (temp___is_init_382 Bool) (temp___skip_constant_383 Bool)
  (temp___do_toplevel_384 Bool)) Bool (=>
                                      (or (= temp___is_init_382 true)
                                      (<= 0 1599)) (in_range7
                                      temp___expr_385)))

(declare-const ctx__split_fields map1)

(declare-const ctx__split_fields1 (Array Int byte))

(declare-const ctx__split_fields2 bit_absorption_number)

(declare-const ctx__split_fields3 byte_absorption_number)

(declare-const ctx__split_fields4 rate_number)

(declare-const ctx__split_fields5 states)

(declare-const suffix_array (Array Int byte))

(declare-const message_byte_length Int)

(declare-const message_last Int)

(declare-const initial_rate Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const result (Array Int byte))

(declare-const suffix_array1 (Array Int byte))

(declare-const result1 Int)

(declare-const message_byte_length1 Int)

(declare-const result2 Int)

(declare-const initial_rate1 Int)

(declare-const result3 Int)

(declare-const message_last1 Int)

(declare-const result4 Bool)

;; H
  (assert (dynamic_invariant5 message true false true))

;; H
  (assert (in_range2 bit_length))

;; H
  (assert (in_range2 suffix_len))

;; H
  (assert
  (and
  (= (state_of
     (mk___rep
     (mk___split_fields ctx__split_fields ctx__split_fields1
     ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
     ctx__split_fields5))) 0)
  (and (<= suffix_len 8)
  (and (<= bit_length 2147483639)
  (and (<= (div1 (+ bit_length 7) 8) (length message))
  (and
  (= (mod2
     (in_queue_bit_length
     (mk___rep
     (mk___split_fields ctx__split_fields ctx__split_fields1
     ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
     ctx__split_fields5))) 8) 0)
  (< (in_queue_bit_length
     (mk___rep
     (mk___split_fields ctx__split_fields ctx__split_fields1
     ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
     ctx__split_fields5))) (rate_of
                           (mk___rep
                           (mk___split_fields ctx__split_fields
                           ctx__split_fields1 ctx__split_fields2
                           ctx__split_fields3 ctx__split_fields4
                           ctx__split_fields5))))))))))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref suffix_array)))

;; H
  (assert
  (= suffix_array1 (keccak__keccak_1600__sponge__absorb_with_suffix__suffix_array__aggregate_def
                   suffix)))

;; H
  (assert (and (= o (+ bit_length 7)) (in_range1 (+ bit_length 7))))

;; H
  (assert (= o1 (div1 o 8)))

;; H
  (assert (and (= o2 o1) (in_range2 o1)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref message_byte_length)))

;; H
  (assert (= message_byte_length1 o2))

;; H
  (assert (in_range2 message_byte_length1))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 message_last)))

;; H
  (assert
  (and
  (= o3 (rate_of
        (mk___rep
        (mk___split_fields ctx__split_fields ctx__split_fields1
        ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
        ctx__split_fields5))))
  (and (in_range3 o3)
  (and (= o3 (* (to_rep6 ctx__split_fields4) 8)) (< o3 1600)))))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref initial_rate)))

;; H
  (assert (= initial_rate1 o3))

;; H
  (assert (in_range3 initial_rate1))

;; H
  (assert (not (and (= bit_length 0) (< 0 suffix_len))))

;; H
  (assert (not (= suffix_len 0)))

;; H
  (assert (not (= (mod2 bit_length 8) 0)))

;; H
  (assert (and (= o4 (+ bit_length 7)) (in_range1 (+ bit_length 7))))

;; H
  (assert (= o5 (div1 o4 8)))

;; H
  (assert (= o6 (- o5 1)))

;; H
  (assert (= o7 (+ (to_rep1 (first (rt message))) o6)))

;; H
  (assert (and (= o8 o7) (in_range1 o7)))

;; H
  (assert (and (= o9 o8) (in_range4 o8)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref message_last)))

;; H
  (assert (= message_last1 o9))

;; H
  (assert
  (and (<= (to_rep1 (first (rt message))) message_last1)
  (<= message_last1 (to_rep1 (last (rt message))))))

;; H
  (assert
  (and (= o10 (+ (mod2 bit_length 8) suffix_len)) (in_range1
  (+ (mod2 bit_length 8) suffix_len))))

;; H
  (assert (= result4 (ite (<= o10 8) true false)))

;; H
  (assert (not (= result4 true)))

;; H
  (assert (< 1 message_byte_length1))

;; H
  (assert (= (- message_last1 1) r108s))

;; H
  (assert (in_range1 r108s))

(assert
;; WP_parameter_def
 ;; File "keccak-sponge.ads", line 265, characters 0-0
  (not (in_range1 (+ (- bit_length 8) (- 8 (mod2 bit_length 8))))))
(check-sat)
(exit)
