;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (count_type count_type) Bool)

(declare-const dummy2 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__my_ordered_sets__my_rec__f natural)(rec__my_ordered_sets__my_rec__g integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) natural
  (rec__my_ordered_sets__my_rec__f a))

(define-fun us_split_fields_G__projection ((a us_split_fields)) integer
  (rec__my_ordered_sets__my_rec__g a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___10__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__my_ordered_sets__my_rec__f
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__my_ordered_sets__my_rec__f
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__my_ordered_sets__my_rec__g
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_ordered_sets__my_rec__g
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const my_ordered_sets__my_rec__f__first__bit Int)

(declare-const my_ordered_sets__my_rec__f__last__bit Int)

(declare-const my_ordered_sets__my_rec__f__position Int)

;; my_ordered_sets__my_rec__f__first__bit_axiom
  (assert (<= 0 my_ordered_sets__my_rec__f__first__bit))

;; my_ordered_sets__my_rec__f__last__bit_axiom
  (assert
  (< my_ordered_sets__my_rec__f__first__bit my_ordered_sets__my_rec__f__last__bit))

;; my_ordered_sets__my_rec__f__position_axiom
  (assert (<= 0 my_ordered_sets__my_rec__f__position))

(declare-const my_ordered_sets__my_rec__g__first__bit Int)

(declare-const my_ordered_sets__my_rec__g__last__bit Int)

(declare-const my_ordered_sets__my_rec__g__position Int)

;; my_ordered_sets__my_rec__g__first__bit_axiom
  (assert (<= 0 my_ordered_sets__my_rec__g__first__bit))

;; my_ordered_sets__my_rec__g__last__bit_axiom
  (assert
  (< my_ordered_sets__my_rec__g__first__bit my_ordered_sets__my_rec__g__last__bit))

;; my_ordered_sets__my_rec__g__position_axiom
  (assert (<= 0 my_ordered_sets__my_rec__g__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((my_rec__ref 0))
(((mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content
                                                              a))

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content us_rep)))))
(define-fun element_type__ref___5__projection ((a element_type__ref)) us_rep
  (element_type__content a))

(declare-fun to_rep2 (count_type) Int)

(declare-fun of_rep2 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__my_ordered_sets__n__set__capacity count_type)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) count_type
  (rec__my_ordered_sets__n__set__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__my_ordered_sets__n__set us_main_type)))))
(define-fun us_split_fields_Set__2__projection ((a us_split_fields2)) us_main_type
  (rec__my_ordered_sets__n__set a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___11__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                  a))

(define-fun us_rep___12__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                   a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__my_ordered_sets__n__set__capacity
                            (us_split_discrs1 a))) (to_rep2
                                                   (rec__my_ordered_sets__n__set__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__my_ordered_sets__n__set
                            (us_split_fields3 a))
                            (rec__my_ordered_sets__n__set
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const my_ordered_sets__n__set__capacity__first__bit Int)

(declare-const my_ordered_sets__n__set__capacity__last__bit Int)

(declare-const my_ordered_sets__n__set__capacity__position Int)

;; my_ordered_sets__n__set__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_sets__n__set__capacity__first__bit))

;; my_ordered_sets__n__set__capacity__last__bit_axiom
  (assert
  (< my_ordered_sets__n__set__capacity__first__bit my_ordered_sets__n__set__capacity__last__bit))

;; my_ordered_sets__n__set__capacity__position_axiom
  (assert (<= 0 my_ordered_sets__n__set__capacity__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((set__ref 0)) (((mk_set__ref (set__content us_rep1)))))
(define-fun set__ref___3__projection ((a set__ref)) us_rep1 (set__content a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__my_ordered_sets__n__cursor__node count_type)))))
(define-fun us_split_fields_Node__2__projection ((a us_split_fields4)) count_type
  (rec__my_ordered_sets__n__cursor__node a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                   a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep2
                            (rec__my_ordered_sets__n__cursor__node
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__my_ordered_sets__n__cursor__node
                                                   (us_split_fields5 b))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const my_ordered_sets__n__cursor__node__first__bit Int)

(declare-const my_ordered_sets__n__cursor__node__last__bit Int)

(declare-const my_ordered_sets__n__cursor__node__position Int)

;; my_ordered_sets__n__cursor__node__first__bit_axiom
  (assert (<= 0 my_ordered_sets__n__cursor__node__first__bit))

;; my_ordered_sets__n__cursor__node__last__bit_axiom
  (assert
  (< my_ordered_sets__n__cursor__node__first__bit my_ordered_sets__n__cursor__node__last__bit))

;; my_ordered_sets__n__cursor__node__position_axiom
  (assert (<= 0 my_ordered_sets__n__cursor__node__position))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((cursor__ref 0))
(((mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref___2__projection ((a cursor__ref)) us_rep2 (cursor__content
                                                                  a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun length1 (Int us_rep1) Int)

(declare-fun length__function_guard1 (Int Int us_rep1) Bool)

(define-fun dynamic_invariant ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_142)))

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun oeq1 (Int us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep2
                (rec__my_ordered_sets__n__set__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep1)) (! (dynamic_invariant
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 us_rep)))))
(define-fun element_type__ref___7__projection ((a element_type__ref1)) us_rep
  (element_type__content1 a))

(declare-sort extended_index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (extended_index extended_index) Bool)

(declare-const dummy6 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep3
  (sequence__content a))

(declare-fun get (us_rep3 Int) us_rep)

(declare-fun get__function_guard (us_rep us_rep3 Int) Bool)

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-datatypes ((key_type__ref 0))
(((mk_key_type__ref (key_type__content us_rep2)))))
(define-fun key_type__ref___2__projection ((a key_type__ref)) us_rep2
  (key_type__content a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq8 (us_rep4 us_rep4) Bool)

(declare-const dummy8 us_rep4)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content us_rep4)))))
(define-fun map__ref___2__projection ((a map__ref)) us_rep4 (map__content a))

(declare-fun has_key (us_rep4 us_rep2) Bool)

(declare-fun has_key__function_guard (Bool us_rep4 us_rep2) Bool)

(declare-fun get1 (us_rep4 us_rep2) Int)

(declare-fun get__function_guard1 (Int us_rep4 us_rep2) Bool)

(declare-fun elements (us_rep1) us_rep3)

(declare-fun elements__function_guard (us_rep3 us_rep1) Bool)

(declare-fun positions (us_rep1) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep1) Bool)

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

(declare-fun is_empty1 (Int us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool Int us_rep1) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep5 0)

(declare-fun bool_eq5 (us_rep5 us_rep5) Bool)

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep5) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq9 (us_rep5 us_rep5) Bool)

(declare-const dummy9 us_rep5)

(declare-datatypes ((set__ref1 0))
(((mk_set__ref1 (set__content1 us_rep5)))))
(define-fun set__ref___4__projection ((a set__ref1)) us_rep5 (set__content1
                                                             a))

(declare-fun oeq2 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep5 us_rep5) Bool)

(define-fun oeq3 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length2 left) (length2 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (bool_eq
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)

(declare-fun model__ (us_rep1) us_rep5)

(declare-fun model____function_guard (us_rep5 us_rep1) Bool)

(declare-fun assign__specific_post (Int us_split_fields2 us_split_discrs
  us_rep1 us_split_fields2) Bool)

(declare-datatypes ((element_type__ref2 0))
(((mk_element_type__ref2 (element_type__content2 us_rep)))))
(define-fun element_type__ref___6__projection ((a element_type__ref2)) us_rep
  (element_type__content2 a))

(declare-fun contains (us_rep5 us_rep) Bool)

(declare-fun contains__function_guard (Bool us_rep5 us_rep) Bool)

(declare-fun included_except (us_rep5 us_rep5 us_rep) Bool)

(declare-fun included_except__function_guard (Bool us_rep5 us_rep5
  us_rep) Bool)

(declare-fun oeq4 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep4 us_rep4) Bool)

(declare-fun mapping_preserved_except (us_rep3 us_rep3 us_rep4 us_rep4
  us_rep2) Bool)

(declare-fun mapping_preserved_except__function_guard (Bool us_rep3 us_rep3
  us_rep4 us_rep4 us_rep2) Bool)

(define-fun has_element ((container us_rep1)
  (position us_rep2)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep1 us_rep2) Bool)

(declare-fun has_element1 (Int us_rep1 us_rep2) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep1 us_rep2) Bool)

(define-fun element ((container us_rep1)
  (position us_rep2)) us_rep (get (elements container)
                             (get1 (positions container) position)))

(declare-fun element__function_guard (us_rep us_rep1 us_rep2) Bool)

(declare-fun element1 (Int us_rep1 us_rep2) us_rep)

(declare-fun element__function_guard1 (us_rep Int us_rep1 us_rep2) Bool)

(declare-fun replace_element__specific_post (Int us_split_fields2
  us_split_discrs us_rep2 us_rep us_split_fields2) Bool)

(declare-fun move__specific_post (Int us_split_fields2 us_split_discrs
  us_split_fields2 us_split_discrs us_split_fields2 us_split_fields2) Bool)

(define-fun contains1 ((container us_rep1)
  (item us_rep)) Bool (contains (model__ container) item))

(declare-fun contains__function_guard1 (Bool us_rep1 us_rep) Bool)

(declare-fun contains2 (Int us_rep1 us_rep) Bool)

(declare-fun contains__function_guard2 (Bool Int us_rep1 us_rep) Bool)

;; contains__post__dispatch_axiom
  (assert true)

(define-fun my_lt ((x us_rep)
  (y us_rep)) Bool (< (to_rep1
                      (rec__my_ordered_sets__my_rec__f (us_split_fields1 x)))
  (to_rep1 (rec__my_ordered_sets__my_rec__f (us_split_fields1 y)))))

(declare-fun my_lt__function_guard (Bool us_rep us_rep) Bool)

(define-fun equivalent_elements ((left us_rep)
  (right us_rep)) Bool (and (not (my_lt left right)) (not (my_lt right left))))

(declare-fun equivalent_elements__function_guard (Bool us_rep us_rep) Bool)

(declare-fun ole (us_rep5 us_rep5) Bool)

(declare-fun ole__function_guard (Bool us_rep5 us_rep5) Bool)

(define-fun range_equal ((left us_rep3) (right us_rep3) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (bool_eq (get left i) (get right i)) true)))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep3 us_rep3 Int Int) Bool)

(define-fun range_shifted ((left us_rep3) (right us_rep3) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (bool_eq (get left i)
                                  (get right (+ i offset))) true)))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (bool_eq
                                              (get left (- i offset))
                                              (get right i)) true)))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep3 us_rep3 Int Int
  Int) Bool)

(define-fun e_bigger_than_range ((container us_rep3) (fst Int) (lst Int)
  (item us_rep)) Bool (ite (forall ((i Int))
                           (=> (and (<= fst i) (<= i lst))
                           (= (my_lt (get container i) item) true)))
                      true false))

(declare-fun e_bigger_than_range__function_guard (Bool us_rep3 Int Int
  us_rep) Bool)

(define-fun e_smaller_than_range ((container us_rep3) (fst Int) (lst Int)
  (item us_rep)) Bool (ite (forall ((i Int))
                           (=> (and (<= fst i) (<= i lst))
                           (= (my_lt item (get container i)) true)))
                      true false))

(declare-fun e_smaller_than_range__function_guard (Bool us_rep3 Int Int
  us_rep) Bool)

(define-fun e_is_find ((container us_rep3) (item us_rep)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range container 1 (- position 1)
                            item) (of_int 1)) (ite (< position (length2
                                                               container))
                                              (e_smaller_than_range container
                                              (+ position 1)
                                              (length2 container) item)
                                              (of_int 1))))

(declare-fun e_is_find__function_guard (Bool us_rep3 us_rep Int) Bool)

(declare-fun p_positions_shifted (us_rep4 us_rep4 Int Int) Bool)

(declare-fun p_positions_shifted__function_guard (Bool us_rep4 us_rep4 Int
  Int) Bool)

(declare-fun insert__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields4 Bool us_split_fields2 us_split_fields4 Bool) Bool)

(declare-fun find (us_rep3 us_rep) Int)

(declare-fun find__function_guard (Int us_rep3 us_rep) Bool)

(declare-fun insert__2__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (bool_eq
                                                                    (get left
                                                                    i)
                                                                    (get
                                                                    right i)) true))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(declare-fun include__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(declare-fun replace__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(declare-fun exclude__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(declare-fun delete__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(declare-const no_element us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun delete__2__specific_post (Int us_split_fields2 us_split_discrs
  us_split_fields4 us_split_fields2 us_split_fields4) Bool)

(declare-fun first (us_rep1) us_rep2)

(declare-fun first__function_guard (us_rep2 us_rep1) Bool)

(declare-fun first1 (Int us_rep1) us_rep2)

(declare-fun first__function_guard1 (us_rep2 Int us_rep1) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq2 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

;; first__post__dispatch_axiom
  (assert true)

(declare-fun next (us_rep1 us_rep2) us_rep2)

(declare-fun next__function_guard (us_rep2 us_rep1 us_rep2) Bool)

(declare-fun next1 (Int us_rep1 us_rep2) us_rep2)

(declare-fun next__function_guard1 (us_rep2 Int us_rep1 us_rep2) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position us_rep2))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq2 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq2 position no_element) true)
          (= (get1 (positions container) position) (length container)))
     (= (bool_eq2 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

;; next__post__dispatch_axiom
  (assert true)

(declare-fun find1 (us_rep1 us_rep) us_rep2)

(declare-fun find__function_guard1 (us_rep2 us_rep1 us_rep) Bool)

(declare-fun find2 (Int us_rep1 us_rep) us_rep2)

(declare-fun find__function_guard2 (us_rep2 Int us_rep1 us_rep) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((item us_rep))
  (! (let ((result (find1 container item)))
     (ite (not (= (contains (model__ container) item) true))
     (and (not (= (has_key (positions container) result) true))
     (= (bool_eq2 result no_element) true))
     (and
     (and (= (has_key (positions container) result) true)
     (= (get1 (positions container) result) (find (elements container) item)))
     (= (equivalent_elements (element container result) item) true)))) :pattern (
  (find1 container item)) ))))

;; find__post__dispatch_axiom
  (assert true)

(declare-fun contains3 (us_rep1 Int) Bool)

(declare-fun contains__function_guard3 (Bool us_rep1 Int) Bool)

(define-fun get_f ((x us_rep)) Int (to_rep1
                                   (rec__my_ordered_sets__my_rec__f
                                   (us_split_fields1 x))))

(declare-fun get_f__function_guard (Int us_rep) Bool)

(declare-sort key_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq10 (key_type key_type) Bool)

(declare-const dummy10 key_type)

(declare-datatypes ((key_type__ref1 0))
(((mk_key_type__ref1 (key_type__content1 key_type)))))
(define-fun key_type__ref___3__projection ((a key_type__ref1)) key_type
  (key_type__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_753 Int)
  (temp___is_init_750 Bool) (temp___skip_constant_751 Bool)
  (temp___do_toplevel_752 Bool)) Bool (=>
                                      (or (= temp___is_init_750 true)
                                      (<= 1 2147483647)) (in_range5
                                      temp___expr_753)))

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

;; contains__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=> (dynamic_invariant1 key true true true)
     (= (= (contains3 container key) true)
     (exists ((e us_rep))
     (and (= (contains (model__ container) e) true)
     (= (equivalent_keys key (get_f e)) true))))) :pattern ((contains3
                                                            container key)) ))))

(declare-fun find3 (us_rep3 Int) Int)

(declare-fun find__function_guard3 (Int us_rep3 Int) Bool)

(declare-fun find4 (us_rep1 Int) us_rep2)

(declare-fun find__function_guard4 (us_rep2 us_rep1 Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=> (dynamic_invariant1 key true true true)
     (let ((result (find4 container key)))
     (ite (forall ((e us_rep))
          (=> (= (contains (model__ container) e) true)
          (not (= (equivalent_keys key (get_f e)) true))))
     (and (not (= (has_key (positions container) result) true))
     (= (bool_eq2 result no_element) true))
     (and
     (and (= (has_key (positions container) result) true)
     (= (get1 (positions container) result) (find3 (elements container) key)))
     (= (equivalent_keys (get_f (element container result)) key) true))))) :pattern (
  (find4 container key)) ))))

(declare-fun m_included_except (us_rep5 us_rep5 Int) Bool)

(declare-fun m_included_except__function_guard (Bool us_rep5 us_rep5
  Int) Bool)

(define-fun element2 ((container us_rep1)
  (key Int)) us_rep (element container (find4 container key)))

(declare-fun element__function_guard2 (us_rep us_rep1 Int) Bool)

(define-fun in_range6 ((rec__my_ordered_sets__n__set__capacity1 Int)
  (a us_rep1)) Bool (= rec__my_ordered_sets__n__set__capacity1 (to_rep2
                                                               (rec__my_ordered_sets__n__set__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep1) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))

(declare-const my_ordered_sets__n__set__capacity__first__bit1 Int)

(declare-const my_ordered_sets__n__set__capacity__last__bit1 Int)

(declare-const my_ordered_sets__n__set__capacity__position1 Int)

;; my_ordered_sets__n__set__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_sets__n__set__capacity__first__bit1))

;; my_ordered_sets__n__set__capacity__last__bit_axiom
  (assert
  (< my_ordered_sets__n__set__capacity__first__bit1 my_ordered_sets__n__set__capacity__last__bit1))

;; my_ordered_sets__n__set__capacity__position_axiom
  (assert (<= 0 my_ordered_sets__n__set__capacity__position1))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-const dummy11 us_rep1)

(declare-datatypes ((tlS__ref 0)) (((mk_tlS__ref (tlS__content us_rep1)))))
(define-fun tlS__ref___2__projection ((a tlS__ref)) us_rep1 (tlS__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq11 a b) (oeq a b)) :pattern ((user_eq11 a b)) )))

(define-fun dynamic_invariant2 ((temp___expr_799 us_rep1)
  (temp___is_init_796 Bool) (temp___skip_constant_797 Bool)
  (temp___do_toplevel_798 Bool)) Bool (=>
                                      (not (= temp___skip_constant_797 true))
                                      (in_range6 10 temp___expr_799)))

(define-fun default_initial_assumption ((temp___expr_801 us_rep1)
  (temp___skip_top_level_802 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__my_ordered_sets__n__set__capacity
                                            (us_split_discrs1
                                            temp___expr_801))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_802 true))
                                         (= (is_empty temp___expr_801) true))))

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range7 ((rec__my_ordered_sets__n__set__capacity1 Int)
  (a us_rep1)) Bool (= rec__my_ordered_sets__n__set__capacity1 (to_rep2
                                                               (rec__my_ordered_sets__n__set__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep1) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment7 a))))

(declare-const my_ordered_sets__n__set__capacity__first__bit2 Int)

(declare-const my_ordered_sets__n__set__capacity__last__bit2 Int)

(declare-const my_ordered_sets__n__set__capacity__position2 Int)

;; my_ordered_sets__n__set__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_sets__n__set__capacity__first__bit2))

;; my_ordered_sets__n__set__capacity__last__bit_axiom
  (assert
  (< my_ordered_sets__n__set__capacity__first__bit2 my_ordered_sets__n__set__capacity__last__bit2))

;; my_ordered_sets__n__set__capacity__position_axiom
  (assert (<= 0 my_ordered_sets__n__set__capacity__position2))

(declare-fun user_eq12 (us_rep1 us_rep1) Bool)

(declare-const dummy12 us_rep1)

(declare-datatypes ((tkS__ref 0)) (((mk_tkS__ref (tkS__content us_rep1)))))
(define-fun tkS__ref___2__projection ((a tkS__ref)) us_rep1 (tkS__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq12 a b) (oeq a b)) :pattern ((user_eq12 a b)) )))

(define-fun dynamic_invariant3 ((temp___expr_808 us_rep1)
  (temp___is_init_805 Bool) (temp___skip_constant_806 Bool)
  (temp___do_toplevel_807 Bool)) Bool (=>
                                      (not (= temp___skip_constant_806 true))
                                      (in_range7 10 temp___expr_808)))

(define-fun default_initial_assumption1 ((temp___expr_810 us_rep1)
  (temp___skip_top_level_811 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__my_ordered_sets__n__set__capacity
                                            (us_split_discrs1
                                            temp___expr_810))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_811 true))
                                         (= (is_empty temp___expr_810) true))))

(declare-const k__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq13 (positive positive) Bool)

(declare-const dummy13 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant6 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range8
                                     temp___expr_39)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep2 (mk___split_fields2 (of_rep2 0)))))

(declare-sort positive_count_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq14 (positive_count_type positive_count_type) Bool)

(declare-const dummy14 positive_count_type)

(declare-datatypes ((positive_count_type__ref 0))
(((mk_positive_count_type__ref
  (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___2__projection ((a positive_count_type__ref)) positive_count_type
  (positive_count_type__content a))

(define-fun dynamic_invariant7 ((temp___expr_544 Int)
  (temp___is_init_541 Bool) (temp___skip_constant_542 Bool)
  (temp___do_toplevel_543 Bool)) Bool (=>
                                      (or (= temp___is_init_541 true)
                                      (<= 1 2147483647)) (in_range9
                                      temp___expr_544)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq7 a b) (oeq3 a b)) :pattern ((user_eq7 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_592 us_rep3)
  (temp___skip_top_level_593 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_593 true))
                                         (= (length2 temp___expr_592) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((item us_rep))
  (! (let ((result (find container item)))
     (and
     (=> (< 0 result)
     (and (<= result (length2 container))
     (= (equivalent_elements item (get container result)) true)))
     (dynamic_invariant result true false true))) :pattern ((find container
                                                            item)) ))))

(define-fun e_elements_included ((left us_rep3)
  (right us_rep3)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length2 left)))
                             (and (< 0 (find right (get left i)))
                             (= (bool_eq
                                (get right (find right (get left i)))
                                (get left i)) true))))
                        true false))

(declare-fun e_elements_included__function_guard (Bool us_rep3 us_rep3) Bool)

(declare-fun length3 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun is_empty2 (us_rep4) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep4) Bool)

(define-fun default_initial_assumption3 ((temp___expr_612 us_rep4)
  (temp___skip_top_level_613 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_613 true))
                                         (and
                                         (= (is_empty2 temp___expr_612) true)
                                         (= (length3 temp___expr_612) 0))))

(declare-fun keys_included (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard (Bool us_rep4 us_rep4) Bool)

;; p_positions_shifted__post_axiom
  (assert
  (forall ((small us_rep4) (big us_rep4))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant7 cut true true true) (dynamic_invariant count
     true true true))
     (= (= (p_positions_shifted small big cut count) true)
     (and
     (and (= (keys_included small big) true)
     (forall ((i us_rep2))
     (=> (= (has_key small i) true)
     (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i))
     (= (- (get1 big i) count) (get1 small i))))))
     (forall ((i us_rep2))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get1 big i) count))
     (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted
                                                            small big cut
                                                            count)) ))))

;; mapping_preserved_except__post_axiom
  (assert
  (forall ((e_left us_rep3) (e_right us_rep3))
  (forall ((p_left us_rep4) (p_right us_rep4))
  (forall ((position us_rep2))
  (! (=>
     (= (mapping_preserved_except e_left e_right p_left p_right position) true)
     (and (= (keys_included p_left p_right) true)
     (forall ((c us_rep2))
     (=> (= (has_key p_left c) true)
     (=> (not (= (bool_eq2 c position) true))
     (= (bool_eq (get e_left (get1 p_left c)) (get e_right (get1 p_right c))) true)))))) :pattern (
  (mapping_preserved_except e_left e_right p_left p_right position)) )))))

(declare-fun is_empty3 (us_rep5) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep5) Bool)

(define-fun default_initial_assumption4 ((temp___expr_559 us_rep5)
  (temp___skip_top_level_560 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_560 true))
                                         (= (is_empty3 temp___expr_559) true)))

(declare-fun length4 (us_rep5) Int)

(declare-fun length__function_guard4 (Int us_rep5) Bool)

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length4 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

;; elements__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (elements container)))
     (and
     (and
     (and (= (length2 result) (length container))
     (forall ((temp___626 Int))
     (=>
     (and (in_range4 temp___626)
     (= (iter_has_element result temp___626) true))
     (= (contains (model__ container) (get result temp___626)) true))))
     (forall ((item us_rep))
     (=> (= (contains (model__ container) item) true)
     (and (< 0 (find result item))
     (= (equivalent_elements (get result (find result item)) item) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (and (= (find result (get result i)) i)
     (= (e_is_find result (get result i) i) true)))))) :pattern ((elements
                                                                 container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep2))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep2))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq2 i j) true))))))))) :pattern (
  (positions container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (ite (= (oeq left right) true)
     (= (oeq3 (elements left) (elements right)) true)
     (or
     (not (= (e_elements_included (elements left) (elements right)) true))
     (not (= (e_elements_included (elements right) (elements left)) true)))) :pattern (
  (oeq left right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; element__post__dispatch_axiom
  (assert true)

;; has_element__post__dispatch_axiom
  (assert true)

;; contains__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((item us_rep))
  (! (=> (= (of_int 1) true)
     (=>
     (exists ((e us_rep))
     (and (= (contains container e) true)
     (= (equivalent_elements e item) true)))
     (= (contains container item) true))) :pattern ((contains container item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep5)) (! (dynamic_invariant (length4 container)
  true false true) :pattern ((length4 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (ole left right) true)
     (forall ((item us_rep))
     (=> (= (contains left item) true) (= (contains right item) true)))) :pattern (
  (ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq2 left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (is_empty3 container)))
     (and
     (= (= result true)
     (forall ((item us_rep)) (not (= (contains container item) true))))
     (= (= result true) (= (length4 container) 0)))) :pattern ((is_empty3
                                                               container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (forall ((item us_rep))
  (! (= (= (included_except left right item) true)
     (forall ((e us_rep))
     (=> (= (contains left e) true)
     (or (= (contains right e) true) (= (equivalent_elements e item) true))))) :pattern (
  (included_except left right item)) ))))

(define-fun dynamic_invariant8 ((temp___expr_585 Int)
  (temp___is_init_582 Bool) (temp___skip_constant_583 Bool)
  (temp___do_toplevel_584 Bool)) Bool (=>
                                      (or (= temp___is_init_582 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_585)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length2 container)) )))

;; get__post_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key us_rep2))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep2))
     (and (= (has_key container k) true) (= (bool_eq2 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-sort element_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq15 (element_type element_type) Bool)

(declare-const dummy15 element_type)

(declare-datatypes ((element_type__ref3 0))
(((mk_element_type__ref3 (element_type__content3 element_type)))))
(define-fun element_type__ref___8__projection ((a element_type__ref3)) element_type
  (element_type__content3 a))

(define-fun dynamic_invariant9 ((temp___expr_605 Int)
  (temp___is_init_602 Bool) (temp___skip_constant_603 Bool)
  (temp___do_toplevel_604 Bool)) Bool (=>
                                      (or (= temp___is_init_602 true)
                                      (<= 1 2147483647)) (in_range10
                                      temp___expr_605)))

(declare-fun witness (us_rep4 us_rep2) Int)

(declare-fun witness__function_guard (Int us_rep4 us_rep2) Bool)

(declare-fun w_get (us_rep4 Int) Int)

(declare-fun w_get__function_guard (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key us_rep2))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep2))
     (=> (= (has_key container k) true)
     (= (= (bool_eq2 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant9 result true false true)))) :pattern ((get1 container
                                                              key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant (length3 container)
  true false true) :pattern ((length3 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key us_rep2))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key us_rep2))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty2 container) true)
     (forall ((key us_rep2)) (not (= (has_key container key) true)))) :pattern (
  (is_empty2 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included left right) true)
     (forall ((key us_rep2))
     (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern (
  (keys_included left right)) )))

(declare-fun has_witness (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key us_rep2))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant9
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(define-fun e_bigger_than_range1 ((container us_rep3) (fst Int) (lst Int)
  (key Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (< (get_f (get container i)) key)))
                  true false))

(declare-fun e_bigger_than_range__function_guard1 (Bool us_rep3 Int Int
  Int) Bool)

(define-fun e_smaller_than_range1 ((container us_rep3) (fst Int) (lst Int)
  (key Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (< key (get_f (get container i)))))
                  true false))

(declare-fun e_smaller_than_range__function_guard1 (Bool us_rep3 Int Int
  Int) Bool)

(define-fun e_is_find1 ((container us_rep3) (key Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range1 container 1 (- position 1)
                            key) (of_int 1)) (ite (< position (length2
                                                              container))
                                             (e_smaller_than_range1 container
                                             (+ position 1)
                                             (length2 container) key)
                                             (of_int 1))))

(declare-fun e_is_find__function_guard1 (Bool us_rep3 Int Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key Int))
  (! (=> (dynamic_invariant1 key true true true)
     (let ((result (find3 container key)))
     (and
     (=> (< 0 result)
     (and
     (and (<= result (length2 container))
     (= (equivalent_keys key (get_f (get container result))) true))
     (= (e_is_find1 container key result) true))) (dynamic_invariant result
     true false true)))) :pattern ((find3 container key)) ))))

;; m_included_except__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (forall ((key Int))
  (! (=> (dynamic_invariant1 key true true true)
     (= (= (m_included_except left right key) true)
     (forall ((e us_rep))
     (=> (= (contains left e) true)
     (or (= (contains right e) true)
     (= (equivalent_keys (get_f e) key) true)))))) :pattern ((m_included_except
                                                             left right key)) ))))

(declare-const l__split_fields us_main_type)

(declare-const k__split_fields us_main_type)

(declare-const c__split_fields count_type)

(declare-const us Int)

(declare-const us1 Int)

(declare-const temp___1090 count_type)

(declare-const temp___1091 count_type)

(declare-const o integer)

(declare-const o1 natural)

(declare-const o2 natural)

(declare-const o3 integer)

(declare-const o4 natural)

(declare-const o5 integer)

(declare-const o6 integer)

(declare-const o7 natural)

(declare-const o8 natural)

(declare-const o9 integer)

(declare-const o10 natural)

(declare-const o11 integer)

(declare-const o12 integer)

(declare-const o13 natural)

(declare-const o14 natural)

(declare-const o15 integer)

(declare-const o16 natural)

(declare-const o17 integer)

(declare-const o18 integer)

(declare-const o19 natural)

(declare-const o20 natural)

(declare-const o21 integer)

(declare-const o22 us_rep)

(declare-const o23 integer)

(declare-const o24 natural)

(declare-const o25 us_split_fields)

(declare-const o26 us_rep)

(declare-const result us_split_fields__ref2)

(declare-const c__split_fields1 us_split_fields4)

(declare-const result1 us_split_fields__ref2)

(declare-const c__split_fields2 us_split_fields4)

(declare-const my_ordered_sets__n__insert__2__container__fields us_split_fields2)

(declare-const result2 us_split_fields__ref1)

(declare-const l__split_fields1 us_split_fields2)

(declare-const my_ordered_sets__n__insert__2__container__fields1 us_split_fields2)

(declare-const result3 us_split_fields__ref1)

(declare-const l__split_fields2 us_split_fields2)

(declare-const c__split_fields3 us_split_fields4)

(declare-const b Bool)

(declare-const my_ordered_sets__n__insert__container__fields us_split_fields2)

(declare-const result4 us_split_fields__ref1)

(declare-const l__split_fields3 us_split_fields2)

(declare-const my_ordered_sets__n__replace_element__container__fields us_split_fields2)

(declare-const result5 us_split_fields__ref1)

(declare-const l__split_fields4 us_split_fields2)

(declare-const my_ordered_sets__n__replace__container__fields us_split_fields2)

(declare-const result6 us_split_fields__ref1)

(declare-const l__split_fields5 us_split_fields2)

(declare-const my_ordered_sets__n__assign__target__fields us_split_fields2)

(declare-const result7 us_split_fields__ref1)

(declare-const k__split_fields1 us_split_fields2)

(declare-const my_ordered_sets__n__move__source__fields us_split_fields2)

(declare-const my_ordered_sets__n__move__target__fields us_split_fields2)

(declare-const result8 us_split_fields__ref1)

(declare-const l__split_fields6 us_split_fields2)

(declare-const result9 us_split_fields__ref1)

(declare-const k__split_fields2 us_split_fields2)

(define-fun o27 () us_rep (mk___rep (mk___split_fields o16 o17)))

(define-fun o28 () us_rep (mk___rep (mk___split_fields o10 o11)))

(define-fun o29 () us_rep (mk___rep (mk___split_fields o4 o5)))

(define-fun temp___10911 () us_rep2 (mk___rep2
                                    (mk___split_fields2 temp___1091)))

(define-fun temp___10901 () us_rep2 (mk___rep2
                                    (mk___split_fields2 temp___1090)))

;; H
  (assert (and (= us 10) (in_range3 10)))

;; H
  (assert (default_initial_assumption
  (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep2 (rec__my_ordered_sets__n__set__capacity l__split_discrs))))

;; H
  (assert (and (= us1 10) (in_range3 10)))

;; H
  (assert (default_initial_assumption1
  (mk___rep1 k__split_discrs (mk___split_fields1 k__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep2 (rec__my_ordered_sets__n__set__capacity k__split_discrs))))

;; H
  (assert
  (= (is_empty
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields))) true))

;; H
  (assert
  (and
  (= temp___10901 (first
                  (mk___rep1 l__split_discrs
                  (mk___split_fields1 l__split_fields))))
  (ite (= (= (length
             (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields))) 0) true)
  (= (bool_eq2 temp___10901 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___10901) true)
  (= (get1
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___10901) 1)))))

;; H
  (assert
  (= result (mk___split_fields__ref2 (mk___split_fields2 c__split_fields))))

;; H
  (assert (= c__split_fields1 (mk___split_fields2 temp___1090)))

;; H
  (assert
  (and
  (= temp___10911 (next
                  (mk___rep1 l__split_discrs
                  (mk___split_fields1 l__split_fields))
                  (mk___rep2 c__split_fields1)))
  (ite (= (ite (= (bool_eq2 (mk___rep2 c__split_fields1) no_element) false) (=
          (get1
          (positions
          (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
          (mk___rep2 c__split_fields1)) (length
                                        (mk___rep1 l__split_discrs
                                        (mk___split_fields1 l__split_fields)))) true) true)
  (= (bool_eq2 temp___10911 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___10911) true)
  (= (get1
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___10911) (+ (get1
                      (positions
                      (mk___rep1 l__split_discrs
                      (mk___split_fields1 l__split_fields)))
                      (mk___rep2 c__split_fields1)) 1))))))

;; H
  (assert (= result1 (mk___split_fields__ref2 c__split_fields1)))

;; H
  (assert (= c__split_fields2 (mk___split_fields2 temp___1091)))

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= (to_rep1 o1) 1))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields)) (+ (length
                                                           (mk___rep1
                                                           l__split_discrs
                                                           (mk___split_fields1
                                                           l__split_fields))) 1))
  (= (contains
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields)) o29) true))
  (= (bool_eq
     (get
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields)) o29)) o29) true))
  (= (ole
     (model__
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields))) true))
  (= (included_except
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields))
     (model__
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     o29) true))
  (= (range_equal
     (elements
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields)) 1
     (- (find
        (elements
        (mk___rep1 l__split_discrs
        my_ordered_sets__n__insert__2__container__fields)) o29) 1)) true))
  (= (range_shifted
     (elements
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields)) o29)
     (length
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields))) 1) true))
  (= (p_positions_shifted
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields)) o29) 1) true)))

;; H
  (assert
  (= result2 (mk___split_fields__ref1 (mk___split_fields1 l__split_fields))))

;; H
  (assert
  (= l__split_fields1 my_ordered_sets__n__insert__2__container__fields))

;; H
  (assert (= (to_rep o6) 2))

;; H
  (assert (= (to_rep1 o7) 2))

;; H
  (assert (= o7 o8))

;; H
  (assert (= o6 o9))

;; H
  (assert (= o10 o8))

;; H
  (assert (= o11 o9))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1)) (+ (length
                                                            (mk___rep1
                                                            l__split_discrs
                                                            l__split_fields1)) 1))
  (= (contains
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1)) o28) true))
  (= (bool_eq
     (get
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1)) o28)) o28) true))
  (= (ole (model__ (mk___rep1 l__split_discrs l__split_fields1))
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1))) true))
  (= (included_except
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1))
     (model__ (mk___rep1 l__split_discrs l__split_fields1)) o28) true))
  (= (range_equal (elements (mk___rep1 l__split_discrs l__split_fields1))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1)) 1
     (- (find
        (elements
        (mk___rep1 l__split_discrs
        my_ordered_sets__n__insert__2__container__fields1)) o28) 1)) true))
  (= (range_shifted (elements (mk___rep1 l__split_discrs l__split_fields1))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1)) o28)
     (length (mk___rep1 l__split_discrs l__split_fields1)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep1 l__split_discrs l__split_fields1))
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__2__container__fields1)) o28) 1) true)))

;; H
  (assert (= result3 (mk___split_fields__ref1 l__split_fields1)))

;; H
  (assert
  (= l__split_fields2 my_ordered_sets__n__insert__2__container__fields1))

;; H
  (assert (= (to_rep o12) 1))

;; H
  (assert (= (to_rep1 o13) 1))

;; H
  (assert (= o13 o14))

;; H
  (assert (= o12 o15))

;; H
  (assert (= o16 o14))

;; H
  (assert (= o17 o15))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (contains
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields)) o27) true)
  (= (has_key
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (mk___rep2 c__split_fields3)) true))
  (= (equivalent_elements
     (element
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields)
     (mk___rep2 c__split_fields3)) o27) true))
  (= (e_is_find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields)) o27
     (get1
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (mk___rep2 c__split_fields3))) true))
  (ite (= (contains (model__ (mk___rep1 l__split_discrs l__split_fields2))
          o27) true)
  (and
  (and
  (and (not (= b true))
  (= (oeq2
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (model__ (mk___rep1 l__split_discrs l__split_fields2))) true))
  (= (oeq3
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (elements (mk___rep1 l__split_discrs l__split_fields2))) true))
  (= (oeq4
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (positions (mk___rep1 l__split_discrs l__split_fields2))) true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= b true)
  (= (length
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields)) (+ (length
                                                        (mk___rep1
                                                        l__split_discrs
                                                        l__split_fields2)) 1)))
  (= (bool_eq
     (element
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields)
     (mk___rep2 c__split_fields3)) o27) true))
  (= (ole (model__ (mk___rep1 l__split_discrs l__split_fields2))
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))) true))
  (= (included_except
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (model__ (mk___rep1 l__split_discrs l__split_fields2)) o27) true))
  (= (range_equal (elements (mk___rep1 l__split_discrs l__split_fields2))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields)) 1
     (- (get1
        (positions
        (mk___rep1 l__split_discrs
        my_ordered_sets__n__insert__container__fields))
        (mk___rep2 c__split_fields3)) 1)) true))
  (= (range_shifted (elements (mk___rep1 l__split_discrs l__split_fields2))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (get1
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (mk___rep2 c__split_fields3))
     (length (mk___rep1 l__split_discrs l__split_fields2)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep1 l__split_discrs l__split_fields2))
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (get1
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__insert__container__fields))
     (mk___rep2 c__split_fields3)) 1) true)))))

;; H
  (assert (= result4 (mk___split_fields__ref1 l__split_fields2)))

;; H
  (assert (= l__split_fields3 my_ordered_sets__n__insert__container__fields))

;; H
  (assert
  (not
  (= (contains (model__ (mk___rep1 l__split_discrs l__split_fields3))
     (mk___rep (mk___split_fields (of_rep1 3) (of_rep 4)))) true)))

;; H
  (assert (not (= b true)))

;; H
  (assert (= (to_rep o18) 2))

;; H
  (assert (= (to_rep1 o19) 1))

;; H
  (assert (= o19 o20))

;; H
  (assert (= o18 o21))

;; H
  (assert (= o22 (mk___rep (mk___split_fields o20 o21))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields)) (length
                                                              (mk___rep1
                                                              l__split_discrs
                                                              l__split_fields3)))
  (= (bool_eq
     (element
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields)
     (mk___rep2 c__split_fields3)) o22) true))
  (= (contains
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields)) o22) true))
  (= (included_except (model__ (mk___rep1 l__split_discrs l__split_fields3))
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields))
     (element (mk___rep1 l__split_discrs l__split_fields3)
     (mk___rep2 c__split_fields3))) true))
  (= (included_except
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields))
     (model__ (mk___rep1 l__split_discrs l__split_fields3)) o22) true))
  (= (mapping_preserved_except
     (elements (mk___rep1 l__split_discrs l__split_fields3))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields))
     (positions (mk___rep1 l__split_discrs l__split_fields3))
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields))
     (mk___rep2 c__split_fields3)) true))
  (= (oeq4
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace_element__container__fields))
     (positions (mk___rep1 l__split_discrs l__split_fields3))) true)))

;; H
  (assert (= result5 (mk___split_fields__ref1 l__split_fields3)))

;; H
  (assert
  (= l__split_fields4 my_ordered_sets__n__replace_element__container__fields))

;; H
  (assert (= (to_rep o23) 1))

;; H
  (assert (= (to_rep1 o24) 1))

;; H
  (assert (= o25 (mk___split_fields o24 o23)))

;; H
  (assert (= o26 (mk___rep o25)))

;; H
  (assert
  (and
  (and
  (and
  (= (oeq2 (model__ (mk___rep1 l__split_discrs l__split_fields4))
     (model__
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace__container__fields))) true)
  (= (oeq4
     (positions
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace__container__fields))
     (positions (mk___rep1 l__split_discrs l__split_fields4))) true))
  (= (bool_eq
     (get
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace__container__fields))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace__container__fields)) o26)) o26) true))
  (= (equal_except (elements (mk___rep1 l__split_discrs l__split_fields4))
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace__container__fields))
     (find
     (elements
     (mk___rep1 l__split_discrs
     my_ordered_sets__n__replace__container__fields)) o26)) true)))

;; H
  (assert (= result6 (mk___split_fields__ref1 l__split_fields4)))

;; H
  (assert
  (= l__split_fields5 my_ordered_sets__n__replace__container__fields))

;; H
  (assert
  (let ((temp___632 (elements (mk___rep1 l__split_discrs l__split_fields5))))
  (forall ((temp___631 Int))
  (=>
  (and (in_range4 temp___631)
  (= (iter_has_element temp___632 temp___631) true))
  (exists ((i us_rep2))
  (and
  (= (has_key (positions (mk___rep1 l__split_discrs l__split_fields5)) i) true)
  (= (bool_eq
     (get (elements (mk___rep1 l__split_discrs l__split_fields5))
     (get1 (positions (mk___rep1 l__split_discrs l__split_fields5)) i))
     (get temp___632 temp___631)) true)))))))

;; H
  (assert
  (and
  (and
  (= (oeq2
     (model__
     (mk___rep1 k__split_discrs my_ordered_sets__n__assign__target__fields))
     (model__ (mk___rep1 l__split_discrs l__split_fields5))) true)
  (= (oeq3
     (elements
     (mk___rep1 k__split_discrs my_ordered_sets__n__assign__target__fields))
     (elements (mk___rep1 l__split_discrs l__split_fields5))) true))
  (= (length
     (mk___rep1 k__split_discrs my_ordered_sets__n__assign__target__fields))
  (length (mk___rep1 l__split_discrs l__split_fields5)))))

;; H
  (assert
  (= result7 (mk___split_fields__ref1 (mk___split_fields1 k__split_fields))))

;; H
  (assert (= k__split_fields1 my_ordered_sets__n__assign__target__fields))

;; H
  (assert
  (and
  (and
  (and
  (= (oeq2
     (model__
     (mk___rep1 l__split_discrs my_ordered_sets__n__move__target__fields))
     (model__ (mk___rep1 k__split_discrs k__split_fields1))) true)
  (= (oeq3
     (elements
     (mk___rep1 l__split_discrs my_ordered_sets__n__move__target__fields))
     (elements (mk___rep1 k__split_discrs k__split_fields1))) true))
  (= (length (mk___rep1 k__split_discrs k__split_fields1)) (length
                                                           (mk___rep1
                                                           l__split_discrs
                                                           my_ordered_sets__n__move__target__fields))))
  (= (length
     (mk___rep1 k__split_discrs my_ordered_sets__n__move__source__fields)) 0)))

;; H
  (assert (= result8 (mk___split_fields__ref1 l__split_fields5)))

;; H
  (assert (= l__split_fields6 my_ordered_sets__n__move__target__fields))

;; H
  (assert (= result9 (mk___split_fields__ref1 k__split_fields1)))

;; H
  (assert (= k__split_fields2 my_ordered_sets__n__move__source__fields))

(assert
;; WP_parameter_def
 ;; File "my_ordered_sets.adb", line 4, characters 0-0
  (not
  (= (contains (model__ (mk___rep1 l__split_discrs l__split_fields6))
     (mk___rep (mk___split_fields (of_rep1 1) (of_rep 1)))) true)))
(check-sat)
(exit)
